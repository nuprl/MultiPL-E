name: HumanEval_119_match_parens
language: julia
prompt: "\"\"\"\n    You are given a list of two strings, both strings consist of\
  \ open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check\
  \ if it is possible to concatenate the two strings in\n    some order, that the\
  \ resulting string will be good.\n    A string S is considered to be good if and\
  \ only if all parentheses in S\n    are balanced. For example: the string '(())()'\
  \ is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way\
  \ to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(',\
  \ ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
  ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
  (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) ==\
  \ \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
  ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
  )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\"\
  , \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"\
  (\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
completions: ["    stack = Stack()\n    for s in lst\n        if s == '('\n      \
    \      push!(stack, s)\n        elseif s == ')'\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return 'No'\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    if isempty(stack)\n        return 'Yes'\n    else\n\
    \        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a number is prime. \nA prime\
    \ number is a natural number greater than 1 that has no positive divisors other\
    \ than 1 and itself.\nA prime number is a natural number greater than 1 that has\
    \ no positive divisors other than 1 and itself.\nA prime number is a natural number\
    \ greater than 1 that has no positive divisors other than 1 and itself.\nA prime\
    \ number is a natural number greater than 1 that has no positive divisors other\
    \ than 1 and itself.\nA prime number is a natural number greater than 1 that has\
    \ no positive divisors other than 1 and itself.\nA prime number is a natural number\
    \ greater than 1 that has no positive divisors other than 1 and itself.\nA prime\
    \ number is a natural number greater than 1 that has no positive divisors other\
    \ than 1 and itself.\nA prime number is a natural number greater than 1 that has\
    \ no positive divisors other than 1 and itself.\nA prime number is a natural number\
    \ greater than 1 that has no positive divisors other than 1 and itself.\nA prime\
    \ number is a natural number greater than 1 that has no positive divisors other\
    \ than 1 and itself.\nA prime number is a natural number greater than 1 that has\
    \ no positive divisors other than 1 and itself.\nA prime number is a natural number\
    \ greater than 1 that has no positive divisors other than 1 and itself.\nA prime\
    \ number is a natural number greater than 1 that has no positive divisors other\
    \ than 1 and itself.\nA prime number is a natural number greater than 1 that has\
    \ no positive divisors other than 1 and itself.\nA prime number is a natural number\
    \ greater than 1 that has no positive divisors other than 1 and itself.\nA prime\
    \ number is a natural number greater than 1 that has no positive divisors other\
    \ than 1 and itself.\nA prime number is a natural number greater than 1 that has\
    \ no positive divisors other than 1 and itself.\nA prime number is a natural number\
    \ greater than 1 that has no positive divisors other than 1 and itself.\nA prime\
    \ number is a natural number greater than 1 that has no positive divisors other\
    \ than 1 and itself.\nA prime number is a natural number greater than 1 that has\
    \ no positive divisors other than 1 and itself.\nA prime number is a natural number\
    \ greater than 1 that has no positive divisors ", "    stack = Stack()\n    for\
    \ s in lst\n        if s == '('\n            push!(stack, s)\n        elseif s\
    \ == ')'\n            if isempty(stack)\n                return 'No'\n       \
    \     else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    if isempty(stack)\n        return 'Yes'\n    else\n        return 'No'\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that checks if a number is prime or not. Your function\
    \ should take in a single number as an argument and return a boolean.", "    stack\
    \ = Vector{String}()\n    for s in lst\n        if s == '('\n            push!(stack,\
    \ s)\n        elseif s == ')'\n            if isempty(stack)\n               \
    \ return 'No'\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    if isempty(stack)\n        return 'Yes'\n    else\n\
    \        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a number is prime. Your function\
    \ should take one integer number as input, and return 'Yes' if it is prime and\
    \ 'No' otherwise.", "    stack = Stack()\n    for s in lst\n        if s == \"\
    (\"\n            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"((\", \"(\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    (\", \"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(\",\
    \ \"(\", \"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    (\", \"(\", \"(\", \"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(\", \"(\",\
    \ \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"", "    \n    stack = Stack()\n\
    \    stack.append(lst[1])\n    \n    for s in lst[2:end]\n        if s == \"(\"\
    \n            stack.append(s)\n        elseif s == \")\"\n            if stack.length()\
    \ == 0\n                return \"No\"\n            else\n                popped\
    \ = stack.pop()\n                if popped != s\n                    return \"\
    No\"\n                else\n                    stack.append(s)\n            \
    \    end\n            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"((\", \"))\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"((\", \"))\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ((\", \"))\", \"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ((\", \"))\", \"(\", \"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ((\", \"))\", \"(\", \"(\", \"(\", \"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"((\", \"))\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"((\", \"))\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"", " \
    \   \n    stack = Stack()\n    \n    for s in lst\n        if s == '('\n     \
    \       push!(stack, s)\n        elseif s == ')'\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return 'No'\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return 'Yes'\n   \
    \ else\n        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens([')',\
    \ ')'])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is prime. \nA prime number is a natural number greater than 1 that has no positive\
    \ divisors other than 1 and itself.\nFor example, 5 is a prime number, because\
    \ all positive divisors are 1, 2, and 5.\nWrite a function that checks if a number\
    \ is prime.", "    \n    stack = Stack()\n    \n    for s in lst\n        if s\
    \ == '('\n            push!(stack, s)\n        elseif s == ')'\n            if\
    \ isempty(stack)\n                return 'No'\n            else\n            \
    \    pop!(stack)\n            end\n        end\n    end\n    \n    if isempty(stack)\n\
    \        return 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([')', ')'])\n</cell>\n<text>\nExercise 2\nWrite a function that checks\
    \ if a binary tree is balanced.", "    stack = Stack()\n    for s in lst\n   \
    \     if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n\
    \            if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.4>\nmatch_parens(['()(', ')'])\n</cell>\n<code language=julia-1.4>\n\
    match_parens(['()', ')'])\n</cell>\n<code language=julia-1.4>\nmatch_parens(['(',\
    \ ')'])\n</cell>\n<code language=julia-1.4>\nmatch_parens(['(', ')', '(', ')'])\n\
    </cell>\n<code language=julia-1.4>\nmatch_parens(['(', ')', '(', ')', '(', ')'])\n\
    </cell>\n<code language=julia-1.4>\nmatch_parens(['(', ')', '(', ')', '(', ')',\
    \ '(', ')'])\n</cell>\n<code language=julia-1.4>\nmatch_parens(['(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.4>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.4>\n\
    match_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')'])\n</cell>\n<code language=julia-1.4>\nmatch_parens(['(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')'])\n</cell>\n<code language=julia-1.4>\nmatch_parens(['(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')", "    stack\
    \ = Stack()\n    for s in lst\n        if s == '('\n            push!(stack, s)\n\
    \        elseif s == ')'\n            if isempty(stack)\n                return\
    \ 'No'\n            else\n                pop!(stack)\n            end\n     \
    \   else\n            if isempty(stack)\n                return 'No'\n       \
    \     else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    if isempty(stack)\n        return 'Yes'\n    else\n        return 'No'\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')',\
    \ '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ", "    \n    stack = Stack()\n\
    \    stack.append(lst[1])\n    \n    for i = 2:length(lst)\n        if lst[i]\
    \ == '('\n            stack.append(lst[i])\n        elseif lst[i] == ')'\n   \
    \         if length(stack) == 0 \n                return 'No'\n            elseif\
    \ length(stack) == 1 \n                stack.pop()\n            else\n       \
    \         stack.pop()\n                stack.append(lst[i])\n            end\n\
    \        else\n            if length(stack) == 0 \n                return 'No'\n\
    \            elseif length(stack) == 1 \n                stack.pop()\n       \
    \     else\n                stack.pop()\n                stack.append(lst[i])\n\
    \            end\n        end\n    end\n    \n    if length(stack) == 0 \n   \
    \     return 'Yes'\n    elseif length(stack) == 1 \n        stack.pop()\n    else\n\
    \        stack.pop()\n        stack.append(lst[end])\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')',\
    \ '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens(", "    stack = Vector{String}()\n    for\
    \ s in lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif\
    \ s == \")\"\n            if isempty(stack)\n                return \"No\"\n \
    \           else\n                pop!(stack)\n            end\n        else\n\
    \            if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    return\
    \ \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\", \"()\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\", \"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\", \"()\",\
    \ \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\",\
    \ \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\",\
    \ \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\",\
    \ \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\",\
    \ \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()", "    \n    stack = Vector{String}()\n\
    \    \n    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n\
    \        elseif s == \")\"\n            if isempty(stack)\n                return\
    \ \"No\"\n            else\n                pop!(stack)\n            end\n   \
    \     else\n            if isempty(stack)\n                return \"No\"\n   \
    \         else\n                pop!(stack)\n            end\n        end\n  \
    \  end\n    \n    if isempty(stack)\n        return \"Yes\"\n    else\n      \
    \  return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"\
    ])\n</cell>\n", "    stack = Stack()\n    for s in lst\n        if s == '('\n\
    \            push!(stack, s)\n        elseif s == ')'\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    if isempty(stack)\n        return\
    \ 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens([')',\
    \ ')'])\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a number\
    \ is prime or not. You may use the\nfollowing algorithm:", "    \n    stack =\
    \ Vector{String}()\n    \n    for s in lst\n        if s == '('\n            push!(stack,\
    \ s)\n        elseif s == ')'\n            if isempty(stack)\n               \
    \ return 'No'\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return 'Yes'\n   \
    \ else\n        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>", "    \n    stack\
    \ = Stack()\n    \n    for s in lst\n        if s == \"(\"\n            push!(stack,\
    \ s)\n        elseif s == \")\"\n            if isempty(stack)\n             \
    \   return \"No\"\n            else\n                pop!(stack)\n           \
    \ end\n        else\n            if isempty(stack)\n                return \"\
    No\"\n            else\n                pop!(stack)\n            end\n       \
    \ end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n    else\n\
    \        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')", "    stack = Stack()\n    for s\
    \ in lst\n        if s == '('\n            push!(stack, s)\n        elseif s ==\
    \ ')'\n            if isempty(stack)\n                return 'No'\n          \
    \  else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    if isempty(stack)\n        return 'Yes'\n    else\n        return 'No'\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')()'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')()()'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')()()()'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')()()()()'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')()()()()()'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')()()()()()()'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')()()()()()()()'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')()()()()()()()()'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')()()()()()()()()()'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')()()()()()()()()()()'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')()()()()()()()()()()'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')()()()()()()()()()()()'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')()()()()()()()()()()()()'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')()()()()()()()()()()()()()'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(", "    stack = Vector{String}()\n\
    \    for s in lst\n        if s == '('\n            push!(stack, s)\n        elseif\
    \ s == ')'\n            if isempty(stack)\n                return 'No'\n     \
    \       else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    if isempty(stack)\n        return 'Yes'\n    else\n        return 'No'\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that checks if a given string is a valid mathematical\
    \ expression. \nThe string should only consist of numbers, +, -, *, /, ^, and\
    \ parentheses.", "    stack = Stack()\n    for s in lst\n        if s == \"(\"\
    \n            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"((\", \"(\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    (\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(\", \"(\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"(\", \"(\"])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    (\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(\", \"(\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"(\", \"(\"])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    (\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(\", \"(\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"(\", \"(\"])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    (\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(\", \"(\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"(\", \"(\"])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    (\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_paren", "    stack = Stack()\n\
    \    for s in lst\n        if s == '('\n            push!(stack, s)\n        elseif\
    \ s == ')'\n            if isempty(stack)\n                return 'No'\n     \
    \       else\n                pop!(stack)\n            end\n        else\n   \
    \         if isempty(stack)\n                return 'No'\n            else\n \
    \               pop!(stack)\n            end\n        end\n    end\n    if isempty(stack)\n\
    \        return 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([')', ')'])\n</cell>\n<text>\nExercise 2\nWrite a function that checks\
    \ if a binary tree is balanced.", "    stack = Stack()\n    for s in lst\n   \
    \     if s == '('\n            push!(stack, s)\n        elseif s == ')'\n    \
    \        if isempty(stack)\n                return 'No'\n            else\n  \
    \              pop!(stack)\n            end\n        end\n    end\n    if isempty(stack)\n\
    \        return 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([')', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', '(', '(', ')'])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens(['(', '(', '(', '(', ')'])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens(['(', '(', '(', '(', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', '(', '(', '(', '(', '(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', '(', '(', '(', '(', '(',\
    \ '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', '(', '(',\
    \ '(', '(', '(', '(', '(', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ '(', '(', '(', '(', '(', '(', '(', '(', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(',\
    \ '(', '(', '(', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(",
  "    stack = Vector{String}()\n    for s in lst\n        if s == '('\n         \
    \   push!(stack, s)\n        elseif s == ')'\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    if isempty(stack)\n        return\
    \ 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    match_parens(['()(', ')'])\n</cell>\n<code language=julia-1.4>\nmatch_parens([')',\
    \ ')'])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is prime or not. Your function should take one number as input and return 'Yes'\
    \ if it's prime and 'No' otherwise.", "    \n    stack = Stack()\n    \n    for\
    \ s in lst\n        if s == '('\n            push!(stack, s)\n        elseif s\
    \ == ')'\n            if isempty(stack)\n                return 'No'\n       \
    \     else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    \n    if isempty(stack)\n        return 'Yes'\n    else\n        return 'No'\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that checks if a given string is a valid phone number.",
  "    \n    if lst.size == 0\n        return 'No'\n    \n    if lst.size == 1\n \
    \       if lst[0] == '('\n            return 'Yes'\n        else\n           \
    \ return 'No'\n    end\n    \n    stack = Stack()\n    \n    for s in lst\n  \
    \      if s == '('\n            push!(stack, s)\n        elseif s == ')'\n   \
    \         if !isempty(stack)\n                if pop!(stack) == '('\n        \
    \            return 'Yes'\n                else\n                    return 'No'\n\
    \                end\n            else\n                return 'No'\n        \
    \    end\n        end\n    end\n    \n    return 'No'\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_", "    \n    stack = Stack()\n    \n    for s in lst\n        if s == '('\n\
    \            push!(stack, s)\n        elseif s == ')'\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return 'No'\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return 'Yes'\n   \
    \ else\n        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens([')',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')'])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')', '(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '", "    \n    stack = Stack()\n    for s in lst\n        if s == '('\n\
    \            push!(stack, s)\n        elseif s == ')'\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    if isempty(stack)\n        return\
    \ 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens([')',\
    \ ')'])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns a new string where all occurrences of '(' and ')' have been replaced\
    \ by '-'.", "    \n    stack = Stack()\n    for s in lst\n        if s == '('\n\
    \            push!(stack, s)\n        elseif s == ')'\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    if isempty(stack)\n        return\
    \ 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens([')',\
    \ ')'])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as\
    \ input and returns a string with all the characters in lowercase and with all\
    \ the characters in uppercase.", "    \n    stack = Stack()\n    \n    for s in\
    \ lst\n        if s == '('\n            push!(stack, s)\n        elseif s == ')'\n\
    \            if isempty(stack)\n                return 'No'\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    \n  \
    \  if isempty(stack)\n        return 'Yes'\n    else\n        return 'No'\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['())', ')'])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')()'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')()()'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')()()()'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')()()()()'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')()()()()()'])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens(['(', ')()()()()()()'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')()()()()()()()'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')()()()()()()()()'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')()()()()()()()()()'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')()()()()()()()()()()'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')()()()()()()()()()()()'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')()()()()()()()()()()()()'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')()()()()()()()()()()()()()'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')()()()()()()()()()()()()()()'])\n</cell", "    stack = Vector{String}()\n\
    \    stack = push!(stack, \"\")\n    stack = push!(stack, \"\")\n    for s in\
    \ lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif s ==\
    \ \")\"\n            if isempty(stack)\n                return \"No\"\n      \
    \      else\n                pop!(stack)\n            end\n        else\n    \
    \        if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    return\
    \ \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"((\", \"))\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"((\", \"))\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"((\", \"))\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"((\", \"))\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ((\", \"))\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"((\", \"))\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"((\", \"))\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"((\", \"))\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"((\", \"))\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ((\", \"))\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"((\", \"))\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"((\", \"))\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"((\", \"))\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"((\", \"))\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ((\", \"))\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"((\", \"))\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"((\", \"))\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"((\", \"))\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"((\", \"))\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ((\", \"))\"])\n</cell>\n", "    \n    stack = Stack()\n    for s in lst\n   \
    \     if s == '('\n            push!(stack, s)\n        elseif s == ')'\n    \
    \        if isempty(stack)\n                return 'No'\n            else\n  \
    \              pop!(stack)\n            end\n        end\n    end\n    if isempty(stack)\n\
    \        return 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([')', ')'])\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string as input and returns a string with all the letters in lower case.",
  "    stack = Stack()\n    for s in lst\n        if s == '('\n            push!(stack,\
    \ s)\n        elseif s == ')'\n            if isempty(stack)\n               \
    \ return 'No'\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    if isempty(stack)\n        return 'Yes'\n    else\n\
    \        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.4>\nmatch_parens(['()(',\
    \ ')'])\n</cell>\n<code language=julia-1.4>\nmatch_parens([')', ')'])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a binary tree is balanced.",
  "    \n    stack = Stack()\n    for s in lst\n        if s == '('\n            push!(stack,\
    \ s)\n        elseif s == ')'\n            if isempty(stack)\n               \
    \ return 'No'\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return 'Yes'\n   \
    \ else\n        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    match_parens(['()(', ')'])\n</cell>\n<code language=julia-1.4>\nmatch_parens([')',\
    \ ')'])\n</cell>\n<text>\nExercise\nWrite a function that takes a string as input\
    \ and returns the number of parentheses in the string.", "    stack = Vector{String}()\n\
    \    stack = push!(stack, \"\")\n    for s in lst\n        if s == '('\n     \
    \       push!(stack, s)\n        elseif s == ')'\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=string,julia |>\n<code>", "    \n    stack = Stack()\n\
    \    \n    for s in lst\n        if s == '('\n            push!(stack, s)\n  \
    \      elseif s == ')'\n            if isempty(stack)\n                return\
    \ 'No'\n            else\n                pop!(stack)\n            end\n     \
    \   else\n            if isempty(stack)\n                return 'No'\n       \
    \     else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    \n    if isempty(stack)\n        return 'Yes'\n    else\n        return 'No'\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns a new string where\
    \ every character is capitalized.", "    \n    stack = Stack()\n    \n    for\
    \ s in lst\n        if s == '('\n            push!(stack, s)\n        elseif s\
    \ == ')'\n            if isempty(stack)\n                return 'No'\n       \
    \     else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    \n    if isempty(stack)\n        return 'Yes'\n    else\n        return 'No'\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that checks if a binary tree is balanced.", "   \
    \ stack = Stack()\n    for s in lst\n        if s == '('\n            push!(stack,\
    \ s)\n        elseif s == ')'\n            if isempty(stack)\n               \
    \ return 'No'\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    if isempty(stack)\n        return 'Yes'\n    else\n\
    \        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')()'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')()()'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')()()()'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')()()()()'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')()()()()()'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')()()()()()()'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')()()()()()()()'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')()()()()()()()()'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')()()()()()()()()()'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')()()()()()()()()()()'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')()()()()()()()()()()()'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')()()()()()()()()()()()()'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')()()()()()()()()()()()()()'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')()()()()", "    stack\
    \ = Stack()\n    stack.append(lst[1])\n    stack.append(lst[2])\n    \n    for\
    \ paren in lst[1]\n        if paren == '('\n            stack.pop()\n        elseif\
    \ paren == ')'\n            if stack.length() == 0\n                return 'No'\n\
    \            else\n                stack.pop()\n            end\n        else\n\
    \            stack.append(paren)\n        end\n    end\n    return 'Yes'\nend\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['()(', ')'])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ", "    stack = Stack()\n    for\
    \ s in lst\n        if s == '('\n            push!(stack, s)\n        elseif s\
    \ == ')'\n            if isempty(stack)\n                return 'No'\n       \
    \     else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    if isempty(stack)\n        return 'Yes'\n    else\n        return 'No'\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that checks if a number is prime. You may use any\
    \ number as input.", "    stack = Stack()\n    for s in lst\n        if s == '('\n\
    \            push!(stack, s)\n        elseif s == ')'\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    if isempty(stack)\n        return\
    \ 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    match_parens(['()(', ')'])\n</cell>\n<code language=julia-1.4>\nmatch_parens([')',\
    \ ')'])\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a number\
    \ is prime. Your function should take in a number as an argument and return a\
    \ boolean indicating whether the number is prime or not.", "    \n    stack =\
    \ Stack()\n    for s in lst\n        if s == '('\n            push!(stack, s)\n\
    \        elseif s == ')'\n            if isempty(stack)\n                return\
    \ 'No'\n            else\n                pop!(stack)\n            end\n     \
    \   end\n    end\n    if isempty(stack)\n        return 'Yes'\n    else\n    \
    \    return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a binary tree is balanced.",
  "    stack = Stack()\n    for s in lst\n        if s == '('\n            push!(stack,\
    \ s)\n        elseif s == ')'\n            if isempty(stack)\n               \
    \ return 'No'\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    if isempty(stack)\n        return 'Yes'\n    else\n\
    \        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.0>\n@assert\
    \ match_parens(['()(', ')']) == 'Yes'\n@assert match_parens([')', ')']) == 'No'\n\
    </cell>\n<text>\nPart III. Longest Palindromic Substring\nGiven a string S, find\
    \ the longest palindromic substring in S. You may assume that the given string\
    \ consists of only lowercase English letters (a-z).", "    stack = Stack()\n \
    \   for s in lst\n        if s == '('\n            push!(stack, s)\n        elseif\
    \ s == ')'\n            if isempty(stack)\n                return 'No'\n     \
    \       else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    if isempty(stack)\n        return 'Yes'\n    else\n        return 'No'\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', '(', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ '(', '(', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ '(', '(', '(', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ '(', '(', '(', '(', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ '(', '(', '(', '(', '(', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', '(', '(', '(', '(', '(', '(', '(', ')', '(', ')', '(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', '(', '(', '(', '(', '(',\
    \ '(', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', '(', '(', '(', '(', '(', '(', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ '(', '(', '(', '(', '(', '(', '(', ')', '(', ')', '(', ')', '(', ')", "    \n\
    \    stack = Stack()\n    \n    for s in lst\n        if s == '('\n          \
    \  push!(stack, s)\n        elseif s == ')'\n            if isempty(stack)\n \
    \               return 'No'\n            else\n                pop!(stack)\n \
    \           end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens([')',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')'])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')', '(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n\
    <code language=julia-", "    stack = Stack()\n    for s in lst\n        if s ==\
    \ '('\n            push!(stack, s)\n        elseif s == ')'\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    if isempty(stack)\n        return\
    \ 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens([')',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', '(', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ '(', '(', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ '(', '(', '(', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ '(', '(', '(', '(', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ '(', '(', '(', '(', '(', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ '(', '(', '(', '(', '(', '(', '(', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(',\
    \ '(', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', '(',\
    \ '(', '(', '(', '(', '(', '(', '(', '(', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(',\
    \ '(', '(', '(', ')", "    stack = Stack()\n    stack.append(lst[1])\n    \n \
    \   for i in lst[2:end]\n        if i == '('\n            stack.append(i)\n  \
    \      elseif i == ')'\n            if stack.length() == 0\n                return\
    \ 'No'\n            else\n                stack.pop()\n            end\n     \
    \   end\n    end\n    return 'Yes'\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')('])\n</cell>\n<code language=julia-1.5>", "    \n    stack = Stack()\n  \
    \  stack.append(lst[1])\n    \n    for i in lst[2:end]\n        if i == '('\n\
    \            stack.append(i)\n        elseif i == ')'\n            if stack.length()\
    \ == 0\n                return 'No'\n            else\n                stack.pop()\n\
    \            end\n        end\n    end\n    \n    if stack.length() == 0\n   \
    \     return 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['()', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')()'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')()', '(', ')'])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens(['(', ')()', '(', ')', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')()', '(', ')', '(', ')', '(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')()', '(', ')',\
    \ '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')()', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')()', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')()', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens(['(', ')()', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')()', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(", "    stack = Stack()\n    for s in lst\n        if s ==\
    \ '('\n            push!(stack, s)\n        elseif s == ')'\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    if isempty(stack)\n        return\
    \ 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens([')',\
    \ ')'])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is prime or not. \nA number is prime if and only if it is not divisible by any\
    \ number between 2 and its square root. \nThe function should return 'Yes' if\
    \ a number is prime and 'No' otherwise.", "    \n    stack = Stack()\n    \n \
    \   for s in lst\n        if s == '('\n            push!(stack, s)\n        elseif\
    \ s == ')'\n            if isempty(stack)\n                return 'No'\n     \
    \       else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    \n    if isempty(stack)\n        return 'Yes'\n    else\n        return 'No'\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n\
    <code language=julia-1.5>\nmatch_paren", "    stack = Stack()\n    for s in lst\n\
    \        if s == '('\n            push!(stack, s)\n        elseif s == ')'\n \
    \           if isempty(stack)\n                return 'No'\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    if isempty(stack)\n\
    \        return 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['()', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', '(', '(', ')'])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens(['(', '(', '(', '(', ')'])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens(['(', '(', '(', '(', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', '(', '(', '(', '(', '(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', '(', '(', '(', '(', '(',\
    \ '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', '(', '(',\
    \ '(', '(', '(', '(', '(', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ '(', '(', '(', '(', '(', '(', '(', '(', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(',\
    \ '(', '(', '(', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')'])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '",
  "    stack = Stack()\n    for s in lst\n        if s == '('\n            push!(stack,\
    \ s)\n        elseif s == ')'\n            if isempty(stack)\n               \
    \ return 'No'\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    if isempty(stack)\n        return 'Yes'\n    else\n\
    \        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(", "    stack = Stack()\n    for s in lst\n\
    \        if s == '('\n            push!(stack, s)\n        elseif s == ')'\n \
    \           if isempty(stack)\n                return 'No'\n            else\n\
    \                pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    if isempty(stack)\n        return\
    \ 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens([')',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', '(', '(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', '(', '(', ')', '(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', '(', '(', ')', '(', ')',\
    \ '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', '(', '(',\
    \ ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ '(', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', '(', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', '(', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens(['(', '(', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', '(', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ '(', '(', ')', '", "    stack = Stack()\n    for s in lst\n        if s == '('\n\
    \            push!(stack, s)\n        elseif s == ')'\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return 'Yes'\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([')', ')'])\n</cell>\n<text>\nExercise 2\nWrite a function that checks\
    \ if a given string is a palindrome.", "    \n    stack = Vector{String}()\n \
    \   \n    for s in lst\n        if s == '('\n            push!(stack, s)\n   \
    \     elseif s == ')'\n            if isempty(stack)\n                return 'No'\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    \n    if isempty(stack)\n        return 'Yes'\n    else\n      \
    \  return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a number is prime or not.\
    \ \nA number is prime if and only if it is a whole number greater than 1 and not\
    \ a perfect square. \nA perfect square is a number that is the product of two\
    \ whole numbers. \nFor example: 6 is a perfect square, because it is the product\
    \ of 3 and 5.\nWrite a function that checks if a number is prime or not. \nA number\
    \ is prime if and only if it is a whole number greater than 1 and not a perfect\
    \ square. \nA perfect square is a number that is the product of two whole numbers.\
    \ \nFor example: 6 is a perfect square, because it is the product of 3 and 5.\n\
    Write a function that checks if a number is prime or not. \nA number is prime\
    \ if and only if it is a whole number greater than 1 and not a perfect square.\
    \ \nA perfect square is a number that is the product of two whole numbers. \n\
    For example: 6 is a perfect square, because it is the product of 3 and 5.\nWrite\
    \ a function that checks if a number is prime or not. \nA number is prime if and\
    \ only if it is a whole number greater than 1 and not a perfect square. \nA perfect\
    \ square is a number that is the product of two whole numbers. \nFor example:\
    \ 6 is a perfect square, because it is the product of 3 and 5.\nWrite a function\
    \ that checks if a number is prime or not. \nA number is prime if and only if\
    \ it is a whole number greater than 1 and not a perfect square. \nA perfect square\
    \ is a number that is the product of two whole numbers. \nFor example: 6 is a\
    \ perfect square, because it is the product of 3 and 5.\nWrite a function that\
    \ checks if a number is prime or not. \nA number is prime if and only if it is\
    \ a whole number greater than 1 and not a perfect square. \nA perfect square is\
    \ a number that is the product of two whole numbers. \nFor example: 6 is a perfect\
    \ square, because it is the product of 3 and 5.\nWrite a function that checks\
    \ if a number is prime or not. \nA number is prime if and only if it is a whole\
    \ number greater than 1 and not a perfe", "    \n    stack = Vector{String}()\n\
    \    \n    for s in lst\n        if s == '('\n            push!(stack, s)\n  \
    \      elseif s == ')'\n            if isempty(stack)\n                return\
    \ 'No'\n            else\n                pop!(stack)\n            end\n     \
    \   end\n    end\n    \n    if isempty(stack)\n        return 'Yes'\n    else\n\
    \        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that checks if a binary tree is balanced.",
  "    stack = Stack()\n    for s in lst\n        if s == '('\n            push!(stack,\
    \ s)\n        elseif s == ')'\n            if isempty(stack)\n               \
    \ return 'No'\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    if isempty(stack)\n        return 'Yes'\n    else\n\
    \        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a number is prime or not.\
    \ \nThe function should take one integer number as an argument and return a boolean.",
  "    stack = Stack()\n    for s in lst\n        if s == '('\n            push!(stack,\
    \ s)\n        elseif s == ')'\n            if isempty(stack)\n               \
    \ return 'No'\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    if isempty(stack)\n        return 'Yes'\n    else\n\
    \        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['()', '()'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['()', '()', '()'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()',\
    \ '()', '()', '()'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()',\
    \ '()', '()', '()', '()'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()',\
    \ '()', '()', '()', '()', '()'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()',\
    \ '()', '()', '()', '()', '()', '()'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()',\
    \ '()', '()', '()', '()', '()', '()', '()'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['()', '()', '()', '()', '()', '()', '()', '()', '()', '()'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['()', '()', '()', '()', '()', '()', '()',\
    \ '()', '()', '()', '()', '()'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()',\
    \ '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['()', '()', '()', '()', '()',\
    \ '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()',\
    \ '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()',\
    \ '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()',\
    \ '()', '()', '()", "    stack = Stack()\n    for s in lst\n        if s == '('\n\
    \            push!(stack, s)\n        elseif s == ')'\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    if isempty(stack)\n        return\
    \ 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens([')',\
    \ ')'])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is prime. \nA prime number is a natural number greater than 1 that has no positive\
    \ divisors other than 1 and itself.", "    stack = Stack()\n    for s in lst\n\
    \        if s == '('\n            push!(stack, s)\n        elseif s == ')'\n \
    \           if isempty(stack)\n                return 'No'\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    if isempty(stack)\n\
    \        return 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([')', ')'])\n</cell>\n<text>\nExercise 3\nWrite a function that checks\
    \ if a binary tree is balanced.", "    stack = Stack()\n    for s in lst\n   \
    \     if s == '('\n            push!(stack, s)\n        elseif s == ')'\n    \
    \        if isempty(stack)\n                return 'No'\n            else\n  \
    \              pop!(stack)\n            end\n        end\n    end\n    if isempty(stack)\n\
    \        return 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\nmatch_parens(['()(', ')'])\n</cell>\n<code language=julia-1.4>\n\
    match_parens([')', ')'])\n</cell>\n<text>\nExercise 2\nWrite a function that checks\
    \ if a number is prime (up to 10^9).", "    \n    stack = Stack()\n    \n    for\
    \ s in lst\n        if s == '('\n            push!(stack, s)\n        elseif s\
    \ == ')'\n            if isempty(stack)\n                return 'No'\n       \
    \     else\n                pop!(stack)\n            end\n        else\n     \
    \       if isempty(stack)\n                return 'No'\n            else\n   \
    \             pop!(stack)\n            end\n        end\n    end\n    \n    if\
    \ isempty(stack)\n        return 'Yes'\n    else\n        return 'No'\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that checks if a number is prime. \nA prime number is a\
    \ natural number greater than 1 that has no positive divisors other than 1 and\
    \ itself.\nThe number 2 is the only even prime number.\nThe number 5 is the only\
    \ odd prime number.\nThe number 7 is the only prime number.\nThe number 11 is\
    \ the only prime number.\nThe number 13 is the only prime number.\nThe number\
    \ 17 is the only prime number.\nThe number 19 is the only prime number.\nThe number\
    \ 23 is the only prime number.\nThe number 29 is the only prime number.\nThe number\
    \ 31 is prime since it has no positive divisors other than 1 and itself.\nThe\
    \ number 37 is the only prime number.\nThe number 41 (the sum of two primes next\
    \ to each other) is the only prime number.\nThe number 43 is the only prime number.\n\
    The number 47 is the only prime number.\nThe number 53 is the only prime number.\n\
    The number 59 is the only prime number.\nThe number 61 (the sum of two primes\
    \ next to each other) is the only prime number.\nThe number 67 (the sum of two\
    \ primes next to each other) is the only prime number.\nThe number 71 (the sum\
    \ of two primes next to each other) is the only prime number.\nThe number 73 (the\
    \ sum of two primes next to each other) is the only prime number.\nThe number\
    \ 79 (the sum of two primes next to each other) is the only prime number.\nThe\
    \ number 83 (the sum of two primes next to each other) is the only prime number.\n\
    The number 89 (the sum of two primes next to each other) is the only prime number.\n\
    The number 97 (the sum of two primes next to each other) is the only prime number.\n\
    The number 101 (the sum of two primes next to each other) is the only prime number.\n\
    The number 103 (the sum of two primes next to ", "    stack = Stack()\n    for\
    \ s in lst\n        if s == '('\n            push!(stack, s)\n        elseif s\
    \ == ')'\n            if isempty(stack)\n                return 'No'\n       \
    \     else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    return 'Yes'\nend\n</cell>\n<code language=julia-1.0>\nmatch_parens(['()(',\
    \ ')'])\n</cell>\n<code language=julia-1.0>\nmatch_parens(['(', ')'])\n</cell>\n\
    <code language=julia-1.0>\nmatch_parens(['(', ')', '(', ')'])\n</cell>\n<code\
    \ language=julia-1.0>\nmatch_parens(['(', ')', '(', ')', '(', ')'])\n</cell>\n\
    <code language=julia-1.0>\nmatch_parens(['(', ')', '(', ')', '(', ')', '(', ')'])\n\
    </cell>\n<code language=julia-1.0>\nmatch_parens(['(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.0>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.0>\n\
    match_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')'])\n</cell>\n<code language=julia-1.0>\nmatch_parens(['(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code\
    \ language=julia-1.0>\nmatch_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.0>\n\
    match_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.0>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')'])\n</cell>\n", "    \n    stack = Vector{String}()\n\
    \    \n    for s in lst\n        if s == '('\n            push!(stack, s)\n  \
    \      elseif s == ')'\n            if isempty(stack)\n                return\
    \ 'No'\n            else\n                pop!(stack)\n            end\n     \
    \   else\n            if isempty(stack)\n                return 'No'\n       \
    \     else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    \n    if isempty(stack)\n        return 'Yes'\n    else\n        return 'No'\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell",
  "    stack = Vector{String}()\n    stack = push!(stack, \"\")\n    for s in lst\n\
    \        if s == '('\n            push!(stack, s)\n        elseif s == ')'\n \
    \           if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([')', ')'])\n</cell>\n<text>\nExercise 2\nWrite a function that checks\
    \ if a binary tree is a valid binary search tree. \nA binary search tree is a\
    \ binary tree in which all nodes are sorted in ascending order.", "    stack =\
    \ Vector{String}()\n    stack = push!(stack, \"\")\n    for s in lst\n       \
    \ if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n    \
    \        if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    return\
    \ \"Yes\"\nend\n</cell>\n<code language=julia-1.3>\nmatch_parens([\"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.3>\nmatch_parens([\"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.3>\nmatch_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.3>\n\
    match_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.3>\nmatch_parens([\"\
    ()\", \"()\"])\n</cell>\n<code language=julia-1.3>\nmatch_parens([\"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.3>\nmatch_parens([\"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.3>\nmatch_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.3>\n\
    match_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.3>\nmatch_parens([\"\
    ()\", \"()\"])\n</cell>\n<code language=julia-1.3>\nmatch_parens([\"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.3>\nmatch_parens([\"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.3>\nmatch_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.3>\n\
    match_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.3>\nmatch_parens([\"\
    ()\", \"()\"])\n</cell>\n<code language=julia-1.3>\nmatch_parens([\"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.3>\nmatch_parens([\"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.3>\nmatch_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.3>\n\
    match_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.3>\nmatch_parens([\"\
    ()\", \"()\"])\n</cell>\n<code language=julia-1.3>\nmatch_parens([\"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.3>\nmatch_parens([\"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.3>\nmatch_parens([\"()\", \"()\"])\n</cell", "    \n  \
    \  stack = Stack()\n    stack.append(lst)\n    \n    while !isempty(stack)\n \
    \       str = pop!(stack)\n        if str == '('\n            push!(stack, str)\n\
    \        elseif str == ')'\n            if isempty(stack)\n                return\
    \ 'No'\n            else\n                pop!(stack)\n            end\n     \
    \   end\n    end\n    \n    return 'Yes'\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens([')',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', '(', '(', ')'])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens(['(', '(', '(', '(', ')'])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens(['(', '(', '(', '(', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', '(', '(', '(', '(', '(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', '(', '(', '(', '(', '(',\
    \ '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', '(', '(',\
    \ '(', '(', '(', '(', '(', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ '(', '(', '(', '(', '(', '(', '(', '(', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(',\
    \ '(', '(', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')'])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(',\
    \ '(', '(', '(', ')'])\n</cell>", "    \n    if length(lst) == 0 \n        return\
    \ \"No\"\n    \n    if length(lst) == 1 \n        if lst[1] == \"(\" \n      \
    \      return \"Yes\"\n        else \n            return \"No\"\n    end\n   \
    \ \n    stack = Stack()\n    \n    for x in lst\n        if x == \"(\" \n    \
    \        push!(stack, x)\n        else \n            if stack.length > 0 \n  \
    \              if stack[length(stack)-1] == \"(\" \n                    pop!(stack)\n\
    \                elseif stack[length(stack)-1] == \")\" \n                   \
    \ push!(stack, x)\n                else\n                    return \"No\"\n \
    \               end\n            else\n                return \"No\"\n       \
    \     end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\"\
    , \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\",\
    \ \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()", "    \n    stack = Stack()\n    for s in lst\n\
    \        if s == '('\n            push!(stack, s)\n        elseif s == ')'\n \
    \           if isempty(stack)\n                return 'No'\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    if isempty(stack)\n\
    \        return 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([')', ')'])\n</cell>\n<text>\nExercise 3\nWrite a function that checks\
    \ if a number is prime or not. You may want to use the sieve of Eratosthenes algorithm.",
  "    \n    stack = Stack()\n    for s in lst\n        if s == '('\n            push!(stack,\
    \ s)\n        elseif s == ')'\n            if isempty(stack)\n               \
    \ return 'No'\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    if isempty(stack)\n        return 'Yes'\n    else\n\
    \        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')'])", "    stack = Stack()\n    for\
    \ s in lst\n        if s == '('\n            push!(stack, s)\n        elseif s\
    \ == ')'\n            if isempty(stack)\n                return 'No'\n       \
    \     else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    if isempty(stack)\n        return 'Yes'\n    else\n        return 'No'\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that checks if a number is prime. Your function should\
    \ take in a number as input and output 'Yes' if it's a prime number, and 'No'\
    \ otherwise.", "    stack = Stack()\n    for s in lst\n        if s == '('\n \
    \           push!(stack, s)\n        elseif s == ')'\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    if isempty(stack)\n        return\
    \ 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens([')',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', '(', '(', '(',\
    \ '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(',\
    \ '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(',\
    \ '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(',\
    \ '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(',\
    \ '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(',\
    \ '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(',\
    \ '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(',\
    \ '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(',\
    \ '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(',\
    \ '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(',\
    \ '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(',\
    \ '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(", "    \n   \
    \ stack = Stack()\n    stack.append(lst[1])\n    \n    for i in lst[2:end]\n \
    \       if i == '('\n            stack.append(i)\n        elseif i == ')'\n  \
    \          if stack.pop() != i\n                return \"No\"\n            else\n\
    \                return \"Yes\"\n            end\n        end\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['()(', ')'])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the number of characters in it.",
  "    stack = Stack()\n    for s in lst\n        if s == '('\n            push!(stack,\
    \ s)\n        elseif s == ')'\n            if isempty(stack)\n               \
    \ return 'No'\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    if isempty(stack)\n        return 'Yes'\n    else\n\
    \        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a number is prime or not.\
    \ You may use the\nfollowing definition of a prime:", "    \n    if length(lst)\
    \ == 0 \n        return 'No'\n    end\n    \n    if lst[1] == '('\n        \n\
    \        if lst[2] == ')'\n            return 'Yes'\n        else\n          \
    \  return 'No'\n        end\n    else\n        \n        if lst[1] == ')'\n  \
    \          return 'No'\n        else\n            return 'Yes'\n        end\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert match_parens(['()(',\
    \ ')']) == 'Yes'\n@assert match_parens([')', ')']) == 'No'\n</cell>\n<text>\n\
    Part III. Palindrome check", "    stack = Stack()\n    for s in lst\n        if\
    \ s == '('\n            push!(stack, s)\n        elseif s == ')'\n           \
    \ if isempty(stack)\n                return 'No'\n            else\n         \
    \       pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    if isempty(stack)\n        return\
    \ 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    match_parens(['()(', ')'])\n</cell>\n<code language=julia-1.3>\nmatch_parens([')',\
    \ ')'])\n</cell>\n<code language=julia-1.3>\nmatch_parens(['(', ')'])\n</cell>\n\
    <code language=julia-1.3>\nmatch_parens(['(', ')', '(', ')'])\n</cell>\n<code\
    \ language=julia-1.3>\nmatch_parens(['(', ')', '(', ')', '(', ')'])\n</cell>\n\
    <code language=julia-1.3>\nmatch_parens(['(', ')', '(', ')', '(', ')', '(', ')'])\n\
    </cell>\n<code language=julia-1.3>\nmatch_parens(['(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.3>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.3>\n\
    match_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')'])\n</cell>\n<code language=julia-1.3>\nmatch_parens(['(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code\
    \ language=julia-1.3>\nmatch_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.3>\n\
    match_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ')'])\n</cell>", "    \n    stack = Stack()\n\
    \    \n    for s in lst\n        if s == '('\n            push!(stack, s)\n  \
    \      elseif s == ')'\n            if isempty(stack)\n                return\
    \ 'No'\n            else\n                pop!(stack)\n            end\n     \
    \   else\n            if isempty(stack)\n                return 'No'\n       \
    \     else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    \n    if isempty(stack)\n        return 'Yes'\n    else\n        return 'No'\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', '(', '(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', '(', '(', '(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', '(', '(', '(',\
    \ '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', '(', '(',\
    \ '(', '(', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ '(', '(', '(', '(', '(', '(', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(',\
    \ '(', '(', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')'])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(',\
    \ '(', '(', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ '(', '(', '(', '(', '(', '(', '(', '(', '", "    \n    stack = Stack()\n   \
    \ for s in lst\n        if s == '('\n            push!(stack, s)\n        elseif\
    \ s == ')'\n            if isempty(stack)\n                return 'No'\n     \
    \       else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    if isempty(stack)\n        return 'Yes'\n    else\n        return 'No'\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['()', '()'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()',\
    \ '()', '()'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()', '(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')', '(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')", "    stack = Vector{String}()\n\
    \    stack = push!(stack, \"\")\n    stack = push!(stack, \"\")\n    for s in\
    \ lst\n        if s == '('\n            push!(stack, s)\n        elseif s == ')'\n\
    \            if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        elseif isempty(stack)\n\
    \            return \"No\"\n        else\n            pop!(stack)\n          \
    \  push!(stack, s)\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([')', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')',\
    \ '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')',\
    \ '", "    \n    stack = Stack()\n    stack.append(lst[1])\n    \n    for elem\
    \ in lst[2:end]\n        if elem == \"(\"\n            stack.append(elem)\n  \
    \      elseif elem == \")\"\n            if stack.pop() == \"(\"\n           \
    \     stack.append(elem)\n            else\n                return \"No\"\n  \
    \          end\n        end\n    end\n    \n    if stack.pop() == \"(\"\n    \
    \    return \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"((\", \")(\", \")\"])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"(\", \")(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(\", \")(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    (\", \")(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(\"\
    , \")(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(\", \"\
    )(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(\", \")(\"\
    , \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(\", \")(\", \"\
    )\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(\", \")(\", \")\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(\", \")(\", \")\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"(\", \")(\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"(\", \")(\", \")\"])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"(\", \")(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(\", \")(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    (\", \")(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(\"\
    , \")(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(\", \"\
    )(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(\", \")(\"\
    , \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(\", \")(\", \"\
    )\"])\n</cell>", "    stack = Stack()\n    for s in lst\n        if s == '('\n\
    \            push!(stack, s)\n        elseif s == ')'\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    if isempty(stack)\n        return\
    \ 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens([')',\
    \ ')'])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is prime or not. You may assume that the number is an integer and greater than\
    \ 1.", "    stack = Stack()\n    for s in lst\n        if s == '('\n         \
    \   push!(stack, s)\n        elseif s == ')'\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    if isempty(stack)\n        return\
    \ 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    match_parens(['()(', ')'])\n</cell>\n<code language=julia-1.0>\nmatch_parens([')',\
    \ ')'])\n</cell>\n<code language=julia-1.0>\nmatch_parens(['(', ')'])\n</cell>\n\
    <code language=julia-1.0>\nmatch_parens(['(', ')('])\n</cell>\n<code language=julia-1.0>\n\
    match_parens(['(', ')('])\n</cell>\n<code language=julia-1.0>\nmatch_parens(['(',\
    \ ')('])\n</cell>\n<code language=julia-1.0>\nmatch_parens(['(', ')('])\n</cell>\n\
    <code language=julia-1.0>\nmatch_parens(['(', ')('])\n</cell>\n<code language=julia-1.0>\n\
    match_parens(['(', ')('])\n</cell>\n<code language=julia-1.0>\nmatch_parens(['(',\
    \ ')('])\n</cell>\n<code language=julia-1.0>\nmatch_parens(['(', ')('])\n</cell>\n\
    <code language=julia-1.0>\nmatch_parens(['(', ')('])\n</cell>\n<code language=julia-1.0>\n\
    match_parens(['(', ')('])\n</cell>\n<code language=julia-1.0>\nmatch_parens(['(',\
    \ ')('])\n</cell>\n<code language=julia-1.0>\nmatch_parens(['(', ')('])\n</cell>\n\
    <code language=julia-1.0>\nmatch_parens(['(', ')('])\n</cell>\n<code language=julia-1.0>\n\
    match_parens(['(', ')('])\n</cell>\n<code language=julia-1.0>\nmatch_parens(['(',\
    \ ')('])\n</cell>\n<code language=julia-1.0>\nmatch_parens(['(', ')('])\n</cell>\n\
    <code language=julia-1.0>\nmatch_parens(['(', ')('])\n</cell>\n<code language=julia-1.0>\n\
    match_parens(['(', ')('])\n</cell>\n<code language=julia-1.0>\nmatch_parens(['(',\
    \ ')('])\n", "    stack = Vector{String}()\n    stack = push!(stack, \"\")\n \
    \   for s in lst\n        if s == '('\n            push!(stack, s)\n        elseif\
    \ s == ')'\n            if isempty(stack)\n                return \"No\"\n   \
    \         else\n                pop!(stack)\n            end\n        else\n \
    \           if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    return\
    \ \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"((\", \")\"\
    )])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    (\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(\", \")\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"(\", \")\"])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    (\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(\", \")\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"(\", \")\"])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    (\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(\", \")\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"(\", \")\"])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    (\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(\", \")\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_paren", "    stack = Stack()\n    for\
    \ s in lst\n        if s == '('\n            push!(stack, s)\n        elseif s\
    \ == ')'\n            if isempty(stack)\n                return 'No'\n       \
    \     else\n                pop!(stack)\n            end\n        else\n     \
    \       if isempty(stack)\n                return 'No'\n            else\n   \
    \             pop!(stack)\n            end\n        end\n    end\n    return 'Yes'\n\
    end\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n<text>\nExercise\n\
    Write a function that checks if a number is prime or not. \nThe function should\
    \ take one argument, an integer $n$, and return 'Yes' if $n$ is prime and 'No'\
    \ otherwise.", "    stack = Stack()\n    stack.append(lst[1])\n    \n    for x\
    \ in lst[2:end]\n        if x == '('\n            stack.append(x)\n        elseif\
    \ x == ')'\n            if stack.length() == 0\n                return 'No'\n\
    \            else\n                stack.pop()\n            end\n        end\n\
    \    end\n    return 'Yes'\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['))', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n\
    <code language=julia-1.5>\n", "    stack = Stack()\n    stack.append(lst[1])\n\
    \    \n    for x in lst[2:end]\n        if x == '('\n            stack.append(x)\n\
    \        elseif x == ')'\n            if stack.length() == 0\n               \
    \ return 'No'\n            else\n                popped = stack.pop()\n      \
    \          if popped != '('\n                    return 'No'\n               \
    \ end\n            end\n        else\n            if stack.length() == 0\n   \
    \             return 'No'\n            else\n                popped = stack.pop()\n\
    \                if popped != '('\n                    return 'No'\n         \
    \       end\n            end\n        end\n    end\n    return 'Yes'\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['()', '('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', '(', ')', '(', ')', '(', ')', '(', ')', '", "    \n    stack\
    \ = Stack()\n    stack.append(lst[1])\n    \n    for paren in lst[1]\n       \
    \ if paren == '('\n            stack.append(paren)\n        elseif paren == ')'\n\
    \            if stack.length() == 0\n                return 'No'\n           \
    \ else\n                stack.pop()\n            end\n        end\n    end\n \
    \   \n    if stack.length() == 0\n        return 'Yes'\n    else\n        return\
    \ 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n<code language=julia-1.5",
  "    stack = Stack()\n    for s in lst\n        if s == '('\n            push!(stack,\
    \ s)\n        elseif s == ')'\n            if isempty(stack)\n               \
    \ return 'No'\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    if isempty(stack)\n        return 'Yes'\n    else\n\
    \        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(", "    \n    stack = Stack()\n\
    \    stack.append(lst[1])\n    \n    for char in lst[1]\n        if char == '('\n\
    \            stack.append(char)\n        elseif char == ')'\n            if stack.length()\
    \ == 0\n                return 'No'\n            else\n                stack.pop()\n\
    \            end\n        end\n    end\n    \n    if stack.length() == 0\n   \
    \     return 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([')', ')'])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of characters in it.", "    stack = Stack()\n\
    \    for s in lst\n        if s == '('\n            push!(stack, s)\n        elseif\
    \ s == ')'\n            if isempty(stack)\n                return 'No'\n     \
    \       else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    if isempty(stack)\n        return 'Yes'\n    else\n        return 'No'\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that checks if a number is prime. You may use any\
    \ number as input.", "    \n    stack = Stack()\n    \n    for s in lst\n    \
    \    if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n \
    \           if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    \n  \
    \  if isempty(stack)\n        return \"Yes\"\n    else\n        return \"No\"\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that checks if a number is prime or not. \nThe function\
    \ should take one integer number as an argument and should return 'Yes' if it's\
    \ prime and 'No' otherwise.", "    \n    stack = Stack()\n    \n    for s in lst\n\
    \        if s == '('\n            push!(stack, s)\n        elseif s == ')'\n \
    \           if isempty(stack)\n                return 'No'\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    \n  \
    \  if isempty(stack)\n        return 'Yes'\n    else\n        return 'No'\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that checks if a given string is a palindrome or\
    \ not.", "    stack = Stack()\n    stack.append(lst[1])\n    \n    for s in lst[2:end]\n\
    \        if s == '('\n            stack.append(s)\n        elseif s == ')'\n \
    \           if stack.length() == 0\n                return 'No'\n            else\n\
    \                stack.pop()\n            end\n        else\n            if stack.length()\
    \ == 0\n                return 'No'\n            else\n                stack.pop()\n\
    \            end\n        end\n    end\n    return 'Yes'\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(", "    \n    stack = Stack()\n\
    \    \n    for s in lst\n        if s == '('\n            push!(stack, s)\n  \
    \      elseif s == ')'\n            if isempty(stack)\n                return\
    \ 'No'\n            else\n                pop!(stack)\n            end\n     \
    \   else\n            if isempty(stack)\n                return 'No'\n       \
    \     else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    \n    if isempty(stack)\n        return 'Yes'\n    else\n        return 'No'\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')',\
    \ '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '", "    stack = Stack()\n    for s in lst\n \
    \       if s == '('\n            push!(stack, s)\n        elseif s == ')'\n  \
    \          if isempty(stack)\n                return 'No'\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    if isempty(stack)\n\
    \        return 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([')', ')'])\n</cell>\n<text>\nExercise 2\nWrite a function that checks\
    \ if a number is prime or not. Your function should take in a number as input\
    \ and return a boolean value indicating whether it is prime or not.", "    stack\
    \ = Stack()\n    for s in lst\n        if s == '('\n            push!(stack, s)\n\
    \        elseif s == ')'\n            if isempty(stack)\n                return\
    \ 'No'\n            else\n                pop!(stack)\n            end\n     \
    \   end\n    end\n    if isempty(stack)\n        return 'Yes'\n    else\n    \
    \    return 'No'\n    end\nend\n</cell>\n<code language=julia-1.0>\nmatch_parens(['()(',\
    \ ')'])\n</cell>\n<code language=julia-1.0>\nmatch_parens([')', ')'])\n</cell>\n\
    <code language=julia-1.0>\nmatch_parens(['(', ')'])\n</cell>\n<code language=julia-1.0>\n\
    match_parens(['(', ')', '(', ')'])\n</cell>\n<code language=julia-1.0>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.0>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.0>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.0>\n\
    match_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n\
    <code language=julia-1.0>\nmatch_parens(['(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.0>\n\
    match_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.0>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')'])\n</cell>\n<code language=julia-1.0>\nmatch_parens(['(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.0>\nmatch_parens(", " \
    \   stack = Stack()\n    stack.append(lst)\n    \n    while !isempty(stack)\n\
    \        str = pop!(stack)\n        if str == '('\n            push!(stack, ')')\n\
    \        elseif str == ')'\n            if isempty(stack)\n                return\
    \ 'No'\n            else\n                pop!(stack)\n            end\n     \
    \   else\n            push!(stack, str)\n        end\n    end\n    return 'Yes'\n\
    end\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as input and returns a string with all\
    \ the letters capitalized.", "    \n    stack = Stack()\n    \n    for s in lst\n\
    \        if s == '('\n            push!(stack, s)\n        elseif s == ')'\n \
    \           if isempty(stack)\n                return 'No'\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    \n  \
    \  if isempty(stack)\n        return 'Yes'\n    else\n        return 'No'\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of occurrences of 'a' in that string.", "    \n    stack = Stack()\n    \n \
    \   for s in lst\n        if s == '('\n            push!(stack, s)\n        elseif\
    \ s == ')'\n            if isempty(stack)\n                return 'No'\n     \
    \       else\n                pop!(stack)\n            end\n        else\n   \
    \         if isempty(stack)\n                return 'No'\n            else\n \
    \               pop!(stack)\n            end\n        end\n    end\n    \n   \
    \ if isempty(stack)\n        return 'Yes'\n    else\n        return 'No'\n   \
    \ end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '", "    \n    stack = Stack()\n    \n    for s in lst\n    \
    \    if s == '('\n            push!(stack, s)\n        elseif s == ')'\n     \
    \       if isempty(stack)\n                return 'No'\n            else\n   \
    \             pop!(stack)\n            end\n        end\n    end\n    \n    if\
    \ isempty(stack)\n        return 'Yes'\n    else\n        return 'No'\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that checks if a number is prime. \nA prime number is a\
    \ natural number greater than 1 that has no positive divisors other than 1 and\
    \ itself.\nThe function should take one argument, an integer. \nIt should return\
    \ 'Yes' if it's a prime number, and 'No' otherwise.", "    \n    stack = Stack()\n\
    \    \n    for s in lst\n        if s == '('\n            push!(stack, s)\n  \
    \      elseif s == ')'\n            if isempty(stack)\n                return\
    \ 'No'\n            else\n                pop!(stack)\n            end\n     \
    \   end\n    end\n    \n    if isempty(stack)\n        return 'Yes'\n    else\n\
    \        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ match_parens(['()(', ')']) == 'Yes'\n@assert match_parens([')', ')']) == 'No'\n\
    </cell>\n<text>\nPart II: Parsing and Manipulating Strings\nIn this section, we\
    \ will learn how to parse strings into numbers, booleans, etc.", "    stack =\
    \ Vector{String}()\n    stack = push!(stack, \"\")\n    for s in lst\n       \
    \ if s == ')'\n            if length(stack) == 0\n                return \"No\"\
    \n            else\n                pop!(stack)\n        end\n        if s ==\
    \ '('\n            push!(stack, s)\n        end\n    end\n    return \"Yes\"\n\
    end\n</code>\n<|/ a tags=string,julia,recursion |>\n<| c |>\nThank you for your\
    \ answer. I am not allowed to use any packages other than Base.\n<|/ c |>\n<|\
    \ c |>\nI edited my answer to include a solution that does not use any packages.\n\
    <|/ c |>\n<| c |>\nThank you for your answer. I tried your solution and it works\
    \ perfectly fine. I am still trying to understand how it works. I appreciate your\
    \ help.\n<|/ c |>\n<| c |>\nI added some comments to my answer, hope it helps.\n\
    <|/ c |>\n<| c |>\nThank you for your answer. I tried your solution and it works\
    \ perfectly fine. I am still trying to understand how it works. I appreciate your\
    \ help.\n<|/ c |>\n<| a dscore=0 |>\nI wrote a recursive solution that uses no\
    \ packages. I used a stack to keep track of the parentheses levels. I used a while\
    \ loop to keep track of the parentheses levels. I used a recursive function to\
    \ check if a pair of parentheses balanced or not, and I used a base case to exit\
    \ the while loop if there are no more parentheses to balance.\n<code>", "    stack\
    \ = Stack()\n    for s in lst\n        if s == '('\n            push!(stack, s)\n\
    \        elseif s == ')'\n            if isempty(stack)\n                return\
    \ 'No'\n            else\n                pop!(stack)\n            end\n     \
    \   end\n    end\n    if isempty(stack)\n        return 'Yes'\n    else\n    \
    \    return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a number is prime or not.\
    \ \nThe function should take one integer as an argument and return a boolean.",
  "    stack = Stack()\n    for s in lst\n        if s == \"(\"\n            push!(stack,\
    \ s)\n        elseif s == \")\"\n            if isempty(stack)\n             \
    \   return \"No\"\n            else\n                pop!(stack)\n           \
    \ end\n        else\n            if isempty(stack)\n                return \"\
    No\"\n            else\n                pop!(stack)\n            end\n       \
    \ end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"((\", \"))\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ((\", \"))\", \"(\", \"))\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ((\", \"))\", \"(\", \"))\", \"(\", \"))\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"((\", \"))\", \"(\", \"))\", \"(\", \"))\", \"(\", \"))\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"((\", \"))\", \"(\", \"))\"\
    , \"(\", \"))\", \"(\", \"))\", \"(\", \"))\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"((\", \"))\", \"(\", \"))\", \"(\", \"))\", \"(\", \"))\", \"\
    (\", \"))\", \"(\", \"))\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ((\", \"))\", \"(\", \"))\", \"(\", \"))\", \"(\", \"))\", \"(\", \"))\", \"(\"\
    , \"))\", \"(\", \"))\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ((\", \"))\", \"(\", \"))\", \"(\", \"))\", \"(\", \"))\", \"(\", \"))\", \"(\"\
    , \"))\", \"(\", \"))\", \"(\", \"))\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"((\", \"))\", \"(\", \"))\", \"(\", \"))\", \"(\", \"))\", \"\
    (\", \"))\", \"(\", \"))\", \"(\", \"))\", \"(\", \"))\", \"(\", \"))\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"((\", \"))\", \"(\", \"))\", \"(\"\
    , \"))\", \"(\", \"))\", \"(\", \"))\", \"(\", \"))\", \"(\", \"))\", \"(\", \"\
    ))\", \"(\", \"))\", \"(\", \"))\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ((\", \"))\", \"(\", \"))\", \"(\", \"))\", \"(\", \"))\", \"(\", \"))\", \"(\"\
    , \"))\", \"(\", \"))\", \"", "    \n    stack = Stack()\n    \n    for s in lst\n\
    \        if s == '('\n            push!(stack, s)\n        elseif s == ')'\n \
    \           if isempty(stack)\n                return 'No'\n            else\n\
    \                pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert match_parens(['()(', ')']) == 'Yes'\n@assert match_parens([')', ')'])\
    \ == 'No'\n@assert match_parens(['(', ')']) == 'No'\n@assert match_parens(['(',\
    \ '(', ')']) == 'No'\n@assert match_parens(['(', '(', '(', ')']) == 'Yes'\n</cell>\n\
    <text>\nExercise 3\nWrite a function that checks if a binary tree is balanced.",
  "    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n    \
    \        push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n \
    \   else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</", "    \n    stack\
    \ = Vector{String}()\n    \n    for s in lst\n        if s == '('\n          \
    \  push!(stack, s)\n        elseif s == ')'\n            if isempty(stack)\n \
    \               return 'No'\n            else\n                pop!(stack)\n \
    \           end\n        else\n            if isempty(stack)\n               \
    \ return 'No'\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return 'Yes'\n   \
    \ else\n        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens([')',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')'])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')', '(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')", "    \n    stack = Stack()\n    \n    for\
    \ s in lst\n        if s == '('\n            push!(stack, s)\n        elseif s\
    \ == ')'\n            if isempty(stack)\n                return 'No'\n       \
    \     else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    \n    if isempty(stack)\n        return 'Yes'\n    else\n        return 'No'\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns a string where all\
    \ occurrences of '(' and ')' have been replaced by '-'.", "    stack = Stack()\n\
    \    for s in lst\n        if s == '('\n            push!(stack, s)\n        elseif\
    \ s == ')'\n            if isempty(stack)\n                return 'No'\n     \
    \       else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    return 'Yes'\nend\n</cell>\n<code language=julia-1.4>\nmatch_parens(['()(',\
    \ ')'])\n</cell>\n<code language=julia-1.4>\nmatch_parens([')', ')'])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a number is prime (ie. divisible\
    \ only by 1 and itself).", "    \n    stack = Stack()\n    \n    for s in lst\n\
    \        if s == '('\n            push!(stack, s)\n        elseif s == ')'\n \
    \           if isempty(stack)\n                return 'No'\n            else\n\
    \                pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens([')',\
    \ ')'])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is even.", "    stack = Vector{String}()\n    for s in lst\n        if s ==\
    \ '('\n            push!(stack, s)\n        elseif s == ')'\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    if isempty(stack)\n        return\
    \ 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    match_parens(['()(', ')'])\n</cell>\n<code language=julia-1.0>\nmatch_parens([')',\
    \ ')'])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as\
    \ input and returns the number of occurrences of '(' and ')' in the string.",
  "    \n    stack = Stack()\n    \n    for s in lst\n        if s == '('\n      \
    \      push!(stack, s)\n        elseif s == ')'\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return 'No'\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return 'Yes'\n   \
    \ else\n        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens([')',\
    \ ')'])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary\
    \ tree is a binary search tree.", "    \n    stack = Stack()\n    for s in lst\n\
    \        if s == '('\n            push!(stack, s)\n        elseif s == ')'\n \
    \           if isempty(stack)\n                return 'No'\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    if isempty(stack)\n\
    \        return 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([')', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()',\
    \ '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()', '(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['()', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['()', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['()', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()',\
    \ '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()', '(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['()', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['()', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['()', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()',\
    \ '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()', '(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['()', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['()', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['()', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()',\
    \ '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()', '(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['()', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['()', '(', ')", "    stack = Vector{String}()\n\
    \    for s in lst\n        if s == '('\n            push!(stack, s)\n        elseif\
    \ s == ')'\n            if isempty(stack)\n                return 'No'\n     \
    \       else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    if isempty(stack)\n        return 'Yes'\n    else\n        return 'No'\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\nmatch_parens(['()(', ')'])\n\
    </cell>\n<code language=julia-1.0>\nmatch_parens(['()', ')'])\n</cell>\n<code\
    \ language=julia-1.0>\nmatch_parens(['(', ')'])\n</cell>\n<code language=julia-1.0>\n\
    match_parens(['(', ')', '(', ')'])\n</cell>\n<code language=julia-1.0>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.0>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.0>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.0>\n\
    match_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n\
    <code language=julia-1.0>\nmatch_parens(['(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.0>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n\
    </cell>\n<code language=julia-1.0>\nmatch_parens(['(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code\
    \ language=julia-1.0>\nmatch_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.0>\n\
    match_parens(['(', ')', '(', ')', '(', ')", "    \n    stack = Vector{String}()\n\
    \    \n    for s in lst\n        if s == '('\n            push!(stack, s)\n  \
    \      elseif s == ')'\n            if isempty(stack)\n                return\
    \ 'No'\n            else\n                pop!(stack)\n            end\n     \
    \   else\n            return 'No'\n        end\n    end\n    \n    if isempty(stack)\n\
    \        return 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([')', ')'])\n</cell>\n<text>\nExercise 2\nWrite a function that checks\
    \ if a number is prime or not. \nThe function should take one integer number as\
    \ an argument and return a boolean.", "    \n    stack = Stack()\n    for s in\
    \ lst\n        if s == '('\n            push!(stack, s)\n        elseif s == ')'\n\
    \            if isempty(stack)\n                return 'No'\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    if isempty(stack)\n\
    \        return 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([')', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')('", "    \n    stack = Stack()\n    for s in lst\n     \
    \   if s == '('\n            push!(stack, s)\n        elseif s == ')'\n      \
    \      if isempty(stack)\n                return 'No'\n            else\n    \
    \            pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    if isempty(stack)\n        return\
    \ 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens([')',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')'])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')', '(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')', '", "    \n    stack = Stack()\n    \n    for s in\
    \ lst\n        if s == '('\n            push!(stack, s)\n        elseif s == ')'\n\
    \            if isempty(stack)\n                return 'No'\n            else\n\
    \                pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens([')',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')'])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')', '(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ", "    \n    stack = Stack()\n    \n    for s\
    \ in lst\n        if s == '('\n            push!(stack, s)\n        elseif s ==\
    \ ')'\n            if isempty(stack)\n                return 'No'\n          \
    \  else\n                pop!(stack)\n            end\n        else\n        \
    \    if isempty(stack)\n                return 'No'\n            else\n      \
    \          pop!(stack)\n            end\n        end\n    end\n    \n    if isempty(stack)\n\
    \        return 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([')', ')'])\n</cell>\n<text>\nPart 2: Matching Parentheses\nNow that\
    \ you've seen how to match parentheses, let's see how to match them in Julia.",
  "    stack = Stack()\n    for s in lst\n        if s == '('\n            push!(stack,\
    \ s)\n        elseif s == ')'\n            if isempty(stack)\n               \
    \ return 'No'\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    if isempty(stack)\n        return 'Yes'\n    else\n\
    \        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a binary tree is balanced.",
  "    \n    stack = Stack()\n    \n    for s in lst\n        if s == '('\n      \
    \      push!(stack, s)\n        elseif s == ')'\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return 'No'\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return 'Yes'\n   \
    \ else\n        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')',\
    \ '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(",
  "    stack = Stack()\n    for s in lst\n        if s == '('\n            push!(stack,\
    \ s)\n        elseif s == ')'\n            if isempty(stack)\n               \
    \ return 'No'\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    if isempty(stack)\n        return 'Yes'\n    else\n\
    \        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a binary tree is balanced.",
  "    stack = Stack()\n    for s in lst\n        if s == '('\n            push!(stack,\
    \ s)\n        elseif s == ')'\n            if isempty(stack)\n               \
    \ return 'No'\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    if isempty(stack)\n        return 'Yes'\n    else\n\
    \        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.4>\nmatch_parens(['()(',\
    \ ')'])\n</cell>\n<code language=julia-1.4>\nmatch_parens([')', ')'])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a binary tree is balanced.",
  "    stack = Stack()\n    for s in lst\n        if s == '('\n            push!(stack,\
    \ s)\n        elseif s == ')'\n            if isempty(stack)\n               \
    \ return 'No'\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    if isempty(stack)\n        return 'Yes'\n    else\n\
    \        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.3>\nmatch_parens(['()(',\
    \ ')'])\n</cell>\n<code language=julia-1.3>\nmatch_parens([')', ')'])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a binary tree is balanced.",
  "    \n    stack = Stack()\n    \n    for s in lst\n        if s == '('\n      \
    \      push!(stack, s)\n        elseif s == ')'\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return 'No'\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return 'Yes'\n   \
    \ else\n        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens([')',\
    \ ')'])\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a number\
    \ is prime or not. You may want to use the following formula to determine if a\
    \ number is prime:", "    \n    stack = Stack()\n    for s in lst\n        if\
    \ s == '('\n            push!(stack, s)\n        elseif s == ')'\n           \
    \ if isempty(stack)\n                return 'No'\n            else\n         \
    \       pop!(stack)\n            end\n        end\n    end\n    if isempty(stack)\n\
    \        return 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([')', ')'])\n</cell>\n<text>\nExercise 2\nWrite a function that checks\
    \ if a number is prime or not. You may use the\nfollowing rules:", "    stack\
    \ = Stack()\n    for s in lst\n        if s == '('\n            push!(stack, s)\n\
    \        elseif s == ')'\n            if isempty(stack)\n                return\
    \ 'No'\n            else\n                pop!(stack)\n            end\n     \
    \   end\n    end\n    if isempty(stack)\n        return 'Yes'\n    else\n    \
    \    return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that checks if a number is prime. \nA prime\
    \ number is a natural number greater than 1 that has no positive divisors other\
    \ than 1 and itself. \nA prime number is a natural number greater than 1 that\
    \ has no positive divisors other than 1 and itself.", "    \n    if length(lst)\
    \ == 0 \n        return \"No\"\n    end\n    \n    if length(lst) == 1 \n    \
    \    if lst[1] == \"(\" \n            return \"Yes\"\n        else \n        \
    \    return \"No\"\n    end\n    \n    stack = Stack()\n    \n    for s in lst\
    \ \n        if s == \"(\" \n            push!(stack, s)\n        else \n     \
    \       pop!(stack)\n            if stack == [] \n                return \"No\"\
    \n            end\n        end\n    end\n    \n    return \"Yes\"\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"((\", \"))\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(\", \"))\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    (\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(\", \"(\",\
    \ \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(\", \"(\", \"\
    (\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(\", \"(\",\
    \ \"(\", \"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"(\", \"(\", \"(\", \"(\",\
    \ \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\"", "    stack = Stack()\n    for s in lst\n        if s == '('\n\
    \            push!(stack, s)\n        elseif s == ')'\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    if isempty(stack)\n        return\
    \ 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    match_parens(['()(', ')'])\n</cell>\n<code language=julia-1.0>\nmatch_parens(['(',\
    \ ')'])\n</cell>\n<code language=julia-1.0>\nmatch_parens(['(', ')', '(', ')'])\n\
    </cell>\n<code language=julia-1.0>\nmatch_parens(['(', ')', '(', ')', '(', ')'])\n\
    </cell>\n<code language=julia-1.0>\nmatch_parens(['(', ')', '(', ')', '(', ')',\
    \ '(', ')'])\n</cell>\n<code language=julia-1.0>\nmatch_parens(['(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.0>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.0>\n\
    match_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')'])\n</cell>\n<code language=julia-1.0>\nmatch_parens(['(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code\
    \ language=julia-1.0>\nmatch_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.0>\n\
    match_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.0>\n\
    match_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(", "    stack = Stack()\n    for s in lst\n        if s == '('\n    \
    \        push!(stack, s)\n        elseif s == ')'\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        else\n            push!(stack, s)\n        end\n   \
    \ end\n    if isempty(stack)\n        return 'Yes'\n    else\n        return 'No'\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')',\
    \ '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(", "    \n    stack = Stack()\n    stack.append(lst[1])\n \
    \   \n    for elem in lst[2:end]\n        if elem == \"(\"\n            stack.append(elem)\n\
    \        elseif elem == \")\"\n            if stack.size == 0\n              \
    \  return \"No\"\n            else\n                stack.pop()\n            end\n\
    \        else\n            if stack.size == 0\n                return \"No\"\n\
    \            else\n                stack.pop()\n            end\n        end\n\
    \    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"\
    ])\n</", "    stack = Vector{String}()\n    stack = push!(stack, \"\")\n    for\
    \ i in lst\n        if i == \"(\"\n            push!(stack, \"\")\n        elseif\
    \ i == \")\"\n            if isempty(stack)\n                return \"No\"\n \
    \           else\n                pop!(stack)\n            end\n        else\n\
    \            push!(stack, i[1])\n        end\n    end\n    return \"Yes\"\nend\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"((\", \"))\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"((\", \"))\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"((\", \"))\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ((\", \"))\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"((\", \"))\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"((\", \"))\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"((\", \"))\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"((\", \"))\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ((\", \"))\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"((\", \"))\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"((\", \"))\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"((\", \"))\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"((\", \"))\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ((\", \"))\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"((\", \"))\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"((\", \"))\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"((\", \"))\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"((\", \"))\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ((\", \"))\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"((\", \"))\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"((\", \"))\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_", "    stack = Stack()\n    for s in lst\n \
    \       if s == '('\n            push!(stack, s)\n        elseif s == ')'\n  \
    \          if isempty(stack)\n                return 'No'\n            else\n\
    \                pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return 'Yes'\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([')', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')',\
    \ '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')',\
    \ '", "    stack = Stack()\n    for s in lst\n        if s == '('\n          \
    \  push!(stack, s)\n        elseif s == ')'\n            if isempty(stack)\n \
    \               return 'No'\n            else\n                pop!(stack)\n \
    \           end\n        end\n    end\n    if isempty(stack)\n        return 'Yes'\n\
    \    else\n        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens([')',\
    \ ')'])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary\
    \ tree is balanced.", "    stack = Stack()\n    for s in lst\n        if s ==\
    \ '('\n            push!(stack, s)\n        elseif s == ')'\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    if isempty(stack)\n        return\
    \ 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens([')',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')()'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')()', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')()',\
    \ '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')()', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')()', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')()', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')()', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')()', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')()', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')()', '(', ')', '(', ')', '(', ')', '(', ')', '(", "    stack = Stack()\n \
    \   stack.append(lst[1])\n    \n    for elem in lst[2:end]\n        if elem ==\
    \ ')'\n            stack.pop()\n        elseif elem == '('\n            stack.append(elem)\n\
    \        else\n            return false\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['()', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')',\
    \ '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')", "    stack = Vector{String}()\n    stack = push!(stack, \"\")\n    stack\
    \ = push!(stack, \"\")\n    for s in lst\n        if s == '('\n            push!(stack,\
    \ s)\n        elseif s == ')'\n            if isempty(stack)\n               \
    \ return 'No'\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    if isempty(stack)\n        return 'No'\n    else\n\
    \        return 'Yes'\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a binary tree is balanced.",
  "    stack = Stack()\n    for s in lst\n        if s == '('\n            push!(stack,\
    \ s)\n        elseif s == ')'\n            if isempty(stack)\n               \
    \ return 'No'\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    if isempty(stack)\n        return 'Yes'\n    else\n\
    \        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.3>\nmatch_parens(['()(',\
    \ ')'])\n</cell>\n<code language=julia-1.3>\nmatch_parens([')', ')'])\n</cell>\n\
    <text>\nPart III: Palindrome Strings\nA palindrome is a string that reads the\
    \ same backward as forward, for example:", "    stack = Stack()\n    for s in\
    \ lst\n        if s == '('\n            push!(stack, s)\n        elseif s == ')'\n\
    \            if isempty(stack)\n                return 'No'\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    if isempty(stack)\n\
    \        return 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([')', ')'])\n</cell>\n<text>\nExercise 2\nWrite a function that checks\
    \ if a number is prime or not. Your function should take one number as input and\
    \ return 'Yes' if it's prime and 'No' otherwise.", "    \n    stack = Stack()\n\
    \    \n    for s in lst\n        if s == '('\n            push!(stack, s)\n  \
    \      elseif s == ')'\n            if isempty(stack)\n                return\
    \ 'No'\n            else\n                pop!(stack)\n            end\n     \
    \   end\n    end\n    \n    if isempty(stack)\n        return 'Yes'\n    else\n\
    \        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a number is prime. \nA prime\
    \ number is a natural number greater than 1 that has no positive divisors other\
    \ than 1 and itself.\nFor example 5 is a prime number, but 2 is not because 2\
    \ has only 1 divisor, which is itself.\nWrite a function that checks if a number\
    \ is prime.\nFor example 5 is a prime number, but 2 is not because 2 has only\
    \ 1 divisor, which is itself.\nWrite a function that checks if a number is prime.\n\
    For example 5 is a prime number, but 2 is not because 2 has only 1 divisor, which\
    \ is itself.\nWrite a function that checks if a number is prime.\nFor example\
    \ 5 is a prime number, but 2 is not because 2 has only 1 divisor, which is itself.\n\
    Write a function that checks if a number is prime.\nFor example 5 is a prime number,\
    \ but 2 is not because 2 has only 1 divisor, which is itself.\nWrite a function\
    \ that checks if a number is prime.\nFor example 5 is a prime number, but 2 is\
    \ not because 2 has only 1 divisor, which is itself.\nWrite a function that checks\
    \ if a number is prime.\nFor example 5 is a prime number, but 2 is not because\
    \ 2 has only 1 divisor, which is itself.\nWrite a function that checks if a number\
    \ is prime.\nFor example 5 is a prime number, but 2 is not because 2 has only\
    \ 1 divisor, which is itself.\nWrite a function that checks if a number is prime.\n\
    For example 5 is a prime number, but 2 is not because 2 has only 1 divisor, which\
    \ is itself.\nWrite a function that checks if a number is prime.\nFor example\
    \ 5 is a prime number, but 2 is not because 2 has only 1 divisor, which is itself.\n\
    Write a function that checks if a number is prime.\nFor example 5 is a prime number,\
    \ but 2 is not because 2 has only 1 divisor, which is itself.\nWrite a function\
    \ that checks if a number is prime.\nFor example 5 is a prime number, but 2 is\
    \ not because 2 has only 1 divisor, which is itself.\nWrite a function that checks\
    \ if a number is prime.\nFor example 5 is a prime number, but 2", "    stack =\
    \ Stack()\n    for s in lst\n        if s == '('\n            push!(stack, s)\n\
    \        elseif s == ')'\n            if isempty(stack)\n                return\
    \ 'No'\n            else\n                pop!(stack)\n            end\n     \
    \   end\n    end\n    if isempty(stack)\n        return 'Yes'\n    else\n    \
    \    return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a binary tree is a binary\
    \ search tree.", "    \n    stack = Stack()\n    \n    for s in lst\n        if\
    \ s == '('\n            push!(stack, s)\n        elseif s == ')'\n           \
    \ if isempty(stack)\n                return 'No'\n            else\n         \
    \       pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens([')',\
    \ ')'])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary\
    \ tree is balanced.", "    stack = Stack()\n    for s in lst\n        if s ==\
    \ '('\n            push!(stack, s)\n        elseif s == ')'\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    if isempty(stack)\n        return\
    \ 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens([')',\
    \ ')'])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a given\
    \ string is a palindrome or not.", "    \n    stack = Stack()\n    \n    for s\
    \ in lst\n        if s == '('\n            push!(stack, s)\n        elseif s ==\
    \ ')'\n            if isempty(stack)\n                return 'No'\n          \
    \  else\n                pop!(stack)\n            end\n        else\n        \
    \    if isempty(stack)\n                return 'No'\n            else\n      \
    \          pop!(stack)\n            end\n        end\n    end\n    \n    if isempty(stack)\n\
    \        return 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([')', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')()'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')()('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')()()'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')()()('])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')()()()'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')()()()('])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')()()()()'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')()()()()('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')()()()()()'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')()()()()()('])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')()()()()()()'])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens(['(', ')()()()()()()('])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')()()()()()()()'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')()()()()()()()('])", "    stack = Stack()\n    for s in lst\n        if s\
    \ == '('\n            push!(stack, s)\n        elseif s == ')'\n            if\
    \ isempty(stack)\n                return 'No'\n            else\n            \
    \    pop!(stack)\n            end\n        end\n    end\n    if isempty(stack)\n\
    \        return 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([')', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')',\
    \ '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(", "    \n    stack = Stack()\n    \n\
    \    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n      \
    \  elseif s == \")\"\n            if isempty(stack)\n                return \"\
    No\"\n            else\n                pop!(stack)\n            end\n       \
    \ else\n            if isempty(stack)\n                return \"No\"\n       \
    \     else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    \n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()\", \"()\", \"()\"])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()\", \"()\", \"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()\", \"()\", \"()\", \"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\", \"()\",\
    \ \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\",\
    \ \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\",\
    \ \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()", "   \
    \ stack = Stack()\n    for s in lst\n        if s == '('\n            push!(stack,\
    \ s)\n        elseif s == ')'\n            if isempty(stack)\n               \
    \ return 'No'\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    if isempty(stack)\n        return 'Yes'\n    else\n\
    \        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')('])\n", " \
    \   \n    stack = Stack()\n    for s in lst\n        if s == '('\n           \
    \ push!(stack, s)\n        elseif s == ')'\n            if isempty(stack)\n  \
    \              return 'No'\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    if isempty(stack)\n        return 'Yes'\n\
    \    else\n        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    match_parens(['()(', ')'])\n</cell>\n<code language=julia-1.0>\nmatch_parens([')',\
    \ ')'])\n</cell>\n<code language=julia-1.0>\nmatch_parens(['(', ')'])\n</cell>\n\
    <code language=julia-1.0>\nmatch_parens(['(', '(', ')'])\n</cell>\n<code language=julia-1.0>\n\
    match_parens(['(', '(', '(', ')'])\n</cell>\n<code language=julia-1.0>\nmatch_parens(['(',\
    \ '(', '(', '(', ')'])\n</cell>\n<code language=julia-1.0>\nmatch_parens(['(',\
    \ '(', '(', '(', '(', ')'])\n</cell>\n<code language=julia-1.0>\nmatch_parens(['(',\
    \ '(', '(', '(', '(', '(', ')'])\n</cell>\n<code language=julia-1.0>\nmatch_parens(['(',\
    \ '(', '(', '(', '(', '(', '(', ')'])\n</cell>\n<code language=julia-1.0>\nmatch_parens(['(',\
    \ '(', '(', '(', '(', '(', '(', '(', '(', ')'])\n</cell>\n<code language=julia-1.0>\n\
    match_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')'])\n</cell>\n\
    <code language=julia-1.0>\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(',\
    \ '(', '(', '(', ')'])\n</cell>\n<code language=julia-1.0>\nmatch_parens(['(',\
    \ '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')'])\n</cell>\n<code\
    \ language=julia-1.0>\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(',\
    \ '(', '(', '(', '(', ')'])\n</cell>\n<code language=julia-1.0>\nmatch_parens(['(',\
    \ '(', '(', '(', '(', '(', '(", "    \n    if length(lst) == 0 \n        return\
    \ 'No'\n    end", "    \n    stack = Vector{String}()\n    \n    for s in lst\n\
    \        if s == '('\n            push!(stack, s)\n        elseif s == ')'\n \
    \           if isempty(stack)\n                return 'No'\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    \n  \
    \  if isempty(stack)\n        return 'Yes'\n    else\n        return 'No'\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')()'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')()('])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')()()'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')()()('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')()()()'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')()()()('])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')()()()()'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')()()()()('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')()()()()()'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')()()()()()('])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')()()()()()()'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')()()()()()()('])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens(['(', ')()()()()()()()'])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens(['(', ')()()()()()()()('])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens(['(', ')()()()()()", "    \n    stack = Stack()\n\
    \    stack.append(lst[1])\n    \n    for elem in lst[2:end]\n        if elem ==\
    \ '('\n            stack.append(elem)\n        elseif elem == ')'\n          \
    \  if stack.size == 0\n                return \"No\"\n            else\n     \
    \           stack.pop()\n            end\n        end\n    end\n    return \"\
    Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"((\", \"(\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"(\", \"(\"])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"(\", \"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(\", \"(\", \"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(\", \"(\", \"(\", \"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(\", \"(\", \"(\", \"(\", \"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\"", "    stack = Stack()\n    for s in lst\n        if s == \"\
    (\"\n            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\"\
    , \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\",\
    \ \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\",\
    \ \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"", "    stack = Stack()\n    for s in lst\n        if s == '('\n \
    \           push!(stack, s)\n        elseif s == ')'\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        else\n            push!(stack, s)\n        end\n   \
    \ end\n    if isempty(stack)\n        return 'Yes'\n    else\n        return 'No'\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that checks if a number is prime. Your function should\
    \ take in a number as input and return 'Yes' if it's prime and 'No' otherwise.",
  "    stack = Stack()\n    stack.append(lst[1])\n    \n    for s in lst[2:end]\n\
    \        if s == \"(\"\n            stack.append(s)\n        elseif s == \")\"\
    \n            if stack.pop() == \"(\"\n                stack.pop()\n         \
    \   else\n                return \"No\"\n            end\n        else\n     \
    \       if stack.pop() != s\n                return \"No\"\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"((\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ((\", \"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"((\"\
    , \"(\", \"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ((\", \"(\", \"(\", \"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ((\", \"(\", \"(\", \"(\", \"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"((\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"((\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"((\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"((\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\",\
    \ \"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"((\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"((\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"((\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"",
  "    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n    \
    \        push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n \
    \   else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"\
    ()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"()\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"\
    ()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"()\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"\
    ()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"()\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \"()\"])\n</", "    stack = Stack()\n    stack.append(lst[1])\n    \n \
    \   for paren in lst[1]\n        if paren == '('\n            stack.append(paren)\n\
    \        elseif paren == ')'\n            if stack.length() == 0\n           \
    \     return \"No\"\n            else\n                stack.pop()\n         \
    \   end\n        end\n    end\n    \n    if stack.length() == 0\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\"])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\"])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\"])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\"])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\"])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\"])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\"])\n</cell", "    stack = Stack()\n    for s in lst\n    \
    \    if s == '('\n            push!(stack, s)\n        elseif s == ')'\n     \
    \       if isempty(stack)\n                return 'No'\n            else\n   \
    \             pop!(stack)\n            end\n        end\n    end\n    if isempty(stack)\n\
    \        return 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([')', ')'])\n</cell>\n<text>\nExercise 3\nWrite a function that checks\
    \ if a number is prime or not. \nA number is prime if and only if it is a whole\
    \ number greater than 1.\nThe function should take one number as input and return\
    \ a boolean value.", "    \n    stack = Stack()\n    \n    for s in lst\n    \
    \    if s == '('\n            push!(stack, s)\n        elseif s == ')'\n     \
    \       if isempty(stack)\n                return 'No'\n            else\n   \
    \             pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens([')',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', '(', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ '(', '(', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ '(', '(', '(', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ '(', '(', '(', '(', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ '(', '(', '(', '(', '(', '(', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', ')'])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(',\
    \ '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', '(', '(',\
    \ '(', '(', '(', '(', '(', '(', '(', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', '(', '(', '(', '(', '(',\
    \ '(', '(', '(', '(', '(', '(', ", "    stack = Stack()\n    for s in lst\n  \
    \      if s == '('\n            push!(stack, s)\n        elseif s == ')'\n   \
    \         if isempty(stack)\n                return 'No'\n            else\n \
    \               pop!(stack)\n            end\n        end\n    end\n    if isempty(stack)\n\
    \        return 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\nmatch_parens(['()(', ')'])\n</cell>\n<code language=julia-1.0>\n\
    match_parens([')', ')'])\n</cell>\n<code language=julia-1.0>\nmatch_parens(['(',\
    \ ')'])\n</cell>\n<code language=julia-1.0>\nmatch_parens(['(', ')', '(', ')'])\n\
    </cell>\n<code language=julia-1.0>\nmatch_parens(['(', ')', '(', ')', '(', ')'])\n\
    </cell>\n<code language=julia-1.0>\nmatch_parens(['(', ')', '(', ')', '(', ')',\
    \ '(', ')'])\n</cell>\n<code language=julia-1.0>\nmatch_parens(['(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.0>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.0>\n\
    match_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')'])\n</cell>\n<code language=julia-1.0>\nmatch_parens(['(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n\
    </cell>\n<code language=julia-1.0>\nmatch_parens(['(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n\
    <code language=julia-1.0>\nmatch_parens(['(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n\
    <code language=julia-1.0>\nmatch_parens(", "    stack = Stack()\n    for s in\
    \ lst\n        if s == '('\n            push!(stack, s)\n        elseif s == ')'\n\
    \            if isempty(stack)\n                return 'No'\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    if isempty(stack)\n\
    \        return 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([')', ')'])\n</cell>\n<text>\nExercise 2\nWrite a function that checks\
    \ if a binary tree is balanced.", "    \n    stack = Stack()\n    \n    for s\
    \ in lst\n        if s == '('\n            push!(stack, s)\n        elseif s ==\
    \ ')'\n            if isempty(stack)\n                return 'No'\n          \
    \  else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    \n    if isempty(stack)\n        return 'Yes'\n    else\n        return 'No'\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')',\
    \ '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')", "    stack = Stack()\n    for s in lst\n        if\
    \ s == '('\n            push!(stack, s)\n        elseif s == ')'\n           \
    \ if isempty(stack)\n                return 'No'\n            else\n         \
    \       pop!(stack)\n            end\n        end\n    end\n    if isempty(stack)\n\
    \        return 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\nmatch_parens(['()(', ')'])\n</cell>\n<code language=julia-1.0>\n\
    match_parens([')', ')'])\n</cell>\n<code language=julia-1.0>\nmatch_parens(['(',\
    \ ')'])\n</cell>\n<code language=julia-1.0>\nmatch_parens(['(', '(', ')'])\n</cell>\n\
    <code language=julia-1.0>\nmatch_parens(['(', '(', '(', ')'])\n</cell>\n<code\
    \ language=julia-1.0>\nmatch_parens(['(', '(', '(', '(', ')'])\n</cell>\n<code\
    \ language=julia-1.0>\nmatch_parens(['(', '(', '(', '(', '(', ')'])\n</cell>\n\
    <code language=julia-1.0>\nmatch_parens(['(', '(', '(', '(', '(', '(', ')'])\n\
    </cell>\n<code language=julia-1.0>\nmatch_parens(['(', '(', '(', '(', '(', '(',\
    \ '(', ')'])\n</cell>\n<code language=julia-1.0>\nmatch_parens(['(', '(', '(',\
    \ '(', '(', '(', '(', '(', '(', ')'])\n</cell>\n<code language=julia-1.0>\nmatch_parens(['(',\
    \ '(', '(', '(', '(', '(', '(', '(', '(', '(', ')'])\n</cell>\n<code language=julia-1.0>\n\
    match_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')'])\n</cell>\n\
    <code language=julia-1.0>\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(',\
    \ '(', '(', '(', '(', ')'])\n</cell>\n<code language=julia-1.0>\nmatch_parens(['(',\
    \ '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')'])\n</cell>\n<code\
    \ language=julia-1.0>\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(",
  "    \n    stack = Stack()\n    \n    for s in lst\n        if s == '('\n      \
    \      push!(stack, s)\n        elseif s == ')'\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return 'No'\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return 'Yes'\n   \
    \ else\n        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens([')',\
    \ ')'])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary\
    \ tree is a binary search tree.", "    \n    if length(lst) == 0 \n        return\
    \ \"No\"\n    \n    if length(lst) == 1 \n        return match_parens(lst[1:end-1])\
    \ + lst[end]\n    \n    stack = Vector{String}(lst)\n    \n    stack = stack[1:end-1]\n\
    \    \n    if length(stack) == 0 \n        return \"No\"\n    \n    if length(stack)\
    \ == 1 \n        return match_parens(stack) + stack[end]\n    \n    stack = stack[1:end-1]\n\
    \    \n    if length(stack) == 0 \n        return \"No\"\n    \n    if length(stack)\
    \ == 1 \n        return match_parens(stack) + stack[end]\n    \n    stack = stack[1:end-1]\n\
    \    \n    if length(stack) == 0 \n        return \"No\"\n    \n    if length(stack)\
    \ == 1 \n        return match_parens(stack) + stack[end]\n    \n    stack = stack[1:end-1]\n\
    \    \n    if length(stack) == 0 \n        return \"No\"\n    \n    if length(stack)\
    \ == 1 \n        return match_parens(stack) + stack[end]\n    \n    stack = stack[1:end-1]\n\
    \    \n    if length(stack) == 0 \n        return \"No\"\n    \n    if length(stack)\
    \ == 1 \n        return match_parens(stack) + stack[end]\n    \n    stack = stack[1:end-1]\n\
    \    \n    if length(stack) == 0 \n        return \"No\"\n    \n    if length(stack)\
    \ == 1 \n        return match_parens(stack) + stack[end]\n    \n    stack = stack[1:end-1]\n\
    \    \n    if length(stack) == 0 \n        return \"No\"\n    \n    if length(stack)\
    \ == 1 \n        return match_parens(stack) + stack[end]\n    \n    stack = stack[1:end-1]\n\
    \    \n    if length(stack) == 0 \n        return \"No\"\n    \n    if length(stack)\
    \ == 1 \n        return match_parens(stack) + stack[end]\n    \n    stack = stack[1:end-1]\n\
    \    \n    if length(stack) == 0 \n        return \"No\"\n    \n    if length(stack)\
    \ == 1 \n        return match_parens(stack) + stack[end]\n    \n    stack = stack[1:end-1]\n\
    \    \n    if length(stack) == 0 \n        return \"No\"\n    \n    if length(stack)\
    \ == 1 \n        return match_parens(stack) + stack[end]\n    \n    stack = stack[1:end-1]\n\
    \    \n    if length(stack) == 0 \n        return \"No\"\n    \n    if length(stack)\
    \ == 1 \n        return match_parens(stack) + stack[end]\n    \n    stack = stack[1:end-1]\n\
    \    \n    if length(stack) == 0 \n        return \"No\"\n    \n    if length(stack",
  "    \n    stack = Vector{String}()\n    \n    for s in lst\n        if s == '('\n\
    \            push!(stack, s)\n        elseif s == ')'\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens([')',\
    \ ')'])\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a number\
    \ is prime. Your function should take one number as input and return 'Yes' if\
    \ it is prime and 'No' otherwise.", "    stack = Stack()\n    for s in lst\n \
    \       if s == '('\n            push!(stack, s)\n        elseif s == ')'\n  \
    \          if isempty(stack)\n                return 'No'\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    if isempty(stack)\n\
    \        return 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([')', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', '(', '(', ')'])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens(['(', '(', '(', '(', ')'])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens(['(', '(', '(', '(', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', '(', '(', '(', '(', '(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', '(', '(', '(', '(', '(',\
    \ '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', '(', '(',\
    \ '(', '(', '(', '(', '(', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ '(', '(', '(', '(', '(', '(', '(', '(', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(',\
    \ '(', '(', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')", "  \
    \  stack = Stack()\n    stack.append(lst[1])\n    for char in lst[1]\n       \
    \ if char == '('\n            stack.append(char)\n        elseif char == ')'\n\
    \            if stack.pop() != char\n                return \"No\"\n         \
    \   else\n                stack.pop()\n            end\n        end\n    end\n\
    \    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(())\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"(()())\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(())()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    (()())()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(())()()\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"(())()()()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"(())()()()()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(())()()()()()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    (())()()()()()()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(())()()()()()()()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(())()()()()()()()()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(())()()()()()()()()()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(())()()()()()()()()()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(())()()()()()()()()()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(())()()()()()()()()()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(())()()()()()()()()()()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(())()()()()()()()()()()()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(())()()()()()()()()()()()\"\
    ])", "    \n    stack = Stack()\n    \n    for s in lst\n        if s == '('\n\
    \            push!(stack, s)\n        elseif s == ')'\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        else\n            push!(stack, s)\n        end\n   \
    \ end\n    \n    if isempty(stack)\n        return 'Yes'\n    else\n        return\
    \ 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['()', '(())'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(())', '()'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()',\
    \ '(())', '()'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(())', '(())',\
    \ '()'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(())', '(())', '(())'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(())', '(())', '(())', '(())'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(())', '(())', '(())', '(())',\
    \ '(())'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(())', '(())',\
    \ '(())', '(())', '(())', '(())', '(())'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(())', '(())', '(())', '(())', '(())', '(())', '(())', '(())',\
    \ '(())', '(())', '(())', '(())', '(())', '(())', '(())', '(())', '(())', '(())',\
    \ '(())', '(())', '(())', '(())', '(())', '(())', '(())', '(())', '(())', '(())',\
    \ '(())', '(())', '(())', '(())', '(())', '(())', '(())', '(())', '(())', '(())',\
    \ '(())', '(())', '(())', '(())', '(())', '(())', '(())', '(())', '(())', '(())',\
    \ '(())', '(())', '(())', '(())', '(())', '(())', '(())', '(())', '(", "    \n\
    \    if length(lst) == 0 \n        return 'No'\n    \n    if length(lst) == 1\
    \ \n        return match_parens(lst[1]) \n    \n    stack = Vector{String}(lst)\n\
    \    \n    while length(stack) > 1 \n        \n        if stack[1] == '(' and\
    \ stack[2] == ')' \n            return 'Yes'\n        \n        if stack[1] ==\
    \ '(' and stack[2] != '('\n            return 'No'\n        \n        if stack[1]\
    \ != '(' and stack[2] != '('\n            return 'No'\n        \n        popped\
    \ = stack.pop\n        \n        if stack[1] == '(' and stack[2] == ')' \n   \
    \         push!(stack, popped) \n        elseif stack[1] == '(' and stack[2] !=\
    \ '('\n            push!(stack, popped) \n        elseif stack[1] != '(' and stack[2]\
    \ != '('\n            push!(stack, popped) \n        end\n    end\n    \n    return\
    \ 'No'\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ '(', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', '(',\
    \ '(', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', '(',\
    \ '(', '(', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ '(', '(', '(', '(', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ '(', '(', '(', '(', '(', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ '(', '(', '(', '(', '(', '(', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(',\
    \ '(', '(', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ '(', '(', '(', '(', '(', '", "    \n    stack = Stack()\n    \n    for s in\
    \ lst\n        if s == '('\n            push!(stack, s)\n        elseif s == ')'\n\
    \            if isempty(stack)\n                return 'No'\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    \n  \
    \  if isempty(stack)\n        return 'Yes'\n    else\n        return 'No'\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')',\
    \ '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')", "    \n    if length(lst) == 0 \n        return \"\
    No\"\n    end", "    stack = Stack()\n    for s in lst\n        if s == '('\n\
    \            push!(stack, s)\n        elseif s == ')'\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    if isempty(stack)\n        return\
    \ 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['))',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(()', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(()', ')('])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(()', ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(()',\
    \ ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(()', ')('])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(()', ')('])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(()', ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(()',\
    \ ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(()', ')('])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(()', ')('])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(()', ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(()',\
    \ ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(()', ')('])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(()', ')('])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(()', ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(()',\
    \ ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(()', ')('])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(()', ')('])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(()', ')('])\n", "    \n    stack = Stack()\n    for s in lst\n\
    \        if s == '('\n            push!(stack, s)\n        elseif s == ')'\n \
    \           if isempty(stack)\n                return 'No'\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    if isempty(stack)\n\
    \        return 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\nmatch_parens(['()(', ')'])\n</cell>\n<code language=julia-1.0>\n\
    match_parens([')', ')'])\n</cell>\n<text>\nExercise 2\nWrite a function that checks\
    \ if a binary tree is balanced.", "    stack = Stack()\n    for s in lst\n   \
    \     if s == '('\n            push!(stack, s)\n        elseif s == ')'\n    \
    \        if isempty(stack)\n                return 'No'\n            else\n  \
    \              pop!(stack)\n            end\n        end\n    end\n    if isempty(stack)\n\
    \        return 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\nmatch_parens(['()(', ')'])\n</cell>\n<code language=julia-1.3>\n\
    match_parens([')', ')'])\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns a string where all occurrences of '(' and ')' have been\
    \ replaced by '-'.", "    \n    stack = Vector{String}()\n    \n    for s in lst\n\
    \        if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\
    \n            if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([')', ')'])\n</cell>\n<text>\nExercise 2\nWrite a function that checks\
    \ if a number is prime. \nA number is prime if and only if it is a prime number\
    \ or is a perfect square. \nA perfect square is a number that is the product of\
    \ two integers, \nand each integer is greater than 1. \nA prime number is a natural\
    \ number greater than 1 that has no positive divisors other than 1 and itself.",
  "    \n    stack = Stack()\n    \n    for s in lst\n        if s == '('\n      \
    \      push!(stack, s)\n        elseif s == ')'\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        else\n            push!(stack, s)\n        end\n   \
    \ end\n    \n    if isempty(stack)\n        return 'Yes'\n    else\n        return\
    \ 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['))', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')('])\n</cell>\n<code language=", "    stack = Stack()\n    for s in lst\n\
    \        if s == '('\n            push!(stack, s)\n        elseif s == ')'\n \
    \           if isempty(stack)\n                return 'No'\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    if isempty(stack)\n\
    \        return 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([')', ')'])\n</cell>\n<text>\nExercise 2\nWrite a function that checks\
    \ if a binary tree is balanced.", "    \n    stack = Stack()\n    \n    for s\
    \ in lst\n        if s == '('\n            push!(stack, s)\n        elseif s ==\
    \ ')'\n            if isempty(stack)\n                return 'No'\n          \
    \  else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    \n    if isempty(stack)\n        return 'Yes'\n    else\n        return 'No'\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that checks if a number is prime or not. Your function\
    \ should take in a single number as an argument, and return 'Yes' if it's prime\
    \ and 'No' otherwise.", "    \n    stack = Stack()\n    \n    for s in lst\n \
    \       if s == '('\n            push!(stack, s)\n        elseif s == ')'\n  \
    \          if isempty(stack)\n                return 'No'\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    \n  \
    \  if isempty(stack)\n        return 'Yes'\n    else\n        return 'No'\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')',\
    \ '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ')', '", "    \n    stack = Stack()\n    \n  \
    \  for s in lst\n        if s == '('\n            push!(stack, s)\n        elseif\
    \ s == ')'\n            if isempty(stack)\n                return 'No'\n     \
    \       else\n                pop!(stack)\n            end\n        else\n   \
    \         if isempty(stack)\n                return 'No'\n            else\n \
    \               pop!(stack)\n            end\n        end\n    end\n    \n   \
    \ if isempty(stack)\n        return 'Yes'\n    else\n        return 'No'\n   \
    \ end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that checks if a number is prime (ie. divisible only by\
    \ 1 and itself).", "    stack = Stack()\n    stack.append(lst[1])\n    \n    for\
    \ elem in lst[2:end]\n        if elem == '('\n            stack.append(elem)\n\
    \        elseif elem == ')'\n            if stack.size == 0\n                return\
    \ \"No\"\n            else\n                stack.pop()\n            end\n   \
    \     else\n            if stack.size == 0\n                return \"No\"\n  \
    \          else\n                stack.pop()\n            end\n        end\n \
    \   end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')'])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')', '(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')", "    stack = Stack()\n    for s in lst\n        if s == '('\n    \
    \        push!(stack, s)\n        elseif s == ')'\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    if isempty(stack)\n        return\
    \ 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens([')',\
    \ ')'])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is prime or not. \nA number is prime if and only if it is a whole number greater\
    \ than 1.\nThe function should take one integer as input, and return 'Yes' if\
    \ it is prime and 'No' otherwise.", "    stack = Stack()\n    for s in lst\n \
    \       if s == '('\n            push!(stack, s)\n        elseif s == ')'\n  \
    \          if isempty(stack)\n                return 'No'\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    if isempty(stack)\n\
    \        return 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([')', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')',\
    \ '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ", "    \n    stack = Vector{String}()\n    \n\
    \    for s in lst\n        if s == '('\n            push!(stack, s)\n        elseif\
    \ s == ')'\n            if isempty(stack)\n                return 'No'\n     \
    \       else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    \n    if isempty(stack)\n        return 'Yes'\n    else\n        return 'No'\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')',\
    \ '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(", "    \n    stack = Vector{String}()\n    \n  \
    \  for s in lst\n        if s == '('\n            push!(stack, s)\n        elseif\
    \ s == ')'\n            if isempty(stack)\n                return 'No'\n     \
    \       else\n                pop!(stack)\n            end\n        else\n   \
    \         if isempty(stack)\n                return 'No'\n            else\n \
    \               pop!(stack)\n            end\n        end\n    end\n    \n   \
    \ if isempty(stack)\n        return 'Yes'\n    else\n        return 'No'\n   \
    \ end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')('])\n</cell>", "    \n    stack = Stack()\n    \n    for s in lst\n     \
    \   if s == '('\n            push!(stack, s)\n        elseif s == ')'\n      \
    \      if isempty(stack)\n                return 'No'\n            else\n    \
    \            pop!(stack)\n            end\n        end\n    end\n    \n    if\
    \ isempty(stack)\n        return 'Yes'\n    else\n        return 'No'\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['()', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')('])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(", "    stack = Stack()\n    for s in\
    \ lst\n        if s == '('\n            push!(stack, s)\n        elseif s == ')'\n\
    \            if isempty(stack)\n                return 'No'\n            else\n\
    \                pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return 'Yes'\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([')', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')',\
    \ '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')',\
    \ '", "    \n    if lst.length == 2\n        return match_parens(lst[1]) == match_parens(lst[0])\
    \ ? 'Yes' : 'No'\n    end\n    \n    stack = Stack()\n    \n    for s in lst\n\
    \        if s == '('\n            push!(stack, s)\n        elseif s == ')'\n \
    \           if !isempty(stack)\n                pop!(stack)\n            else\n\
    \                return 'No'\n            end\n        else\n            if isempty(stack)\n\
    \                return 'No'\n            end\n        end\n    end\n    \n  \
    \  if isempty(stack)\n        return 'Yes'\n    end\n    \n    return 'No'\nend\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['()(', ')'])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')()'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')()('])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')()()'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')()()('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')()()()'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')()()()('])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')()()()()'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')()()()()('])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')()()()()()'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')()()()()()('])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')()()()()()()'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')()()()()()()('])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')()()()()()()()'])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens(['(', ')()()()()()()", "    stack = Stack()\n\
    \    for s in lst\n        if s == '('\n            push!(stack, s)\n        elseif\
    \ s == ')'\n            if isempty(stack)\n                return 'No'\n     \
    \       else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    return 'Yes'\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a binary tree is balanced.",
  "    stack = Stack()\n    for s in lst\n        if s == '('\n            push!(stack,\
    \ s)\n        elseif s == ')'\n            if isempty(stack)\n               \
    \ return 'No'\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    if isempty(stack)\n        return 'Yes'\n    else\n\
    \        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a number is prime or not.\
    \ You may use the\nfollowing algorithm:", "    \n    stack = Stack()\n    stack.append(lst[1])\n\
    \    \n    for char in lst[1]\n        if char == '('\n            stack.append(char)\n\
    \        elseif char == ')'\n            if stack.length() == 0\n            \
    \    return 'No'\n            else\n                popped = stack.pop()\n   \
    \             if popped != '('\n                    return 'No'\n            \
    \    end\n            end\n        end\n    end\n    \n    if stack.length() !=\
    \ 0\n        return 'No'\n    else\n        return 'Yes'\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([')', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', '(', '(', ')'])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens(['(', '(', '(', '(', ')'])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens(['(', '(', '(', '(', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', '(', '(', '(', '(', '(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', '(', '(', '(', '(', '(',\
    \ '(', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', '(',\
    \ '(', '(', '(', '(', '(', '(', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(',\
    \ '(', '(', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')'])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(',\
    \ '(', '(', '(', ')'])\n</cell>\n", "    \n    if length(lst) == 0 \n        return\
    \ \"No\"\n    \n    if length(lst) == 1 \n        if lst[1] == \"(\" \n      \
    \      return \"Yes\"\n        else \n            return \"No\"\n    end", " \
    \   \n    stack = Stack()\n    stack.append(lst[1])\n    \n    for elem in lst[2:end]\n\
    \        if elem == ')'\n            stack.pop()\n        elseif elem == '('\n\
    \            stack.append(elem)\n        else\n            return false\n    end\n\
    \    \n    return stack.length == 1\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['))',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', '(', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ '(', '(', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ '(', '(', '(', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ '(', '(', '(', '(', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ '(', '(', '(', '(', '(', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ '(', '(', '(', '(', '(', '(', '(', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(',\
    \ '(', '(', '(', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(',\
    \ '(', '(', '(', '(', '(', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ '(', '(', '(', '(', '(', '(', '(', '(', '(', '(", "    stack = Stack()\n   \
    \ for s in lst\n        if s == '('\n            push!(stack, s)\n        elseif\
    \ s == ')'\n            if isempty(stack)\n                return 'No'\n     \
    \       else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    if isempty(stack)\n        return 'Yes'\n    else\n        return 'No'\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that checks if a number is prime or not. \nThe function\
    \ should take one integer number as input, and return 'Yes' if it is prime and\
    \ 'No' otherwise.", "    \n    if length(lst) == 0 \n        return \"No\"\n \
    \   \n    stack = Stack()\n    \n    for x in lst\n        if x == '('\n     \
    \       push!(stack, x)\n        elseif x == ')'\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens([')',\
    \ ')'])\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a binary\
    \ tree is balanced.", "    \n    stack = Stack()\n    \n    for s in lst\n   \
    \     if s == '('\n            push!(stack, s)\n        elseif s == ')'\n    \
    \        if isempty(stack)\n                return 'No'\n            else\n  \
    \              pop!(stack)\n            end\n        end\n    end\n    \n    if\
    \ isempty(stack)\n        return 'Yes'\n    else\n        return 'No'\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert match_parens(['()(', ')']) ==\
    \ 'Yes'\n@assert match_parens([')', ')']) == 'No'\n</cell>\n<text>\nExercise 3\n\
    Write a function that checks if a number is prime. Recall that prime numbers are\
    \ only divisible by 1 and themselves.", "    \n    stack = Stack()\n    \n   \
    \ for s in lst\n        if s == '('\n            push!(stack, s)\n        elseif\
    \ s == ')'\n            if isempty(stack)\n                return 'No'\n     \
    \       else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    \n    if isempty(stack)\n        return 'Yes'\n    else\n        return 'No'\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([')', ')'])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that checks if a number is prime or not. \nThe function\
    \ should take one number as an argument and return a boolean value.", "    stack\
    \ = Vector{String}()\n    \n    for s in lst\n        if s == '('\n          \
    \  push!(stack, s)\n        elseif s == ')'\n            if isempty(stack)\n \
    \               return 'No'\n            else\n                pop!(stack)\n \
    \           end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    match_parens(['()(', ')'])\n</cell>\n<code language=julia-1.3>\nmatch_parens(['())',\
    \ ')'])\n</cell>\n<code language=julia-1.3>\nmatch_parens(['(', ')'])\n</cell>\n\
    <code language=julia-1.3>\nmatch_parens(['(', ')', '(', ')'])\n</cell>\n<code\
    \ language=julia-1.3>\nmatch_parens(['(', ')', '(', ')', '(', ')'])\n</cell>\n\
    <code language=julia-1.3>\nmatch_parens(['(', ')', '(', ')', '(', ')', '(', ')'])\n\
    </cell>\n<code language=julia-1.3>\nmatch_parens(['(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.3>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.3>\n\
    match_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')'])\n</cell>\n<code language=julia-1.3>\nmatch_parens(['(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n\
    </cell>\n<code language=julia-1.3>\nmatch_parens(['(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(", " \
    \   stack = Stack()\n    for s in lst\n        if s == '('\n            push!(stack,\
    \ s)\n        elseif s == ')'\n            if isempty(stack)\n               \
    \ return 'No'\n            else\n                pop!(stack)\n            end\n\
    \        else\n            if isempty(stack)\n                return 'No'\n  \
    \          else\n                pop!(stack)\n            end\n        end\n \
    \   end\n    if isempty(stack)\n        return 'Yes'\n    else\n        return\
    \ 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(", "    \n    stack = Stack()\n  \
    \  \n    for s in lst\n        if s == '('\n            push!(stack, s)\n    \
    \    elseif s == ')'\n            if isempty(stack)\n                return 'No'\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    \n    if isempty(stack)\n        return 'Yes'\n    else\n      \
    \  return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert match_parens(['()(',\
    \ ')']) == 'Yes'\n@assert match_parens([')', ')']) == 'No'\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that checks if a binary tree is balanced.", "   \
    \ stack = Stack()\n    for s in lst\n        if s == '('\n            push!(stack,\
    \ s)\n        elseif s == ')'\n            if isempty(stack)\n               \
    \ return 'No'\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    if isempty(stack)\n        return 'Yes'\n    else\n\
    \        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens(['()(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')'])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')'])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')', '(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(",
  "    stack = Vector{String}()\n    stack = push!(stack, \"\")\n    for s in lst\n\
    \        if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\
    \n            if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"((\", \"))\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"((\", \"))\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ((\", \"))\", \"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ((\", \"))\", \"(\", \"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ((\", \"))\", \"(\", \"(\", \"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"((\", \"))\", \"(\", \"(\", \"(\", \"(\", \"(\"])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"((\", \"))\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"((\", \"\
    ))\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"((\", \"))\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"((\", \"))\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ((\", \"))\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\"", "    stack = Stack()\n    for s in lst\n        if\
    \ s == '('\n            push!(stack, s)\n        elseif s == ')'\n           \
    \ if isempty(stack)\n                return 'No'\n            else\n         \
    \       pop!(stack)\n            end\n        end\n    end\n    if isempty(stack)\n\
    \        return 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(['()(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([')', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')',\
    \ '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\n\
    match_parens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')'])\n</cell>\n<code language=julia-1.5>\nmatch_parens(['(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(',\
    \ ')', '(', ')', '(', ')', '(', "]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
