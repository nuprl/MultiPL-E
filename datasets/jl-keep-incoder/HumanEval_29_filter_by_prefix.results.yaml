name: HumanEval_29_filter_by_prefix
language: julia
results:
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings = strings[:]\n    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz6hgcnry.jl:18\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpz6hgcnry.jl:18\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz6hgcnry.jl:16\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz6hgcnry.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    strings = filter( x -> startswith(String(x), prefix), strings)\n  \
    \  \n    if prefix_length == 0\n        return strings\n    \n    strings = filter(\
    \ x -> startswith(String(x), prefix), strings)\n    \n    if prefix_length ==\
    \ 1\n        return strings\n    \n    strings = filter( x -> startswith(String(x),\
    \ prefix), strings)\n    \n    if prefix_length == 2\n        return strings\n\
    \    \n    strings = filter( x -> startswith(String(x), prefix), strings)\n  \
    \  \n    if prefix_length == 3\n        return strings\n    \n    strings = filter(\
    \ x -> startswith(String(x), prefix), strings)\n    \n    if prefix_length ==\
    \ 4\n        return strings\n    \n    strings = filter( x -> startswith(String(x),\
    \ prefix), strings)\n    \n    if prefix_length == 5\n        return strings\n\
    \    \n    strings = filter( x -> startswith(String(x), prefix), strings)\n  \
    \  \n    if prefix_length == 6\n        return strings\n    \n    strings = filter(\
    \ x -> startswith(String(x), prefix), strings)\n    \n    if prefix_length ==\
    \ 7\n        return strings\n    \n    strings = filter( x -> startswith(String(x),\
    \ prefix), strings)\n    \n    if prefix_length == 8\n        return strings\n\
    \    \n    strings = filter( x -> startswith(String(x), prefix), strings)\n  \
    \  \n    if prefix_length == 9\n        return strings\n    \n    strings = filter(\
    \ x -> startswith(String(x), prefix), strings)\n    \n    if prefix_length ==\
    \ 10\n        return strings\n    \n    strings = filter( x -> startswith(String(x),\
    \ prefix), strings)\n    \n    if prefix_length == 11\n        return strings\n\
    \    \n    strings = filter( x -> startswith(String(x), prefix), strings)\n  \
    \  \n    if prefix_length == 12\n        return strings\n    \n    strings = filter(\
    \ x -> startswith(String(x), prefix), strings)\n    \n    if prefix_length ==\
    \ 13\n        return strings\n    \n    strings = filter( x -> startswith(String(x),\
    \ prefix), strings)\n    \n    if prefix_length == 14\n        return strings\n\
    \    \n    strings = filter( x -> startswith(String(x), prefix), strings)\n  \
    \  \n    if prefix_length == 15\n        return strings\n    \n    strings = filter(\
    \ x -> startswith(String(x), prefix), strings)\n    \n    if prefix_length ==\
    \ 16\n        return strings\n    \n    strings = filter( x -> startswith(String(x),\
    \ prefix), strings)\n    \n    if prefix_length == 17\n        return strings\n\
    \    \n    strings = filter( x -> startswith(String(x), prefix\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgdmvn0px.jl:102\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgdmvn0px.jl:102\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if startswith(string, prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that filters a list of\
    \ strings based on whether they start with a given prefix.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpagtb3ggk.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpagtb3ggk.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_len = length(prefix)\n  \
    \  \n    strings = filter( x -> startswith(prefix, x), strings)\n    \n    if\
    \ prefix_len == 0\n        return strings\n    \n    strings = filter( x -> startswith(prefix,\
    \ x), strings)\n    \n    if prefix_len > 0\n        strings = filter( x -> startswith(prefix,\
    \ x), strings)\n    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5e4isasy.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5e4isasy.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for s in strings\n        if startswith(prefix, s)\n            delete!(s, prefix)\n\
    \        end\n    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    filter_by_prefix(L::Vector{String}, prefix::String)::Vector{String}\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5slbz1o0.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5slbz1o0.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for string in strings\n        if string.starts_with(prefix)\n            strings.remove(string)\n\
    \        end\n    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of strings and returns a vector\
    \ of strings that start with a given prefix.\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8zvfrjzl.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8zvfrjzl.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ strings = filter(x->startswith(x, prefix), strings)\n    \n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    strings = strings[:]\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            delete!(strings, string)\n        end\n    end\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.4>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise: Write a function\
    \ that filters an input list of strings only for ones that end with a given suffix.\n\
    \    >>> filter_by_suffix([], 'a')\n    []\n    >>> filter_by_suffix(['abc', 'bcd',\
    \ 'cde', 'array'], 'a')\n    ['abc']\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpe6fbwfg9.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpe6fbwfg9.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if startswith(string, prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nfilter_by_prefix(String[], String)\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz2egn082.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpz2egn082.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ strings = filter( x -> startswith(prefix, x), strings)\n    \n    return strings\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that filters an input list\
    \ of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([],\
    \ 'a')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'b')\n['abc', 'bcd']\n>>>\
    \ filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'c')\n['abc', 'bcd', 'cde']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'd')\n['abc', 'bcd', 'cde',\
    \ 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'e')\n['abc',\
    \ 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'q')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'r')\n['abc', 'b\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqh1za1r8.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqh1za1r8.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if string.startswith(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3: Filtering by length\nWrite a function\
    \ that filters an input list of strings only for ones that have a given length.\n\
    \    >>> filter_by_length([], 'a')\n    []\n    >>> filter_by_length(['abc', 'bcd',\
    \ 'cde', 'array'], 'a')\n    ['abc']\n    >>> filter_by_length(['abc', 'bcd',\
    \ 'cde', 'array'], 'b')\n    ['bcd', 'cde', 'array']\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_djceadf.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_djceadf.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = copy(strings)\n    \n    for string in strings\n\
    \        if startswith(string, prefix)\n            filtered_strings = remove(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that filters an input list of strings only\
    \ for those that end with a given suffix.\n>>> filter_by_suffix([], 'a')\n[]\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'b')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd',\
    \ 'cde', 'array'], 'c')\n['abc', 'bcd', 'cde']\n>>> filter_by_suffix(['abc', 'bcd',\
    \ 'cde', 'array'], 'd')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'e')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'q')\n['abc', 'bcd', 'cde', 'array\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4jai5v0l.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4jai5v0l.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    strings = strings[:]\n    \n    for string in strings\n        if startswith(string,\
    \ prefix)\n            remove!(strings, string)\n        end\n    end\n    \n\
    \    return strings\nend\n</cell>\n<code language=julia-1.4>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters a string list for strings that end with a given suffix.\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpupdoo16_.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpupdoo16_.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for string in strings\n        if string.starts_with(prefix)\n            strings.remove(string)\n\
    \        end\n    end\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9qot045b.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ starts_with\n  Stacktrace:\n   [1] getproperty(::String, ::Symbol) at ./Base.jl:33\n\
    \   [2] filter_by_prefix(::Array{String,1}, ::String) at /tmp/tmp9qot045b.jl:12\n\
    \   [3] top-level scope at /tmp/tmp9qot045b.jl:25\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp9qot045b.jl:23\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9qot045b.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(prefix, x), strings)\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(words, prefix) ->\
    \ Vector{String}\nFilter a list of strings only for those that start with a given\
    \ prefix.\nThe function returns a new list with the filtered strings.\nThe prefix\
    \ is case insensitive.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpe_wmimk6.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpe_wmimk6.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if startswith(string, prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.4>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise\nWrite a function that filters a list of\
    \ strings based on whether they start with a given prefix.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbwis7ibn.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbwis7ibn.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if startswith(string, prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that filters an input\
    \ list of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([],\
    \ 'a')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'b')\n['abc', 'bcd']\n>>>\
    \ filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'c')\n['abc', 'bcd', 'cde']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'd')\n['abc', 'bcd', 'cde',\
    \ 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'e')\n['abc',\
    \ 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm9hpyocz.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm9hpyocz.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for s in strings\n        if startswith(prefix, s)\n            delete!(s, prefix)\n\
    \        end\n    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    filter_by_prefix(L::Vector{String}, prefix::String)::Vector{String}\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo0eyac7d.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpo0eyac7d.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters an input\
    \ list of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([],\
    \ 'a')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'ab')\n['abc']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'cd')\n['cde']\n>>> filter_by_suffix(['abc', 'bcd',\
    \ 'cde', 'array'], 'array')\n['array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'bcd')\n['bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'cde')\n\
    ['cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abc')\n['abc']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'bcdc')\n['bcd']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'bcdde')\n['bcd']\n>>> filter_by_suffix(['abc', 'bcd',\
    \ 'cde', 'array'], 'bcddea')\n['bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'bcddeab')\n['bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'bcddeabc')\n['bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'bcddeabcd')\n\
    ['bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'bcddeabcdc')\n\
    ['bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'bcddeabcdcde')\n\
    ['bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'bcddeabcdcdea')\n\
    ['bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'bcddeabcdcdeab')\n\
    ['bcd']\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps5oqqqud.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmps5oqqqud.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ i = 0\n    while i < length(strings)\n        if strings[i] == prefix\n    \
    \        i += 1\n        else\n            delete!(strings, i)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters strings by a prefix and suffix.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphywqyb7p.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphywqyb7p.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for string in strings\n        if string.starts_with(prefix)\n            delete!(strings,\
    \ string)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters an input list of strings only for ones\
    \ that end with a given suffix.\n>>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'b')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'c')\n['abc', 'bcd', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'd')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'e')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'q')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'c\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t\
    @test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpee6dhc4q.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpee6dhc4q.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if startswith(string, prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters an input\
    \ list of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([],\
    \ 'a')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'b')\n['abc', 'bcd']\n>>>\
    \ filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'c')\n['abc', 'bcd', 'cde']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'd')\n['abc', 'bcd', 'cde',\
    \ 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'e')\n['abc',\
    \ 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9plj0m7k.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9plj0m7k.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that filters a given\
    \ list of strings only for the ones that end with a given suffix.\n>>> filter_by_suffix([],\
    \ 'a')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'b')\n['abc', 'bcd']\n>>>\
    \ filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'c')\n['abc', 'bcd', 'cde']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'd')\n['abc', 'bcd', 'cde',\
    \ 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'e')\n['abc',\
    \ 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'c\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfx45rhsm.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfx45rhsm.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(prefix, x), strings)\n\
    end\n</cell>\n<text>\nExercise 3: Write a function that filters an input list\
    \ of strings only for ones that end with a given suffix.\n    >>> filter_by_suffix([],\
    \ 'a')\n    []\n    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc']\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4grvqto9.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4grvqto9.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for string in strings\n        if string.starts_with(prefix)\n            strings.remove(string)\n\
    \        end\n    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise: Write a function that filters an input list of strings only for those\
    \ that end with a given suffix.\n    >>> filter_by_suffix([], 'a')\n    []\n \
    \   >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc']\n \
    \   \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t\
    @test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqpzvt6we.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqpzvt6we.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    if prefix_length == 0\n        return strings\n    \n    strings_copy\
    \ = copy(strings)\n    \n    for string in strings_copy\n        if startswith(string,\
    \ prefix)\n            delete!(string, prefix_length)\n        end\n    end\n\
    \    \n    return strings_copy\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abd\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"abde\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdez\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abdeza\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abdezab\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abdezabd\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abdezabde\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abdezabdez\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abdezabdeza\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abdezabdezab\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abdezabdezabd\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdezabdezabde\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abdezabde\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp84fb7966.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp84fb7966.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings = strings[:]\n    strings = filter((x)\
    \ -> startswith(prefix, x), strings)\n    return strings\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3vqichaa.jl:18\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp3vqichaa.jl:18\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3vqichaa.jl:16\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3vqichaa.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for string in strings\n        if string.starts_with(prefix)\n            remove!(strings,\
    \ string)\n        end\n    end\n    \n    return strings\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpr2o_09x5.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ starts_with\n  Stacktrace:\n   [1] getproperty(::String, ::Symbol) at ./Base.jl:33\n\
    \   [2] filter_by_prefix(::Array{String,1}, ::String) at /tmp/tmpr2o_09x5.jl:12\n\
    \   [3] top-level scope at /tmp/tmpr2o_09x5.jl:25\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpr2o_09x5.jl:23\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr2o_09x5.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if startswith(string, prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2: filter_by_prefix\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv1jxva1f.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpv1jxva1f.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    return strings\nend\n</cell>\n<text>\nExercise 3: Filtering\
    \ by prefix\nWrite a function that filters an input list of strings only for ones\
    \ that start with a given prefix.\nFor example, given a list of strings:\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp85znmmhb.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp85znmmhb.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(x, prefix), strings)\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that filters out all strings\
    \ that do not start with a given prefix.\nFor example, given the following list\
    \ of strings:\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfixmyki1.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfixmyki1.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if startswith(string, prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise: Write a function that filters strings by\
    \ a prefix and suffix.\nHint: Use filter_by_prefix and filter_by_suffix to solve\
    \ this exercise.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpixt4h0su.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpixt4h0su.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for string in strings\n        if string.starts_with(prefix)\n            strings.remove(string)\n\
    \        end\n    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that filters an input list of strings only for ones that\
    \ end with a given suffix.\n>>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'b')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'c')\n['abc', 'bcd', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'd')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'e')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'q')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9ecfn79h.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9ecfn79h.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings = filter(x->startswith(x, prefix),\
    \ strings)\n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2: filter_by_prefix\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb6ven98d.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpb6ven98d.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for string in strings\n        if string.starts_with(prefix)\n            delete!(strings,\
    \ string)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that filters an input\
    \ list of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([],\
    \ 'a')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'b')\n['abc', 'bcd']\n>>>\
    \ filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'c')\n['abc', 'bcd', 'cde']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'd')\n['abc', 'bcd', 'cde',\
    \ 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'e')\n['abc',\
    \ 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'c\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t\
    @test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz0x_nzxh.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpz0x_nzxh.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ prefix_len = len(prefix)\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            strings.remove(string)\n        end\n    end\n    \n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3ihm3olt.jl:26\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  UndefVarError: len not defined\n  Stacktrace:\n   [1] filter_by_prefix(::Array{String,1},\
    \ ::String) at /tmp/tmp3ihm3olt.jl:11\n   [2] top-level scope at /tmp/tmp3ihm3olt.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3ihm3olt.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp3ihm3olt.jl:27\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n  UndefVarError: len not defined\n  Stacktrace:\n   [1]\
    \ filter_by_prefix(::Array{String,1}, ::String) at /tmp/tmp3ihm3olt.jl:11\n  \
    \ [2] top-level scope at /tmp/tmp3ihm3olt.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3ihm3olt.jl:25\n  \nTest Summary: | Error \
    \ Total\ntest set      |     2      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3ihm3olt.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for string in strings\n        if string.starts_with(prefix)\n            remove!(strings,\
    \ string)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters an input\
    \ list of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([],\
    \ 'a')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'b')\n['abc', 'bcd']\n>>>\
    \ filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'c')\n['abc', 'bcd', 'cde']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'd')\n['abc', 'bcd', 'cde',\
    \ 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'e')\n['abc',\
    \ 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'c\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t\
    @test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpex_ltg_g.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpex_ltg_g.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for string in strings\n        if string.starts_with(prefix)\n            delete!(strings,\
    \ string)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L::Vector{String}, prefix::String)::Vector{String}\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpejvda1nt.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpejvda1nt.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for string in strings\n        if string.starts_with(prefix)\n            delete!(strings,\
    \ string)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of\
    \ strings and returns a vector of strings where each string starts with the prefix\
    \ \"array\".\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t\
    @test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptkoafiff.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptkoafiff.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = copy(strings)\n    \n    for string in strings\n\
    \        if startswith(string, prefix)\n            filtered_strings = remove(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L::Vector{String}, prefix::String)::Vector{String}\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4d6_20u3.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4d6_20u3.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings = strings[:]\n    strings = filter((x)\
    \ -> startswith(prefix, x), strings)\n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L::AbstractVector, prefix::AbstractString)\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbt64xufs.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbt64xufs.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = filter( x -> startswith(prefix,\
    \ x), strings)\n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_6y8_4m_.jl:18\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp_6y8_4m_.jl:18\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_6y8_4m_.jl:16\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_6y8_4m_.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if startswith(string, prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 7: filter_by_prefix\nWrite a function that filters an input list of strings\
    \ only for ones that start with a given prefix.\nThis function should take as\
    \ input a vector of strings and a prefix string.\nThe function should return a\
    \ new vector of strings that only contains strings that start with the given prefix.\n\
    For example, given the following input vector:\n[\"abc\", \"bcd\", \"cde\", \"\
    array\"]\nand the prefix \"a\", the function should return the following new vector:\n\
    [\"abc\", \"array\"]\nThis function should work for any prefix string, not just\
    \ \"a\".\nFor example, given the following input vector:\n[\"abc\", \"bcd\", \"\
    cde\", \"array\"]\nand the prefix \"ab\", the function should return the following\
    \ new vector:\n[\"abc\"]\nHint: Use filter_by_prefix to solve this exercise.\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcz39e91y.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcz39e91y.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters a list of\
    \ strings based on whether they start with a given prefix.\nThis function should\
    \ return a vector of strings that start with the given prefix.\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzpt01qc5.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzpt01qc5.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters an input list of strings only for ones\
    \ that end with a given suffix.\n>>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'b')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'c')\n['abc', 'bcd', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'd')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'e')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'q')\n['abc', 'bcd', 'cde\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpas27h0kt.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpas27h0kt.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ filters an input list of strings only for ones that end with a given suffix.\n\
    >>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'a')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'b')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'c')\n\
    ['abc', 'bcd', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'd')\n\
    ['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'e')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt3uox_3z.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpt3uox_3z.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if string.startswith(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters strings by a certain prefix and suffix.\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2houet0u.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2houet0u.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for string in strings\n        if string.starts_with(prefix)\n            delete!(strings,\
    \ string)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters an input\
    \ list of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([],\
    \ 'a')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'b')\n['abc', 'bcd']\n>>>\
    \ filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'c')\n['abc', 'bcd', 'cde']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'd')\n['abc', 'bcd', 'cde',\
    \ 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'e')\n['abc',\
    \ 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'c\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t\
    @test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpclp3c2d7.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpclp3c2d7.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for string in strings\n        if string.starts_with(prefix)\n            delete!(strings,\
    \ string)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of strings and a prefix and returns\
    \ a vector of strings containing only the strings that start with the prefix.\
    \ For example, given the following input:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkvyx8qb2.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkvyx8qb2.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if startswith(string, prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 3: filter_by_prefix\nWrite a function that filters an input list of strings\
    \ only for ones that start with a given prefix.\nThe function should return a\
    \ vector of strings that start with the given prefix.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcd1iz5n3.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcd1iz5n3.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise\nWrite a function that filters an input list\
    \ of strings only for ones that end with a given suffix.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj81s6v0d.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj81s6v0d.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters an input list of strings only for ones\
    \ that end with a given suffix.\n>>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'b')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'c')\n['abc', 'bcd', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'd')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'e')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'q')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0l4e3zi5.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0l4e3zi5.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings = filter( x -> startswith(x, prefix),\
    \ strings)\n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings = strings[strings.length>0]\n\
    \    strings = strings[strings[end-1].startsWith(prefix)]\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpm801syrn.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  type Array has no field length\n  Stacktrace:\n   [1] getproperty(::Array{String,1},\
    \ ::Symbol) at ./Base.jl:33\n   [2] filter_by_prefix(::Array{String,1}, ::String)\
    \ at /tmp/tmpm801syrn.jl:8\n   [3] top-level scope at /tmp/tmpm801syrn.jl:17\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpm801syrn.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpm801syrn.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n  type Array has no field length\n  Stacktrace:\n   [1]\
    \ getproperty(::Array{String,1}, ::Symbol) at ./Base.jl:33\n   [2] filter_by_prefix(::Array{String,1},\
    \ ::String) at /tmp/tmpm801syrn.jl:8\n   [3] top-level scope at /tmp/tmpm801syrn.jl:18\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpm801syrn.jl:16\n  \nTest Summary: | Error \
    \ Total\ntest set      |     2      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm801syrn.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    strings = strings[:]\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpeaor_307.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpeaor_307.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpeaor_307.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for string in strings\n        if string.starts_with(prefix)\n            remove!(strings,\
    \ string)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that filters a list of strings based on whether they\
    \ end with a given suffix.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpprbi1zul.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpprbi1zul.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = filter( x -> startswith(prefix,\
    \ x), strings)\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4h9gvinb.jl:19\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp4h9gvinb.jl:19\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4h9gvinb.jl:17\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4h9gvinb.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters an input list of strings only for ones\
    \ that end with a given suffix.\n>>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'ab')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'cd')\n['abc', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'de')\n['abc', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'bc')\n['abc', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'bcde')\n['abc', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'array')\n['abc', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'abarray')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abbcde')\n\
    ['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abbcdearray')\n\
    ['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abbcdearray')\n\
    ['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abbcdearray')\n\
    ['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abbcdearray')\n\
    ['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abbcdearray')\n\
    ['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abbcdearray')\n\
    ['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abbcdearray')\n\
    ['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abbcdearray')\n\
    ['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abbcdearray')\n\
    ['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abbcdearray')\n\
    ['abc\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxz4pwwts.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxz4pwwts.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if string.startswith(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters an input\
    \ list of strings only for those that end with a given suffix.\n>>> filter_by_suffix([],\
    \ 'a')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'b')\n['abc', 'bcd']\n>>>\
    \ filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'c')\n['abc', 'bcd', 'cde']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'd')\n['abc', 'bcd', 'cde',\
    \ 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'e')\n['abc',\
    \ 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo4oqzfgg.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpo4oqzfgg.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp6mafxr9.jl:17\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpp6mafxr9.jl:17\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp6mafxr9.jl:15\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp6mafxr9.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters a vector of strings based on whether they end with a\
    \ given suffix.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8t9klagz.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8t9klagz.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters an input list of strings only for ones\
    \ that end with a given suffix.\n>>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'b')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'c')\n['abc', 'bcd', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'd')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'e')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'q')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgj64fo_o.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgj64fo_o.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for string in strings\n        if string.starts_with(prefix)\n            strings.remove(string)\n\
    \        end\n    end\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3vm8y61z.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ starts_with\n  Stacktrace:\n   [1] getproperty(::String, ::Symbol) at ./Base.jl:33\n\
    \   [2] filter_by_prefix(::Array{String,1}, ::String) at /tmp/tmp3vm8y61z.jl:12\n\
    \   [3] top-level scope at /tmp/tmp3vm8y61z.jl:25\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp3vm8y61z.jl:23\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3vm8y61z.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for string in strings\n        if string.starts_with(prefix)\n            strings.remove(string)\n\
    \        end\n    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters a list of strings based on whether they\
    \ start with a given prefix.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8m_yn3a7.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8m_yn3a7.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if startswith(string, prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters an input list of strings only for those\
    \ that end with a given suffix.\n>>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'b')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'c')\n['abc', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'd')\n\
    ['abc', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'e')\n['abc', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'f')\n['abc', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'g')\n['abc', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'h')\n['abc', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'i')\n['abc', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'j')\n['abc', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'k')\n['abc', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'l')\n['abc', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'm')\n['abc', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'n')\n['abc', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'o')\n['abc', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'p')\n['abc', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'q')\n['abc', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'r')\n['abc', 'cde', 'array']\n>>> filter_by_suffix(['\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq24y_oi6.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq24y_oi6.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    strings = filter( x -> startswith(String(x), prefix), strings)\n  \
    \  \n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L::AbstractVector,\
    \ prefix::AbstractString)\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkhseh3xg.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkhseh3xg.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(x, prefix), strings)\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that filters an input list\
    \ of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([],\
    \ 'a')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'ab')\n['abc']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'cd')\n['abc', 'cde']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'abd')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd',\
    \ 'cde', 'array'], 'abd')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'abd')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n\
    ['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n['abc']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n['abc']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'abd')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd',\
    \ 'cde', 'array'], 'abd')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'abd')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n\
    ['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n['abc']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n['abc']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'abd')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd',\
    \ 'cde', 'array'], 'abd')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'abd')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n\
    ['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n['abc']\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp85tp8me.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpp85tp8me.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for s in strings\n        if startswith(prefix, s)\n            delete!(s, prefix)\n\
    \        end\n    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters strings by a regular expression.\nThe\
    \ function should take two arguments: a string and a regular expression. The function\
    \ should return a new list containing only those strings that match the regular\
    \ expression.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuvjhidud.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpuvjhidud.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = filter( x -> startswith(x,\
    \ prefix), strings)\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for string in strings\n        if string.starts_with(prefix)\n            strings.remove(string)\n\
    \        end\n    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that filters an input list of strings only for ones that\
    \ end with a given suffix.\n>>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'b')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'c')\n['abc', 'bcd', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'd')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'e')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'q')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt3jrdscz.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpt3jrdscz.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if string.startswith(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"ab\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abde\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abdez\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\",\
    \ \"bcd\", \"cde\", \"array\"], \"abdeza\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abdezab\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abdezabd\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abdezabde\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abdezabdez\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abdezabdeza\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdezabdezab\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abdezabdezabd\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abdezabdezabde\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdezabdezabdez\")\n</cell>\n<code language=\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn801o647.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpn801o647.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that filters a list of strings only for those that\
    \ end with a given suffix.\n>>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'b')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'c')\n['abc', 'bcd', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'd')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'e')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'q')\n['abc', 'bcd', 'cde', 'array\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8n0ila8h.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8n0ila8h.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for string in strings\n        if string.starts_with(prefix)\n            strings.remove(string)\n\
    \        end\n    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise\
    \ 3: filter_by_prefix\nWrite a function that filters an input list of strings\
    \ only for ones that start with a given prefix.\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphigf5gkt.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphigf5gkt.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for string in strings\n        if string.starts_with(prefix)\n            delete!(strings,\
    \ string)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise: Write a function that filters a list of\
    \ strings only for those that end with a given suffix.\n    >>> filter_by_suffix([],\
    \ 'a')\n    []\n    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc']\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpowblywn_.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpowblywn_.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for string in strings\n        if string.starts_with(prefix)\n            strings.remove(string)\n\
    \        end\n    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    filter_by_prefix(string, prefix) -> boolean\nFilter an input list of strings only\
    \ for ones that start with a given prefix.\nThis function returns true if the\
    \ input string starts with the prefix, otherwise it returns false.\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyy9tuz51.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyy9tuz51.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings = filter( x -> startswith(prefix,\
    \ x), strings)\n    return strings\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that filters an input list of strings only for ones that end with a\
    \ given suffix.\n>>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'ab')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'cd')\n['abc', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'bc')\n['abc', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'array')\n['array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n\
    ['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'bcd')\n['abc',\
    \ 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'cde')\n['abc',\
    \ 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'cda')\n[]\n>>>\
    \ filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'cdb')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'cdbd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'cdbda')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'cdbdb')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'cdbdbd')\n\
    []\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'cdbdbda')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'cdbdbdb')\n[]\n>>> filter_by_suffix(['abc', 'bcd',\
    \ 'cde', 'array'], 'cdbdbdbd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'cdbdbdbda')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'cdbdbdbdb')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'cdbdbdbdbd')\n\
    []\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'cdbdbdbdbda')\n[]\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'cdbdbdbdb\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmbjeevfv.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmbjeevfv.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(prefix, x), strings)\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise: Write a function that filters\
    \ an input list of strings only for ones that end with a given suffix.\n    >>>\
    \ filter_by_suffix([], 'a')\n    []\n    >>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'a')\n    ['abc']\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpisg2_vy2.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpisg2_vy2.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for string in strings\n        if string.starts_with(prefix)\n            delete!(strings,\
    \ string)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.4>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nfilter_by_prefix(string, prefix) returns a new list\
    \ containing only the strings that start with the prefix string.\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkyhdwvnb.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkyhdwvnb.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for string in strings\n        if string.starts_with(prefix)\n            strings.remove(string)\n\
    \        end\n    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that filters a list of strings based on whether they start\
    \ with a given prefix.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfels0ojk.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfels0ojk.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if string.startswith(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters strings\
    \ by a regular expression. For example, filter_by_regex([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"^a.*\") should return [\"abc\", \"array\"].\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5i1int3c.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5i1int3c.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings = filter(x->startswith(x, prefix),\
    \ strings)\n    return strings\nend\n</cell>\n<code language=julia-1.3>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise\nWrite\
    \ a function that filters strings by a prefix and suffix.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplo2ddco4.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplo2ddco4.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings = filter(x->startswith(x, prefix),\
    \ strings)\n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(prefix, x), strings)\n\
    end\n</cell>\n<text>\nfilter_by_prefix(words, \"a\")\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsqdmljyd.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsqdmljyd.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for string in strings\n        if string.starts_with(prefix)\n            remove!(strings,\
    \ string)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nfilter_by_prefix(String[], String)\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3ubigk9q.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3ubigk9q.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings = strings[:]\n    strings = filter(x->startswith(x,\
    \ prefix), strings)\n    return strings\nend\n</cell>\n<code language=julia-1.3>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2: filter_by_prefix\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprag21hgq.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprag21hgq.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters an input\
    \ list of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([],\
    \ 'a')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'b')\n['abc', 'bcd']\n>>>\
    \ filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'c')\n['abc', 'bcd', 'cde']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'd')\n['abc', 'bcd', 'cde',\
    \ 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'e')\n['abc',\
    \ 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr6n7b01p.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpr6n7b01p.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    strings = strings[:]\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            remove!(strings, string)\n        end\n    end\n    \n    return\
    \ strings\nend\n</cell>\n<text>\nExercise 3: Filtering by Prefix\nWrite a function\
    \ that filters an input list of strings only for ones that start with a given\
    \ prefix.\nFor example, given a list of strings ['abc', 'bcd', 'cde', 'array'],\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') should return ['abc',\
    \ 'array'].\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t\
    @test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzrag5ezd.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzrag5ezd.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for s in strings\n        if startswith(prefix, s)\n            delete!(s, prefix)\n\
    \        end\n    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise: Write a function that filters an input list of strings only for ones\
    \ that end with a given suffix.\n    >>> filter_by_suffix([], 'a')\n    []\n \
    \   >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t\
    @test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpknzmefn2.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpknzmefn2.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for string in strings\n        if string.starts_with(prefix)\n            strings.remove(string)\n\
    \        end\n    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that filters an input list of strings only for ones that\
    \ end with a given suffix.\n>>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'b')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'c')\n['abc', 'bcd', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'd')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'e')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'q')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3_r3xnkx.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3_r3xnkx.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for s in strings\n        if startswith(s, prefix)\n            delete!(s, prefix)\n\
    \        end\n    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters a string list for strings that end with\
    \ a given suffix.\n>>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'b')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'c')\n['abc', 'bcd', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'd')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'e')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], '\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd8lrqdrd.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpd8lrqdrd.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    strings = filter( x -> startswith(x, prefix), strings)\n    \n    if\
    \ prefix_length == 0\n        return strings\n    else\n        return filter_by_prefix(strings,\
    \ substring(prefix, 1, prefix_length))\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of strings and returns a vector\
    \ of strings that only contain the words that start with a given prefix.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn6bw5gw4.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpn6bw5gw4.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if string.startswith(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters an input\
    \ list of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([],\
    \ 'a')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'b')\n['abc', 'bcd']\n>>>\
    \ filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'c')\n['abc', 'bcd', 'cde']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'd')\n['abc', 'bcd', 'cde',\
    \ 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'e')\n['abc',\
    \ 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpro9uctr_.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpro9uctr_.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings = strings[:]\n    strings = filter((x)\
    \ -> startswith(prefix, x), strings)\n    return strings\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4ir2l6ci.jl:18\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp4ir2l6ci.jl:18\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4ir2l6ci.jl:16\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4ir2l6ci.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for string in strings\n        if string.starts_with(prefix)\n            delete!(strings,\
    \ string)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 4\nWrite a function that takes a vector of\
    \ strings and a prefix and returns a vector of strings that start with the prefix.\
    \ For example, filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\"\
    ) should return [\"abc\", \"array\"].\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyd7zbfht.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyd7zbfht.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    strings = filter(x -> startswith(String(x), prefix), strings)\n   \
    \ \n    if prefix_length == 0\n        return strings\n    else\n        return\
    \ filter_by_prefix(strings, prefix[1:end-1]) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters a given list of strings only for the\
    \ ones that end with a given suffix.\n>>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'b')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'c')\n['abc', 'bcd', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'd')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'e')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi06vh3po.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpi06vh3po.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    if prefix_length == 0\n        return strings\n    \n    strings_filtered\
    \ = Vector{String}()\n    \n    for string in strings\n        if startswith(string,\
    \ prefix)\n            strings_filtered << string\n        end\n    end\n    \n\
    \    return strings_filtered\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that filters an input list of strings only for ones that end with\
    \ a given suffix.\n>>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'ab')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'bc')\n['bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'cd')\n\
    ['cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'de')\n['cde']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'array')\n['array']\n>>>\
    \ filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n['abc']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'bcd')\n['bcd']\n>>> filter_by_suffix(['abc', 'bcd',\
    \ 'cde', 'array'], 'cde')\n['cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'dea')\n['cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'de')\n['cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'dea')\n\
    ['cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'de')\n['cde']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'dea')\n['cde']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'de')\n['cde']\n>>> filter_by_suffix(['abc', 'bcd',\
    \ 'cde', 'array'], 'dea')\n['cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'de')\n['cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'dea')\n['cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4ngiuben.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4ngiuben.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp03t8cjxz.jl:19\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp03t8cjxz.jl:19\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp03t8cjxz.jl:17\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp03t8cjxz.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters an input\
    \ list of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([],\
    \ 'a')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'b')\n['abc', 'bcd']\n>>>\
    \ filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'c')\n['abc', 'bcd', 'cde']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'd')\n['abc', 'bcd', 'cde',\
    \ 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'e')\n['abc',\
    \ 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjv_igdm9.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjv_igdm9.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings = filter(x->startswith(x, prefix),\
    \ strings)\n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(prefix, x), strings)\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String}\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplct81l6x.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplct81l6x.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx8nz8qr9.jl:17\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpx8nz8qr9.jl:17\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx8nz8qr9.jl:15\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx8nz8qr9.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ strings = filter((x) -> startswith(prefix, x), strings)\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(String[], String)\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwxa1jkcm.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwxa1jkcm.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for string in strings\n        if string.starts_with(prefix)\n            delete!(strings,\
    \ string)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nfilter_by_prefix(vector, prefix)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxsd42pwj.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxsd42pwj.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if startswith(string, prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters an input\
    \ list of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([],\
    \ 'a')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc',\
    \ 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'b')\n['abc',\
    \ 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'c')\n['abc', 'cde']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'd')\n['abc', 'cde', 'array']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'e')\n['abc', 'cde', 'array']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'f')\n['abc', 'cde', 'array']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'g')\n['abc', 'cde', 'array']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'h')\n['abc', 'cde', 'array']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'i')\n['abc', 'cde', 'array']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'j')\n['abc', 'cde', 'array']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'k')\n['abc', 'cde', 'array']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'l')\n['abc', 'cde', 'array']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'm')\n['abc', 'cde', 'array']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'n')\n['abc', 'cde', 'array']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'o')\n['abc', 'cde', 'array']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'p')\n['abc', 'cde', 'array']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'q')\n['abc', 'cde', 'array']\n\
    \nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_8o2vj75.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_8o2vj75.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = copy(strings)\n    \n    for string in strings\n\
    \        if startswith(string, prefix)\n            filtered_strings = remove(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters an input\
    \ list of strings only for those that end with a given suffix.\n>>> filter_by_suffix([],\
    \ 'a')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'b')\n['abc', 'bcd']\n>>>\
    \ filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'c')\n['abc', 'bcd', 'cde']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'd')\n['abc', 'bcd', 'cde',\
    \ 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'e')\n['abc',\
    \ 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprkcwaxlq.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprkcwaxlq.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for s in strings\n        if startswith(s, prefix)\n            delete!(s, prefix)\n\
    \        end\n    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise: filter_by_prefix([], \"a\")\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxudy_zmr.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxudy_zmr.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    strings = filter( x -> startswith(String(x), prefix), strings)\n  \
    \  \n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    if prefix_length == 0\n        return strings\n    \n    strings_filtered\
    \ = Vector{String}()\n    \n    for string in strings\n        if startswith(string,\
    \ prefix)\n            strings_filtered << string\n        end\n    end\n    \n\
    \    return strings_filtered\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of strings and returns a vector of strings that\
    \ start with a given prefix.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8cq8o4z4.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8cq8o4z4.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for string in strings\n        if string.starts_with(prefix)\n            delete!(strings,\
    \ string)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters strings by a regular expression.\nThe\
    \ function should take three arguments:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo9a0cmgs.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpo9a0cmgs.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if startswith(string, prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that filters strings\
    \ based on whether they start with a given prefix.\nThis function should take\
    \ as input a list of strings and a prefix string.\nThe function should return\
    \ a list of strings only containing the strings that start with the given prefix.\n\
    For example, if the prefix is \"a\", then the function should return [\"abc\"\
    , \"array\"].\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmk40kzgg.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmk40kzgg.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for string in strings\n        if string.starts_with(prefix)\n            delete!(strings,\
    \ string)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L::Vector{String}, prefix::String)::Vector{String}\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplewnwa5t.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplewnwa5t.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters an input list of strings only for those\
    \ that end with a given suffix.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpaacqf3sq.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpaacqf3sq.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(prefix, x), strings)\n\
    end\n</cell>\n<code language=julia-1.3>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter!\nfilter! modifies the input\
    \ list in-place and returns the modified list. \nThe function filter! modifies\
    \ the input list in-place and returns the modified list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjpes5mco.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjpes5mco.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    strings = filter(s -> startswith(s, prefix), strings)\n    \n    if\
    \ prefix_length == 0\n        strings\n    else\n        map(s -> substring(s,\
    \ prefix_length), strings)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    filter_by_prefix(L::AbstractVector, prefix::AbstractString)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxul7o4zn.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxul7o4zn.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwjn9kp8e.jl:19\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpwjn9kp8e.jl:19\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwjn9kp8e.jl:17\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwjn9kp8e.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ strings = filter( x -> startswith(prefix, x), strings)\n    \n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd96qwrze.jl:21\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpd96qwrze.jl:21\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpd96qwrze.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd96qwrze.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = filter(x->startswith(x,\
    \ prefix), strings)\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if startswith(string, prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that filters strings\
    \ by a regular expression. \nThe function should take two arguments: the list\
    \ of strings and the regular expression. \nThe function should return a list of\
    \ strings that match the regular expression. \nThe function should ignore case\
    \ when matching.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo1gkns3k.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpo1gkns3k.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ strings = filter( x -> startswith(prefix, x), strings)\n    \n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpco0z2hps.jl:21\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpco0z2hps.jl:21\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpco0z2hps.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpco0z2hps.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    strings_filtered = Vector{String}()\n    \n    for string in strings\n\
    \        if startswith(string, prefix)\n            strings_filtered << string\n\
    \        end\n    end\n    \n    return strings_filtered\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters a list of strings based on whether they\
    \ start with a given prefix.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl58vi2t6.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpl58vi2t6.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    strings = filter(x->startswith(prefix, x), strings)\n    \n    if prefix_length\
    \ == 0\n        return strings\n    \n    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    \n    if prefix_length == 1\n        return strings\n    \n\
    \    strings = filter(x->startswith(prefix, x), strings)\n    \n    if prefix_length\
    \ == 2\n        return strings\n    \n    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    \n    if prefix_length == 3\n        return strings\n    \n\
    \    strings = filter(x->startswith(prefix, x), strings)\n    \n    if prefix_length\
    \ == 4\n        return strings\n    \n    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    \n    if prefix_length == 5\n        return strings\n    \n\
    \    strings = filter(x->startswith(prefix, x), strings)\n    \n    if prefix_length\
    \ == 6\n        return strings\n    \n    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    \n    if prefix_length == 7\n        return strings\n    \n\
    \    strings = filter(x->startswith(prefix, x), strings)\n    \n    if prefix_length\
    \ == 8\n        return strings\n    \n    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    \n    if prefix_length == 9\n        return strings\n    \n\
    \    strings = filter(x->startswith(prefix, x), strings)\n    \n    if prefix_length\
    \ == 10\n        return strings\n    \n    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    \n    if prefix_length == 11\n        return strings\n   \
    \ \n    strings = filter(x->startswith(prefix, x), strings)\n    \n    if prefix_length\
    \ == 12\n        return strings\n    \n    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    \n    if prefix_length == 13\n        return strings\n   \
    \ \n    strings = filter(x->startswith(prefix, x), strings)\n    \n    if prefix_length\
    \ == 14\n        return strings\n    \n    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    \n    if prefix_length == 15\n        return strings\n   \
    \ \n    strings = filter(x->startswith(prefix, x), strings)\n    \n    if prefix_length\
    \ == 16\n        return strings\n    \n    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    \n    if prefix_length == 17\n        return strings\n   \
    \ \n    strings = filter(x->startswith(prefix, x), strings)\n    \n    if prefix_length\
    \ == 18\n        return strings\n    \n    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    \n    if prefix_length == 19\n        return strings\n   \
    \ \n    strings = filter(x->startswith(prefix, x), strings)\n    \n    if \nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing condition in \"if\" at /tmp/tmp6ccykybr.jl:113\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp6ccykybr.jl:114\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp6ccykybr.jl:114\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if startswith(string, prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise: Write a function that filters strings by\
    \ a prefix and suffix.\nThe function should take two arguments: a list of strings\
    \ and a prefix and suffix.\nThe function should return a list of strings that\
    \ start with the prefix and end with the suffix.\nThe function should ignore case\n\
    The function should ignore leading and trailing whitespace\nThe function should\
    \ ignore empty strings\nThe function should ignore empty prefixes and suffixes\n\
    The function should ignore prefixes and suffixes that contain whitespace\nThe\
    \ function should ignore prefixes and suffixes that do not start with a letter\n\
    The function should ignore prefixes and suffixes that do not end with a letter\n\
    The function should ignore prefixes and suffixes that do not contain any letter\n\
    The function should ignore prefixes and suffixes that do not contain any letter\n\
    The function should ignore prefixes and suffixes that do not contain any letter\n\
    The function should ignore prefixes and suffixes that do not contain any letter\n\
    The function should ignore prefixes and suffixes that do not contain any letter\n\
    The function should ignore prefixes and suffixes that do not contain any letter\n\
    The function should ignore prefixes and suffixes that do not contain any letter\n\
    The function should ignore prefixes and suffixes that do not contain any letter\n\
    The function should ignore prefixes and suffixes that do not contain any letter\n\
    The function should ignore prefixes and suffixes that do not contain any letter\n\
    The function should ignore prefixes and suffixes that do not contain any letter\n\
    The function should ignore prefixes and suffixes that do not contain any letter\n\
    The function should ignore prefixes and suffixes that do not contain any letter\n\
    The function should ignore prefixes and suffixes that do not contain any letter\n\
    The function should ignore prefixes and suffixes that do not contain any letter\n\
    The function should ignore prefixes and suffixes that do not contain any letter\n\
    The function should ignore prefixes and suffixes that do not contain any letter\n\
    The function should ignore prefixes and suffixes that do not contain any letter\n\
    The function should ignore prefixes and suffixes that do not contain any letter\n\
    The function should ignore prefixes and suffixes that do not contain any letter\n\
    The function should ignore prefix\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2xgz4_z4.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2xgz4_z4.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for s in strings\n        if startswith(prefix, s)\n            delete!(s, prefix)\n\
    \        end\n    end\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpflmhq91j.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method\
    \ matching delete!(::String, ::String)\n  Closest candidates are:\n    delete!(!Matched::IdDict{K,V}\
    \ where V, ::Any) where K at abstractdict.jl:626\n    delete!(!Matched::Base.IdSet,\
    \ ::Any) at abstractdict.jl:695\n    delete!(!Matched::Dict, ::Any) at dict.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_prefix(::Array{String,1}, ::String)\
    \ at /tmp/tmpflmhq91j.jl:13\n   [2] top-level scope at /tmp/tmpflmhq91j.jl:25\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpflmhq91j.jl:23\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpflmhq91j.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(prefix, x), strings)\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter!\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_fgd63x7.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_fgd63x7.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings = strings[:]\n    strings = filter(x->startswith(x,\
    \ prefix), strings)\n    return strings\nend\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for string in strings\n        if string.starts_with(prefix)\n            delete!(strings,\
    \ string)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise: Write a function that filters strings based\
    \ on whether they end with a given suffix.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppnw1kxvd.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppnw1kxvd.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for string in strings\n        if string.starts_with(prefix)\n            strings.remove(string)\n\
    \        end\n    end\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0euxx7me.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ starts_with\n  Stacktrace:\n   [1] getproperty(::String, ::Symbol) at ./Base.jl:33\n\
    \   [2] filter_by_prefix(::Array{String,1}, ::String) at /tmp/tmp0euxx7me.jl:12\n\
    \   [3] top-level scope at /tmp/tmp0euxx7me.jl:25\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp0euxx7me.jl:23\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0euxx7me.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for s in strings\n        if startswith(prefix, s)\n            delete!(s, prefix)\n\
    \        end\n    end\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpt7dy5f62.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method\
    \ matching delete!(::String, ::String)\n  Closest candidates are:\n    delete!(!Matched::IdDict{K,V}\
    \ where V, ::Any) where K at abstractdict.jl:626\n    delete!(!Matched::Base.IdSet,\
    \ ::Any) at abstractdict.jl:695\n    delete!(!Matched::Dict, ::Any) at dict.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_prefix(::Array{String,1}, ::String)\
    \ at /tmp/tmpt7dy5f62.jl:13\n   [2] top-level scope at /tmp/tmpt7dy5f62.jl:25\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpt7dy5f62.jl:23\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt7dy5f62.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if startswith(string, prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters an input list of strings only for ones\
    \ that end with a given suffix.\n>>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'b')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'c')\n['abc', 'bcd', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'd')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'e')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'q')\n['abc', 'bcd', 'cde', 'array\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpljukigkr.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpljukigkr.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for string in strings\n        if string.starts_with(prefix)\n            strings.remove(string)\n\
    \        end\n    end\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpo2m9yzp0.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ starts_with\n  Stacktrace:\n   [1] getproperty(::String, ::Symbol) at ./Base.jl:33\n\
    \   [2] filter_by_prefix(::Array{String,1}, ::String) at /tmp/tmpo2m9yzp0.jl:12\n\
    \   [3] top-level scope at /tmp/tmpo2m9yzp0.jl:25\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpo2m9yzp0.jl:23\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo2m9yzp0.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = copy(strings)\n    \n    for string in strings\n\
    \        if startswith(string, prefix)\n            filtered_strings = remove(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3: Filtering by substrings\nWrite a function\
    \ that filters an input list of strings only for ones that contain a given substring.\n\
    >>> filter_by_substring([], 'a')\n[]\n>>> filter_by_substring(['abc', 'bcd', 'cde',\
    \ 'array'], 'a')\n['abc', 'array']\n>>> filter_by_substring(['abc', 'bcd', 'cde',\
    \ 'array'], 'ab')\n['abc']\n>>> filter_by_substring(['abc', 'bcd', 'cde', 'array'],\
    \ 'bc')\n['bcd']\n>>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'cd')\n\
    ['cde']\n>>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'array')\n['array']\n\
    >>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_substring(['abc',\
    \ 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_substring(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n[]\n>>> filter_by_substring(['abc', 'bcd', 'cde', 'array'],\
    \ 'abd')\n[]\n>>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'abd')\n\
    []\n>>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_substring(['abc',\
    \ 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_substring(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n[]\n>>> filter_by_substring(['abc', 'bcd', 'cde', 'array'],\
    \ 'abd')\n[]\n>>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'abd')\n\
    []\n>>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_substring(['abc',\
    \ 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_substring(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n[]\n>>> filter_by_substring(['abc', 'bcd', 'cde', 'array'],\
    \ 'abd')\n[]\n>>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'abd')\n\
    []\n>>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx2u6ccbl.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpx2u6ccbl.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = filter(x->startswith(x,\
    \ prefix), strings)\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings = filter(x->startswith(x, prefix),\
    \ strings)\n    return strings\nend\n</cell>\n<text>\nfilter_by_prefix(all_strings,\
    \ \"array\")\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t\
    @test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv2gt54ss.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpv2gt54ss.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for string in strings\n        if string.starts_with(prefix)\n            strings.remove(string)\n\
    \        end\n    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters strings by a regular expression.\nThe\
    \ function should take two arguments: a list of strings and a regular expression.\
    \ The function should return a list of strings that match the regular expression.\
    \ The function should ignore case when matching.\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpefl73mcv.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpefl73mcv.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for string in strings\n        if string.starts_with(prefix)\n            remove!(strings,\
    \ string)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters an input list of strings only for ones\
    \ that end with a given suffix.\n>>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'ab')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'cd')\n['abc', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'array')\n['array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n\
    []\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n\
    []\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n\
    []\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n\
    []\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n\
    []\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ '\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpus8ywpo_.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpus8ywpo_.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings = filter(x->startswith(x,prefix),\
    \ strings)\n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"ab\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abde\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abdez\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\",\
    \ \"bcd\", \"cde\", \"array\"], \"abdeza\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abdezab\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abdezabd\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abdezabde\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abdezabdez\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abdezabdeza\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdezabdezab\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abdezabdezabd\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abdezabdezabde\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdezabdezabdez\")\n</cell>\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppvrkb088.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppvrkb088.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings = strings[2:end]\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9yven4y4.jl:17\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"] == [\"xxx\", \"xxxAAA\", \"xxx\"]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp9yven4y4.jl:17\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9yven4y4.jl:15\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9yven4y4.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_len = length(prefix)\n  \
    \  \n    strings = filter( x -> startswith(String(x), prefix), strings)\n    \n\
    \    if prefix_len == 0\n        return strings\n    else\n        return filter_by_prefix(strings,\
    \ prefix[1:prefix_len])\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that filters a list of strings only for those that end with a given suffix.\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1hopdkri.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1hopdkri.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise: Write a function that filters an input list\
    \ of strings only for ones that end with a given suffix.\n    >>> filter_by_suffix([],\
    \ 'a')\n    []\n    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc']\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp02xfe3wt.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp02xfe3wt.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if startswith(string, prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters an input\
    \ list of strings only for those that end with a given suffix.\n>>> filter_by_suffix([],\
    \ 'a')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'b')\n['abc', 'bcd']\n>>>\
    \ filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'c')\n['abc', 'bcd', 'cde']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'd')\n['abc', 'bcd', 'cde',\
    \ 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'e')\n['abc',\
    \ 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfq1m0yjj.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfq1m0yjj.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings = strings[:]\n    strings = filter((x)\
    \ -> startswith(x, prefix), strings)\n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L, prefix) -> Vector{String}\nFilter\
    \ an input list of strings only for ones that start with a given prefix.\nThis\
    \ function returns a new list with the filtered strings. \nThe input list is modified\
    \ in-place.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t\
    @test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb1kqgrpe.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpb1kqgrpe.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for s in strings\n        if startswith(prefix, s)\n            delete!(s, prefix)\n\
    \        end\n    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise\nWrite a function that filters a list of strings only for those that\
    \ start with a given prefix.\nWrite a function that filters a list of strings\
    \ only for those that end with a given suffix.\nWrite a function that filters\
    \ a list of strings only for those that contain given substrings.\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0u2guqu0.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0u2guqu0.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for string in strings\n        if string.starts_with(prefix)\n            strings.remove(string)\n\
    \        end\n    end\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpr62eqmx3.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ starts_with\n  Stacktrace:\n   [1] getproperty(::String, ::Symbol) at ./Base.jl:33\n\
    \   [2] filter_by_prefix(::Array{String,1}, ::String) at /tmp/tmpr62eqmx3.jl:12\n\
    \   [3] top-level scope at /tmp/tmpr62eqmx3.jl:25\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpr62eqmx3.jl:23\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr62eqmx3.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ strings = filter( x -> startswith(prefix, x), strings)\n    \n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7he7k6qo.jl:21\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp7he7k6qo.jl:21\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7he7k6qo.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7he7k6qo.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_len = length(prefix)\n  \
    \  \n    strings = strings[:]\n    \n    i = 0\n    while i < length(strings)\n\
    \        if strings[i] == prefix\n            i += 1\n        else\n         \
    \   strings[i] = \"\"\n        end\n    end\n    \n    return strings\nend\n</cell>\n\
    <code language=julia-1.4>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nfilter_by_prefix(String[], String)::Vector{String}\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm_dpl7g9.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm_dpl7g9.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 2: filter_by_prefix\nWrite a function that filters an input list of strings\
    \ only for ones that start with a given prefix.\nThis function should return a\
    \ vector of strings.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppk1ctb_n.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppk1ctb_n.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for s in strings\n        if startswith(prefix, s)\n            delete!(s, prefix)\n\
    \        end\n    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that filters an input list of strings only for ones that\
    \ end with a given suffix.\n>>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'ab')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'cd')\n['abc', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'bc')\n['abc', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'array')\n['array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'arrays')\n\
    []\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n\
    []\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n\
    []\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n\
    []\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n\
    []\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpauuzvrhd.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpauuzvrhd.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if startswith(string, prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters strings by a regular expression.\nThe\
    \ function should take two arguments: the list of strings and the regular expression.\
    \ The function should return a new list of strings that match the regular expression.\
    \ \nThe function should return an empty list if the regular expression is empty\
    \ or if the list of strings is empty.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1i6qqfqs.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1i6qqfqs.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings = strings[:]\n    strings = filter((x)\
    \ -> startswith(x, prefix), strings)\n    return strings\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ i = 0\n    while i < length(prefix) && i < length(strings)\n        if prefix[i]\
    \ != strings[i]\n            i += 1\n        else\n            i += 1\n      \
    \  end\n    end\n    \n    if i == length(strings)\n        append!(strings, prefix)\n\
    \    end\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpezi1g3iz.jl:31\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: Cannot `convert` an object of type Char to an object of type String\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:209\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:210\n    convert(::Type{T}, !Matched::T)\
    \ where T at essentials.jl:171\n  Stacktrace:\n   [1] setindex!(::Array{String,1},\
    \ ::Char, ::Int64) at ./array.jl:826\n   [2] _append!(::Array{String,1}, ::Base.HasLength,\
    \ ::String) at ./array.jl:968\n   [3] append! at ./array.jl:960 [inlined]\n  \
    \ [4] filter_by_prefix(::Array{String,1}, ::String) at /tmp/tmpezi1g3iz.jl:21\n\
    \   [5] top-level scope at /tmp/tmpezi1g3iz.jl:31\n   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpezi1g3iz.jl:30\n  \ntest set: Error During\
    \ Test at /tmp/tmpezi1g3iz.jl:32\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n  BoundsError: attempt to access String\n    at index\
    \ [0]\n  Stacktrace:\n   [1] checkbounds at ./strings/basic.jl:194 [inlined]\n\
    \   [2] codeunit at ./strings/string.jl:89 [inlined]\n   [3] getindex at ./strings/string.jl:210\
    \ [inlined]\n   [4] filter_by_prefix(::Array{String,1}, ::String) at /tmp/tmpezi1g3iz.jl:13\n\
    \   [5] top-level scope at /tmp/tmpezi1g3iz.jl:32\n   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpezi1g3iz.jl:30\n  \nTest Summary: | Error \
    \ Total\ntest set      |     2      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpezi1g3iz.jl:28\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings = strings[:]\n    strings = filter((x)\
    \ -> startswith(prefix, x), strings)\n    return strings\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt0i0rhsu.jl:18\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpt0i0rhsu.jl:18\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt0i0rhsu.jl:16\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt0i0rhsu.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings = filter((x) -> startswith(prefix,\
    \ x), strings)\n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn57g5fzm.jl:17\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpn57g5fzm.jl:17\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn57g5fzm.jl:15\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn57g5fzm.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    strings = filter(x->startswith(prefix, x), strings)\n    \n    strings\
    \ = filter(x->length(x) > prefix_length, strings)\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(String[], String)\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy1j2fox9.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpy1j2fox9.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    strings = strings[:]\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            strings.remove(string)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ filters an input list of strings only for ones that end with a given suffix.\n\
    >>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'a')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'b')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'c')\n\
    ['abc', 'bcd', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'd')\n\
    ['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'e')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array']\n>>> filter\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppjsmleww.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppjsmleww.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for string in strings\n        if string.starts_with(prefix)\n            delete!(strings,\
    \ string)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters an input list of strings only for ones\
    \ that end with a given suffix.\n>>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'ab')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'cd')\n['abc', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'bc')\n['abc', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'array')\n['array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n\
    []\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n\
    []\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n\
    []\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n\
    []\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n\
    []\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'b\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzfn8q8el.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzfn8q8el.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for s in strings\n        if startswith(prefix, s)\n            delete!(s, prefix)\n\
    \        end\n    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    filter_by_prefix(L::Vector{String}, prefix::String)::Vector{String}\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr1832ibh.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpr1832ibh.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for string in strings\n        if string.starts_with(prefix)\n            delete!(strings,\
    \ string)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters an input list of strings only for ones\
    \ that end with a given suffix.\n>>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'b')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'c')\n['abc', 'bcd', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'd')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'e')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'q')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'c\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t\
    @test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjojtp66m.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjojtp66m.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    strings = strings[:]\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            strings = filter!(x -> x != string, strings)\n        end\n    end\n\
    \    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that filters strings by a regular expression.\nThe function should\
    \ take two arguments: a regular expression and a list of strings. The function\
    \ should return a list of strings that match the given regular expression.\nThe\
    \ function should ignore case when matching.\nThe function should ignore leading\
    \ and trailing whitespace.\nThe function should ignore leading and trailing periods.\n\
    The function should ignore leading and trailing underscores.\nThe function should\
    \ ignore leading and trailing dashes.\nThe function should ignore leading and\
    \ trailing colons.\nThe function should ignore leading and trailing colons and\
    \ periods.\nThe function should ignore leading and trailing colons and periods\
    \ and dashes.\nThe function should ignore leading and trailing colons and periods\
    \ and underscores.\nThe function should ignore leading and trailing colons and\
    \ periods and dashes and underscores.\nThe function should ignore leading and\
    \ trailing colons and periods and dashes and underscores and whitespace.\nThe\
    \ function should ignore leading and trailing colons and periods and dashes and\
    \ underscores and whitespace and ignore leading and trailing periods and dashes\
    \ and underscores.\nThe function should ignore leading and trailing colons and\
    \ periods and dashes and underscores and whitespace and ignore leading and trailing\
    \ periods and dashes and underscores and whitespace and ignore leading and trailing\
    \ periods and dashes and underscores and whitespace and ignore leading and trailing\
    \ periods and dashes and underscores and whitespace and ignore leading and trailing\
    \ periods and dashes and underscores and whitespace and ignore leading and trailing\
    \ periods and dashes and underscores and whitespace and ignore leading and trailing\
    \ periods and dashes and underscores and whitespace and ignore leading and trailing\
    \ periods and dashes and underscores and whitespace and ignore leading and trailing\
    \ periods and dashes and underscores and whitespace and ignore leading and trailing\
    \ periods and dashes and underscores and whitespace and ignore leading and trailing\
    \ periods and dashes and underscores and whitespace and ignore leading and trailing\
    \ periods and dashes and underscores and whitespace and ignore leading and trailing\
    \ periods and dashes and underscores and whitespace and ignore leading and trailing\
    \ periods and dashes and underscores and whitespace and ignore leading and trailing\
    \ periods and dashes and underscores and whitespace and ignore leading and trailing\
    \ periods and dashes and underscores and whitespace and ignore leading and trailing\
    \ periods and dashes and underscores and whitespace \nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnxxxc78m.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnxxxc78m.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_len = length(prefix)\n  \
    \  \n    strings = filter( x -> startswith(x, prefix), strings)\n    \n    if\
    \ prefix_len == 0\n        return strings\n    \n    strings = filter( x -> startswith(x,\
    \ prefix), strings)\n    \n    if prefix_len == 1\n        return strings\n  \
    \  \n    strings = filter( x -> startswith(x, prefix), strings)\n    \n    if\
    \ prefix_len == 2\n        return strings\n    \n    strings = filter( x -> startswith(x,\
    \ prefix), strings)\n    \n    if prefix_len == 3\n        return strings\n  \
    \  \n    strings = filter( x -> startswith(x, prefix), strings)\n    \n    if\
    \ prefix_len == 4\n        return strings\n    \n    strings = filter( x -> startswith(x,\
    \ prefix), strings)\n    \n    if prefix_len == 5\n        return strings\n  \
    \  \n    strings = filter( x -> startswith(x, prefix), strings)\n    \n    if\
    \ prefix_len == 6\n        return strings\n    \n    strings = filter( x -> startswith(x,\
    \ prefix), strings)\n    \n    if prefix_len == 7\n        return strings\n  \
    \  \n    strings = filter( x -> startswith(x, prefix), strings)\n    \n    if\
    \ prefix_len == 8\n        return strings\n    \n    strings = filter( x -> startswith(x,\
    \ prefix), strings)\n    \n    if prefix_len == 9\n        return strings\n  \
    \  \n    strings = filter( x -> startswith(x, prefix), strings)\n    \n    if\
    \ prefix_len == 10\n        return strings\n    \n    strings = filter( x -> startswith(x,\
    \ prefix), strings)\n    \n    if prefix_len == 11\n        return strings\n \
    \   \n    strings = filter( x -> startswith(x, prefix), strings)\n    \n    if\
    \ prefix_len == 12\n        return strings\n    \n    strings = filter( x -> startswith(x,\
    \ prefix), strings)\n    \n    if prefix_len == 13\n        return strings\n \
    \   \n    strings = filter( x -> startswith(x, prefix), strings)\n    \n    if\
    \ prefix_len == 14\n        return strings\n    \n    strings = filter( x -> startswith(x,\
    \ prefix), strings)\n    \n    if prefix_len == 15\n        return strings\n \
    \   \n    strings = filter( x -> startswith(x, prefix), strings)\n    \n    if\
    \ prefix_len == 16\n        return strings\n    \n    strings = filter( x -> startswith(x,\
    \ prefix), strings)\n    \n    if prefix_len == 17\n        return strings\n \
    \   \n    strings = filter( x -> startswith(x, prefix), strings)\n    \n    if\
    \ prefix_len == 18\n        return strings\n    \n    string\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxon0kras.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxon0kras.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that filters a list of strings only for those that\
    \ end with a given suffix.\n>>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'b')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'c')\n['abc', 'bcd', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'd')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'e')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'q')\n['abc', 'bcd', 'cde', 'array\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3hwu6_p8.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3hwu6_p8.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprnggjg4e.jl:19\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] top-level scope at /tmp/tmprnggjg4e.jl:19\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprnggjg4e.jl:17\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprnggjg4e.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for string in strings\n        if string.starts_with(prefix)\n            delete!(strings,\
    \ string)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters an input list of strings only for ones\
    \ that end with a given suffix.\n>>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'ab')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'cd')\n['abc', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'array')\n['array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'b')\n\
    ['abc', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'c')\n['abc',\
    \ 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'de')\n['abc',\
    \ 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'e')\n['abc', 'cde']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'ab')\n['abc']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'cd')\n['abc', 'cde']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'array')\n['array']\n>>> filter_by_suffix(['abc', 'bcd',\
    \ 'cde', 'array'], 'b')\n['abc', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'c')\n['abc', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'de')\n['abc', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'e')\n['abc', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'ab')\n\
    ['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'cd')\n['abc', 'cde']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'array')\n['array']\n>>>\
    \ filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'b')\n['abc', 'cde']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'c')\n['abc', 'cde']\n>>> filter_by_suffix(['abc', 'bcd',\
    \ 'cde', 'array'], 'de')\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphz4ituqd.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphz4ituqd.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings = strings[:]\n    strings = filter((x)\
    \ -> startswith(prefix, x), strings)\n    return strings\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn32ocdeh.jl:18\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpn32ocdeh.jl:18\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn32ocdeh.jl:16\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn32ocdeh.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for string in strings\n        if string.starts_with(prefix)\n            delete!(strings,\
    \ string)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that filters an input\
    \ list of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([],\
    \ 'a')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'b')\n['abc', 'bcd']\n>>>\
    \ filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'c')\n['abc', 'bcd', 'cde']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'd')\n['abc', 'bcd', 'cde',\
    \ 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'e')\n['abc',\
    \ 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'c\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t\
    @test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9kbfjst6.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9kbfjst6.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if string.startswith(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"ab\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abde\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abdez\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\",\
    \ \"bcd\", \"cde\", \"array\"], \"abdeza\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abdezab\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abdezabd\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abdezabde\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abdezabdez\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abdezabdeza\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdezabdezab\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abdezabdezabd\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abdezabdezabde\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdezabdezabdez\")\n</cell>\n<code language=\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9_3m16e1.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9_3m16e1.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(prefix, x), strings)\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L::AbstractVector,\
    \ prefix::AbstractString)\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpygmrrsjo.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpygmrrsjo.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for string in strings\n        if string.starts_with(prefix)\n            strings.remove(string)\n\
    \        end\n    end\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvfj3br5q.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ starts_with\n  Stacktrace:\n   [1] getproperty(::String, ::Symbol) at ./Base.jl:33\n\
    \   [2] filter_by_prefix(::Array{String,1}, ::String) at /tmp/tmpvfj3br5q.jl:12\n\
    \   [3] top-level scope at /tmp/tmpvfj3br5q.jl:25\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpvfj3br5q.jl:23\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvfj3br5q.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for string in strings\n        if string.starts_with(prefix)\n            strings.remove(string)\n\
    \        end\n    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters a given list of strings only for the\
    \ ones that end with a given suffix.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphc6jzr79.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphc6jzr79.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter_by_prefix(strings, prefix, [])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzc9b25ud.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching filter_by_prefix(::Array{String,1}, ::String,\
    \ ::Array{Any,1})\n  Closest candidates are:\n    filter_by_prefix(::Array{String,1},\
    \ ::String) at /tmp/tmpzc9b25ud.jl:8\n  Stacktrace:\n   [1] filter_by_prefix(::Array{String,1},\
    \ ::String) at /tmp/tmpzc9b25ud.jl:8\n   [2] top-level scope at /tmp/tmpzc9b25ud.jl:15\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpzc9b25ud.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpzc9b25ud.jl:16\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching filter_by_prefix(::Array{String,1},\
    \ ::String, ::Array{Any,1})\n  Closest candidates are:\n    filter_by_prefix(::Array{String,1},\
    \ ::String) at /tmp/tmpzc9b25ud.jl:8\n  Stacktrace:\n   [1] filter_by_prefix(::Array{String,1},\
    \ ::String) at /tmp/tmpzc9b25ud.jl:8\n   [2] top-level scope at /tmp/tmpzc9b25ud.jl:16\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpzc9b25ud.jl:14\n  \nTest Summary: | Error \
    \ Total\ntest set      |     2      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzc9b25ud.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ strings = filter(x->startswith(prefix, x), strings)\n    \n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq4l31zqf.jl:21\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpq4l31zqf.jl:21\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq4l31zqf.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq4l31zqf.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for string in strings\n        if string.starts_with(prefix)\n            delete!(strings,\
    \ string)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters strings\
    \ by a regular expression. For example, given a list of strings:\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1zu2m16_.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1zu2m16_.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ strings = filter((x) -> startswith(prefix, x), strings)\n    \n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxsntjelu.jl:21\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpxsntjelu.jl:21\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxsntjelu.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxsntjelu.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ prefix = prefix:lower()\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            delete!(strings, string)\n        end\n    end\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that filters strings based on whether they end with a given suffix.\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5ocd21gn.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5ocd21gn.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for string in strings\n        if string.starts_with(prefix)\n            strings.remove(string)\n\
    \        end\n    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters a list of strings based on whether they\
    \ end with a given suffix.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmparigm7bd.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmparigm7bd.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings = filter(x->startswith(x, prefix),\
    \ strings)\n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings = strings[:]\n    strings = filter((x)\
    \ -> startswith(prefix, x), strings)\n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters an input\
    \ list of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([],\
    \ 'a')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'b')\n['abc', 'bcd']\n>>>\
    \ filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'c')\n['abc', 'bcd', 'cde']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'd')\n['abc', 'bcd', 'cde',\
    \ 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'e')\n['abc',\
    \ 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'q')\n['abc', 'bcd', 'cde', 'array\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv28i_pvt.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpv28i_pvt.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if startswith(string, prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters an input list of strings only for ones\
    \ that end with a given suffix.\n    >>> filter_by_suffix([], 'a')\n    []\n \
    \   >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc']\n \
    \   \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t\
    @test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwzrmbarh.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwzrmbarh.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    strings = filter( x -> startswith(prefix, x), strings)\n    \n    if\
    \ prefix_length == 0\n        return strings\n    \n    strings = filter( x ->\
    \ startswith(prefix, x), strings)\n    \n    if prefix_length == 1\n        return\
    \ strings\n    \n    strings = filter( x -> startswith(prefix, x), strings)\n\
    \    \n    if prefix_length == 2\n        return strings\n    \n    strings =\
    \ filter( x -> startswith(prefix, x), strings)\n    \n    if prefix_length ==\
    \ 3\n        return strings\n    \n    strings = filter( x -> startswith(prefix,\
    \ x), strings)\n    \n    if prefix_length == 4\n        return strings\n    \n\
    \    strings = filter( x -> startswith(prefix, x), strings)\n    \n    if prefix_length\
    \ == 5\n        return strings\n    \n    strings = filter( x -> startswith(prefix,\
    \ x), strings)\n    \n    if prefix_length == 6\n        return strings\n    \n\
    \    strings = filter( x -> startswith(prefix, x), strings)\n    \n    if prefix_length\
    \ == 7\n        return strings\n    \n    strings = filter( x -> startswith(prefix,\
    \ x), strings)\n    \n    if prefix_length == 8\n        return strings\n    \n\
    \    strings = filter( x -> startswith(prefix, x), strings)\n    \n    if prefix_length\
    \ == 9\n        return strings\n    \n    strings = filter( x -> startswith(prefix,\
    \ x), strings)\n    \n    if prefix_length == 10\n        return strings\n   \
    \ \n    strings = filter( x -> startswith(prefix, x), strings)\n    \n    if prefix_length\
    \ == 11\n        return strings\n    \n    strings = filter( x -> startswith(prefix,\
    \ x), strings)\n    \n    if prefix_length == 12\n        return strings\n   \
    \ \n    strings = filter( x -> startswith(prefix, x), strings)\n    \n    if prefix_length\
    \ == 13\n        return strings\n    \n    strings = filter( x -> startswith(prefix,\
    \ x), strings)\n    \n    if prefix_length == 14\n        return strings\n   \
    \ \n    strings = filter( x -> startswith(prefix, x), strings)\n    \n    if prefix_length\
    \ == 15\n        return strings\n    \n    strings = filter( x -> startswith(prefix,\
    \ x), strings)\n    \n    if prefix_length == 16\n        return strings\n   \
    \ \n    strings = filter( x -> startswith(prefix, x), strings)\n    \n    if prefix_length\
    \ == 17\n        return strings\n    \n    strings = filter( x -> startswith(prefix,\
    \ x), strings)\n    \n    if prefix_length == 18\n        return strings\n   \
    \ \n    strings = filter( x -> startswith(prefix, x), strings)\n    \n    if prefix_length\
    \ == 19\n\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpiz5joisq.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpiz5joisq.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for string in strings\n        if string.starts_with(prefix)\n            strings.remove(string)\n\
    \        end\n    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise: Write a function that filters strings by a prefix and suffix.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp50omxq5m.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp50omxq5m.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(prefix, x), strings)\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that filters an input list\
    \ of strings only for those that end with a given suffix.\n>>> filter_by_suffix([],\
    \ 'a')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'ab')\n['abc']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'abd')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd',\
    \ 'cde', 'array'], 'abd')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'abd')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n\
    ['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n['abc']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n['abc']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'abd')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd',\
    \ 'cde', 'array'], 'abd')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'abd')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n\
    ['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n['abc']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n['abc']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'abd')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd',\
    \ 'cde', 'array'], 'abd')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'abd')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n\
    ['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n['abc']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n['abc']\n>>> filter\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph9nsajno.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmph9nsajno.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings = strings[2:end]\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn42gwe34.jl:17\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"] == [\"xxx\", \"xxxAAA\", \"xxx\"]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpn42gwe34.jl:17\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn42gwe34.jl:15\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn42gwe34.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings = strings[:]\n    strings = filter((x)\
    \ -> startswith(prefix, x), strings)\n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L::Vector{String}, prefix::String)::Vector{String}\
    \ is defined above\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpclf83ro0.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpclf83ro0.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings = strings[start:end]\nend\n</cell>\n\
    <code language=julia-1.4>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters an input\
    \ list of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([],\
    \ 'a')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'ab')\n['abc']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'cd')\n['cde']\n>>> filter_by_suffix(['abc', 'bcd',\
    \ 'cde', 'array'], 'de')\n['cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'bc')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n['abc', 'bcd']\n>>> filter_by_suffix(['\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1ggy4s9s.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1ggy4s9s.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings = filter(x->startswith(x, prefix),\
    \ strings)\n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for string in strings\n        if string.starts_with(prefix)\n            remove!(strings,\
    \ string)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nfilter_by_prefix(string, prefix)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpw7_2v98v.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpw7_2v98v.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ strings = filter( x -> startswith(prefix, x), strings)\n    \n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6loz6lyb.jl:21\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp6loz6lyb.jl:21\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6loz6lyb.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6loz6lyb.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for s in strings\n        if startswith(s, prefix)\n            delete!(s, prefix)\n\
    \        end\n    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters an input list of strings only for ones\
    \ that end with a given suffix.\n>>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'b')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'c')\n['abc', 'bcd', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'd')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'e')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprxnpfx50.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprxnpfx50.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ prefix = prefix:lower()\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            delete!(strings, string)\n        end\n    end\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String}\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp59v5idgi.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp59v5idgi.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    if prefix_length == 0\n        return strings\n    \n    strings =\
    \ filter(x->startswith(prefix, x), strings)\n    \n    return strings\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyyph22h5.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpyyph22h5.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpyyph22h5.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for string in strings\n        if string.starts_with(prefix)\n            strings.remove(string)\n\
    \        end\n    end\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1sx_wun3.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ starts_with\n  Stacktrace:\n   [1] getproperty(::String, ::Symbol) at ./Base.jl:33\n\
    \   [2] filter_by_prefix(::Array{String,1}, ::String) at /tmp/tmp1sx_wun3.jl:12\n\
    \   [3] top-level scope at /tmp/tmp1sx_wun3.jl:25\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp1sx_wun3.jl:23\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1sx_wun3.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter_by_prefix(strings, prefix, \"\"\
    )\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4z79gvsf.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching filter_by_prefix(::Array{String,1}, ::String,\
    \ ::String)\n  Closest candidates are:\n    filter_by_prefix(::Array{String,1},\
    \ ::String) at /tmp/tmp4z79gvsf.jl:8\n  Stacktrace:\n   [1] filter_by_prefix(::Array{String,1},\
    \ ::String) at /tmp/tmp4z79gvsf.jl:8\n   [2] top-level scope at /tmp/tmp4z79gvsf.jl:15\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp4z79gvsf.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp4z79gvsf.jl:16\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching filter_by_prefix(::Array{String,1},\
    \ ::String, ::String)\n  Closest candidates are:\n    filter_by_prefix(::Array{String,1},\
    \ ::String) at /tmp/tmp4z79gvsf.jl:8\n  Stacktrace:\n   [1] filter_by_prefix(::Array{String,1},\
    \ ::String) at /tmp/tmp4z79gvsf.jl:8\n   [2] top-level scope at /tmp/tmp4z79gvsf.jl:16\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp4z79gvsf.jl:14\n  \nTest Summary: | Error \
    \ Total\ntest set      |     2      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4z79gvsf.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter_by_prefix(strings, prefix, \"\"\
    )\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters strings by a prefix and suffix.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp28cyehm2.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp28cyehm2.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters an input list of strings only for ones\
    \ that end with a given suffix.\n    >>> filter_by_suffix([], 'a')\n    []\n \
    \   >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t\
    @test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcvwnxwf6.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcvwnxwf6.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings = strings[:]\n    strings = filter((x)\
    \ -> startswith(prefix, x), strings)\n    return strings\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp99ofv99a.jl:18\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp99ofv99a.jl:18\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp99ofv99a.jl:16\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp99ofv99a.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if startswith(string, prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 4\nWrite a function that filters a string\
    \ list for strings that end with a given suffix.\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxt65cjxo.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxt65cjxo.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings = filter( x -> startswith(prefix,\
    \ x), strings)\n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpod8cnyw4.jl:17\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpod8cnyw4.jl:17\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpod8cnyw4.jl:15\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpod8cnyw4.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for s in strings\n        if startswith(prefix, s)\n            delete!(s, prefix)\n\
    \        end\n    end\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcitai3lb.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method\
    \ matching delete!(::String, ::String)\n  Closest candidates are:\n    delete!(!Matched::IdDict{K,V}\
    \ where V, ::Any) where K at abstractdict.jl:626\n    delete!(!Matched::Base.IdSet,\
    \ ::Any) at abstractdict.jl:695\n    delete!(!Matched::Dict, ::Any) at dict.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_prefix(::Array{String,1}, ::String)\
    \ at /tmp/tmpcitai3lb.jl:13\n   [2] top-level scope at /tmp/tmpcitai3lb.jl:25\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpcitai3lb.jl:23\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcitai3lb.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if string.startswith(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters a list of\
    \ strings based on whether they start with a given prefix.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy6gutmek.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpy6gutmek.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ for string in strings\n        if string.starts_with(prefix)\n            delete!(strings,\
    \ string)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters strings by a prefix and suffix.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp97iqr2hx.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp97iqr2hx.jl:19\n"
  exit_code: 1
  status: Exception
