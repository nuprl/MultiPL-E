name: HumanEval_40_triples_sum_to_zero
language: julia
prompt: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n \
  \   it returns True if there are three distinct elements in the list that\n    sum\
  \ to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n \
  \   False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1,\
  \ 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n\
  \    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
  \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
  \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
  \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
  \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
  \ 3, 5, -100]) == false)\nend\n"
completions: ["    sum = 0\n    for i in l\n        sum += i\n        if sum == 0\
    \ \n            return true\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it\
    \ returns True if there are three distinct elements in the list that\n    sum\
    \ to zero, and False otherwise.", "    sum = 0\n    for i in l\n        sum +=\
    \ i\n        if sum == 0 \n            return true\n        end\n    end\n   \
    \ return false\nend\n</cell>\n<code language=julia-1.5>\n@assert triples_sum_to_zero([1,\
    \ 3, 5, 0]) == false\n@assert triples_sum_to_zero([1, 3, -2, 1]) == true\n@assert\
    \ triples_sum_to_zero([1, 2, 3, 7]) == false\n@assert triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7]) == true\n@assert triples_sum_to_zero([1]) == false\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a list of integers and returns\
    \ the number of integers in the list that sum to zero.", "    sum = 0\n    for\
    \ x in l\n        sum += x\n        if sum == 0 \n            return true\n  \
    \  return false\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    triples_sum_to_zero\
    \ takes a list of integers as an input.\n    it returns True if there are three\
    \ distinct elements in the list that\n    sum to zero, and False otherwise.",
  "    triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero = zeros(Int64, 3)\n\
    \    triples_sum_to_zero[1] = true\n    triples_sum_to_zero[2] = true\n    triples_sum_to_zero[3]\
    \ = true\n    for x in l\n        if triples_sum_to_zero[x] == true\n        \
    \    triples_sum_to_zero[x+3] = true\n        end\n    end\n    return triples_sum_to_zero[1]\
    \ && triples_sum_to_zero[2] && triples_sum_to_zero[3]\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it\
    \ returns True if there are three distinct elements in the list that\n    sum\
    \ to zero, and False otherwise.", "    \n    sum = 0\n    for i in l\n       \
    \ sum += i\n        if sum == 0\n            return true\n        end\n    end\n\
    \    return false\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes\
    \ a list of integers as an input, and returns the number of integers in the list\
    \ that sum to zero.", "    triples_sum_to_zero = @view l |> filter(x->(x+0)==0,\
    \ l) |> length==3\n    return triples_sum_to_zero\nend", "    triples_sum_to_zero(l,\
    \ 0)\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    triples_sum_to_zero\
    \ takes a list of integers as an input.\n    it returns True if there are three\
    \ distinct elements in the list that\n    sum to zero, and False otherwise.",
  "    sum = 0\n    for i in l\n        sum += i\n        if sum == 0 \n         \
    \   return true\n        end\n    end\n    return false\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that takes a list of integers as an input, and returns\
    \ True if there are two distinct elements in the list that sum to zero, and False\
    \ otherwise.", "    triples_sum_to_zero(l, 0)\nend\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero([1,3,-2,1])\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n\
    <code language=julia-1.5>\n@doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code\
    \ language=julia-1.5>\n@doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code language=julia-1.5>\n@doc\
    \ triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero([1,3,-2,1])\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n\
    <code language=julia-1.5>\n@doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code\
    \ language=julia-1.5>\n@doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code language=julia-1.5>\n@doc\
    \ triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero([1,3,-2,1])\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n\
    <code language=julia-1.5>\n@doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code\
    \ language=julia-1.5>\n@doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code language=julia-1.5>\n@doc\
    \ triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero([1,3,-2,1])\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n\
    <code language=julia-1.5>\n@doc triples_sum_to_zero([1,3,-2,1])", "    triples_sum_to_zero\
    \ = @view l\n    triples_sum_to_zero = @view triples_sum_to_zero\n    triples_sum_to_zero\
    \ = @view triples_sum_to_zero\n    triples_sum_to_zero = @view triples_sum_to_zero\n\
    \    triples_sum_to_zero = @view triples_sum_to_zero\n    triples_sum_to_zero\
    \ = @view triples_sum_to_zero\n    triples_sum_to_zero = @view triples_sum_to_zero\n\
    \    triples_sum_to_zero = @view triples_sum_to_zero\n    triples_sum_to_zero\
    \ = @view triples_sum_to_zero\n    triples_sum_to_zero = @view triples_sum_to_zero\n\
    \    triples_sum_to_zero = @view triples_sum_to_zero\n    triples_sum_to_zero\
    \ = @view triples_sum_to_zero\n    triples_sum_to_zero = @view triples_sum_to_zero\n\
    \    triples_sum_to_zero = @view triples_sum_to_zero\n    triples_sum_to_zero\
    \ = @view triples_sum_to_zero\n    triples_sum_to_zero = @view triples_sum_to_zero\n\
    \    triples_sum_to_zero = @view triples_sum_to_zero\n    triples_sum_to_zero\
    \ = @view triples_sum_to_zero\n    triples_sum_to_zero = @view triples_sum_to_zero\n\
    \    triples_sum_to_zero = @view triples_sum_to_zero\n    triples_sum_to_zero\
    \ = @view triples_sum_to_zero\n    triples_sum_to_zero = @view triples_sum_to_zero\n\
    \    triples_sum_to_zero = @view triples_sum_to_zero\n    triples_sum_to_zero\
    \ = @view triples_sum_to_zero\n    triples_sum_to_zero = @view triples_sum_to_zero\n\
    \    triples_sum_to_zero = @view triples_sum_to_zero\n    triples_sum_to_zero\
    \ = @view triples_sum_to_zero\n    triples_sum_to_zero = @view triples_sum_to_zero\n\
    \    triples_sum_to_zero = @view triples_sum_to_zero\n    triples_sum_to_zero\
    \ = @view triples_sum_to_zero\n    triples_sum_to_zero = @view triples_sum_to_zero\n\
    \    triples_sum_to_zero = @view triples_sum_to_zero\n    triples_sum_to_zero\
    \ = @view triples_sum_to_zero\n    triples_sum_to_zero = @view triples_sum_to_zero\n\
    \    triples_sum_to_zero", "    triples_sum_to_zero = zeros(Int64, 3)\n    triples_sum_to_zero[1]\
    \ = 1\n    triples_sum_to_zero[2] = 1\n    triples_sum_to_zero[3] = 1\n    for\
    \ i in 1:length(l)\n        if triples_sum_to_zero[i] == 1\n            triples_sum_to_zero[i]\
    \ = 0\n        elseif triples_sum_to_zero[i] == 0\n            triples_sum_to_zero[i]\
    \ = 1\n        elseif triples_sum_to_zero[i] == 2\n            return true\n \
    \       end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert triples_sum_to_zero([1, 3, 5, 0]) == false\n@assert triples_sum_to_zero([1,\
    \ 3, -2, 1]) == true\n@assert triples_sum_to_zero([1, 2, 3, 7]) == false\n@assert\
    \ triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == true\n@assert triples_sum_to_zero([1])\
    \ == false\n</cell>\n<text>\nExercise 2\nWrite a function that takes a list of\
    \ integers and returns the number of integers in the list that sum to zero.",
  "    triples_sum_to_zero = @view l\n    triples_sum_to_zero = sort(triples_sum_to_zero)\n\
    \    triples_sum_to_zero = unique(triples_sum_to_zero)\n    triples_sum_to_zero\
    \ = sort(triples_sum_to_zero)\n    triples_sum_to_zero = unique(triples_sum_to_zero)\n\
    \    triples_sum_to_zero = sort(triples_sum_to_zero)\n    triples_sum_to_zero\
    \ = unique(triples_sum_to_zero)\n    triples_sum_to_zero = sort(triples_sum_to_zero)\n\
    \    triples_sum_to_zero = unique(triples_sum_to_zero)\n    triples_sum_to_zero\
    \ = sort(triples_sum_to_zero)\n    triples_sum_to_zero = unique(triples_sum_to_zero)\n\
    \    triples_sum_to_zero = sort(triples_sum_to_zero)\n    triples_sum_to_zero\
    \ = unique(triples_sum_to_zero)\n    triples_sum_to_zero = sort(triples_sum_to_zero)\n\
    \    triples_sum_to_zero = unique(triples_sum_to_zero)\n    triples_sum_to_zero\
    \ = sort(triples_sum_to_zero)\n    triples_sum_to_zero = unique(triples_sum_to_zero)\n\
    \    triples_sum_to_zero = sort(triples_sum_to_zero)\n    triples_sum_to_zero\
    \ = unique(triples_sum_to_zero)\n    triples_sum_to_zero = sort(triples_sum_to_zero)\n\
    \    triples_sum_to_zero = unique(triples_sum_to_zero)\n    triples_sum_to_zero\
    \ = sort(triples_sum_to_zero)\n    triples_sum_to_zero = unique(triples_sum_to_zero)\n\
    \    triples_sum_to_zero = sort(triples_sum_to_zero)\n    triples_sum_to_zero\
    \ = unique(triples_sum_to_zero)\n    triples_sum_to_zero = sort(triples_sum_to_zero)\n\
    \    triples_sum_to_zero = unique(triples_sum_to_zero)\n    triples_sum_to_zero\
    \ = sort(triples_sum_to_zero)\n    triples_sum_to_zero = unique(triples_sum_to_zero)\n\
    \    triples_sum_to_zero = sort(triples_sum_to_zero)\n    triples_sum_to_zero\
    \ = unique(triples_sum_to_zero)\n    triples_sum_to_zero = sort(triples_sum_to_zero)\n\
    \    triples_sum_to_zero = unique(triples_sum_to_zero)\n    triples_sum_to_zero\
    \ = sort(triples_sum_to_zero)\n    triples_sum_to_zero", "    triples_sum_to_zero\
    \ = \n        sum(l) == 0 && \n        length(l)==3 && \n        l.sum() == 0\
    \ && \n        l.sum() == 0 && \n        l.sum() == 0\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it\
    \ returns True if there are three distinct elements in the list that\n    sum\
    \ to zero, and False otherwise.", "    triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero(l,\
    \ 0)\nend", "    triples_sum_to_zero = zeros(Int64, 3)\n    triples_sum_to_zero[1]\
    \ = 1\n    triples_sum_to_zero[2] = 1\n    triples_sum_to_zero[3] = 1\n    triples_sum_to_zero\
    \ = triples_sum_to_zero * l\n    \n    return triples_sum_to_zero[1]+triples_sum_to_zero[2]+triples_sum_to_zero[3]\
    \ == 0\nend\n</cell>\n<code language=julia-1.5>\n@assert triples_sum_to_zero([1,\
    \ 3, 5, 0]) == false\n@assert triples_sum_to_zero([1, 3, -2, 1]) == true\n@assert\
    \ triples_sum_to_zero([1, 2, 3, 7]) == false\n@assert triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7]) == true\n@assert triples_sum_to_zero([1]) == false\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a list of integers and returns\
    \ a list of integers whose elements are the sum of the integers in the list that\
    \ sum to zero.", "    triples_sum_to_zero = sum([triples_sum_to_zero(triple) for\
    \ triple in l])\n    return triples_sum_to_zero == 3\nend", "    \n    l = sort(l)\n\
    \    \n    sum = 0\n    for i in l\n        sum += i\n        if sum == 0 \n \
    \           return true\n        end\n    end\n    return false\nend\n</cell>\n\
    <code language=julia-1.5>", "    triples_sum_to_zero(l, 0)\nend", "    \n    sum\
    \ = 0\n    for x in l\n        sum += x\n        if sum == 0 \n            return\
    \ true\n        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it\
    \ returns True if there are three distinct elements in the list that\n    sum\
    \ to zero, and False otherwise.", "    sum = 0\n    for i in l\n        sum +=\
    \ i\n        if sum == 0 \n            return true\n    return false\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert triples_sum_to_zero([1, 3, 5, 0]) == false\n\
    @assert triples_sum_to_zero([1, 3, -2, 1]) == true\n@assert triples_sum_to_zero([1,\
    \ 2, 3, 7]) == false\n@assert triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == true\n\
    @assert triples_sum_to_zero([1]) == false\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a list of integers as an input, and returns True if there\
    \ are three distinct elements in the list that sum to zero, and False otherwise.",
  "    triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero(l, 0)\nend\n</cell>\n\
    <code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code language=julia-1.5>\n@doc\
    \ triples_sum_to_zero([1,2,3,7])\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero([2,4,-5,3,9,7])\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero([1])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a list of integers as an input, and returns\
    \ True if there are three distinct elements in the list that sum to zero, and\
    \ False otherwise.", "    \n    triples_sum_to_zero = zeros(Int64, 3)\n    triples_sum_to_zero[1]\
    \ = 1\n    triples_sum_to_zero[2] = 1\n    triples_sum_to_zero[3] = 1\n    \n\
    \    for x in l\n        if triples_sum_to_zero[x] == 1\n            return true\n\
    \        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it\
    \ returns True if there are three distinct elements in the list that\n    sum\
    \ to zero, and False otherwise.", "    sum = 0\n    for i in l\n        sum +=\
    \ i\n        if sum == 0\n            return true\n    return false\nend", " \
    \   sum = 0\n    for i in l\n        sum += i\n        if sum == 0\n         \
    \   return true\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\"\
    \"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns\
    \ True if there are three distinct elements in the list that\n    sum to zero,\
    \ and False otherwise.", "    triples_sum_to_zero = sum([triples_sum_to_zero(triple)\
    \ for triple in l])\n    return triples_sum_to_zero == 3\nend", "    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum > 0\n            return false\n\
    \    return true\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a list of integers as an input, and returns the number of integers in the list\
    \ that sum to zero.", "    triples_sum_to_zero = @view l |> filter(x->(x+x+x)==0,\
    \ l) |> length==3\n    return triples_sum_to_zero\nend", "    triples_sum_to_zero(l,\
    \ 0)\nend", "    sum = 0\n    for i in l\n        sum += i\n        if sum ==\
    \ 0 \n            return true\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @time triples_sum_to_zero(1:100);\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a list of integers and returns a list of integers that\nsum to zero.",
  "    triples_sum_to_zero = zeros(Int64, 3)\n    for x in l\n        for y in l\n\
    \            for z in l\n                if x+y+z == 0 \n                    triples_sum_to_zero[x,y,z]\
    \ = True\n                end\n            end\n        end\n    end\n    return\
    \ triples_sum_to_zero[1,1,1]\nend\n</cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(1:100);\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers and\
    \ returns True if there are three distinct elements in the list that sum to zero,\
    \ and False otherwise.", "    triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero(l,\
    \ 0)\nend", "    sum = 0\n    for i in l\n        sum += i\n        if sum ==\
    \ 0 \n            return true\n        end\n    end\n    return false\nend", " \
    \   triples_sum_to_zero(l, 0)\nend", "    sum = 0\n    for i in l\n        sum\
    \ += i\n        if sum == 0\n            return true\n        end\n    end\n \
    \   return false\nend\n</cell>\n<code language=julia-1.3>", "    triples_sum_to_zero(l,\
    \ 0)\nend", "    triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero = zeros(Int64,\
    \ 3)\n    for x in l\n        triples_sum_to_zero = triples_sum_to_zero || triples_sum_to_zero[x]\
    \ == 0 || triples_sum_to_zero[x] == x\n    end\n    return triples_sum_to_zero\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers\
    \ as an input, and returns True if there are three distinct elements in the list\
    \ that sum to zero, and False otherwise.", "    triples_sum_to_zero(l, 0)\nend",
  "    triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero = zeros(Int64, 3)\n\
    \    for x in l\n        triples_sum_to_zero = triples_sum_to_zero + (x - x^3)\n\
    \    end\n    return triples_sum_to_zero == zeros(Int64, 3)\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of integers as an input, and returns\
    \ True if there are three distinct elements in the list that sum to zero, and\
    \ False otherwise.", "    triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero(l,\
    \ 0)\nend", "    triples_sum_to_zero = sum([triples_sum_to_zero(triple) for triple\
    \ in l])\n    triples_sum_to_zero < 3\nend", "    triples_sum_to_zero(l, 0)\n\
    end", "    sum = 0\n    for i in l\n        sum += i\n        if sum == 0\n  \
    \          return true\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it\
    \ returns True if there are three distinct elements in the list that\n    sum\
    \ to zero, and False otherwise.", "    triples_sum_to_zero = zeros(Int64, 3)\n\
    \    triples_sum_to_zero[1] = l[1]\n    triples_sum_to_zero[2] = l[2]\n    triples_sum_to_zero[3]\
    \ = l[3]\n    return triples_sum_to_zero == zeros(Int64, 3)\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of integers as an input and returns\
    \ the number of integers in the list that sum to zero.", "    triples_sum_to_zero\
    \ = l == sum(l)\n    return triples_sum_to_zero\nend", "    triples_sum_to_zero(l,\
    \ 0)\nend", "    triples_sum_to_zero(l, 0)\nend\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero\n</cell>\n<text>\nExercise 2\nWrite a function called\
    \ triples_sum_to_zero that takes a list of integers as an input.\nIt returns True\
    \ if there are three distinct elements in the list that sum to zero, and False\
    \ otherwise.", "    sum = 0\n    for i in l\n        sum += i\n        if sum\
    \ == 0\n            return true\n    return false\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a list of integers as an input, and returns a\
    \ list of integers whose elements are the sum of the input list except for those\
    \ elements that are zero.", "    triples_sum_to_zero(l, 0)\nend", "    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0 \n            return true\n\
    \        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert triples_sum_to_zero([1, 3, 5, 0]) == false\n@assert triples_sum_to_zero([1,\
    \ 3, -2, 1]) == true\n@assert triples_sum_to_zero([1, 2, 3, 7]) == false\n@assert\
    \ triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == true\n@assert triples_sum_to_zero([1])\
    \ == false\n</cell>\n<text>\n4.2 The function is_power_of_two\nWrite a function\
    \ that takes an integer as an input and checks if it is a\npower of two. Return\
    \ True if the integer is a power of two, and False\notherwise.", "    triples_sum_to_zero(l,\
    \ 0)\nend\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n\
    <code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n@doc triples_",
  "    triples_sum_to_zero(l, 0)\nend", "    \n    sum = 0\n    for i in l\n     \
    \   sum += i\n        if sum > 0\n            return true\n        end\n    end\n\
    \    return false\nend\n</cell>\n<code language=julia-1.5>\n@assert triples_sum_to_zero([1,\
    \ 3, 5, 0]) == false\n@assert triples_sum_to_zero([1, 3, -2, 1]) == true\n@assert\
    \ triples_sum_to_zero([1, 2, 3, 7]) == false\n@assert triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7]) == true\n@assert triples_sum_to_zero([1]) == false\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a list of integers and returns\
    \ True if there are two distinct elements in the list that sum to zero, and False\
    \ otherwise.", "    triples_sum_to_zero = sum([triples_sum_to_zero(triple) for\
    \ triple in l])\n    triples_sum_to_zero == length(l)\nend\n</cell>\n<code language=julia-1.5>",
  "    sum = 0\n    for i in l\n        sum += i\n        if sum == 0\n          \
    \  return true\n    return false\nend\n</cell>\n<code language=julia-1.5>", " \
    \   triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero = @. sum(l) == 0\
    \ \n    return triples_sum_to_zero\nend", "    triples_sum_to_zero = @view l |>\
    \ filter(x->x==0 || x==-3 || x==-7, l)\n    return length(triples_sum_to_zero)\
    \ == 3\nend\n</cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(1:100000);\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a list of integers and\
    \ returns True if there are three distinct elements in the list that sum to zero,\
    \ and False otherwise.", "    triples_sum_to_zero = @view l |> filter(x->x==0\
    \ || x==-3 || x==-7, l) |> length==3\n    return triples_sum_to_zero\nend", " \
    \   triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero(l, 0)\nend", " \
    \   triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero(l, 0)\nend", " \
    \   triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero(l, 0)\nend\n</cell>\n\
    <code language=julia-1.5>", "    sum = 0\n    for i in l\n        sum += i\n \
    \       if sum == 0 \n            return true\n    return false\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero takes a list of integers\
    \ as an input.\n    it returns True if there are three distinct elements in the\
    \ list that\n    sum to zero, and False otherwise.", "    triples_sum_to_zero\
    \ = @view l |> filter((x) -> x==0 || x==-3 || x==-7, l)\n    length(triples_sum_to_zero)\
    \ == 3\nend\n</cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(1:100);\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers as\
    \ an input and returns a list of integers that sum to zero.", "    triples_sum_to_zero(l,\
    \ 0)\nend", "    triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero = @view\
    \ l |> filter(x->(x==0 || x==-3 || x==-7 || x==-9), l) |> filter(x->(x==0 || x==-3\
    \ || x==-7 || x==-9), l) |> filter(x->(x==0 || x==-3 || x==-7 || x==-9), l) |>\
    \ filter(x->(x==0 || x==-3 || x==-7 || x==-9), l)\n    return triples_sum_to_zero\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero takes\
    \ a list of integers as an input.\n    it returns True if there are three distinct\
    \ elements in the list that\n    sum to zero, and False otherwise.", "    triples_sum_to_zero(l,\
    \ 0)\nend", "    sum = 0\n    for i in l\n        sum += i\n        if sum ==\
    \ 0\n            return true\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it\
    \ returns True if there are three distinct elements in the list that\n    sum\
    \ to zero, and False otherwise.", "    triples_sum_to_zero = triples_sum_to_zero_helper(l)\n\
    \    return triples_sum_to_zero\nend", "    sum = 0\n    for i in l\n        sum\
    \ += i\n        if sum == 0\n            return true\n        end\n    end\n \
    \   return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero\
    \ takes a list of integers as an input.\n    it returns True if there are three\
    \ distinct elements in the list that\n    sum to zero, and False otherwise.",
  "    sum = 0\n    for i in l\n        sum += i\n        if sum > 0\n           \
    \ if sum > 3\n                return true\n            else\n                sum\
    \ = 0\n        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @time triples_sum_to_zero(vec(1:100000));\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a list of integers as an input, and returns True if there\
    \ are three distinct elements in the list that sum to zero, and False otherwise.",
  "    triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero = @view l |> filter(x->x==0\
    \ || x==-3 || x==-7, l)\n    return length(triples_sum_to_zero) == 3\nend\n</cell>\n\
    <code language=julia-1.4>\n@time triples_sum_to_zero(vec(1:10000));\n</cell>\n\
    <text>\nExercise: Write a function that takes a list of integers as an input,\
    \ and returns True if there are three distinct elements in the list that sum to\
    \ zero, and False otherwise.", "    sum = 0\n    for i in l\n        sum += i\n\
    \        if sum == 0 \n            return true\n        end\n    end\n    return\
    \ false\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list\
    \ of integers as an input, and returns True if there are two distinct elements\
    \ in the list that sum to zero, and False otherwise.", "    triples_sum_to_zero\
    \ = zeros(Int64, 3)\n    triples_sum_to_zero[1] = 1\n    triples_sum_to_zero[2]\
    \ = 1\n    triples_sum_to_zero[3] = 1\n    for x in l\n        if triples_sum_to_zero[x]\
    \ == 1\n            return true\n        end\n    end\n    return false\nend\n\
    </cell>\n<code language=julia-1.5>", "    triples_sum_to_zero(l, 0)\nend", " \
    \   triples_sum_to_zero = @. sum(l) == 0 \n    return triples_sum_to_zero\nend",
  "    triples_sum_to_zero(l, 0)\nend\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n\
    <code language=julia-1.5>\n@doc triples_sum_to_zero([1,2,3,7])\n</cell>\n<code\
    \ language=julia-1.5>\n@doc triples_sum_to_zero([2,4,-5,3,9,7])\n</cell>\n<code\
    \ language=julia-1.5>\n@doc triples_sum_to_zero([1])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a list of integers as an input, and returns True\
    \ if there are three distinct elements in the list that sum to zero, and False\
    \ otherwise.", "    triples_sum_to_zero = zeros(Int64, 3)\n    triples_sum_to_zero[1]\
    \ = 1\n    triples_sum_to_zero[2] = 1\n    triples_sum_to_zero[3] = 1\n    for\
    \ i in l\n        triples_sum_to_zero[i] = triples_sum_to_zero[i-1] + triples_sum_to_zero[i-2]\
    \ + triples_sum_to_zero[i-3]\n    end\n    return triples_sum_to_zero[1] == 0\
    \ && triples_sum_to_zero[2] == 0 && triples_sum_to_zero[3] == 0\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert triples_sum_to_zero([1, 3, 5, 0]) == false\n\
    @assert triples_sum_to_zero([1, 3, -2, 1]) == true\n@assert triples_sum_to_zero([1,\
    \ 2, 3, 7]) == false\n@assert triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == true\n\
    @assert triples_sum_to_zero([1]) == false\n</cell>\n<text>\nProblem 7: Triples\n\
    Write a function triples that takes a list of integers as an input.\nIt returns\
    \ True if there are three distinct elements in the list that sum to zero, and\
    \ False otherwise.", "    triples_sum_to_zero = @view l |> Vector{Int64}\n   \
    \ triples_sum_to_zero[triples_sum_to_zero == 0] = 1\n    triples_sum_to_zero[triples_sum_to_zero\
    \ .== 0] = 2\n    triples_sum_to_zero[triples_sum_to_zero .== 1] = 3\n    triples_sum_to_zero[triples_sum_to_zero\
    \ .== 2] = 4\n    triples_sum_to_zero[triples_sum_to_zero .== 3] = 5\n    triples_sum_to_zero[triples_sum_to_zero\
    \ .== 4] = 6\n    triples_sum_to_zero[triples_sum_to_zero .== 5] = 7\n    triples_sum_to_zero[triples_sum_to_zero\
    \ .== 6] = 8\n    triples_sum_to_zero[triples_sum_to_zero .== 7] = 9\n    triples_sum_to_zero[triples_sum_to_zero\
    \ .== 8] = 10\n    triples_sum_to_zero[triples_sum_to_zero .== 9] = 11\n    triples_sum_to_zero[triples_sum_to_zero\
    \ .== 10] = 12\n    triples_sum_to_zero[triples_sum_to_zero .== 11] = 13\n   \
    \ triples_sum_to_zero[triples_sum_to_zero .== 12] = 14\n    triples_sum_to_zero[triples_sum_to_zero\
    \ .== 13] = 15\n    triples_sum_to_zero[triples_sum_to_zero .== 14] = 16\n   \
    \ triples_sum_to_zero[triples_sum_to_zero .== 15] = 17\n    triples_sum_to_zero[triples_sum_to_zero\
    \ .== 16] = 18\n    triples_sum_to_zero[triples_sum_to_zero .== 17] = 19\n   \
    \ triples_sum_to_zero[triples_sum_to_zero .== 18] = 20\n    triples_sum_to_zero[triples_sum_to_zero\
    \ .== 19] = 21\n    triples_sum_to_zero[triples_sum_to_zero .== 20] = 22\n   \
    \ triples_sum_to_zero[triples_sum_to_zero .== 21] = 23\n    triples_sum_to_zero[triples_sum_to_zero\
    \ .== 22] = 24\n    triples_sum_to_zero[triples_sum_to_zero .== 23] = 25\n   \
    \ triples_sum_to_zero[triples_sum_to_zero .== 24] = 26\n    triples_sum_to_zero[triples_sum_to_zero\
    \ .== 25] = 27\n    triples_sum_to_zero[triples_sum_to_zero .== ", "    triples_sum_to_zero(l,\
    \ 0)\nend", "    triples_sum_to_zero = sum([triples_sum_to_zero(triple) for triple\
    \ in l])\n    return triples_sum_to_zero == 3\nend\n</cell>\n<code language=julia-1.5>",
  "    triples_sum_to_zero(l, 0)\nend", "    \n    triples_sum_to_zero = zeros(Int64,\
    \ 3)\n    triples_sum_to_zero[1] = 1\n    triples_sum_to_zero[2] = 1\n    triples_sum_to_zero[3]\
    \ = 1\n    \n    for x in l\n        if triples_sum_to_zero[x] == 1\n        \
    \    return true\n        end\n    end\n    return false\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert triples_sum_to_zero([1, 3, 5, 0]) == false\n@assert\
    \ triples_sum_to_zero([1, 3, -2, 1]) == true\n@assert triples_sum_to_zero([1,\
    \ 2, 3, 7]) == false\n@assert triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == true\n\
    @assert triples_sum_to_zero([1]) == false\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a list of integers as an input, and returns True if there\
    \ are three distinct elements in the list that sum to zero, and False otherwise.",
  "    triples_sum_to_zero(l, 0)\nend", "    sum = 0\n    for i in l\n        sum\
    \ += i\n        if sum == 0 \n            return true\n    return false\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero takes a list\
    \ of integers as an input.\n    it returns True if there are three distinct elements\
    \ in the list that\n    sum to zero, and False otherwise.", "    sum = 0\n   \
    \ for i in l\n        sum += i\n        if sum == 0 \n            return true\n\
    \    return false\nend", "    \n    sum = 0\n    for i in l\n        sum += i\n\
    \        if sum == 0\n            return true\n        end\n    end\n    return\
    \ false\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a list\
    \ of integers as an input, and returns a list of integers that sum to zero.",
  "    triples_sum_to_zero(l, 0)\nend", "    \n    sum = 0\n    for x in l\n     \
    \   sum += x\n        if sum == 0 \n            return true\n        end\n   \
    \ end\n    return false\nend\n</cell>\n<text>\nExercise 3: Write a function that\
    \ takes a list of integers and returns True if there are three distinct elements\
    \ in the list that sum to zero, and False otherwise.", "    sum = 0\n    for i\
    \ in l\n        sum += i\n        if sum == 0\n            return true\n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>\n@assert triples_sum_to_zero([1,\
    \ 3, 5, 0]) == false\n@assert triples_sum_to_zero([1, 3, -2, 1]) == true\n@assert\
    \ triples_sum_to_zero([1, 2, 3, 7]) == false\n@assert triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7]) == true\n@assert triples_sum_to_zero([1]) == false\n</cell>\n\
    <text>\n4.2 The function is_palindrome\nThe function is_palindrome takes as input\
    \ a list of integers and returns True if and only if the list is a palindrome.",
  "    triples_sum_to_zero = sum([x == 0 for x in l])\n    return triples_sum_to_zero\
    \ == 3\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero\
    \ takes a list of integers as an input.\n    it returns True if there are three\
    \ distinct elements in the list that\n    sum to zero, and False otherwise.",
  "    sum = 0\n    for i in l\n        sum += i\n        if sum == 0\n          \
    \  return true\n        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.4>",
  "    triples_sum_to_zero(l, 0)\nend", "    sum = 0\n    for i in l\n        sum\
    \ += i\n        if sum > 0\n            return true\n        end\n    end\n  \
    \  return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero\
    \ takes a list of integers as an input.\n    it returns True if there are three\
    \ distinct elements in the list that\n    sum to zero, and False otherwise.",
  "    sum = 0\n    for i in l\n        sum += i\n        if sum == 0 \n         \
    \   return true\n        end\n    end\n    return false\nend\n</cell>\n<text>\n\
    Exercise 7\nWrite a function that takes a list of integers as an input, and returns\
    \ the number of integers in the list that sum to zero.", "    triples_sum_to_zero\
    \ = zeros(Int64, 3)\n    triples_sum_to_zero[1] = 1\n    triples_sum_to_zero[2]\
    \ = 1\n    triples_sum_to_zero[3] = 1\n    for x in l\n        if triples_sum_to_zero[x]\
    \ == 1\n            return true\n        end\n    end\n    return false\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers as\
    \ an input, and returns True if there are three distinct elements in the list\
    \ that sum to zero, and False otherwise.", "    triples_sum_to_zero(l, 0)\nend",
  "    triples_sum_to_zero = @view l |> filter(x->(x+0)==x, l) |> filter(x->(x+0)==x,\
    \ l) |> filter(x->(x+0)==x, l)\n    return length(triples_sum_to_zero) == 3\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers\
    \ as an input, and returns True if there are three distinct elements in the list\
    \ that sum to zero, and False otherwise.", "    sum = 0\n    for i in l\n    \
    \    sum += i\n        if sum == 0 \n            return true\n        end\n  \
    \  end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n@assert triples_sum_to_zero([1,3,-5,0])\
    \ == false\n@assert triples_sum_to_zero([1,3,-2,1]) == true\n@assert triples_sum_to_zero([1,2,3,7])\
    \ == false\n@assert triples_sum_to_zero([2,4,-5,3,9,7]) == true\n@assert triples_sum_to_zero([1])\
    \ == false\n</cell>\n<text>\n4.5 Write a function that checks whether a number\
    \ is prime (for numbers upto 10^18).", "    \n    sum = 0\n    for x in l\n  \
    \      sum += x\n        if sum == 0 \n            return true\n    return false\n\
    end\n</cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(1:10000);\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a list of integers as\
    \ an input, and returns the number of integers in the list that sum to zero.",
  "    triples_sum_to_zero = @view l |> Vector{Int64}\n    triples_sum_to_zero = triples_sum_to_zero[1..end-1]\n\
    \    triples_sum_to_zero = triples_sum_to_zero[1..end-1]\n    triples_sum_to_zero\
    \ = triples_sum_to_zero[1..end-1]\n    triples_sum_to_zero = triples_sum_to_zero[1..end-1]\n\
    \    triples_sum_to_zero = triples_sum_to_zero[1..end-1]\n    triples_sum_to_zero\
    \ = triples_sum_to_zero[1..end-1]\n    triples_sum_to_zero = triples_sum_to_zero[1..end-1]\n\
    \    triples_sum_to_zero = triples_sum_to_zero[1..end-1]\n    triples_sum_to_zero\
    \ = triples_sum_to_zero[1..end-1]\n    triples_sum_to_zero = triples_sum_to_zero[1..end-1]\n\
    \    triples_sum_to_zero = triples_sum_to_zero[1..end-1]\n    triples_sum_to_zero\
    \ = triples_sum_to_zero[1..end-1]\n    triples_sum_to_zero = triples_sum_to_zero[1..end-1]\n\
    \    triples_sum_to_zero = triples_sum_to_zero[1..end-1]\n    triples_sum_to_zero\
    \ = triples_sum_to_zero[1..end-1]\n    triples_sum_to_zero = triples_sum_to_zero[1..end-1]\n\
    \    triples_sum_to_zero = triples_sum_to_zero[1..end-1]\n    triples_sum_to_zero\
    \ = triples_sum_to_zero[1..end-1]\n    triples_sum_to_zero = triples_sum_to_zero[1..end-1]\n\
    \    triples_sum_to_zero = triples_sum_to_zero[1..end-1]\n    triples_sum_to_zero\
    \ = triples_sum_to_zero[1..end-1]\n    triples_sum_to_zero = triples_sum_to_zero[1..end-1]\n\
    \    triples_sum_to_zero = triples_sum_to_zero[1..end-1]\n    triples_sum_to_zero\
    \ = triples_sum_to_zero[1..end-1]\n    triples_sum_to_zero = triples_sum_to_zero[1..end-1]\n\
    \    triples_sum_to_zero = triples_sum_to_zero[1..end-1]\n    triples_sum_to_zero\
    \ = triples_sum_to_zero[1..end-1]\n    triples_sum_to_zero = triple", "    triples_sum_to_zero\
    \ = @view l |> filter(x->(x+0)==0, l) |> length==3\n    return triples_sum_to_zero\n\
    end", "    sum = 0\n    for i in l\n        sum += i\n        if sum == 0\n  \
    \          return true\n    return false\nend", "    triples_sum_to_zero = zeros(Int64,\
    \ 3)\n    triples_sum_to_zero[1] = 1\n    triples_sum_to_zero[2] = 1\n    triples_sum_to_zero[3]\
    \ = 1\n    for x in l\n        if triples_sum_to_zero[x] == 1\n            triples_sum_to_zero[x]\
    \ = 0\n        end\n    end\n    return triples_sum_to_zero[1]+triples_sum_to_zero[2]+triples_sum_to_zero[3]\
    \ == 3\nend\n</cell>\n<code language=julia-1.5>\n@assert triples_sum_to_zero([1,\
    \ 3, 5, 0]) == false\n@assert triples_sum_to_zero([1, 3, -2, 1]) == true\n@assert\
    \ triples_sum_to_zero([1, 2, 3, 7]) == false\n@assert triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7]) == true\n@assert triples_sum_to_zero([1]) == false\n</cell>\n\
    <text>\nProblem 7: Write a function that takes a positive integer $n$ and returns\
    \ the number of positive integers less than or equal to $n$ that are coprime to\
    \ $n$. For example, given $n = 6$, the function should return $3$.", "    triples_sum_to_zero\
    \ = zeros(Int64, 3)\n    triples_sum_to_zero[1] = l[1]\n    triples_sum_to_zero[2]\
    \ = l[2]\n    triples_sum_to_zero[3] = l[3]\n    triples_sum_to_zero = triples_sum_to_zero[findall(triples_sum_to_zero)]\n\
    \    return length(triples_sum_to_zero) == 3\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it\
    \ returns True if there are three distinct elements in the list that\n    sum\
    \ to zero, and False otherwise.", "    triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero\
    \ = @view l |> \n        filter(x -> x == 0 || x == -x, \n            filter(x\
    \ -> x == 0 || x == -x, \n                filter(x -> x == 0 || x == -x, \n  \
    \                  filter(x -> x == 0 || x == -x, \n                        filter(x\
    \ -> x == 0 || x == -x, \n                            filter(x -> x == 0 || x\
    \ == -x, \n                                filter(x -> x == 0 || x == -x, \n \
    \                                   filter(x -> x == 0 || x == -x, \n        \
    \                                filter(x -> x == 0 || x == -x, \n           \
    \                                 filter(x -> x == 0 || x == -x, \n          \
    \                                      filter(x -> x == 0 || x == -x, \n     \
    \                                               filter(x -> x == 0 || x == -x,\
    \ \n                                                        filter(x -> x == 0\
    \ || x == -x, \n                                                            filter(x\
    \ -> x == 0 || x == -x, \n                                                   \
    \             filter(x -> x == 0 || x == -x, \n                              \
    \                                      filter(x -> x == 0 || x == -x, \n     \
    \                                                                   filter(x ->\
    \ x == 0 || x == -x, \n                                                      \
    \                      filter(x -> x == 0 || x == -x, \n                     \
    \                                                           filter(x -> x == 0\
    \ || x == -x, \n                                                             \
    \                       filter(x -> x == 0 || x == -x, \n                    \
    \                                                                    filter(x\
    \ -> x == 0 || x == -x, \n                                                   \
    \                                         filter(x -> x == 0 || x == -x, \n  \
    \                                                                            \
    \                  filter(x -> x == 0 || x == -x, \n                         \
    \                                                                           filter(x\
    \ -> x == 0 || x == -x, \n                                                   \
    \                                                     filter(x -> x == 0 || x\
    \ == -x, \n                                                                  \
    \                                          filter(x -> x == 0 || x == -x, \n \
    \                                                                            \
    \                                   filter(x -> x == 0 || x == -x, \n        \
    \                                                                            \
    \                                filter(x -> x == 0 || x == -x, \n           \
    \                                                                            \
    \                                 filter(x -> x == 0 || x == -x, \n          \
    \                                                                            \
    \                                      filter(x -> x == 0 || x == -x, \n     \
    \                                                                            \
    \                                               filter(x -> x == 0 || x == -x,\
    \ \n                                                                         \
    \                                                           filter(x -> x == 0\
    \ || x == -x, \n                                                             \
    \                                                                           filter(x\
    \ -> x == 0 || x == -x, \n                                                   \
    \                                                                            \
    \             filter(x -> x == 0 || x == -x, \n                              \
    \                                                                            \
    \                                      filter(x -> x == 0 || x == -x, \n     \
    \                                                                            \
    \                                                                   filter(x ->\
    \ x == 0 || x == -x, \n                                                      \
    \                                                                            \
    \                      filter(x -> x == 0 || x == -x, \n                     \
    \                                                                            \
    \                                                           filter(x -> x == 0\
    \ || x == -x, \n                                                             \
    \                                                                            \
    \                       filter(x -> x == 0 || x == -x, \n                    \
    \                                                                            \
    \                                                                    filter(x\
    \ -> x == 0 || x == -x, \n                                                   \
    \                                                                            \
    \                                         filter(x -> x == 0 || x == -x, \n  \
    \                                                                            \
    \                                                                            \
    \                  filter(x -> x == 0 || x == -x, \n                         \
    \                                                                            \
    \                                                                           filter(x\
    \ -> x == 0 || x == -x, \n                                                   \
    \                                                                            \
    \                                                     filter(x -> x == 0 || x\
    \ == -x, \n                                                                  \
    \                                                                            \
    \                                          filter(x -> x == 0 || x == -x, \n \
    \                                                                            \
    \                                                                            \
    \                                   filter(x ", "    \n    triples_sum_to_zero\
    \ = zeros(Int64, 3)\n    triples_sum_to_zero[1] = 1\n    triples_sum_to_zero[2]\
    \ = 1\n    triples_sum_to_zero[3] = 1\n    \n    for i in l\n        if triples_sum_to_zero[i]\
    \ == 1\n            return true\n        end\n    end\n    return false\nend\n\
    </cell>\n<code language=julia-1.5>\n@test triples_sum_to_zero([1,3,5,0]) == false\n\
    @test triples_sum_to_zero([1,3,-2,1]) == true\n@test triples_sum_to_zero([1,2,3,7])\
    \ == false\n@test triples_sum_to_zero([2,4,-5,3,9,7]) == true\n@test triples_sum_to_zero([1])\
    \ == false\n</cell>\n<text>\nExercise 3\nWrite a function called triples_sum_to_zero\
    \ that takes a list of integers as an input.\nIt returns True if there are three\
    \ distinct elements in the list that sum to zero, and False otherwise.", "   \
    \ triples_sum_to_zero = @view l |> Vector{Int64}\n    triples_sum_to_zero = sort(triples_sum_to_zero)\n\
    \    triples_sum_to_zero = unique(triples_sum_to_zero)\n    triples_sum_to_zero\
    \ = sort(triples_sum_to_zero)\n    triples_sum_to_zero = unique(triples_sum_to_zero)\n\
    \    triples_sum_to_zero = sort(triples_sum_to_zero)\n    triples_sum_to_zero\
    \ = unique(triples_sum_to_zero)\n    triples_sum_to_zero = sort(triples_sum_to_zero)\n\
    \    triples_sum_to_zero = unique(triples_sum_to_zero)\n    triples_sum_to_zero\
    \ = sort(triples_sum_to_zero)\n    triples_sum_to_zero = unique(triples_sum_to_zero)\n\
    \    triples_sum_to_zero = sort(triples_sum_to_zero)\n    triples_sum_to_zero\
    \ = unique(triples_sum_to_zero)\n    triples_sum_to_zero = sort(triples_sum_to_zero)\n\
    \    triples_sum_to_zero = unique(triples_sum_to_zero)\n    triples_sum_to_zero\
    \ = sort(triples_sum_to_zero)\n    triples_sum_to_zero = unique(triples_sum_to_zero)\n\
    \    triples_sum_to_zero = sort(triples_sum_to_zero)\n    triples_sum_to_zero\
    \ = unique(triples_sum_to_zero)\n    triples_sum_to_zero = sort(triples_sum_to_zero)\n\
    \    triples_sum_to_zero = unique(triples_sum_to_zero)\n    triples_sum_to_zero\
    \ = sort(triples_sum_to_zero)\n    triples_sum_to_zero = unique(triples_sum_to_zero)\n\
    \    triples_sum_to_zero = sort(triples_sum_to_zero)\n    triples_sum_to_zero\
    \ = unique(triples_sum_to_zero)\n    triples_sum_to_zero = sort(triples_sum_to_zero)\n\
    \    triples_sum_to_zero = unique(triples_sum_to_zero)\n    triples_sum_to_zero\
    \ = sort(triples_sum_to_zero)\n    triples_sum_to_zero = unique(triples_sum_to_zero)\n\
    \    triples_sum_to_zero = sort(triples_sum_to_zero)\n    triples_sum_to_zero\
    \ = unique(triples_sum_to_zero)\n    triples_sum_to_zero = sort(triples_sum_to_zero)\n\
    \    triples_sum_to_zero = unique(triples_sum_to_zero)\n    triples_sum_to_zero\
    \ = sort(triples_sum_to_zero)", "    triples_sum_to_zero(l, 0)\nend\n</cell>\n\
    <code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n<text>\nExercise\
    \ 3: Write a function that takes a list of integers and returns True if there\
    \ are three distinct elements in the list that sum to zero, and False otherwise.",
  "    triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero = l == sort(l)\n\
    \    return triples_sum_to_zero\nend\n</cell>\n<code language=julia-1.5>", " \
    \   triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero(l, 0)\nend", " \
    \   triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero(l, 0)\nend", " \
    \   triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero = @view l |> filter((x)\
    \ -> x==0 || x==-3 || x==-5, l)\n    triples_sum_to_zero = @view l |> filter((x)\
    \ -> x==0 || x==-3 || x==-5, l)\n    triples_sum_to_zero = @view l |> filter((x)\
    \ -> x==0 || x==-3 || x==-5, l)\n    triples_sum_to_zero = @view l |> filter((x)\
    \ -> x==0 || x==-3 || x==-5, l)\n    triples_sum_to_zero = @view l |> filter((x)\
    \ -> x==0 || x==-3 || x==-5, l)\n    triples_sum_to_zero = @view l |> filter((x)\
    \ -> x==0 || x==-3 || x==-5, l)\n    triples_sum_to_zero = @view l |> filter((x)\
    \ -> x==0 || x==-3 || x==-5, l)\n    triples_sum_to_zero = @view l |> filter((x)\
    \ -> x==0 || x==-3 || x==-5, l)\n    triples_sum_to_zero = @view l |> filter((x)\
    \ -> x==0 || x==-3 || x==-5, l)\n    triples_sum_to_zero = @view l |> filter((x)\
    \ -> x==0 || x==-3 || x==-5, l)\n    triples_sum_to_zero = @view l |> filter((x)\
    \ -> x==0 || x==-3 || x==-5, l)\n    triples_sum_to_zero = @view l |> filter((x)\
    \ -> x==0 || x==-3 || x==-5, l)\n    triples_sum_to_zero = @view l |> filter((x)\
    \ -> x==0 || x==-3 || x==-5, l)\n    triples_sum_to_zero = @view l |> filter((x)\
    \ -> x==0 || x==-3 || x==-5, l)\n    triples_sum_to_zero = @view l |> filter((x)\
    \ -> x==0 || x==-3 || x==-5, l)\n    triples_sum_to_zero = @view l |> filter((x)\
    \ -> x==0 || x==-3 || x==-5, l)\n    triples_sum_to_zero = @view l |> filter((x)\
    \ -> x==0 || x==-3 || x==-5, l)\n    triple", "    sum = 0\n    for i in l\n \
    \       sum += i\n        if sum == 0\n            return true\n        end\n\
    \    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n@assert triples_sum_to_zero([1,\
    \ 3, 5, 0]) == false\n@assert triples_sum_to_zero([1, 3, -2, 1]) == true\n@assert\
    \ triples_sum_to_zero([1, 2, 3, 7]) == false\n@assert triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7]) == true\n@assert triples_sum_to_zero([1]) == false\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a list of integers as an input,\
    \ and returns True if there are three distinct elements in the list that sum to\
    \ zero, and False otherwise.", "    triples_sum_to_zero = sum([triples_sum_to_zero(triple)\
    \ for triple in l])\n    return triples_sum_to_zero == 3\nend", "    triples_sum_to_zero(l,\
    \ 0)\nend", "    \n    sum = 0\n    for i in l\n        sum += i\n        if sum\
    \ == 0 \n            return true\n        end\n    end\n    return false\nend\n\
    </cell>\n<code language=julia-1.5>\n@test triples_sum_to_zero([1, 3, 5, 0]) ==\
    \ false\n@test triples_sum_to_zero([1, 3, -2, 1]) == true\n@test triples_sum_to_zero([1,\
    \ 2, 3, 7]) == false\n@test triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == true\n\
    @test triples_sum_to_zero([1]) == false\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a list of integers and returns True if there are three distinct\
    \ elements in the list that sum to zero, and False otherwise.", "    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0\n            return true\n\
    \    return false\nend", "    triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero\
    \ = sum([triples_sum_to_zero(triple) for triple in l])\n    triples_sum_to_zero\
    \ == length(l)\nend\n</cell>\n<code language=julia-1.1>\n\"\"\"\n    triples_sum_to_zero\
    \ takes a list of integers as an input.\n    it returns True if there are three\
    \ distinct elements in the list that\n    sum to zero, and False otherwise.",
  "    triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero = zeros(Int64, 3)\n\
    \    for x in l\n        triples_sum_to_zero = triples_sum_to_zero || triples_sum_to_zero[x-1]\
    \ + triples_sum_to_zero[x+1] + triples_sum_to_zero[x+2]\n    end\n    return triples_sum_to_zero\n\
    end\n</cell>\n<code language=julia-1.5>", "    triples_sum_to_zero(l, 0)\nend",
  "    triples_sum_to_zero(l, 0)\nend", "    sum = 0\n    for i in l\n        sum\
    \ += i\n        if sum == 0\n            return true\n    return false\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero takes a list\
    \ of integers as an input.\n    it returns True if there are three distinct elements\
    \ in the list that\n    sum to zero, and False otherwise.", "    \n    sum = 0\n\
    \    for x in l\n        sum += x\n        if sum == 0 \n            return true\n\
    \    return false\nend\n</cell>\n<code language=julia-1.5>\n@assert triples_sum_to_zero([1,\
    \ 3, 5, 0]) == false\n@assert triples_sum_to_zero([1, 3, -2, 1]) == true\n@assert\
    \ triples_sum_to_zero([1, 2, 3, 7]) == false\n@assert triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7]) == true\n@assert triples_sum_to_zero([1]) == false\n</cell>\n\
    <text>\nProblem 4\nWrite a function that takes a list of integers and returns\
    \ a list of all positive integers less than the sum of the input list. For example,\
    \ if the input list is [4, 3, -2, 1], the output should be [4, 3, -2, 1].", " \
    \   sum = 0\n    for i in l\n        sum += i\n        if sum == 0 \n        \
    \    return true\n        end\n    end\n    return false\nend\n</cell>\n<text>\n\
    Exercise 3: Write a function that takes a list of integers as an input, and returns\
    \ True if there are two distinct elements in the list that sum to zero, and False\
    \ otherwise.", "    triples_sum_to_zero = @view l |> \n        filter(x -> x ==\
    \ 0 || x == -x, \n            filter(x -> x == 0 || x == -x, \n              \
    \  filter(x -> x == 0 || x == -x, \n                    filter(x -> x == 0 ||\
    \ x == -x, \n                        filter(x -> x == 0 || x == -x, \n       \
    \                     filter(x -> x == 0 || x == -x, \n                      \
    \          filter(x -> x == 0 || x == -x, \n                                 \
    \   filter(x -> x == 0 || x == -x, \n                                        filter(x\
    \ -> x == 0 || x == -x, \n                                            filter(x\
    \ -> x == 0 || x == -x, \n                                                filter(x\
    \ -> x == 0 || x == -x, \n                                                   \
    \ filter(x -> x == 0 || x == -x, \n                                          \
    \              filter(x -> x == 0 || x == -x, \n                             \
    \                               filter(x -> x == 0 || x == -x, \n            \
    \                                                    filter(x -> x == 0 || x ==\
    \ -x, \n                                                                    filter(x\
    \ -> x == 0 || x == -x, \n                                                   \
    \                     filter(x -> x == 0 || x == -x, \n                      \
    \                                                      filter(x -> x == 0 || x\
    \ == -x, \n                                                                  \
    \              filter(x -> x == 0 || x == -x, \n                             \
    \                                                       filter(x -> x == 0 ||\
    \ x == -x, \n                                                                \
    \                        filter(x -> x == 0 || x == -x, \n                   \
    \                                                                         filter(x\
    \ -> x == 0 || x == -x, \n                                                   \
    \                                             filter(x -> x == 0 || x == -x, \n\
    \                                                                            \
    \                        filter(x -> x == 0 || x == -x, \n                   \
    \                                                                            \
    \         filter(x -> x == 0 || x == -x, \n                                  \
    \                                                                          filter(x\
    \ -> x == 0 || x == -x, \n                                                   \
    \                                                             filter(x -> x ==\
    \ 0 || x == -x, \n                                                           \
    \                                                         filter(x -> x == 0 ||\
    \ x == -x, \n                                                                \
    \                                                        filter(x -> x == 0 ||\
    \ x == -x, \n                                                                \
    \                                                            filter(x -> x ==\
    \ 0 || x == -x, \n                                                           \
    \                                                                     filter(x\
    \ -> x == 0 || x == -x, \n                                                   \
    \                                                                            \
    \     filter(x -> x == 0 || x == -x, \n                                      \
    \                                                                            \
    \                      filter(x -> x == 0 || x == -x, \n                     \
    \                                                                            \
    \                                           filter(x -> x == 0 || x == -x, \n\
    \                                                                            \
    \                                                                    filter(x\
    \ -> x == 0 || x == -x, \n                                                   \
    \                                                                            \
    \                     filter(x -> x == 0 || x == -x, \n                      \
    \                                                                            \
    \                                                      filter(x -> x == 0 || x\
    \ == -x, \n                                                                  \
    \                                                                            \
    \              filter(x -> x == 0 || x == -x, \n                             \
    \                                                                            \
    \                                                       filter(x -> x == 0 ||\
    \ x == -x, \n                                                                \
    \                                                                            \
    \                        filter(x -> x == 0 || x == -x, \n                   \
    \                                                                            \
    \                                                                         filter(x\
    \ -> x == 0 || x == -x, \n                                                   \
    \                                                                            \
    \                                             filter(x -> x == 0 || x == -x, \n\
    \                                                                            \
    \                                                                            \
    \                        filter(x -> x == 0 || x == -x, \n                   \
    \                                                                            \
    \                                                                            \
    \         filter(x -> x == 0 || x == -x, \n                                  \
    \                                                                            \
    \                                                                          filter(x\
    \ -> x == 0 || x == -x, \n                                                   \
    \                                                                            \
    \                                                             filter(x ", "  \
    \  sum = 0\n    for i in l\n        sum += i\n        if sum == 0\n          \
    \  return true\n    return false\nend\n</cell>\n<code language=julia-1.4>\n\"\"\
    \"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns\
    \ True if there are three distinct elements in the list that\n    sum to zero,\
    \ and False otherwise.", "    sum = 0\n    for i in l\n        sum += i\n    \
    \    if sum == 0 \n            return true\n        end\n    end\n    return false\n\
    end", "    triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero(l, 0)\nend\n\
    </cell>\n<code language=julia-1.5>", "    triples_sum_to_zero = zeros(Int64, 3)\n\
    \    triples_sum_to_zero[1] = 1\n    triples_sum_to_zero[2] = 1\n    triples_sum_to_zero[3]\
    \ = 1\n    for i in l\n        triples_sum_to_zero[i] = triples_sum_to_zero[i-1]\
    \ + triples_sum_to_zero[i-2] + triples_sum_to_zero[i-3]\n    end\n    return triples_sum_to_zero[1]==0\
    \ && triples_sum_to_zero[2]==0 && triples_sum_to_zero[3]==0\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero takes a list of integers\
    \ as an input.\n    it returns True if there are three distinct elements in the\
    \ list that\n    sum to zero, and False otherwise.", "    triples_sum_to_zero\
    \ = zeros(Int64, 3)\n    for x in l\n        triples_sum_to_zero = triples_sum_to_zero\
    \ + (x != 0)\n    end\n    return triples_sum_to_zero == zeros(Int64, 3)\nend\n\
    </cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(1:10000);\n</cell>\n\
    <text>\nExercise: Write a function that takes a list of integers as an input,\
    \ and returns True if there are three distinct elements in the list that sum to\
    \ zero, and False otherwise.", "    triples_sum_to_zero(l, 0)\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero takes a list of integers\
    \ as an input.\n    it returns True if there are three distinct elements in the\
    \ list that\n    sum to zero, and False otherwise.", "    triples_sum_to_zero(l,\
    \ 0)\nend", "    sum = 0\n    for i in l\n        sum += i\n        if sum ==\
    \ 0 \n            return true\n        end\n    end\n    return false\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert triples_sum_to_zero([1,3,-5,0]) == false\n\
    @assert triples_sum_to_zero([1,3,-2,1]) == true\n@assert triples_sum_to_zero([1,2,3,7])\
    \ == false\n@assert triples_sum_to_zero([2,4,-5,3,9,7]) == true\n@assert triples_sum_to_zero([1])\
    \ == false\n</cell>\n<text>\nExercise 2\nWrite a function that takes a list of\
    \ integers as an input, and returns True if there are three distinct elements\
    \ in the list that sum to zero, and False otherwise.", "    sum = 0\n    for i\
    \ in l\n        sum += i\n        if sum == 0\n            return true\n    return\
    \ false\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes a list\
    \ of integers and returns the number of integers in the list that sum to zero.",
  "    triples_sum_to_zero = zeros(Int64, 3)\n    for triple in l\n        triples_sum_to_zero[triple]\
    \ += 1\n    end\n    return triples_sum_to_zero[1]==3\nend\n</cell>\n<code language=julia-1.5>\n\
    @test triples_sum_to_zero([1, 3, 5, 0])\n@test triples_sum_to_zero([1, 3, -2,\
    \ 1])\n@test triples_sum_to_zero([1, 2, 3, 7])\n@test triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n@test triples_sum_to_zero([1])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a list of integers and returns the number of\
    \ integers in the list that sum to zero.", "    triples_sum_to_zero(l, 0)\nend",
  "    triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero(l, 0)\nend", "  \
    \  sum = 0\n    for i in l\n        sum += i\n        if sum == 0 \n         \
    \   return true\n        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it\
    \ returns True if there are three distinct elements in the list that\n    sum\
    \ to zero, and False otherwise.", "    sum = 0\n    for i in l\n        sum +=\
    \ i\n        if sum == 0 \n            return true\n    return false\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero takes a list of integers\
    \ as an input.\n    it returns True if there are three distinct elements in the\
    \ list that\n    sum to zero, and False otherwise.", "    sum = 0\n    for i in\
    \ l\n        sum += i\n        if sum == 0 \n            return true\n       \
    \ end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ triples_sum_to_zero([1, 3, 5, 0]) == false\n@assert triples_sum_to_zero([1,\
    \ 3, -2, 1]) == true\n@assert triples_sum_to_zero([1, 2, 3, 7]) == false\n@assert\
    \ triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == true\n@assert triples_sum_to_zero([1])\
    \ == false\n</cell>\n<text>\n4.4 Exercise: Write a function that checks if a list\
    \ contains all negative integers. Test it on all possible lists below.", "   \
    \ triples_sum_to_zero(l, 0)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    triples_sum_to_zero takes a list of integers as an input.\n    it returns\
    \ True if there are three distinct elements in the list that\n    sum to zero,\
    \ and False otherwise.", "    sum = 0\n    for i in l\n        sum += i\n    \
    \    if sum == 0\n            return true\n    return false\nend\n</cell>\n<code\
    \ language=julia-1.4>", "    triples_sum_to_zero = @where sum(l) == 0 \n    return\
    \ triples_sum_to_zero\nend\n</cell>\n<code language=julia-1.5>", "    triples_sum_to_zero(l,\
    \ 0)\nend", "    sum = 0\n    for i in l\n        sum += i\n        if sum ==\
    \ 0 \n            return true\n        end\n    end\n    return false\nend", " \
    \   \n    triples_sum_to_zero = zeros(Int64, 3)\n    triples_sum_to_zero[1] =\
    \ true\n    triples_sum_to_zero[2] = true\n    triples_sum_to_zero[3] = true\n\
    \    \n    for i in 1:length(l)\n        if triples_sum_to_zero[i] == true\n \
    \           triples_sum_to_zero[i] = false\n        end\n    end\n    \n    if\
    \ triples_sum_to_zero[1] == true && triples_sum_to_zero[2] == true && triples_sum_to_zero[3]\
    \ == true\n        return true\n    else\n        return false\n    end\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    sum = 0\n    for i in l\n    \
    \    sum += i\n        if sum == 0 \n            return true\n        end\n  \
    \  end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n@assert triples_sum_to_zero([1,\
    \ 3, 5, 0]) == false\n@assert triples_sum_to_zero([1, 3, -2, 1]) == true\n@assert\
    \ triples_sum_to_zero([1, 2, 3, 7]) == false\n@assert triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7]) == true\n@assert triples_sum_to_zero([1]) == false\n</cell>\n\
    <text>\n4.2 Write a function that checks if a list contains all unique elements.",
  "    \n    triples_sum_to_zero = zeros(Int64, 3)\n    \n    for x in l\n       \
    \ if triples_sum_to_zero[x] == 1\n            triples_sum_to_zero[x] = 0\n   \
    \     else\n            triples_sum_to_zero[x] += 1\n        end\n    end\n  \
    \  \n    if triples_sum_to_zero[1] == 1\n        return true\n    else\n     \
    \   return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n \
    \   triples_sum_to_zero takes a list of integers as an input.\n    it returns\
    \ True if there are three distinct elements in the list that\n    sum to zero,\
    \ and False otherwise.", "    triples_sum_to_zero(l, 0)\nend\n</cell>\n<code language=julia-1.5>",
  "    triples_sum_to_zero = sum([triples_sum_to_zero(triple) for triple in l])\n\
    \    triples_sum_to_zero > 0 and triples_sum_to_zero < 3\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero takes a list of integers\
    \ as an input.\n    it returns True if there are three distinct elements in the\
    \ list that\n    sum to zero, and False otherwise.", "    triples_sum_to_zero\
    \ = l == [0, 0, 0]\n    return triples_sum_to_zero\nend\n</cell>\n<code language=julia-1.5>",
  "    triples_sum_to_zero(l, 0)\nend\n</cell>\n<code language=julia-1.5>", "    triples_sum_to_zero(l,\
    \ 0)\nend", "    triples_sum_to_zero = sum([triples_sum_to_zero(triple) for triple\
    \ in l])\n    return triples_sum_to_zero == 3\nend", "    triples_sum_to_zero(l,\
    \ 0)\nend", "    triples_sum_to_zero(l, 0)\nend", "    sum = 0\n    for i in l\n\
    \        sum += i\n        if sum == 0\n            return true\n    return false\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero takes\
    \ a list of integers as an input.\n    it returns True if there are three distinct\
    \ elements in the list that\n    sum to zero, and False otherwise.", "    triples_sum_to_zero(l,\
    \ 0)\nend", "    sum = 0\n    for i in l\n        sum += i\n        if sum ==\
    \ 0 \n            return true\n    return false\nend", "    triples_sum_to_zero(l,\
    \ 0)\nend", "    triples_sum_to_zero = l .== 0 .* l .== 0 .* l .== 0\n    return\
    \ triples_sum_to_zero\nend\n</cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(1:100);\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers as\
    \ an input, and returns True if there are three distinct elements in the list\
    \ that sum to zero, and False otherwise.", "    sum = 0\n    for i in l\n    \
    \    sum += i\n        if sum == 0 \n            return true\n    return false\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a list of integers\
    \ as an input, and returns True if there are three distinct elements in the list\
    \ that sum to zero, and False otherwise.", "    triples_sum_to_zero(l, 0)\nend",
  "    sum = 0\n    for i in l\n        sum += i\n        if sum == 0 \n         \
    \   return true\n        end\n    end\n    return false\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of integers as an input, and returns\
    \ the number of integers in the list that sum to zero.", "    sum = 0\n    for\
    \ i in l\n        sum += i\n        if sum == 0 \n            return true\n  \
    \  return false\nend", "    triples_sum_to_zero = l .== 0\n    triples_sum_to_zero\
    \ = triples_sum_to_zero .& (l .== 0)\n    triples_sum_to_zero = triples_sum_to_zero\
    \ .& (l .== 0)\n    triples_sum_to_zero = triples_sum_to_zero .& (l .== 0)\n \
    \   triples_sum_to_zero = triples_sum_to_zero .& (l .== 0)\n    triples_sum_to_zero\
    \ = triples_sum_to_zero .& (l .== 0)\n    triples_sum_to_zero = triples_sum_to_zero\
    \ .& (l .== 0)\n    triples_sum_to_zero = triples_sum_to_zero .& (l .== 0)\n \
    \   triples_sum_to_zero = triples_sum_to_zero .& (l .== 0)\n    triples_sum_to_zero\
    \ = triples_sum_to_zero .& (l .== 0)\n    triples_sum_to_zero = triples_sum_to_zero\
    \ .& (l .== 0)\n    triples_sum_to_zero = triples_sum_to_zero .& (l .== 0)\n \
    \   triples_sum_to_zero = triples_sum_to_zero .& (l .== 0)\n    triples_sum_to_zero\
    \ = triples_sum_to_zero .& (l .== 0)\n    triples_sum_to_zero = triples_sum_to_zero\
    \ .& (l .== 0)\n    triples_sum_to_zero = triples_sum_to_zero .& (l .== 0)\n \
    \   triples_sum_to_zero = triples_sum_to_zero .& (l .== 0)\n    triples_sum_to_zero\
    \ = triples_sum_to_zero .& (l .== 0)\n    triples_sum_to_zero = triples_sum_to_zero\
    \ .& (l .== 0)\n    triples_sum_to_zero = triples_sum_to_zero .& (l .== 0)\n \
    \   triples_sum_to_zero = triples_sum_to_zero .& (l .== 0)\n    triples_sum_to_zero\
    \ = triples_sum_to_zero .& (l .== 0)\n    triples_sum_to_zero = triples_sum_to_zero\
    \ .& (l .== 0)\n    triples_sum_to_zero = triples_sum_to_zero .& (l .== 0)\n \
    \   triples_sum_to_zero = triples_sum_to_zero .& (l .== 0)\n    triples_sum_to_zero\
    \ = triples_sum_to_zero .& (l .== 0)\n    triples_sum_to_zero = triples_sum_to_zero\
    \ .& (l .== 0)\n    triples_sum_to_zero", "    triples_sum_to_zero(l, 0)\nend",
  "    sum = 0\n    for i in l\n        sum += i\n        if sum == 0 \n         \
    \   return true\n    return false\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a list of integers as an input, and returns True if there are three\
    \ distinct elements in the list that sum to zero, and False otherwise.", "   \
    \ triples_sum_to_zero = zeros(Int64, 3)\n    triples_sum_to_zero[1] = l[1]\n \
    \   triples_sum_to_zero[2] = l[2]\n    triples_sum_to_zero[3] = l[3]\n    \n \
    \   \n    if triples_sum_to_zero[1] == 0 && triples_sum_to_zero[2] == 0 && triples_sum_to_zero[3]\
    \ == 0\n        return true\n    else\n        return false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@test triples_sum_to_zero([1, 3, 5, 0]) == false\n\
    @test triples_sum_to_zero([1, 3, -2, 1]) == true\n@test triples_sum_to_zero([1,\
    \ 2, 3, 7]) == false\n@test triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == true\n\
    @test triples_sum_to_zero([1]) == false\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a list of integers as an input.\nIt returns True if there\
    \ are two distinct elements in the list that sum to zero, and False otherwise.",
  "    triples_sum_to_zero = @view l |> \n        filter(x -> x == 0 || x == -x, \n\
    \            filter(x -> x == 0 || x == -x, \n                filter(x -> x ==\
    \ 0 || x == -x, \n                    filter(x -> x == 0 || x == -x, \n      \
    \                  filter(x -> x == 0 || x == -x, \n                         \
    \   filter(x -> x == 0 || x == -x, \n                                filter(x\
    \ -> x == 0 || x == -x, \n                                    filter(x -> x ==\
    \ 0 || x == -x, \n                                        filter(x -> x == 0 ||\
    \ x == -x, \n                                            filter(x -> x == 0 ||\
    \ x == -x, \n                                                filter(x -> x ==\
    \ 0 || x == -x, \n                                                    filter(x\
    \ -> x == 0 || x == -x, \n                                                   \
    \     filter(x -> x == 0 || x == -x, \n                                      \
    \                      filter(x -> x == 0 || x == -x, \n                     \
    \                                           filter(x -> x == 0 || x == -x, \n\
    \                                                                    filter(x\
    \ -> x == 0 || x == -x, \n                                                   \
    \                     filter(x -> x == 0 || x == -x, \n                      \
    \                                                      filter(x -> x == 0 || x\
    \ == -x, \n                                                                  \
    \              filter(x -> x == 0 || x == -x, \n                             \
    \                                                       filter(x -> x == 0 ||\
    \ x == -x, \n                                                                \
    \                        filter(x -> x == 0 || x == -x, \n                   \
    \                                                                         filter(x\
    \ -> x == 0 || x == -x, \n                                                   \
    \                                             filter(x -> x == 0 || x == -x, \n\
    \                                                                            \
    \                        filter(x -> x == 0 || x == -x, \n                   \
    \                                                                            \
    \         filter(x -> x == 0 || x == -x, \n                                  \
    \                                                                          filter(x\
    \ -> x == 0 || x == -x, \n                                                   \
    \                                                             filter(x -> x ==\
    \ 0 || x == -x, \n                                                           \
    \                                                         filter(x -> x == 0 ||\
    \ x == -x, \n                                                                \
    \                                                        filter(x -> x == 0 ||\
    \ x == -x, \n                                                                \
    \                                                            filter(x -> x ==\
    \ 0 || x == -x, \n                                                           \
    \                                                                     filter(x\
    \ -> x == 0 || x == -x, \n                                                   \
    \                                                                            \
    \     filter(x -> x == 0 || x == -x, \n                                      \
    \                                                                            \
    \                      filter(x -> x == 0 || x == -x, \n                     \
    \                                                                            \
    \                                           filter(x -> x == 0 || x == -x, \n\
    \                                                                            \
    \                                                                    filter(x\
    \ -> x == 0 || x == -x, \n                                                   \
    \                                                                            \
    \                     filter(x -> x == 0 || x == -x, \n                      \
    \                                                                            \
    \                                                      filter(x -> x == 0 || x\
    \ == -x, \n                                                                  \
    \                                                                            \
    \              filter(x -> x == 0 || x == -x, \n                             \
    \                                                                            \
    \                                                       filter(x -> x == 0 ||\
    \ x == -x, \n                                                                \
    \                                                                            \
    \                        filter(x -> x == 0 || x == -x, \n                   \
    \                                                                            \
    \                                                                         filter(x\
    \ -> x == 0 || x == -x, \n                                                   \
    \                                                                            \
    \                                             filter(x -> x == 0 || x == -x, \n\
    \                                                                            \
    \                                                                            \
    \                        filter(x -> x == 0 || x == -x, \n                   \
    \                                                                            \
    \                                                                            \
    \         filter(x -> x == 0 || x == -x, \n                                  \
    \                                                                            \
    \                                                                          filter(x\
    \ -> x == 0 || x == -x, \n                                                   \
    \                                                                            \
    \                                                             filter(x ", "  \
    \  triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero(l, 0)\nend", "  \
    \  sum = 0\n    for i in l\n        sum += i\n        if sum == 0 \n         \
    \   return true\n        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert triples_sum_to_zero([1, 3, 5, 0]) == false\n@assert triples_sum_to_zero([1,\
    \ 3, -2, 1]) == true\n@assert triples_sum_to_zero([1, 2, 3, 7]) == false\n@assert\
    \ triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == true\n@assert triples_sum_to_zero([1])\
    \ == false\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list of\
    \ integers as an input, and returns True if there are two distinct elements in\
    \ the list that sum to zero, and False otherwise.", "    sum = 0\n    for i in\
    \ l\n        sum += i\n        if sum == 0\n            return true\n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero\
    \ takes a list of integers as an input.\n    it returns True if there are three\
    \ distinct elements in the list that\n    sum to zero, and False otherwise.",
  "    triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero(l, 0)\nend", "  \
    \  triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero(l, 0)\nend", "  \
    \  \n    sum = 0\n    for i in l\n        sum += i\n        if sum == 0 \n   \
    \         return true\n        end\n    end\n    return false\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero takes a list of integers\
    \ as an input.\n    it returns True if there are three distinct elements in the\
    \ list that\n    sum to zero, and False otherwise."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
