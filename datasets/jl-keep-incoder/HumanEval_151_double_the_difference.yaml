name: HumanEval_151_double_the_difference
language: julia
prompt: "\"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
  \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
  \    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
  \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
  \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
  \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
  \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
  \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
  \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
completions: ["    if length(lst) == 0\n        return 0\n    end\n    \n    sum =\
    \ 0\n    for i in lst\n        if isodd(i)\n            sum += i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert double_the_difference([-1,\
    \ -2, 0]) == 0\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([0])\
    \ == 0\n@assert double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n@assert\
    \ double_the_difference([9, -2]) == 81\n@assert double_the_difference([9, -2])\
    \ == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@", "    if length(lst) == 0 \n        return 0 \n    else \n  \
    \      sum = 0\n        for i in lst\n            if typeof(i) == Int\n      \
    \          sum += i\n            else\n                sum += i*i\n        end\n\
    \        return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    Given a list of numbers, return the sum of squares of the numbers\n    in\
    \ the list that are odd. Ignore numbers that are negative or not integers.\n \
    \   \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    sum\
    \ = 0\n    for x in lst\n        if x > 0\n            sum += x*x\n        else\n\
    \            sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return a new list\
    \ containing only the numbers \n    that are evenly divisible by 3 in the original\
    \ list. \n    \n    even_divisible_by_3([3, 6, 9, 12, 15]) == [6, 12]\n    even_divisible_by_3([3,\
    \ 6, 9, 12, 15, 18]) == [9, 18]\n    even_divisible_by_3([]) == []\n    even_divisible_by_3([3])\
    \ == [3]\n    even_divisible_by_3([3, 3]) == [3]\n    even_divisible_by_3([3,\
    \ 3, 3]) == [3]\n    even_divisible_by_3([3, 3, 3, 3]) == [3]\n    even_divisible_by_3([3,\
    \ 3, 3, 3, 3]) == [3]\n    even_divisible_by_3([3, 3, 3, 3, 3, 3]) == [3]\n  \
    \  even_divisible_by_3([3, 3, 3, 3, 3, 3, 3]) == [3]\n    \n    If the input list\
    \ is empty, return an empty list.\n    \"\"\"", "    \n    if length(lst) == 0\n\
    \        return 0\n    end\n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n\
    \            sum += i\n        end\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"\n    Given a list of numbers, return the sum\
    \ of squares of the numbers\n    in the list that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0])\
    \ == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"", "    if length(lst) == 0 \n        return\
    \ 0 \n    else \n        sum = 0\n        for n in lst\n            if n >= 0\n\
    \                sum += n * n\n            else \n                sum += n\n \
    \       return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    Given a list of numbers, return the sum of squares of the numbers\n    in\
    \ the list that are odd. Ignore numbers that are negative or not integers.\n \
    \   \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n        for\
    \ i in lst\n            if i > 0\n                sum += i * i\n            else\n\
    \                sum += i\n        end\n        return sum\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return the sum\
    \ of squares of the numbers\n    in the list that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0])\
    \ == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"", "    if length(lst) == 0 \n        return\
    \ 0 \n    else \n        sum = 0\n        for i in lst \n            if isinteger(i)\
    \ \n                sum += i \n            else \n                sum += i*i \n\
    \        return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    Given a list of numbers, return the sum of squares of the numbers\n    in\
    \ the list that are odd. Ignore numbers that are negative or not integers.\n \
    \   \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    sum\
    \ = 0\n    for x in lst\n        if x > 0\n            sum += x * x\n        else\n\
    \            sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a list of numbers and returns the product\
    \ of the numbers in the list that are odd. Ignore numbers that are negative or\
    \ not integers.", "    \n    if length(lst) == 0\n        return 0\n    end\n\
    \    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum +=\
    \ i\n        end\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([-1, -2, 0])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the sum of the squares of the numbers in the list that are odd.\
    \ Ignore numbers that are negative or not integers.", "    if length(lst) == 0\
    \ \n        return 0 \n    else \n        sum = 0\n        for i in lst\n    \
    \        if i > 0\n                sum += i * i\n            else\n          \
    \      sum += i\n        end\n        return sum\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) ==\
    \ 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"", "    if length(lst) == 0\n        return 0\n\
    \    else\n        sum = 0\n        for n in lst\n            if n > 0\n     \
    \           sum += n * n\n            else\n                sum += n\n       \
    \ end\n        return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\
    \"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in lst\n  \
    \      if isodd(i)\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers,\
    \ return the sum of squares of the numbers\n    in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    sum = 0\n\
    \    for x in lst\n        if x > 0\n            sum += x * x\n        else\n\
    \            sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) ==\
    \ 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"", "    if length(lst) == 0\n        return 0\n\
    \    else\n        sum = 0\n        for i in lst\n            if isodd(i)\n  \
    \              sum += i\n            else\n                sum -= i\n        end\n\
    \        return sum\n    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that returns the product of the numbers in the list that are odd. Ignore numbers\
    \ that are negative or not integers.", "    if length(lst) == 0\n        return\
    \ 0\n    else\n        sum = 0\n        for i in lst\n            if isodd(i)\n\
    \                sum += i\n            end\n        end\n        return sum\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of\
    \ numbers, return the sum of squares of the numbers\n    in the list that are\
    \ odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0\n        return 0\n    else\n        sum = 0\n        for i in lst\n  \
    \          if isinteger(i)\n                sum += i\n            else\n     \
    \           sum += i * i\n        end\n        return sum\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the product of the numbers in\
    \ the list that are odd.", "    sum = 0\n    for i in lst\n        if isodd(i)\n\
    \            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the product of the numbers in the list\
    \ that are odd. Ignore numbers that are negative or not integers.", "    if length(lst)\
    \ == 0\n        return 0\n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n\
    \            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) ==\
    \ 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"", "    \n    if length(lst) == 0 \n        return\
    \ 0 \n    \n    sum = 0\n    for i in lst \n        if isodd(i) \n           \
    \ sum += i \n        else \n            sum -= i \n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return\
    \ the sum of squares of the numbers\n    in the list that are odd. Ignore numbers\
    \ that are negative or not integers.\n    \n    double_the_difference([1, 3, 2,\
    \ 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n   \
    \ double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n\
    \   \n    If the input list is empty, return 0.\n    \"\"\"", "    sum = 0\n \
    \   for x in lst\n        if x % 2 == 1\n            sum += x\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n   \
    \ Given a list of numbers, return the sum of squares of the numbers\n    in the\
    \ list that are odd. Ignore numbers that are negative or not integers.\n    \n\
    \    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0\n        return 0\n    else\n        sum = 0\n        for n\
    \ in lst\n            if n > 0\n                sum += n * n\n            else\n\
    \                sum -= n * n\n            end\n        end\n        return sum\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of\
    \ numbers, return the sum of squares of the numbers\n    in the list that are\
    \ odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    \n    sum\
    \ = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n       \
    \ end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    Given a list of numbers, return the sum of squares of the numbers\n    in\
    \ the list that are odd. Ignore numbers that are negative or not integers.\n \
    \   \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n        for\
    \ i in lst \n            if i .> 0 \n                sum += i * i \n         \
    \   else \n                sum += i \n        return sum\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return the sum\
    \ of squares of the numbers\n    in the list that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0])\
    \ == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"", "    if length(lst) == 0\n        return 0\n\
    \    else\n        sum = 0\n        for i in lst\n            if isodd(i)\n  \
    \              sum += i\n            else\n                sum -= i\n        end\n\
    \        return sum\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a list of numbers and returns the product of the numbers in the list\
    \ that are odd. Ignore numbers that are negative or not integers.", "    \n  \
    \  if length(lst) == 0\n        return 0\n    end\n    \n    sum = 0\n    for\
    \ x in lst\n        if x % 2 == 1\n            sum += x\n        end\n    end\n\
    \    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given\
    \ a list of numbers, return the sum of squares of the numbers\n    in the list\
    \ that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0\n        return 0\n    end\n    \n    sum = 0\n    for x in lst\n     \
    \   if x % 2 == 1\n            sum += x\n        end\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns the product of\
    \ the numbers in the list that are odd.", "    sum = 0\n    for x in lst\n   \
    \     if x > 0\n            sum += x\n        else\n            sum -= x\n   \
    \     end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the product of a list of numbers. \nThe product of any\
    \ list of numbers is equal to the product of its elements.\nThe product of empty\
    \ list is 1.\nThe product of one number is 1.\nThe product of multiple numbers\
    \ is their product.\nThe product of negative numbers is 0.\nThe product of numbers\
    \ with decimals is their product.\nThe product of numbers with decimals is their\
    \ product.\nThe product of numbers with decimals is their product.\nThe product\
    \ of numbers with decimals is their product.\nThe product of numbers with decimals\
    \ is their product.\nThe product of numbers with decimals is their product.\n\
    The product of numbers with decimals is their product.\nThe product of numbers\
    \ with decimals is their product.\nThe product of numbers with decimals is their\
    \ product.\nThe product of numbers with decimals is their product.\nThe product\
    \ of numbers with decimals is their product.\nThe product of numbers with decimals\
    \ is their product.\nThe product of numbers with decimals is their product.\n\
    The product of numbers with decimals is their product.\nThe product of numbers\
    \ with decimals is their product.\nThe product of numbers with decimals is their\
    \ product.\nThe product of numbers with decimals is their product.\nThe product\
    \ of numbers with decimals is their product.\nThe product of numbers with decimals\
    \ is their product.\nThe product of numbers with decimals is their product.\n\
    The product of numbers with decimals is their product.\nThe product of numbers\
    \ with decimals is their product.\nThe product of numbers with decimals is their\
    \ product.\nThe product of numbers with decimals is their product.\nThe product\
    \ of numbers with decimals is their product.\nThe product of numbers with decimals\
    \ is their product.\nThe product of numbers with decimals is their product.\n\
    The product of numbers with decimals is their product.\nThe product of numbers\
    \ with decimals is their product.\nThe product of numbers with decimals is their\
    \ product.\nThe product of numbers with decimals is their product.\nThe product\
    \ of numbers with decimals is their product.\nThe product of numbers with decimals\
    \ is their product.\nThe product of numbers with decimals is their product.\n\
    The product of numbers with decimals is their product.\nThe product of numbers\
    \ with decimals is their product.\nThe product of numbers with decimals is their\
    \ product.\nThe product of numbers with decimals is their product.\nThe product\
    \ of numbers with decimals is their product.\nThe product of numbers with decimals\
    \ is their product.\nThe product of numbers with decimals is their product.\n\
    The product of numbers with decimal", "    if length(lst) == 0 \n        return\
    \ 0 \n    else \n        sum = 0\n        for n in lst \n            if n >= 0\
    \ \n                sum += n*n \n            else \n                sum += n*n\
    \ \n                sum -= n \n            end \n        end \n        return\
    \ sum \n    end \nend \n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given\
    \ a list of numbers, return the sum of squares of the numbers\n    in the list\
    \ that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    \n    if\
    \ length(lst) == 0\n        return 0\n    end\n    \n    sum = 0\n    for i in\
    \ lst\n        if isodd(i)\n            sum += i\n        end\n    end\n    \n\
    \    return sum\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes\
    \ a vector of numbers and returns the product of the numbers in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        sum = 0\n        for i in lst\n\
    \            if isodd(i) \n                sum += i*i \n            end\n    \
    \    end\n        return sum\n    end\nend\n</cell>\n<text>\nExercise 3: Write\
    \ a function that takes a list of numbers and returns the product of the numbers\
    \ in the list that are odd. Ignore numbers that are negative or not integers.",
  "    if length(lst) == 0\n        return 0\n    end\n    \n    sum = 0\n    for\
    \ i in lst\n        if isodd(i)\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a\
    \ list of numbers, return the sum of squares of the numbers\n    in the list that\
    \ are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        sum = 0\n        for i in lst \n\
    \            if isodd(i) \n                sum += i * i \n            else \n\
    \                sum += i \n        return sum \n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the product of the numbers in the list\
    \ that are odd. Ignore numbers that are negative or not integers.", "    if length(lst)\
    \ == 0\n        return 0\n    end\n    \n    sum = 0\n    for n in lst\n     \
    \   if n >= 0\n            sum += n\n        else\n            sum += -n \n  \
    \      end\n    end\n    \n    return sum * sum\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector and returns the number of elements that\
    \ are not equal to zero. \nFor example the vector [1,2,3] should return 2 because\
    \ 1 and 3 are not equal to zero.", "    sum = 0\n    for x in lst\n        if\
    \ x > 0\n            sum += x * x\n        else\n            sum += x\n      \
    \  end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the product of the numbers in the list that are odd.", "    if\
    \ length(lst) == 0\n        return 0\n    end\n    \n    sum = 0\n    for i in\
    \ lst\n        if isinteger(i)\n            sum += i\n        else\n         \
    \   sum += i * i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    \n\
    \    if length(lst) == 0\n        return 0\n    end\n    \n    sum = 0\n    for\
    \ i in lst\n        if isodd(i)\n            sum += i\n        end\n    end\n\
    \    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert double_the_difference([1,\
    \ 3, 2, 0]) == 10\n@assert double_the_difference([-1, -2, 0]) == 0\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([0]) == 0\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the product of the numbers in the list that\
    \ are odd. Ignore numbers that are negative or not integers.", "    \n    sum\
    \ = 0\n    for i in lst\n        if isinteger(i)\n            sum += i\n     \
    \   else\n            sum += i*i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the squares of the numbers in the vector that are odd. Ignore\
    \ numbers that are negative or not integers.", "    if length(lst) == 0 \n   \
    \     return 0 \n    else \n        sum = 0\n        for i in lst\n          \
    \  if isodd(i) \n                sum += i\n            else \n               \
    \ sum -= i\n        return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    \n\
    \    if length(lst) == 0\n        return 0\n    end\n    \n    sum = 0\n    for\
    \ i in lst\n        if isodd(i)\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a\
    \ list of numbers, return the sum of squares of the numbers\n    in the list that\
    \ are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    sum = 0\n\
    \    for x in lst\n        if x > 0\n            sum += x^2\n        else\n  \
    \          sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return a new list\
    \ containing only the\n    numbers that are odd numbers. \n    \n    odd_numbers([1,\
    \ 2, 3, 4]) == [1, 3]\n    odd_numbers([1, 2, -3, 4]) == [1, -3]\n    odd_numbers([])\
    \ == []\n    odd_numbers([-2, -3]) == [-2, -3]\n    odd_numbers([1, -3]) == [1,\
    \ -3]\n    odd_numbers([1, 2, -3]) == [1, -3]\n    odd_numbers([1, 3, -4]) ==\
    \ [1, 3]\n    odd_numbers([1, 2, 3, 4]) == [1, 3]\n    odd_numbers([-2, -3]) ==\
    \ [-2, -3]\n    odd_numbers([1, -3]) == [1, -3]\n    odd_numbers([1, 2, -3]) ==\
    \ [1, -3]\n    odd_numbers([1, 3, -4]) == [1, 3]\n    odd_numbers([1, 2, 3, 4])\
    \ == [1, 3]\n    odd_numbers([-2, -3]) == [-2, -3]\n    odd_numbers([1, -3]) ==\
    \ [1, -3]\n    odd_numbers([1, 2, -3]) == [1, -3]\n    odd_numbers([1, 3, -4])\
    \ == [1, 3]\n    odd_numbers([1, 2, 3, 4]) == [1, 3]\n    odd_numbers([-2, -3])\
    \ == [-2, -3]\n    odd_numbers([1, -3]) == [1, -3]\n    odd_numbers([1, 2, -3])\
    \ == [1, -3]\n    odd_numbers([1, 3, -4]) == [1, 3]\n    odd_numbers([1, 2, 3,\
    \ 4]) == [1, 3]\n    odd_numbers([-2, -3]) == [-2, -3]\n    odd_numbers([1, -3])\
    \ == [1, -3]\n    odd_numbers([1, 2, -3]) == [1, -3]\n    odd_numbers([1, 3, -4])\
    \ == [1, 3]\n    odd_numbers([1, 2, 3, 4]) == [1, 3]\n    odd_numbers([-2, -3])\
    \ == [-2, -3]\n    odd_numbers([1, -3]) == [1, -3]\n    odd_numbers([1, 2, -3])\
    \ == [1, -3]\n    odd_numbers([1, 3, -4]) == [1, 3]\n    odd_numbers([1, 2, 3,\
    \ 4]) == [1, 3]\n    odd_numbers([-2, -3]) == [-2, -3]\n    odd_numbers([1, -3])\
    \ == [1, ", "    if length(lst) == 0\n        return 0\n    end\n    \n    sum\
    \ = 0\n    for i in lst\n        if isa(i::Int64)\n            sum += i\n    \
    \    elseif isa(i::Float64)\n            sum += i*i\n        else\n          \
    \  println(\"ERROR: input must be a list of numbers\")\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a\
    \ list of numbers, return the sum of squares of the numbers\n    in the list that\
    \ are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0\n        return 0\n    end\n    \n    sum = 0\n    for i in lst\n     \
    \   if isinteger(i)\n            sum += i\n        else\n            sum += i\
    \ * i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n        for\
    \ i in lst\n            if isinteger(i)\n                sum += i\n          \
    \  else \n                sum += i * i\n        return sum\n    end\nend\n</cell>\n\
    <code language=julia-0.6>\n\"\"\"\n    Given a list of numbers, return a new list\
    \ that is the same length and\n    contains only the numbers that are even. \n\
    \    \n    even_numbers([1, 2, 3, 4]) == [1, 3]\n    even_numbers([1, 2, -3, 4])\
    \ == [1, -3]\n    even_numbers([-2, 1, 2, -3, 4]) == [-2, 1]\n    even_numbers([-2,\
    \ -1, 2, -3, 4]) == [-2, -1]\n    even_numbers([-2, -1, -2, -3, 4]) == [-2, -1]\n\
    \    even_numbers([-2, -1, -2, -3, 4])\n    even_numbers([-2, -1, -2, -3, 4, 5])\
    \ == [-2, -1, -2, -3, 4]\n    even_numbers([-2, -1, -2, -3, 4, 5, 6]) == [-2,\
    \ -1, -2, -3, 4]\n    even_numbers([-2, -1, -2, -3, 4, 5, 6, 7]) == [-2, -1, -2,\
    \ -3, 4]\n    even_numbers([-2, -1, -2, -3, 4, 5, 6, 7, 8]) == [-2, -1, -2, -3,\
    \ 4]\n    even_numbers([-2, -1, -2, -3, 4, 5, 6, 7, 8, 9]) == [-2, -1, -2, -3,\
    \ 4]\n    even_numbers([-2, -1, -2, -3, 4, 5, 6, 7, 8, 9, 10]) == [-2, -1, -2,\
    \ -3, 4]\n    even_numbers([-2, -1, -2, -3, 4, 5, 6, 7, 8, 9, 10, 11])\n    even_numbers([-2,\
    \ -1, -2, -3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n    even_numbers([-2, -1, -2, -3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n    even_numbers([-2, -1, -2, -3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14])\n    even_numbers([-2, -1, -2, -3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15])\n    even_numbers([-2, -1, -2, -3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n    even_numbers([-2, -1, -2, -3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n    even_numbers([-2, -1, -2,\
    \ -3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n    even_numbers([-2,\
    \ -1, -2, -3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n   \
    \ even_numbers([-2, -1, -2, -3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19, 20])\n    even_numbers([-2, -1, -2, ", "    \n    if length(lst)\
    \ == 0\n        return 0\n    end\n    \n    sum = 0\n    for i in lst\n     \
    \   if isodd(i)\n            sum += i\n        end\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.0>\n@assert double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n@assert double_the_difference([-1, -2, 0])\
    \ == 0\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([0])\
    \ == 0\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum of\
    \ the numbers in the list that are even.", "    if length(lst) == 0 \n       \
    \ return 0 \n    else \n        sum = 0\n        for i in lst\n            if\
    \ i > 0\n                sum += i * i\n            else\n                sum +=\
    \ i\n        end\n        return sum\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of numbers and returns the sum of the\
    \ squares of the numbers in the vector that are odd. Ignore numbers that are negative\
    \ or not integers.", "    sum = 0\n    for x in lst\n        if x > 0\n      \
    \      sum += x * x\n        else\n            sum += x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a\
    \ list of numbers, return the sum of squares of the numbers\n    in the list that\
    \ are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    \n    if\
    \ length(lst) == 0\n        return 0\n    end\n    \n    sum = 0\n    for x in\
    \ lst\n        if x % 2 == 1\n            sum += x\n        end\n    end\n   \
    \ \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given\
    \ a list of numbers, return the sum of squares of the numbers\n    in the list\
    \ that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0\n        return 0\n    end\n    \n    sum = 0\n    for x in lst\n     \
    \   if x % 2 == 1\n            sum += x\n        end\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers,\
    \ return a new list containing only the numbers\n    that are evenly divisible\
    \ by 3 in the original list. \n    \n    even_divisible_by_3([4, 6, 9, 12, 15])\
    \ == [4, 6, 9]\n    even_divisible_by_3([4, 6, 9, 12, 15]) == [4, 6, 9, 12, 15]\n\
    \    even_divisible_by_3([4, 6, 9, 12, 15]) == [4, 6, 9, 12, 15]\n    even_divisible_by_3([])\
    \ == []\n    even_divisible_by_3([4, 6, 9, 12, 15]) == [4, 6, 9, 12, 15]\n   \
    \ even_divisible_by_3([4, 6, 9, 12, 15]) == [4, 6, 9, 12, 15]\n    even_divisible_by_3([4,\
    \ 6, 9, 12, 15]) == [4, 6, 9, 12, 15]\n    even_divisible_by_3([4, 6, 9, 12, 15])\
    \ == [4, 6, 9, 12, 15]\n    even_divisible_by_3([4, 6, 9, 12, 15]) == [4, 6, 9,\
    \ 12, 15]\n    even_divisible_by_3([4, 6, 9, 12, 15]) == [4, 6, 9, 12, 15]\n \
    \   even_divisible_by_3([4, 6, 9, 12, 15]) == [4, 6, 9, 12, 15]\n    even_divisible_by_3([4,\
    \ 6, 9, 12, 15]) == [4, 6, 9, 12, 15]\n    even_divisible_by_3([4, 6, 9, 12, 15])\
    \ == [4, 6, 9, 12, 15]\n    even_divisible_by_3([4, 6, 9, 12, 15]) == [4, 6, 9,\
    \ 12, 15]\n    even_divisible_by_3([4, 6, 9, 12, 15]) == [4, 6, 9, 12, 15]\n \
    \   even_divisible_by_3([4, 6, 9, 12, 15]) == [4, 6, 9, 12, 15]\n    even_divisible_by_3([4,\
    \ 6, 9, 12, 15]) == [4, 6, 9, 12, 15]\n    even_divisible_by_3([4, 6, 9, 12, 15])\
    \ == [4, 6, 9, 12, 15]\n    even_divisible_by_3([4, 6, 9, 12, 15]) == [4, 6, 9,\
    \ 12, 15]\n    even_divisible_by_3([4, 6, 9, 12, ", "    \n    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        \n        odd_sum = 0 \n      \
    \  for n in lst \n            if n >= 0 \n                odd_sum += n \n    \
    \        end\n        end\n        \n        return odd_sum * odd_sum\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers,\
    \ return the sum of squares of the numbers\n    in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0\n        return 0\n    end\n    \n    sum = 0\n    for x in lst\n     \
    \   if x % 2 == 1\n            sum += x\n        end\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers,\
    \ return the sum of squares of the numbers\n    in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        sum = 0\n        for i in lst \n\
    \            if typeof(i) == Int64 \n                sum += i \n            else\
    \ \n                sum += i*i \n        return sum\n    end\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that takes a list of numbers and returns the product\
    \ of all the numbers in the list that are odd. Ignore numbers that are negative\
    \ or not integers.", "    if length(lst) == 0 \n        return 0 \n    else \n\
    \        sum = 0\n        for i in lst\n            if isinteger(i) \n       \
    \         sum += i\n            else \n                sum += i*i\n        return\
    \ sum\n    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function that returns\
    \ the product of the numbers in the list that are even.", "    if length(lst)\
    \ == 0\n        return 0\n    else\n        sum = 0\n        for i in lst\n  \
    \          if isodd(i)\n                sum += i\n            else\n         \
    \       sum -= i\n        end\n        return sum\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) ==\
    \ 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"", "    if length(lst) == 0\n        return 0\n\
    \    end\n    \n    sum = 0\n    for n in lst\n        if n >= 0\n           \
    \ sum += n\n        else\n            sum -= n\n        end\n    end\n    \n \
    \   return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in the\
    \ vector that are odd. Ignore numbers that are negative or not integers.", " \
    \   if length(lst) == 0\n        return 0\n    else\n        sum = 0\n       \
    \ for i in lst\n            if isodd(i)\n                sum += i\n          \
    \  else\n                sum -= i\n        end\n        return sum\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers,\
    \ return the sum of squares of the numbers\n    in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    sum = 0\n\
    \    for x in lst\n        if x % 2 == 1\n            sum += x\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\ndouble_the_difference([-1,\
    \ -2, 0])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the product\
    \ of the numbers in a given list.", "    if length(lst) == 0\n        return 0\n\
    \    else\n        sum = 0\n        for i in lst\n            if isodd(i)\n  \
    \              sum += i\n            end\n        end\n        return sum\n  \
    \  end\nend\n</cell>\n<text>\nExercise 3: Write a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in the vector that\
    \ are odd.", "    if length(lst) == 0\n        return 0\n    else\n        sum\
    \ = 0\n        for n in lst\n            if n >= 0\n                sum += n *\
    \ n\n            else\n                sum += n\n        end\n        return sum\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ sum of the squares of the numbers in the list that are odd.", "    if length(lst)\
    \ == 0\n        return 0\n    else\n        sum = 0\n        for n in lst\n  \
    \          if n > 0\n                sum += n * n\n            else\n        \
    \        sum += n\n        end\n        return sum\n    end\nend\n</cell>\n<code\
    \ language=julia-1.0>\n\"\"\"\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) ==\
    \ 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"", "    if length(lst) == 0\n        return 0\n\
    \    end\n    \n    sum = 0\n    for x in lst\n        if x % 2 != 0\n       \
    \     sum += x\n        end\n    end\n    \n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the product of the numbers in the list\
    \ that are odd. Ignore numbers that are negative or not integers.", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        sum = 0\n        for n in lst \n\
    \            if n >= 0 \n                sum += n*n \n            else \n    \
    \            sum -= n*n \n        return sum \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n        for\
    \ i in lst\n            if isodd(i) \n                sum += i * i \n        \
    \    else \n                sum += i \n        return sum\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return the sum\
    \ of squares of the numbers\n    in the list that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0])\
    \ == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"", "    \n    if length(lst) == 0\n        return\
    \ 0\n    end\n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n     \
    \       sum += i\n        end\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) ==\
    \ 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"", "    \n    if length(lst) == 0 \n        return\
    \ 0 \n    \n    sum = 0\n    for i in lst\n        if i > 0\n            sum +=\
    \ i * i\n        else\n            sum += i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers,\
    \ return the sum of squares of the numbers\n    in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0\n        return 0\n    else\n        sum = 0\n        for i in lst\n  \
    \          if isodd(i)\n                sum += i\n            else\n         \
    \       sum -= i\n        end\n        return sum\n    end\nend\n</cell>\n<code\
    \ language=julia-1.0>\n\"\"\"\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) ==\
    \ 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"", "    sum = 0\n    for x in lst\n        if\
    \ x % 2 == 1\n            sum += x\n        end\n    end\n    return sum\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the squares\
    \ of the numbers in the list that are odd.", "    sum = 0\n    for x in lst\n\
    \        if x > 0\n            sum += x\n        else\n            sum -= x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the product of the numbers in the\
    \ list\n    that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0 \n        return 0 \n    \n    sum = 0\n    for x in lst \n\
    \        if x % 2 != 0 \n            sum += x \n        else \n            sum\
    \ -= x \n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\
    \"\n    Given a list of numbers, return the sum of squares of the numbers\n  \
    \  in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    \n\
    \    sum = 0\n    for i in lst\n        if isodd(i)\n            sum += i\n  \
    \      end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the product of the numbers in the list that are odd. Ignore\
    \ numbers that are negative or not integers.", "    sum = 0\n    for x in lst\n\
    \        if x % 2 != 0\n            sum += x\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>", "    sum = 0\n    for x in lst\n\
    \        if x > 0\n            sum += x * x\n        else\n            sum +=\
    \ x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the product of the numbers in the list that are\
    \ odd. Ignore numbers that are negative or not integers.", "    sum = 0\n    for\
    \ i in lst\n        if isodd(i)\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\ndouble_the_difference([-1,\
    \ -2, 0])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list of\
    \ numbers and returns the product of the numbers in the list that are odd. Ignore\
    \ numbers that are negative or not integers.", "    if length(lst) == 0\n    \
    \    return 0\n    else\n        sum = 0\n        for n in lst\n            if\
    \ n > 0\n                sum += n * n\n            else\n                sum +=\
    \ n\n        end\n        return sum\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    sum\
    \ = 0\n    for x in lst\n        if x > 0\n            sum += x * x\n        else\n\
    \            sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return a new list\
    \ containing only the numbers \n    that are evenly divisible by 7. \n    \n \
    \   even_divisible([7, 3, 5]) == [7, 3, 5]\n    even_divisible([7, 3, 5]) == [7,\
    \ 3, 5]\n    even_divisible([7, 3, 5]) == [7, 3, 5]\n    even_divisible([7, 3,\
    \ 5]) == [7, 3, 5]\n    even_divisible([7, 3, 5]) == [7, 3, 5]\n    even_divisible([7,\
    \ 3, 5]) == [7, 3, 5]\n    even_divisible([7, 3, 5]) == [7, 3, 5]\n    even_divisible([7,\
    \ 3, 5]) == [7, 3, 5]\n    even_divisible([7, 3, 5]) == [7, 3, 5]\n    even_divisible([7,\
    \ 3, 5]) == [7, 3, 5]\n    even_divisible([7, 3, 5]) == [7, 3, 5]\n    even_divisible([7,\
    \ 3, 5]) == [7, 3, 5]\n    even_divisible([7, 3, 5]) == [7, 3, 5]\n    even_divisible([7,\
    \ 3, 5]) == [7, 3, 5]\n    even_divisible([7, 3, 5]) == [7, 3, 5]\n    even_divisible([7,\
    \ 3, 5]) == [7, 3, 5]\n    even_divisible([7, 3, 5]) == [7, 3, 5]\n    even_divisible([7,\
    \ 3, 5]) == [7, 3, 5]\n    even_divisible([7, 3, 5]) == [7, 3, 5]\n    even_divisible([7,\
    \ 3, 5]) == [7, 3, 5]\n    even_divisible([7, 3, 5]) == [7, 3, 5]\n    even_divisible([7,\
    \ 3, 5]) == [7, 3, 5]\n    even_divisible([7, 3, 5]) == [7, 3, 5]\n    even_divisible([7,\
    \ 3, 5]) == [7, 3, 5]\n    even_divisible([7, 3, 5]) == [7, 3, 5]\n    even_divisible([7,\
    \ 3, 5]) == [7, 3, 5]\n    even_divisible([7, 3, 5]) == [7, 3, 5]\n    even_divisible([7,\
    \ 3, 5]) == [7, 3, 5]\n    even_divisible([7, 3, 5]) == [7, 3, 5]\n    even_divisible([7,\
    \ 3, 5]) == ", "    if length(lst) == 0 \n        return 0 \n    else \n     \
    \   sum = 0\n        for i in lst\n            if isodd(i) \n                sum\
    \ += i * i \n            else \n                sum += i \n        return sum\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Given a list of\
    \ numbers, return the sum of squares of the numbers\n    in the list that are\
    \ odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        odd_sum = 0 \n        for i in\
    \ lst \n            if i .% 2 == 1 \n                odd_sum = odd_sum + i \n\
    \            end \n        end \n        return odd_sum * odd_sum \n    end \n\
    end \n</cell>\n<text>\nProblem 7\nWrite a function that returns the product of\
    \ the numbers in a given list.", "    if length(lst) == 0 \n        return 0 \n\
    \    else \n        sum = 0\n        for n in lst\n            if n >= 0\n   \
    \             sum += n * n\n            else\n                sum -= n * n\n \
    \       end\n        return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n        for\
    \ i in lst\n            if isodd(i) \n                sum += i * i \n        \
    \    end\n        end\n        return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    sum\
    \ = 0\n    for x in lst\n        if x > 0\n            sum += x\n        else\n\
    \            sum -= x\n    end\n    return sum\nend", "    \n    if length(lst)\
    \ == 0 \n        return 0 \n    \n    sum = 0\n    for i in lst \n        if i\
    \ %% 2 == 1 \n            sum += i \n        end \n    end \n    \n    return\
    \ sum\nend \n</cell>\n<text>\nExercise 3\nWrite a function that takes a list of\
    \ numbers and returns the product of the numbers in the list that are odd. Ignore\
    \ numbers that are negative or not integers.", "    sum = 0\n    for x in lst\n\
    \        if x % 2 == 1\n            sum += x\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.3>\ndouble_the_difference([-1, -2,\
    \ 0])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the product\
    \ of the numbers in the list that are odd. Ignore numbers that are negative or\
    \ not integers.", "    if length(lst) == 0\n        return 0\n    end\n    \n\
    \    sum = 0\n    for i in lst\n        if isodd(i)\n            sum += i\n  \
    \      end\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0\n        return 0\n    else\n        sum = 0\n        for i\
    \ in lst\n            if isinteger(i)\n                sum += i\n            else\n\
    \                sum += i*i\n        end\n        return sum\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return the sum\
    \ of squares of the numbers\n    in the list that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0])\
    \ == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"", "    sum = 0\n    for x in lst\n        if\
    \ x > 0\n            sum += x * x\n        else\n            sum += x\n      \
    \  end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\
    \"\n    Given a list of numbers, return the sum of squares of the numbers\n  \
    \  in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0\n        return 0\n    else\n        sum = 0\n        for i\
    \ in lst\n            if i > 0\n                sum += i * i\n            else\n\
    \                sum += i\n        end\n        return sum\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\n\"\"\"\n    Given a list of numbers, return the sum\
    \ of squares of the numbers\n    in the list that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0])\
    \ == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"", "    if length(lst) == 0 \n        return\
    \ 0 \n    else \n        sum = 0\n        for i in lst\n            if isodd(i)\
    \ \n                sum += i\n            end\n        end\n        return sum\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of\
    \ numbers, return the sum of squares of the numbers\n    in the list that are\
    \ odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0\n        return 0\n    else\n        sum = 0\n        for i in lst\n  \
    \          if i > 0\n                sum += i\n            else\n            \
    \    sum -= i\n        end\n        return sum\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    Given a list of numbers, return a new list containing only the\n \
    \   even numbers in the original list. \n    \n    even_numbers([1, 2, 3, 4])\
    \ == [2, 4]\n    even_numbers([1, -2, 3]) == [-2, 3]\n    even_numbers([]) ==\
    \ []\n    \n    If the input list is empty, return an empty list.\n    \"\"\"",
  "    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n        for\
    \ i in lst\n            if i > 0\n                sum += i * i\n            else\n\
    \                sum += i\n        end\n        return sum\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the product of the numbers in\
    \ the list that are odd. Ignore numbers that are negative or not integers.", " \
    \   if length(lst) == 0\n        return 0\n    else\n        sum = 0\n       \
    \ for i in lst\n            if i > 0\n                sum += i^2\n           \
    \ else\n                sum += i\n        end\n        return sum\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of numbers and\
    \ returns the product of the numbers in the list. Ignore numbers that are negative\
    \ or not integers.", "    \n    if length(lst) == 0\n        return 0\n    end\n\
    \    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum +=\
    \ i\n        end\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n        for\
    \ i in lst\n            if i > 0\n                sum += i * i\n            else\n\
    \                sum += i\n        end\n        return sum\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return the sum\
    \ of squares of the numbers\n    in the list that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0])\
    \ == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"", "    \n    if length(lst) == 0\n        return\
    \ 0\n    end\n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n     \
    \       sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert double_the_difference([-1, -2, 0]) == 0\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([0]) == 0\n@assert double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n@assert double_the_difference([9, -2]) == 81\n\
    @assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81", "    \n    if length(lst)\
    \ == 0 \n        return 0 \n    \n    sum = 0 \n    for i in lst \n        if\
    \ isodd(i) \n            sum += i \n        else \n            sum += i*i \n \
    \   \n    return sum\nend", "    sum = 0\n    for x in lst\n        if x > 0\n\
    \            sum += x\n        else\n            sum += 0\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Given a\
    \ list of numbers, return the sum of squares of the numbers\n    in the list that\
    \ are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0\n        return 0\n    end\n    \n    sum = 0\n    for i in lst\n     \
    \   if isodd(i)\n            sum += i\n        end\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers,\
    \ return the sum of squares of the numbers\n    in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        sum = 0\n        for i in lst\n\
    \            if isodd(i) \n                sum += i\n            else\n      \
    \          sum -= i\n        end\n        return sum\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\n\"\"\"\n    Given a list of numbers, return the sum\
    \ of squares of the numbers\n    in the list that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0])\
    \ == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"", "    if length(lst) == 0\n        return 0\n\
    \    else\n        sum = 0\n        for n in lst\n            if n > 0\n     \
    \           sum += n * n\n            else\n                sum += n\n       \
    \ end\n        return sum\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the sum of the numbers in the list that are even.\nIf\
    \ the input list is empty, return 0.\nIf the input list contains only even numbers,\
    \ return that number.\nIf the input list contains both even and odd numbers, return\
    \ the sum of those numbers.\nIf the input list contains both odd and even numbers,\
    \ return the sum of those numbers.\nIf there are multiple even numbers in the\
    \ list, return the sum of the even numbers.\nIf there are multiple odd numbers\
    \ in the list, return the sum of the odd numbers.\nIf there are multiple even\
    \ and odd numbers in the list, return the sum of the even numbers.\nIf there are\
    \ multiple even numbers and multiple odd numbers in the list, return the sum of\
    \ the odd numbers.\nIf there are multiple even numbers and multiple odd numbers\
    \ in the list, return the sum of the even numbers.\nIf there are multiple even\
    \ numbers and multiple odd numbers in the list, return the sum of the odd numbers.\n\
    If there are multiple even numbers and multiple odd numbers in the list, return\
    \ the sum of the even numbers.\nIf there are multiple even numbers and multiple\
    \ odd numbers in the list, return the sum of the odd numbers.\nIf there are multiple\
    \ even numbers and multiple odd numbers in the list, return the sum of the even\
    \ numbers.\nIf there are multiple even numbers and multiple odd numbers in the\
    \ list, return the sum of the odd numbers.\nIf there are multiple even numbers\
    \ and multiple odd numbers in the list, return the sum of the even numbers.\n\
    If there are multiple even numbers and multiple odd numbers in the list, return\
    \ the sum of the odd numbers.\nIf there are multiple even numbers and multiple\
    \ odd numbers in the list, return the sum of the even numbers.\nIf there are multiple\
    \ even numbers and multiple odd numbers in the list, return the sum of the odd\
    \ numbers.\nIf there are multiple even numbers and multiple odd numbers in the\
    \ list, return the sum of the even numbers.\nIf there are multiple even numbers\
    \ and multiple odd numbers in the list, return the sum of the odd numbers.\nIf\
    \ there are multiple even numbers and multiple odd numbers in the list, return\
    \ the sum of the even numbers.\nIf there are multiple even numbers and multiple\
    \ odd numbers in the list, return the sum of the odd numbers.\nIf there are multiple\
    \ even numbers and multiple odd numbers in the list, return the sum of the even\
    \ numbers.\nIf there are multiple even numbers and multiple odd numbers in the\
    \ list, return the sum of the odd numbers.\nIf there are multiple even numbers\
    \ and multiple odd numbers in the list, return the sum of the even numbers.\n\
    If there are multiple even numbers and multiple odd numbers in the list, return\
    \ the sum of the odd numbers.\nIf there are multiple even numbers and multiple\
    \ odd numbers in the list, return the sum of the even numbers.\nIf there are multiple\
    \ even numbers and multiple odd numbers in the list, return the sum of the odd\
    \ numbers.\n", "    if length(lst) == 0 \n        return 0 \n    else \n     \
    \   sum = 0\n        for i in lst \n            if isodd(i) \n               \
    \ sum += i * i \n            else \n                sum += i \n        return\
    \ sum \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of the squares of the numbers in the list that are odd. Ignore numbers\
    \ that are negative or not integers.", "    sum = 0\n    for x in lst\n      \
    \  if x > 0\n            sum += x\n        else\n            sum -= x\n      \
    \  end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\
    \"\n    Given a list of numbers, return the product of the numbers\n    in the\
    \ list that are odd. Ignore numbers that are negative or not integers.\n    \n\
    \    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    \n\
    \    if length(lst) == 0\n        return 0\n    end\n    \n    sum = 0\n    for\
    \ i in lst\n        if isinteger(i)\n            sum += i\n        else\n    \
    \        sum += i * i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a list of numbers and returns the product\
    \ of the numbers in the list that are odd. Ignore numbers that are negative or\
    \ not integers.", "    \n    if length(lst) == 0\n        return 0\n    end\n\
    \    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum +=\
    \ x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @time double_the_difference([1,3,2,0])\n</cell>\n<code language=julia-1.5>\n@time\
    \ double_the_difference([-1,-2,0])\n</cell>\n<code language=julia-1.5>\n@time\
    \ double_the_difference([9,-2])\n</cell>\n<code language=julia-1.5>\n@time double_the_difference([0])\n\
    </cell>\n<text>\nExercise: Write a function that returns the sum of the squares\
    \ of the numbers in the list that are odd. Ignore numbers that are negative or\
    \ not integers.", "    sum = 0\n    for i in lst\n        if isa(i, Int)\n   \
    \         sum += i\n        else\n            sum += i*i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a list of numbers and returns the product of the numbers in the list that are\
    \ odd. Ignore numbers that are negative or not integers.", "    if length(lst)\
    \ == 0\n        return 0\n    end\n    \n    sum = 0\n    for i in lst\n     \
    \   if isinteger(i)\n            sum += i\n        else\n            sum += i\
    \ * i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n        for\
    \ i in lst \n            if isodd(i) \n                sum += i * i \n       \
    \     else \n                sum += i \n        return sum \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return the sum\
    \ of squares of the numbers\n    in the list that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0])\
    \ == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"", "    if length(lst) == 0 \n        return\
    \ 0 \n    else \n        sum = 0\n        for i in lst\n            if isodd(i)\
    \ \n                sum += i\n            end\n        end\n        return sum\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of\
    \ numbers, return the sum of squares of the numbers\n    in the list that are\
    \ odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    sum = 0\n\
    \    for x in lst\n        if x % 2 == 1\n            sum += x\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the squares of the numbers in the list that are odd. Ignore\
    \ numbers that are negative or not integers.", "    sum = 0\n    for i in lst\n\
    \        if isodd(i)\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the product of\
    \ the numbers in the list that are odd. Ignore numbers that are negative or not\
    \ integers.", "    \n    if length(lst) == 0\n        return 0\n    end\n    \n\
    \    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    \n\
    \    if length(lst) == 0\n        return 0\n    end\n    \n    sum = 0\n    for\
    \ i in lst\n        if isodd(i)\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert double_the_difference([1,\
    \ 3, 2, 0]) == 10\n@assert double_the_difference([-1, -2, 0]) == 0\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([0]) == 0\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the product of the numbers in the list that\
    \ are odd. Ignore numbers that are negative or not integers.", "    \n    if length(lst)\
    \ == 0\n        return 0\n    end\n    \n    sum = 0\n    for x in lst\n     \
    \   if x % 2 != 0\n            sum += x\n        end\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns the product of\
    \ all the numbers in a list. \nIf the list is empty, return 0.\nIf the list has\
    \ only one element, return that element.\nIf the list has more than one element,\
    \ return the product of the elements in the list.", "    sum = 0\n    for x in\
    \ lst\n        if x > 0\n            sum += x^2\n        else\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([-1, -2, 0])\n</cell>\n<code language=julia-1.5>\ndouble_the_difference([9,\
    \ -2])\n</cell>\n<code language=julia-1.5>\ndouble_the_difference([0])\n</cell>\n\
    <text>\nExercise: Write a function that returns the sum of the squares of the\
    \ numbers in the list that are odd. Ignore numbers that are negative or not integers.",
  "    \n    sum = 0\n    for i in lst\n        if isinteger(i)\n            sum +=\
    \ i\n        else\n            sum += i*i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the product of\
    \ the numbers in a list. \nIf the list is empty, return 1.\nIf the list has one\
    \ number, return that number.\nIf the list has two numbers, return the product\
    \ of the numbers.\nIf the list has three numbers, return the product of the numbers.\
    \ \nIf the list has four numbers, return the product of the numbers. \nIf the\
    \ list has five numbers, return the product of the numbers. \nIf the list has\
    \ six numbers, return the product of the numbers. \nIf the list has seven numbers,\
    \ return the product of the numbers. \nIf the list has eight numbers, return the\
    \ product of the numbers. \nIf the list has nine numbers, return the product of\
    \ the numbers. \nIf the list has ten numbers, return the product of the numbers.\
    \ \nIf the list has eleven numbers, return the product of the numbers. \nIf the\
    \ list has twelve numbers, return the product of the numbers. \nIf the list has\
    \ thirteen numbers, return the product of the numbers. \nIf the list has fourteen\
    \ numbers, return the product of the numbers. \nIf the list has fifteen numbers,\
    \ return the product of the numbers. \nIf the list has sixteen numbers, return\
    \ the product of the numbers. \nIf the list has seventeen numbers, return the\
    \ product of the numbers. \nIf the list has eighteen numbers, return the product\
    \ of the numbers. \nIf the list has nineteen numbers, return the product of the\
    \ numbers. \nIf the list has twenty numbers, return the product of the numbers.\
    \ \nIf the list has thirty numbers, return the product of the numbers. \nIf the\
    \ list has fourty numbers, return the product of the numbers. \nIf the list has\
    \ fifty numbers, return the product of the numbers. \nIf the list has sixty numbers,\
    \ return the product of the numbers. \nIf the list has seventy numbers, return\
    \ the product of the numbers. \nIf the list has eighty numbers, return the product\
    \ of the numbers. \nIf the list has ninety numbers, return the product of the\
    \ numbers. \nIf the list has hundred numbers, return the product of the numbers.\
    \ \nIf the list has thousand numbers, return the product of the numbers. \nIf\
    \ the list has million numbers, return the product of the numbers. \nIf the list\
    \ has billion numbers, return the product of the numbers. \nIf the list has trillion\
    \ numbers, return the product of the numbers. \nIf the list has quadrillion numbers,\
    \ return the product of the numbers. \nIf the list has quintillion number", " \
    \   if length(lst) == 0\n        return 0\n    else\n        sum = 0\n       \
    \ for i in lst\n            if isodd(i)\n                sum += i\n          \
    \  else\n                sum -= i\n        end\n        return sum\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the product of\
    \ the numbers in the list that are odd. Ignore numbers that are negative or not\
    \ integers.", "    if length(lst) == 0\n        return 0\n    end\n    \n    sum\
    \ = 0\n    for i in lst\n        if isinteger(i)\n            sum += i\n     \
    \   else\n            sum += i * i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert double_the_difference([1, 3, 2, 0])\
    \ == 10\n@assert double_the_difference([-1, -2, 0]) == 0\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([0]) == 0\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the numbers in the list that are\
    \ even.", "    if length(lst) == 0 \n        return 0 \n    else \n        sum\
    \ = 0\n        for i in lst\n            if isodd(i) \n                sum +=\
    \ i * i \n            end\n        end\n        return sum\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return the sum\
    \ of squares of the numbers\n    in the list that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0])\
    \ == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"", "    \n    if length(lst) == 0\n        return\
    \ 0\n    end\n    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n   \
    \         sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) ==\
    \ 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"", "    \n    if length(lst) == 0 \n        return\
    \ 0 \n    \n    sum = 0\n    for i in lst \n        if isodd(i) \n           \
    \ sum += i \n        else \n            sum -= i \n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Given a list of numbers,\
    \ return the sum of squares of the numbers\n    in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    \n    if\
    \ length(lst) == 0\n        return 0\n    end\n    \n    sum = 0\n    for i in\
    \ lst\n        if isodd(i)\n            sum += i\n        end\n    end\n    \n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a\
    \ list of numbers, return the sum of squares of the numbers\n    in the list that\
    \ are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        sum = 0\n        for i in lst \n\
    \            if i .> 0 \n                sum += i * i \n            else \n  \
    \              sum += i \n        return sum\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    \n\
    \    if length(lst) == 0 \n        return 0 \n    \n    sum = 0 \n    for i in\
    \ lst \n        if isodd(i) \n            sum += i \n        else \n         \
    \   sum += i*i \n    return sum \nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a list of numbers and returns the product of all the numbers in the\
    \ list. Ignore numbers that are negative or not integers.", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        sum = 0\n        for i in lst\n\
    \            if isodd(i) \n                sum += i*i \n            else \n  \
    \              sum += 0 \n        return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0\n        return 0\n    else\n        sum = 0\n        for i\
    \ in lst\n            if isodd(i)\n                sum += i\n            else\n\
    \                sum -= i\n        end\n        return sum\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a list of numbers and returns\
    \ the product of the numbers in the list that are odd. Ignore numbers that are\
    \ negative or not integers.", "    if length(lst) == 0\n        return 0\n   \
    \ end\n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum\
    \ += i\n        end\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    sum\
    \ = 0\n    for x in lst\n        if x > 0\n            sum += x*x\n        else\n\
    \            sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) ==\
    \ 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"", "    if length(lst) == 0 \n        return\
    \ 0 \n    else \n        sum = 0\n        for i in lst \n            if i .% 2\
    \ == 1 \n                sum += i \n            end\n        end\n        return\
    \ sum\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list\
    \ of numbers, return the sum of squares of the numbers\n    in the list that are\
    \ odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    \n    if\
    \ length(lst) == 0 \n        return 0 \n    \n    sum = 0\n    for x in lst\n\
    \        if x % 2 == 1 \n            sum += x \n        else \n            sum\
    \ -= x \n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n        for\
    \ i in lst \n            if isodd(i) \n                sum += i*i \n         \
    \   end \n        end \n        return sum\n    end \nend \n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    \n\
    \    if length(lst) == 0\n        return 0\n    end\n    \n    sum = 0\n    for\
    \ i in lst\n        if isodd(i)\n            sum += i\n        end\n    end\n\
    \    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given\
    \ a list of numbers, return the sum of squares of the numbers\n    in the list\
    \ that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    \n    if\
    \ length(lst) == 0\n        return 0\n    end\n    \n    sum = 0\n    for x in\
    \ lst\n        if x % 2 == 1\n            sum += x\n        end\n    end\n   \
    \ \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given\
    \ a list of numbers, return the sum of squares of the numbers\n    in the list\
    \ that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    \n    if\
    \ length(lst) == 0 \n        return 0 \n    \n    sum = 0 \n    for i in lst \n\
    \        if i .% 2 == 1 \n            sum += i \n        end \n    end \n    return\
    \ sum\nend \n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers,\
    \ return the sum of squares of the numbers\n    in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        sum = 0\n        for i in lst\n\
    \            if i > 0\n                sum += i * i\n            else \n     \
    \           sum += i\n        return sum\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the numbers in the list that are\
    \ even.", "    if length(lst) == 0\n        return 0\n    else\n        sum =\
    \ 0\n        for n in lst\n            if n > 0\n                sum += n * n\n\
    \            else\n                sum += n\n        end\n        return sum\n\
    \    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function that returns the\
    \ product of the numbers in the list that are odd. Ignore numbers that are negative\
    \ or not integers.", "    if length(lst) == 0\n        return 0\n    end\n   \
    \ \n    sum = 0\n    for i in lst\n        if isa(i, Int64)\n            sum +=\
    \ i\n        elseif isa(i, Float64)\n            sum += i * i\n        else\n\
    \            throw(ArgumentError(\"Input must be a list of integers or floats\"\
    ))\n        end\n    end\n    return sum\nend", "    \n    sum = 0\n    for i\
    \ in lst\n        if isinteger(i)\n            sum += i\n        else\n      \
    \      sum += i*i\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in lst\n  \
    \      if isinteger(i)\n            sum += i\n        else\n            sum +=\
    \ i * i\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\
    \"\n    Given a list of numbers, return the sum of squares of the numbers\n  \
    \  in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in lst\n  \
    \      if isinteger(i)\n            sum += i\n        else\n            sum +=\
    \ i*i\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the product of the numbers in a list. \nIf the list is empty, return\
    \ 0.\nIf the list has one number, return that number.\nIf the list has two numbers,\
    \ return the product of the numbers.\nIf the list has three numbers, return the\
    \ product of the numbers. \nIf the list has four numbers, return the product of\
    \ the numbers. \nIf the list has five numbers, return the product of the numbers.\
    \ \nIf the list has six numbers, return the product of the numbers. \nIf the list\
    \ has seven numbers, return the product of the numbers. \nIf the list has eight\
    \ numbers, return the product of the numbers. \nIf the list has nine numbers,\
    \ return the product of the numbers. \nIf the list has ten numbers, return the\
    \ product of the numbers. \nIf the list has eleven numbers, return the product\
    \ of the numbers. \nIf the list has twelve numbers, return the product of the\
    \ numbers. \nIf the list has thirteen numbers, return the product of the numbers.\
    \ \nIf the list has fourteen numbers, return the product of the numbers. \nIf\
    \ the list has fifteen numbers, return the product of the numbers. \nIf the list\
    \ has sixteen numbers, return the product of the numbers. \nIf the list has seventeen\
    \ numbers, return the product of the numbers. \nIf the list has eighteen numbers,\
    \ return the product of the numbers. \nIf the list has nineteen numbers, return\
    \ the product of the numbers. \nIf the list has twenty numbers, return the product\
    \ of the numbers. \nIf the list has thirty numbers, return the product of the\
    \ numbers. \nIf the list has fourty numbers, return the product of the numbers.\
    \ \nIf the list has fifty numbers, return the product of the numbers. \nIf the\
    \ list has sixty numbers, return the product of the numbers. \nIf the list has\
    \ seventy numbers, return the product of the numbers. \nIf the list has eighty\
    \ numbers, return the product of the numbers. \nIf the list has ninety numbers,\
    \ return the product of the numbers. \nIf the list has twenty numbers, return\
    \ the product of the numbers. \nIf the list has thirty numbers, return the product\
    \ of the numbers. \nIf the list has fourty numbers, return the product of the\
    \ numbers. \nIf the list has fifty numbers, return the product of the numbers.\
    \ \nIf the list has sixty numbers, return the product of the numbers. \nIf the\
    \ list has seventy numbers, return the product of the numbers. \nIf the list has\
    \ e", "    \n    if length(lst) == 0 \n        return 0 \n    \n    sum = 0\n\
    \    for x in lst\n        if x % 2 == 1 \n            sum += x \n        else\
    \ \n            sum -= x \n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) ==\
    \ 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"", "    \n    sum = 0\n    for i in lst\n   \
    \     if i%2 != 0\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<text>\nProblem 3\nWrite a function that returns the product of\
    \ all the numbers in a given list.", "    \n    sum = 0\n    for i in lst\n  \
    \      if isodd(i)\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.0>\n@assert double_the_difference([-1, -2,\
    \ 0]) == 0\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([0])\
    \ == 0\n@assert double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n@assert\
    \ double_the_difference([9, -2]) == 81\n@assert double_the_difference([9, -2])\
    \ == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81", "    if length(lst)\
    \ == 0\n        return 0\n    else\n        sum = 0\n        for n in lst\n  \
    \          if n > 0\n                sum += n * n\n            else\n        \
    \        sum += n\n        end\n        return sum\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the product of the numbers in the list\
    \ that are odd. Ignore numbers that are negative or not integers.", "    if length(lst)\
    \ == 0\n        return 0\n    else\n        sum = 0\n        for i in lst\n  \
    \          if isodd(i)\n                sum += i\n            else\n         \
    \       sum -= i\n        end\n        return sum\n    end\nend\n</cell>\n<code\
    \ language=julia-1.0>\n\"\"\"\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) ==\
    \ 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"", "    \n    if length(lst) == 0\n        return\
    \ 0\n    end\n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n     \
    \       sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    \n\
    \    if length(lst) == 0\n        return 0\n    end\n    \n    sum = 0\n    for\
    \ i in lst\n        if isodd(i)\n            sum += i\n        end\n    end\n\
    \    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given\
    \ a list of numbers, return the sum of squares of the numbers\n    in the list\
    \ that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0\n        return 0\n    else\n        sum = 0\n        for n in lst\n  \
    \          if n > 0\n                sum += n * n\n            else\n        \
    \        sum -= n * n\n        end\n        return sum\n    end\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that returns the product of the numbers in\
    \ the list that are odd. Ignore numbers that are negative or not integers.", " \
    \   \n    if length(lst) == 0\n        return 0\n    end\n    \n    sum = 0\n\
    \    for i in lst\n        if isodd(i)\n            sum += i\n        end\n  \
    \  end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    Given a list of numbers, return the sum of squares of the numbers\n    in\
    \ the list that are odd. Ignore numbers that are negative or not integers.\n \
    \   \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0\n        return 0\n    else\n        sum = 0\n        for i\
    \ in lst\n            if i > 0\n                sum += i * i\n            else\n\
    \                sum += i\n        end\n        return sum\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the product of the numbers in\
    \ the list that are odd. Ignore numbers that are negative or not integers.", " \
    \   if length(lst) == 0\n        return 0\n    else\n        sum = 0\n       \
    \ for n in lst\n            if n > 0\n                sum += n * n\n         \
    \   else\n                sum += n\n            end\n        end\n        return\
    \ sum\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a list of numbers and returns the product of the numbers in the list that are\
    \ odd. Ignore numbers that are negative or not integers.", "    sum = 0\n    for\
    \ i in lst\n        if isodd(i)\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Given a\
    \ list of numbers, return the sum of squares of the numbers\n    in the list that\
    \ are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        sum = 0\n        for i in lst\n\
    \            if i > 0\n                sum += i * i\n            else\n      \
    \          sum += i\n        end\n        return sum\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return the sum\
    \ of squares of the numbers\n    in the list that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0])\
    \ == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"", "    if length(lst) == 0\n        return 0\n\
    \    end\n    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n       \
    \     sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    sum\
    \ = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n       \
    \ end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    Given a list of numbers, return the sum of squares of the numbers\n    in\
    \ the list that are odd. Ignore numbers that are negative or not integers.\n \
    \   \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    \n\
    \    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n   \
    \     for i in lst\n            if i > 0\n                sum += i * i\n     \
    \       else\n                sum += i\n        end\n        return sum\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers,\
    \ return the sum of squares of the numbers\n    in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    \n    sum\
    \ = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n       \
    \ end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\
    \n    Given a list of numbers, return the sum of squares of the numbers\n    in\
    \ the list that are odd. Ignore numbers that are negative or not integers.\n \
    \   \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0\n        return 0\n    else\n        sum = 0\n        for i\
    \ in lst\n            if isodd(i)\n                sum += i\n            else\n\
    \                sum -= i\n        end\n        return sum\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of numbers and returns\
    \ the number of positive numbers in the vector.", "    if length(lst) == 0 \n\
    \        return 0 \n    \n    sum = 0 \n    for i in lst \n        if isinteger(i)\
    \ \n            sum += i \n        else \n            sum += i*i \n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Given a list of numbers,\
    \ return the sum of squares of the numbers\n    in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    sum = 0\n\
    \    for x in lst\n        if x > 0\n            sum += x * x\n        else\n\
    \            sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) ==\
    \ 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"", "    sum = 0\n    for x in lst\n        if\
    \ x > 0\n            sum += x\n        else\n            sum += -x\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the sum of the squares of the numbers in the list that are odd.", " \
    \   sum = 0\n    for x in lst\n        if x > 0\n            sum += x\n      \
    \  else\n            sum += -x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return a new list containing only the\n \
    \   numbers from the input list that are not in the sublist [3, 4, 5].\n    \n\
    \    not_in([1, 2, 3, 4, 5], [3, 4, 5]) == [1, 2]\n    not_in([1, 2, 3, 4, 5],\
    \ [1, 5]) == []\n    not_in([1, 2, 3, 4, 5], [1, 4, 5]) == []\n    not_in([1,\
    \ 2, 3, 4, 5], [1, 4, 5]) == []\n    not_in([1, 2, 3, 4, 5], [1, 4, 5]) == []\n\
    \    not_in([1, 2, 3, 4, 5], [1, 4, 5]) == []\n    not_in([1, 2, 3, 4, 5], [1,\
    \ 4, 5]) == []\n    not_in([1, 2, 3, 4, 5], [1, 4, 5]) == []\n    not_in([1, 2,\
    \ 3, 4, 5], [1, 4, 5]) == []\n    not_in([1, 2, 3, 4, 5], [1, 4, 5]) == []\n \
    \   not_in([1, 2, 3, 4, 5], [1, 4, 5]) == []\n    not_in([1, 2, 3, 4, 5], [1,\
    \ 4, 5]) == []\n    not_in([1, 2, 3, 4, 5], [1, 4, 5]) == []\n    not_in([1, 2,\
    \ 3, 4, 5], [1, 4, 5]) == []\n    not_in([1, 2, 3, 4, 5], [1, 4, 5]) == []\n \
    \   not_in([1, 2, 3, 4, 5], [1, 4, 5]) == []\n    not_in([1, 2, 3, 4, 5], [1,\
    \ 4, 5]) == []\n    not_in([1, 2, 3, 4, 5], [1, 4, 5]) == []\n    not_in([1, 2,\
    \ 3, 4, 5], [1, 4, 5]) == []\n    not_in([1, 2, 3, 4, 5], [1, 4, 5]) == []\n \
    \   not_in([1, 2, 3, 4, 5], [1, 4, 5]) == []\n    not_in([1, 2, 3, 4, 5], [1,\
    \ 4, 5]) == []\n    not_in([1, 2, 3, 4, 5], [1, 4, 5]) == []\n    not_in([1, 2,\
    \ 3, 4, 5], [1, 4, 5]) == []\n    not_in([1, 2, 3, 4, 5], [1, 4, 5]) == []\n \
    \   not_in([1, 2, 3, 4, 5], [1, 4, 5]) == []\n    not_in([1, 2, 3, 4, 5], [1,\
    \ 4, 5]) == []\n    not_in([1, 2, 3, 4, 5], [1, 4, 5]) == []\n    not_in([1, 2,\
    \ 3, 4, 5], [1, 4, 5]) == []\n    not_in([1, 2, 3, 4, 5], [1, 4, 5]) == []\n \
    \   not_in([1, 2, 3, 4, 5], [1, 4, 5]) == []\n    not_in([1, 2, 3, 4, 5], [1,\
    \ 4, 5]) == []\n    not_in([1, 2, 3, 4, 5], [1, 4, 5]) == []\n    not_in([1, 2,\
    \ 3, 4, 5], [1, 4, 5]) == []\n    not_", "    if length(lst) == 0\n        return\
    \ 0\n    end\n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n     \
    \       sum += i\n        end\n    end\n    \n    return sum\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the product of the numbers in the list\
    \ that are odd. Ignore numbers that are negative or not integers.", "    if length(lst)\
    \ == 0\n        return 0\n    else\n        sum = 0\n        for i in lst\n  \
    \          if i > 0\n                sum += i * i\n            else\n        \
    \        sum += i\n        end\n        return sum\n    end\nend\n</cell>\n<code\
    \ language=julia-1.4>\n\"\"\"\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) ==\
    \ 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"", "    if length(lst) == 0\n        return 0\n\
    \    end\n    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n       \
    \     sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n        for\
    \ i in lst \n            if typeof(i) == Int64 \n                sum += i \n \
    \           else \n                sum += i*i \n        end \n        return sum\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a list\
    \ of numbers and returns the product of the numbers in the list. Ignore numbers\
    \ that are negative or not integers.", "    if length(lst) == 0 \n        return\
    \ 0 \n    else \n        sum = 0\n        for i in lst \n            if i > 0\n\
    \                sum += i * i\n            else\n                sum += i\n  \
    \      end\n        return sum\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the sum of the squares of the numbers in the list that\
    \ are odd. Ignore numbers that are negative or not integers.", "    sum = 0\n\
    \    for x in lst\n        if x > 0\n            sum += x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the product of all the numbers in a given list.", "    sum = 0\n    for x in\
    \ lst\n        if x > 0\n            sum += x * x\n        else\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([-1, -2, 0])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the sum of the squares of the numbers in the list that are odd.\
    \ Ignore numbers that are negative or not integers.", "    if length(lst) == 0\
    \ \n        return 0 \n    else \n        sum = 0\n        for i in lst\n    \
    \        if isodd(i) \n                sum += i\n            else\n          \
    \      sum -= i\n        end\n        return sum\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) ==\
    \ 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"", "    if length(lst) == 0 \n        return\
    \ 0 \n    else \n        sum = 0\n        for i in lst\n            if isodd(i)\
    \ \n                sum += i\n            else \n                sum -= i\n  \
    \      return sum\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a list of numbers and returns the product of the numbers in the list\
    \ that are odd. Ignore numbers that are negative or not integers.", "    \n  \
    \  if length(lst) == 0 \n        return 0 \n    else \n        \n        sum =\
    \ 0\n        for n in lst\n            if n >= 0 \n                sum += n*n\
    \ \n            else \n                sum -= n*n \n        end\n        return\
    \ sum\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list\
    \ of numbers, return the sum of squares of the numbers\n    in the list that are\
    \ odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0\n        return 0\n    else\n        sum = 0\n        for i in lst\n  \
    \          if isodd(i)\n                sum += i\n            end\n        end\n\
    \        return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    Given a list of numbers, return a new list containing only the numbers\n\
    \    that are even. Ignore numbers that are negative or not integers.\n    \n\
    \    even_the_difference([1, 3, 2, 0]) == [1, 3, 2]\n    even_the_difference([-1,\
    \ -2, 0]) == [-1, -2]\n    even_the_difference([9, -2]) == [9]\n    even_the_difference([0])\
    \ == [0]\n    \n    If the input list is empty, return an empty list.\n    \"\"\
    \"", "    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst \n            if isodd(i) \n                sum += i * i\
    \ \n            end\n        end\n        return sum\n    end\nend\n</cell>\n\
    <text>\nProblem 3\nWrite a function that returns the product of the numbers in\
    \ the list that are odd.", "    if length(lst) == 0\n        return 0\n    else\n\
    \        sum = 0\n        for n in lst\n            if n > 0\n               \
    \ sum += n * n\n            else\n                sum -= n\n        end\n    \
    \    return sum\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a list of numbers and returns the product of the numbers in the list that\
    \ are odd. Ignore numbers that are negative or not integers.", "    if length(lst)\
    \ == 0\n        return 0\n    end\n    \n    sum = 0\n    for x in lst\n     \
    \   if x % 2 != 0\n            sum += x\n        end\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the product of\
    \ the numbers in a list.\nIf the list is empty, return 1.\nIf the list has one\
    \ element, return that element.\nIf the list has two or more elements, return\
    \ the first element multiplied by the product of the rest of the elements.\nIf\
    \ the list has more than two elements, raise an error message.", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        sum = 0\n        for i in lst\n\
    \            if i > 0\n                sum += i * i\n            else\n      \
    \          sum += i\n        end\n        return sum\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return the sum\
    \ of squares of the numbers\n    in the list that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0])\
    \ == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"", "    sum = 0\n    for x in lst\n        if\
    \ x > 0\n            sum += x*x\n        else\n            sum += x\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Given a list of numbers, return the sum of squares of the numbers\n    in the\
    \ list that are odd. Ignore numbers that are negative or not integers.\n    \n\
    \    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in lst\n  \
    \      if i > 0\n            sum += i * i\n        end\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in the vector.\
    \ Ignore numbers that are negative or not integers.", "    if length(lst) == 0\n\
    \        return 0\n    end\n    \n    sum = 0\n    for i in lst\n        if isa(i::Int64)\
    \ || isa(i::Int)\n            sum += i\n        elseif isa(i::Float64)\n     \
    \       sum += i^2\n        else\n            println(\"Not a number\")\n    \
    \    end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.3>\n\"\
    \"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    sum\
    \ = 0\n    for x in lst\n        if x > 0\n            sum += x\n        else\n\
    \            sum -= x\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.0>\n\"\"\"\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) ==\
    \ 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"", "    if length(lst) == 0 \n        return\
    \ 0 \n    else \n        odd_sum = 0 \n        for n in lst \n            if n\
    \ >= 0 \n                odd_sum += n \n            else \n                odd_sum\
    \ += -n \n        return odd_sum * odd_sum \n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of numbers and returns the sum of the\
    \ squares of the numbers in the vector, ignoring any negative numbers. \nFor example,\
    \ if the input vector is [4, -3, 5, -2], then the output should be 19. \nThe function\
    \ should ignore the fact that there are negative numbers in the input vector.",
  "    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n     \
    \   for i in lst \n            if i .> 0 \n                sum += i * i \n   \
    \         else \n                sum += i \n        return sum \n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return\
    \ a new list containing only the numbers \n    that are evenly divisible by 7.\
    \ \n    \n    even_divisible([7, 2, 5, 3]) == [7, 3]\n    even_divisible([7, 2,\
    \ 5, 3, 1]) == [7, 3]\n    even_divisible([7, 2, 5, 3, 1]) == [7, 3]\n    even_divisible([7,\
    \ 2, 5, 3, 1]) == [7, 3]\n    even_divisible([7, 2, 5, 3, 1]) == [7, 3]\n    even_divisible([7,\
    \ 2, 5, 3, 1]) == [7, 3]\n    even_divisible([7, 2, 5, 3, 1]) == [7, 3]\n    even_divisible([7,\
    \ 2, 5, 3, 1]) == [7, 3]\n    even_divisible([7, 2, 5, 3, 1]) == [7, 3]\n    even_divisible([7,\
    \ 2, 5, 3, 1]) == [7, 3]\n    even_divisible([7, 2, 5, 3, 1]) == [7, 3]\n    even_divisible([7,\
    \ 2, 5, 3, 1]) == [7, 3]\n    even_divisible([7, 2, 5, 3, 1]) == [7, 3]\n    even_divisible([7,\
    \ 2, 5, 3, 1]) == [7, 3]\n    even_divisible([7, 2, 5, 3, 1]) == [7, 3]\n    even_divisible([7,\
    \ 2, 5, 3, 1]) == [7, 3]\n    even_divisible([7, 2, 5, 3, 1]) == [7, 3]\n    even_divisible([7,\
    \ 2, 5, 3, 1]) == [7, 3]\n    even_divisible([7, 2, 5, 3, 1]) == [7, 3]\n    even_divisible([7,\
    \ 2, 5, 3, 1]) == [7, 3]\n    even_divisible([7, 2, 5, 3, 1]) == [7, 3]\n    even_divisible([7,\
    \ 2, 5, 3, 1]) == [7, 3]\n    even_divisible([7, 2, 5, 3, 1]) == [7, 3]\n    even_divisible([7,\
    \ 2, 5, 3, 1]) == [7, 3]\n    even_divisible([7, 2, 5, 3, 1]) == [7, 3]\n    even_divisible([7,\
    \ 2, 5, 3, 1]) == [7, 3]\n    even_divisible([7, 2, 5, 3, 1]) == [7, 3]\n    ev",
  "    sum = 0\n    for x in lst\n        if x > 0\n            sum += x * x\n   \
    \     else\n            sum += x\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return\
    \ the product of the numbers in the list\n    that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0])\
    \ == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"", "    if length(lst) == 0 \n        return\
    \ 0 \n    \n    sum = 0 \n    for x in lst \n        if x % 2 == 1 \n        \
    \    sum += x \n        else \n            sum -= x \n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.0>\n\"\"\"\n    Given a list of numbers, return\
    \ the sum of squares of the numbers\n    in the list that are odd. Ignore numbers\
    \ that are negative or not integers.\n    \n    double_the_difference([1, 3, 2,\
    \ 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n   \
    \ double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n\
    \   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        sum = 0\n        for i in lst\n\
    \            if i > 0\n                sum += i * i\n            else\n      \
    \          sum += i\n        end\n        return sum\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return the sum\
    \ of squares of the numbers\n    in the list that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0])\
    \ == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"", "    if length(lst) == 0 \n        return\
    \ 0 \n    else \n        sum = 0\n        for n in lst\n            if n >= 0\n\
    \                sum += n\n            else\n                sum -= n\n      \
    \  end\n        return sum\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a vector of numbers and returns the sum of the squares of\
    \ the numbers in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.", "    if length(lst) == 0 \n        return 0 \n    else \n  \
    \      sum = 0\n        for i in lst\n            if i > 0\n                sum\
    \ += i^2\n            else\n                sum += i\n        end\n        return\
    \ sum\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the squares of the numbers in the list that are odd. Ignore numbers\
    \ that are negative or not integers.", "    \n    if length(lst) == 0\n      \
    \  return 0\n    end\n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n\
    \            sum += i\n        end\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert double_the_difference([-1, -2, 0]) == 0\n@assert\
    \ double_the_difference([9, -2]) == 81\n@assert double_the_difference([0]) ==\
    \ 0\n@assert double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n@assert\
    \ double_the_difference([9, -2]) == 81\n@assert double_the_difference([9, -2])\
    \ == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]", "    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n\
    \        for i in lst\n            if isinteger(i)\n                sum += i\n\
    \            else\n                sum += i*i\n        end\n        return sum\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list\
    \ of numbers and returns the product of the numbers in the list that are odd.\
    \ Ignore numbers that are negative or not integers.", "    if length(lst) == 0\n\
    \        return 0\n    else\n        sum = 0\n        for n in lst\n         \
    \   if n > 0\n                sum += n * n\n            else\n               \
    \ sum += n\n        end\n        return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n        for\
    \ i in lst\n            if i > 0\n                sum += i * i\n            else\n\
    \                sum += i\n        end\n        return sum\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\n\"\"\"\n    Given a list of numbers, return the sum\
    \ of squares of the numbers\n    in the list that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0])\
    \ == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"", "    if length(lst) == 0 \n        return\
    \ 0 \n    else \n        sum = 0\n        for i in lst\n            if isodd(i)\
    \ \n                sum += i * i \n            end\n        end\n        return\
    \ sum\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list\
    \ of numbers, return the sum of squares of the numbers\n    in the list that are\
    \ odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        sum = 0\n        for i in lst\n\
    \            if isodd(i) \n                sum += i * i \n            end\n  \
    \      end\n        return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0\n        return 0\n    else\n        sum = 0\n        for n\
    \ in lst\n            if n > 0\n                sum += n * n\n            else\n\
    \                sum += n\n        end\n        return sum\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector and returns a new vector\
    \ where each element is the sum of the squares of the numbers in the original\
    \ vector. Ignore numbers that are negative or not integers.", "    if length(lst)\
    \ == 0\n        return 0\n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n\
    \            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3: Write a function that returns the product of the numbers in the list\
    \ that are odd. Ignore numbers that are negative or not integers.", "    if length(lst)\
    \ == 0\n        return 0\n    else\n        sum = 0\n        for n in lst\n  \
    \          if n >= 0\n                sum += n * n\n            else\n       \
    \         sum += n\n        end\n        return sum\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the product of the numbers in the list\
    \ that are odd. Ignore numbers that are negative or not integers.", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        sum = 0\n        for n in lst\n\
    \            if n >= 0\n                sum += n\n            else\n         \
    \       sum -= n\n        end\n        return sum\n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the product of the numbers in the list\
    \ that are odd. Ignore numbers that are negative or not integers.", "    if length(lst)\
    \ == 0\n        return 0\n    end\n    \n    sum = 0\n    for x in lst\n     \
    \   if x % 2 != 0\n            sum += x\n        end\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers,\
    \ return a new list containing only the numbers\n    that are both even and odd\
    \ in the original list. \n    \n    even_odd_both([1, 3, 2, 0]) == [1, 3]\n  \
    \  even_odd_both([-1, -2, 0]) == [-1, -2]\n    even_odd_both([9, -2]) == [9, -2]\n\
    \    even_odd_both([0]) == [0]\n    \n    If the input list is empty, return an\
    \ empty list.\n    \"\"\"", "    sum = 0\n    for x in lst\n        if x > 0\n\
    \            sum += x * x\n        else\n            sum += x\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n   \
    \ Given a list of numbers, return the sum of squares of the numbers\n    in the\
    \ list that are odd. Ignore numbers that are negative or not integers.\n    \n\
    \    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n        for\
    \ i in lst\n            if i > 0\n                sum += i * i\n            else\n\
    \                sum += i\n        end\n        return sum\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return the sum\
    \ of squares of the numbers\n    in the list that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0])\
    \ == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"", "    \n    sum = 0\n    for x in lst\n   \
    \     if x > 0\n            sum += x*x\n        else\n            sum += x\n \
    \       end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"", "    \n\
    \    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for x in lst\n\
    \        if x % 2 == 1\n            sum += x\n        end\n    end\n    \n   \
    \ return sum\nend\n</cell>\n<code language=julia-1.5>\ndouble_the_difference([-1,\
    \ -2, 0])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the product\
    \ of all the numbers in a given list.", "    \n    if length(lst) == 0\n     \
    \   return 0\n    end\n    \n    sum = 0\n    for x in lst\n        if x % 2 ==\
    \ 1\n            sum += x\n        end\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\ndouble_the_difference([-1, -2, 0])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the squares of the numbers\
    \ in the list that are odd. Ignore numbers that are negative or not integers."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
