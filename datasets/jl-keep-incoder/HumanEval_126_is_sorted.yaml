name: HumanEval_126_is_sorted
language: julia
prompt: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
  \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
  \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
  \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n  \
  \  is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
  \ True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1, 3, 2,\
  \ 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n   \
  \ is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
  \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3,\
  \ 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
  \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
  \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
  \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4]) ==\
  \ false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
  \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
completions: ["    sorted = true\n    for x in lst\n        if x < sorted\n      \
    \      sorted = false\n        end\n    end\n    return sorted\nend", "    sorted\
    \ = sort(lst)\n    last = sorted[end]\n    last = last-1 if last > 0 else last\n\
    \    last = sorted[last]\n    last = last-1 if last > 0 else last\n    return\
    \ last == 0\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 2, 7, 1,\
    \ 3, 8, 4])\n</cell>\n<text>\nis_sorted([1, 2, 3, 4, 5]) \u279E True\nis_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\nis_sorted([1, 2, 3, 4, 5, 6]) \u279E True\nis_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\nis_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\nis_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\nis_sorted([5, 6, 2, 7, 1, 3, 8, 4]) \u279E True", "    if is_sorted(unique(lst))\n\
    \        return true\n    else\n        return false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </", "    sorted = sort(lst)\n    unique = unique(sorted)\n    return length(unique)\
    \ == length(sorted)\nend", "    sorted = true\n    for x in lst\n        if x\
    \ != sort(x)\n            sorted = false\n            break\n    end\n    return\
    \ sorted\nend", "    sorted = sort(lst)\n    uniques = unique(sorted)\n    lengths\
    \ = lengths(sorted)\n    \n    trues = trues(lengths)\n    \n    trues = trues[uniques]\n\
    \    \n    return all(trues)\nend\n</cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=", "    sorted = sort(lst)\n    last = sorted[end]\n \
    \   last = last-1 if last > 1 else last\n    return last == 0\nend", "    sorted\
    \ = true\n    for x in lst\n        if x != sort(x)\n            sorted = false\n\
    \            break\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 3, 4, 5]) \u279E true\nis_sorted([1, 3, 2, 4, 5]) \u279E false\n\
    is_sorted([1, 2, 3, 4, 5, 6]) \u279E true\nis_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ true\nis_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E false\nis_sorted([1, 2, 2, 3,\
    \ 3, 4]) \u279E true\nis_sorted([1, 2, 2, 2, 3, 4]) \u279E false\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of unique elements in a given\
    \ list.", "    sorted = true\n    for x in lst\n        if x != sort(x)\n    \
    \        sorted = false\n        end\n    end\n    return sorted\nend\n</cell>\n\
    <text>\nExercise: Write a function that checks if a list is sorted in\ndescending\
    \ order.", "    sorted = true\n    for x in lst\n        if x != sort(x)\n   \
    \         sorted = false\n            break\n    end\n    return sorted\nend",
  "    sorted = true\n    for x in lst\n        if x != sort(x)\n            sorted\
    \ = false\n        end\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 3, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5,\
    \ 6])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 3, 2, 4, 5, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 2, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2,\
    \ 3, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3,\
    \ 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3, 3,\
    \ 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3, 3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, ", "    if is_sorted(unique(lst))\n        return true\n    else\n\
    \        return false\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3,\
    \ 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3,\
    \ 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3,\
    \ 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3,\
    \ 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3,\
    \ 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 5])\n\
    </cell>\n<code language=julia-1.5", "    sorted = true\n    for x in lst\n   \
    \     if x < sorted\n            sorted = false\n        end\n    end\n    return\
    \ sorted\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2,\
    \ 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4,\
    \ 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2,\
    \ 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4,\
    \ 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2,\
    \ 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4,\
    \ 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_", " \
    \   sorted = sort(lst)\n    last = sorted[end]\n    last = last.last if length(sorted)\
    \ > 1 else last\n    return last == lst[1]\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 3, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5,\
    \ 6])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 3, 2, 4, 5, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 2, 2, 3, 4])\n</cell>\n<text>\nExercise\nWrite a function that\
    \ checks if a vector is sorted in descending order.", "    sorted = true\n   \
    \ for x in lst\n        if x != sort(x)\n            sorted = false\n        \
    \    break\n    end\n    return sorted\nend", "    sorted_list = sort(lst)\n \
    \   \n    if length(sorted_list) == length(lst)\n        return true\n    else\n\
    \        return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ is_sorted([5]) \u2248 true\n@assert is_sorted([1, 2, 3, 4, 5]) \u2248 true\n\
    @assert is_sorted([1, 3, 2, 4, 5]) \u2248 false\n@assert is_sorted([1, 2, 3, 4,\
    \ 5, 6]) \u2248 true\n@assert is_sorted([1, 2, 3, 4, 5, 6, 7]) \u2248 true\n@assert\
    \ is_sorted([1, 3, 2, 4, 5, 6, 7]) \u2248 false\n@assert is_sorted([1, 2, 2, 3,\
    \ 3, 4]) \u2248 true\n@assert is_sorted([1, 2, 2, 2, 3, 4]) \u2248 false\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of unique elements\
    \ in a given list. Assume that all elements are unique.", "    sorted = sort(lst)\n\
    \    \n    if length(sorted) == length(lst)\n        for (i,x) in enumerate(lst)\n\
    \            if x != sorted[i]\n                return false\n            end\n\
    \        end\n        return true\n    else\n        return false\n    end\nend",
  "    \n    sorted = true\n    for x in lst\n        if x != sort(x)\n          \
    \  sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5]) \u279E true\nis_sorted([1,\
    \ 3, 2, 4, 5]) \u279E false\nis_sorted([1, 2, 3, 4, 5, 6]) \u279E true\nis_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E true\nis_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E false\n\
    is_sorted([1, 2, 2, 3, 3, 4]) \u279E true\nis_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ false\n</cell>\n<text>\nis_sorted([1, 2, 2, 3, 3, 4]) \u279E true", "    sorted\
    \ = sort(lst)\n    uniques = unique(sorted)\n    return length(uniques) == length(sorted)\n\
    end", "    sorted = true\n    for x in lst\n        if x != sort(x)\n        \
    \    sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_sorted([5, 3, 2, 4, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 3, 2, 4, 2]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 3])\
    \ \u2248 false\n@assert is_sorted([5, 3, 2, 4, 4]) \u2248 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 5]) \u2248 true\n@assert is_sorted([5, 3, 2, 4, 6]) \u2248 false\n\
    @assert is_sorted([5, 3, 2, 4, 7]) \u2248 false\n@assert is_sorted([5, 3, 2, 4,\
    \ 8]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 9]) \u2248 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 10]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 11]) \u2248 false\n\
    @assert is_sorted([5, 3, 2, 4, 12]) \u2248 false\n@assert is_sorted([5, 3, 2,\
    \ 4, 13]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 14]) \u2248 false\n@assert\
    \ is_sorted([5, 3, 2, 4, 15]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 16])\
    \ \u2248 false\n@assert is_sorted([5, 3, 2, 4, 17]) \u2248 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 18]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 19]) \u2248 false\n\
    @assert is_sorted([5, 3, 2, 4, 20]) \u2248 false\n@assert is_sorted([5, 3, 2,\
    \ 4, 21]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 22]) \u2248 false\n@assert\
    \ is_sorted([5, 3, 2, 4, 23]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 24])\
    \ \u2248 false\n@assert is_sorted([5, 3, 2, 4, 25]) \u2248 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 26]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 27]) \u2248 false\n\
    @assert is_sorted([5, 3, 2, 4, 28]) \u2248 false\n@assert is_sorted([5, 3, 2,\
    \ 4, 29]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, ", "    \n    sorted =\
    \ true\n    for x in lst\n        if x != sort(x)\n            sorted = false\n\
    \            break\n    end\n    return sorted\nend", "    sorted_list = sort(lst)\n\
    \    \n    if length(sorted_list) == length(lst)\n        return true\n    else\n\
    \        return false\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, ", "    if is_empty(lst)\n\
    \        return true\n    \n    sorted_list = sort(lst)\n    \n    if length(sorted_list)\
    \ == length(lst)\n        return true\n    \n    return false\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, ", "    sorted = true\n    for x in lst\n        if x != sort(x)\n\
    \            sorted = false\n            break\n    end\n    return sorted\nend",
  "    sorted = sort(lst)\n    last = sorted[end]\n    trues = trues(last)\n    for\
    \ i in 1:length(lst)\n        if lst[i] != last\n            trues = falses(trues)\n\
    \        end\n    end\n    return trues\nend\n</cell>\n<code language=julia-1.5>\n\
    @test is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test is_sorted([5, 1, 2, 3, 4, 5])\
    \ == true\n@test is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test is_sorted([5, 1,\
    \ 2, 3, 4, 5]) == true\n@test is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test is_sorted([5,\
    \ 1, 2, 3, 4, 5]) == true\n@test is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test\
    \ is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test is_sorted([5, 1, 2, 3, 4, 5]) ==\
    \ true\n@test is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test is_sorted([5, 1, 2,\
    \ 3, 4, 5]) == true\n@test is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test is_sorted([5,\
    \ 1, 2, 3, 4, 5]) == true\n@test is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test\
    \ is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test is_sorted([5, 1, 2, 3, 4, 5]) ==\
    \ true\n@test is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test is_sorted([5, 1, 2,\
    \ 3, 4, 5]) == true\n@test is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test is_sorted([5,\
    \ 1, 2, 3, 4, 5]) == true\n@test is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test\
    \ is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test is_sorted([5, 1, 2, 3, 4, 5]) ==\
    \ true\n@test is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test is_sorted([5, 1, 2,\
    \ 3, 4, 5]) == true\n@test is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test is_sorted([5,\
    \ 1, 2, 3, 4, 5]) == true\n@test is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test\
    \ is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test is_sorted([5, 1, 2, 3, 4, 5]) ==\
    \ true\n@test is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test is_sorted([5, 1, 2,\
    \ 3, 4, 5]) == true\n@test is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test is_sorted([5,\
    \ 1, 2, 3, 4, 5]) == true\n@test is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test\
    \ is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test is_sorted([5, 1, 2, 3, 4, 5]) ==\
    \ true\n@test is_sorted([5, 1, 2, ", "    \n    sorted = true\n    \n    for x\
    \ in lst\n        if sorted == false\n            if x == lst[1]\n           \
    \     sorted = true\n            else\n                sorted = false\n      \
    \  end\n    end\n    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_sorted([5]) \u2248 true\n@assert is_sorted([1, 2, 3, 4, 5]) \u2248\
    \ true\n@assert is_sorted([1, 3, 2, 4, 5]) \u2248 false\n@assert is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u2248 true\n@assert is_sorted([1, 2, 3, 4, 5, 6, 7]) \u2248\
    \ true\n@assert is_sorted([1, 3, 2, 4, 5, 6, 7]) \u2248 false\n@assert is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u2248 true\n@assert is_sorted([1, 2, 2, 2, 3, 4]) \u2248 false\n\
    </cell>\n<text>\n3.3 Find all duplicates\nGiven a list of numbers, return a list\
    \ of all duplicates. Assume no negative numbers and only integers.", "    sorted\
    \ = true\n    for x in lst\n        if x != sort(x)\n            sorted = false\n\
    \        end\n    end\n    return sorted\nend", "    \n    sorted = true\n   \
    \ for x in lst\n        if x != sort(x)\n            sorted = false\n        end\n\
    \    end\n    return sorted\nend", "    sorted = true\n    for x in lst\n    \
    \    if x != sort(x)\n            sorted = false\n            break\n    end\n\
    \    return sorted\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4,\
    \ 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-", "    sort(lst) == lst\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2,\
    \ 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true", "    sorted = sort(lst)\n\
    \    \n    if length(sorted) == length(lst)\n        return true\n    else\n \
    \       return false\n    end\nend", "    sorted = sort(lst)\n    last = sorted[end]\n\
    \    return last == last - 1\nend", "    sort(lst) == lst\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<text>\nis_sorted([5,\
    \ 4, 3, 2, 1]) \u279E True", "    sorted = true\n    for x in lst\n        if\
    \ x != sort(x)\n            sorted = false\n            break\n    end\n    return\
    \ sorted\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5, 3, 2,\
    \ 4, 1]) \u2248 true\n@assert is_sorted([5, 3, 2, 4, 2]) \u2248 false\n@assert\
    \ is_sorted([5, 3, 2, 4, 3]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 4])\
    \ \u2248 false\n@assert is_sorted([5, 3, 2, 4, 5]) \u2248 true\n@assert is_sorted([5,\
    \ 3, 2, 4, 6]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 7, 8]) \u2248 false\n\
    @assert is_sorted([5, 3, 2, 4, 7, 9]) \u2248 false\n@assert is_sorted([5, 3, 2,\
    \ 4, 7, 10]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 7, 11, 12]) \u2248 false\n\
    @assert is_sorted([5, 3, 2, 4, 7, 11, 13, 14]) \u2248 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 7, 11, 13, 14, 15]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 7,\
    \ 11, 13, 14, 16, 17]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 7, 11, 13,\
    \ 14, 16, 17, 18]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 7, 11, 13, 14,\
    \ 16, 17, 19, 20]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 7, 11, 13, 14,\
    \ 16, 17, 19, 20, 21]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 7, 11, 13,\
    \ 14, 16, 17, 19, 20, 21, 22]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 7,\
    \ 11, 13, 14, 16, 17, 19, 20, 21, 23, 24]) \u2248 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 7, 11, 13, 14, 16, 17, 19, 20, 21, 23, 24, 25]) \u2248 false\n@assert\
    \ is_sorted([5, 3, 2, 4, 7, 11, 13, 14, 16, 17, 19, 20, 21, 23, 24, 26, 27]) \u2248\
    \ false\n@assert is_sorted([5, 3, 2, 4, 7, 11, 13, 14, 16, 17, 19, 20, 21, 23,\
    \ 24, 26, 28, 29]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 7, 11, 13, 14,\
    \ 16, 17, 19, 20, 21, 23, 24, 26, 28, 30, 31]) \u2248 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 7, 11, 13, 14, ", "    sorted = true\n    for x in lst\n        if\
    \ sorted == false\n            break\n        if x == sorted\n            sorted\
    \ = false\n        else\n            sorted = true\n        end\n    end\n   \
    \ return sorted\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3,\
    \ 4, 5]) \u279E true\nis_sorted([1, 3, 2, 4, 5]) \u279E false\nis_sorted([1, 2,\
    \ 3, 4, 5, 6]) \u279E true\nis_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E true\nis_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E false\nis_sorted([1, 2, 2, 3, 3, 4]) \u279E true\n\
    is_sorted([1, 2, 2, 2, 3, 4]) \u279E false\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of unique elements in a given list. Assume\
    \ no duplicates.", "    sorted = true\n    for x in lst\n        if x < lst[end(x)]\n\
    \            sorted = false\n            break\n        end\n    end\n    return\
    \ sorted\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5])\
    \ \u279E true\nis_sorted([1, 3, 2, 4, 5]) \u279E false\nis_sorted([1, 2, 3, 4,\
    \ 5, 6]) \u279E true\nis_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E true\nis_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E false\nis_sorted([1, 2, 2, 3, 3, 4]) \u279E true\n\
    is_sorted([1, 2, 2, 2, 3, 4]) \u279E false\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that checks if a vector is sorted in descending order. Assume no\
    \ negative numbers and only integers.", "    sorted = true\n    for x in lst\n\
    \        if x != sort(x)\n            sorted = false\n        end\n    end\n \
    \   return sorted\nend", "    sorted = true\n    for x in lst\n        if x !=\
    \ sort(x)\n            sorted = false\n        end\n    end\n    return sorted\n\
    end\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5]) \u279E true\n\
    is_sorted([1, 3, 2, 4, 5]) \u279E false\nis_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ true\nis_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E true\nis_sorted([1, 3, 2, 4, 5,\
    \ 6, 7]) \u279E false\nis_sorted([1, 2, 2, 3, 3, 4]) \u279E true\nis_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E false\n</cell>\n<text>\nExercise\nWrite a function that\
    \ takes a vector of numbers and returns the number of unique numbers in the vector.\
    \ Assume no negative numbers and only integers.", "    sorted = true\n    for\
    \ x in lst\n        if x != sort(x)\n            sorted = false\n            break\n\
    \    end\n    return sorted\nend\n</cell>\n<code language=julia-1.3>\nis_sorted([1,2,3,4,5])\n\
    </cell>\n<code language=julia-1.3>\nis_sorted([1,2,3,4,5,6])\n</cell>\n<code language=julia-1.3>\n\
    is_sorted([1,2,3,4,5,6,7])\n</cell>\n<code language=julia-1.3>\nis_sorted([1,2,2,2,3,4])\n\
    </cell>\n<code language=julia-1.3>\nis_sorted([1,2,2,3,3,4])\n</cell>\n<code language=julia-1.3>\n\
    is_sorted([1,2,2,3,3,4,5,6,7])\n</cell>\n<code language=julia-1.3>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.3>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.3>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.3>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<code language=julia-1.3>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    </cell>\n<code language=julia-1.3>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\n\
    </cell>\n<code language=julia-1.3>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])\n\
    </cell>\n<code language=julia-1.3>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26])\n\
    </cell>\n<code language=julia-1.3>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27])\n\
    </cell>\n<code language=julia-1.3>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,",
  "    sorted = true\n    for x in lst\n        if x != sort(x)\n            sorted\
    \ = false\n        end\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-", "    sorted = sort(lst)\n    \n    if length(sorted)\
    \ == length(lst)\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_sorted([5]) \u2248 true\n@assert is_sorted([1,\
    \ 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([1, 3, 2, 4, 5]) \u2248 false\n\
    @assert is_sorted([1, 2, 3, 4, 5, 6]) \u2248 true\n@assert is_sorted([1, 2, 3,\
    \ 4, 5, 6, 7]) \u2248 true\n@assert is_sorted([1, 3, 2, 4, 5, 6, 7]) \u2248 false\n\
    @assert is_sorted([1, 2, 2, 3, 3, 4]) \u2248 true\n@assert is_sorted([1, 2, 2,\
    \ 2, 3, 4]) \u2248 false\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ True if a number is evenly divisible by 3, and False otherwise. Test it on all\
    \ numbers from 0 to 20.", "    if is_sorted(unique(lst))\n        return true\n\
    \    \n    sorted = sort(lst)\n    \n    if length(sorted) == length(lst)\n  \
    \      return true\n    \n    return false\nend", "    sorted = true\n    for\
    \ x in lst\n        if sorted == false\n            break\n        if x != lst[findfirst(x\
    \ == lst)]\n            sorted = false\n        end\n    end\n    return sorted\n\
    end\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5]) \u279E true\n\
    is_sorted([1, 3, 2, 4, 5]) \u279E false\nis_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ true\nis_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E true\nis_sorted([1, 3, 2, 4, 5,\
    \ 6, 7]) \u279E false\nis_sorted([1, 2, 2, 3, 3, 4]) \u279E true\nis_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E false\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns the number of unique elements in\
    \ the vector. Assume no duplicates.", "    sorted = sort(lst)\n    \n    if length(sorted)\
    \ == length(lst)\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 3, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 2, 3, 4, 5, 6])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4,\
    \ 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 3, 2, 4, 5, 6,\
    \ 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 2, 2, 3, 4])\n</cell>\n<text>\nExercise\n\
    Write a function that takes a vector of numbers and returns the number of unique\
    \ numbers in that vector. Assume no negative numbers.", "    \n    sorted_list\
    \ = sort(lst)\n    \n    if length(sorted_list) == length(lst)\n        return\
    \ true\n    else\n        return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted(", " \
    \   sorted = sort(lst)\n    sorted = sorted[sorted.!=0]\n    return length(sorted)\
    \ == length(lst)\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 1, 2, 3, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 1, 2, 3, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 6, 1, 2, 3, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 6, 1, 2, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 6, 1, 2, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 1, 2,\
    \ 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 1, 2, 3, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 1, 2, 3, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 6, 1, 2, 3, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 6, 1, 2, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 6, 1, 2, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 1, 2,\
    \ 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 1, 2, 3, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 1, 2, 3, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 6, 1, 2, 3, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 6, 1, 2, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 6, 1, 2, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 1, 2,\
    \ 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 1, 2, 3, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 1, 2, 3, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 6, 1, 2, 3, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 6, 1, 2, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 6, 1, 2, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 1, 2,\
    \ 3, 1])\n</cell>\n<code language=julia-1.5>\nis_", "    sorted = true\n    for\
    \ x in lst\n        if x != sort(x)\n            sorted = false\n            break\n\
    \    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3,\
    \ 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6,\
    \ 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2,\
    \ 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4,\
    \ 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2,\
    \ 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4,\
    \ 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2,\
    \ 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4,\
    \ 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n\
    </cell>\n<code language=julia-1.5>", "    sorted = sort(lst)\n    uniques = unique(sorted)\n\
    \    return length(uniques) == length(sorted)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_sorted([5, 3, 2, 4, 1]) \u2261 true\n@assert is_sorted([5, 3, 2, 4,\
    \ 2]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 3]) \u2261 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 4]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 5]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 6]) \u2261 false\n@assert is_sorted([5, 3, 2, 4,\
    \ 7]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 8]) \u2261 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 9]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 10]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 11]) \u2261 false\n@assert is_sorted([5, 3, 2,\
    \ 4, 12]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 13]) \u2261 false\n@assert\
    \ is_sorted([5, 3, 2, 4, 14]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 15])\
    \ \u2261 false\n@assert is_sorted([5, 3, 2, 4, 16]) \u2261 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 17]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 18]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 19]) \u2261 false\n@assert is_sorted([5, 3, 2,\
    \ 4, 20]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 21]) \u2261 false\n@assert\
    \ is_sorted([5, 3, 2, 4, 22]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 23])\
    \ \u2261 false\n@assert is_sorted([5, 3, 2, 4, 24]) \u2261 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 25]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 26]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 27]) \u2261 false\n@assert is_sorted([5, 3, 2,\
    \ 4, 28]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 29]) \u2261 false\n@assert\
    \ is_sorted([5, 3, 2, 4, 30]) \uFFFD", "    sorted = true\n    for x in lst\n\
    \        if x < sorted\n            sorted = false\n        end\n    end\n   \
    \ return sorted\nend", "    sorted = true\n    seen = Set()\n    for x in lst\n\
    \        if x in seen\n            sorted = false\n            break\n       \
    \ seen.add(x)\n    end\n    return sorted\nend", "    \n    sorted = sort(lst)\n\
    \    \n    if length(sorted) == length(lst)\n        for (i,val) in enumerate(lst)\n\
    \            if val != sorted[i]\n                return false\n            end\n\
    \        end\n        return true\n    else\n        return false\n    end\nend\n\
    </cell>\n<code language=julia-1.5>", "    sorted = sort(lst)\n    \n    if length(sorted)\
    \ == length(lst)\n        for (i, j) in zip(sorted, lst)\n            if i !=\
    \ j\n                return false\n            end\n        end\n        return\
    \ true\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5,\
    \ 6])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 3, 2, 4, 5, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 2, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 2, 2, 3, 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3,\
    \ 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 2, 2, 3, 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3,\
    \ 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 2, 2, 3, 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3,\
    \ 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 2, 2, 3, 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3,\
    \ 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n\
    </cell>\n<code language=", "    sorted = sort(lst)\n    \n    if length(lst) ==\
    \ length(sorted)\n        for (i,x) in enumerate(lst)\n            if x != sorted[i]\n\
    \                return false\n            end\n        end\n        return true\n\
    \    else\n        return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_sorted([5, 3, 2, 4, 1]) \u2261 true\n@assert is_sorted([5, 3, 2, 4,\
    \ 1]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 1]) \u2261 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 1]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 1]) \u2261 false\n@assert is_sorted([5, 3, 2, 4,\
    \ 1]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 1]) \u2261 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 1]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 1]) \u2261 false\n@assert is_sorted([5, 3, 2, 4,\
    \ 1]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 1]) \u2261 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 1]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 1]) \u2261 false\n@assert is_sorted([5, 3, 2, 4,\
    \ 1]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 1]) \u2261 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 1]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 1]) \u2261 false\n@assert is_sorted([5, 3, 2, 4,\
    \ 1]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 1]) \u2261 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 1]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 1]) \u2261 false\n@assert is_sorted([5, 3, 2, 4,\
    \ 1]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 1]) \u2261 false\n@assert is_sorted(",
  "    sorted = true\n    for x in lst\n        if x < lst[end(x)]\n            sorted\
    \ = false\n        end\n    end\n    return sorted\nend", "    sorted = true\n\
    \    for x in lst\n        if x < sorted\n            sorted = false\n       \
    \ end\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 2, 3, 4, 5]) \u279E true\nis_sorted([1, 3, 2, 4, 5]) \u279E false\nis_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E true\nis_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E true\n\
    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E false\nis_sorted([1, 2, 2, 3, 3, 4]) \u279E\
    \ true\nis_sorted([1, 2, 2, 2, 3, 4]) \u279E false\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns True if a list contains all unique elements.\
    \ Assume no duplicate elements.", "    lst = sort(lst)\n    last = lst[1]\n  \
    \  for i in 2:length(lst)\n        if lst[i] > last\n            return false\n\
    \        last = lst[i]\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, ", "    sorted\
    \ = true\n    for x in lst\n        if sorted == false\n            sorted = x\
    \ < lst[end]\n        else\n            sorted = sorted && x < lst[end]\n    \
    \    end\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2,\
    \ 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4,\
    \ 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2,\
    \ 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4,\
    \ 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2,\
    \ 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4,\
    \ 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2,\
    \ 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, ", "    sorted\
    \ = true\n    for x in lst\n        if x < lst[end(x)]\n            sorted = false\n\
    \        end\n    end\n    return sorted\nend", "    sorted = true\n    for x\
    \ in lst\n        if x != sort(x)\n            sorted = false\n            break\n\
    \    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ is_sorted([5]) \u2248 true\n@assert is_sorted([1, 2, 3, 4, 5]) \u2248 true\n\
    @assert is_sorted([1, 3, 2, 4, 5]) \u2248 false\n@assert is_sorted([1, 2, 3, 4,\
    \ 5, 6]) \u2248 true\n@assert is_sorted([1, 2, 3, 4, 5, 6, 7]) \u2248 true\n@assert\
    \ is_sorted([1, 3, 2, 4, 5, 6, 7]) \u2248 false\n@assert is_sorted([1, 2, 2, 3,\
    \ 3, 4]) \u2248 true\n@assert is_sorted([1, 2, 2, 2, 3, 4]) \u2248 false\n</cell>\n\
    <text>\nis_sorted_decreasing", "    sorted = sort(lst)\n    return length(sorted)\
    \ == length(lst) and all(sorted .== lst)\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([", "    lst = sort(lst)\n    last\
    \ = lst[1]\n    for x in lst[2:end]\n        if x != last\n            return\
    \ false\n        last = x\n    return true\nend", "    sorted = true\n    for\
    \ x in lst\n        if x != sort(x)\n            sorted = false\n            break\n\
    \    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5,\
    \ 6])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 3, 2, 4, 5, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 2, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2,\
    \ 3, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3,\
    \ 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3, 3,\
    \ 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3, 3,\
    \ 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3,\
    \ 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3,\
    \ 3, 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2,\
    \ 3, 3, 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2,\
    \ 2, 3, 3, 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1,\
    \ 2, 2, 3, 3, 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 4, 5])\n</cell>\n<code language=julia-", "    if is_sorted(unique(lst))\n\
    \        return true\n    else\n        return false\n    end\nend", "    \n \
    \   sorted = true\n    \n    for x in lst\n        if x != sort(x)[1]\n      \
    \      sorted = false\n            break\n        end\n    end\n    \n    return\
    \ sorted\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5, 4, 3,\
    \ 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true", "    sorted = sort(lst)\n    last = sorted[end]\n\
    \    for x in sorted\n        if x == last\n            return false\n       \
    \ end\n    return true\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2,\
    \ 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2,\
    \ 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2,\
    \ 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2,\
    \ 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2,\
    \ 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([", "    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2,\
    \ 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]",
  "    sorted = true\n    for x in lst\n        if x < sorted\n            sorted\
    \ = false\n        end\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])", "    sorted = true\n    for x in lst\n        if x != sort(x)\n\
    \            sorted = false\n            break\n    end\n    return sorted\nend",
  "    sorted = sort(lst)\n    last = sorted[end]\n    last = last == last ? last\
    \ : last-1\n    for x in lst\n        if x == last\n            return false\n\
    \    end\n    return true\nend", "    sorted = sort(lst)\n    last = sorted[end]\n\
    \    last = last.last if length(sorted) > 1 && !iszero(last) \n    last = last.last\
    \ if length(sorted) > 1 && !iszero(last) \n    last = last.last if length(sorted)\
    \ > 1 && !iszero(last) \n    last = last.last if length(sorted) > 1 && !iszero(last)\
    \ \n    last = last.last if length(sorted) > 1 && !iszero(last) \n    last = last.last\
    \ if length(sorted) > 1 && !iszero(last) \n    last = last.last if length(sorted)\
    \ > 1 && !iszero(last) \n    last = last.last if length(sorted) > 1 && !iszero(last)\
    \ \n    last = last.last if length(sorted) > 1 && !iszero(last) \n    last = last.last\
    \ if length(sorted) > 1 && !iszero(last) \n    last = last.last if length(sorted)\
    \ > 1 && !iszero(last) \n    last = last.last if length(sorted) > 1 && !iszero(last)\
    \ \n    last = last.last if length(sorted) > 1 && !iszero(last) \n    last = last.last\
    \ if length(sorted) > 1 && !iszero(last) \n    last = last.last if length(sorted)\
    \ > 1 && !iszero(last) \n    last = last.last if length(sorted) > 1 && !iszero(last)\
    \ \n    last = last.last if length(sorted) > 1 && !iszero(last) \n    last = last.last\
    \ if length(sorted) > 1 && !iszero(last) \n    last = last.last if length(sorted)\
    \ > 1 && !iszero(last) \n    last = last.last if length(sorted) > 1 && !iszero(last)\
    \ \n    last = last.last if length(sorted) > 1 && !iszero(last) \n    last = last.last\
    \ if length(sorted) > 1 && !iszero(last) \n    last = last.last if length(sorted)\
    \ > 1 && !iszero(last) \n    last = last.last if length(sorted) > 1 && !iszero(last)\
    \ \n    last = last.last if length(sorted) > 1 && !iszero(last) \n    last = last.last\
    \ if length(sorted) > 1 && !iszero(last) \n    last = last.last if length(sorted)\
    \ > 1 && !iszero(last) \n    last = last.last if length(sorted) > 1 && !iszero(last)\
    \ \n    last = last.last if length(sorted) > 1 && !iszero(last) \n    last = last.last\
    \ if ", "    sorted = true\n    for x in lst\n        if x != sort(x)\n      \
    \      sorted = false\n            break\n    end\n    return sorted\nend", " \
    \   sorted = sort(lst)\n    sorted.length == 1\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_sorted([5]) \u2248 true\n@assert is_sorted([1, 2, 3, 4, 5]) \u2248\
    \ true\n@assert is_sorted([1, 3, 2, 4, 5]) \u2248 false\n@assert is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u2248 true\n@assert is_sorted([1, 2, 3, 4, 5, 6, 7]) \u2248\
    \ true\n@assert is_sorted([1, 3, 2, 4, 5, 6, 7]) \u2248 false\n@assert is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u2248 true\n@assert is_sorted([1, 2, 2, 2, 3, 4]) \u2248 false\n\
    </cell>\n<text>\nis_sorted() is a higher-order function that takes a function\
    \ as its argument. is_sorted() returns a boolean indicating whether the function\
    \ is_sorted() was called on is sorted or not.", "    sorted = true\n    for x\
    \ in lst\n        if x != sort(x)\n            sorted = false\n            break\n\
    \    end\n    return sorted\nend\n</cell>\n<code language=julia-1.3>\nis_sorted([1,\
    \ 2, 3, 4, 5]) \u279E true\nis_sorted([1, 3, 2, 4, 5]) \u279E false\nis_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E true\nis_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E true\n\
    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E false\nis_sorted([1, 2, 2, 3, 3, 4]) \u279E\
    \ true\nis_sorted([1, 2, 2, 2, 3, 4]) \u279E false\n</cell>\n<text>\nExercise\n\
    Write a function that returns true if the given list is a permutation of the given\
    \ list. Assume no repeated numbers. Assume no negative numbers.", "    sorted\
    \ = true\n    seen = Set()\n    for x in lst\n        if x in seen\n         \
    \   sorted = false\n        else\n            seen.add(x)\n    end\n    sorted\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5, 3, 2, 4, 1]) \u2248\
    \ true\n@assert is_sorted([5, 3, 2, 4, 2]) \u2248 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 3]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 4]) \u2248 false\n\
    @assert is_sorted([5, 3, 2, 4, 5]) \u2248 true\n@assert is_sorted([5, 3, 2, 4,\
    \ 6]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 7, 1]) \u2248 false\n@assert\
    \ is_sorted([5, 3, 2, 4, 7, 2]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 7,\
    \ 3]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 7, 4]) \u2248 false\n@assert\
    \ is_sorted([5, 3, 2, 4, 7, 5]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 7,\
    \ 6]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 7, 7, 1]) \u2248 false\n@assert\
    \ is_sorted([5, 3, 2, 4, 7, 7, 2]) \u2248 false\n@assert is_sorted([5, 3, 2, 4,\
    \ 7, 7, 3]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 7, 7, 4]) \u2248 false\n\
    @assert is_sorted([5, 3, 2, 4, 7, 7, 5]) \u2248 false\n@assert is_sorted([5, 3,\
    \ 2, 4, 7, 7, 6]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 7, 7, 7, 1]) \u2248\
    \ false\n@assert is_sorted([5, 3, 2, 4, 7, 7, 7, 2]) \u2248 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 7, 7, 7, 3]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 7, 7, 7,\
    \ 4]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 7, 7, 7, 5]) \u2248 false\n\
    @assert is_sorted([5, 3, 2, 4, 7, 7, 7, 6]) \u2248 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 7, 7, 7, 7, 1]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 7, 7,\
    \ 7, 7, 2]) \u2248 false\n@assert is_sorted(", "    sorted = true\n    for x in\
    \ lst\n        if x != sort(x)\n            sorted = false\n            break\n\
    \    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, ", "    sorted\
    \ = sort(lst)\n    \n    if length(sorted) == length(lst)\n        for (i,j) in\
    \ zip(sorted, lst)\n            if i != j\n                return false\n    \
    \        end\n        end\n        return true\n    else\n        return false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,",
  "    if is_sorted(unique(lst))\n        return true\n    else\n        return false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5]) \u2248\
    \ true\n@assert is_sorted([1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([1,\
    \ 3, 2, 4, 5]) \u2248 false\n@assert is_sorted([1, 2, 3, 4, 5, 6]) \u2248 true\n\
    @assert is_sorted([1, 2, 3, 4, 5, 6, 7]) \u2248 true\n@assert is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u2248 false\n@assert is_sorted([1, 2, 2, 3, 3, 4]) \u2248 true\n\
    @assert is_sorted([1, 2, 2, 2, 3, 4]) \u2248 false\n</cell>\n<text>\n3.2.3 is_sorted(lst::Vector{Int64},\
    \ reverse::Bool)", "    sorted = true\n    for x in lst\n        if x != lst[findfirst(x\
    \ == lst)]\n            sorted = false\n            break\n    end\n    return\
    \ sorted\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5, 4, 3,\
    \ 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2248 true\n@assert ", "    \n    sorted = true\n    \n    for\
    \ x in lst\n        if x != lst[end]\n            if x < lst[end]\n          \
    \      sorted = false\n                break\n            elseif x == lst[end]\n\
    \                sorted = false\n                break\n            else\n   \
    \             sorted = true\n                break\n        end\n    end\n   \
    \ \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5])\
    \ \u2248 true\n@assert is_sorted([1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([1,\
    \ 3, 2, 4, 5]) \u2248 false\n@assert is_sorted([1, 2, 3, 4, 5, 6]) \u2248 true\n\
    @assert is_sorted([1, 2, 3, 4, 5, 6, 7]) \u2248 true\n@assert is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u2248 false\n@assert is_sorted([1, 2, 2, 3, 3, 4]) \u2248 true\n\
    @assert is_sorted([1, 2, 2, 2, 3, 4]) \u2248 false\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns True if a number is even, and False if it is\
    \ odd.", "    lst = sort(lst)\n    last = lst[1]\n    for x in lst[2:end]\n  \
    \      if last < x\n            return false\n        last = x\n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a vector of integers and\
    \ returns the number of unique elements in the vector. Assume no negative numbers\
    \ and only integers.", "    lst = sort(lst)\n    return lst == lst\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_sorted([5]) \u2248 true\n@assert is_sorted([1,\
    \ 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([1, 3, 2, 4, 5]) \u2248 false\n\
    @assert is_sorted([1, 2, 3, 4, 5, 6]) \u2248 true\n@assert is_sorted([1, 2, 3,\
    \ 4, 5, 6, 7]) \u2248 true\n@assert is_sorted([1, 3, 2, 4, 5, 6, 7]) \u2248 false\n\
    @assert is_sorted([1, 2, 2, 3, 3, 4]) \u2248 true\n@assert is_sorted([1, 2, 2,\
    \ 2, 3, 4]) \u2248 false\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of integers in a list that are less than or equal to x. Assume that\
    \ x is positive.", "    sorted = true\n    for x in lst\n        if x != sort(x)\n\
    \            sorted = false\n            break\n    end\n    return sorted\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert is_sorted([5, 2, 3, 4, 1]) \u2248\
    \ true\n@assert is_sorted([5, 2, 3, 4, 1, 6]) \u2248 false\n@assert is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7]) \u2248 true\n@assert is_sorted([5, 2, 3, 4, 1, 6, 7]) \u2248\
    \ false\n@assert is_sorted([5, 2, 3, 4, 1, 6, 7]) \u2248 false\n@assert is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7]) \u2248 false\n@assert is_sorted([5, 2, 3, 4, 1, 6, 7]) \u2248\
    \ false\n@assert is_sorted([5, 2, 3, 4, 1, 6, 7]) \u2248 false\n@assert is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7]) \u2248 false\n@assert is_sorted([5, 2, 3, 4, 1, 6, 7]) \u2248\
    \ false\n@assert is_sorted([5, 2, 3, 4, 1, 6, 7]) \u2248 false\n@assert is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7]) \u2248 false\n@assert is_sorted([5, 2, 3, 4, 1, 6, 7]) \u2248\
    \ false\n@assert is_sorted([5, 2, 3, 4, 1, 6, 7]) \u2248 false\n@assert is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7]) \u2248 false\n@assert is_sorted([5, 2, 3, 4, 1, 6, 7]) \u2248\
    \ false\n@assert is_sorted([5, 2, 3, 4, 1, 6, 7]) \u2248 false\n@assert is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7]) \u2248 false\n@assert is_sorted([5, 2, 3, 4, 1, 6, 7]) \u2248\
    \ false\n@assert is_sorted([5, 2, 3, 4, 1, 6, 7]) \u2248 false\n@assert is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7]) \u2248 false\n@assert is_sorted([5, 2, 3, 4, 1, 6, 7]) \u2248\
    \ false\n@assert is_sorted([5, 2, 3, 4, 1, 6, 7]) \u2248 false\n@assert is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7]) \u2248 false\n@assert is_sorted([5, 2, 3, 4, 1, 6, 7]) \u2248\
    \ false\n@assert is_sorted([5, 2, 3, 4, 1, 6, 7]) \u2248 false\n@assert is_sorted([5,\
    \ 2, 3, 4, ", "    sorted = true\n    for x in lst\n        if x != sort(x)\n\
    \            sorted = false\n            break\n    end\n    return sorted\nend",
  "    sorted_list = sort(lst)\n    \n    if length(sorted_list) == length(lst)\n\
    \        for (i,j) in zip(sorted_list,lst)\n            if i == j\n          \
    \      return false\n            end\n        end\n        return true\n    end\n\
    \    return false\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,3,4,5,6,7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,3,4,5,6,7,8,9,10,11])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,",
  "    sorted = sort(lst)\n    last = sorted[end]\n    last = last-1 if last > 1 else\
    \ last\n    last = sorted[last]\n    return last == 0\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 6, 4, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 6, 4, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 4, 3, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 4, 3, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 6, 4, 3, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 6, 4, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 6, 4, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 4, 3, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 4, 3, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 6, 4, 3, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 6, 4, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 6, 4, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 4, 3, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 4, 3, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 6, 4, 3, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 6, 4, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 6, 4, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 4, 3, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 4, 3, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 6, 4, 3, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 6, 4, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 6, 4, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 4, 3, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 4, 3, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 6, 4, 3, 1])\n", "    if is_empty(lst)\n\
    \        return true\n    \n    sorted = sort(lst)\n    \n    if length(sorted)\
    \ == length(lst)\n        return true\n    \n    return false\nend", "    sorted\
    \ = true\n    for x in lst\n        if x != sort(x)\n            sorted = false\n\
    \            break\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 3, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5,\
    \ 6])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 3, 2, 4, 5, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 2, 2, 3, 4])\n</cell>\n<text>\nExercise\nWrite a function that\
    \ returns the number of times a given number appears in a given list. For example,\
    \ how many times does 3 appear in [1, 2, 3, 4, 5]? How about 3 in [1, 1, 2, 3,\
    \ 4, 5]? How about 3 in [1, 1, 1, 2, 3, 4, 5]? How about 3 in [1, 1, 1, 2, 3,\
    \ 4, 5]?", "    sorted = true\n    for x in lst\n        if x != sort(x)\n   \
    \         sorted = false\n        end\n    end\n    return sorted\nend", "   \
    \ sorted = sort(lst)\n    sorted.length == 1\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_sorted([5]) \u2248 true\n@assert is_sorted([1, 2, 3, 4, 5]) \u2248\
    \ true\n@assert is_sorted([1, 3, 2, 4, 5]) \u2248 false\n@assert is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u2248 true\n@assert is_sorted([1, 2, 3, 4, 5, 6, 7]) \u2248\
    \ true\n@assert is_sorted([1, 3, 2, 4, 5, 6, 7]) \u2248 false\n@assert is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u2248 true\n@assert is_sorted([1, 2, 2, 2, 3, 4]) \u2248 false\n\
    </cell>\n<text>\nis_sorted() is a higher-order function. It takes a function as\
    \ its argument and returns a new function which takes an argument and returns\
    \ a boolean.", "    sorted = true\n    for x in lst\n        if x != sort(x)\n\
    \            sorted = false\n            break\n    end\n    return sorted\nend\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5]) \u279E true\nis_sorted([1,\
    \ 3, 2, 4, 5]) \u279E false\nis_sorted([1, 2, 3, 4, 5, 6]) \u279E true\nis_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E true\nis_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E false\n\
    is_sorted([1, 2, 2, 3, 3, 4]) \u279E true\nis_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ false\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of unique elements in a given list.", "    if is_sorted(unique(lst))\n     \
    \   return true\n    else\n        return false\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    sorted = true\n    for x in lst\n        if x !=\
    \ sort(x)\n            sorted = false\n            break\n    end\n    return\
    \ sorted\nend", "    sorted = true\n    seen = Set()\n    for x in lst\n     \
    \   if x in seen\n            sorted = false\n            break\n        seen.add(x)\n\
    \    end\n    return sorted\nend", "    sorted = sort(lst)\n    last = sorted[end]\n\
    \    i = length(sorted)\n    while i > 1\n        if sorted[i-1] == last\n   \
    \         return false\n        i -= 1\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n\
    @assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2,\
    \ 3, 4, 5]) \u2248 false\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 false\n\
    @assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 false\n@assert is_sorted([5, 1, 2,\
    \ 3, 4, 5]) \u2248 false\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 false\n\
    @assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 false\n@assert is_sorted([5, 1, 2,\
    \ 3, 4, 5]) \u2248 false\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 false\n\
    @assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 false\n@assert is_sorted([5, 1, 2,\
    \ 3, 4, 5]) \u2248 false\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 false\n\
    @assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 false\n@assert is_sorted([5, 1, 2,\
    \ 3, 4, 5]) \u2248 false\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 false\n\
    @assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 false\n@assert is_sorted([5, 1, 2,\
    \ 3, 4, 5]) \u2248 false\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 false\n\
    @assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 false\n@assert is_sorted([5, 1, 2,\
    \ 3, 4, 5]) \u2248 false\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 false\n\
    @assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 false\n@assert is_sorted([5, 1, 2,\
    \ 3, 4, 5]) \u2248 false\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 false\n\
    @assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 false\n@assert is_sorted([5, 1, 2,\
    \ 3, 4, 5]) \u2248 false\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 false\n\
    @assert is_sorted([5, 1, 2, 3, 4, 5]) \uFFFD", "    sorted = true\n    for x in\
    \ lst\n        if x != sort(x)\n            sorted = false\n            break\n\
    \    end\n    return sorted\nend", "    sorted = true\n    for x in lst\n    \
    \    if sorted == false\n            sorted = x < lst[end]\n        else\n   \
    \         sorted = sorted && x < lst[end]\n        end\n    end\n    return sorted\n\
    end\n</cell>\n<text>\nis_sorted([1, 2, 3, 4, 5]) \u279E True\nis_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\nis_sorted([1, 2, 3, 4, 5, 6]) \u279E True\nis_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\nis_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\nis_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\nis_sorted([1, 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1, 1, 2, 3, 4,\
    \ 5]) \u279E False\nis_sorted([1, 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1,\
    \ 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1, 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1,\
    \ 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1, 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1,\
    \ 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1, 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1,\
    \ 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1, 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1,\
    \ 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1, 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1,\
    \ 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1, 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1,\
    \ 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1, 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1,\
    \ 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1, 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1,\
    \ 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1, 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1,\
    \ 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1, 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1,\
    \ 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1, 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1,\
    \ 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1, 1, 2, 3, 4, 5]) \u279E", "    sorted\
    \ = sort(lst)\n    uniques = unique(sorted)\n    lengths = length(uniques)\n \
    \   return lengths == length(lst)\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, ", "    \n    if length(lst)\
    \ == 1 \n        return true\n    \n    last = lst[1]\n    for i in lst[2:end]\n\
    \        if i > last\n            return false\n        last = i\n    return true\n\
    end", "    sorted = true\n    for x in lst\n        if x != sort(x)\n        \
    \    sorted = false\n            break\n    end\n    return sorted\nend", "  \
    \  sort(lst) == lst\nend", "    sorted = true\n    for x in lst\n        if x\
    \ != sort(x)\n            sorted = false\n            break\n    end\n    return\
    \ sorted\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-",
  "    sort(lst) == lst\nend", "    sort(lst) == lst\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_", "    sorted = sort(lst)\n    last = sorted[end]\n\
    \    for x in lst\n        if last < x\n            return false\n        last\
    \ = x\n    return true\nend", "    sorted = true\n    for x in lst\n        if\
    \ x != sort(x)\n            sorted = false\n            break\n    end\n    return\
    \ sorted\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5]) \u2248\
    \ true\n@assert is_sorted([1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([1,\
    \ 3, 2, 4, 5]) \u2248 false\n@assert is_sorted([1, 2, 3, 4, 5, 6]) \u2248 true\n\
    @assert is_sorted([1, 2, 3, 4, 5, 6, 7]) \u2248 true\n@assert is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u2248 false\n@assert is_sorted([1, 2, 2, 3, 3, 4]) \u2248 true\n\
    @assert is_sorted([1, 2, 2, 2, 3, 4]) \u2248 false\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of unique elements in a given list.\
    \ Assume no duplicates.", "    sorted = true\n    for x in lst\n        if x <\
    \ sorted\n            sorted = false\n        end\n    end\n    return sorted\n\
    end\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5, 6])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 3, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2,\
    \ 3, 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 2, 3, 4])\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a vector of numbers and\
    \ returns the number of unique numbers in the vector. Assume no negative numbers\
    \ and only integers.", "    sorted = sort(lst)\n    unique = unique(sorted)\n\
    \    return length(unique) == length(sorted)\nend", "    sorted = true\n    for\
    \ x in lst\n        if x < lst[end(x)]\n            sorted = false\n        end\n\
    \    end\n    return sorted\nend", "    sorted = true\n    for x in lst\n    \
    \    if x != sort(x)\n            sorted = false\n            break\n    end\n\
    \    return sorted\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,",
  "    sorted = sort(lst)\n    last = sorted[end]\n    last = last-1 if last > 1 else\
    \ last\n    for x in lst\n        if x == last \n            return false\n  \
    \  return true\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2,\
    \ 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, ", "    if is_sorted(unique(lst))\n  \
    \      return true\n    else\n        return false\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 3, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5,\
    \ 6])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 3, 2, 4, 5, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 2, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2,\
    \ 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2,\
    \ 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2,\
    \ 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2,\
    \ 3, ", "    sorted_list = sort(lst)\n    \n    if length(sorted_list) == length(lst)\n\
    \        return true\n    else\n        return false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 3, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 2, 3, 4, 5, 6])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4,\
    \ 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 3, 2, 4, 5, 6,\
    \ 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 2, 2, 3, 4])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of unique elements in a given list.",
  "    sorted = sort(lst)\n    \n    if length(sorted) == length(lst)\n        for\
    \ (i,x) in enumerate(lst)\n            if x != sorted[i]\n                return\
    \ false\n            end\n        end\n        return true\n    else\n       \
    \ return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5])\
    \ \u2260 true\n@assert is_sorted([1, 2, 3, 4, 5]) \u2260 true\n@assert is_sorted([1,\
    \ 3, 2, 4, 5]) \u2260 false\n@assert is_sorted([1, 2, 3, 4, 5, 6]) \u2260 true\n\
    @assert is_sorted([1, 2, 3, 4, 5, 6, 7]) \u2260 true\n@assert is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u2260 false\n@assert is_sorted([1, 2, 2, 3, 3, 4]) \u2260 true\n\
    @assert is_sorted([1, 2, 2, 2, 3, 4]) \u2260 false\n@assert is_sorted([1, 1, 2,\
    \ 2, 3, 4]) \u2260 false\n@assert is_sorted([1, 1, 1, 2, 3, 4]) \u2260 false\n\
    @assert is_sorted([1, 1, 1, 2, 2, 3]) \u2260 false\n@assert is_sorted([1, 1, 1,\
    \ 2, 2, 3]) \u2260 false\n@assert is_sorted([1, 1, 1, 2, 2, 3, 4]) \u2260 false\n\
    @assert is_sorted([1, 1, 1, 2, 2, 3, 4]) \u2260 false\n@assert is_sorted([1, 1,\
    \ 1, 2, 2, 3, 4]) \u2260 false\n@assert is_sorted([1, 1, 1, 2, 2, 3, 4]) \u2260\
    \ false\n@assert is_sorted([1, 1, 1, 2, 2, 3, 4]) \u2260 false\n@assert is_sorted([1,\
    \ 1, 1, 2, 2, 3, 4]) \u2260 false\n@assert is_sorted([1, 1, 1, 2, 2, 3, 4]) \u2260\
    \ false\n@assert is_sorted([1, 1, 1, 2, 2, 3, 4]) \u2260 false\n@assert is_sorted([1,\
    \ 1, 1, 2, 2, 3, 4]) \u2260 false\n@assert is_sorted([1, 1, 1, 2, 2, 3, 4]) \u2260\
    \ false\n@assert is_sorted([1, 1, 1, 2, 2, 3, 4]) \u2260 false\n@assert is_sorted([1,\
    \ 1, 1, 2, 2, 3, 4]) \u2260 false\n@assert is_sorted([1, 1, 1, 2, 2, 3, 4]) \u2260\
    \ false\n@assert is_sorted([1, 1, 1, 2, 2, 3, 4]) \u2260 false\n@assert is_sorted([1,\
    \ 1, 1, 2, 2, 3, 4]) \u2260 false\n@assert is_sorted([1, 1, 1, 2, 2, 3, 4]) \u2260\
    \ false\n@assert is_sorted([1, 1, 1, 2, 2, 3, 4]) \u2260 false\n@assert is_sorted(",
  "    sorted = true\n    for x in lst\n        if x < sorted\n            sorted\
    \ = false\n        end\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])", "    lst = sort(lst)\n    last = lst[1]\n    for i in 2:length(lst)\n\
    \        if lst[i] != last\n            return false\n        last = lst[i]\n\
    \    end\n    return true\nend\n</code>\n<|/ a tags=julia,sorting |>\n<| a tags=julia,sorting\
    \ |>\n<code>", "    sort(lst) == lst\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_sorted([5]) \u2248 true\n@assert is_sorted([1, 2, 3, 4, 5]) \u2248\
    \ true\n@assert is_sorted([1, 3, 2, 4, 5]) \u2248 false\n@assert is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u2248 true\n@assert is_sorted([1, 2, 3, 4, 5, 6, 7]) \u2248\
    \ true\n@assert is_sorted([1, 3, 2, 4, 5, 6, 7]) \u2248 false\n@assert is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u2248 true\n@assert is_sorted([1, 2, 2, 2, 3, 4]) \u2248 false\n\
    </cell>\n<text>\nExercise\nWrite a function that returns whether a number is even.",
  "    \n    sorted_list = sort(lst)\n    \n    if length(sorted_list) == length(lst)\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if is_sorted(lst) == true\n        return true\n    else\n        last = lst[1]\n\
    \        for elt in lst[2:end]\n            if elt > last\n                return\
    \ false\n            else\n                last = elt\n        end\n        return\
    \ true\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3,\
    \ 4, 5]) \u279E true\nis_sorted([1, 3, 2, 4, 5]) \u279E false\nis_sorted([1, 2,\
    \ 3, 4, 5, 6]) \u279E true\nis_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E true\nis_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E false\nis_sorted([1, 2, 2, 3, 3, 4]) \u279E true\n\
    is_sorted([1, 2, 2, 2, 3, 4]) \u279E false\n</cell>\n<text>\nExercise\nWrite a\
    \ function that returns the number of unique elements in a given list.", "   \
    \ sorted = sort(lst)\n    return sorted == lst\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert is_sorted([5, 2, 3, 4,\
    \ 1]) \u2248 true\n@assert is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) \u2248 true\n@assert is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert is_sorted([5, 2, 3, 4, 1]) \u2248\
    \ true\n@assert is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) \u2248 true\n@assert is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert is_sorted([5, 2, 3, 4, 1]) \u2248\
    \ true\n@assert is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) \u2248 true\n@assert is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert is_sorted([5, 2, 3, 4, 1]) \u2248\
    \ true\n@assert is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) \u2248 true\n@assert is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert is_sorted([5, 2, 3, 4, 1]) \u2248\
    \ true\n@assert is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) \u2248 true\n@assert is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert is_sorted([5, 2, 3, 4, 1]) \u2248\
    \ true\n@assert is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) \u2248 true\n@assert is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 2, 3, 4, ", "    sorted = true\n    for x in lst\n        if x\
    \ != sort(x)\n            sorted = false\n            break\n    end\n    return\
    \ sorted\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 3, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5, 6])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 3, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2,\
    \ 3, 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 2, 3, 4])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of unique\
    \ elements in a given list.", "    sorted = sort(lst)\n    last = sorted[end]\n\
    \    last = last.last if length(sorted) > 1 else last\n    return last == lst[end]\n\
    end", "    sorted = true\n    for x in lst\n        if sorted == false\n     \
    \       if x == lst[1]\n                sorted = true\n            else\n    \
    \            sorted = false\n        end\n    end\n    return sorted\nend", " \
    \   sorted = sort(lst)\n    uniques = unique(sorted)\n    return length(uniques)\
    \ == length(sorted)\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 3,\
    \ 2, 4, 1])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of numbers and returns the number of unique numbers in that vector. Assume no\
    \ negative numbers and only integers.", "    if is_sorted(lst) == true\n     \
    \   return true\n    \n    sorted = sort(lst)\n    \n    if length(lst) == length(sorted)\n\
    \        return true\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    sorted = sort(lst)\n    \n    if length(sorted) == length(lst)\n        for\
    \ (i,j) in zip(sorted, lst)\n            if i != j\n                return false\n\
    \        return true\n    else\n        return false\n    end\nend\n</cell>\n\
    <text>\nis_sorted([1, 2, 3, 4, 5]) \u279E True", "    sorted_lst = sort(lst)\n\
    \    length(sorted_lst) == length(lst) && all(sorted_lst[i] == lst[i] | i \u2208\
    \ 1:length(sorted_lst))\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</", "    \n \
    \   if length(lst) == 0 \n        return true\n    end\n    \n    last = lst[1]\n\
    \    \n    for x in lst[2:end]\n        if x == last\n            return false\n\
    \        else\n            last = x\n        end\n    end\n    \n    return true\n\
    end", "    sorted = true\n    for x in lst\n        if x != sort(x)\n        \
    \    sorted = false\n        end\n    end\n    return sorted\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-", "    sorted = sort(lst)\n   \
    \ sorted.length == 1\nend", "    if is_sorted(lst) == true \n        return true\n\
    \    \n    sorted = sort(lst)\n    \n    if length(sorted) == length(lst) \n \
    \       return true\n    \n    return false\nend", "    sorted = sort(lst)\n \
    \   return sorted == lst\nend", "    sorted = true\n    for x in lst\n       \
    \ if x < sorted\n            sorted = false\n        end\n    end\n    return\
    \ sorted\nend", "    \n    if length(lst) == 1 \n        return true\n    \n \
    \   last = lst[1]\n    for x in lst[2:end]\n        if x == last\n           \
    \ return false\n        last = x\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 3, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5,\
    \ 6])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 3, 2, 4, 5, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 2, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2,\
    \ 3, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3,\
    \ 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3, 3,\
    \ 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3, 3,\
    \ 3, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3,\
    \ 3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 1, 2, 2, ", "    sorted = sort(lst)\n\
    \    return all(sorted == lst)\nend", "    sorted = sort(lst)\n    return all(sorted\
    \ == lst)\nend\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5, 2, 3,\
    \ 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2,\
    \ 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, ",
  "    if is_sorted(lst) == true\n        return true\n    \n    sorted = sort(lst)\n\
    \    \n    if length(sorted) == length(lst)\n        return true\n    \n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, ", "    sorted = sort(lst)\n   \
    \ last = sorted[end]\n    last = last.last if length(sorted) > 1 \n    last =\
    \ last.last if length(sorted) > 1 \n    return last == sorted[1]\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 5])\n</", "    sorted = sort(lst)\n\
    \    uniques = unique(sorted)\n    lengths = length(uniques)\n    \n    if lengths\
    \ == length(lst)\n        return true\n    else\n        return false\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<text>\nExercise: Write a function that checks if a list is sorted\n\
    in descending order. If list has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.", "    sorted = sort(lst)\n\
    \    last = sorted[end]\n    for x in lst\n        if last < x\n            return\
    \ false\n        last = x\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell", "    sorted = sort(lst)\n    \n    if length(sorted) == length(lst)\n\
    \        return true\n    else\n        return false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-", "    sorted = true\n    for x\
    \ in lst\n        if x != sort(x)\n            sorted = false\n            break\n\
    \    end\n    return sorted\nend", "    sorted = true\n    for x in lst\n    \
    \    if x != sort(x)\n            sorted = false\n            break\n    end\n\
    \    return sorted\nend\n</cell>\n<code language=julia-1.4>\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) \u2261 true\n@assert is_sorted([5, 3, 2, 4, 2]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 3]) \u2261 false\n@assert is_sorted([5, 3, 2, 4,\
    \ 4]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 5]) \u2261 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 6]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 7, 1]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 7, 2]) \u2261 false\n@assert is_sorted([5, 3, 2,\
    \ 4, 7, 3]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 7, 4]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 7, 5]) \u2261 false\n@assert is_sorted([5, 3, 2,\
    \ 4, 7, 6]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 7, 7, 1]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 7, 7, 2]) \u2261 false\n@assert is_sorted([5, 3,\
    \ 2, 4, 7, 7, 3]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 7, 7, 4]) \u2261\
    \ false\n@assert is_sorted([5, 3, 2, 4, 7, 7, 5]) \u2261 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 7, 7, 6]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 7, 7, 7, 1])\
    \ \u2261 false\n@assert is_sorted([5, 3, 2, 4, 7, 7, 7, 2]) \u2261 false\n@assert\
    \ is_sorted([5, 3, 2, 4, 7, 7, 7, 3]) \u2261 false\n@assert is_sorted([5, 3, 2,\
    \ 4, 7, 7, 7, 4]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 7, 7, 7, 5]) \u2261\
    \ false\n@assert is_sorted([5, 3, 2, 4, 7, 7, 7, 6]) \u2261 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 7, 7, 7, 7, 1]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 7, 7,\
    \ 7, 7, 2]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 7, 7, 7, 7, 3]", "  \
    \  sorted = sort(lst)\n    \n    if length(sorted) == length(lst)\n        return\
    \ true\n    else\n        return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @test is_sorted([5, 3, 2, 4, 1]) == true\n@test is_sorted([5, 3, 2, 4, 2]) ==\
    \ false\n@test is_sorted([5, 3, 2, 4, 3]) == true\n@test is_sorted([5, 3, 2, 4,\
    \ 4]) == false\n@test is_sorted([5, 3, 2, 4, 5]) == true\n@test is_sorted([5,\
    \ 3, 2, 4, 6]) == false\n@test is_sorted([5, 3, 2, 4, 7]) == true\n@test is_sorted([5,\
    \ 3, 2, 4, 8]) == false\n@test is_sorted([5, 3, 2, 4, 9]) == true\n@test is_sorted([5,\
    \ 3, 2, 4, 10]) == false\n@test is_sorted([5, 3, 2, 4, 11]) == true\n@test is_sorted([5,\
    \ 3, 2, 4, 12]) == false\n@test is_sorted([5, 3, 2, 4, 13]) == true\n@test is_sorted([5,\
    \ 3, 2, 4, 14]) == false\n@test is_sorted([5, 3, 2, 4, 15]) == true\n@test is_sorted([5,\
    \ 3, 2, 4, 16]) == false\n@test is_sorted([5, 3, 2, 4, 17]) == true\n@test is_sorted([5,\
    \ 3, 2, 4, 18]) == false\n@test is_sorted([5, 3, 2, 4, 19]) == true\n@test is_sorted([5,\
    \ 3, 2, 4, 20]) == false\n@test is_sorted([5, 3, 2, 4, 21]) == true\n@test is_sorted([5,\
    \ 3, 2, 4, 22]) == false\n@test is_sorted([5, 3, 2, 4, 23]) == true\n@test is_sorted([5,\
    \ 3, 2, 4, 24]) == false\n@test is_sorted([5, 3, 2, 4, 25]) == true\n@test is_sorted([5,\
    \ 3, 2, 4, 26]) == false\n@test is_sorted([5, 3, 2, 4, 27]) == true\n@test is_sorted([5,\
    \ 3, 2, 4, 28]) == false\n@test is_sorted([5, 3, 2, 4, 29]) == true\n@test is_sorted([5,\
    \ 3, 2, 4, 30]) == false\n@test is_sorted([5, 3, 2, 4, 31]) == true\n@test is_sorted([5,\
    \ 3, 2, 4, 32]) == false\n@test is_sorted([5, 3, 2, 4, 33]) == true\n@test is_sorted([5,\
    \ 3, 2, 4, 34]) == false\n@test is_sorted([5, 3, 2, 4, 35]) == true\n@test is_sorted([5,\
    \ 3, 2, 4, 36]) == false\n@test is_sorted([5, 3, 2, 4, 37]) == true\n@test ",
  "    lst = sort(lst)\n    last = lst[1]\n    for i in 2:length(lst)\n        if\
    \ lst[i] > last\n            return false\n        last = lst[i]\n    end\n  \
    \  return true\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of numbers and returns the sum of the numbers. Assume no negative numbers\
    \ and only integers.", "    \n    sorted = true\n    for x in lst\n        if\
    \ x != sort(x)[1]\n            sorted = false\n            break\n        end\n\
    \    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell", "   \
    \ sorted = sort(lst)\n    last = sorted[end]\n    last = last.last if length(sorted)\
    \ > 1 else last\n    last = last.last if length(sorted) > 1 else last\n    return\
    \ last == lst[1]\nend", "    sorted = sort(lst)\n    unique = unique(sorted)\n\
    \    return length(unique) == length(sorted)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_sorted([5, 3, 2, 4, 1]) \u2261 true\n@assert is_sorted([5, 3, 2, 4,\
    \ 2]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 3]) \u2261 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 4]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 5]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 6]) \u2261 false\n@assert is_sorted([5, 3, 2, 4,\
    \ 7, 8]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 7, 9]) \u2261 false\n@assert\
    \ is_sorted([5, 3, 2, 4, 7, 10]) \u2261 false\n@assert is_sorted([5, 3, 2, 4,\
    \ 7, 11]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 7, 12]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 7, 13]) \u2261 false\n@assert is_sorted([5, 3,\
    \ 2, 4, 7, 14]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 7, 15]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 7, 16]) \u2261 false\n@assert is_sorted([5, 3,\
    \ 2, 4, 7, 17]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 7, 18]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 7, 19]) \u2261 false\n@assert is_sorted([5, 3,\
    \ 2, 4, 7, 20]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 7, 21]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 7, 22]) \u2261 false\n@assert is_sorted([5, 3,\
    \ 2, 4, 7, 23]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 7, 24]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 7, 25]) \u2261 false\n@assert is_sorted([5, 3,\
    \ 2, 4, 7, 26]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 7, 27]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 7, 28]) \u2261 false\n@assert is_sorted([5, 3,\
    \ 2, 4, 7, 29]) \u2261 false\n@assert is_sorted([5, 3, 2, ", "    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.1>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.1>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.1>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.1>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.1>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.1>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.1>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.1>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.1>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.1>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.1>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.1>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.1>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.1>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.1>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.1>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.1>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.1>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.1>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.1>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.1>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.1>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.1>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.1>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.1>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.1>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.1>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.1>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-", "    sorted = true\n    for x in lst\n      \
    \  if x != sort(x)\n            sorted = false\n            break\n    end\n \
    \   return sorted\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2,\
    \ 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, ", "    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 3, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5,\
    \ 6])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 3, 2, 4, 5, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 2, 2, 3, 4])\n</cell>\n<text>\nExercise\nWrite a function that\
    \ returns the number of unique elements in a given list.", "    sorted_list =\
    \ sort(lst)\n    \n    if length(sorted_list) == length(lst)\n        for (i,val)\
    \ in enumerate(sorted_list)\n            if val != lst[i]\n                return\
    \ false\n            end\n        end\n        return true\n    else\n       \
    \ return false\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,3,4,5,6,7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,3,4,5,6,7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,", "    sorted\
    \ = sort(lst)\n    \n    if length(sorted) == length(lst)\n        for (i,j) in\
    \ zip(sorted, lst)\n            if i != j\n                return false\n    \
    \    return true\n    else\n        return false\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5]) \u279E true\nis_sorted([1, 3,\
    \ 2, 4, 5]) \u279E false\nis_sorted([1, 2, 3, 4, 5, 6]) \u279E true\nis_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E true\nis_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E false\n\
    is_sorted([1, 2, 2, 3, 3, 4]) \u279E true\nis_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ false\n</cell>\n<text>\nExercise 2\nWrite a function that returns the first\
    \ element of a vector. Assume that vector has at least 1 element.", "    sorted\
    \ = true\n    for x in lst\n        if x < lst[end(x)]\n            sorted = false\n\
    \        end\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 3, 4, 5]) \u279E true\nis_sorted([1, 3, 2, 4, 5]) \u279E false\n\
    is_sorted([1, 2, 3, 4, 5, 6]) \u279E true\nis_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ true\nis_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E false\nis_sorted([1, 2, 2, 3,\
    \ 3, 4]) \u279E true\nis_sorted([1, 2, 2, 2, 3, 4]) \u279E false\n</cell>\n<text>\n\
    Exercise: Write a function that returns True if a list is sorted in descending\
    \ order. Assume no negative numbers and only integers.", "    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend", "    sorted_lst = sort(lst)\n\
    \    \n    if length(sorted_lst) == length(lst)\n        return true\n    else\n\
    \        return false\n    end\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  lst = sort(lst)\n    last = lst[1]\n    for x in lst[2:end]\n        if x ==\
    \ last\n            return false\n        last = x\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,3,4,5,6,", "    \n    sorted_list = sort(lst)\n    \n    if length(sorted_list)\
    \ == length(lst)\n        return true\n    else\n        return false\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n", "    sorted = true\n    for x in lst\n\
    \        if x != sort(x)\n            sorted = false\n            break\n    end\n\
    \    return sorted\nend", "    sorted = true\n    for x in lst\n        if x !=\
    \ sort(x)\n            sorted = false\n            break\n    end\n    return\
    \ sorted\nend\n</cell>\n<code language=julia-1.4>\nis_sorted([5, 1, 2, 3, 4, 5])\n\
    </cell>\n<code language=julia-1.4>\nis_sorted([1, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.4>\nis_sorted([1, 3, 2, 4, 5])\n</cell>\n<code language=julia-1.4>\n\
    is_sorted([1, 2, 3, 4, 5, 6])\n</cell>\n<code language=julia-1.4>\nis_sorted([1,\
    \ 2, 3, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.4>\nis_sorted([1, 3, 2,\
    \ 4, 5, 6, 7])\n</cell>\n<code language=julia-1.4>\nis_sorted([1, 2, 2, 3, 3,\
    \ 4])\n</cell>\n<code language=julia-1.4>\nis_sorted([1, 2, 2, 2, 3, 4])\n</cell>\n\
    <code language=julia-1.4>\nis_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.4>\n\
    is_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.4>\nis_sorted([5,\
    \ 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.4>\nis_sorted([5, 1, 2, 3,\
    \ 4, 5])\n</cell>\n<code language=julia-1.4>\nis_sorted([5, 1, 2, 3, 4, 5])\n\
    </cell>\n<code language=julia-1.4>\nis_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.4>\nis_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.4>\n\
    is_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.4>\nis_sorted([5,\
    \ 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.4>\nis_sorted([5, 1, 2, 3,\
    \ 4, 5])\n</cell>\n<code language=julia-1.4>\nis_sorted([5, 1, 2, 3, 4, 5])\n\
    </cell>\n<code language=julia-1.4>\nis_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.4>\nis_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.4>\n\
    is_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.4>\nis_sorted([5,\
    \ 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.4>\nis_sorted([5, 1, 2, 3,\
    \ 4, 5])\n</cell>\n<code language=julia-1.4>\nis_sorted([5, 1, 2, 3, 4, 5])\n\
    </cell>\n<code language=julia-1.4>\nis_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.4>\nis_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code language=",
  "    \n    sorted = sort(lst)\n    \n    if length(sorted) == length(lst)\n    \
    \    return true\n    else\n        return false\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=", "    sorted = true\n    for x in lst\n\
    \        if x != sort(x)\n            sorted = false\n            break\n    end\n\
    \    return sorted\nend", "    sorted = sort(lst)\n    unique = unique(sorted)\n\
    \    length(unique) == length(sorted)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([1, 2, 3,\
    \ 4, 5]) \u2248 false\n@assert is_sorted([1, 3, 2, 4, 5]) \u2248 false\n@assert\
    \ is_sorted([1, 2, 3, 4, 5, 6]) \u2248 true\n@assert is_sorted([1, 2, 3, 4, 5,\
    \ 6, 7]) \u2248 true\n@assert is_sorted([1, 3, 2, 4, 5, 6, 7]) \u2248 false\n\
    @assert is_sorted([1, 2, 2, 3, 3, 4]) \u2248 true\n@assert is_sorted([1, 2, 2,\
    \ 2, 3, 4]) \u2248 false\n</cell>\n<text>\nExercise 2\nWrite a function that checks\
    \ whether a list contains all unique numbers. Assume no negative numbers and only\
    \ integers.", "    sorted = sort(lst)\n    return all(sorted == lst)\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, ", "    sort(lst)\
    \ == lst\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5]) \u2248\
    \ true\n@assert is_sorted([1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([1,\
    \ 3, 2, 4, 5]) \u2248 false\n@assert is_sorted([1, 2, 3, 4, 5, 6]) \u2248 true\n\
    @assert is_sorted([1, 2, 3, 4, 5, 6, 7]) \u2248 true\n@assert is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u2248 false\n@assert is_sorted([1, 2, 2, 3, 3, 4]) \u2248 true\n\
    @assert is_sorted([1, 2, 2, 2, 3, 4]) \u2248 false\n</cell>\n<text>\nis_sorted()\
    \ is a generic function in Julia. Julia will automatically choose the most efficient\
    \ implementation for the data type you provide.", "    sorted = true\n    for\
    \ x in lst\n        if x != sort(x)\n            sorted = false\n            break\n\
    \    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n@time is_sorted([5,\
    \ 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1,\
    \ 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2,\
    \ 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3,\
    \ 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4,\
    \ 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n\
    @time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time\
    \ is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5,\
    \ 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1,\
    \ 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2,\
    \ 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3,\
    \ 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4,\
    \ 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n\
    @time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time\
    \ is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5,\
    \ 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1,\
    \ 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2,\
    \ 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3,\
    \ 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4,\
    \ 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n\
    @time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time\
    \ is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5,\
    \ 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_", "    sorted_list\
    \ = sort(lst)\n    \n    if length(sorted_list) == length(lst)\n        for (i,j)\
    \ in zip(sorted_list, lst)\n            if i == j\n                return false\n\
    \            end\n        end\n        return true\n    else\n        return false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5, 1, 2,\
    \ 3, 4]) \u2261 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2261 false\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5, 6]) \u2261 true\n@assert is_sorted([5, 1, 2, 3,\
    \ 4, 5, 6, 7]) \u2261 true\n@assert is_sorted([5, 1, 2, 2, 3, 3, 4]) \u2261 false\n\
    @assert is_sorted([5, 1, 2, 2, 2, 3, 4]) \u2261 false\n@assert is_sorted([5, 1,\
    \ 2, 2, 2, 3, 3]) \u2261 false\n@assert is_sorted([5, 1, 2, 2, 2, 3, 2]) \u2261\
    \ false\n@assert is_sorted([5, 1, 2, 2, 2, 3, 1]) \u2261 false\n@assert is_sorted([5,\
    \ 1, 2, 2, 2, 3, 0]) \u2261 false\n@assert is_sorted([5, 1, 2, 2, 2, 3, -1]) \u2261\
    \ false\n@assert is_sorted([5, 1, 2, 2, 2, 3, -2]) \u2261 false\n@assert is_sorted([5,\
    \ 1, 2, 2, 2, 3, -3]) \u2261 false\n@assert is_sorted([5, 1, 2, 2, 2, 3, -4])\
    \ \u2261 false\n@assert is_sorted([5, 1, 2, 2, 2, 3, -5]) \u2261 false\n@assert\
    \ is_sorted([5, 1, 2, 2, 2, 3, -6]) \u2261 false\n@assert is_sorted([5, 1, 2,\
    \ 2, 2, 3, -7]) \u2261 false\n@assert is_sorted([5, 1, 2, 2, 2, 3, -8]) \u2261\
    \ false\n@assert is_sorted([5, 1, 2, 2, 2, 3, -9]) \u2261 false\n@assert is_sorted([5,\
    \ 1, 2, 2, 2, 3, -10]) \u2261 false\n@assert is_sorted([5, 1, 2, 2, 2, 3, -11])\
    \ \u2261 false\n@assert is_sorted([5, 1, 2, 2, 2, 3, -12]) \u2261 false\n@assert\
    \ is_sorted([5, 1, 2, 2, 2, 3, -13]) \u2261 false\n@assert is_sorted([5, 1, 2,\
    \ 2, 2, 3, -14]) \u2261 false\n@assert is_sorted([5, 1, 2, 2, 2, 3, -15]) \u2261\
    \ false\n@assert is_sorted([5, 1, 2, 2, 2, 3, -16]) \u2261 false\n@assert is_sorted([5,\
    \ 1, 2, 2, 2, 3, -17]) ", "    sorted = true\n    for x in lst\n        if x !=\
    \ sort(x)\n            sorted = false\n        end\n    end\n    return sorted\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5, 1, 2, 3, 4, 5])\
    \ \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5,\
    \ 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n\
    @assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2,\
    \ 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]", "    \n    sorted = sort(lst)\n    if length(sorted) == length(lst)\n \
    \       return true\n    else\n        return false\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5]) \u279E true\nis_sorted([1, 3,\
    \ 2, 4, 5]) \u279E false\nis_sorted([1, 2, 3, 4, 5, 6]) \u279E true\nis_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E true\nis_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E false\n\
    is_sorted([1, 2, 2, 3, 3, 4]) \u279E true\nis_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ false\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of\
    \ numbers and returns a vector of numbers that are not in the original vector.\
    \ Assume no negative numbers and only integers.", "    sorted = true\n    for\
    \ x in lst\n        if x != sort(x)\n            sorted = false\n            break\n\
    \    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of unique\
    \ elements in a given list.", "    sorted = sort(lst)\n    last = sorted[end]\n\
    \    for x in lst\n        if last < x\n            return false\n        last\
    \ = x\n    return true\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 3, 2, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5, 6])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 3, 2, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 2, 2, 3, 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 2,\
    \ 3, 4])\n</cell>\n<text>\nExercise\nWrite a function that takes a vector of numbers\
    \ and returns a vector of booleans indicating whether each number is greater than\
    \ the previous number. For example, if the input vector is [5, 3, 7, 2, 9, 1,\
    \ 4] then the output vector would be [false, true, false, false, true, false,\
    \ true].", "    sorted = true\n    for x in lst\n        if x != sort(x)\n   \
    \         sorted = false\n        end\n    end\n    return sorted\nend", "   \
    \ sorted = sort(lst)\n    uniques = unique(sorted)\n    return length(uniques)\
    \ == length(sorted)\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5,\
    \ 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n\
    @assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2,\
    \ 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 ", "    sorted = true\n    for x in lst\n\
    \        if x != sort(x)\n            sorted = false\n            break\n    end\n\
    \    return sorted\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([1,\
    \ 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([1, 3, 2, 4, 5]) \u2248 false\n\
    @assert is_sorted([1, 2, 3, 4, 5, 6]) \u2248 true\n@assert is_sorted([1, 2, 3,\
    \ 4, 5, 6, 7]) \u2248 true\n@assert is_sorted([1, 3, 2, 4, 5, 6, 7]) \u2248 false\n\
    @assert is_sorted([1, 2, 2, 3, 3, 4]) \u2248 true\n@assert is_sorted([1, 2, 2,\
    \ 2, 3, 4]) \u2248 false\n</cell>\n<text>\nExercise 3\nWrite a function that checks\
    \ if a number is even.", "    \n    sorted = true\n    for x in lst\n        if\
    \ x != lst[findfirst(x == lst)]\n            sorted = false\n            break\n\
    \        end\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 3, 4, 5]) \u279E true\nis_sorted([1, 3, 2, 4, 5]) \u279E false\n\
    is_sorted([1, 2, 3, 4, 5, 6]) \u279E true\nis_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ true\nis_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E false\nis_sorted([1, 2, 2, 3,\
    \ 3, 4]) \u279E true\nis_sorted([1, 2, 2, 2, 3, 4]) \u279E false\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns True if a number is evenly divisible\
    \ by 3.", "    sorted = true\n    for x in lst\n        if sorted == false\n \
    \           if x == lst[1]\n                sorted = true\n            else\n\
    \                sorted = false\n        else\n            if x < lst[1]\n   \
    \             sorted = false\n            else\n                sorted = true\n\
    \        end\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\n\
    </cell", "    lst = sort(lst)\n    last = lst[1]\n    for i in 2:length(lst)\n\
    \        if lst[i] != last\n            return false\n        last = lst[i]\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 3, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5, 6])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 3, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2,\
    \ 3, 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 2, 3, 4])\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the number of unique\
    \ elements in a given list.", "    sorted = true\n    for x in lst\n        if\
    \ x != sort(x)\n            sorted = false\n            break\n    end\n    return\
    \ sorted\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 3, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5, 6])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 3, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2,\
    \ 3, 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 2, 3, 4])\n\
    </cell>\n<text>\nis_sorted_decreasing", "    sorted = true\n    for x in lst\n\
    \        if x != lst[findfirst(x == lst)]\n            sorted = false\n      \
    \      break\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 3, 4, 5]) \u279E true\nis_sorted([1, 3, 2, 4, 5]) \u279E false\n\
    is_sorted([1, 2, 3, 4, 5, 6]) \u279E true\nis_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ true\nis_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E false\nis_sorted([1, 2, 2, 3,\
    \ 3, 4]) \u279E true\nis_sorted([1, 2, 2, 2, 3, 4]) \u279E false\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of unique elements in an\
    \ array. Assume no duplicate elements.", "    lst = sort(lst)\n    last = lst[1]\n\
    \    for x in lst[2:end]\n        if x != last\n            return false\n   \
    \     last = x\n    return true\nend", "    sorted = true\n    for x in lst\n\
    \        if x != sort(x)\n            sorted = false\n            break\n    end\n\
    \    return sorted\nend", "    sorted = true\n    for x in lst\n        if x <\
    \ lst[end(x)]\n            sorted = false\n        end\n    end\n    return sorted\n\
    end", "    sorted = true\n    for x in lst\n        if x != lst[findfirst(x ==\
    \ lst)]\n            sorted = false\n            break\n    end\n    return sorted\n\
    end", "    sorted = true\n    for x in lst\n        if x != sort(x)\n        \
    \    sorted = false\n            break\n    end\n    return sorted\nend", "  \
    \  if is_sorted(lst) == true\n        return true\n    \n    sorted = sort(lst)\n\
    \    \n    if length(sorted) == length(lst)\n        return true\n    \n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5]) \u279E\
    \ true\nis_sorted([1, 3, 2, 4, 5]) \u279E false\nis_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E true\nis_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E true\nis_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E false\nis_sorted([1, 2, 2, 3, 3, 4]) \u279E true\nis_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E false\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of times a value appears in a list. For example, how\
    \ many times does the value 5 appear in the list [1, 2, 3, 4, 5]?", "    sorted\
    \ = sort(lst)\n    last = sorted[end]\n    for x in sorted\n        if x != last\n\
    \            return false\n        end\n    return true\nend", "    if is_sorted(unique(lst))\n\
    \        return true\n    else\n        return false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2,\
    \ 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2,\
    \ 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2,\
    \ 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2,\
    \ 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5", "    sorted = sort(lst)\n\
    \    last = sorted[end]\n    last = last == last ? last : last + 1\n    for x\
    \ in lst\n        if x == last \n            return false\n        last = x\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3,\
    \ 4, 1, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1,\
    \ 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3,\
    \ 4, 1, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1,\
    \ 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3,\
    \ 4, 1, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1,\
    \ 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3,\
    \ 4, 1, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1,\
    \ 6, 7])\n</cell>\n<code language=julia-1.5>", "    sorted = true\n    for x in\
    \ lst\n        if x != sort(x)\n            sorted = false\n            break\n\
    \    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2248 false\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n\
    @assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2,\
    \ 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2248 false\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 false\n\
    @assert is_sorted([5, 4, 3, 2, 1]) \u2248 false\n@assert is_sorted([5, 4, 3, 2,\
    \ 1]) \u2248 false\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2248 false\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 false\n\
    @assert is_sorted([5, 4, 3, 2, 1]) \u2248 false\n@assert is_sorted([5, 4, 3, 2,\
    \ 1]) \u2248 false\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2248 false\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 false\n\
    @assert is_sorted([5, 4, 3, 2, 1]) \u2248 false\n@assert is_sorted([5, 4, 3, 2,\
    \ 1]) \u2248 false\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2248 false\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 false\n\
    @assert is_sorted([5, 4, 3, 2, 1]) \u2248 false\n@assert is_sorted([5, 4, 3, 2,\
    \ 1]) \u2248 false\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2248 false\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 false\n\
    @assert is_sorted([5, 4, 3, 2, 1]) \u2248 false\n@assert is_sorted([5, 4, 3, 2,\
    \ 1]", "    sorted = sort(lst)\n    \n    if length(sorted) == length(lst)\n \
    \       true\n    else\n        false\n    end\nend", "    \n    sorted = sort(lst)\n\
    \    \n    if length(sorted) == length(lst)\n        true\n    else\n        false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=",
  "    \n    sorted = true\n    for x in lst\n        if x < lst[end(x)]\n       \
    \     sorted = false\n            break\n        end\n    end\n    return sorted\n\
    end", "    sort(lst) == lst\nend", "    sorted = sort(lst)\n    \n    if length(sorted)\
    \ == length(lst)\n        for (i, j) in zip(sorted, lst)\n            if i !=\
    \ j\n                return false\n            end\n        end\n        return\
    \ true\n    else\n        return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@", "    sorted = true\n    for x in lst\n     \
    \   if x != sort(x)\n            sorted = false\n            break\n    end\n\
    \    return sorted\nend", "    if is_sorted(unique(lst))\n        return true\n\
    \    else\n        return false\n    end\nend\n\"\"\"\n    Given a list of numbers,\
    \ return whether or not they are sorted\n    in descending order. If list has\
    \ more than 1 duplicate of the same\n    number, return False. Assume no negative\
    \ numbers and only integers.", "    lst = sort(lst)\n    last = lst[1]\n    for\
    \ i in 2:length(lst)\n        if lst[i] != last\n            return false\n  \
    \      last = lst[i]\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 3, 2, 4, 1, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4,\
    \ 1, 2])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1, 2, 2, 1])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1, 2, 2, 3, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1, 2, 2, 3, 1, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1, 2, 2, 3, 1, 2])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1, 2, 2, 3, 1, 2, 1])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1, 2, 2, 3, 1, 2, 2, 1])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1, 2, 2, 3, 1, 2, 2, 3, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1, 2, 2, 3, 1, 2, 2,\
    \ 3, 1, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1, 2,\
    \ 2, 3, 1, 2, 2, 3, 1, 2])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 3, 2, 4, 1, 2, 2, 3, 1, 2, 2, 3, 1, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 3, 2, 4, 1, 2, 2, 3, 1, 2, 2, 3, 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 3, 2, 4, 1, 2, 2, 3, 1, 2, 2, 3, 1, 2, 2, 3, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1, 2, 2, 3, 1, 2, 2, 3, 1, 2, 2,\
    \ 3, 1, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1, 2,\
    \ 2, 3, 1, 2, 2, 3, 1, 2, 2, 3, 1, 2])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 3, 2, 4, 1, 2, 2, 3, 1, 2, 2, 3, 1, 2, 2, 3, 1, 2, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 3, 2, 4, 1, 2, 2, 3, 1, 2, 2, 3, 1, 2, 2, 3, 1, 2, 2, 3, 1, 2])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1, 2, 2, 3, 1, 2, 2,\
    \ 3, 1, 2, 2, 3, 1, 2, 2, 3, 1, 2])\n</cell>\n", "    sorted = true\n    for x\
    \ in lst\n        if x != sort(x)\n            sorted = false\n        end\n \
    \   end\n    return sorted\nend", "    lst = sort(lst)\n    last = lst[1]\n  \
    \  for x in lst[2:end]\n        if last < x\n            return false\n      \
    \  last = x\n    return true\nend", "    sorted = sort(lst)\n    \n    if length(sorted)\
    \ == length(lst)\n        for (i,x) in enumerate(lst)\n            if x != sorted[i]\n\
    \                return false\n            end\n        end\n        return true\n\
    \    else\n        return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_sorted([5]) \u2248 true\n@assert is_sorted([1, 2, 3, 4, 5]) \u2248\
    \ true\n@assert is_sorted([1, 3, 2, 4, 5]) \u2248 false\n@assert is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u2248 true\n@assert is_sorted([1, 2, 3, 4, 5, 6, 7]) \u2248\
    \ true\n@assert is_sorted([1, 3, 2, 4, 5, 6, 7]) \u2248 false\n@assert is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u2248 true\n@assert is_sorted([1, 2, 2, 2, 3, 4]) \u2248 false\n\
    </cell>\n<text>\nPart II: Arrays\nArrays are a useful data structure for storing\
    \ collections of numbers. Arrays are mutable and are indexed by integers. Arrays\
    \ are also multidimensional. Arrays are often used to represent matrices and tensors.\
    \ Arrays are also useful for storing collections of strings. Arrays are also useful\
    \ for storing collections of booleans.", "    sorted = true\n    sorted = sorted\
    \ && (lst == sort(lst))\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<text>\nExercise\nWrite a function is_sorted_by()\
    \ which takes a function and a list of numbers and returns whether or not the\
    \ list of numbers is sorted using the given function."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
