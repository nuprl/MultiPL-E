name: HumanEval_24_largest_divisor
language: julia
prompt: "\"\"\" For a given number n, find the largest number that divides n evenly,\
  \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
  \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
  \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
completions: ["    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n \
    \       if n%2==0\n            largest_divisor(n/2)\n        end\n    end\nend\n\
    </cell>\n<code language=julia-1.3>\n@time largest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a given number. \n\
    For example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1", "    if n==0\n   \
    \     0\n    else\n        largest_divisor(n-1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the number of divisors of n that are less than or equal\
    \ to n.", "    if n==0\n        0\n    else\n        largest_divisor(n-1)\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of divisors of n\
    \ that are less than or equal to n.", "    if n==1 \n        return n\n    else\
    \ if n%2==0 \n        return largest_divisor(n/2)\n    else \n        return largest_divisor(n/2)\
    \ + 1\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n\
    <text>\nExercise 4\nWrite a function that returns the number of divisors of n\
    \ that are less than or equal to n.", "    if n==0 then return 0\n    else if\
    \ n==1 then return 1\n    else if n%2==0 then return n\n    else return largest_divisor(n/2)\n\
    end\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the largest prime factor of\
    \ a given number. For example, if the number is\n$2^3^5^7^11^13^17^19^23^29^31^37^41^43^47^53^59^61^67^71^73^79^83^89^97^101^103^107^109^113^127^131^137^139^147^151^157^163^167^173^179^181^191^193^197^199^211^223^227^229^233^239^241^251^253^257^263^269^271^277^281^283^293^307^311^313^317^331^337^347^353^359^367^373^379^383^389^397^401^407^411^419^421^431^433^439^443^449^457^461^463^467^479^487^491^497^503^509^521^523^529^531^537^541^547^553^559^563^569^571^577^587^593^599^601^607^613^617^619^631^641^643^647^653^659^661^673^677^683^691^701^709^719^727^733^739^743^751^757^761^769^773^787^797^803^809^811^813^817^819^821^823^827^829^831^833^837^839^843^851^853^857^859^863^877^881^883^887^893",
  "    if n==0 then return 0\n    if n==1 then return 1\n    if n%2==0 then return\
    \ n\n    else return largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.4>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that computes\
    \ the factorial of a given number. \nFor example, factorial(5) = 5 \xD7 4 \xD7\
    \ 3 \xD7 2 \xD7 1", "    if n==0 then return 0\n    else if n%2==0 then return\
    \ n\n    else return largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.3>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.", "    if n==0\
    \ then return 0\n    else if n==1 then return 1\n    else if n%2==0 then return\
    \ n\n    else return largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the factorial of a given number. For example, factorial(5) = 5 \xD7 4 \xD7 3\
    \ \xD7 2 \xD7 1", "    if n==0 then return 0\n    else if n%2==0 then return n\n\
    \    else return largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the smallest number that divides n evenly, larger than n\nHint: use largest_divisor(n)",
  "    if n==0 \n        0\n    else if n==1 \n        1\n    else if n%2==0 \n  \
    \      largest_divisor(n/2)\n    else \n        largest_divisor(n/2)+1\nend\n\
    </cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of divisors of n that are less than\
    \ or equal to n.", "    if n==0\n        0\n    else\n        largest_divisor(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if n==1 \n        return\
    \ n\n    else if n%2==0 \n        return largest_divisor(n/2)\n    else \n   \
    \     return largest_divisor(n/2)+1\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first n prime numbers. \nHint: Use a for loop and a prime number sieve.",
  "    if n==1 \n        return 1 \n    else \n        largest_divisor(n-1)\n    \
    \    if n%2==0 \n            return n \n        else \n            return largest_divisor(n//2)\n\
    end\n</cell>\n<code language=julia-1.4>\n@time largest_divisor(100)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the factorial of a given number.\
    \ \nFor example, factorial(5) = 5 * 4 * 3 * 2 * 1 = 120", "    if n==1 \n    \
    \    return 1 \n    else \n        return largest_divisor(n-1) + 1 \nend \n</cell>\n\
    <code language=julia-1.4>\nlargest_divisor(15)\n</cell>\n<text>\nProblem 3\nWrite\
    \ a function that returns the number of prime numbers less than or equal to a\
    \ given number.", "    if n==1 \n        return n\n    else if n%2==0 \n     \
    \   return largest_divisor(n/2)\n    else \n        return largest_divisor(n/2)+1\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of divisors of a given number\
    \ n. \nFor example, for n = 12, there are 3 divisors: 1, 2, and 3.", "    if n==1\
    \ \n        return 1 \n    else if n%2==0 \n        return largest_divisor(n/2)\
    \ \n    else \n        return largest_divisor(n/2) + 1 \nend \n</cell>\n<code\
    \ language=julia-1.4>\n@time largest_divisor(150)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of divisors of n that are less than or\
    \ equal to n.", "    if n==1 \n        return 1 \n    else \n        return largest_divisor(n-1)\
    \ + 1 \nend \n</cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the smallest number that divides\
    \ n evenly, larger than n\nHint: Use a recursive function\nHint: Use a while loop\n\
    Hint: Use a for loop\nHint: Use a while loop\nHint: Use a for loop\nHint: Use\
    \ a while loop\nHint: Use a for loop\nHint: Use a while loop\nHint: Use a for\
    \ loop\nHint: Use a while loop\nHint: Use a for loop\nHint: Use a while loop\n\
    Hint: Use a for loop\nHint: Use a while loop\nHint: Use a for loop\nHint: Use\
    \ a while loop\nHint: Use a for loop\nHint: Use a while loop\nHint: Use a for\
    \ loop\nHint: Use a while loop\nHint: Use a for loop\nHint: Use a while loop\n\
    Hint: Use a for loop\nHint: Use a while loop\nHint: Use a for loop\nHint: Use\
    \ a while loop\nHint: Use a for loop\nHint: Use a while loop\nHint: Use a for\
    \ loop\nHint: Use a while loop\nHint: Use a for loop\nHint: Use a while loop\n\
    Hint: Use a for loop\nHint: Use a while loop\nHint: Use a for loop\nHint: Use\
    \ a while loop\nHint: Use a for loop\nHint: Use a while loop\nHint: Use a for\
    \ loop\nHint: Use a while loop\nHint: Use a for loop\nHint: Use a while loop\n\
    Hint: Use a for loop\nHint: Use a while loop\nHint: Use a for loop\nHint: Use\
    \ a while loop\nHint: Use a for loop\nHint: Use a while loop\nHint: Use a for\
    \ loop\nHint: Use a while loop\nHint: Use a for loop\nHint: Use a while loop\n\
    Hint: Use a for loop\nHint: Use a while loop\nHint: Use a for loop\nHint: Use\
    \ a while loop\nHint: Use a for loop\nHint: Use a while loop\nHint: Use a for\
    \ loop\nHint: Use a while loop\nHint: Use a for loop\nHint: Use a while loop\n\
    Hint: Use a for loop\nHint: Use a while loop\nHint", "    if n==1 \n        return\
    \ 1 \n    else \n        largest_divisor(n-1)\n        largest_divisor(n/2)\n\
    \        if n%2==0 \n            return n\n        else \n            return largest_divisor(n/2)\
    \ \nend \n</cell>\n<code language=julia-1.4>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes in a positive integer $n$ and returns\
    \ the number of divisors of $n$ that are greater than or equal to $n$. For example,\
    \ if the input $n$ is 10, the function should return 3.", "    if n==0 then return\
    \ 0 \n    else if n%2==0 then return n \n    else return largest_divisor(n/2)\n\
    end \n</cell>\n<code language=julia-1.0>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a given number. \n\
    The factorial of a number $n$ is defined as $n!$, where $n$ is an integer greater\
    \ than or equal to 1.", "    if n == 1 \n        1\n    else\n        largest_divisor(n\
    \ - 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 4\nWrite a function that returns the smallest number\
    \ that divides n evenly, smaller than n\n    >>> smallest_divisor(15)\n    3\n\
    \    \"\"\"", "    if n==0 then return 0\n    else if n%2==0 then return n\n \
    \   else return largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.3>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.", "    if n==0\
    \ \n        0\n    else if n==1 \n        1\n    else if n%2==0 \n        largest_divisor(n/2)\n\
    \    else \n        largest_divisor(n/2)+1\nend\n</cell>\n<code language=julia-1.0>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of divisors of a given number n. For example, for the number 15,\
    \ the number of divisors is 3.", "    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ first n prime numbers. \nHint: You may want to use the sieve of Eratosthenes\
    \ or the Sieve of Atkin", "    if n==1 \n        return n\n    else if n%2==0\
    \ \n        return largest_divisor(n/2)\n    else \n        return largest_divisor(n/2)\
    \ + 1\nend\n</cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of divisors of n\
    \ that are less than or equal to n.", "    if n==0\n        0\n    else\n    \
    \    largest_divisor(n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of divisors of n that are smaller than n.", "    if n==1 \n     \
    \   return 1 \n    else \n        return largest_divisor(n-1) + 1 \nend \n</cell>\n\
    <code language=julia-1.4>\nlargest_divisor(15)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of divisors of n that are less than or\
    \ equal to n.", "    if n==0\n        0\n    else\n        largest_divisor(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n@code_warntype largest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the smallest number\
    \ that divides n evenly, larger than n\nHint: use the function largest_divisor(n::Int64)::Int64",
  "    if n==0 then return 0\n    if n%2==0 then return n\n    else return largest_divisor(n/2)\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the factorial of a given number. \n\
    For example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1", "    if n==1 then\
    \ return 1\n    else if n%2==0 then return n//2\n    else return largest_divisor(n//2)\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a given number. For\
    \ example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1 = 3628800", "    if n\
    \ == 0 \n        0\n    else if n % 2 == 0 \n        largest_divisor(n / 2)\n\
    \    else\n        largest_divisor(n / 2) + 1\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.", "    if n==0\
    \ \n        return 0 \n    else if n%2==0 \n        return n \n    else \n   \
    \     return largest_divisor(n/2) \nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.", "    if n==1\
    \ \n        1\n    else\n        largest_divisor(n-1)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype largest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of divisors of n that are\
    \ less than or equal to n.", "    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if n==0\n        0\n\
    \    else\n        largest_divisor(n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the smallest number that divides n evenly, smaller than n.", "    if n % 2 ==\
    \ 0 \n        then largest_divisor(n / 2)\n        else largest_divisor(3 * n\
    \ + 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ given number. For example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1", " \
    \   if n==0\n        0\n    else\n        largest_divisor(n-1)\n        if n%2==0\n\
    \            largest_divisor(n/2)\n        else\n            largest_divisor(n/2)+1\n\
    \        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.", "    if n==0\n        0\n    else\n\
    \        largest_divisor(n-1)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the smallest number that divides n evenly, smaller than\
    \ n.", "    if n==0 then return 0\n    else if n%2==0 then return n\n    else\
    \ return largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the smallest number\
    \ that divides n evenly, smaller than n.", "    if n==0\n        0\n    else\n\
    \        largest_divisor(n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the factorial of a given number. For example, factorial(5) = 5 \xD7 4 \xD7 3\
    \ \xD7 2 \xD7 1", "    if n==0 then return 0\n    else if n%2==0 then return n\n\
    \    else return largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.0>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the factorial of a given number. For example, factorial(5) = 5 * 4 * 3 * 2 *\
    \ 1 = 120", "    if n==0\n        0\n    else\n        largest_divisor(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n<code\
    \ language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_divisor(15)\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n<code\
    \ language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_divisor(15)\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n<code\
    \ language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_divisor(15)\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n<code\
    \ language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_divisor(15)\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n<code\
    \ language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_divisor(15)\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n<code\
    \ language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_divisor(15)\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n<code\
    \ language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n<code language=", " \
    \   if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of divisors of n that are less than\
    \ or equal to n.", "    if n==1 \n        return 1 \n    else \n        return\
    \ largest_divisor(n-1) + 1 \nend \n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.", "    if n==1 \n        return 1 \n\
    \    else \n        largest_divisor(n-1) + 1 \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.", "    if n ==\
    \ 1 \n        1\n    else \n        largest_divisor(n-1) + 1 \nend\n</cell>\n\
    <text>\nExercise 10\nWrite a function that returns the factorial of a number.\
    \ For example, factorial(5) = 5 * 4 * 3 * 2 * 1 = 120", "    if n==1 \n      \
    \  1\n    else\n        largest_divisor(n-1)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of divisors of a given number n. For example, for the\
    \ number 15, there are 3 divisors: 1, 2, and 5.", "    if n==0\n        0\n  \
    \  else\n        largest_divisor(n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.", "    if n==0\
    \ then return 0\n    if n==1 then return 1\n    if n%2==0 then return n\n    \n\
    \    largest_divisor=n\n    \n    for d in range(3,n+1,2) do \n        if n%d==0\
    \ then \n            largest_divisor=d\n            break\n    end\n    \n   \
    \ return largest_divisor\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of divisors\
    \ of a given number n. \nFor example, for the number 12, there are 3 divisors:\
    \ 1, 2, and 3.", "    if n==1 \n        1\n    else \n        largest_divisor(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n</cell>\n\
    <text>\nExercise 4\nWrite a function that returns the number of divisors of a\
    \ given number n. \nFor example, for n = 10, the function should return 3.", " \
    \   if n==1 \n        return 1 \n    else \n        return largest_divisor(n-1)\
    \ + 1 \nend \n</cell>\n<code language=julia-1.3>\n@time largest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that computes the factorial of a\
    \ given number. \nThe factorial of a number $n$ is defined as", "    if n==0 \n\
    \        0\n    else\n        largest_divisor(n-1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\nlargest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the first n prime numbers. \nHint: use primes() function\
    \ from Julia's Base package", "    if n==1 \n        return n\n    else if n%2==0\
    \ \n        return largest_divisor(n/2)\n    else \n        return largest_divisor(n/2)\
    \ + 1\nend\n</cell>\n<code language=julia-1.4>\nlargest_divisor(15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the first n positive integers\
    \ greater than or equal to n. For example, first_n_positive(10) should return\
    \ [10, 11, 12, 13, 14, 15].", "    if n == 0 \n        0\n    else\n        largest_divisor(n\
    \ - 1) \n        if n % 2 == 0\n            largest_divisor(n / 2)\n        else\n\
    \            largest_divisor(n / 2)\n        end\n    end\nend\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a tags=julia,recursion |>\n<code>", "    if n % 2 == 0 \n  \
    \      then largest_divisor(n / 2)\n        else largest_divisor(3 * n + 1) \n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(150)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first n prime numbers.\
    \ \nHint: use an iterator to generate prime numbers. \nHint: use an iterator to\
    \ generate prime numbers. \nHint: use an iterator to generate prime numbers. \n\
    Hint: use an iterator to generate prime numbers. \nHint: use an iterator to generate\
    \ prime numbers. \nHint: use an iterator to generate prime numbers. \nHint: use\
    \ an iterator to generate prime numbers. \nHint: use an iterator to generate prime\
    \ numbers. \nHint: use an iterator to generate prime numbers. \nHint: use an iterator\
    \ to generate prime numbers. \nHint: use an iterator to generate prime numbers.\
    \ \nHint: use an iterator to generate prime numbers. \nHint: use an iterator to\
    \ generate prime numbers. \nHint: use an iterator to generate prime numbers. \n\
    Hint: use an iterator to generate prime numbers. \nHint: use an iterator to generate\
    \ prime numbers. \nHint: use an iterator to generate prime numbers. \nHint: use\
    \ an iterator to generate prime numbers. \nHint: use an iterator to generate prime\
    \ numbers. \nHint: use an iterator to generate prime numbers. \nHint: use an iterator\
    \ to generate prime numbers. \nHint: use an iterator to generate prime numbers.\
    \ \nHint: use an iterator to generate prime numbers. \nHint: use an iterator to\
    \ generate prime numbers. \nHint: use an iterator to generate prime numbers. \n\
    Hint: use an iterator to generate prime numbers. \nHint: use an iterator to generate\
    \ prime numbers. \nHint: use an iterator to generate prime numbers. \nHint: use\
    \ an iterator to generate prime numbers. \nHint: use an iterator to generate prime\
    \ numbers. \nHint: use an iterator to generate prime numbers. \nHint: use an iterator\
    \ to generate prime numbers. \nHint: use an iterator to generate prime numbers.\
    \ \nHint: use an iterator to generate prime numbers. \nHint: use an iterator to\
    \ generate prime numbers. \nHint: use an iterator to generate prime numbers. \n\
    Hint: use an iterator to generate prime numbers. \nHint: use an iterator to generate\
    \ prime numbers. \nHint: use an iterator to generate prime numbers. \nHint: use\
    \ an iterator to generate prime numbers. \nHint: use an iterator ", "    if n==1\
    \ \n        1\n    else\n        largest_divisor(n-1)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype largest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the largest prime factor of a given\
    \ number. For example, given n = 12, the largest prime factor is 3.", "    if\
    \ n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\nlargest_divisor(15)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the smallest number that divides n evenly, smaller\
    \ than n.", "    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ factorial of a given number. For example, factorial(5) = 5 x 4 x 3 x 2 x 1 =\
    \ 120", "    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2) + 1\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.", "    if n %\
    \ 2 == 0 \n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that finds the largest number that\
    \ divides n evenly, smaller than n.", "    if n % 2 == 0 \n        then largest_divisor(n\
    \ / 2)\n        else largest_divisor(3 * n + 1) \n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time largest_divisor(15); @time largest_divisor(100);\
    \ @time largest_divisor(1000);\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the smallest number that divides n evenly, smaller than n.", " \
    \   if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2)+1\nend\n</cell>\n<code language=julia-1.3>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ an array of numbers and returns the number of even numbers in the array. For\
    \ example, if the array is [3, 7, 9, 10, 12, 15], the function should return 3.",
  "    if n % 2 == 0\n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1) \n    end\nend\n</cell>\n<code language=julia-1.4>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.", "    if n==1 \n        return 1 \n\
    \    else if n%2==0 \n        return largest_divisor(n/2) \n    else \n      \
    \  return largest_divisor(n/2) + 1 \nend \n</cell>\n<code language=julia-1.3>\n\
    @time largest_divisor(15); @time largest_divisor(150)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of divisors of n that are less than\
    \ or equal to n.", "    if n==0 then return 0\n    else if n%2==0 then return\
    \ n\n    else return largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nProblem 7\nWrite a function that returns\
    \ the number of prime numbers less than or equal to a given number.", "    if\
    \ n==1 \n        1 \n    else \n        largest_divisor(n-1) + 1 \nend\n</cell>\n\
    <code language=julia-1.5>", "    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the factorial of a given number",
  "    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2) + 1\nend\n</cell>\n<code language=julia-1.4>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.", "    if n==0\
    \ then return 0\n    else if n%2==0 then return n\n    else return largest_divisor(n/2)\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Problem 3\nWrite a function that returns the sum of the numbers from 1 to n that\
    \ are divisible by k.", "    if n == 0\n        0\n    else\n        largest_divisor(n-1)\
    \ + n // largest_divisor(n-1)\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ largest_divisor(100)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.", "    if n ==\
    \ 0 \n        0\n    else\n        largest_divisor(n / 2) + n\n    end\nend\n\
    </cell>\n<code language=julia-1.3>\n@code_warntype largest_divisor(15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the smallest number that divides\
    \ n evenly, larger than n\n    >>> smallest_divisor(15)\n    3\n    \"\"\"", " \
    \   if n==0 then return 0\n    if n==1 then return 1\n    if n%2==0 then return\
    \ n\n    else return largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.4>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.", "    if n==0\
    \ then return 0\n    if n==1 then return 1\n    \n    largest_divisor=n\n    \n\
    \    for d in divisors(n) do \n        if n%d==0 then \n            if largest_divisor<d\
    \  then \n                largest_divisor=d\n            end\n        end\n  \
    \  end\n    \n    return largest_divisor\nend\n</cell>\n<code language=julia-1.5>\n\
    @time largest_divisor(150)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ finds the smallest number that divides n evenly, larger than n\n    >>> smallest_divisor(15)\n\
    \    3\n    \"\"\"", "    if n % 2 == 0 \n        then largest_divisor(n / 2)\n\
    \        else largest_divisor(3 * n + 1) \nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the factorial of a given number. For example, factorial(5) = 5 \xD7 4 \xD7 3\
    \ \xD7 2 \xD7 1", "    if n==1 \n        1\n    else\n        largest_divisor(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.", "    if n==0\n        0\n    else\n\
    \        largest_divisor(n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype largest_divisor(15)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ largest_divisor(15)\n</cell>\n<code language=julia-1.5>\n@code_warntype largest_divisor(15)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype largest_divisor(15)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype largest_divisor(15)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype largest_divisor(15)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype largest_divisor(15)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ largest_divisor(15)\n</cell>\n<code language=julia-1.5>\n@code_warntype largest_divisor(15)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype largest_divisor(15)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype largest_divisor(15)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype largest_divisor(15)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype largest_divisor(15)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ largest_divisor(15)\n</cell>\n<code language=julia-1.5>\n@code_warntype largest_divisor(15)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype largest_divisor(15)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype largest_divisor(15)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype largest_divisor(15)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype largest_divisor(15)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ largest_divisor(15)\n</cell>\n<code language=julia-1.5>\n@code_warntype largest_divisor(15)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype largest_divisor(15)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype largest_divisor(15)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype largest_divisor(15)\n</cell>\n<code language=julia-1.5>\n\
    @", "    if n==1 \n        return 1 \n    else \n        return largest_divisor(n-1)\
    \ + 1 \nend \n</cell>\n<code language=julia-1.3>\n@time largest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of divisors\
    \ of a given number. For example, for the number 12, there are 3 divisors: 1,\
    \ 2, and 3.", "    if n==1 \n        return 1 \n    else \n        largest_divisor(n-1)\
    \ + largest_divisor(n-2) \nend \n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.", "    if n % 2 == 0\n        then largest_divisor(n\
    \ / 2)\n        else largest_divisor(3 * n + 1) \n    end\nend\n</cell>\n<code\
    \ language=julia-1.0>\nlargest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of divisors of n that are less than or equal\
    \ to n.", "    if n==1 \n        1\n    else\n        largest_divisor(n-1)\n \
    \   end\nend\n</cell>\n<code language=julia-1.3>", "    if n==1 \n        1\n\
    \    else\n        largest_divisor(n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the factorial of a given number. \nThe factorial of a number $n$\
    \ is defined as:", "    if n == 1 \n        return 1 \n    else \n        return\
    \ largest_divisor(n-1) + 1 \nend \n</cell>\n<code language=julia-1.5>\n@time largest_divisor(100)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the largest prime factor\
    \ of a given number. For example, for the number 120, the largest prime factor\
    \ is 2. For this exercise, you should use the sieve of Eratosthenes. \nHint: To\
    \ find the prime factors of a number, you can use the sieve of Eratosthenes (https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes).\
    \ \nHint: To find the largest prime factor of a number, you can use the sieve\
    \ of Eratosthenes (https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes). \nHint:\
    \ To find the largest prime factor of a number, you can use the sieve of Eratosthenes\
    \ (https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes). \nHint: To find the largest\
    \ prime factor of a number, you can use the sieve of Eratosthenes (https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes).\
    \ \nHint: To find the largest prime factor of a number, you can use the sieve\
    \ of Eratosthenes (https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes). \nHint:\
    \ To find the largest prime factor of a number, you can use the sieve of Eratosthenes\
    \ (https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes). \nHint: To find the largest\
    \ prime factor of a number, you can use the sieve of Eratosthenes (https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes).\
    \ \nHint: To find the largest prime factor of a number, you can use the sieve\
    \ of Eratosthenes (https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes). \nHint:\
    \ To find the largest prime factor of a number, you can use the sieve of Eratosthenes\
    \ (https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes). \nHint: To find the largest\
    \ prime factor of a number, you can use the sieve of Eratosthenes (https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes).\
    \ \nHint: To find the largest prime factor of a number, you can use the sieve\
    \ of Eratosthenes (https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes). \nHint:\
    \ To find the largest prime factor of a number, you can use the sieve of Eratosthenes\
    \ (https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes). \nHint: To find the largest\
    \ prime factor of a number, you can use the sieve of Eratosthenes (https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes).\
    \ \nHint: To find the largest prime factor of a number, you can use the si", " \
    \   if n==0 then return 0\n    if n==1 then return 1\n    if n%2==0 then return\
    \ n\n    else return largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.", "    if n %\
    \ 2 == 0 \n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1) \nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the largest prime factor of\
    \ a given number. \nFor example, given n = 12, it should return 3\nHint: use an\
    \ if statement to check if n is evenly divisible by any prime factors of n", " \
    \   if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of divisors of a given number n.\
    \ For example, for the number 15, the number of divisors is 3.", "    if n % 2\
    \ == 0 \n        then largest_divisor(n / 2)\n        else largest_divisor(3 *\
    \ n + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(150)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.", "    if n==1 \n        return 1 \n\
    \    else \n        largest_divisor(n-1) \n        if n % 2 == 0 \n          \
    \  largest_divisor(n/2) \n        else \n            largest_divisor(n/2) \n \
    \   end\nend\n</cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n</cell>\n\
    <text>\nExercise 4\nWrite a function that returns the number of divisors of n\
    \ that are less than or equal to n.", "    if n==1 \n        return n\n    else\
    \ if n%2==0 \n        return largest_divisor(n/2)\n    else \n        return largest_divisor(n/2)\
    \ + 1\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that finds the smallest number that divides\
    \ n evenly, smaller than n\nHint: use largest_divisor(n) function", "    if n==1\
    \ \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2)+1\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the smallest number that can be divided by all numbers from 1 to n.", "    if\
    \ n == 1\n        1\n    else\n        largest_divisor(n / 2)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype largest_divisor(15)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the factorial of a given number.\
    \ For example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1", "    if n==0 \n\
    \        0\n    else\n        largest_divisor(n-1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\nlargest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the largest number that divides n evenly, smaller than\
    \ n.", "    if n==0 then return 0\n    if n==1 then return 1\n    largest_divisor(n/2)\n\
    \    if n%2==0 then return n\n    largest_divisor(n/2+1)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nlargest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the first n prime numbers. \nHint: use an iterator to\
    \ generate prime numbers", "    if n==0 then return 0\n    if n==1 then return\
    \ 1\n    if n%2==0 then return n\n    else return largest_divisor(n/2)\nend\n\
    </cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of divisors of n that are less than\
    \ or equal to n.", "    if n==1 \n        return n\n    else if n%2==0 \n    \
    \    return largest_divisor(n/2)\n    else \n        return largest_divisor(n/2)+1\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of divisors of n that are\
    \ less than or equal to n.", "    if n % 2 == 0 \n        then largest_divisor(n\
    \ / 2)\n        else largest_divisor(3 * n + 1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\nlargest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of divisors of a given number n. \nFor example,\
    \ for n = 10, the function should return 3.", "    if n==1 \n        return n\n\
    \    else if n%2==0 \n        return largest_divisor(n/2)\n    else \n       \
    \ return largest_divisor(n/2) + 1\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that finds the smallest number that\
    \ divides n evenly, smaller than n", "    if n==1 \n        1\n    else\n    \
    \    largest_divisor(n-1)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of divisors of a given number. For example, for the number 15, it\
    \ should return 3.", "    if n==1 \n        return n\n    else if n%2==0 \n  \
    \      return largest_divisor(n/2)\n    else \n        return largest_divisor(n/2)+1\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of divisors of n that are\
    \ less than or equal to n.", "    if n==1 \n        1\n    else \n        largest_divisor(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype largest_divisor(15)\n\
    </cell>\n<text>\nExercise 4\nWrite a function that returns the factorial of a\
    \ given number. \nFor example, factorial(5) = 5 x 4 x 3 x 2 x 1 = 120", "    if\
    \ n==0 then return 0\n    else if n%2==0 then return n\n    else return largest_divisor(n/2)\n\
    end\n</cell>\n<code language=julia-1.4>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the factorial of a given number. \n\
    For example, factorial(5) = 5 * 4 * 3 * 2 * 1 = 120\nHint: use recursion", " \
    \   if n==0 then return 0\n    else if n%2==0 then return n\n    else return largest_divisor(n/2)\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the smallest number that divides n evenly,\
    \ smaller than n.", "    if n==1 \n        return 1 \n    else \n        return\
    \ largest_divisor(n-1) + 1 \nend \n</cell>\n<code language=julia-1.4>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given number. \nHint: use recursion.", "    if n==0 then return 0\n    else\
    \ if n%2==0 then return n\n    else return largest_divisor(n/2)\nend\n</cell>\n\
    <code language=julia-1.3>\nlargest_divisor(15)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a given number. \nFor a given number\
    \ n, find the factorial of n. \nFor a given number n, find the factorial of n.\
    \ \nFor a given number n, find the factorial of n. \nFor a given number n, find\
    \ the factorial of n. \nFor a given number n, find the factorial of n. \nFor a\
    \ given number n, find the factorial of n. \nFor a given number n, find the factorial\
    \ of n. \nFor a given number n, find the factorial of n. \nFor a given number\
    \ n, find the factorial of n. \nFor a given number n, find the factorial of n.\
    \ \nFor a given number n, find the factorial of n. \nFor a given number n, find\
    \ the factorial of n. \nFor a given number n, find the factorial of n. \nFor a\
    \ given number n, find the factorial of n. \nFor a given number n, find the factorial\
    \ of n. \nFor a given number n, find the factorial of n. \nFor a given number\
    \ n, find the factorial of n. \nFor a given number n, find the factorial of n.\
    \ \nFor a given number n, find the factorial of n. \nFor a given number n, find\
    \ the factorial of n. \nFor a given number n, find the factorial of n. \nFor a\
    \ given number n, find the factorial of n. \nFor a given number n, find the factorial\
    \ of n. \nFor a given number n, find the factorial of n. \nFor a given number\
    \ n, find the factorial of n. \nFor a given number n, find the factorial of n.\
    \ \nFor a given number n, find the factorial of n. \nFor a given number n, find\
    \ the factorial of n. \nFor a given number n, find the factorial of n. \nFor a\
    \ given number n, find the factorial of n. \nFor a given number n, find the factorial\
    \ of n. \nFor a given number n, find the factorial of n. \nFor a given number\
    \ n, find the factorial of n. \nFor a given number n, find the factorial of n.\
    \ \nFor a given number n, find the factorial of n. \nFor a given number n, find\
    \ the factorial of n. \nFor a given number n, find the factorial of n. \nFor a\
    \ given number n, find the factorial of n. \nFor a given number n, find the factorial\
    \ of n. \nFor a given number n, find the factorial of n. \nFor a given number\
    \ n, ", "    if n % 2 == 0 \n        then largest_divisor(n / 2)\n        else\
    \ largest_divisor(3 * n + 1) \n    end\nend\n</cell>\n<text>\nExercise 3: Write\
    \ a function that returns the largest number that can be divided by all the numbers\
    \ from 1 to n.\nFor example, largest_divisor(15) should return 5 (the largest\
    \ number that can be divided by all the numbers from 1 to 15).", "    if n==0\n\
    \        0\n    else\n        largest_divisor(n-1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.0>", "    if n==1 then return 1\n    if n==2 then return 2\n\
    \    if n==3 then return 3\n    if n==4 then return 4\n    if n==5 then return\
    \ 5\n    if n==6 then return 6\n    if n==7 then return 7\n    if n==8 then return\
    \ 8\n    if n==9 then return 9\n    if n==10 then return 10\n    if n==11 then\
    \ return 11\n    if n==12 then return 12\n    if n==13 then return 13\n    if\
    \ n==14 then return 14\n    if n==15 then return 15\n    if n==16 then return\
    \ 16\n    if n==17 then return 17\n    if n==18 then return 18\n    if n==19 then\
    \ return 19\n    if n==20 then return 20\n    if n==21 then return 21\n    if\
    \ n==22 then return 22\n    if n==23 then return 23\n    if n==24 then return\
    \ 24\n    if n==25 then return 25\n    if n==26 then return 26\n    if n==27 then\
    \ return 27\n    if n==28 then return 28\n    if n==29 then return 29\n    if\
    \ n==30 then return 30\n    if n==31 then return 31\n    if n==32 then return\
    \ 32\n    if n==33 then return 33\n    if n==34 then return 34\n    if n==35 then\
    \ return 35\n    if n==36 then return 36\n    if n==37 then return 37\n    if\
    \ n==38 then return 38\n    if n==39 then return 39\n    if n==40 then return\
    \ 40\n    if n==41 then return 41\n    if n==42 then return 42\n    if n==43 then\
    \ return 43\n    if n==44 then return 44\n    if n==45 then return 45\n    if\
    \ n==46 then return 46\n    if n==47 then return 47\n    if n==48 then return\
    \ 48\n    if n==49 then return 49\n    if n==50 then return 50\n    if n==51 then\
    \ return 51\n    if n==52 then return 52\n    if n==53 then return 53\n    if\
    \ n==54 then return 54\n    if n==55 then return 55\n    if n==56 then return\
    \ 56\n    if n==57 then return 57\n    if n==58 then return 58\n    if n==59 then\
    \ return 59\n    if n==60 then return 60\n    if n==61 then return 61\n    if\
    \ n==6", "    if n==1 \n        1 \n    else \n        largest_divisor(n-1) +\
    \ 1 \nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the factorial\
    \ of a given number. \nThe factorial of a number $n$ is defined as $n! = n(n-1)(n-2)...(1)$.\
    \ \nFor example, $5! = 5 \\times 4 \\times 3 \\times 2 \\times 1 = 120$. \nWrite\
    \ a recursive function that computes the factorial of a given number. \nThe function\
    \ should take one argument, the number to compute the factorial of. \nThe function\
    \ should return the factorial of the given number. \nFor example, $5! = 5 \\times\
    \ 4 \\times 3 \\times 2 \\times 1 = 120$. \nWrite a function that computes the\
    \ factorial of a given number. \nThe function should take one argument, the number\
    \ to compute the factorial of. \nThe function should return the factorial of the\
    \ given number. \nFor example, $5! = 5 \\times 4 \\times 3 \\times 2 \\times 1\
    \ = 120$. \nWrite a function that computes the factorial of a given number. \n\
    The function should take one argument, the number to compute the factorial of.\
    \ \nThe function should return the factorial of the given number. \nFor example,\
    \ $5! = 5 \\times 4 \\times 3 \\times 2 \\times 1 = 120$. \nWrite a function that\
    \ computes the factorial of a given number. \nThe function should take one argument,\
    \ the number to compute the factorial of. \nThe function should return the factorial\
    \ of the given number. \nFor example, $5! = 5 \\times 4 \\times 3 \\times 2 \\\
    times 1 = 120$. \nWrite a function that computes the factorial of a given number.\
    \ \nThe function should take one argument, the number to compute the factorial\
    \ of. \nThe function should return the factorial of the given number. \nFor example,\
    \ $5! = 5 \\times 4 \\times 3 \\times 2 \\times 1 = 120$. \nWrite a function that\
    \ computes the factorial of a given number. \nThe function should take one argument,\
    \ the number to compute the factorial of. \nThe function should return the factorial\
    \ of the given number. \nFor example, $5! = 5 \\times 4 \\times 3 \\times 2 \\\
    times 1 = 120$. \nWrite a function that computes the factorial of a given number.\
    \ \nThe function should take one argument, the number to compute the factorial\
    \ of. \nThe function should return the factorial of the given number. \nFor example,\
    \ $5! = 5 \\times 4 \\times 3 \\times 2 \\times 1 = 120$. \nWrite a function that\
    \ computes the factorial of a ", "    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ number of divisors of a given number. For example, for the number 12, there\
    \ are two divisors: 2 and 3. Your function should return the number of divisors,\
    \ not print them.", "    if n % 2 == 0 \n        then largest_divisor(n / 2)\n\
    \        else largest_divisor(3 * n + 1)\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the largest number that divides n evenly, smaller\
    \ than n.", "    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.", "    if n==1 then return 1\n    else\
    \ if n%2==0 then return n\n    else return largest_divisor(n/2)\nend\n</cell>\n\
    <code language=julia-1.4>\nlargest_divisor(15)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of divisors of n that are less than or\
    \ equal to n.", "    if n==1 \n        1 \n    else \n        largest_divisor(n-1)\
    \ + 1 \nend\n</cell>\n<code language=julia-1.3>", "    if n % 2 == 0 \n      \
    \  then largest_divisor(n / 2)\n        else largest_divisor(3 * n + 1)\n    end\n\
    end\n</cell>\n<code language=julia-1.4>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of divisors of n that are\
    \ less than or equal to n.", "    if n==0 then return 0\n    else if n%2==0 then\
    \ return n\n    else return largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the smallest number that divides n evenly, larger than n\n    >>> smallest_divisor(15)\n\
    \    3\n    \"\"\"", "    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the largest number\
    \ that divides n evenly, smaller than n.", "    if n==0\n        0\n    else\n\
    \        largest_divisor(n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the factorial of a given number", "    if n % 2 == 0 \n        then\
    \ largest_divisor(n / 2)\n        else largest_divisor(3 * n + 1)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of divisors of a given number n.\
    \ \nFor example, for the number 15, there are two divisors: 5 and 3.\nWrite a\
    \ function that returns the number of divisors of a given number n. \nFor example,\
    \ for the number 15, there are two divisors: 5 and 3.\nWrite a function that returns\
    \ the number of divisors of a given number n. \nFor example, for the number 15,\
    \ there are two divisors: 5 and 3.\nWrite a function that returns the number of\
    \ divisors of a given number n. \nFor example, for the number 15, there are two\
    \ divisors: 5 and 3.\nWrite a function that returns the number of divisors of\
    \ a given number n. \nFor example, for the number 15, there are two divisors:\
    \ 5 and 3.\nWrite a function that returns the number of divisors of a given number\
    \ n. \nFor example, for the number 15, there are two divisors: 5 and 3.\nWrite\
    \ a function that returns the number of divisors of a given number n. \nFor example,\
    \ for the number 15, there are two divisors: 5 and 3.\nWrite a function that returns\
    \ the number of divisors of a given number n. \nFor example, for the number 15,\
    \ there are two divisors: 5 and 3.\nWrite a function that returns the number of\
    \ divisors of a given number n. \nFor example, for the number 15, there are two\
    \ divisors: 5 and 3.\nWrite a function that returns the number of divisors of\
    \ a given number n. \nFor example, for the number 15, there are two divisors:\
    \ 5 and 3.\nWrite a function that returns the number of divisors of a given number\
    \ n. \nFor example, for the number 15, there are two divisors: 5 and 3.\nWrite\
    \ a function that returns the number of divisors of a given number n. \nFor example,\
    \ for the number 15, there are two divisors: 5 and 3.\nWrite a function that returns\
    \ the number of divisors of a given number n. \nFor example, for the number 15,\
    \ there are two divisors: 5 and 3.\nWrite a function that returns the number of\
    \ divisors of a given number n. \nFor example, for the number 15, there are two\
    \ divisors: 5 and 3.\nWrite a function that returns the number of divisors of\
    \ a given number n. \nFor example, for the number 15, there are two divisors:\
    \ 5 and 3.\nWrite a function that returns the number of divisors of a given number\
    \ n. \nFor example, for the number 15, there are two divisors: 5 and 3.\nWrite\
    \ a function that returns the number of divisors of a given number n. \nFor example,\
    \ for the number 15, there are two divisors: 5 and 3.\nWrite a function that returns\
    \ the number of divisors of a given number n. \nFor example, for the number 15,\
    \ there are two divisors: 5 and 3.\nWrite a function that returns the number of\
    \ divisors of a given number n. \nFor example, for the number 15, there are two\
    \ divisors: 5 and 3.\nWrite a ", "    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>", "    if n==1 \n        return\
    \ n\n    else if n%2==0 \n        return largest_divisor(n/2)\n    else \n   \
    \     return largest_divisor(n/2) + 1\nend\n</cell>\n<code language=julia-1.5>\n\
    @time largest_divisor(100)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the factorial of a given number. \nFor example, factorial(5) = 5 \xD7\
    \ 4 \xD7 3 \xD7 2 \xD7 1", "    if n==0\n        0\n    else\n        largest_divisor(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of divisors of n\
    \ that are smaller than n.", "    if n==1 \n        return 1 \n    else if n==2\
    \ \n        return 2 \n    else if n%3==0 \n        return largest_divisor(n/3)\
    \ \n    else \n        return largest_divisor(n/3) \nend \n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the smallest number that divides n evenly, smaller than n.", "    if n % 2 ==\
    \ 0 \n        then largest_divisor(n / 2)\n        else largest_divisor(3 * n\
    \ + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.", "    if n==0 then return 0\n    else\
    \ if n%2==0 then return n\n    else return largest_divisor(n/2)\nend\n</cell>\n\
    <code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\nExercise 3\n\
    Write a function that finds the smallest number that divides n evenly, smaller\
    \ than n\n    >>> smallest_divisor(15)\n    3\n    \"\"\"", "    if n==1 then\
    \ return 1\n    else if n%2==0 then return largest_divisor(n/2)\n    else return\
    \ largest_divisor(n/2)+1\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of divisors\
    \ of a given number n. \nFor example, for n = 12, there are 4 divisors: 1, 2,\
    \ 3, and 4.", "    if n==1 \n        return 1 \n    else if n==2 \n        return\
    \ 2 \n    else if n%3==0 \n        return 3 \n    else \n        return largest_divisor(n/3)\
    \ \nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the first n prime numbers. \nHint: Use\
    \ a for loop to iterate over all numbers from 2 to n.", "    if n==0 \n      \
    \  0\n    else\n        largest_divisor(n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.", "    if n==1\
    \ \n        return 1 \n    else if n%2==0 \n        return largest_divisor(n/2)\
    \ \n    else \n        return largest_divisor(n/2) + 1 \nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of divisors of a given number n. For example, for the number 15,\
    \ there are 3 divisors: 1, 3, and 5.", "    if n==0 \n        0\n    else\n  \
    \      largest_divisor(n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the factorial of a given number. For example,\
    \ factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1", "    if n==1 \n        return\
    \ 1 \n    else if n==2 \n        return 2 \n    else if n%3==0 \n        return\
    \ 3 \n    else if n%5==0 \n        return 5 \n    else \n        return largest_divisor(n/3)\
    \ \nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the largest number that divides n evenly,\
    \ smaller than n.", "    if n == 0 \n        0\n    else\n        largest_divisor(n\
    \ - 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the smallest number\
    \ that divides n evenly, smaller than n.", "    if n==0 then return 0\n    if\
    \ n%2==0 then return n\n    else return largest_divisor(n/2)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the largest number that divides n evenly, smaller than\
    \ n.", "    if n % 2 == 0 \n        then largest_divisor(n / 2)\n        else\
    \ largest_divisor(3 * n + 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of divisors of a given number n. \nFor example, for n = 15, we have:",
  "    if n==0 \n        0\n    else if n%2==0\n        largest_divisor(n/2)\n   \
    \ else\n        largest_divisor(n/2)+1\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.", "    if n==0\
    \ then return 0 \n    else if n%2==0 then return n \n    else return largest_divisor(n/2)\
    \ \nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of divisors of n that are\
    \ less than or equal to n.", "    if n==1 \n        return n\n    else if n%2==0\
    \ \n        return largest_divisor(n/2)\n    else \n        return largest_divisor(n/2)\
    \ + 1\nend\n</cell>\n<code language=julia-1.0>\nlargest_divisor(15)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of divisors of n\
    \ that are less than or equal to n.", "    if n==0 then return 0\n    if n==1\
    \ then return 1\n    if n%2==0 then return n\n    else return largest_divisor(n/2)\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the smallest number that divides n evenly,\
    \ smaller than n.", "    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the first n prime numbers. \n\
    Hint: use primes() function", "    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the first n prime numbers. \n\
    Hint: Use a while loop to keep checking the condition of the while loop.", " \
    \   if n == 0 \n        0\n    else\n        largest_divisor(n-1) + n // largest_divisor(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of divisors of n\
    \ that are less than or equal to n.", "    if n % 2 == 0 \n        then largest_divisor(n\
    \ / 2)\n        else largest_divisor(3 * n + 1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of divisors of n that are less than or\
    \ equal to n.", "    if n==1 then return 1\n    else if n==2 then return 2\n \
    \   else if n%3==0 then return n\n    else if n%5==0 then return n\n    else return\
    \ largest_divisor(n/3)\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of divisors\
    \ of a given number. For example, for the number 12, there are two divisors: 2\
    \ and 3. Your function should return the number of divisors, not just their values.\
    \ For example, for the number 12, your function should return 2.", "    if n==0\
    \ then return 0\n    if n==1 then return 1\n    \n    largest_divisor=n\n    \n\
    \    if n%2==0 then \n        largest_divisor=largest_divisor/2\n        \n  \
    \  if n%3==0 then \n        largest_divisor=largest_divisor/3\n        \n    if\
    \ n%5==0 then \n        largest_divisor=largest_divisor/5\n        \n    if n%7==0\
    \ then \n        largest_divisor=largest_divisor/7\n        \n    if n%11==0 then\
    \ \n        largest_divisor=largest_divisor/11\n        \n    if n%13==0 then\
    \ \n        largest_divisor=largest_divisor/13\n        \n    if n%17==0 then\
    \ \n        largest_divisor=largest_divisor/17\n        \n    if n%19==0 then\
    \ \n        largest_divisor=largest_divisor/19\n        \n    if n%23==0 then\
    \ \n        largest_divisor=largest_divisor/23\n        \n    if n%29==0 then\
    \ \n        largest_divisor=largest_divisor/29\n        \n    if n%31==0 then\
    \ \n        largest_divisor=largest_divisor/31\n        \n    if n%37==0 then\
    \ \n        largest_divisor=largest_divisor/37\n        \n    if n%41==0 then\
    \ \n        largest_divisor=largest_divisor/41\n        \n    if n%43==0 then\
    \ \n        largest_divisor=largest_divisor/43\n        \n    if n%47==0 then\
    \ \n        largest_divisor=largest_divisor/47\n        \n    if n%53==0 then\
    \ \n        largest_divisor=largest_divisor/53\n        \n    if n%59==0 then\
    \ \n        largest_divisor=largest_divisor/59\n        \n    if n%61==0 then\
    \ \n        largest_divisor=largest_divisor/61\n        \n    if n%67==0 then\
    \ \n        largest_divisor=largest_divisor/67\n        \n    if n%71==0 then\
    \ \n        largest_divisor=largest_divisor/71\n        \n    if n%73==0 then\
    \ \n        largest_divisor=largest_divisor/73\n        \n    if n%79==0 then\
    \ \n        largest_divisor=largest_divisor/79\n        \n    if n%83==0 then\
    \ \n        largest_divisor=largest_divisor/83\n        \n    if n%89==", "  \
    \  if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>", "    if n==0 then return 0\n    else if n%2==0\
    \ then return n\n    else return largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the factorial of a given number. \nFor example, factorial(5) = 5 \xD7 4 \xD7\
    \ 3 \xD7 2 \xD7 1", "    if n == 1\n        1\n    else\n        largest_divisor(n\
    \ / 2) + 1\n    end\nend\n</cell>\n<code language=julia-1.3>\n@code_warntype largest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.", "    if n==1 \n        1 \n    else\
    \ \n        largest_divisor(n-1) + 1 \nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.", "    if n==0\n\
    \        0\n    else\n        largest_divisor(n-1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if n % 2 == 0 \n        then largest_divisor(n /\
    \ 2)\n        else largest_divisor(3 * n + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the first n prime numbers. \nHint: use the function primes(n) to get all the\
    \ prime numbers from 2 to n", "    if n==0\n        0\n    else\n        largest_divisor(n-1)\n\
    \        if n%2==0\n            largest_divisor(n/2)\n        else\n         \
    \   largest_divisor(n/2)+1\n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time largest_divisor(150)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of divisors of n that are less than or equal to n.", "  \
    \  if n==1 then return 1\n    else if n%2==0 then return n\n    else return largest_divisor(n/2)\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the smallest number that divides n evenly,\
    \ smaller than n.", "    if n==1 \n        return 1 \n    else \n        largest_divisor(n-1)\n\
    \        if n%2==0 \n            largest_divisor(n/2)\n        else \n       \
    \     largest_divisor(n/2) \n        end\n    end\nend\n</code>\n<|/ a tags=julia\
    \ |>\n<| a tags=julia |>\n<code>", "    if n==0 \n        0\n    else\n      \
    \  largest_divisor(n-1)\n        if n % 2 == 0\n            largest_divisor(n/2)\n\
    \        else\n            largest_divisor(n/2)+1\n        end\n    end\nend\n\
    </code>\n<|/ a tags=julia,recursion |>\n<| a dscore=2 |>\nI wrote a recursive\
    \ function which returns the largest number that divides n evenly and smaller\
    \ than n. \n<code>", "    if n==0\n        0\n    else\n        largest_divisor(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n@time largest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the largest number\
    \ that divides n evenly, smaller than n.", "    if n==1 \n        return 1 \n\
    \    else \n        largest_divisor(n-1)\n        if n%2==0 \n            return\
    \ n\n        else \n            return largest_divisor(n//2)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the smallest number that divides n evenly, smaller than\
    \ n\n>>> smallest_divisor(15)\n    3\n    \"\"\"", "    if n==1 \n        return\
    \ 1 \n    else \n        return largest_divisor(n-1) + 1 \nend \n</cell>\n<code\
    \ language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of divisors of n that are less than or equal\
    \ to n.", "    if n==1 \n        return 1 \n    else \n        return largest_divisor(n-1)\
    \ + 1 \nend \n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15); @time\
    \ largest_divisor(150)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the smallest number that is evenly divisible by all the numbers from 1 to n.",
  "    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>", "    if n == 0 \n        0\n    else\n  \
    \      largest_divisor(n / 2) + n / 2\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the factorial of a given number. \nFor example, factorial(5) =\
    \ 5 * 4 * 3 * 2 * 1 = 120", "    if n==0\n        0\n    else\n        largest_divisor(n-1)\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ number of divisors of n that are less than or equal to n.", "    if n==0\n \
    \       0\n    else\n        largest_divisor(n-1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\nlargest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the number of divisors of n that are less than or equal\
    \ to n.", "    if n % 2 == 0 \n        then largest_divisor(n / 2)\n        else\
    \ largest_divisor(3 * n + 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time largest_divisor(100)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of divisors of n that are less than or equal to n.", "  \
    \  if n % 2 == 0 \n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(150)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.", "    if n==0 \n        0\n    else\n\
    \        largest_divisor(n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the factorial of a given number. \nFor example, factorial(5) = 5 \xD7 4 \xD7\
    \ 3 \xD7 2 \xD7 1", "    if n==1 then return 1\n    else if n==2 then return 2\n\
    \    else if n%3==0 then return n\n    else return largest_divisor(n/3)\nend\n\
    </cell>\n<code language=julia-1.5>\n@time largest_divisor(100)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of divisors of n that are\
    \ less than or equal to n.", "    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the smallest number that divides\
    \ n evenly, larger than n\n    >>> smallest_divisor(15)\n    3\n    \"\"\"", " \
    \   if n==0 then return 0\n    if n==1 then return 1\n    if n%2==0 then return\
    \ n\n    else return largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.0>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of the numbers from 1 to n (inclusive).", "    if n==1 \n        return\
    \ 1 \n    else \n        largest_divisor(n-1) \n        if n % 2 == 0 \n     \
    \       then largest_divisor(n/2) \n            else largest_divisor(n/2) \n \
    \       end\n    end\nend\n</cell>\n<code language=julia-1.0>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ given number. \nFor example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1",
  "    if n==1 \n        return 1 \n    else \n        largest_divisor(n-1)\n    \
    \    if n % 2 == 0 \n            largest_divisor(n/2) \n        else \n      \
    \      largest_divisor(n/2) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ finds the smallest number that divides n evenly, smaller than n", "    if n==0\
    \ \n        0\n    else\n        largest_divisor(n-1)\n        if n%2==0\n   \
    \         largest_divisor(n/2)\n        end\n    end\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=julia,recursion |>\n<code>", "    if n==1 \n        return 1 \n\
    \    else \n        return largest_divisor(n-1) + 1 \nend \n</cell>\n<code language=julia-1.5>\n\
    @time largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of divisors of n that are less than or equal to n.", "  \
    \  if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2)+1\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.", "    if n==1\
    \ \n        1\n    else\n        largest_divisor(n-1)\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\nlargest_divisor(15)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the smallest number that divides n evenly, smaller\
    \ than n.", "    if n==0\n        0\n    else\n        largest_divisor(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(100)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ given number. For example, factorial(5) = 5 * 4 * 3 * 2 * 1 = 120", "    if\
    \ n==0 then return 0\n    if n%2==0 then return n\n    else return largest_divisor(n/2)\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of divisors of n that are\
    \ less than or equal to n.", "    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype largest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the largest number\
    \ that divides n evenly, smaller than n.", "    if n==0\n        0\n    else\n\
    \        largest_divisor(n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time largest_divisor(100)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the factorial of a given number. \nFor a given number n, find the factorial\
    \ of n\n    >>> factorial(5)\n    120\n    \"\"\"", "    if n % 2 == 0 \n    \
    \    then return n \n    else \n        largest_divisor(n / 2) \nend\n</cell>\n\
    <code language=julia-1.4>\nlargest_divisor(15)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of divisors of n that are less than or\
    \ equal to n.", "    if n == 0 \n        0\n    else\n        largest_divisor(n-1)\
    \ + n // largest_divisor(n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of divisors of a given number n. \nFor example, for n = 12, there\
    \ are 4 divisors: 1, 2, 3, and 4.", "    if n==1 \n        return n\n    else\
    \ if n%2==0 \n        return largest_divisor(n/2)\n    else \n        return largest_divisor(n/2)+1\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Problem 7\nWrite a function that returns the number of prime numbers less than\
    \ or equal to a given number. \nFor example, primes(10) should return 10. \nThe\
    \ function should take one argument, n, which represents the upper limit of the\
    \ prime numbers to return.", "    if n==0\n        0\n    else\n        largest_divisor(n-1)\n\
    \        if n%2==0\n            largest_divisor(n/2)\n        else\n         \
    \   largest_divisor(n/2)+1\n        end\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of divisors of n that are less than or equal to n.",
  "    if n == 1 \n        1 \n    else \n        largest_divisor(n-1) + 1 \nend\n\
    </cell>\n<code language=julia-1.4>\nlargest_divisor(15)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the factorial of a given number. For example,\
    \ factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1", "    if n == 1\n        1\n \
    \   else\n        largest_divisor(n / 2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of the squares of the first n positive integers. For example, sum_of_squares(10)\
    \ = 55. Make sure your function works with negative numbers as well.", "    if\
    \ n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2) + 1\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the largest number that can be divided by all the numbers from 1 to n inclusive.",
  "    if n == 1 \n        return 1 \n    else \n        return largest_divisor(n\
    \ / 2) + 1 \nend \n</cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of divisors of n\
    \ that are less than or equal to n.", "    if n==0 then return 0 \n    else if\
    \ n==1 then return 1 \n    else if n%2==0 then return n \n    else return largest_divisor(n/2)\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a given number. For\
    \ example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1", "    if n==0 \n    \
    \    0\n    else\n        largest_divisor(n-1)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the factorial of a given number. \nFor example, factorial(5) = 5 \xD7 4 \xD7\
    \ 3 \xD7 2 \xD7 1", "    if n==0 then return 0\n    if n==1 then return 1\n  \
    \  \n    largest_divisor(n-1)\n    \n    if n%2==0 then return n\n    \n    largest_divisor(n/2)\n\
    \    \n    return n\nend\n</cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n\
    </cell>\n<text>\nProblem 3\nWrite a function that returns the smallest number\
    \ that can be divided by all the numbers from 1 to n.", "    if n==1 \n      \
    \  return 1 \n    else if n%2==0 \n        return largest_divisor(n/2) \n    else\
    \ \n        return largest_divisor(n/2) + 1 \nend \n</cell>\n<code language=julia-1.0>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the factorial of a given number. For example, factorial(5) = 5 \xD7 4 \xD7 3\
    \ \xD7 2 \xD7 1", "    if n==1 \n        return 1 \n    else \n        largest_divisor(n-1)\n\
    \        if n%2==0 \n            largest_divisor(n/2)\n        else \n       \
    \     largest_divisor(n/2) \n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.", "    if n %\
    \ 2 == 0\n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.", "    if n % 2 == 0 \n        then return\
    \ n \n        else return largest_divisor(n / 2) \n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the number of divisors of n that are less than or equal\
    \ to n.", "    if n==0\n        0\n    else\n        largest_divisor(n-1)\n  \
    \      if n % 2 == 0\n            largest_divisor(n/2)\n        else\n       \
    \     largest_divisor(n/2) \n        end\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of divisors of a given number n. For example, for the number 12,\
    \ there are 3 divisors: 1, 2, and 3.", "    if n==0\n        0\n    else\n   \
    \     largest_divisor(n-1)\n    end\nend\n</cell>\n<text>\nExercise 7\nWrite a\
    \ function that returns the largest number that divides n evenly, smaller than\
    \ n.", "    if n==0 then return 0\n    else if n%2==0 then return n\n    else\
    \ return largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ given number. \nFor example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1",
  "    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>", "    if n==1 \n        return 1 \n    else\
    \ \n        largest_divisor(n-1)\n        if n%2==0 \n            largest_divisor(n/2)\n\
    \        else \n            largest_divisor(n/2)+1\n        end\n    end\nend\n\
    </cell>\n<code language=julia-1.0>\n@time largest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a given number. For\
    \ example, factorial(5) = 5 * 4 * 3 * 2 * 1 = 120", "    if n==1 \n        return\
    \ 1 \n    else \n        largest_divisor(n-1) + largest_divisor(n-2) \nend\n</cell>\n\
    <code language=julia-1.5>\n@time largest_divisor(100)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of divisors of n that are less than\
    \ or equal to n.", "    if n==0\n        0\n    else\n        largest_divisor(n-1)\n\
    \    end\nend\n</cell>\n<text>\nExercise 5\nWrite a function that returns the\
    \ factorial of a given number. \nFor example, factorial(5) = 5 x 4 x 3 x 2 x 1\
    \ = 120", "    if n==1 \n        return n\n    else if n%2==0 \n        return\
    \ largest_divisor(n/2)\n    else \n        return largest_divisor(n/2) + 1\nend\n\
    </cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of divisors of n that are less than\
    \ or equal to n.", "    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\nlargest_divisor(15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of divisors of n\
    \ that are less than or equal to n."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
