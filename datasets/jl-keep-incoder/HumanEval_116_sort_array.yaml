name: HumanEval_116_sort_array
language: julia
prompt: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
  \ according to\n    number of ones in their binary representation in ascending order.\n\
  \    For similar number of ones, sort based on decimal value.\n\n    It must be\
  \ implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n\
  \    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1,\
  \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
  \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4,\
  \ -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
  \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
  \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5])\
  \ == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
  \ 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
completions: ["    \n    arr = sort(arr)\n    \n    ones = zeros(Int, length(arr))\n\
    \    \n    for i in 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n\
    \    \n    ones = sort(ones)\n    \n    ones = ones[2:end]\n    \n    arr = arr[ones]\n\
    \    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nPart II: Binary Search\nNow that we have implemented the sorting algorithm,\
    \ let's implement binary search. Binary search is similar to linear search, except\
    \ that instead of searching for a specific value, we search for a specific index.\
    \ Binary search is also called \"binary search\" because we search for the middle\
    \ of an array. Binary search is also called \"binary search\" because we search\
    \ for the middle of an array. Binary search is also called \"binary search\" because\
    \ we search for the middle of an array.", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    ones = zeros(Int64, length(arr))\n    ones[arr\
    \ .== 1] = 1\n    \n    ones_sorted = sort(ones)\n    \n    sorted_arr = zeros(Int64,\
    \ length(arr))\n    \n    for i = 1:length(arr)\n        sorted_arr[i] = arr[ones_sorted\
    \ .== i]\n    end\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nExercise 3\nWrite a function that counts the number\
    \ of ones in an array. Test it on some examples:", "    \n    sorted = sort(arr)\n\
    \    \n    ones = zeros(Int64, length(sorted))\n    \n    for i in 1:length(sorted)\n\
    \        ones[i] = sum(sorted[i] == 1)\n    end\n    \n    sorted = sort(ones)\n\
    \    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of ones in an array.\
    \ For example, for [1, 1, 0, 1] it should return 3.", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int64, length(arr))\n\
    \    \n    for i in 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n\
    \    \n    sort(ones)\n    \n    return arr\nend\n</cell>\n<text>\nSolution\n\
    Click below for the solution.", "    \n    ones = zeros(Int64, length(arr))\n\
    \    \n    for i in 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n\
    \    \n    sorted_arr = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        sorted_arr[i] = arr[findfirst(x -> x == ones[i], 1:length(ones))]\n \
    \   end\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@assert sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@assert sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\n</cell>\n<text>\nPart II: Binary Search\nIn this Kata, you\
    \ have to implement binary search for an array. The binary search algorithm is\
    \ very similar to the linear search algorithm, except that instead of searching\
    \ for a specific value, you search for a specific index. For example, if you were\
    \ searching for 5 in the array [5, 10, 15, 20], the binary search would return\
    \ 2 because 10 is in the second position in the array.", "    \n    ones = zeros(Int64,\
    \ length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted = zeros(Int64, length(arr))\n\
    \    sorted[ones .== 1] = arr[ones .== 1]\n    \n    sorted[ones .!= 1] .= sort(arr[ones\
    \ .!= 1])\n    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nPart 2\nNow let's implement a function that counts\
    \ the number of ones in binary representations of numbers in an array.", "   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int64, length(arr))\n\
    \    \n    for i in 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n\
    \    \n    sorted = sort(ones)\n    \n    for i in 1:length(sorted)\n        arr[i]\
    \ = sorted[i]\n    end\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nProblem 4\nImplement a function that counts the\
    \ number of integers in a given array that are\ndivisible by 7. You may assume\
    \ that the array is non-empty and contains only integers.", "    \n    ones =\
    \ zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n        ones[i]\
    \ = sum(arr[i] == 1)\n    end\n    \n    sort(ones)\n    \n    for i in 1:length(arr)\n\
    \        arr[i] = ones[i]\n    end\n    \n    return arr\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n\
    @test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n</cell>\n<text>\nQuestion 3\nImplement the function\
    \ count_ones(arr::Vector{Int64})::Int64 that returns the number of ones in an\
    \ array.", "    \n    ones = zeros(Int64, length(arr))\n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    sorted = zeros(Int64,\
    \ length(arr))\n    \n    for i in 1:length(arr)\n        sorted[i] = arr[findfirst(ones[i]\
    \ .> 0)]\n    end\n    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@assert sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@assert sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\n</cell>\n<text>\nPart III. Finding all subsets\nIn this Kata,\
    \ you have to find all subsets of a given set. \nThe function should return an\
    \ Array of Arrays.", "    \n    ones = zeros(Int64, length(arr))\n    \n    for\
    \ i = 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones\
    \ = sort(ones)\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    ", "    \n    ones = zeros(Int64, length(arr))\n  \
    \  \n    for i = 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n\
    \    \n    ones = sort(ones)\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n  \
    \  \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n  \
    \  \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n  \
    \  \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n  \
    \  \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n  \
    \  \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n  \
    \  \n    ", "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] =\
    \ 1\n    \n    sorted_ones = sort(ones)\n    \n    sorted_arr = zeros(Int64, length(arr))\n\
    \    sorted_arr[arr .== 1] = sorted_ones\n    \n    sorted_arr = sort(sorted_arr)\n\
    \    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of ones in an array.\
    \ Test it on several examples:", "    \n    ones = zeros(Int, length(arr))\n \
    \   \n    for i = 1:length(arr)\n        ones[i] = count_ones(arr[i])\n    end\n\
    \    \n    sorted = sort(ones)\n    \n    sorted[end] = arr[end]\n    \n    return\
    \ sorted\nend\n</cell>\n<code language=julia-1.5>\nsort_array([1, 5, 2, 3, 4])\n\
    </cell>\n<code language=julia-1.5>\nsort_array([-2, -3, -4, -5, -6])\n</cell>\n\
    <code language=julia-1.5>\nsort_array([1, 0, 2, 3, 4])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns an array of all integers from 1 to n that are\
    \ divisible by k. \nFor example, for n = 10 and k = 3, the output should be [1,2,4,6,8,10].",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    arr = sort(arr)\n\
    \    \n    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = sort(ones)\n  \
    \  \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ", " \
    \   \n    ones = zeros(Int, length(arr))\n    for i in 1:length(arr)\n       \
    \ ones[i] = sum(arr[i] == 1)\n    end\n    \n    sorted_arr = zeros(Int, length(arr))\n\
    \    for i in 1:length(arr)\n        sorted_arr[i] = arr[findfirst(ones == 1)]\n\
    \    end\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nPart II: Binary Search\nIn this Kata, you have\
    \ to implement binary search algorithm to find if some number exists in an array.\
    \ \nThe algorithm is very similar to merge sort, but instead of dividing array\
    \ into two halves, it divides array into two halves until it finds the number\
    \ you are looking for. \nThe complexity of the algorithm is $O(logn)$, where $n$\
    \ is the length of the array.", "    \n    arr = sort(arr)\n    \n    ones = zeros(Int64,\
    \ length(arr))\n    \n    for i in 1:length(arr)\n        ones[i] = sum(arr[i]\
    \ == 1)\n    end\n    \n    ones = sort(ones)\n    \n    ones = ones[2:end]\n\
    \    \n    for i in 1:length(arr)\n        if arr[i] == 1\n            arr[i]\
    \ = ones[i]\n        end\n    end\n    \n    return arr\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| a |>\nHere is a simple solution that uses no loops and no recursion.\n\
    <code>", "    \n    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    sort(ones)\n    \n   \
    \ return arr\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1, 5,\
    \ 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nPart III: Binary Search\nNow let's implement binary search to solve the\
    \ Kata.", "    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] .== 1)\n    end\n    \n    sorted = sort(ones)\n\
    \    \n    sorted = sorted[ones(length(sorted), 1) .!= 0]\n    \n    return sorted\n\
    end\n</cell>\n<code language=julia-1.5>\n@test sort_array([1, 5, 2, 3, 4]) ==\
    \ [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3,\
    \ -2]\n@test sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns the number of\
    \ ones in each position. For example, given [1, 1, 0, 1] it should return [1,\
    \ 1, 2, 1]. Your function should work for any vector size.", "    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    arr = sort(arr)\n    \n    ones = zeros(Int64, length(arr))\n\
    \    \n    for i in 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n\
    \    \n    arr = arr .- ones\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    sort_array([1, 5, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nsort_array([-2,\
    \ -3, -4, -5, -6])\n</cell>\n<code language=julia-1.5>\nsort_array([1, 0, 2, 3,\
    \ 4])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number of\
    \ ones in an array. For example, given [1, 1, 0, 1], your function should return\
    \ 3.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int64,\
    \ length(arr))\n    ones[arr .!= 0] = 1\n    \n    ones_sorted = sort(ones)\n\
    \    \n    sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        sorted_arr[i] = arr[ones_sorted .== i][1]\n    end\n    \n    return\
    \ sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1, 5,\
    \ 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nProblem 7: Find all elements of a vector that are less than a given value",
  "    \n    ones = zeros(Int64, length(arr))\n    for x in arr\n        ones[x] =\
    \ 1\n    end\n    \n    sorted = zeros(Int64, length(arr))\n    \n    for x in\
    \ arr\n        sorted[x] = ones[x]\n    end\n    \n    sorted\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n@assert sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@assert\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n</cell>\n<text>\nProblem 4\nWrite\
    \ a function that returns the number of ones in a binary representation of an\
    \ integer.", "    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    sort(ones)\n    \n   \
    \ return arr\nend\n</cell>\n<text>\nSolution\nLet's test our function!", "   \
    \ \n    arr = sort(arr)\n    \n    ones = zeros(Int64, length(arr))\n    \n  \
    \  for i in 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n    \n\
    \    ones = sort(ones)\n    \n    ones = ones[2:end]\n    \n    for i in 1:length(arr)\n\
    \        arr[i] = arr[i] - ones[i]\n    end\n    \n    arr\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n\
    @assert sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@assert sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n</cell>\n<text>\nProblem 8\nImplement a function\
    \ that counts the number of 1's in an array of non-negative integers.", "    \n\
    \    ones = zeros(Int64, length(arr))\n    \n    for i in eachindex(arr)\n   \
    \     ones[i] = sum(arr[i] == 1)\n    end\n    \n    sort(ones)\n    \n    return\
    \ arr\nend", "    \n    arr = sort(arr)\n    \n    ones = zeros(Int64, length(arr))\n\
    \    \n    for i in 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n\
    \    \n    ones = sort(ones)\n    \n    ones = ones[2:end]\n    \n    for i in\
    \ 1:length(arr)\n        arr[i] = ones[arr[i]]\n    end\n    \n    return arr\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThank you so much for taking the time\
    \ to write this answer! I really appreciate it. I will try this out and see how\
    \ it goes.\n<|/ c |>\n<| c |>\nI ran your code, and it worked perfectly! Thank\
    \ you so much! I really appreciate it!\n<|/ c |>\n<| c |>\nNo problem! Glad I\
    \ could help.\n<|/ c |>\n<| a dscore=0 |>\nHere's a solution using Julia's sort!\
    \ function, which sorts in-place:\n<code>", "    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    ones = zeros(Int64, length(arr))\n    ones[arr\
    \ .== 1] = 1\n    \n    sorted_ones = sort(ones)\n    \n    sorted_arr = zeros(Int64,\
    \ length(arr))\n    sorted_arr[arr .== 1] = sorted_ones\n    \n    sorted_arr\n\
    end\n</cell>\n<text>\nPart 2: Binary Search\nThe binary search algorithm is one\
    \ of the most common algorithms used in computer science. It has two main properties:",
  "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n   \
    \ ones_sorted = sort(ones)\n    \n    decimals = zeros(Int64, length(arr))\n \
    \   decimals[ones_sorted .== 1] = 1\n    \n    decimals_sorted = sort(decimals)\n\
    \    \n    sorted_arr = zeros(Int64, length(arr))\n    sorted_arr[ones_sorted\
    \ .== 1] = arr .== 1\n    \n    sorted_arr[ones_sorted .== 1] = arr[ones_sorted\
    \ .== 1]\n    \n    sorted_arr[ones_sorted .== 1] = arr[ones_sorted .== 1]\n \
    \   \n    sorted_arr[ones_sorted .== 1] = arr[ones_sorted .== 1]\n    \n    sorted_arr[ones_sorted\
    \ .== 1] = arr[ones_sorted .== 1]\n    \n    sorted_arr[ones_sorted .== 1] = arr[ones_sorted\
    \ .== 1]\n    \n    sorted_arr[ones_sorted .== 1] = arr[ones_sorted .== 1]\n \
    \   \n    sorted_arr[ones_sorted .== 1] = arr[ones_sorted .== 1]\n    \n    sorted_arr[ones_sorted\
    \ .== 1] = arr[ones_sorted .== 1]\n    \n    sorted_arr[ones_sorted .== 1] = arr[ones_sorted\
    \ .== 1]\n    \n    sorted_arr[ones_sorted .== 1] = arr[ones_sorted .== 1]\n \
    \   \n    sorted_arr[ones_sorted .== 1] = arr[ones_sorted .== 1]\n    \n    sorted_arr[ones_sorted\
    \ .== 1] = arr[ones_sorted .== 1]\n    \n    sorted_arr[ones_sorted .== 1] = arr[ones_sorted\
    \ .== 1]\n    \n    sorted_arr[ones_sorted .== 1] = arr[ones_sorted .== 1]\n \
    \   \n    sorted_arr[ones_sorted .== 1] = arr[ones_sorted .== 1]\n    \n    sorted_arr[ones_sorted\
    \ .== 1] = arr[ones_sorted .== 1]\n    \n    sorted_arr[ones_sorted .== 1] = arr[ones_sorted\
    \ .== 1]\n    \n    sorted_arr[ones_sorted .== 1] = arr[ones_sorted .== 1]\n \
    \   \n    sorted_arr[ones_sorted .== 1] = arr[ones_sorted .== 1]\n    \n    sorted_arr[ones_sorted\
    \ .== 1] = arr[ones_sorted .== 1]\n    \n    sorted_arr[ones_sorted .== 1] = arr[ones_sorted\
    \ .== 1]\n    \n    sorted_arr[ones_sorted .== 1] = arr[ones_sorted .== 1]\n \
    \   \n", "    \n    arr = arr .- 1 \n    \n    ones = zeros(Int64, length(arr))\n\
    \    \n    for i in 1:length(arr)\n        ones[i] = sum(arr .== i)\n    end\n\
    \    \n    ones = ones ./ length(arr)\n    \n    ones = sort(ones)\n    \n   \
    \ ones = ones[2:end]\n    \n    ones = ones .* 10\n    \n    ones = ones .+ ones[1]\n\
    \    \n    ones = ones ./ 10\n    \n    ones = ones[2:end]\n    \n    ones = ones\
    \ .- ones[1]\n    \n    ones = ones ./ 10\n    \n    ones = ones[2:end]\n    \n\
    \    ones = ones .+ ones[1]\n    \n    ones = ones ./ 10\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones .- ones[1]\n    \n    ones = ones ./ 10\n    \n    ones\
    \ = ones[2:end]\n    \n    ones = ones .+ ones[1]\n    \n    ones = ones ./ 10\n\
    \    \n    ones = ones[2:end]\n    \n    ones = ones .- ones[1]\n    \n    ones\
    \ = ones ./ 10\n    \n    ones = ones[2:end]\n    \n    ones = ones .+ ones[1]\n\
    \    \n    ones = ones ./ 10\n    \n    ones = ones[2:end]\n    \n    ones = ones\
    \ .- ones[1]\n    \n    ones = ones ./ 10\n    \n    ones = ones[2:end]\n    \n\
    \    ones = ones .+ ones[1]\n    \n    ones = ones ./ 10\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones .- ones[1]\n    \n    ones = ones ./ 10\n    \n    ones\
    \ = ones[2:end]\n    \n    ones = ones .+ ones[1]\n    \n    ones = ones ./ 10\n\
    \    \n    ones = ones[2:end]\n    \n    ones = ones .- ones[1]\n    \n    ones\
    \ = ones ./ 10\n    \n    ones = ones[2:end]\n    \n    ones = ones .+ ones[1]\n\
    \    \n    ones = ones ./ 10\n    \n    ones = ones[2:end]\n    \n    ones = ones\
    \ .- ones[1]\n    \n    ones = ones ./ 10\n    \n    ones = ones[2:end]", "  \
    \  \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n   \
    \ sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n  \
    \      sorted_arr[i] = sort(ones[arr .== i])[1]\n    end\n    \n    return sorted_arr\n\
    end\n</cell>\n<code language=julia-1.5>\n@test sort_array([1, 5, 2, 3, 4]) ==\
    \ [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3,\
    \ -2]\n@test sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns the number of\
    \ 1's in that vector. Test it on some vectors.", "    \n    arr = sort(arr)\n\
    \    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = sort(ones)\n  \
    \  \n    ones = ones[2:end]\n    \n    ones = ones[ones[1] != 0]\n    \n    ones\
    \ = ones[2:end]\n    \n    ones = ones[ones[1] != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones[1] != 0]\n    \n    ones = ones[2:end]\n    \n   \
    \ ones = ones[ones[1] != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones[1]\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones[1] != 0]\n \
    \   \n    ones = ones[2:end]\n    \n    ones = ones[ones[1] != 0]\n    \n    ones\
    \ = ones[2:end]\n    \n    ones = ones[ones[1] != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones[1] != 0]\n    \n    ones = ones[2:end]\n    \n   \
    \ ones = ones[ones[1] != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones[1]\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones[1] != 0]\n \
    \   \n    ones = ones[2:end]\n    \n    ones = ones[ones[1] != 0]\n    \n    ones\
    \ = ones[2:end]\n    \n    ones = ones[ones[1] != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones[1] != 0]\n    \n    ones = ones[2:end]\n    \n   \
    \ ones = ones[ones[1] != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones[1]\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones[1] != 0]\n \
    \   \n    ones = ones[2:end]\n    \n    ones = ones[ones[1] != 0]\n    \n    ones\
    \ = ones[2:end]\n    \n    ones = ones[ones[1] != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones[1] != 0]\n    \n    one", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int, length(arr))\n\
    \    for i in 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n   \
    \ \n    sort(ones)\n    \n    \n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nQuestion 3\nWrite a function that returns the\
    \ number of ones in an array. For example, given [1, 1, 0, 0], return 3.", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int64,\
    \ length(arr))\n    for i in 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n\
    \    end\n    \n    sorted = zeros(Int64, length(arr))\n    for i in 1:length(arr)\n\
    \        sorted[i] = arr[findall(ones == i)[1]]\n    end\n    \n    return sorted\n\
    end\n</cell>\n<code language=julia-1.5>\n@test sort_array([1, 5, 2, 3, 4]) ==\
    \ [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3,\
    \ -2]\n@test sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n</cell>\n<text>\nProblem\
    \ 7: Find all elements of a given array that satisfy a given condition\nWrite\
    \ a function that finds all elements of a given array that satisfy a given condition.\
    \ \nFor example, given an array arr = [1, 2, 3, 4] and condition = arr > 3, the\
    \ function should return [1, 2]. \nThe function should return an empty array []\
    \ if the condition does not hold for all elements of the array.", "    \n    arr\
    \ = sort(arr)\n    \n    ones = zeros(Int64, length(arr))\n    \n    for i in\
    \ 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones =\
    \ sort(ones)\n    \n    ones = ones[2:end]\n    \n    return arr[ones]\nend\n\
    </code>\n<|/ a tags=sorting,julia |>\n<| c |>\nThis doesn't seem to work. `sort_array([1,\
    \ 5, 2, 3, 4])` returns `[1, 2, 3, 4, 5]` instead of `[1, 2, 3, 4, 5]`.\n<|/ c\
    \ |>\n<| c |>\nI tested it and it works. I added the code I used to test it.\n\
    <|/ c |>\n<| c |>\nI added a more efficient solution that doesn't require sorting\
    \ the entire array just to find the number of ones in each element.\n<|/ c |>\n\
    <| c |>\nI added a solution that doesn't require sorting the entire array just\
    \ to find the number of ones in each element.\n<|/ c |>\n<| a |>\nHere's a solution\
    \ using sortperm:\n<code>", "    \n    ones = zeros(Int64, length(arr))\n    for\
    \ i = 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n    \n    sorted\
    \ = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n        sorted[i]\
    \ = arr[findall(ones == 1)][i]\n    end\n    \n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\n@test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n\
    @test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes an array of integers and returns an array of integers sorted according\
    \ to their absolute values.", "    \n    ones = zeros(Int64, length(arr))\n  \
    \  for i in 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n    \n\
    \    sorted_ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        sorted_ones[i] = ones[i]\n    end\n    \n    sorted_ones = sort(sorted_ones)\n\
    \    \n    sorted_arr = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        sorted_arr[i] = arr[sorted_ones[i]]\n    end\n    \n    return sorted_arr\n\
    end\n</code>\n<|/ a tags=sorting,julia,arrays |>\n<| a dscore=1 |>\n<code>", " \
    \   \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n  \
    \  sorted = sort(ones)\n    \n    sorted[sorted .!= 1] .= 0\n    \n    return\
    \ sorted\nend\n</cell>\n<code language=julia-1.5>\nsort_array([1, 5, 2, 3, 4])\n\
    </cell>\n<code language=julia-1.5>\nsort_array([-2, -3, -4, -5, -6])\n</cell>\n\
    <code language=julia-1.5>\nsort_array([1, 0, 2, 3, 4])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns the number of\
    \ ones in each position. For example, for [1, 1, 0, 1] it should return [1, 1,\
    \ 2, 1]. Your function should work for any vector size.", "    \n    arr = sort(arr)\n\
    \    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    sort(ones)\n    \n   \
    \ return arr\nend", "    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .!= 0] = 1\n    \n   \
    \ ones_sorted = sort(ones)\n    \n    decimals = zeros(Int64, length(ones_sorted))\n\
    \    \n    for i = 1:length(ones_sorted)\n        decimals[i] = ones_sorted[i]\
    \ * log(2, 2)\n    end\n    \n    decimal_sorted = sort(decimals)\n    \n    return\
    \ decimal_sorted\nend\n</cell>\n<code language=julia-1.0>\n@test sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nPart II: Binary Search\nIn this Kata, you have to implement binary search\
    \ algorithm for searching \nfor a value in sorted array.", "    \n    ones = zeros(Int64,\
    \ length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n\
    \    \n    sorted_arr .= arr\n    \n    sorted_arr .= ones\n    \n    sorted_arr\
    \ .= sort(sorted_arr)\n    \n    return sorted_arr\nend", "    \n    arr = sort(arr)\n\
    \    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = sort(ones)\n  \
    \  \n    ones = ones[2:end]\n    \n    ones = ones[1:end-1]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[1:end-1]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[1:end-1]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[1:end-1]\n    \n    ones = ones[2:end]\n    \n    ones = ones[1:end-1]\n\
    \    \n    ones = ones[2:end]\n    \n    ones = ones[1:end-1]\n    \n    ones\
    \ = ones[2:end]\n    \n    ones = ones[1:end-1]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[1:end-1]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[1:end-1]\n    \n    ones = ones[2:end]\n    \n    ones = ones[1:end-1]\n\
    \    \n    ones = ones[2:end]\n    \n    ones = ones[1:end-1]\n    \n    ones\
    \ = ones[2:end]\n    \n    ones = ones[1:end-1]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[1:end-1]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[1:end-1]\n    \n    ones = ones[2:end]\n    \n    ones = ones[1:end-1]\n\
    \    \n    ones = ones[2:end]\n    \n    ones = ones[1:end-1]\n    \n    ones\
    \ = ones[2:end]\n    \n    ones = ones[1:end-1]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[1:end-1]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[1:end-1]\n    \n    ones = ones[2:end]\n    \n    ones = ones[1:end-1]\n\
    \    \n    ones = ones[2:end]\n    \n    ones = ones[1:end-1]\n    \n    ones\
    \ = ones[2:end]\n    \n    ones = ones[1:end-1]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[1:end-1]\n    \n    ones = one", "    \n    ones = zeros(Int64,\
    \ length(arr))\n    for x in arr\n        ones[x] += 1\n    end\n    \n    sorted_arr\
    \ = zeros(Int64, length(arr))\n    for x in arr\n        sorted_arr[x] = ones[x]\n\
    \    end\n    \n    sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n@test\
    \ sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4,\
    \ -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) [0, 1, 2,\
    \ 3, 4]\n</cell>\n<text>\nPart 3: Write a function that counts the number of ones\
    \ in a binary representation of an integer.", "    \n    ones = zeros(Int64, length(arr))\n\
    \    \n    for i in eachindex(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n\
    \    \n    sort(ones)\n    \n    for i in eachindex(ones)\n        arr[i] = ones[i]\n\
    \    end\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n@test\
    \ sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4,\
    \ -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) [0, 1, 2,\
    \ 3, 4]\n</cell>\n<text>\nPart III. Sort by frequency\nIn this Kata, you have\
    \ to sort an array of non-negative integers according to\nnumber of occurrences\
    \ of their binary representation in ascending order.\nFor similar number of occurrences,\
    \ sort based on decimal value.", "    \n    ones = zeros(Int64, length(arr))\n\
    \    ones[arr .== 1] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n \
    \   \n    sorted_arr .= arr .- ones\n    \n    sorted_arr .= sort(sorted_arr)\n\
    \    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@assert sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@assert sort_array([1, 0, 2, 3, 4]) [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nPart II: Binary search algorithm\nIn this Kata,\
    \ you have to implement binary search algorithm for searching element in sorted\
    \ array.", "    \n    ones = zeros(Int64, length(arr))\n    for (i,x) in enumerate(arr)\n\
    \        ones[i] = sum((x .== 1) .== 1)\n    end\n    \n    sorted = sort(ones)\n\
    \    \n    return arr[sorted]\nend\n</cell>\n<code language=julia-1.5>\n@test\
    \ sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4,\
    \ -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) [0, 1, 2,\
    \ 3, 4]\n</cell>\n<text>\nPart III. Sort by frequency\nIn this Kata, you have\
    \ to sort an array of non-negative integers according to\nnumber of occurrences\
    \ in their binary representation in ascending order.\nFor similar number of occurrences,\
    \ sort based on decimal value.", "    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n  \
    \  sorted = zeros(Int64, length(arr))\n    sorted[ones .== 1] = arr[ones .== 1]\n\
    \    \n    sorted[ones .!= 1] .= sorted[ones .!= 1] .+ ones[ones .!= 1]\n    \n\
    \    sorted[ones .== 1] .= sorted[ones .== 1] .- ones[ones .== 1]\n    \n    return\
    \ sorted\nend\n</cell>\n<code language=julia-1.5>\n@assert sort_array([1, 5, 2,\
    \ 3, 4]) == [1, 2, 3, 4, 5]\n@assert sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@assert sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nProblem 4\nImplement a function that counts the number of elements in\
    \ a vector that are greater than a specified value.", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int64, length(arr))\n\
    \    for idx in eachindex(arr)\n        ones[idx] = sum(arr[idx] == 1)\n    end\n\
    \    \n    sorted_idx = sort(ones)\n    \n    sorted_arr = zeros(Int64, length(arr))\n\
    \    for idx in eachindex(arr)\n        sorted_arr[idx] = arr[sorted_idx[idx]]\n\
    \    end\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n\
    sort_array([1, 5, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nsort_array([-2,\
    \ -3, -4, -5, -6])\n</cell>\n<code language=julia-1.5>\nsort_array([1, 0, 2, 3,\
    \ 4])\n</cell>\n<text>\nPart 2\nIn this Kata, you have to implement a function\
    \ that returns an array of all possible permutations of an array. \nFor example\
    \ given input [1, 2, 3, 4], the function should return [\n    [1, 2, 3, 4],\n\
    \    [1, 3, 2, 4],\n    [1, 3, 4, 2],\n    [1, 4, 2, 3],\n    [1, 4, 3, 2],\n\
    \    [2, 1, 3, 4],\n    [2, 3, 1, 4],\n    [2, 3, 4, 1],\n    [2, 4, 1, 3],\n\
    \    [2, 4, 3, 1],\n    [3, 1, 4, 2],\n    [3, 2, 4, 1],\n    [3, 4, 1, 2],\n\
    \    [3, 4, 2, 1],\n    [4, 1, 2, 3],\n    [4, 1, 3, 2],\n    [4, 2, 1, 3],\n\
    \    [4, 2, 3, 1],\n    [4, 3, 1, 2],\n    [4, 3, 2, 1]\n]", "    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    ones = zeros(Int64, length(arr))\n    ones[arr\
    \ .== 1] = 1\n    \n    ones_sorted = sort(ones)\n    \n    sorted_arr = zeros(Int64,\
    \ length(arr))\n    \n    for i = 1:length(arr)\n        sorted_arr[i] = arr[ones_sorted\
    \ .== i]\n    end\n    \n    return sorted_arr\nend\n</cell>\n<text>\nPart III.\
    \ Sort by frequency\nIn this Kata, you have to sort an array of non-negative integers\
    \ according to\nnumber of ones in their binary representation in ascending order.\n\
    For similar number of ones, sort based on decimal value.", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    arr = sort(arr)\n    \n   \
    \ ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n        ones[i]\
    \ = sum(arr[i] == 1)\n    end\n    \n    ones = sort(ones)\n    \n    arr = zeros(Int64,\
    \ length(arr))\n    \n    for i = 1:length(arr)\n        arr[i] = arr[ones[i]]\n\
    \    end\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\nsort_array([1,\
    \ 5, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nsort_array([-2, -3, -4, -5,\
    \ -6])\n</cell>\n<code language=julia-1.5>\nsort_array([1, 0, 2, 3, 4])\n</cell>\n\
    <text>\nPart 2\nThe second kata will give you a chance to practice your sorting\
    \ skills.", "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] =\
    \ 1\n    \n    ones_sorted = sort(ones)\n    \n    decimals = zeros(Int64, length(ones_sorted))\n\
    \    \n    for i = 1:length(ones_sorted)\n        decimals[i] = ones_sorted[i]\
    \ * log(2, 2)\n    end\n    \n    decimal_sorted = sort(decimals)\n    \n    return\
    \ decimal_sorted\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nProblem 3\nWrite a function that returns the number of ones in an integer.",
  "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n   \
    \ sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n  \
    \      sorted_arr[i] = arr[ones[i]]\n    end\n    \n    return sorted_arr\nend\n\
    </cell>\n<code language=julia-1.5>\n@test sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that counts how many times a given value appears in an array.", " \
    \   \n    ones = zeros(Int, length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted_ones\
    \ = zeros(Int, length(ones))\n    \n    sorted_ones[ones .== 1] = sort(ones[ones\
    \ .== 1])\n    \n    sorted_ones[ones .!= 1] = sort(ones[ones .!= 1])\n    \n\
    \    sorted_ones[ones .== 0] = sort(ones[ones .== 0])\n    \n    return sorted_ones\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nI came up with this:\n<code>",
  "    \n    ones = zeros(Int64, length(arr))\n    for x in arr\n        ones[x] +=\
    \ 1\n    end\n    \n    sorted_ones = zeros(Int64, length(ones))\n    for x in\
    \ ones\n        sorted_ones[x] = x\n    end\n    \n    sorted_ones = sort(sorted_ones)\n\
    \    \n    sorted_arr = zeros(Int64, length(arr))\n    for x in arr\n        sorted_arr[x]\
    \ = sorted_ones[x]\n    end\n    \n    return sorted_arr\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n\
    @test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n</cell>\n<text>\nPart 2\nNow let's implement the\
    \ function count_ones(arr::Vector{Int64})::Int64 that returns the number of ones\
    \ in arr in ascending order.", "    \n    ones = zeros(Int, length(arr))\n   \
    \ \n    for i in 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n\
    \    \n    ones = sort(ones)\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n", "    \n    ones = zeros(Int64, length(arr))\n\
    \    ones[arr .== 1] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n \
    \   \n    for i = 1:length(arr)\n        sorted_arr[i] = maximum(ones[arr .==\
    \ i])\n    end\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.3>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ number of ones in an integer.", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    arr = sort(arr)\n    \n    ones = zeros(Int64, length(arr))\n\
    \    \n    for i in 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n\
    \    \n    sort(ones)\n    \nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nProblem 4\nImplement a function that returns the number of ones in an\
    \ integer.", "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1]\
    \ = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        sorted_arr[i] = i\n    end\n    \n    for i = 1:length(arr)\n       \
    \ sorted_arr[i] = i\n    end\n    \n    return sorted_arr\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n\
    @assert sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@assert sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n</cell>\n<text>\nProblem 4\nWrite a function that\
    \ returns an array of integers such that each element of the array is greater\
    \ than the previous element in the array. For example, given [5, 3, 2, 7, 4] your\
    \ function should return [5, 7, 7, 3, 2].", "    \n    ones = zeros(Int64, length(arr))\n\
    \    ones[arr .== 1] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n \
    \   \n    sorted_arr .= ones\n    \n    sorted_arr .= sort(ones)\n    \n    sorted_arr\
    \ .= sort(arr)\n    \n    sorted_arr .= sort(sorted_arr)\n    \n    return sorted_arr\n\
    end\n</cell>\n<code language=julia-1.5>\nsort_array([1, 5, 2, 3, 4])\n</cell>\n\
    <code language=julia-1.5>\nsort_array([-2, -3, -4, -5, -6])\n</cell>\n<code language=julia-1.5>\n\
    sort_array([1, 0, 2, 3, 4])\n</cell>\n<text>\nPart 2\nThe second part of the Kata\
    \ is to implement a function that counts how many times each unique number appears\
    \ in the given array.", "    \n    ones = zeros(Int64, length(arr))\n    ones[arr\
    \ .== 1] = 1\n    \n    sorted = sort(ones)\n    \n    sorted[sorted .== 0] =\
    \ -1\n    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n@test\
    \ sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4,\
    \ -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) [0, 1, 2,\
    \ 3, 4]\n</cell>\n<text>\nProblem 4\nImplement the function count_ones(arr::Vector{Int64})::Int64\
    \ which counts the number of ones in an array.", "    \n    ones = zeros(Int64,\
    \ length(arr))\n    for i = 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n\
    \    end\n    \n    sorted = sort(ones)\n    \n    return sorted\nend", "    \n\
    \    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted_ones\
    \ = sort(ones)\n    \n    sorted_arr = zeros(Int64, length(arr))\n    sorted_arr[arr\
    \ .== 1] = sorted_ones\n    \n    sorted_arr = sort(sorted_arr)\n    \n    return\
    \ sorted_arr\nend\n</cell>\n<code language=julia-1.5>\nsort_array([1, 5, 2, 3,\
    \ 4])\n</cell>\n<code language=julia-1.5>\nsort_array([-2, -3, -4, -5, -6])\n\
    </cell>\n<code language=julia-1.5>\nsort_array([1, 0, 2, 3, 4])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of ones in an array. For\
    \ example, for [1, 1, 0, 1] it should return 3.", "    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    ones = zeros(Int64, length(arr))\n    \n    for x in arr\n        ones[x]\
    \ = 1\n    end\n    \n    sorted = sort(ones)\n    \n    sorted\nend\n</cell>\n\
    <code language=julia-1.5>\n@test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n\
    @test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n</cell>\n<text>\nProblem 7: Sort a vector of positive\
    \ integers according to their absolute value\nImplement the function abs_sort(arr::Vector{Int64})::Vector{Int64}\
    \ that sorts the array arr according to their absolute value.", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int64, length(arr))\n\
    \    ones[arr .== 1] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n \
    \   \n    for i = 1:length(arr)\n        sorted_arr[i] = arr[ones[i]]\n    end\n\
    \    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nProblem 7\nImplement the function count_ones(arr::Vector{Int64})::Int64\
    \ that returns the number of ones in arr in ascending order.", "    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int64, length(arr))\n\
    \    ones[arr .== 1] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n \
    \   sorted_arr .= arr\n    \n    sorted_arr .= ones\n    \n    sorted_arr .= sort(sorted_arr)\n\
    \    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@assert sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@assert sort_array([1, 0, 2, 3, 4]) [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nPart II: Binary Search\nIn this Kata, you have\
    \ to implement binary search algorithm for searching elements in sorted array.\
    \ \nThe algorithm has two parameters: array and key. \nThe array is sorted and\
    \ key is a value that you want to find in the array.", "    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int, length(arr))\n\
    \    \n    for i = 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n\
    \    \n    sorted = zeros(Int, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        sorted[i] = arr[findall(ones == 1)][1]\n    end\n    \n    return sorted\n\
    end\n</code>\n<|/ a tags=julia |>\n<| a dscore=0 |>\n<code>", "    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    ones = zeros(Int64, length(arr))\n    for\
    \ i = 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n    \n    sorted_arr\
    \ = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n        sorted_arr[i]\
    \ = arr[findall(ones == 1)][i]\n    end\n    \n    return sorted_arr\nend\n</cell>\n\
    <code language=julia-1.0>\n@test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n\
    @test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n</cell>\n<text>\nPart 2\nImplement the function\
    \ count_ones(arr::Vector{Int64})::Int64 which counts the number of ones in an\
    \ array.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int64,\
    \ length(arr))\n    ones[arr .== 1] = 1\n    \n    ones_sorted = sort(ones)\n\
    \    \n    decimals = zeros(Int64, length(ones_sorted))\n    decimals[ones_sorted\
    \ .== 1] = 1\n    \n    decimals_sorted = sort(decimals)\n    \n    \n    \n \
    \   return arr .== ones_sorted .& arr .== decimals_sorted\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n\
    @test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n</cell>\n<text>\nProblem 4\nWrite a function that\
    \ takes a vector of integers and returns the number of 1's in that vector. For\
    \ example, count_ones([1, 0, 2, 3]) should return 3.", "    \n    arr = sort(arr)\n\
    \    \n    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr == i)\n    end\n    \n    sort(ones)\n    \n    return\
    \ arr\nend\n</cell>\n<code language=julia-1.5>\nsort_array([1, 5, 2, 3, 4])\n\
    </cell>\n<code language=julia-1.5>\nsort_array([-2, -3, -4, -5, -6])\n</cell>\n\
    <code language=julia-1.5>\nsort_array([1, 0, 2, 3, 4])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that checks if a given number is prime. \nThe function should\
    \ return true or false depending on whether the number is prime or not. \nThe\
    \ function should take one argument: an integer number.", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int64, length(arr))\n\
    \    \n    for x in arr\n        ones[x] = ones[x] + 1\n    end\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = sort(ones)\n    \n    ones = ones[ones !=\
    \ 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n   \
    \ \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[ones != 0]\n    ", "    \n    sorted = sort(arr)\n    \n    ones = zeros(length(arr))\n\
    \    for x in arr\n        ones[x] = 1\n    end\n    \n    sorted = sort(ones)\n\
    \    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nProblem 4\nImplement a function that counts the number of elements in\
    \ a vector that satisfy a predicate (a function that takes a single argument and\
    \ returns a boolean).", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n   \
    \ sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n  \
    \      sorted_arr[i] = sum(ones[arr .== i])\n    end\n    \n    return sorted_arr\n\
    end\n</cell>\n<text>\nSolution\nClick below for the solution.", "    \n    ones\
    \ = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted = sort(ones)\n\
    \    \n    sorted[sorted .!= ones] = arr[sorted .!= ones]\n    \n    return sorted\n\
    end\n</cell>\n<code language=julia-1.5>\n@test sort_array([1, 5, 2, 3, 4]) ==\
    \ [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3,\
    \ -2]\n@test sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that sorts integers according to their binary representation\
    \ in descending order. For example, for input [4, 3, 2, 1], the output should\
    \ be [3, 2, 4, 1].", "    \n    ones = zeros(Int64, length(arr))\n    ones[arr\
    \ .== 1] = 1\n    \n    ones_sorted = sort(ones)\n    \n    sorted_arr = zeros(Int64,\
    \ length(arr))\n    \n    for i = 1:length(arr)\n        sorted_arr[i] = ones_sorted[i]\n\
    \    end\n    \n    return sorted_arr\nend\n</cell>\n<text>\nSolution\nClick below\
    \ for the solution.", "    \n    ones = zeros(Int64, length(arr))\n    for i in\
    \ 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n    \n    sorted_ones\
    \ = zeros(Int64, length(ones))\n    \n    for i in 1:length(ones)\n        sorted_ones[i]\
    \ = ones[i]\n    end\n    \n    sorted_ones = sort(sorted_ones)\n    \n    sorted_arr\
    \ = zeros(Int64, length(arr))\n    for i in 1:length(arr)\n        sorted_arr[i]\
    \ = arr[sorted_ones[i]]\n    end\n    \n    return sorted_arr\nend\n</cell>\n\
    <text>\nQ2. Write a function that returns an array of integers such that each\
    \ element of the array is greater than or equal to the previous element in the\
    \ array. For example, given [4, 3, 2, 1], the function should return [4, 3, 2].\
    \ Your function should use no loops.", "    \n    ones = zeros(Int64, length(arr))\n\
    \    \n    for i in 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n\
    \    \n    sort(ones)\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nExercise 2\nWrite a function that takes an array\
    \ of integers and returns the number of ones in each position. For example, given\
    \ [1, 1, 0, 1], your function should return [2, 2, 0, 1]. Your function should\
    \ work for any array of integers, not just integers.", "    \n    ones = zeros(Int64,\
    \ length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n\
    \    \n    for i = 1:length(arr)\n        sorted_arr[i] = sum(ones[arr .== i])\n\
    \    end\n    \n    return sorted_arr\nend", "    \n    ones = zeros(Int64, length(arr))\n\
    \    ones[arr .== 1] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n \
    \   \n    for i = 1:length(arr)\n        sorted_arr[i] = maximum(ones[arr .==\
    \ i])\n    end\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nQuestion 3\nWrite a function that returns an array\
    \ of zeros except for those elements that are in another array.", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int64, length(arr))\n\
    \    ones[arr .!= 0] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n \
    \   \n    sorted_arr .= arr .- ones\n    \n    sorted_arr .= sort(sorted_arr)\n\
    \    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nPart II: Binary Search\nIn this Kata, you have to implement binary search\
    \ algorithm for searching a\ngiven value in an array. The algorithm should return\
    \ index of the first\noccurrence of the value or -1 if the value is not found.",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    arr = sort(arr)\n\
    \    \n    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    arr = arr .- ones\n  \
    \  \n    return arr\nend\n</cell>\n<code language=julia-1.3>\n@test sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nPart 2: Binary Search\nNow let's implement binary search to find if an\
    \ element exists in the array. We'll use binary search to find the position of\
    \ an element in the sorted array.", "    \n    ones = zeros(Int64, length(arr))\n\
    \    ones[arr .!= 0] = 1\n    \n    sorted = sort(ones)\n    \n    sorted[sorted\
    \ .!= 1] .= 0\n    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nExercise 2\nWrite a function that returns an array\
    \ of all numbers from 1 to n that are divisible by 3.", "    \n    ones = zeros(Int64,\
    \ length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n\
    \    \n    for i = 1:length(arr)\n        sorted_arr[i] = sort(ones[arr == i])[1]\n\
    \    end\n    \n    return sorted_arr\nend", "    \n    ones = zeros(Int64, length(arr))\n\
    \    \n    for i in 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n\
    \    \n    sort(ones)\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns the number of ones in each position. For example, given\
    \ [1, 1, 0, 1] it should return [3, 2, 1].", "    \n    sorted = sort(arr)\n \
    \   \n    ones = zeros(Int64, length(sorted))\n    \n    for i = 1:length(sorted)\n\
    \        ones[i] = sum(bitget(sorted, i))\n    end\n    \n    sorted = sort(ones)\n\
    \    \n    return sorted\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=sorting,julia\
    \ |>\nHere's a solution that uses sortperm:\n<code>", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int64, length(arr))\n\
    \    for x in arr\n        ones[x] += 1\n    end\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones(ones) != 0]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[ones != 0]\n    \n    one", "    \n    ones = zeros(Int, length(arr))\n\
    \    ones[arr .== 1] = 1\n    \n    sorted_arr = zeros(Int, length(arr))\n   \
    \ \n    for i = 1:length(arr)\n        sorted_arr[i] = sum(ones[arr .== i])\n\
    \    end\n    \n    return sorted_arr\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=sorting,julia,arrays\
    \ |>\n<code>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n  \
    \  sorted_arr = zeros(Int64, length(arr))\n    \n    sorted_arr .= arr\n    \n\
    \    for i = 2:length(arr)\n        \n        if ones[i-1] > ones[i]\n       \
    \     \n            temp = sorted_arr[i-1]\n            sorted_arr[i-1] = sorted_arr[i]\n\
    \            sorted_arr[i] = temp\n        end\n    end\n    \n    return sorted_arr\n\
    end\n</cell>\n<text>\nSolution\nLet's test your function", "    \n    ones = zeros(Int64,\
    \ length(arr))\n    \n    for i = 1:length(arr)\n        ones[i] = sum(arr[i]\
    \ == 1)\n    end\n    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    return ones\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nPart 2: Binary search algorithm\nIn this Kata, you have to implement binary\
    \ search algorithm for searching elements in a sorted array.", "    \n    ones\
    \ = zeros(Int, length(arr))\n    \n    for i = 1:length(arr)\n        ones[i]\
    \ = sum(arr[i] == 1)\n    end\n    \n    sorted = zeros(Int, length(arr))\n  \
    \  \n    for i = 1:length(arr)\n        sorted[i] = arr[findfirst(ones > arr[i])]\n\
    \    end\n    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@assert sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@assert sort_array([1, 0, 2, 3, 4]) [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nPart II: Binary Search Algorithm\nIn this Kata,\
    \ you have to implement binary search algorithm for searching in a sorted array.",
  "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n   \
    \ sorted = sort(ones)\n    \n    sorted[sorted .== 1] .= 0\n    \n    return sorted\n\
    end\n</cell>\n<code language=julia-1.5>\nsort_array([1, 5, 2, 3, 4])\n</cell>\n\
    <code language=julia-1.5>\nsort_array([-2, -3, -4, -5, -6])\n</cell>\n<code language=julia-1.5>\n\
    sort_array([1, 0, 2, 3, 4])\n</cell>\n<text>\nPart II: Binary Search\nThe binary\
    \ search algorithm is one of the most important algorithms in computer science.\
    \ \nIt is a very simple algorithm that finds the position of a target value in\
    \ a sorted array.\nThe algorithm has two parts:", "    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int64, length(arr))\n\
    \    ones[arr .!= 0] = 1\n    \n    ones_sorted = sort(ones)\n    \n    sorted_arr\
    \ = zeros(Int64, length(arr))\n    \n    for i = 1:length(ones_sorted)\n     \
    \   sorted_arr .= ones_sorted[i]\n    end\n    \n    return sorted_arr\nend\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=sorting,julia,arrays |>\n<code>", "    \n\
    \    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n    \
    \    ones[i] = sum(arr[i] == 1)\n    end\n    \n    sorted = sort(ones)\n    \n\
    \    sorted[end] = length(arr)\n    \n    for i in 1:length(sorted)\n        sorted[i]\
    \ = arr[i]\n    end\n    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nExercise 4\nWrite a function that takes an array\
    \ of integers and returns the number of ones in each position in the array.",
  "    \n    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    sorted = zeros(Int64,\
    \ length(arr))\n    \n    for i in 1:length(arr)\n        sorted[i] = arr[findall(ones\
    \ == i)[1]]\n    end\n    \n    return sorted\nend\n</cell>\n<text>\nPart 2: Write\
    \ a function that returns the number of ones in a binary representation of an\
    \ integer.", "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1]\
    \ = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        sorted_arr[i] = sum(ones[arr .== i])\n    end\n    \n    return sorted_arr\n\
    end\n</cell>\n<code language=julia-1.5>\n@test sort_array([1, 5, 2, 3, 4]) ==\
    \ [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3,\
    \ -2]\n@test sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n</cell>\n<text>\nProblem\
    \ 4\nImplement the function count_bits(x::Int64)::Int64 that returns the number\
    \ of bits in the binary representation of x.", "    \n    ones = zeros(Int64,\
    \ length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted_ones = sort(ones)\n\
    \    \n    sorted_arr = zeros(Int64, length(arr))\n    sorted_arr[arr .== 1] =\
    \ sorted_ones\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.0>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nPart III: Binary Search\nIn this Kata, you have\
    \ to implement binary search algorithm to find if some number $x$ is in sorted\
    \ array $A$. Binary search algorithm is very similar to linear search algorithm,\
    \ but instead of comparing $x$ to $A[i]$, binary search compares $x$ to $A[mid]$\
    \ and $A[mid]$ to $A[high]$. Binary search algorithm is also called \"binary search\"\
    .", "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n   \
    \ \n    sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        sorted_arr[i] = sum(ones[arr .== i])\n    end\n    \n    return sorted_arr\n\
    end\n</code>\n<|/ a tags=sorting,julia |>\n<| c |>\nThanks for your answer. Can\
    \ you please explain what does `ones[arr .== 1] = 1` do?\n<|/ c |>\n<| c |>\n\
    `ones[arr .== 1]` creates a boolean array where `ones[arr .== 1] == 1` returns\
    \ true if the element at `arr[i]` is equal to `1`. `ones[arr .== 1] == 1` returns\
    \ true if the element at `arr[i]` is equal to `1`. `ones[arr .== 1] == 1` returns\
    \ true if the element at `arr[i]` is equal to `1`. `ones[arr .== 1] == 1` returns\
    \ true if the element at `arr[i]` is equal to `1`. `ones[arr .== 1] == 1` returns\
    \ true if the element at `arr[i]` is equal to `1`. `ones[arr .== 1] == 1` returns\
    \ true if the element at `arr[i]` is equal to `1`. `ones[arr .== 1] == 1` returns\
    \ true if the element at `arr[i]` is equal to `1`. `ones[arr .== 1] == 1` returns\
    \ true if the element at `arr[i]` is equal to `1`. `ones[arr .== 1] == 1` returns\
    \ true if the element at `arr[i]` is equal to `1`. `ones[arr .== 1] == 1` returns\
    \ true if the element at `arr[i]` is equal to `1`. `ones[arr .== 1] == 1` returns\
    \ true if the element at `arr[i]` is equal to `1`. `ones[arr .== 1] == 1` returns\
    \ true if the element at `arr[i]` is equal to `1`. `ones[arr .== 1] == 1` returns\
    \ true if the element at `arr[i]` is equal to `1`. `ones[arr .== 1] == 1` returns\
    \ true if the element at `arr[i]` is equal to `1`. `ones[arr .== 1] == 1` returns\
    \ true if the element at `arr[i]` is equal to `1`. `ones[arr .== 1] == 1` returns\
    \ true if the element at `arr[i]` is equal to `1`. `ones[arr .== 1] == 1` returns\
    \ true if the element at `arr[i]` is equal to `1`. `ones[arr .== 1] == 1` returns\
    \ true ", "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n\
    \    \n    sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        sorted_arr[i] = sum(ones[arr .== i])\n    end\n    \n    return sorted_arr\n\
    end\n</cell>\n<code language=julia-1.5>\n@test sort_array([1, 5, 2, 3, 4]) ==\
    \ [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3,\
    \ -2]\n@test sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n</cell>\n<text>\nPart\
    \ 3: Binary Search Algorithm\nNow that you have implemented the sorting algorithm,\
    \ you can implement binary search algorithm to find if an element exists in the\
    \ array or not. Binary search algorithm is very similar to sorting algorithm,\
    \ except that instead of sorting it searches for the element in the sorted array.",
  "    \n    ones = zeros(Int64, length(arr))\n    for x in arr\n        ones[x] =\
    \ 1\n    end\n    \n    sorted = sort(ones)\n    \n    sorted2 = copy(sorted)\n\
    \    \n    for x in sorted\n        sorted2[x] = sorted2[x] + 1\n    end\n   \
    \ \n    return sorted2\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nProblem 8\nImplement the function count_bits(x::Int64)::Int64 that returns\
    \ the number of bits in the binary representation of x.", "    \n    ones = zeros(Int,\
    \ length(arr))\n    \n    for i = 1:length(arr)\n        ones[i] = sum(arr[i]\
    \ == 1)\n    end\n    \n    sorted = sort(ones)\n    \n    sorted[ones == 0] .=\
    \ 0\n    \n    return sorted\nend\n</cell>\n<text>\nSolution", "    \n    ones\
    \ = zeros(Int, length(arr))\n    \n    for i in 1:length(arr)\n        ones[i]\
    \ = sum(arr[i] == 1)\n    end\n    \n    sort(ones)\n    \n    return arr\nend\n\
    </cell>\n<code language=julia-1.5>\n@test sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n</cell>\n<text>\nPart III. Sorting\
    \ Algorithms\nNow that we have implemented the sorting algorithms, let's test\
    \ them on the given arrays. We will use @tests to test the functions. We will\
    \ also use @code_warntype to warn us if we are using unsafe functions.", "   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int64, length(arr))\n\
    \    \n    for i = 1:length(arr)\n        ones[i] = count_ones(arr[i])\n    end\n\
    \    \n    sorted_ones = sort(ones)\n    \n    sorted_arr = zeros(Int64, length(arr))\n\
    \    \n    for i = 1:length(arr)\n        sorted_arr[i] = arr[sorted_ones[i]]\n\
    \    end\n    \n    return sorted_arr\nend", "    \n    ones = zeros(Int64, length(arr))\n\
    \    ones[arr .== 1] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n \
    \   \n    sorted_arr .= arr\n    \n    ones_idx = findall(ones .== 1)\n    \n\
    \    for i in ones_idx\n        sorted_arr[i] .= i\n    end\n    \n    sorted_arr\
    \ .= ones\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ number of ones in an array.", "    \n    ones = zeros(Int64, length(arr))\n\
    \    for i in 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n   \
    \ \n    sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        sorted_arr[i] = arr[findall(ones == i)[1]]\n    end\n    \n    return\
    \ sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n@assert sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@assert sort_array([-2, -3, -4, -5, -6]) ==\
    \ [-6, -5, -4, -3, -2]\n@assert sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n\
    </cell>\n<text>\nPart III. Sorting by multiple criteria\nIn this Kata, you have\
    \ to sort an array of non-negative integers according to\nnumber of ones in their\
    \ binary representation in ascending order.\nFor similar number of ones, sort\
    \ based on decimal value.", "    \n    ones = zeros(Int64, length(arr))\n    \n\
    \    for i = 1:length(arr)\n        ones[i] = sum(arr[i] .== 1)\n    end\n   \
    \ \n    ones = ones[sort(ones)]\n    \n    ones = ones[ones(length(ones), 1)]\n\
    \    \n    return ones\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nPart II: Binary Search\nIn this Kata, you have to implement binary search\
    \ algorithm to find if some element exists in sorted array.", "    \n    ones\
    \ = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted_arr =\
    \ zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n        sorted_arr[i]\
    \ = maximum(ones[arr .== i])\n    end\n    \n    return sorted_arr\nend\n</cell>\n\
    <code language=julia-1.5>\n@test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n\
    @test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n</cell>\n<text>\nProblem 8: Find all unique combinations\
    \ of k elements from n\nInput: n is an integer and k is an integer \u2265 1.\n\
    Output: All unique combinations of k elements from n.\nExample: n = 4, k = 3\n\
    Output: [(4, 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4,\
    \ 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4,\
    \ 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4,\
    \ 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4,\
    \ 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4,\
    \ 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4,\
    \ 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4,\
    \ 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4,\
    \ 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4,\
    \ 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4,\
    \ 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4,\
    \ 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4,\
    \ 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4,\
    \ 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4,\
    \ 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4,\
    \ 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4), (4,\
    \ 4, 4), (4, 4, ", "    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n   \
    \ ones_sorted = sort(ones)\n    \n    sorted_arr = zeros(Int64, length(arr))\n\
    \    \n    for i = 1:length(arr)\n        sorted_arr[i] = arr[ones_sorted .==\
    \ i]\n    end\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nPart III. Sort a vector with multiple keys\nIn\
    \ this Kata, you have to sort an array of non-negative integers according to\n\
    number of ones in their binary representation in ascending order.\nFor similar\
    \ number of ones, sort based on decimal value.", "    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int, length(arr))\n\
    \    \n    for i in 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    return arr[ones]\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nProblem 4\nWrite a function that returns the number of 1's in an array\
    \ as a vector.", "    \n    ones = zeros(Int, length(arr))\n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    sorted_ones = zeros(Int,\
    \ length(ones))\n    \n    for i in 1:length(ones)\n        sorted_ones[i] = ones[i]\n\
    \    end\n    \n    sorted_ones = sort(sorted_ones)\n    \n    sorted_arr = zeros(Int,\
    \ length(arr))\n    for i in 1:length(arr)\n        sorted_arr[i] = arr[sorted_ones[i]]\n\
    \    end\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nPart 3: Finding all subsets\nThe previous Kata\
    \ was about finding all subsets of a given set. Here you will find an example\
    \ of a more general problem: finding all subsets of a given set. For example,\
    \ given set $S = {1, 2, 3}$, find all subsets of $S$, namely $S_1$, $S_2$, $S_3$,\
    \ $S_{1}, S_2$, $S_{2}, S_3$, $S_{1}, S_2$, $S_{3}, S_1$, $S_{2}, S_3$, $S_1,\
    \ S_2$, $S_2, S_3$, $S_1, S_3$, $S_2, S_3$, $S_{1}, S_{2}, S_3$, $S_{1}, S_3$,\
    \ $S_2, S_3$, $S_1, S_3$, $S_{2}, S_3$, $S_1, S_2$, $S_2, S_3$, $S_1, S_3$, $S_2,\
    \ S_3$, $S_1, S_2$, $S_2, S_3$, $S_1, S_3$, $S_2, S_3$, $S_1, S_2$, $S_2, S_3$,\
    \ $S_1, S_3$, $S_2, S_3$, $S_1, S_2$, $S_2, S_3$, $S_1, S_3$, $S_2, S_3$, $S_1,\
    \ S_2$, $S_2, S_3$, $S_1, S_3$, $S_2, S_3$, $S_1, S_2$, $S_2, S_3$, $S_1, S_3$,\
    \ $S_2, S_3$, $S_1, S_2$, $S_2, S_3$, $S_1, S_3$, $S_2, S_3$, $", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int64, length(arr))\n\
    \    for i in 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n   \
    \ \n    sorted = sort(ones)\n    \n    sorted[ones == 0] .= 0\n    \n    return\
    \ sorted\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1, 5, 2,\
    \ 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6, -5,\
    \ -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n</cell>\n<text>\n\
    Part 2: Implement a function that counts the number of 1's in an array of integers",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n   \
    \ sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n  \
    \      sorted_arr[i] = sum(ones[arr .== i])\n    end\n    \n    return sorted_arr\n\
    end\n</code>\n<|/ a tags=julia |>\n<| a dscore=1 |>\nI came up with a solution\
    \ that is quite similar to yours. I used the sort function and used the iszero\
    \ function to sort out the zeros and then used the sortindex function to sort\
    \ out the indices. I then used the subarray function to extract the sorted indices\
    \ and then used the map function to apply the function to the sorted indices.\
    \ I then used the transpose function to get the final result.\n<code>", "    \n\
    \    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n    \
    \    ones[i] = sum(arr[i] == 1)\n    end\n    \n    sort(ones)\n    \n    return\
    \ arr\nend\n</code>\n<|/ a tags=sorting,julia,arrays |>\n<| a tags=sorting,julia,arrays\
    \ |>\nI came up with a solution that is very similar to what was proposed by.\
    \ Here it is:\n<code>", "    \n    ones = zeros(Int64, length(arr))\n    \n  \
    \  for x in arr\n        ones[x] += 1\n    end\n    \n    sorted = zeros(Int64,\
    \ length(arr))\n    \n    for x in arr\n        sorted[x] = ones[x]\n    end\n\
    \    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nPart III. Sorting by multiple criteria\nIn this Kata, you have to sort\
    \ an array of non-negative integers according to\nnumber of ones in their binary\
    \ representation in ascending order.\nFor similar number of ones, sort based on\
    \ decimal value.", "    \n    ones = zeros(Int64, length(arr))\n    \n    for\
    \ i in 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones\
    \ = sort(ones)\n    \n    sorted_arr = zeros(Int64, length(arr))\n    \n    for\
    \ i in 1:length(arr)\n        sorted_arr[i] = arr[ones[i]]\n    end\n    \n  \
    \  return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nPart III. Binary Search\nIn this Kata, you have to implement binary search\
    \ algorithm for searching elements in an array. \nThe algorithm has two parts:\
    \ binary search and binary search.\nBinary search is implemented for searching\
    \ elements in sorted array. \nBinary search is implemented for searching elements\
    \ in unsorted array.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n   \
    \ sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n  \
    \      sorted_arr[i] = sum(ones[arr .== i])\n    end\n    \n    return sorted_arr\n\
    end\n</cell>\n<code language=julia-1.5>\n@test sort_array([1, 5, 2, 3, 4]) ==\
    \ [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3,\
    \ -2]\n@test sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes an array of integers and returns the number of\
    \ 1's in each position in the array.", "    \n    ones = zeros(Int64, length(arr))\n\
    \    \n    for i in 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n\
    \    \n    sorted = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        sorted[i] = arr[findfirst(i -> ones[i] >= 1, 1:length(ones))]\n    end\n\
    \    \n    return sorted\nend\n</code>\n<|/ a |>\n<| c |>\nThank you so much!\
    \ This was really helpful.\n<|/ c |>\n<| c |>\nThank you so much! This was really\
    \ helpful.\n<|/ c |>\n<| c |>\nThank you so much! This was really helpful.\n<|/\
    \ c |>\n<| a dscore=3 |>\nHere's a solution using Julia's built-in sort!:\n<code>\n\
    julia> function sort_array(arr::Vector{Int64})::Vector{Int64}\n           return\
    \ sort!(arr, by=x->sum(x==1), rev=true)\n       end\nsort_array (generic function\
    \ with 1 method)", "    \n    arr = sort(arr)\n    \n    ones = zeros(Int64, length(arr))\n\
    \    \n    for i = 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n\
    \    \n    arr = sort(ones)\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ number of ones in an array. For example, for [1, 1, 0, 1] it should return 3.",
  "    \n    ones = zeros(Int64, length(arr))\n    for i in 1:length(arr)\n      \
    \  ones[i] = sum(arr[i] == 1)\n    end\n    \n    sorted = zeros(Int64, length(arr))\n\
    \    \n    for i in 1:length(arr)\n        sorted[i] = arr[findall(ones == i)[1]]\n\
    \    end\n    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n@test\
    \ sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4,\
    \ -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) [0, 1, 2,\
    \ 3, 4]\n</cell>\n<text>\nPart II: Binary search algorithm\nNow let's implement\
    \ binary search algorithm. We'll use binary search algorithm to find if given\
    \ number is in sorted array or not.", "    \n    ones = zeros(Int64, length(arr))\n\
    \    for x in arr\n        ones[x] += 1\n    end\n    \n    sorted = zeros(Int64,\
    \ length(arr))\n    \n    for x in arr\n        sorted[x] = ones[x]\n    end\n\
    \    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nPart II: Binary Search\nIn this Kata, you have to implement binary search\
    \ algorithm for searching in\nsorted array. Binary search algorithm is very similar\
    \ to linear search, except\nthat it uses binary search to find an element in sorted\
    \ array.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted_arr\
    \ = zeros(Int64, length(arr))\n    \n    sorted_arr .= sort(ones)\n    \n    sorted_arr\
    \ .= sort(arr)\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nPart II: Binary Search\nIn this Kata, you have\
    \ to implement binary search algorithm in Julia. Binary search algorithm is very\
    \ similar to linear search algorithm, but instead of searching for a specific\
    \ value, it searches for a specific position in the array.", "    \n    ones =\
    \ zeros(Int, length(arr))\n    \n    for i in 1:length(arr)\n        ones[i] =\
    \ sum(arr[i] == 1)\n    end\n    \n    ones = sort(ones)\n    \n    arr = zeros(Int,\
    \ length(arr))\n    \n    for i in 1:length(arr)\n        arr[i] = arr[ones[i]]\n\
    \    end\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n@test\
    \ sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4,\
    \ -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) [0, 1, 2,\
    \ 3, 4]\n</cell>\n<text>\nPart 2: Binary Search\nIn this Kata, you have to implement\
    \ binary search algorithm to find if some value exists in an array. \nThe algorithm\
    \ should return true if value exists and false otherwise.", "    \n    arr = sort(arr)\n\
    \    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] .== 1)\n    end\n    \n    arr = sort(ones)\n  \
    \  \n    return arr\nend\n</cell>\n<code language=julia-1.5>\nsort_array([1, 5,\
    \ 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nsort_array([-2, -3, -4, -5, -6])\n\
    </cell>\n<code language=julia-1.5>\nsort_array([1, 0, 2, 3, 4])\n</cell>\n<text>\n\
    Problem 3\nImplement the function count_bits(x::Int64)::Int64 that returns the\
    \ number of bits in the binary representation of x.", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    arr = sort(arr)\n    \n    ones =\
    \ zeros(Int, length(arr))\n    \n    for i in 1:length(arr)\n        ones[i] =\
    \ sum(arr[i] == 1)\n    end\n    \n    sort(ones)\n    \n    return arr\nend\n\
    </cell>\n<code language=julia-1.5>\n@test sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of integers and returns a vector of integers\
    \ \nthat represent their binary representation in descending order.", "    \n\
    \    ones = zeros(Int, length(arr))\n    for i in eachindex(arr)\n        ones[i]\
    \ = sum(arr[i] .== 1)\n    end\n    \n    sort(ones)\n    \n    sortedArray =\
    \ zeros(Int, length(arr))\n    for i in eachindex(arr)\n        sortedArray[i]\
    \ = arr[i]\n    end\n    \n    return sortedArray\nend\n</cell>\n<text>\nSolution\n\
    Next, implement the function sort_array_by_descending which sorts an array of\
    \ non-negative integers according to number of ones in their binary representation\
    \ in descending order.", "    \n    arr = sort(arr)\n    \n    ones = zeros(Int64,\
    \ length(arr))\n    \n    for i in 1:length(arr)\n        ones[i] = sum(arr[i]\
    \ == 1)\n    end\n    \n    ones = sort(ones)\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ", "    \n    sorted = sort(arr)\n    \n\
    \    ones = zeros(length(arr))\n    \n    for i in 1:length(arr)\n        ones[i]\
    \ = sum(arr[i] == 1)\n    end\n    \n    sorted = sort(ones)\n    \n    return\
    \ sorted\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1, 5, 2,\
    \ 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6, -5,\
    \ -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n</cell>\n<text>\n\
    Part II: Binary Search Algorithm\nNow that we have implemented the sorting algorithm,\
    \ let's implement the binary search algorithm.", "    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int, length(arr))\n\
    \    \n    for i in eachindex(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n\
    \    \n    sort(ones)\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nExercise 2\nWrite a function that takes an array\
    \ of integers and returns the number of ones in each position in the array. For\
    \ example, given [1, 1, 0, 1], your function should return [2, 2, 0, 1]. Make\
    \ sure to handle zeros correctly.", "    \n    ones = zeros(Int64, length(arr))\n\
    \    ones[arr .== 1] = 1\n    \n    sorted = sort(ones)\n    \n    sorted[sorted\
    \ .!= 1] .= 0\n    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns the number of 1's in each position in the vector.",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int64,\
    \ length(arr))\n    \n    for i = 1:length(arr)\n        ones[i] = sum(arr[i]\
    \ == 1)\n    end\n    \n    sorted = zeros(Int64, length(arr))\n    \n    for\
    \ i = 1:length(arr)\n        sorted[i] = arr[findfirst(ones > arr[i])]\n    end\n\
    \    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nPart III. Finding the first element in a vector that satisfies a condition",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int, length(arr))\n\
    \    for i = 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n    \n\
    \    sorted_arr = zeros(Int, length(arr))\n    \n    for i = 1:length(arr)\n \
    \       sorted_arr[i] = arr[findall(ones == i)[1]]\n    end\n    \n    return\
    \ sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1, 5,\
    \ 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nPart III. Reverse a vector\nGiven a vector, return a new vector that is\
    \ the reverse of the original vector.", "    \n    sorted = sort(arr)\n    \n\
    \    ones = zeros(length(arr))\n    \n    for i in 1:length(arr)\n        ones[i]\
    \ = sum(arr == i)\n    end\n    \n    sorted[ones == 0] = sort(arr[ones == 0])\n\
    \    \n    return sorted\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int64,\
    \ length(arr))\n    ones[arr .== 1] = 1\n    \n    ones_sorted = sort(ones)\n\
    \    \n    sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(ones_sorted)\n\
    \        sorted_arr[arr .== ones_sorted[i]] = i\n    end\n    \n    return sorted_arr\n\
    end\n</cell>\n<text>\nSolution\nLet's see how this solution works:", "    \n \
    \   ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n    ones_sorted\
    \ = sort(ones)\n    \n    sorted_arr = zeros(Int64, length(arr))\n    \n    for\
    \ i = 1:length(arr)\n        sorted_arr[i] = arr[ones_sorted .== i]\n    end\n\
    \    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ the number of 1's in each position in the vector.", "    \n    ones = zeros(Int,\
    \ length(arr))\n    ones[arr .== 1] = 1\n    \n    ones_sorted = sort(ones)\n\
    \    \n    sorted_arr = zeros(Int, length(arr))\n    sorted_arr[ones_sorted .==\
    \ 1] = arr[ones_sorted .== 1]\n    \n    sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nPart 2: Binary search algorithm\nIn this Kata,\
    \ you have to implement binary search algorithm for searching in\nsorted array.\
    \ Binary search algorithm is very similar to linear search,\nbut instead of searching\
    \ for a specific value, it searches for a specific index\nin the sorted array.",
  "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n   \
    \ ones_sorted = sort(ones)\n    \n    sorted_arr = zeros(Int64, length(arr))\n\
    \    \n    for i = 1:length(arr)\n        sorted_arr[i] = ones_sorted[i]\n   \
    \ end\n    \n    return sorted_arr\nend\n</cell>\n<text>\nPart III. Solutions",
  "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n   \
    \ sorted = sort(ones)\n    \n    sorted[sorted .== 0] = -1\n    \n    return sorted\n\
    end", "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n \
    \   \n    sorted = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        sorted[i] = sum(ones[arr .== i])\n    end\n    \n    return sorted\n\
    end\n</cell>\n<code language=julia-1.5>\n@test sort_array([1, 5, 2, 3, 4]) ==\
    \ [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3,\
    \ -2]\n@test sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes an array of integers and returns the number of\
    \ ones in each position. For example, given [1, 1, 0, 0], your function should\
    \ return [2, 1, 0, 0].", "    \n    ones = zeros(Int64, length(arr))\n    \n \
    \   for i in 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n    \n\
    \    sorted = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n  \
    \      sorted[i] = arr[findfirstindex(ones[i] == maximum(ones), ones)]\n    end\n\
    \    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nProblem 8: Find all elements of a given array that satisfy a given condition\n\
    Write a function that finds all elements of a given array that satisfy a given\
    \ condition. For example, given an array arr = [1, 2, 3, 4] and condition x >\
    \ 3, return [3, 4].", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n \
    \       ones[i] = sum(arr[i] == 1)\n    end\n    \n    sorted = zeros(Int64, length(arr))\n\
    \    \n    for i = 1:length(arr)\n        sorted[i] = arr[findall(ones == 1)][i]\n\
    \    end\n    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n@test\
    \ sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4,\
    \ -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) [0, 1, 2,\
    \ 3, 4]\n</cell>\n<text>\nPart 2\nImplement a function that counts the number\
    \ of 1's in an array of non-negative integers.", "    \n    arr = sort(arr)\n\
    \    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = sort(ones)\n  \
    \  \n    ones = ones[2:end]\n    \n    arr = arr[ones]\n    \n    return arr\n\
    end\n</cell>\n<code language=julia-1.5>\n@test sort_array([1, 5, 2, 3, 4]) ==\
    \ [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3,\
    \ -2]\n@test sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n</cell>\n<text>\nPart\
    \ 2\nThe second Kata asks you to implement a function that counts the number of\
    \ 1's in a binary representation\nof a given integer. For example, given $x =\
    \ 10$, the binary representation of $x$ is $10$. \nThe function should return\
    \ $3$. \nThe function should work for any integer $x$, even negative ones.", " \
    \   \n    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = sort(ones)\n  \
    \  \n    for i in 1:length(ones)\n        arr[i] = ones[i]\n    end\n    \n  \
    \  return arr\nend\n</cell>\n<text>\nSolution\nNext, implement the function count_ones(arr::Vector{Int64})::Int64.",
  "    \n    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    sorted = sort(ones)\n\
    \    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nPart III. Sorting by multiple criteria\nIn this Kata, you have to sort\
    \ an array of non-negative integers according to\nnumber of ones in their binary\
    \ representation in ascending order.\nFor similar number of ones, sort based on\
    \ decimal value."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
