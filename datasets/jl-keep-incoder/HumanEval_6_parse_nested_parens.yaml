name: HumanEval_6_parse_nested_parens
language: julia
prompt: "\"\"\" Input to this function is a string represented multiple groups for\
  \ nested parentheses separated by spaces.\n    For each of the group, output the\
  \ deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels\
  \ of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((()))\
  \ () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
  (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
  \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
  end\n"
completions: ["    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\",", "    paren_string = paren_string.strip\n\
    \    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    []\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}[]\")\n    paren_string = paren_string.strip(\"{}[]{}\")\n    paren_string =\
    \ paren_string.strip(\"{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]\")\n    paren_string =\
    \ paren_string.strip(\"{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n  \
    \  paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]", "    paren_stack\
    \ = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.count(\"(\"\
    )\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_", "    paren_string = paren_string.strip\n    paren_string =\
    \ paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"[]\")\n\
    \    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}[]\")\n    paren_string = paren_string.strip(\"{}[]{}\")\n    paren_string =\
    \ paren_string.strip(\"{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]\")\n    paren_string =\
    \ paren_string.strip(\"{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n  \
    \  paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]", "    paren_stack\
    \ = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.count(\"(\"\
    )\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_", "    paren_string = paren_string.trim()\n    paren_string =\
    \ paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"[]\")\n\
    \    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    ,", "    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}", "    paren_stack\
    \ = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.count(\"(\"\
    )\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_", "    paren_string = paren_string.strip\n    paren_string =\
    \ paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"[]\")\n\
    \    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}[]\")\n    paren_string = paren_string.strip(\"{}[]{}\")\n    paren_string =\
    \ paren_string.strip(\"{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]\")\n    paren_string =\
    \ paren_string.strip(\"{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n  \
    \  paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]", "    paren_string\
    \ = paren_string.trim()\n    paren_groups = paren_string.split(\" \")\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n", "    stack = Vector{Int64}()\n    paren_level = 0\n\
    \    paren_levels = Vector{Int64}()\n    paren_level = 0\n    paren_levels = Vector{Int64}()\n\
    \    for paren in paren_string\n        if paren == '('\n            paren_level\
    \ += 1\n            paren_levels << paren_level\n        elseif paren == ')'\n\
    \            paren_level -= 1\n            paren_levels << paren_level\n     \
    \   elseif paren == ' '\n            paren_levels << paren_level\n        else\n\
    \            paren_levels << paren_level\n        end\n    end\n    paren_levels\
    \ << paren_level\n    paren_levels = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n\
    \    paren_levels = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n\
    \    paren_levels = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n\
    \    paren_levels = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n\
    \    paren_levels = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n\
    \    paren_levels = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n\
    \    paren_levels = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n\
    \    paren_levels = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n\
    \    paren_levels = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n\
    \    paren_levels = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n\
    \    paren_levels = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n\
    \    paren_levels = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n\
    \    paren_levels = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n\
    \    paren_levels = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n\
    \    paren_levels = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n\
    \    paren_levels = paren_levels[2:end]\n    paren", "    stack = Vector{Int64}()\n\
    \    paren_count = 0\n    for c in paren_string\n        if c == '('\n       \
    \     paren_count += 1\n            push!(stack, paren_count)\n        elseif\
    \ c == ')'\n            pop!(stack)\n            if paren_count == stack[end]\n\
    \                paren_count -= 1\n            end\n        elseif c == '('\n\
    \            paren_count += 1\n            push!(stack, paren_count)\n       \
    \ elseif c == ')'\n            pop!(stack)\n            if paren_count == stack[end]\n\
    \                paren_count -= 1\n            end\n        else\n           \
    \ paren_count += 1\n            push!(stack, paren_count)\n        end\n    end\n\
    \    return stack\nend\n</cell>\n<code language=julia-1.5>", "    paren_string\
    \ = paren_string.strip\n    paren_string = paren_string.strip(\"()\")\n    paren_string\
    \ = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"{}\")\n\
    \    paren_string = paren_string.strip(\"()[]{}\")\n    paren_string = paren_string.strip(\"\
    (){}[]\")\n    paren_string = paren_string.strip(\"{}()[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()\")\n    paren_string = paren_string.strip(\"[]{}()\"\
    )\n    paren_string = paren_string.strip(\"[](){}\")\n    paren_string = paren_string.strip(\"\
    ()[]{}()\")\n    paren_string = paren_string.strip(\"(){}[]()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()\")\n    paren_string = paren_string.strip(\"\
    {}()[]()\")\n    paren_string = paren_string.strip(\"[][]{}()\")\n    paren_string\
    \ = paren_string.strip(\"[]{}()()\")\n    paren_string = paren_string.strip(\"\
    ()[][]{}()\")\n    paren_string = paren_string.strip(\"(){}[][]()\")\n    paren_string\
    \ = paren_string.strip(\"{}[][]()()\")\n    paren_string = paren_string.strip(\"\
    {}()[][]()\")\n    paren_string = paren_string.strip(\"[][][]{}()\")\n    paren_string\
    \ = paren_string.strip(\"[]{}()[]()\")\n    paren_string = paren_string.strip(\"\
    ()[][][]{}()\")\n    paren_string = paren_string.strip(\"(){}[][][]()\")\n   \
    \ paren_string = paren_string.strip(\"{}[][][]()()\")\n    paren_string = paren_string.strip(\"\
    {}()[][][]()\")\n    paren_string = paren_string.strip(\"[][][][]{}()\")\n   \
    \ paren_string = paren_string.strip(\"[]{}()[][][]()\")\n    paren_string = paren_string.strip(\"\
    ()[][][][]{}()\")\n    paren_string = paren_string.strip(\"(){}[][][][]()\")\n\
    \    paren_string = paren_string.strip(\"{}[][][][]()()\")\n    paren_string =\
    \ paren_string.strip(\"{}()[][][][]()\")\n    paren_string = paren_string.strip(\"\
    [][][][][]{}()\")\n    paren_string = ", "    paren_string = paren_string.trim()\n\
    \    paren_array = paren_string.split(\" \")\n    paren_array_size = length(paren_array)\n\
    \    paren_array_max = maximum(paren_array)\n    paren_array_min = minimum(paren_array)\n\
    \    paren_array_sum = sum(paren_array)\n    paren_array_mean = mean(paren_array)\n\
    \    paren_array_var = var(paren_array)\n    paren_array_std = std(paren_array)\n\
    \    paren_array_sum = sum(paren_array_std)\n    paren_array_mean = sum(paren_array_std)/length(paren_array_std)\n\
    \    paren_array_min = min(paren_array_min)\n    paren_array_max = max(paren_array_max)\n\
    \    paren_array_sum = sum(paren_array_max)\n    paren_array_mean = sum(paren_array_max)/length(paren_array_max)\n\
    \    paren_array_var = var(paren_array_max)\n    paren_array_std = std(paren_array_max)\n\
    \    paren_array_sum = sum(paren_array_min)\n    paren_array_mean = sum(paren_array_min)/length(paren_array_min)\n\
    \    paren_array_var = var(paren_array_min)\n    paren_array_std = std(paren_array_min)\n\
    \    paren_array_sum = sum(paren_array_sum)\n    paren_array_mean = sum(paren_array_sum)/length(paren_array_sum)\n\
    \    paren_array_var = var(paren_array_sum)\n    paren_array_std = std(paren_array_sum)\n\
    \    paren_array_sum = sum(paren_array_mean)\n    paren_array_mean = sum(paren_array_mean)/length(paren_array_mean)\n\
    \    paren_array_var = var(paren_array_mean)\n    paren_array_std = std(paren_array_mean)\n\
    \    paren_array_sum = sum(paren_array_var)\n    paren_array_mean = sum(paren_array_var)/length(paren_array_var)\n\
    \    paren_array_var = var(paren_array_var)\n    paren_array_std = std(paren_array_var)\n\
    \    paren_array_sum = sum(paren_array_std)\n    paren_array_mean = sum(paren_array_std)/length(paren_array_std)\n\
    \    paren_array_var = var(paren_array_std)\n    paren_array_std = std(paren_array_std)\n\
    \    paren_array_sum = sum(paren_array_min)\n    paren_array_mean = sum(paren_array_min)/length(paren_array_min)\n\
    \    paren_array_var = var(paren_array_min)\n    paren_array_std = std(paren_array_min)\n\
    \    paren_array_sum = sum(paren_", "    paren_string = paren_string.strip\n \
    \   paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    []\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}[]\")\n    paren_string = paren_string.strip(\"{}[]{}\")\n    paren_string =\
    \ paren_string.strip(\"{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]\")\n    paren_string =\
    \ paren_string.strip(\"{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n  \
    \  paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]", "    paren_levels\
    \ = Vector{Int64}()\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n", "    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]()\")\n    paren_string = paren_string.strip(\"{}[]()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}",
  "    stack = Vector{Int64}()\n    paren_level = 0\n    for paren in paren_string\n\
    \        if paren == '('\n            paren_level += 1\n            push!(stack,\
    \ paren_level)\n        elseif paren == ')'\n            paren_level -= 1\n  \
    \          if paren_level == 0\n                push!(stack, paren_level)\n  \
    \          end\n        else\n            push!(stack, paren_level)\n        end\n\
    \    end\n    return stack\nend\n</cell>\n<code language=julia-1.5>", "    stack\
    \ = Vector{Int64}()\n    paren_count = 0\n    paren_level = 0\n    for c in paren_string\n\
    \        if c == '('\n            paren_count += 1\n            paren_level +=\
    \ 1\n            push!(stack, paren_count)\n        elif c == ')'\n          \
    \  paren_count -= 1\n            if paren_count <= 0\n                paren_level\
    \ -= 1\n                pop!(stack)\n            else\n                push!(stack,\
    \ paren_count)\n            end\n        else\n            push!(stack, paren_count)\n\
    \        end\n    end\n    return stack\nend\n</cell>\n<text>\nPart 2: Parsing\
    \ a string\nNow that we have implemented the parsing function above, let's see\
    \ how we can use it to parse a string.", "    paren_stack = Vector{Int64}()\n\
    \    paren_stack = paren_stack + paren_string.count(\"(\")\n    paren_stack =\
    \ paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_",
  "    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\"..\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren", "    paren_array = paren_string.split(\" \")\n    paren_array\
    \ = [paren_array[i] for i in range(length(paren_array)) if paren_array[i]!=\"\
    (\" and paren_array[i]!=')']\n    paren_array = [paren_array[i] for i in range(length(paren_array))\
    \ if paren_array[i]!=\"(\" and paren_array[i]!=')' and paren_array[i]!=\"\\n\"\
    ]\n    paren_array = [paren_array[i] for i in range(length(paren_array)) if paren_array[i]!=\"\
    (\" and paren_array[i]!=')' and paren_array[i]!=\"\\n\" and paren_array[i]!=\"\
    \\t\"]\n    paren_array = [paren_array[i] for i in range(length(paren_array))\
    \ if paren_array[i]!=\"(\" and paren_array[i]!=')' and paren_array[i]!=\"\\n\"\
    \ and paren_array[i]!=\"\\t\" and paren_array[i]!=\"\\r\"]\n    paren_array =\
    \ [paren_array[i] for i in range(length(paren_array)) if paren_array[i]!=\"(\"\
    \ and paren_array[i]!=')' and paren_array[i]!=\"\\n\" and paren_array[i]!=\"\\\
    t\" and paren_array[i]!=\"\\r\" and paren_array[i]!=\"\\b\"]\n    paren_array\
    \ = [paren_array[i] for i in range(length(paren_array)) if paren_array[i]!=\"\
    (\" and paren_array[i]!=')' and paren_array[i]!=\"\\n\" and paren_array[i]!=\"\
    \\t\" and paren_array[i]!=\"\\r\" and paren_array[i]!=\"\\b\" and paren_array[i]!=\"\
    \\f\"]\n    paren_array = [paren_array[i] for i in range(length(paren_array))\
    \ if paren_array[i]!=\"(\" and paren_array[i]!=')' and paren_array[i]!=\"\\n\"\
    \ and paren_array[i]!=\"\\t\" and paren_array[i]!=\"\\r\" and paren_array[i]!=\"\
    \\b\" and paren_array[i]!=\"\\f\" and paren_array[i]!=\"\\v\"]\n    paren_array\
    \ = [paren_array[i] for i in range(length(paren_array)) if paren_array[i]!=\"\
    (\" and paren_array[i]!=')' and paren_array[i]!=\"\\n\" and paren_array[i]!=\"\
    \\t\" and paren_array[i]!=\"\\r\" and paren_array[i]!=\"\\b\" and paren_array[i]!=\"\
    \\f\" and paren_array[i]!=\"\\v\" and paren_array[i]!=\"\\a\"]\n    paren_array\
    \ = [paren_array[i] for i in range(length(paren_array)) if paren_array[i]!=\"\
    (\" and paren_array[i]!=')' and paren_array[i]!=\"\\n\" and paren_array[i]!=\"\
    \\t\" and paren_array[i]!=\"\\r\" and paren_array[i]!=\"\\b\" and paren_array[i]!=\"\
    \\f\" and ", "    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]()\")\n    paren_string = paren_string.strip(\"{}[]()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n  \
    \  paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n    paren_string =\
    \ paren_string.", "    paren_string = paren_string.trim()\n    paren_string =\
    \ paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\")\")\n \
    \   paren_string = paren_string.strip(\" \")\n    paren_string = paren_string.strip(\"\
    \\n\")\n    paren_string = paren_string.strip(\"\\r\")\n    paren_string = paren_string.strip(\"\
    \\t\")\n    paren_string = paren_string.strip(\"\\v\")\n    paren_string = paren_string.strip(\"\
    \\f\")\n    paren_string = paren_string.strip(\"\\a\")\n    paren_string = paren_string.strip(\"\
    \\e\")\n    paren_string = paren_string.strip(\"\\\\n\")\n    paren_string = paren_string.strip(\"\
    \\\\\")\n    paren_string = paren_string.strip(\"\\\\t\")\n    paren_string =\
    \ paren_string.strip(\"\\\\v\")\n    paren_string = paren_string.strip(\"\\\\\
    f\")\n    paren_string = paren_string.strip(\"\\\\a\")\n    paren_string = paren_string.strip(\"\
    \\\\e\")\n    paren_string = paren_string.strip(\"\\\\n\")\n    paren_string =\
    \ paren_string.strip(\"\\\\\")\n    paren_string = paren_string.strip(\"\\\\t\"\
    )\n    paren_string = paren_string.strip(\"\\\\v\")\n    paren_string = paren_string.strip(\"\
    \\\\f\")\n    paren_string = paren_string.strip(\"\\\\a\")\n    paren_string =\
    \ paren_string.strip(\"\\\\e\")\n    paren_string = paren_string.strip(\"\\\\\
    n\")\n    paren_string = paren_string.strip(\"\\\\\")\n    paren_string = paren_string.strip(\"\
    \\\\t\")\n    paren_string = paren_string.strip(\"\\\\v\")\n    paren_string =\
    \ paren_string.strip(\"\\\\f\")\n    paren_string = paren_string.strip(\"\\\\\
    a\")\n    paren_string = paren_string.strip(\"\\\\e\")\n    paren_string = paren_string.strip(\"\
    \\\\n\")\n    paren_string = paren_string.strip(\"\\\\\")\n    paren_string =\
    \ paren_string.strip(\"\\\\t\")\n    paren_string = paren_string.strip(\"\\\\\
    v\")\n    paren_string = paren_string.strip(\"\\\\f\")\n    paren_string = paren_string.strip(\"\
    \\\\a\")\n    paren_string = paren_string.strip(\"\\\\e\")\n    paren_string =\
    \ paren_string.strip(\"\\\\n\")\n    paren_string = paren_string.strip(\"\\\\\"\
    )\n    paren_string = paren_string.", "    paren_stack = Vector{Int64}()\n   \
    \ paren_stack = paren_stack + paren_string.count('(')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_", "    paren_string\
    \ = paren_string.trim()\n    paren_string = paren_string.strip(\"()\")\n    paren_string\
    \ = paren_string.strip(\" ()\")\n    paren_string = paren_string.strip(\"()()\"\
    )\n    paren_string = paren_string.strip(\"(())\")\n    paren_string = paren_string.strip(\"\
    (()())\")\n    paren_string = paren_string.strip(\"(())()\")\n    paren_string\
    \ = paren_string.strip(\"(()())()\")\n    paren_string = paren_string.strip(\"\
    (()())()()\")\n    paren_string = paren_string.strip(\"(()())()()()\")\n    paren_string\
    \ = paren_string.strip(\"(()())()()()()\")\n    paren_string = paren_string.strip(\"\
    (()())()()()()()\")\n    paren_string = paren_string.strip(\"(()())()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"(()())()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"(()())()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    (()())()()()()()()()()()\")\n    paren_string = paren_string.strip(\"(()())()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"(()())()()()()()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"(()())()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"(()())()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    (()())()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"(()())()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"(()())()()()()()()()()()()()\")\n \
    \   paren_string = paren_string.strip(\"(()())()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"(()())()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    (()())()()()()()()()()()()()\")\n    paren_string = paren", "    paren_string\
    \ = paren_string.trim()\n    paren_array = paren_string.split(\"()\")\n    paren_array_size\
    \ = length(paren_array)\n    paren_array_max = 0\n    paren_array_level = 0\n\
    \    for paren_array_index in 1:paren_array_size\n        paren_array_level =\
    \ paren_array_level + 1\n        if paren_array[paren_array_index] == '('\n  \
    \          if paren_array_level > paren_array_max\n                paren_array_max\
    \ = paren_array_level\n            end\n        elseif paren_array[paren_array_index]\
    \ == ')'\n            if paren_array_level < paren_array_max\n               \
    \ paren_array_max = paren_array_level\n            end\n        end\n    end\n\
    \    paren_array_max = paren_array_max + 1\n    paren_array_level = 0\n    paren_array_output\
    \ = []\n    for paren_array_index in 1:paren_array_size\n        paren_array_level\
    \ = paren_array_level + 1\n        if paren_array[paren_array_index] == '('\n\
    \            if paren_array_level > paren_array_max\n                paren_array_output\
    \ = paren_array_output + [paren_array_level]\n            end\n        elseif\
    \ paren_array[paren_array_index] == ')'\n            if paren_array_level < paren_array_max\n\
    \                paren_array_output = paren_array_output + [paren_array_level]\n\
    \            end\n        end\n    end\n    return paren_array_output\nend\n</cell>\n\
    <code language=julia-1.5>", "    paren_stack = Vector{Int64}()\n    paren_stack\
    \ = paren_stack + paren_string.count('(')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_", "    paren_array = paren_string.split(\"\
    \ \")\n    paren_array_size = length(paren_array)\n    paren_array_levels = zeros(paren_array_size,\
    \ 1)\n    for paren_array_level in 1:paren_array_size\n        paren_array_levels[paren_array_level]\
    \ = paren_array_level\n    end\n    paren_array_levels = paren_array_levels[paren_array_levels\
    \ .!= 0]\n    paren_array_levels = paren_array_levels[paren_array_levels .!= paren_array_levels[1]]\n\
    \    paren_array_levels = paren_array_levels[paren_array_levels .!= paren_array_levels[paren_array_size]]\n\
    \    paren_array_levels = paren_array_levels[paren_array_levels .!= paren_array_levels[paren_array_size\
    \ - 1]]\n    paren_array_levels = paren_array_levels[paren_array_levels .!= paren_array_levels[paren_array_size\
    \ - 2]]\n    paren_array_levels = paren_array_levels[paren_array_levels .!= paren_array_levels[paren_array_size\
    \ - 3]]\n    paren_array_levels = paren_array_levels[paren_array_levels .!= paren_array_levels[paren_array_size\
    \ - 4]]\n    paren_array_levels = paren_array_levels[paren_array_levels .!= paren_array_levels[paren_array_size\
    \ - 5]]\n    paren_array_levels = paren_array_levels[paren_array_levels .!= paren_array_levels[paren_array_size\
    \ - 6]]\n    paren_array_levels = paren_array_levels[paren_array_levels .!= paren_array_levels[paren_array_size\
    \ - 7]]\n    paren_array_levels = paren_array_levels[paren_array_levels .!= paren_array_levels[paren_array_size\
    \ - 8]]\n    paren_array_levels = paren_array_levels[paren_array_levels .!= paren_array_levels[paren_array_size\
    \ - 9]]\n    paren_array_levels = paren_array_levels[paren_array_levels .!= paren_array_levels[paren_array_size\
    \ - 10]]\n    paren_array_levels = paren_array_levels[paren_array_levels .!= paren_array_levels[paren_array_size\
    \ - 11]]\n    paren_array_levels = paren_array_levels[paren_array_levels .!= paren_array_levels[paren_array_size\
    \ - 12]]\n    paren_array_levels = paren_array_levels[paren_array_levels .!= paren_array_levels[paren_array_size\
    \ - 13]]\n    paren", "    paren_string = paren_string.trim()\n    paren_string\
    \ = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"[]\")\n\
    \    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}[]\")\n    paren_string = paren_string.strip(\"{}[]()\")\n    paren_string =\
    \ paren_string.strip(\"{}[]()()\")\n    paren_string = paren_string.strip(\"{}[]()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()\")\n    paren_string =\
    \ paren_string.strip(\"{}[]()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()()()()()", "    paren_stack = Vector{Int64}()\n\
    \    paren_stack = paren_stack + paren_string.count(\"(\")\n    paren_stack =\
    \ paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_",
  "    paren_stack = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.count('(')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_", "    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}", "    paren_stack\
    \ = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.count(\"(\"\
    )\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_", "    paren_string = paren_string.trim()\n    paren_chars =\
    \ paren_string.chars\n    paren_chars = paren_chars[2:end]\n    paren_chars =\
    \ paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars =\
    \ paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars =\
    \ paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars =\
    \ paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars =\
    \ paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars =\
    \ paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars =\
    \ paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars =\
    \ paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars =\
    \ paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars =\
    \ paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars =\
    \ paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars =\
    \ paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars =\
    \ paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars =\
    \ paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars =\
    \ paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars =\
    \ paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars =\
    \ paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars =\
    \ paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars =\
    \ paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars =\
    \ paren_chars[2:end]\n    paren_chars = paren_chars[2:end]", "    paren_string\
    \ = paren_string.trim()\n    paren_string = paren_string.strip(\"()\")\n    paren_string\
    \ = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"{}\")\n\
    \    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren", "    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n  \
    \  paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string", "    paren_stack = Vector{Int64}()\n    paren_stack\
    \ = paren_stack + paren_string.count(\"(\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_", "    paren_stack = Vector{Int64}()\n\
    \    paren_stack = paren_stack + paren_string.count(\"(\")\n    paren_stack =\
    \ paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_",
  "    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    []\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}[]\")\n    paren_string = paren_string.strip(\"{}[]()\")\n    paren_string =\
    \ paren_string.strip(\"{}[]()()\")\n    paren_string = paren_string.strip(\"{}[]()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()\")\n    paren_string =\
    \ paren_string.strip(\"{}[]()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()", "    paren_string = paren_string.strip\n\
    \    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    []\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}[]\")\n    paren_string = paren_string.strip(\"{}[]{}\")\n    paren_string =\
    \ paren_string.strip(\"{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]\")\n    paren_string =\
    \ paren_string.strip(\"{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n  \
    \  paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]", "    paren_string\
    \ = paren_string.strip\n    paren_string = paren_string.strip(\"()\")\n    paren_string\
    \ = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]", "    paren_groups\
    \ = paren_string.split(\" \")\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:", "    paren_stack = Vector{Int64}()\n    paren_stack = paren_stack\
    \ + paren_string.count(\"(\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_", "    paren_stack = Vector{Int64}()\n\
    \    paren_stack = paren_stack + paren_string.count('(')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_", "    paren_string\
    \ = paren_string.strip\n    paren_string = paren_string.strip(\"()\")\n    paren_string\
    \ = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]", "    paren_string\
    \ = paren_string.strip\n    paren_string = paren_string.strip(\"()\")\n    paren_string\
    \ = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]", "    paren_stack\
    \ = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.count('(')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_", "    stack = Vector{Int64}()\n    paren_count = 0\n    for c in\
    \ paren_string\n        if c == '('\n            paren_count += 1\n          \
    \  push!(stack, paren_count)\n        elseif c == ')'\n            pop!(stack)\n\
    \            paren_count -= 1\n        elseif paren_count > 0\n            paren_count\
    \ -= 1\n            push!(stack, paren_count)\n        end\n    end\n    return\
    \ stack\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of parentheses in the string.", "    paren_string = paren_string.strip\n\
    \    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    []\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}[]\")\n    paren_string = paren_string.strip(\"{}{}\")\n    paren_string = paren_string.strip(\"\
    {}{}[]\")\n    paren_string = paren_string.strip(\"{}{}{}\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}\")\n    paren_string = paren_string.strip(\"{}{}{}{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}\")\n   \
    \ paren_string = paren_string.strip(\"{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}[]\")\n\
    \    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}{}{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}{}{}{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}[]\"\
    )\n    paren_string = paren_string.strip(\"", "    paren_stack = Vector{Int64}()\n\
    \    paren_stack = paren_string.split(\" \") |> collect{|x| x.to_i}\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[", "    paren_stack = Vector{Int64}()\n    paren_stack = paren_stack\
    \ + paren_string.count(\"(\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_", "    paren_string =\
    \ paren_string.strip\n    paren_levels = Vector{Int64}()\n    paren_level = 1\n\
    \    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren", "    paren_stack = Vector{Int64}()\n    paren_stack = paren_stack\
    \ + paren_string.count(\"(\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_", "    paren_string =\
    \ paren_string.strip\n    paren_stack = Vector{Int64}()\n    paren_stack = paren_stack\
    \ + paren_string.count('(')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren", "    stack = Vector{Int64}()\n    paren_count = 0\n    for c in paren_string\n\
    \        if c == '('\n            push!(stack, paren_count)\n            paren_count\
    \ += 1\n        elseif c == ')'\n            pop!(stack)\n            paren_count\
    \ -= 1\n        elseif c == '('\n            push!(stack, paren_count)\n     \
    \       paren_count += 1\n        elseif c == ')'\n            pop!(stack)\n \
    \           paren_count -= 1\n        else\n            push!(stack, paren_count)\n\
    \            paren_count += 1\n        end\n    end\n    return stack\nend\n</cell>\n\
    <text>\nPart 4: Parsing a string\nNow that we have our parsing function we can\
    \ use it to parse strings. We will use it to parse strings in the following format:",
  "    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n  \
    \  paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren", "    paren_stack = Vector{Int64}()\n    paren_stack\
    \ = paren_stack + paren_string.count('(')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_", "    paren_string = paren_string.strip\n\
    \    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    []\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    ()[]{}\")\n    paren_string = paren_string.strip(\"(){}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}()[]\")\n    paren_string = paren_string.strip(\"{}[]()\"\
    )\n    paren_string = paren_string.strip(\"[]{}()\")\n    paren_string = paren_string.strip(\"\
    [](){}\")\n    paren_string = paren_string.strip(\"(){}{}\")\n    paren_string\
    \ = paren_string.strip(\"()[][]{}\")\n    paren_string = paren_string.strip(\"\
    []{}(){}\")\n    paren_string = paren_string.strip(\"[]()[]{}\")\n    paren_string\
    \ = paren_string.strip(\"()[]{}[]\")\n    paren_string = paren_string.strip(\"\
    (){}[]{}\")\n    paren_string = paren_string.strip(\"{}()[][]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()[]\")\n    paren_string = paren_string.strip(\"\
    []{}()[]{}\")\n    paren_string = paren_string.strip(\"[]()[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"()[][][]{}\")\n    paren_string = paren_string.strip(\"\
    (){}[][]{}\")\n    paren_string = paren_string.strip(\"{}()[][][]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()[][]\")\n    paren_string = paren_string.strip(\"\
    []{}()[][]{}\")\n    paren_string = paren_string.strip(\"[]()[][]{}[]\")\n   \
    \ paren_string = paren_string.strip(\"()[][][][]{}\")\n    paren_string = paren_string.strip(\"\
    (){}[][][]{}\")\n    paren_string = paren_string.strip(\"{}()[][][][]\")\n   \
    \ paren_string = paren_string.strip(\"{}[]()[][][]\")\n    paren_string = paren_string.strip(\"\
    []{}()[][][]{}\")\n    paren_string = paren_string.strip(\"[]()[][][]{}[]\")\n\
    \    paren_string = paren_string.strip(\"()[][][][][]{}\")\n    paren_string =\
    \ paren_string.strip(\"(){}[]", "    paren_string = paren_string.trim()\n    paren_string\
    \ = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"[]\")\n\
    \    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = ", "    paren_stack = Vector{Int64}()\n    paren_stack\
    \ = paren_stack + paren_string.count(\"(\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_", "    paren_string =\
    \ paren_string.trim()\n    paren_string = paren_string.strip(\"()\")\n    paren_string\
    \ = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n  \
    \  paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren", "    paren_string = paren_string.trim()\n    paren_string\
    \ = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\" ()\"\
    )\n    paren_string = paren_string.strip(\"()()\")\n    paren_string = paren_string.strip(\"\
    (())\")\n    paren_string = paren_string.strip(\"(()())\")\n    paren_string =\
    \ paren_string.strip(\"(())()\")\n    paren_string = paren_string.strip(\"(()()())\"\
    )\n    paren_string = paren_string.strip(\"(()()()())\")\n    paren_string = paren_string.strip(\"\
    (()()()()())\")\n    paren_string = paren_string.strip(\"(()()()()()())\")\n \
    \   paren_string = paren_string.strip(\"(()()()()()()())\")\n    paren_string\
    \ = paren_string.strip(\"(()()()()()()()())\")\n    paren_string = paren_string.strip(\"\
    (()()()()()()()()())\")\n    paren_string = paren_string.strip(\"(()()()()()()()()()())\"\
    )\n    paren_string = paren_string.strip(\"(()()()()()()()()()()())\")\n    paren_string\
    \ = paren_string.strip(\"(()()()()()()()()()()()())\")\n    paren_string = paren_string.strip(\"\
    (()()()()()()()()()()()()())\")\n    paren_string = paren_string.strip(\"(()()()()()()()()()()()()())\"\
    )\n    paren_string = paren_string.strip(\"(()()()()()()()()()()()()()())\")\n\
    \    paren_string = paren_string.strip(\"(()()()()()()()()()()()()()())\")\n \
    \   paren_string = paren_string.strip(\"(()()()()()()()()()()()()()())\")\n  \
    \  paren_string = paren_string.strip(\"(()()()()()()()()()()()()()())\")\n   \
    \ paren_string = paren_string.strip(\"(()()()()()()()()()()()()()())\")\n    paren_string\
    \ = paren_string.strip(\"(()()()()()()()()()()()()()())\")\n    paren_string =\
    \ paren_string.strip(\"(()()()()()()()()()()()()", "    paren_array = paren_string.split(\"\
    \ \")\n    paren_array_size = length(paren_array)\n    paren_array_max = 0\n \
    \   paren_array_index = 0\n    paren_array_level = 0\n    paren_array_nesting\
    \ = 0\n    for paren_array_index in 1:paren_array_size\n        if paren_array[paren_array_index]\
    \ == \")\"\n            paren_array_nesting -= 1\n            if paren_array_nesting\
    \ == 0\n                paren_array_max += 1\n                paren_array_level\
    \ -= 1\n            else\n                paren_array_nesting += 1\n        end\n\
    \    end\n    return paren_array_max\nend\n</cell>\n<code language=julia-1.5>",
  "    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n  \
    \  paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string", "    paren_string = paren_string.strip\n\
    \    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    []\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}[]\")\n    paren_string = paren_string.strip(\"{}[]{}\")\n    paren_string =\
    \ paren_string.strip(\"{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]\")\n    paren_string =\
    \ paren_string.strip(\"{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n  \
    \  paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]", "    paren_string\
    \ = paren_string.trim()\n    paren_string = paren_string.strip(\"()\")\n    paren_string\
    \ = paren_string.strip(\" \")\n    paren_string = paren_string.strip(\")\")\n\
    \    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string", "    paren_string = paren_string.strip\n\
    \    paren_array = paren_string.split(\" \")\n    paren_array_size = length(paren_array)\n\
    \    paren_array_max = 0\n    for paren_array_index in 1:paren_array_size\n  \
    \      paren_array_string = paren_array[paren_array_index]\n        if paren_array_string\
    \ == \"(\"\n            paren_array_max += 1\n        elseif paren_array_string\
    \ == \")\"\n            paren_array_max -= 1\n        else\n            paren_array_max\
    \ += parse_nested_parens(paren_array_string)\n        end\n    end\n    return\
    \ paren_array_max\nend\n</cell>\n<code language=julia-1.5>", "    paren_string\
    \ = paren_string.trim()\n    paren_string = paren_string.strip(\"()\")\n    paren_string\
    \ = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n  \
    \  paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren", "    paren_groups = paren_string.split(\" \") |>\
    \ String.split(\"(\") |> String.split(\")\")\n    paren_groups = paren_groups\
    \ |> Array.sort\n    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups\
    \ |> Array.map(x->parse(x.trim()))\n    paren_groups = paren_groups |> Array.max\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,julia |>\nHere is a solution\
    \ that uses regular expressions:\n<code>", "    paren_stack = Vector{Int64}()\n\
    \    paren_stack = paren_stack + paren_string.count(\"(\")\n    paren_stack =\
    \ paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_",
  "    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]()\")\n    paren_string = paren_string.strip(\"{}[]()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n  \
    \  paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n    paren_string =\
    \ paren_string.", "    stack = Vector{Int64}()\n    paren_count = 0\n    paren_level\
    \ = 0\n    for c in paren_string\n        if c == '('\n            paren_count\
    \ += 1\n            paren_level += 1\n            push!(stack, paren_count)\n\
    \        elseif c == ')'\n            paren_count -= 1\n            if paren_count\
    \ == 0\n                pop!(stack)\n                paren_level -= 1\n      \
    \      else\n                push!(stack, paren_count)\n            end\n    \
    \    else\n            push!(stack, paren_count)\n        end\n    end\n    return\
    \ stack\nend\n</cell>\n<code language=julia-1.5>", "    paren_string = paren_string.strip\n\
    \    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string",
  "    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]()\")\n    paren_string = paren_string.strip(\"{}[]()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()()\"\
    )\n    paren_string = paren", "    paren_levels::Vector{Int64} = Vector{Int64}()\n\
    \    paren_levels::Vector{Int64} = []\n    paren_levels::Vector{Int64} = [paren_levels[1]]\n\
    \    for paren_group in split(paren_string, \" \")\n        if paren_group ==\
    \ \"(\"\n            paren_levels::Vector{Int64} = [paren_levels[1] + 1]\n   \
    \     elseif paren_group == \")\"\n            paren_levels::Vector{Int64} = [paren_levels[1]]\n\
    \        else\n            paren_levels::Vector{Int64} = [paren_levels[1] + 1]\n\
    \        end\n    end\n    return paren_levels\nend\n</cell>\n<code language=julia-1.5>",
  "    paren_stack = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.count(\"\
    (\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_", "    paren_string = paren_string.trim()\n    paren_string =\
    \ paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"[]\")\n\
    \    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    *\")\n    paren_string = paren_string.strip(\"+\")\n    paren_string = paren_string.strip(\"\
    ?\")\n    paren_string = paren_string.strip(\"!\")\n    paren_string = paren_string.strip(\"\
    (\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    [\")\n    paren_string = paren_string.strip(\"]\")\n    paren_string = paren_string.strip(\"\
    {\")\n    paren_string = paren_string.strip(\"}\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    *\")\n    paren_string = paren_string.strip(\"+\")\n    paren_string = paren_string.strip(\"\
    ?\")\n    paren_string = paren_string.strip(\"!\")\n    paren_string = paren_string.strip(\"\
    (\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    [\")\n    paren_string = paren_string.strip(\"]\")\n    paren_string = paren_string.strip(\"\
    {\")\n    paren_string = paren_string.strip(\"}\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    *\")\n    paren_string = paren_string.strip(\"+\")\n    paren_string = paren_string.strip(\"\
    ?\")\n    paren_string = paren_string.strip(\"!\")\n    paren_string = paren_string.strip(\"\
    (\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    [\")\n    paren_string = paren_string.strip(\"]\")\n    paren_string = paren_string.strip(\"\
    {\")\n", "    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n  \
    \  paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string", "    paren_stack = Vector{Int64}()\n    paren_stack\
    \ = paren_stack + paren_string.count('(')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_", "    paren_string = paren_string.trim()\n\
    \    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    []\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string",
  "    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"()[]{}\")\n    paren_string = paren_string.strip(\"\
    (){}[]\")\n    paren_string = paren_string.strip(\"[](){}\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()\")\n    paren_string = paren_string.strip(\"[]{}()\"\
    )\n    paren_string = paren_string.strip(\"()[](){}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}()\")\n    paren_string = paren_string.strip(\"[]()[]{}\")\n    paren_string\
    \ = paren_string.strip(\"(){}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}()[][]\")\n    paren_string = paren_string.strip(\"[]{}(){}\")\n    paren_string\
    \ = paren_string.strip(\"()[]{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[][]()\")\n    paren_string = paren_string.strip(\"[]()[]{}\")\n    paren_string\
    \ = paren_string.strip(\"(){}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}()[][]\")\n    paren_string = paren_string.strip(\"[]{}()[]\")\n    paren_string\
    \ = paren_string.strip(\"()[][]{}\")\n    paren_string = paren_string.strip(\"\
    {}[][][]\")\n    paren_string = paren_string.strip(\"[]()[][]{}\")\n    paren_string\
    \ = paren_string.strip(\"(){}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}()[][][]\")\n    paren_string = paren_string.strip(\"[]{}()[][]\")\n    paren_string\
    \ = paren_string.strip(\"()[][][]{}\")\n    paren_string = paren_string.strip(\"\
    {}[][][][]\")\n    paren_string = paren_string.strip(\"[]()[][][]{}\")\n    paren_string\
    \ = paren_string.strip(\"(){}[][][]\")\n    paren_string = paren_string.strip(\"\
    {}()[][][]\")\n    paren_string = paren_string.strip(\"[]{}()[][]\")\n    paren_string\
    \ = paren_string.strip(\"()[][][]{}\")\n    paren_string = paren_string.strip(\"\
    {}", "    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")", "    paren_stack = Vector{Int64}()\n\
    \    paren_stack = paren_stack + paren_string.count(\"(\")\n    paren_stack =\
    \ paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_",
  "    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}[]\")\n    paren_string = paren_string.strip(\"{}{}{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}{}{}{}{}{}{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}{}{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}{}{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}{}{}{}[]\")\n  \
    \  paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}{}{}{}[]\")\n   \
    \ paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}[]\")\n  \
    \  paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}[]\")\n\
    \    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}{}{}", "    paren_string = paren_string.strip\n\
    \    paren_stack = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.count('(')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren", "    paren_string\
    \ = paren_string.trim()\n    paren_chars = paren_string.chars\n    paren_chars\
    \ = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars\
    \ = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars\
    \ = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars\
    \ = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars\
    \ = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars\
    \ = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars\
    \ = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars\
    \ = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars\
    \ = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars\
    \ = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars\
    \ = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars\
    \ = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars\
    \ = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars\
    \ = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars\
    \ = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars\
    \ = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars\
    \ = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars\
    \ = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars\
    \ = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars\
    \ = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars\
    \ = paren_chars[2:end]", "    paren_stack = Vector{Int64}()\n    paren_stack =\
    \ paren_stack + paren_string.count(\"(\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_", "    paren_string =\
    \ paren_string.trim()\n    paren_string = paren_string.strip(\"()\")\n    paren_string\
    \ = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"{}\")\n\
    \    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren", "    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]", "    paren_string\
    \ = paren_string.strip\n    paren_string = paren_string.strip(\"()\")\n    paren_string\
    \ = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]", "    paren_string\
    \ = paren_string.strip\n    paren_string = paren_string.strip(\"()\")\n    paren_string\
    \ = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"{}\")\n\
    \    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")", "    paren_string = paren_string.strip\n\
    \    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    []\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}[]\")\n    paren_string = paren_string.strip(\"{}{}[]\")\n    paren_string =\
    \ paren_string.strip(\"{}{}{}[]\")\n    paren_string = paren_string.strip(\"{}{}{}{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}{}{}{}{}[]\")\n    paren_string =\
    \ paren_string.strip(\"{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}{}[]\")\n   \
    \ paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}{}{}{}{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}{}{}{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}{}{}{}[]\")\n\
    \    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}{}{}{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}{}{}{}[]\")\n  \
    \  paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}", "    paren_string\
    \ = paren_string.strip\n    paren_string = paren_string.strip(\"()\")\n    paren_string\
    \ = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]", "    paren_string\
    \ = paren_string.strip\n    paren_string = paren_string.strip(\"()\")\n    paren_string\
    \ = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}()[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}()[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}()[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}()[]{}[]{}\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}()[]{}[]{}{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}()[]{}[]{}{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}()[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}()[]{}[]{}[]{}{}\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}()[]{}[]{}[]{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}()[]{}[]{}[]{}[]{}{}\")\n    paren_string = paren_string.strip(\"{}[]{}()[]{}[]{}[]{}[]{}{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}()[]{}[]{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}()[]{}[]{}[]{}[]{}[]{}{}\")\n  \
    \  paren_string = paren_string.strip(\"{}[]{}()[]{}[]{}[]{}[]{}[]{}{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}()[]{}[]{}[]{}[]{}[]{}[]{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]{}()[]{}[]{}[]{}[]{}[]{}[]{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]{}()[]{}[]{}[]{}[]{}[]{}[]{}{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}()[]{}[]{}[]{}[]{}[]{}[]{}{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}", "    stack = Vector{Int64}()\n\
    \    paren_count = 0\n    paren_level = 0\n    paren_levels = Vector{Int64}()\n\
    \    for c in paren_string\n        if c == '('\n            paren_count += 1\n\
    \            paren_levels += 1\n            paren_level = 1\n            push!(stack,\
    \ paren_count)\n        elseif c == ')'\n            paren_count -= 1\n      \
    \      if paren_count == 0\n                paren_level -= 1\n               \
    \ push!(paren_levels, paren_level)\n            end\n        else\n          \
    \  paren_level += 1\n        end\n    end\n    return paren_levels\nend\n</cell>\n\
    <code language=julia-1.5>", "    paren_string = paren_string.strip\n    paren_string\
    \ = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"[]\")\n\
    \    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    ()\")", "    paren_array = paren_string.split(\" \")\n    paren_array = [Int64(x)\
    \ for x in paren_array]\n    paren_array = [x for x in paren_array if x != \"\"\
    ]\n    paren_array = [x for x in paren_array if x != 0]\n    paren_array = [x\
    \ for x in paren_array if x != -1]\n    paren_array = [x for x in paren_array\
    \ if x != -2]\n    paren_array = [x for x in paren_array if x != -3]\n    paren_array\
    \ = [x for x in paren_array if x != -4]\n    paren_array = [x for x in paren_array\
    \ if x != -5]\n    paren_array = [x for x in paren_array if x != -6]\n    paren_array\
    \ = [x for x in paren_array if x != -7]\n    paren_array = [x for x in paren_array\
    \ if x != -8]\n    paren_array = [x for x in paren_array if x != -9]\n    paren_array\
    \ = [x for x in paren_array if x != -10]\n    paren_array = [x for x in paren_array\
    \ if x != -11]\n    paren_array = [x for x in paren_array if x != -12]\n    paren_array\
    \ = [x for x in paren_array if x != -13]\n    paren_array = [x for x in paren_array\
    \ if x != -14]\n    paren_array = [x for x in paren_array if x != -15]\n    paren_array\
    \ = [x for x in paren_array if x != -16]\n    paren_array = [x for x in paren_array\
    \ if x != -17]\n    paren_array = [x for x in paren_array if x != -18]\n    paren_array\
    \ = [x for x in paren_array if x != -19]\n    paren_array = [x for x in paren_array\
    \ if x != -20]\n    paren_array = [x for x in paren_array if x != -21]\n    paren_array\
    \ = [x for x in paren_array if x != -22]\n    paren_array = [x for x in paren_array\
    \ if x != -23]\n    paren_array = [x for x in paren_array if x != -24]\n    paren_array\
    \ = [x for x in paren_array if x != -25]\n    paren_array = [x for x in paren_array\
    \ if x != -26]\n    paren_array = [x for x in paren_array if x != -27]\n    paren_array\
    \ = [x for x in paren_array if x != -28]\n    paren_array = [x for x in paren_array\
    \ if x != -29]\n    paren_array = [x for x in paren_array if x != -30]\n    paren_array\
    \ = [", "    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}", "    stack = Vector{Int64}()\n\
    \    paren_count = 0\n    for paren in paren_string\n        if paren == '('\n\
    \            paren_count += 1\n            push!(stack, paren_count)\n       \
    \ elseif paren == ')'\n            pop!(stack)\n            paren_count -= 1\n\
    \        elseif paren == ' '\n            paren_count -= 1\n        end\n    end\n\
    \    return stack\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of characters in the string that are not letters.",
  "    paren_groups = paren_string.split(\" \")\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:", "    paren_string = paren_string.trim()\n\
    \    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    []\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren", "    paren_string\
    \ = paren_string.trim()\n    paren_string = paren_string.strip(\"()\")\n    paren_string\
    \ = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}", "    paren_string\
    \ = paren_string.strip\n    paren_string = paren_string.strip(\"()\")\n    paren_string\
    \ = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]()\")\n    paren_string = paren_string.strip(\"{}[]()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n  \
    \  paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n    paren_string =\
    \ paren_string.", "    paren_stack = Vector{Int64}()\n    paren_stack = paren_stack\
    \ + paren_string.count('(')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_", "    paren_string = paren_string.trim()\n\
    \    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    []\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    \\n\")\n    paren_string = paren_string.strip(\"\\r\")\n    paren_string = paren_string.strip(\"\
    \\t\")\n    paren_string = paren_string.strip(\"\\t\")\n    paren_string = paren_string.strip(\"\
    \\t\")\n    paren_string = paren_string.strip(\"\\t\")\n    paren_string = paren_string.strip(\"\
    \\t\")\n    paren_string = paren_string.strip(\"\\t\")\n    paren_string = paren_string.strip(\"\
    \\t\")\n    paren_string = paren_string.strip(\"\\t\")\n    paren_string = paren_string.strip(\"\
    \\t\")\n    paren_string = paren_string.strip(\"\\t\")\n    paren_string = paren_string.strip(\"\
    \\t\")\n    paren_string = paren_string.strip(\"\\t\")\n    paren_string = paren_string.strip(\"\
    \\t\")\n    paren_string = paren_string.strip(\"\\t\")\n    paren_string = paren_string.strip(\"\
    \\t\")\n    paren_string = paren_string.strip(\"\\t\")\n    paren_string = paren_string.strip(\"\
    \\t\")\n    paren_string = paren_string.strip(\"\\t\")\n    paren_string = paren_string.strip(\"\
    \\t\")\n    paren_string = paren_string.strip(\"\\t\")\n    paren_string = paren_string.strip(\"\
    \\t\")\n    paren_string = paren_string.strip(\"\\t\")\n    paren_string = paren_string.strip(\"\
    \\t\")\n    paren_string = paren_string.strip(\"\\t\")\n    paren_string = paren_string.strip(\"\
    \\t\")\n    paren_string = paren_string.strip(\"\\t\")\n    paren_string = paren_string.strip(\"\
    \\t\")\n    paren_string = paren_string.strip(\"\\t\")\n    paren_string = paren_string.strip(\"\
    \\t\")\n    paren_string = paren_string.strip(\"\\t\")\n    paren_string = paren_string.strip(\"\
    \\t\")\n    paren_string = paren_string.strip(\"\\t\")\n    paren_string = paren_string.strip(\"\
    \\t\")\n    paren_string = paren_string.strip(\"\\t\")\n    paren_string = paren_string.strip(\"\
    \\t\")", "    paren_string = paren_string.strip\n    paren_stack = Vector{Int64}()\n\
    \    paren_stack = paren_stack + paren_string.count('(')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren", "    paren_string = paren_string.strip\n\
    \    paren_levels = paren_string.count('(') - paren_string.count(')')\n    paren_levels\
    \ = paren_levels + 1 if paren_levels == 0 else paren_levels\n    paren_levels\
    \ = paren_levels - 1 if paren_levels == 0 else paren_levels\n    paren_levels\
    \ = paren_levels + 1 if paren_levels == 0 else paren_levels\n    paren_levels\
    \ = paren_levels - 1 if paren_levels == 0 else paren_levels\n    paren_levels\
    \ = paren_levels + 1 if paren_levels == 0 else paren_levels\n    paren_levels\
    \ = paren_levels - 1 if paren_levels == 0 else paren_levels\n    paren_levels\
    \ = paren_levels + 1 if paren_levels == 0 else paren_levels\n    paren_levels\
    \ = paren_levels - 1 if paren_levels == 0 else paren_levels\n    paren_levels\
    \ = paren_levels + 1 if paren_levels == 0 else paren_levels\n    paren_levels\
    \ = paren_levels - 1 if paren_levels == 0 else paren_levels\n    paren_levels\
    \ = paren_levels + 1 if paren_levels == 0 else paren_levels\n    paren_levels\
    \ = paren_levels - 1 if paren_levels == 0 else paren_levels\n    paren_levels\
    \ = paren_levels + 1 if paren_levels == 0 else paren_levels\n    paren_levels\
    \ = paren_levels - 1 if paren_levels == 0 else paren_levels\n    paren_levels\
    \ = paren_levels + 1 if paren_levels == 0 else paren_levels\n    paren_levels\
    \ = paren_levels - 1 if paren_levels == 0 else paren_levels\n    paren_levels\
    \ = paren_levels + 1 if paren_levels == 0 else paren_levels\n    paren_levels\
    \ = paren_levels - 1 if paren_levels == 0 else paren_levels\n    paren_levels\
    \ = paren_levels + 1 if paren_levels == 0 else paren_levels\n    paren_levels\
    \ = paren_levels - 1 if paren_levels == 0 else paren_levels\n    paren_levels\
    \ = paren_levels + 1 if paren_levels == 0 else paren_levels\n    paren_levels\
    \ = paren_levels - 1 if paren_levels == 0 else paren_levels\n    paren_levels\
    \ = paren_levels + 1 if paren_levels == 0 else paren_levels\n    paren_levels\
    \ = paren_levels - 1 if paren_levels == 0 else paren_levels\n    paren_level",
  "    paren_stack = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.count('(')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_", "    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    []\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}[]\")\n    paren_string = paren_string.strip(\"{}{}\")\n    paren_string = paren_string.strip(\"\
    {}{}[]\")\n    paren_string = paren_string.strip(\"{}{}{}\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}\")\n    paren_string = paren_string.strip(\"{}{}{}{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}\")\n   \
    \ paren_string = paren_string.strip(\"{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}[]\")\n   \
    \ paren_string = paren_string.strip(\"{}{}{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}\")\n\
    \    paren_string = paren_string.strip(\"{}{}{}{}{}{}[]\")\n    paren_string =\
    \ paren_string.strip(\"{}{}{}{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}\"\
    )\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}{}{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}\"\
    )\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}\")\n    ", "    paren_string =\
    \ paren_string.strip\n    paren_string = paren_string.strip(\"()\")\n    paren_string\
    \ = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]()\")\n    paren_string = paren_string.strip(\"{}[]()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n  \
    \  paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n    paren_string =\
    \ paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n    paren_string =\
    \ paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n    paren_string =\
    \ paren_string.strip(\"{}[]()()()()()()", "    paren_string = paren_string.strip\n\
    \    paren_chars = paren_string.chars\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n",
  "    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n  \
    \  paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.", "    paren_string = paren_string.trim()\n\
    \    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    []\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}[]\")\n    paren_string = paren_string.strip(\"{}[]{}\")\n    paren_string =\
    \ paren_string.strip(\"{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]\")\n    paren_string =\
    \ paren_string.strip(\"{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n   \
    \ paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string =\
    \ paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string =\
    \ paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]", "    paren_string\
    \ = paren_string.strip\n    paren_string = paren_string.strip(\"()\")\n    paren_string\
    \ = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"[]\")\n\
    \    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}[]\")\n    paren_string = paren_string.strip(\"{}{}\")\n    paren_string = paren_string.strip(\"\
    {}{}[]\")\n    paren_string = paren_string.strip(\"{}{}{}\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}\")\n    paren_string = paren_string.strip(\"{}{}{}{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}\")\n   \
    \ paren_string = paren_string.strip(\"{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}[]\")\n   \
    \ paren_string = paren_string.strip(\"{}{}{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}\")\n\
    \    paren_string = paren_string.strip(\"{}{}{}{}{}{}[]\")\n    paren_string =\
    \ paren_string.strip(\"{}{}{}{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}\"\
    )\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}{}{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}\"\
    )\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}\")\n    ", "    paren_string =\
    \ paren_string.trim()\n    paren_chars = paren_string.chars\n    paren_chars =\
    \ paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars =\
    \ paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars =\
    \ paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars =\
    \ paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars =\
    \ paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars =\
    \ paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars =\
    \ paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars =\
    \ paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars =\
    \ paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars =\
    \ paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars =\
    \ paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars =\
    \ paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars =\
    \ paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars =\
    \ paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars =\
    \ paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars =\
    \ paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars =\
    \ paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars =\
    \ paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars =\
    \ paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars =\
    \ paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars =\
    \ paren_chars[2:end]", "    paren_string = paren_string.strip\n    paren_string\
    \ = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"[]\")\n\
    \    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}[]\")\n    paren_string = paren_string.strip(\"{}[]{}\")\n    paren_string =\
    \ paren_string.strip(\"{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]\")\n    paren_string =\
    \ paren_string.strip(\"{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n  \
    \  paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]", "    paren_groups\
    \ = paren_string.split(\" \")\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:", "    paren_string = paren_string.trim()\n    paren_string\
    \ = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"[]\")\n\
    \    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    ..\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren", "    paren_string\
    \ = paren_string.strip\n    paren_string = paren_string.strip(\"()\")\n    paren_string\
    \ = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}[]\")\n    paren_string = paren_string.strip(\"{}{}{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}{}{}{}{}{}{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}{}{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}{}{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}{}{}{}[]\")\n  \
    \  paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}[]\")\n\
    \    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}[]\")\n\
    \    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}{}", "    stack = Vector{Int64}()\n\
    \    paren_count = 0\n    for paren in paren_string\n        if paren == '('\n\
    \            paren_count += 1\n            push!(stack, paren_count)\n       \
    \ elseif paren == ')'\n            pop!(stack)\n            paren_count -= 1\n\
    \        elseif paren == '('\n            push!(stack, paren_count)\n        elseif\
    \ paren == ')'\n            pop!(stack)\n            paren_count -= 1\n      \
    \  else\n            paren_count += 1\n            push!(stack, paren_count)\n\
    \        end\n    end\n    return stack\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of parentheses in the\
    \ string.", "    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]", "    paren_string\
    \ = paren_string.strip\n    paren_levels = Dict{Char,Int64}()\n    paren_levels[')']\
    \ = 0\n    paren_levels['('] = 0\n    paren_levels[']'] = 0\n    paren_levels['}']\
    \ = 0\n    paren_levels[' '] = 0\n    paren_levels['\\t'] = 0\n    paren_levels['\\\
    n'] = 0\n    paren_levels['\\r'] = 0\n    paren_levels[' '] = 0\n    paren_levels['\\\
    t'] = 0\n    paren_levels['\\n'] = 0\n    paren_levels['\\r'] = 0\n    paren_levels['\
    \ '] = 0\n    paren_levels['\\t'] = 0\n    paren_levels['\\n'] = 0\n    paren_levels['\\\
    r'] = 0\n    paren_levels[' '] = 0\n    paren_levels['\\t'] = 0\n    paren_levels['\\\
    n'] = 0\n    paren_levels['\\r'] = 0\n    paren_levels[' '] = 0\n    paren_levels['\\\
    t'] = 0\n    paren_levels['\\n'] = 0\n    paren_levels['\\r'] = 0\n    paren_levels['\
    \ '] = 0\n    paren_levels['\\t'] = 0\n    paren_levels['\\n'] = 0\n    paren_levels['\\\
    r'] = 0\n    paren_levels[' '] = 0\n    paren_levels['\\t'] = 0\n    paren_levels['\\\
    n'] = 0\n    paren_levels['\\r'] = 0\n    paren_levels[' '] = 0\n    paren_levels['\\\
    t'] = 0\n    paren_levels['\\n'] = 0\n    paren_levels['\\r'] = 0\n    paren_levels['\
    \ '] = 0\n    paren_levels['\\t'] = 0\n    paren_levels['\\n'] = 0\n    paren_levels['\\\
    r'] = 0\n    paren_levels[' '] = 0\n    paren_levels['\\t'] = 0\n    paren_levels['\\\
    n'] = 0\n    paren_levels['\\r'] = 0\n    paren_levels[' '] = 0\n    paren_levels['\\\
    t'] = 0\n    paren_levels['\\n'] = 0\n    paren_levels['\\r'] = 0\n    paren_levels['\
    \ '] = 0\n    paren_levels['\\t'] = 0\n    paren_levels['\\n'] = 0\n    paren_levels['\\\
    r'] = 0\n    paren_levels[' '] = 0\n    paren_levels['\\t'] = 0\n    paren_levels['\\\
    n'] = 0\n    paren_levels['\\r'] = 0\n    paren_levels[' '] = 0\n    paren_levels['\\\
    t'] = 0\n    paren_levels['\\n'] = 0\n    paren_levels['\\r'] = 0\n    paren_levels['\
    \ '] = 0\n    ", "    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}", "    paren_string\
    \ = paren_string.trim()\n    paren_string = paren_string.strip(\"()\")\n    paren_string\
    \ = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"{}\")\n\
    \    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\",", "    paren_string = paren_string.strip\n\
    \    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    []\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}[]\")\n    paren_string = paren_string.strip(\"{}[]{}\")\n    paren_string =\
    \ paren_string.strip(\"{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]\")\n    paren_string =\
    \ paren_string.strip(\"{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n  \
    \  paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]", "    paren_string\
    \ = paren_string.strip\n    paren_string = paren_string.strip(\"()\")\n    paren_string\
    \ = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]", "    paren_groups\
    \ = paren_string.split(\" \") |> String.split(\"(\") |> String.split(\")\")\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[", "    paren_string = paren_string.trim()\n\
    \    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    \ \")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string",
  "    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}\")\n    paren_string = paren_string.strip(\"{}{}[]\")\n    paren_string =\
    \ paren_string.strip(\"{}{}{}\")\n    paren_string = paren_string.strip(\"{}{}{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}{}{}{}\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}[]\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}{}{}{}{}{}{}\")\n    paren_string =\
    \ paren_string.strip(\"{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}{}{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}{}\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"",
  "    paren_string = paren_string.trim()\n    paren_levels = Vector{Int64}()\n  \
    \  paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = ", "    paren_string = paren_string.trim()\n\
    \    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    []\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}[]\")\n    paren_string = paren_string.strip(\"{}[]{}\")\n    paren_string =\
    \ paren_string.strip(\"{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]\")\n    paren_string =\
    \ paren_string.strip(\"{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n  \
    \  paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}", "    paren_string\
    \ = paren_string.trim()\n    paren_string = paren_string.strip(\"()\")\n    paren_string\
    \ = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}", "    paren_stack\
    \ = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.count(\"(\"\
    )\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_", "    paren_string = paren_string.strip\n    paren_string =\
    \ paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"[]\")\n\
    \    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}[]\")\n    paren_string = paren_string.strip(\"{}[]{}\")\n    paren_string =\
    \ paren_string.strip(\"{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]\")\n    paren_string =\
    \ paren_string.strip(\"{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n   \
    \ paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string", "    paren_stack = Vector{Int64}()\n    paren_stack\
    \ = paren_stack + paren_string.split(\" \") |> collect{|x| x.count(\"(\") - x.count(\"\
    )\")}\n    paren_stack = paren_stack + paren_string.split(\" \") |> collect{|x|\
    \ x.count(\"(\")}\n    paren_stack = paren_stack + paren_string.split(\" \") |>\
    \ collect{|x| x.count(\")\")}\n    paren_stack = paren_stack + paren_string.split(\"\
    \ \") |> collect{|x| x.count(\")\")}\n    paren_stack = paren_stack + paren_string.split(\"\
    \ \") |> collect{|x| x.count(\")\")}\n    paren_stack = paren_stack + paren_string.split(\"\
    \ \") |> collect{|x| x.count(\")\")}\n    paren_stack = paren_stack + paren_string.split(\"\
    \ \") |> collect{|x| x.count(\")\")}\n    paren_stack = paren_stack + paren_string.split(\"\
    \ \") |> collect{|x| x.count(\")\")}\n    paren_stack = paren_stack + paren_string.split(\"\
    \ \") |> collect{|x| x.count(\")\")}\n    paren_stack = paren_stack + paren_string.split(\"\
    \ \") |> collect{|x| x.count(\")\")}\n    paren_stack = paren_stack + paren_string.split(\"\
    \ \") |> collect{|x| x.count(\")\")}\n    paren_stack = paren_stack + paren_string.split(\"\
    \ \") |> collect{|x| x.count(\")\")}\n    paren_stack = paren_stack + paren_string.split(\"\
    \ \") |> collect{|x| x.count(\")\")}\n    paren_stack = paren_stack + paren_string.split(\"\
    \ \") |> collect{|x| x.count(\")\")}\n    paren_stack = paren_stack + paren_string.split(\"\
    \ \") |> collect{|x| x.count(\")\")}\n    paren_stack = paren_stack + paren_string.split(\"\
    \ \") |> collect{|x| x.count(\")\")}\n    paren_stack = paren_stack + paren_string.split(\"\
    \ \") |> collect{|x| x.count(\")\")}\n    paren_stack = paren_stack + paren_string.split(\"\
    \ \") |> collect{", "    paren_stack = Vector{Int64}()\n    paren_stack = paren_stack\
    \ + paren_string.count('(')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_", "    stack = Vector{Int64}()\n    paren_count\
    \ = 0\n    for c in paren_string\n        if c == '('\n            push!(stack,\
    \ paren_count)\n            paren_count += 1\n        elif c == ')'\n        \
    \    pop!(stack)\n            paren_count -= 1\n        end\n    end\n    stack\n\
    end\n</cell>\n<code language=julia-1.5>", "    stack = Vector{Int64}()\n    paren_count\
    \ = 0\n    for char in paren_string\n        if char == '('\n            paren_count\
    \ += 1\n            push!(stack, paren_count)\n        elseif char == ')'\n  \
    \          pop!(stack)\n            paren_count -= 1\n        elseif char == '\
    \ '\n            if paren_count == 0\n                push!(stack, paren_count)\n\
    \            end\n        end\n    end\n    return stack\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    paren_string = paren_string.strip\n    paren_string\
    \ = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"[]\")\n\
    \    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")", "    paren_stack = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.count('(')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_", "    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]", "    paren_string\
    \ = paren_string.trim()\n    paren_string = paren_string.strip(\"()\")\n    paren_string\
    \ = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\" \")\n\
    \    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\"\\n\")\n    paren_string = paren_string.strip(\"\
    \\r\")\n    paren_string = paren_string.strip(\"\\t\")\n    paren_string = paren_string.strip(\"\
    \\v\")\n    paren_string = paren_string.strip(\"\\a\")\n    paren_string = paren_string.strip(\"\
    \\e\")\n    paren_string = paren_string.strip(\"\\o\")\n    paren_string = paren_string.strip(\"\
    \\000\")\n    paren_string = paren_string.strip(\"\\001\")\n    paren_string =\
    \ paren_string.strip(\"\\002\")\n    paren_string = paren_string.strip(\"\\003\"\
    )\n    paren_string = paren_string.strip(\"\\004\")\n    paren_string = paren_string.strip(\"\
    \\005\")\n    paren_string = paren_string.strip(\"\\006\")\n    paren_string =\
    \ paren_string.strip(\"\\007\")\n    paren_string = paren_string.strip(\"\\010\"\
    )\n    paren_string = paren_string.strip(\"\\011\")\n    paren_string = paren_string.strip(\"\
    \\012\")\n    paren_string = paren_string.strip(\"\\013\")\n    paren_string =\
    \ paren_string.strip(\"\\014\")\n    paren_string = paren_string.strip(\"\\015\"\
    )\n    paren_string = paren_string.strip(\"\\016\")\n    paren_string = paren_string.strip(\"\
    \\017\")\n    paren_string = paren_string.strip(\"\\020\")\n    paren_string =\
    \ paren_string.strip(\"\\021\")\n    paren_string = paren_string.strip(\"\\022\"\
    )\n    paren_string = paren_string.strip(\"\\023\")\n    paren_string = paren_string.strip(\"\
    \\024\")\n    paren_string = paren_string.strip(\"\\025\")\n    paren_string =\
    \ paren_string.strip(\"\\026\")\n    paren_string = paren_string.strip(\"\\027\"\
    )\n    paren_string = paren_string.strip(\"\\030\")\n    paren_string = paren_string.strip(\"\
    \\031\")\n    paren_string = paren_string.strip(\"\\032\")\n    paren_string =\
    \ paren", "    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]", "    paren_string\
    \ = paren_string.trim()\n    paren_string = paren_string.strip(\"()\")\n    paren_string\
    \ = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"{}\")\n\
    \    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    ..\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren", "    paren_string = paren_string.trim()\n    paren_string\
    \ = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\")\")\n\
    \    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string", "    paren_string\
    \ = paren_string.trim()\n    paren_string = paren_string.strip(\"()\")\n    paren_string\
    \ = paren_string.strip(\" \")\n    paren_string = paren_string.strip(\")\")\n\
    \    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string", "    stack = Vector{Int64}()\n    paren_level\
    \ = 0\n    paren_levels = Vector{Int64}()\n    paren_level = 0\n    for c in paren_string\n\
    \        if c == '('\n            paren_level += 1\n            paren_levels <<\
    \ paren_level\n        elseif c == ')'\n            paren_level -= 1\n       \
    \     paren_levels << paren_level\n        elseif c == '('\n            paren_level\
    \ += 1\n            paren_levels << paren_level\n        elseif c == ')'\n   \
    \         paren_level -= 1\n            paren_levels << paren_level\n        elseif\
    \ c == '('\n            paren_level += 1\n            paren_levels << paren_level\n\
    \        elseif c == ')'\n            paren_level -= 1\n            paren_levels\
    \ << paren_level\n        else\n            paren_levels << paren_level\n    \
    \    end\n    end\n    paren_levels << paren_level\n    return paren_levels\n\
    end\n</cell>\n<code language=julia-1.5>", "    paren_string = paren_string.strip\n\
    \    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    []\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}[]\")\n    paren_string = paren_string.strip(\"{}{}\")\n    paren_string = paren_string.strip(\"\
    {}{}[]\")\n    paren_string = paren_string.strip(\"{}{}{}\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}\")\n    paren_string = paren_string.strip(\"{}{}{}{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}\")\n   \
    \ paren_string = paren_string.strip(\"{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}[]\")\n\
    \    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}{}{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}{}{}{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}[]\"\
    )\n    paren_string = paren_string.strip(\"", "    paren_string = paren_string.strip\n\
    \    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    []\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}[]\")\n    paren_string = paren_string.strip(\"{}[]{}\")\n    paren_string =\
    \ paren_string.strip(\"{}[]{}{}\")\n    paren_string = paren_string.strip(\"{}[]{}{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}{}[]{}\")\n    paren_string =\
    \ paren_string.strip(\"{}[]{}{}[]{}{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}{}[]{}{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}{}[]{}{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}{}[]{}{}[]{}{}\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}{}[]{}{}[]{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}{}[]{}{}[]{}{}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}{}[]{}{}[]{}{}[]{}{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}{}[]{}{}[]{}{}[]{}{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}{}[]{}{}[]{}{}[]{}{}[]{}\")\n  \
    \  paren_string = paren_string.strip(\"{}[]{}{}[]{}{}[]{}{}[]{}{}[]{}{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}{}[]{}{}[]{}{}[]{}{}[]{}{}[]\")\n\
    \    paren_string = paren_string.strip(\"{}[]{}{}[]{}{}[]{}{}[]{}{}[]{}{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}{}[]{}{}[]{}{}[]{}{}[]{}{}[]{}{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}{}[]{}{}[]{}{}[]{}{}[]{}{}[]{}{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}{}[]{}{}[]{}{}[]{}{}[]{}{}[]{}{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}{}[]{}{}[]", "    paren_string\
    \ = paren_string.strip\n    paren_string = paren_string.strip(\"()\")\n    paren_string\
    \ = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]()\")\n    paren_string = paren_string.strip(\"{}[]()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()()()\"\
    )\n", "    paren_stack = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.count('(')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_", "    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]", "    paren_string\
    \ = paren_string.strip\n    paren_string = paren_string.strip(\"()\")\n    paren_string\
    \ = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]()\")\n    paren_string = paren_string.strip(\"{}[]()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n  \
    \  paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n    paren_string =\
    \ paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n    paren_string =\
    \ paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n    paren_string =\
    \ paren_string.strip(\"{}[]()()()", "    paren_string = paren_string.trim()\n\
    \    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\"..\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren", "    paren_string\
    \ = paren_string.strip\n    paren_string = paren_string.strip(\"()\")\n    paren_string\
    \ = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}{}\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}{}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}{}[]{}{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}{}[]{}{}{}\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}{}[]{}{}{}{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}{}[]{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"{}[]{}{}[]{}{}{}{}{}{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}{}[]{}{}{}{}{}{}{}\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}{}[]{}{}{}{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}{}[]{}{}{}{}{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"{}[]{}{}[]{}{}{}{}{}{}{}{}{}{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}{}[]{}{}{}{}{}{}{}{}{}{}{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}{}[]{}{}{}{}{}{}{}{}{}{}{}{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}{}[]{}{}{}{}{}{}{}{}{}{}{}{}{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}{}[]{}{}{}{}{}{}{}{}{}{}{}{}{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}{}[]{}{}{}{}{}{}{}{}{}{}{}{}{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}{}[]{}{}{}{}{}{}{}{}{}{}{}{}{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}{}[]{}{}{}{}{}{}{}{}{}", "  \
    \  paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}{}\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}{}{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}{}{}{}\")\n    paren_string = paren_string.strip(\"{}[]{}{}{}{}{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}{}{}{}{}{}\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}{}{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}{}{}{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"{}[]{}{}{}{}{}{}{}{}{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}{}{}{}{}{}{}{}{}{}\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}{}{}{}{}{}{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}{}{}{}{}{}{}{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"{}[]{}{}{}{}{}{}{}{}{}{}{}{}{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}{}{}{}{}{}{}{}{}{}{}{}{}{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}{}{}{}{}{}{}{}{}{}{}", "    paren_stack\
    \ = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.count(\"(\"\
    )\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_", "    paren_string = paren_string.strip\n    paren_string =\
    \ paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"[]\")\n\
    \    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}[]\")\n    paren_string = paren_string.strip(\"{}[]{}\")\n    paren_string =\
    \ paren_string.strip(\"{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]\")\n    paren_string =\
    \ paren_string.strip(\"{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n  \
    \  paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]", "    paren_stack\
    \ = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.count(\"(\"\
    )\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_", "    paren_groups = paren_string.split(\" \")\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:", "    paren_string\
    \ = paren_string.trim()\n    paren_string = paren_string.strip(\"()\")\n    paren_string\
    \ = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}", "    paren_string\
    \ = paren_string.strip\n    paren_string = paren_string.strip(\"()\")\n    paren_string\
    \ = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]", "    paren_string\
    \ = paren_string.strip\n    paren_string = paren_string.strip(\"()\")\n    paren_string\
    \ = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]()\")\n    paren_string = paren_string.strip(\"{}[]()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n  \
    \  paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n    paren_string =\
    \ paren_string.", "    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]()\")\n    paren_string = paren_string.strip(\"{}[]()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n  \
    \  paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n    paren_string =\
    \ paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n    paren_string =\
    \ paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n    paren_string =\
    \ paren_string.strip(\"{}[]()()()", "    paren_stack = Vector{Int64}()\n    paren_stack\
    \ = paren_stack + paren_string.count(\"(\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_", "    paren_string =\
    \ paren_string.strip\n    paren_string = paren_string.strip(\"()\")\n    paren_string\
    \ = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]", "    paren_string\
    \ = paren_string.strip\n    paren_string = paren_string.strip(\"()\")\n    paren_string\
    \ = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]()\")\n    paren_string = paren_string.strip(\"{}[]()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n  \
    \  paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n    paren_string =\
    \ paren_string.", "    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]()\")\n    paren_string = paren_string.strip(\"{}[]()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()()\"\
    )\n    paren_string = paren", "    stack = Vector{Int64}()\n    paren_count =\
    \ 0\n    paren_level = 0\n    for c in paren_string\n        if c == '('\n   \
    \         paren_count += 1\n            paren_level += 1\n            push!(stack,\
    \ paren_count)\n        elseif c == ')'\n            paren_count -= 1\n      \
    \      if paren_count > 0\n                paren_level -= 1\n            else\n\
    \                pop!(stack)\n            end\n        else\n            paren_level\
    \ = 0\n        end\n    end\n    return stack\nend\n</cell>\n<code language=julia-1.5>",
  "    paren_string = paren_string.strip\n    paren_levels = Vector{Int64}()\n   \
    \ paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren", "    paren_string = paren_string.strip\n\
    \    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    []\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")", "    stack = Vector{Int64}()\n    paren_count = 0\n    for c in paren_string\n\
    \        if c == '('\n            paren_count += 1\n            push!(stack, paren_count)\n\
    \        elseif c == ')'\n            pop!(stack)\n            paren_count -=\
    \ 1\n        elseif paren_count > 0\n            paren_count -= 1\n        end\n\
    \    end\n    return stack\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string representing a mathematical expression and returns the number\
    \ of parentheses needed to be closed to make the expression valid. For example,\
    \ if the input string is \"(1+2)\", the function should return 1. For any other\
    \ input string, it should return 0.", "    paren_stack = Vector{Int64}()\n   \
    \ paren_stack = paren_stack + paren_string.count(\"(\")\n    paren_stack = paren_stack\
    \ + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_",
  "    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"()[]{}\")\n    paren_string = paren_string.strip(\"\
    (){}[]\")\n    paren_string = paren_string.strip(\"{}[]()\")\n    paren_string\
    \ = paren_string.strip(\"[]{}()\")\n    paren_string = paren_string.strip(\"{}()[]\"\
    )\n    paren_string = paren_string.strip(\"[](){}\")\n    paren_string = paren_string.strip(\"\
    ()[]{}()\")\n    paren_string = paren_string.strip(\"(){}[]()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()\")\n    paren_string = paren_string.strip(\"\
    [](){}()\")\n    paren_string = paren_string.strip(\"()[]{}()()\")\n    paren_string\
    \ = paren_string.strip(\"(){}[]()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()\")\n    paren_string = paren_string.strip(\"[](){}()()\")\n    paren_string\
    \ = paren_string.strip(\"()[]{}()()()\")\n    paren_string = paren_string.strip(\"\
    (){}[]()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()\")\n   \
    \ paren_string = paren_string.strip(\"[](){}()()()\")\n    paren_string = paren_string.strip(\"\
    ()[]{}()()()()\")\n    paren_string = paren_string.strip(\"(){}[]()()()()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()()()()()\")\n    paren_string =\
    \ paren_string.strip(\"[](){}()()()()\")\n    paren_string = paren_string.strip(\"\
    ()[]{}()()()()()\")\n    paren_string = paren_string.strip(\"(){}[]()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"[](){}()()()()()\")\n    paren_string = paren_string.strip(\"\
    ()[]{}()()()()()()\")\n    paren_string = paren_string.strip(\"(){}[]()()()()()()\"\
    )\n    paren_string", "    paren_string = paren_string.strip\n    paren_string\
    \ = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"[]\")\n\
    \    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}[]\")\n    paren_string = paren_string.strip(\"{}[]{}\")\n    paren_string =\
    \ paren_string.strip(\"{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]\")\n    paren_string =\
    \ paren_string.strip(\"{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n  \
    \  paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]", "    paren_stack\
    \ = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.count(\"(\"\
    )\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_", "    paren_string = paren_string.trim()\n    paren_string =\
    \ paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"[]\")\n\
    \    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    ..\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren", "    paren_string\
    \ = paren_string.trim()\n    paren_string = paren_string.strip(\"()\")\n    paren_string\
    \ = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"{}\")\n\
    \    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}", "    paren_stack = Vector{Int64}()\n\
    \    paren_stack = paren_stack + paren_string.split(\" \") |> Vector.map(parseInt64)\n\
    \    paren_stack = paren_stack[1..end]\n    paren_stack = paren_stack[1..end-1]\n\
    \    paren_stack = paren_stack[1..end-1]\n    paren_stack = paren_stack[1..end-1]\n\
    \    paren_stack = paren_stack[1..end-1]\n    paren_stack = paren_stack[1..end-1]\n\
    \    paren_stack = paren_stack[1..end-1]\n    paren_stack = paren_stack[1..end-1]\n\
    \    paren_stack = paren_stack[1..end-1]\n    paren_stack = paren_stack[1..end-1]\n\
    \    paren_stack = paren_stack[1..end-1]\n    paren_stack = paren_stack[1..end-1]\n\
    \    paren_stack = paren_stack[1..end-1]\n    paren_stack = paren_stack[1..end-1]\n\
    \    paren_stack = paren_stack[1..end-1]\n    paren_stack = paren_stack[1..end-1]\n\
    \    paren_stack = paren_stack[1..end-1]\n    paren_stack = paren_stack[1..end-1]\n\
    \    paren_stack = paren_stack[1..end-1]\n    paren_stack = paren_stack[1..end-1]\n\
    \    paren_stack = paren_stack[1..end-1]\n    paren_stack = paren_stack[1..end-1]\n\
    \    paren_stack = paren_stack[1..end-1]\n    paren_stack = paren_stack[1..end-1]\n\
    \    paren_stack = paren_stack[1..end-1]\n    paren_stack = paren_stack[1..end-1]\n\
    \    paren_stack = paren_stack[1..end-1]\n    paren_stack = paren_stack[1..end-1]\n\
    \    paren_stack = paren_stack[1..end-1]\n    paren_stack = paren_stack[1..end-1]\n\
    \    paren_stack = paren_stack[1..end-1]\n    paren_stack = paren_stack[1..end-1]\n\
    \    paren_stack = paren_stack[1..end-1]\n    paren_stack = paren_stack[1..end-1]\n\
    \    ", "    paren_string = paren_string.strip\n    paren_stack = Vector{Int64}()\n\
    \    paren_stack = paren_stack + paren_string.count(\"(\")\n    paren_stack =\
    \ paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren", "    stack = Vector{Int64}()\n \
    \   paren_count = 0\n    for c in paren_string\n        if c == '('\n        \
    \    paren_count += 1\n            push!(stack, paren_count)\n        elseif c\
    \ == ')'\n            pop!(stack)\n            paren_count -= 1\n        elseif\
    \ paren_count > 0\n            push!(stack, paren_count)\n        end\n    end\n\
    \    return stack\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns a string with all the characters in alphabetical\
    \ order.", "    stack = Vector{Int64}()\n    paren_count = 0\n    for char in\
    \ paren_string\n        if char == '('\n            paren_count += 1\n       \
    \     push!(stack, paren_count)\n        elseif char == ')'\n            pop!(stack)\n\
    \            paren_count -= 1\n        elseif char == ' '\n            paren_count\
    \ += 1\n            push!(stack, paren_count)\n        end\n    end\n    return\
    \ stack\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes in a string\
    \ and returns the number of words in the string.", "    paren_string = paren_string.strip\n\
    \    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    []\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}[]\")\n    paren_string = paren_string.strip(\"{}[]{}\")\n    paren_string =\
    \ paren_string.strip(\"{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]\")\n    paren_string =\
    \ paren_string.strip(\"{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n  \
    \  paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]", "    paren_string\
    \ = paren_string.strip\n    paren_string = paren_string.strip(\"()\")\n    paren_string\
    \ = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"()\")\n\
    \    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren", "    paren_groups = paren_string.split(\" \"\
    )\n    paren_groups = [paren_group for paren_group in paren_groups if paren_group\
    \ != \"\"]\n    paren_groups = [paren_group for paren_group in paren_groups if\
    \ paren_group != \"()\"]\n    paren_groups = [paren_group for paren_group in paren_groups\
    \ if paren_group != \"[]\"]\n    paren_groups = [paren_group for paren_group in\
    \ paren_groups if paren_group != \"{}\"]\n    paren_groups = [paren_group for\
    \ paren_group in paren_groups if paren_group != \"{}[]\"]\n    paren_groups =\
    \ [paren_group for paren_group in paren_groups if paren_group != \"{}{}\"]\n \
    \   paren_groups = [paren_group for paren_group in paren_groups if paren_group\
    \ != \"{}{}[]\"]\n    paren_groups = [paren_group for paren_group in paren_groups\
    \ if paren_group != \"{}{}{}\"]\n    paren_groups = [paren_group for paren_group\
    \ in paren_groups if paren_group != \"{}{}{}[]\"]\n    paren_groups = [paren_group\
    \ for paren_group in paren_groups if paren_group != \"{}{}{}{}\"]\n    paren_groups\
    \ = [paren_group for paren_group in paren_groups if paren_group != \"{}{}{}{}[]\"\
    ]\n    paren_groups = [paren_group for paren_group in paren_groups if paren_group\
    \ != \"{}{}{}{}{}\"]\n    paren_groups = [paren_group for paren_group in paren_groups\
    \ if paren_group != \"{}{}{}{}{}[]\"]\n    paren_groups = [paren_group for paren_group\
    \ in paren_groups if paren_group != \"{}{}{}{}{}{}\"]\n    paren_groups = [paren_group\
    \ for paren_group in paren_groups if paren_group != \"{}{}{}{}{}{}[]\"]\n    paren_groups\
    \ = [paren_group for paren_group in paren_groups if paren_group != \"{}{}{}{}{}{}{}\"\
    ]\n    paren_groups = [paren_group for paren_group in paren_groups if paren_group\
    \ != \"{}{}{}{}{}{}[]\"]\n    paren_groups = [paren_group for paren_group in paren_groups\
    \ if paren_group != \"{}{}{}{}{}{}{}\"]\n    paren_groups = [paren_group for paren_group\
    \ in paren_groups if paren_group != \"{}{}{}{}{}{}{}[]\"]\n    paren_group", " \
    \   paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]()\")\n    paren_string = paren_string.strip(\"{}[]()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"", " \
    \   paren_string = paren_string.trim()\n    paren_levels = paren_string.split(\"\
    )\")\n    paren_levels = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n\
    \    paren_levels = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n\
    \    paren_levels = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n\
    \    paren_levels = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n\
    \    paren_levels = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n\
    \    paren_levels = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n\
    \    paren_levels = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n\
    \    paren_levels = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n\
    \    paren_levels = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n\
    \    paren_levels = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n\
    \    paren_levels = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n\
    \    paren_levels = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n\
    \    paren_levels = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n\
    \    paren_levels = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n\
    \    paren_levels = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n\
    \    paren_levels = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n\
    \    paren_levels = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n\
    \    paren_levels = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n\
    \    paren_levels = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n\
    \    paren_levels = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n\
    \    paren_levels = paren_levels[2:end]", "    paren_string = paren_string.strip\n\
    \    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    []\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}[]\")\n    paren_string = paren_string.strip(\"{}[]{}\")\n    paren_string =\
    \ paren_string.strip(\"{}[]{}()\")\n    paren_string = paren_string.strip(\"{}[]{}()[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}()[]{}\")\n    paren_string =\
    \ paren_string.strip(\"{}[]{}()[]{}()\")\n    paren_string = paren_string.strip(\"\
    {}[]{}()[]{}()[]\")\n    paren_string = paren_string.strip(\"{}[]{}()[]{}()[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}()[]{}()[]{}()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}()[]{}()[]{}()[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}()[]{}()[]{}()[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}()[]{}()[]{}()[]{}()\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}()[]{}()[]{}()[]{}()[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}()[]{}()[]{}()[]{}()[]{}\")\n  \
    \  paren_string = paren_string.strip(\"{}[]{}()[]{}()[]{}()[]{}()[]{}()\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}()[]{}()[]{}()[]{}()[]{}()[]\")\n\
    \    paren_string = paren_string.strip(\"{}[]{}()[]{}()[]{}()[]{}()[]{}()[]{}()\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}()[]{}()[]{}()[]{}()[]{}()[]{}()[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}()[]{}()[]{}()[]{}()[]{}()[]{}()[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}()[]{}()[]{}()[]{}()[]{}()[]{}()[]{}()\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}()", "    stack = Vector{Int64}()\n\
    \    paren_count = 0\n    for char in paren_string\n        if char == '('\n \
    \           paren_count += 1\n            push!(stack, paren_count)\n        elseif\
    \ char == ')'\n            pop!(stack)\n            if paren_count == stack[end]\n\
    \                paren_count -= 1\n            else\n                paren_count\
    \ = stack[end]\n            end\n        else\n            paren_count = 0\n \
    \       end\n    end\n    return stack\nend\n</cell>\n<code language=julia-1.5>",
  "    stack = Vector{Int64}()\n    paren_count = 0\n    for c in paren_string\n \
    \       if c == '('\n            push!(stack, paren_count)\n            paren_count\
    \ += 1\n        elseif c == ')'\n            pop!(stack)\n            paren_count\
    \ -= 1\n        else\n            paren_count += 1\n        end\n    end\n   \
    \ return stack\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of occurrences of a substring within that string.",
  "    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]()\")\n    paren_string = paren_string.strip(\"{}[]()[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()[]()\")\n    paren_string = paren_string.strip(\"\
    {}[]()[]()()\")\n    paren_string = paren_string.strip(\"{}[]()[]()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()[]()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()[]()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()[]()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()[]()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()[]()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()[]()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()[]()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()[]()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()[]()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()[]()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()[]()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()[]()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()[]()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()[]()()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()[]()()()()()()()()()()()()()()\"\
    )\n", "    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string", "    paren_string = paren_string.trim()\n\
    \    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    []\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    ..\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren", "    paren_string\
    \ = paren_string.strip\n    paren_string = paren_string.strip(\"()\")\n    paren_string\
    \ = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]", "    paren_string\
    \ = paren_string.trim()\n    paren_string = paren_string.strip(\"()\")\n    paren_string\
    \ = paren_string.strip(\" ()\")\n    paren_string = paren_string.strip(\"()()\"\
    )\n    paren_string = paren_string.strip(\"(()\")\n    paren_string = paren_string.strip(\"\
    (())\")\n    paren_string = paren_string.strip(\"(()()\")\n    paren_string =\
    \ paren_string.strip(\"(())()\")\n    paren_string = paren_string.strip(\"(()()()\"\
    )\n    paren_string = paren_string.strip(\"(()()()()\")\n    paren_string = paren_string.strip(\"\
    (()()()()()\")\n    paren_string = paren_string.strip(\"(()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"(()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    (()()()()()()()()\")\n    paren_string = paren_string.strip(\"(()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"(()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"(()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    (()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"(()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"(()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"(()()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    (()()()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"(()()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"(()()()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"(()()()()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"(()()()()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"(()()()()()", "    paren_string = paren_string.strip\n\
    \    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    []\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}[]\")\n    paren_string = paren_string.strip(\"{}[]{}\")\n    paren_string =\
    \ paren_string.strip(\"{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]\")\n    paren_string =\
    \ paren_string.strip(\"{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n  \
    \  paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]", "    stack =\
    \ Vector{Int64}()\n    paren_count = 0\n    for c in paren_string\n        if\
    \ c == '('\n            push!(stack, paren_count)\n            paren_count +=\
    \ 1\n        elseif c == ')'\n            pop!(stack)\n            paren_count\
    \ -= 1\n        elseif c == '('\n            push!(stack, paren_count)\n     \
    \       paren_count += 1\n        elseif c == ')'\n            pop!(stack)\n \
    \           paren_count -= 1\n        else\n            paren_count += 1\n   \
    \     end\n    end\n    return stack\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes in a string and returns the number of parentheses in the\
    \ string.", "    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    ..\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren", "    paren_string = paren_string.strip\n    paren_string =\
    \ paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"[]\")\n\
    \    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}[]\")\n    paren_string = paren_string.strip(\"{}[]{}\")\n    paren_string =\
    \ paren_string.strip(\"{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]\")\n    paren_string =\
    \ paren_string.strip(\"{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n  \
    \  paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
