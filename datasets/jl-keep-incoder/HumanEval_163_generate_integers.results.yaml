name: HumanEval_163_generate_integers
language: julia
results:
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkrs55mz8.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpkrs55mz8.jl:14 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmpkrs55mz8.jl:23\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpkrs55mz8.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpkrs55mz8.jl:24\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpkrs55mz8.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpkrs55mz8.jl:25\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmpkrs55mz8.jl:14 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkrs55mz8.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < 0 || b < 0\n        error(\"a and b must be positive\")\n    end\n\
    \    \n    evens = Vector{Int64}()\n    \n    while a <= b\n        push!(evens,\
    \ a)\n        a = a + 2\n    end\n    \n    evens\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes an integer $n$ and returns the number of digits\
    \ in $n$. \nFor example, given $n = 1234$, your function should return 4.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnafbqjji.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnafbqjji.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    generate_integers(a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgljodx84.jl:18\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpgljodx84.jl:11 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmpgljodx84.jl:19\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpgljodx84.jl:11\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpgljodx84.jl:20\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpgljodx84.jl:11\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpgljodx84.jl:21\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmpgljodx84.jl:11 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgljodx84.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    even_integers = Vector{Int64}()\n    \n    if a < b\n        generate_integers(b,\
    \ a)\n    else\n        generate_integers(a, b)\n    end\n    \n    if a < b\n\
    \        even_integers = even_integers + [Int64(a)]\n    else\n        even_integers\
    \ = even_integers + [Int64(b)]\n    end\n    \n    return even_integers\nend\n\
    using Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpo5qjyc2l.jl:33\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] Array at ./boot.jl:405 [inlined]\n   [2] Array at ./boot.jl:424 [inlined]\n\
    \   [3] generate_integers(::Int64, ::Int64) at /tmp/tmpo5qjyc2l.jl:12\n   [4]\
    \ generate_integers(::Int64, ::Int64) at /tmp/tmpo5qjyc2l.jl:17 (repeats 52343\
    \ times)\n   [5] generate_integers(::Int64, ::Int64) at /tmp/tmpo5qjyc2l.jl:15\n\
    \   [6] top-level scope at /tmp/tmpo5qjyc2l.jl:33\n   [7] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [8] top-level scope at /tmp/tmpo5qjyc2l.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpo5qjyc2l.jl:34\n  Test threw exception\n  Expression: candidate(10,\
    \ 2) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n   [1] Array at ./boot.jl:405\
    \ [inlined]\n   [2] Array at ./boot.jl:424 [inlined]\n   [3] generate_integers(::Int64,\
    \ ::Int64) at /tmp/tmpo5qjyc2l.jl:12\n   [4] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmpo5qjyc2l.jl:17 (repeats 52344 times)\n   [5] top-level scope at /tmp/tmpo5qjyc2l.jl:34\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpo5qjyc2l.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpo5qjyc2l.jl:35\n  Test threw exception\n  Expression: candidate(132,\
    \ 2) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n   [1] Array at ./boot.jl:405\
    \ [inlined]\n   [2] Array at ./boot.jl:424 [inlined]\n   [3] generate_integers(::Int64,\
    \ ::Int64) at /tmp/tmpo5qjyc2l.jl:12\n   [4] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmpo5qjyc2l.jl:17 (repeats 52344 times)\n   [5] top-level scope at /tmp/tmpo5qjyc2l.jl:35\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpo5qjyc2l.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpo5qjyc2l.jl:36\n  Test threw exception\n  Expression: candidate(17,\
    \ 89) == Vector{Int64}([])\n  StackOverflowError:\n  Stacktrace:\n   [1] Array\
    \ at ./boot.jl:405 [inlined]\n   [2] Array at ./boot.jl:424 [inlined]\n   [3]\
    \ generate_integers(::Int64, ::Int64) at /tmp/tmpo5qjyc2l.jl:12\n   [4] generate_integers(::Int64,\
    \ ::Int64) at /tmp/tmpo5qjyc2l.jl:17 (repeats 52343 times)\n   [5] generate_integers(::Int64,\
    \ ::Int64) at /tmp/tmpo5qjyc2l.jl:15\n   [6] top-level scope at /tmp/tmpo5qjyc2l.jl:36\n\
    \   [7] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [8] top-level scope at /tmp/tmpo5qjyc2l.jl:32\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo5qjyc2l.jl:30\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    generate_integers(a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcp7rijx0.jl:19\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpcp7rijx0.jl:12 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmpcp7rijx0.jl:20\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpcp7rijx0.jl:12\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpcp7rijx0.jl:21\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpcp7rijx0.jl:12\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpcp7rijx0.jl:22\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmpcp7rijx0.jl:12 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcp7rijx0.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpna9an2cp.jl:23\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpna9an2cp.jl:15 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmpna9an2cp.jl:24\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpna9an2cp.jl:15\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpna9an2cp.jl:25\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpna9an2cp.jl:15\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpna9an2cp.jl:26\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmpna9an2cp.jl:15 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpna9an2cp.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    evens = Vector{Int64}()\n    \n    if a < b\n        generate_integers(b,\
    \ a)\n    end\n    \n    while a <= b\n        push!(evens, a)\n        \n   \
    \     a = a + 2\n    end\n    \n    evens\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nExercise: Generate all integers between 1 and 100 (both included) that\
    \ are divisible by 3\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppjbzhpbh.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppjbzhpbh.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        generate_integers(b, a)\n    else\n        Vector{Int64}[a,\
    \ b]\n    end\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2, 8)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(10, 14)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ generates integers between 1 and a given number n, inclusive.\nusing Test\n\n\
    @testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdo8s_1ul.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdo8s_1ul.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    even_integers = Vector{Int64}()\n    \n    if a < b\n        generate_integers(b,\
    \ a)\n    else\n        generate_integers(a, b)\n    end\n    \n    even_integers\
    \ = even_integers[2:end]\n    \n    return even_integers\nend\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10,\
    \ 14)\n</cell>\n<text>\nExercise 2\nWrite a function that generates integers between\
    \ 1 and a given number n inclusively.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptyykow2i.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptyykow2i.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    evens = Vector{Int64}()\n    \n    if a < b\n        generate_integers(b,\
    \ a)\n    else\n        generate_integers(a, b)\n    end\n    \n    if a < b\n\
    \        evens = evens..(b - a+1)\n    else\n        evens = evens..(a - b+1)\n\
    \    end\n    \n    evens\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n<text>\nExercise: Write\
    \ a function that generates integers within a given range. Test it by generating\
    \ integers between 2 and 10 and then between 10 and 20.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmwuluove.jl:28\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmwuluove.jl:28\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2, 8)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(10, 14)\n</cell>\n<text>\nProblem 3\nWrite a function that generates\
    \ all the integers between 1 and a given number n, inclusive.\nusing Test\n\n\
    @testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8j2ok_9c.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8j2ok_9c.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of all even integers between 1 and a given integer n.\nusing Test\n\n\
    @testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnfmpg4__.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnfmpg4__.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<text>\nNow let's generate some random integers between\
    \ 0 and 100 and count how many times each integer appears.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp15eho9_m.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp15eho9_m.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2, 8)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(10, 14)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ generates all the integers between 1 and 100 (both included) that are divisible\
    \ by 3\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf9r_c93e.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpf9r_c93e.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    evens = Vector{Int64}()\n    \n    if a < b\n        generate_integers(b,\
    \ a)\n    end\n    \n    if b < a\n        generate_integers(a, b)\n    end\n\
    \    \n    if a < b\n        evens = evens.+[a]\n    end\n    \n    if b < a\n\
    \        evens = evens.+[b]\n    end\n    \n    return evens\nend\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10,\
    \ 14)\n</cell>\n<text>\nProblem 3\nWrite a function that returns the number of\
    \ integers between 1 and n that have exactly two digits.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3yuwz20r.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3yuwz20r.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < 0 || b < 0\n        error(\"generate_integers: a and b must be\
    \ non-negative\")\n    end\n    \n    if b < a\n        error(\"generate_integers:\
    \ b must be greater than a\")\n    end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpatbs26c7.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpatbs26c7.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpatbs26c7.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpeuihad_z.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpeuihad_z.jl:14 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmpeuihad_z.jl:23\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpeuihad_z.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpeuihad_z.jl:24\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpeuihad_z.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpeuihad_z.jl:25\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmpeuihad_z.jl:14 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeuihad_z.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a positive\
    \ integer a, return the sum of its digits in ascending order.\nusing Test\n\n\
    @testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbdup9ook.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbdup9ook.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < 0 || b < 0 \n        error(\"generate_integers: both arguments\
    \ must be positive\")\n    else if a < b \n        error(\"generate_integers:\
    \ a must be less than b\")\n    else \n        generate_integers(b, a) \n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number of\
    \ digits in an integer.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf2s5g8ov.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpf2s5g8ov.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpad8wcd0i.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpad8wcd0i.jl:14 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmpad8wcd0i.jl:23\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpad8wcd0i.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpad8wcd0i.jl:24\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpad8wcd0i.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpad8wcd0i.jl:25\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmpad8wcd0i.jl:14 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpad8wcd0i.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    generate_integers(a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8ypgpjfn.jl:18\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp8ypgpjfn.jl:11 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmp8ypgpjfn.jl:19\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp8ypgpjfn.jl:11\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmp8ypgpjfn.jl:20\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp8ypgpjfn.jl:11\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmp8ypgpjfn.jl:21\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmp8ypgpjfn.jl:11 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8ypgpjfn.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbrfhwnb6.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpbrfhwnb6.jl:14 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmpbrfhwnb6.jl:23\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpbrfhwnb6.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpbrfhwnb6.jl:24\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpbrfhwnb6.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpbrfhwnb6.jl:25\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmpbrfhwnb6.jl:14 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbrfhwnb6.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcvmhyp6k.jl:23\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpcvmhyp6k.jl:15 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmpcvmhyp6k.jl:24\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpcvmhyp6k.jl:15\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpcvmhyp6k.jl:25\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpcvmhyp6k.jl:15\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpcvmhyp6k.jl:26\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmpcvmhyp6k.jl:15 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcvmhyp6k.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < 0 || b < 0\n        error(\"a and b must be positive\")\n    end\n\
    \    \n    if a == 0 || b == 0\n        return Vector{Int64}()\n    end\n    \n\
    \    evens = generate_integers(a - 1, b)\n    evens = evens[2:end] + evens[2:end]\n\
    \    evens = evens[2:end] + evens[2:end]\n    evens = evens[2:end] + evens[2:end]\n\
    \    evens = evens[2:end] + evens[2:end]\n    evens = evens[2:end] + evens[2:end]\n\
    \    evens = evens[2:end] + evens[2:end]\n    evens = evens[2:end] + evens[2:end]\n\
    \    evens = evens[2:end] + evens[2:end]\n    evens = evens[2:end] + evens[2:end]\n\
    \    evens = evens[2:end] + evens[2:end]\n    evens = evens[2:end] + evens[2:end]\n\
    \    evens = evens[2:end] + evens[2:end]\n    evens = evens[2:end] + evens[2:end]\n\
    \    evens = evens[2:end] + evens[2:end]\n    evens = evens[2:end] + evens[2:end]\n\
    \    evens = evens[2:end] + evens[2:end]\n    evens = evens[2:end] + evens[2:end]\n\
    \    evens = evens[2:end] + evens[2:end]\n    evens = evens[2:end] + evens[2:end]\n\
    \    evens = evens[2:end] + evens[2:end]\n    evens = evens[2:end] + evens[2:end]\n\
    \    evens = evens[2:end] + evens[2:end]\n    evens = evens[2:end] + evens[2:end]\n\
    \    evens = evens[2:end] + evens[2:end]\n    evens = evens[2:end] + evens[2:end]\n\
    \    evens = evens[2:end] + evens[2:end]\n    evens = evens[2:end] + evens[2:end]\n\
    \    evens = evens[2:end] + evens[2:end]\n    evens = evens[2:end] + evens[2:end]\n\
    \    evens = evens[2:end] + evens[2:end]\n    evens = evens[2:end] + evens[2:end]\n\
    \    evens = evens[2:end] + evens[2:end]\n    evens = evens[2:end] + evens[2:end]\n\
    \    evens = evens[2:end] + evens[2:end]\n    evens = evens[2:end] + evens[2:end]\n\
    \    evens = evens[2:end] + \nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbgtoiba9.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpbgtoiba9.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpbgtoiba9.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp793ckwth.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp793ckwth.jl:14 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmp793ckwth.jl:23\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp793ckwth.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmp793ckwth.jl:24\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp793ckwth.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmp793ckwth.jl:25\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmp793ckwth.jl:14 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp793ckwth.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that generates\
    \ all the integers between 1 and $n$, inclusive, where $n$ is given as an argument\
    \ to the function.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps3_w__yg.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmps3_w__yg.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    evens = Vector{Int64}()\n    \n    if a < b\n        generate_integers(b,\
    \ a)\n    else\n        generate_integers(a, b)\n    end\n    \n    if a < b\n\
    \        evens = evens.+(a-b)\n    end\n    \n    return evens\nend\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10,\
    \ 14)\n</cell>\n<text>\nProblem 4\nWrite a function that returns the number of\
    \ digits in an integer.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbzkaq7ak.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbzkaq7ak.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    generate_integers(a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2tsxbmdv.jl:18\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp2tsxbmdv.jl:11 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmp2tsxbmdv.jl:19\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp2tsxbmdv.jl:11\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmp2tsxbmdv.jl:20\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp2tsxbmdv.jl:11\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmp2tsxbmdv.jl:21\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmp2tsxbmdv.jl:11 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2tsxbmdv.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpeikmts3e.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpeikmts3e.jl:14 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmpeikmts3e.jl:23\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpeikmts3e.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpeikmts3e.jl:24\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpeikmts3e.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpeikmts3e.jl:25\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmpeikmts3e.jl:14 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeikmts3e.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    even_integers = Vector{Int64}()\n    \n    if a < b\n        generate_integers(b,\
    \ a)\n    else\n        generate_integers(a, b)\n    end\n    \n    for i in a:a:b\n\
    \        if i % 2 == 0\n            even_integers << i\n        end\n    end\n\
    \    \n    return even_integers\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n<text>\nProblem 7\n\
    Write a function that returns the number of integers between a and b inclusive.\n\
    using Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpku11axg5.jl:28\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpku11axg5.jl:28\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    evens = Vector{Int64}()\n    \n    if a < b\n        generate_integers(b,\
    \ a)\n    else\n        generate_integers(a, b)\n    end\n    \n    if a < b\n\
    \        evens = evens..(b-a)\n    end\n    \n    if a < b\n        evens = evens..(a-b)\n\
    \    end\n    \n    return evens\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n<text>\nProblem 7:\
    \ Generate all integers between 1 and 100 (both included)\nThe first thing you\
    \ might want to do is generate all the integers between 1 and 100 (both included).\n\
    using Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpabpdwap2.jl:30\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpabpdwap2.jl:30\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if b < a \n        error(\"generate_integers: b < a\")\n    end\n    \n\
    \    evens = Vector{Int64}()\n    \n    while a <= b\n        push!(evens, a)\n\
    \        \n        a += 2\n    end\n    \n    return evens\nend\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10,\
    \ 14)\n</cell>\n<text>\nExercise 2\nWrite a function that takes in two positive\
    \ integers a and b and returns the sum of all even digits between a and b.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5t9wumzj.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5t9wumzj.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b \n        generate_integers(b, a)\n    else \n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp143te0r_.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp143te0r_.jl:14 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmp143te0r_.jl:23\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp143te0r_.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmp143te0r_.jl:24\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp143te0r_.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmp143te0r_.jl:25\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmp143te0r_.jl:14 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp143te0r_.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2, 8)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(10, 14)\n</cell>\n<text>\nProblem 2\nWrite a function that returns\
    \ the number of digits in an integer.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq3el3pjs.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq3el3pjs.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3u43x73x.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp3u43x73x.jl:14 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmp3u43x73x.jl:23\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp3u43x73x.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmp3u43x73x.jl:24\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp3u43x73x.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmp3u43x73x.jl:25\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmp3u43x73x.jl:14 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3u43x73x.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    if b < a \n        error(\"generate_integers: b < a\")\n    end\n\
    \    \n    evens = Vector{Int64}()\n    \n    while a <= b\n        push!(evens,\
    \ a)\n        a += 2\n    end\n    \n    return evens\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nProblem 3\nWrite a function that takes in two positive integers a and\
    \ b, and returns the sum of all even digits in a and b.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppft5n0db.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppft5n0db.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2, 8)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(10, 14)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes in two positive integers a and b, and returns the sum of all the even\
    \ digits in a and b. For example, generate_integers(2, 8) => [2, 4, 6, 8], and\
    \ generate_integers(8, 2) => [2, 4, 6, 8].\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdp4fpl8z.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdp4fpl8z.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpu7uz92zu.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpu7uz92zu.jl:14 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmpu7uz92zu.jl:23\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpu7uz92zu.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpu7uz92zu.jl:24\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpu7uz92zu.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpu7uz92zu.jl:25\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmpu7uz92zu.jl:14 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu7uz92zu.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    generate_integers(0, b)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpc929tqp4.jl:18\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpc929tqp4.jl:11 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmpc929tqp4.jl:19\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpc929tqp4.jl:11\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpc929tqp4.jl:20\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpc929tqp4.jl:11\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpc929tqp4.jl:21\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmpc929tqp4.jl:11 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc929tqp4.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    evens = Vector{Int64}()\n    \n    for n in range(a, b) \n     \
    \   if n % 2 == 0 \n            evens.push(n)\n        end\n    end\n    \n  \
    \  return evens\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes in two positive integers a and b and returns the number\
    \ of integers between a and b that are divisible by 3.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp37yuvgax.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp37yuvgax.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    evens = Vector{Int64}()\n    \n    if a < b\n        generate_integers(b,\
    \ a)\n    elseif b < a\n        generate_integers(a, b)\n    else\n        evens\
    \ = a % b\n        generate_integers(a / b, b)\n    end\n    \n    evens\nend\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10,\
    \ 14)\n</cell>\n<text>\nProblem 3\nWrite a function that returns the number of\
    \ integers between 1 and a given integer that have no factors in common. For example,\
    \ given that n = 10, the function should return 3.\nusing Test\n\n@testset begin\n\
    \ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t\
    @test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6,\
    \ 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5nrc2pls.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5nrc2pls.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwpn4qs13.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpwpn4qs13.jl:14 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmpwpn4qs13.jl:23\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpwpn4qs13.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpwpn4qs13.jl:24\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpwpn4qs13.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpwpn4qs13.jl:25\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmpwpn4qs13.jl:14 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwpn4qs13.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes in\
    \ a list of integers and returns the sum of the even integers in the list.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgrska0v1.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgrska0v1.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    evens = Vector{Int64}()\n    \n    if b < a \n        error(\"generate_integers:\
    \ b is less than a\")\n    end\n    \n    while a <= b\n        push!(evens, a)\n\
    \        a += 1\n    end\n    \n    return evens\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nProblem 3\nWrite a function that returns the number of integers between\
    \ 1 and a given integer that do not exceed a given maximum.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsjkr84pe.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsjkr84pe.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < 0 || b < 0\n        error(\"Invalid input\")\n    end\n    \n \
    \   evens = Vector{Int64}()\n    \n    while a <= b\n        evens.append(a)\n\
    \        a = a + 2\n    end\n    \n    return evens\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nProblem 4\nWrite a function that generates all the integers between 1\
    \ and a given number n inclusive.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfuoc2x00.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfuoc2x00.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    generate_integers(0, b)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmple_7wv6v.jl:18\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmple_7wv6v.jl:11 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmple_7wv6v.jl:19\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmple_7wv6v.jl:11\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmple_7wv6v.jl:20\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmple_7wv6v.jl:11\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmple_7wv6v.jl:21\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmple_7wv6v.jl:11 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmple_7wv6v.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < 0 || b < 0\n        error(\"a and b must be positive\")\n    end\n\
    \    \n    evens = Vector{Int64}()\n    \n    if b == 0\n        return evens\n\
    \    end\n    \n    if a < b\n        a, b = b, a\n    end\n    \n    for i =\
    \ a to b\n        if i % 2 == 0\n            push!(evens, i)\n        end\n  \
    \  end\n    \n    return evens\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n<text>\nExercise 2\n\
    Write a function called generate_primes that takes in two positive integers a\
    \ and b and returns a vector containing all the prime numbers less than or equal\
    \ to b (inclusive).\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"b\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4t5krkb1.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4t5krkb1.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpuy8s7co8.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpuy8s7co8.jl:14 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmpuy8s7co8.jl:23\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpuy8s7co8.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpuy8s7co8.jl:24\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpuy8s7co8.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpuy8s7co8.jl:25\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmpuy8s7co8.jl:14 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuy8s7co8.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    generate_integers(0, b)\n    generate_integers(a, 0)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptrlyw2xl.jl:19\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmptrlyw2xl.jl:11 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmptrlyw2xl.jl:20\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmptrlyw2xl.jl:11\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmptrlyw2xl.jl:21\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmptrlyw2xl.jl:11\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmptrlyw2xl.jl:22\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmptrlyw2xl.jl:11 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptrlyw2xl.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        Vector{Int64}[a,\
    \ b]\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqv5_mn2l.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  MethodError: Cannot `convert`\
    \ an object of type Int64 to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(::Array{Array{Int64,1},1}, ::Int64,\
    \ ::Int64) at ./array.jl:826\n   [2] getindex at ./array.jl:396 [inlined]\n  \
    \ [3] generate_integers(::Int64, ::Int64) at /tmp/tmpqv5_mn2l.jl:14\n   [4] generate_integers(::Int64,\
    \ ::Int64) at /tmp/tmpqv5_mn2l.jl:12\n   [5] top-level scope at /tmp/tmpqv5_mn2l.jl:22\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpqv5_mn2l.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpqv5_mn2l.jl:23\n  Test threw exception\n  Expression: candidate(10,\
    \ 2) == [2, 4, 6, 8]\n  MethodError: Cannot `convert` an object of type Int64\
    \ to an object of type Array{Int64,1}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::AbstractArray) where T<:Array at array.jl:533\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(::Array{Array{Int64,1},1}, ::Int64,\
    \ ::Int64) at ./array.jl:826\n   [2] getindex at ./array.jl:396 [inlined]\n  \
    \ [3] generate_integers(::Int64, ::Int64) at /tmp/tmpqv5_mn2l.jl:14\n   [4] top-level\
    \ scope at /tmp/tmpqv5_mn2l.jl:23\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpqv5_mn2l.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpqv5_mn2l.jl:24\n  Test threw exception\n  Expression: candidate(132,\
    \ 2) == [2, 4, 6, 8]\n  MethodError: Cannot `convert` an object of type Int64\
    \ to an object of type Array{Int64,1}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::AbstractArray) where T<:Array at array.jl:533\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(::Array{Array{Int64,1},1}, ::Int64,\
    \ ::Int64) at ./array.jl:826\n   [2] getindex at ./array.jl:396 [inlined]\n  \
    \ [3] generate_integers(::Int64, ::Int64) at /tmp/tmpqv5_mn2l.jl:14\n   [4] top-level\
    \ scope at /tmp/tmpqv5_mn2l.jl:24\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpqv5_mn2l.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpqv5_mn2l.jl:25\n  Test threw exception\n  Expression: candidate(17,\
    \ 89) == Vector{Int64}([])\n  MethodError: Cannot `convert` an object of type\
    \ Int64 to an object of type Array{Int64,1}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::AbstractArray) where T<:Array at array.jl:533\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(::Array{Array{Int64,1},1}, ::Int64,\
    \ ::Int64) at ./array.jl:826\n   [2] getindex at ./array.jl:396 [inlined]\n  \
    \ [3] generate_integers(::Int64, ::Int64) at /tmp/tmpqv5_mn2l.jl:14\n   [4] generate_integers(::Int64,\
    \ ::Int64) at /tmp/tmpqv5_mn2l.jl:12\n   [5] top-level scope at /tmp/tmpqv5_mn2l.jl:25\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpqv5_mn2l.jl:21\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqv5_mn2l.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b \n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpuqcj5tye.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpuqcj5tye.jl:14 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmpuqcj5tye.jl:23\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpuqcj5tye.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpuqcj5tye.jl:24\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpuqcj5tye.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpuqcj5tye.jl:25\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmpuqcj5tye.jl:14 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuqcj5tye.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp15t6_hn9.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp15t6_hn9.jl:14 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmp15t6_hn9.jl:23\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp15t6_hn9.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmp15t6_hn9.jl:24\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp15t6_hn9.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmp15t6_hn9.jl:25\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmp15t6_hn9.jl:14 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp15t6_hn9.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if b < a \n        error(\"generate_integers: b < a\")\n    end\n    \n\
    \    evens = Vector{Int64}()\n    \n    while a <= b\n        evens += [a]\n \
    \       a += 1\n    end\n    \n    return evens\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nProblem 3\nWrite a function that returns the number of integers between\
    \ 1 and n that have the property that each integer is divisible by 3.\nusing Test\n\
    \n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq2m7mkab.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq2m7mkab.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpc8dzao1g.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpc8dzao1g.jl:14 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmpc8dzao1g.jl:23\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpc8dzao1g.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpc8dzao1g.jl:24\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpc8dzao1g.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpc8dzao1g.jl:25\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmpc8dzao1g.jl:14 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc8dzao1g.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8bpra20n.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp8bpra20n.jl:14 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmp8bpra20n.jl:23\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp8bpra20n.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmp8bpra20n.jl:24\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp8bpra20n.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmp8bpra20n.jl:25\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmp8bpra20n.jl:14 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8bpra20n.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b \n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpa7ef3j37.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpa7ef3j37.jl:14 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmpa7ef3j37.jl:23\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpa7ef3j37.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpa7ef3j37.jl:24\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpa7ef3j37.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpa7ef3j37.jl:25\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmpa7ef3j37.jl:14 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa7ef3j37.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjx8tff3x.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpjx8tff3x.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpjx8tff3x.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < 0 || b < 0\n        error(\"a or b must be positive\")\n    end\n\
    \    \n    evens = Vector{Int64}()\n    \n    while a < b\n        evens.append(a)\n\
    \        a += 2\n    end\n    \n    return evens\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nProblem 7\nWrite a function that returns the number of integers between\
    \ 1 and n that have exactly two digits.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcnfui2uq.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcnfui2uq.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    generate_integers(a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2wqfw6uf.jl:18\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp2wqfw6uf.jl:11 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmp2wqfw6uf.jl:19\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp2wqfw6uf.jl:11\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmp2wqfw6uf.jl:20\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp2wqfw6uf.jl:11\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmp2wqfw6uf.jl:21\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmp2wqfw6uf.jl:11 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2wqfw6uf.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that generates\
    \ all the integers between two given integers, inclusive.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq25qz5yf.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq25qz5yf.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < 0 || b < 0\n        error(\"a or b must be positive\")\n    end\n\
    \    \n    if a == 0 && b == 0\n        return Vector{Int64}()\n    end\n    \n\
    \    evens = Vector{Int64}()\n    \n    if a < b\n        a, b = b, a\n    end\n\
    \    \n    for i = a to b\n        if i % 2 == 0\n            push!(evens, i)\n\
    \        end\n    end\n    \n    return evens\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that generates all the integers between 0 and $n$, inclusive,\
    \ that have $k$ digits. For example, generate_integers(10, 5, 2) should return\
    \ [10, 11, 12, 13, 14, 15].\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"b\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2_go3hqz.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2_go3hqz.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzn89j740.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpzn89j740.jl:14 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmpzn89j740.jl:23\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpzn89j740.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpzn89j740.jl:24\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpzn89j740.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpzn89j740.jl:25\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmpzn89j740.jl:14 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzn89j740.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if b < a \n        error(\"generate_integers: b is less than a\")\n  \
    \  end\n    \n    evens = Vector{Int64}()\n    \n    while a <= b\n        push!(evens,\
    \ a)\n        a += 2\n    end\n    \n    return evens\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nExercise\nWrite a function called generate_integers_between_1_and_100\
    \ that takes in two positive integers a and b and returns the even digits between\
    \ a and b, in ascending order.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd76ljdzy.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpd76ljdzy.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    evens = Vector{Int64}()\n    \n    while a < b\n        evens.append(a)\n\
    \        a += 1\n    end\n    \n    return evens\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nProblem 3\nWrite a function that generates all the integers between 1\
    \ and 100 (both included) that are divisible by 7 and divisible by 11. Do not\
    \ use any loops.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp530qm_h0.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp530qm_h0.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    generate_integers(0, b)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpoc55et46.jl:18\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpoc55et46.jl:11 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmpoc55et46.jl:19\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpoc55et46.jl:11\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpoc55et46.jl:20\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpoc55et46.jl:11\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpoc55et46.jl:21\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmpoc55et46.jl:11 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoc55et46.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    evens = Vector{Int64}()\n    \n    if a < b\n        generate_integers(b\
    \ + 1, a)\n    else\n        generate_integers(a, b - 1)\n    end\n    \n    for\
    \ n in a:(b - 1)\n        if n % 2 == 0\n            push!(evens, n)\n       \
    \ end\n    end\n    \n    return evens\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nProblem 7\nWrite a function that returns the number of integers within\
    \ a given range\nthat are divisible by another given integer.\nusing Test\n\n\
    @testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk8sgu9xf.jl:28\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk8sgu9xf.jl:28\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < 0 || b < 0 || a > b || b > a || b - a < 2 \n        error(\"generate_integers:\
    \ invalid input\") \n    else \n        generate_integers_aux(a, b, [], 0)\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphy5tisp1.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  generate_integers: invalid\
    \ input\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] generate_integers(::Int64,\
    \ ::Int64) at /tmp/tmphy5tisp1.jl:12\n   [3] top-level scope at /tmp/tmphy5tisp1.jl:22\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmphy5tisp1.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmphy5tisp1.jl:23\n  Test threw exception\n  Expression: candidate(10,\
    \ 2) == [2, 4, 6, 8]\n  generate_integers: invalid input\n  Stacktrace:\n   [1]\
    \ error(::String) at ./error.jl:33\n   [2] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmphy5tisp1.jl:12\n   [3] top-level scope at /tmp/tmphy5tisp1.jl:23\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmphy5tisp1.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmphy5tisp1.jl:24\n  Test threw exception\n  Expression: candidate(132,\
    \ 2) == [2, 4, 6, 8]\n  generate_integers: invalid input\n  Stacktrace:\n   [1]\
    \ error(::String) at ./error.jl:33\n   [2] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmphy5tisp1.jl:12\n   [3] top-level scope at /tmp/tmphy5tisp1.jl:24\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmphy5tisp1.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmphy5tisp1.jl:25\n  Test threw exception\n  Expression: candidate(17,\
    \ 89) == Vector{Int64}([])\n  generate_integers: invalid input\n  Stacktrace:\n\
    \   [1] error(::String) at ./error.jl:33\n   [2] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmphy5tisp1.jl:12\n   [3] top-level scope at /tmp/tmphy5tisp1.jl:25\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmphy5tisp1.jl:21\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphy5tisp1.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if b < a \n        error(\"generate_integers: b must be greater than a\"\
    )\n    end\n    \n    evens = Vector{Int64}()\n    \n    while a <= b\n      \
    \  evens.append(a)\n        a += 2\n    end\n    \n    return evens\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes in two positive integers a and\
    \ b, and returns the number of integers between a and b that are divisible by\
    \ 3.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyqxsa79_.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyqxsa79_.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes in\
    \ two positive integers a and b and returns the number of digits in between a\
    \ and b. For example, generate_integers(2, 8) returns 2, generate_integers(8,\
    \ 2) returns 2, and generate_integers(10, 14) returns 0.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxpp0vgxv.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxpp0vgxv.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpaeahgjuu.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpaeahgjuu.jl:14 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmpaeahgjuu.jl:23\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpaeahgjuu.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpaeahgjuu.jl:24\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpaeahgjuu.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpaeahgjuu.jl:25\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmpaeahgjuu.jl:14 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaeahgjuu.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if b < a \n        error(\"generate_integers: b must be greater than a\"\
    )\n    end\n    \n    evens = Vector{Int64}()\n    while a <= b\n        push!(evens,\
    \ a)\n        a += 2\n    end\n    evens\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that generates integers between 1 and 100\
    \ (both inclusive) \nand returns the even numbers in ascending order.\nusing Test\n\
    \n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyj2273o1.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyj2273o1.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2, 8)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(10, 14)\n</cell>\n<text>\nExercise\nWrite a function that generates\
    \ integers up to a specified maximum value\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpehzasdge.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpehzasdge.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9kuk2xoh.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp9kuk2xoh.jl:14 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmp9kuk2xoh.jl:23\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp9kuk2xoh.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmp9kuk2xoh.jl:24\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp9kuk2xoh.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmp9kuk2xoh.jl:25\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmp9kuk2xoh.jl:14 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9kuk2xoh.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptuifxczk.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmptuifxczk.jl:14 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmptuifxczk.jl:23\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmptuifxczk.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmptuifxczk.jl:24\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmptuifxczk.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmptuifxczk.jl:25\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmptuifxczk.jl:14 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptuifxczk.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    generate_integers(0, b)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgy95dlph.jl:18\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpgy95dlph.jl:11 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmpgy95dlph.jl:19\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpgy95dlph.jl:11\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpgy95dlph.jl:20\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpgy95dlph.jl:11\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpgy95dlph.jl:21\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmpgy95dlph.jl:11 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgy95dlph.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    even_integers = Vector{Int64}()\n    \n    if a < b\n        generate_integers(b,\
    \ a)\n    else\n        generate_integers(a, b)\n    end\n    \n    for n in 1:(b-a+1)\n\
    \        if n % 2 == 0\n            even_integers = push!(even_integers, n) \n\
    \        end\n    end\n    \n    even_integers\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nProblem 3\nWrite a function that takes in two positive integers a and\
    \ b, and returns all integers between a and b (inclusive), inclusive.\nusing Test\n\
    \n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkjdlnt_a.jl:28\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkjdlnt_a.jl:28\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b \n        generate_integers(b, a) \n    else \n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfddh0u59.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpfddh0u59.jl:14 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmpfddh0u59.jl:23\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpfddh0u59.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpfddh0u59.jl:24\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpfddh0u59.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpfddh0u59.jl:25\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmpfddh0u59.jl:14 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfddh0u59.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpisvhx7_2.jl:23\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpisvhx7_2.jl:15 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmpisvhx7_2.jl:24\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpisvhx7_2.jl:15\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpisvhx7_2.jl:25\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpisvhx7_2.jl:15\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpisvhx7_2.jl:26\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmpisvhx7_2.jl:15 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpisvhx7_2.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b \n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that generates\
    \ all the integers between 1 and a given number $n$, inclusive.\nusing Test\n\n\
    @testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsnpyfazu.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsnpyfazu.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b \n        generate_integers(b, a)\n    else\n        Vector{Int64}[a,\
    \ b]\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfpb36kqx.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  MethodError: Cannot `convert`\
    \ an object of type Int64 to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(::Array{Array{Int64,1},1}, ::Int64,\
    \ ::Int64) at ./array.jl:826\n   [2] getindex at ./array.jl:396 [inlined]\n  \
    \ [3] generate_integers(::Int64, ::Int64) at /tmp/tmpfpb36kqx.jl:14\n   [4] generate_integers(::Int64,\
    \ ::Int64) at /tmp/tmpfpb36kqx.jl:12\n   [5] top-level scope at /tmp/tmpfpb36kqx.jl:22\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpfpb36kqx.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpfpb36kqx.jl:23\n  Test threw exception\n  Expression: candidate(10,\
    \ 2) == [2, 4, 6, 8]\n  MethodError: Cannot `convert` an object of type Int64\
    \ to an object of type Array{Int64,1}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::AbstractArray) where T<:Array at array.jl:533\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(::Array{Array{Int64,1},1}, ::Int64,\
    \ ::Int64) at ./array.jl:826\n   [2] getindex at ./array.jl:396 [inlined]\n  \
    \ [3] generate_integers(::Int64, ::Int64) at /tmp/tmpfpb36kqx.jl:14\n   [4] top-level\
    \ scope at /tmp/tmpfpb36kqx.jl:23\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpfpb36kqx.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpfpb36kqx.jl:24\n  Test threw exception\n  Expression: candidate(132,\
    \ 2) == [2, 4, 6, 8]\n  MethodError: Cannot `convert` an object of type Int64\
    \ to an object of type Array{Int64,1}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::AbstractArray) where T<:Array at array.jl:533\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(::Array{Array{Int64,1},1}, ::Int64,\
    \ ::Int64) at ./array.jl:826\n   [2] getindex at ./array.jl:396 [inlined]\n  \
    \ [3] generate_integers(::Int64, ::Int64) at /tmp/tmpfpb36kqx.jl:14\n   [4] top-level\
    \ scope at /tmp/tmpfpb36kqx.jl:24\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpfpb36kqx.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpfpb36kqx.jl:25\n  Test threw exception\n  Expression: candidate(17,\
    \ 89) == Vector{Int64}([])\n  MethodError: Cannot `convert` an object of type\
    \ Int64 to an object of type Array{Int64,1}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::AbstractArray) where T<:Array at array.jl:533\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(::Array{Array{Int64,1},1}, ::Int64,\
    \ ::Int64) at ./array.jl:826\n   [2] getindex at ./array.jl:396 [inlined]\n  \
    \ [3] generate_integers(::Int64, ::Int64) at /tmp/tmpfpb36kqx.jl:14\n   [4] generate_integers(::Int64,\
    \ ::Int64) at /tmp/tmpfpb36kqx.jl:12\n   [5] top-level scope at /tmp/tmpfpb36kqx.jl:25\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpfpb36kqx.jl:21\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfpb36kqx.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    generate_integers(a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4sjy56ex.jl:18\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp4sjy56ex.jl:11 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmp4sjy56ex.jl:19\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp4sjy56ex.jl:11\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmp4sjy56ex.jl:20\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp4sjy56ex.jl:11\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmp4sjy56ex.jl:21\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmp4sjy56ex.jl:11 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4sjy56ex.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if b < a \n        error(\"generate_integers: b must be greater than a\"\
    )\n    end\n    \n    evens = Vector{Int64}()\n    \n    while a <= b\n      \
    \  evens.append(a)\n        a = a + 2\n    end\n    \n    return evens\nend\n\
    </cell>\n<code language=julia-1.4>\ngenerate_integers(2, 8)\n</cell>\n<code language=julia-1.4>\n\
    generate_integers(8, 2)\n</cell>\n<code language=julia-1.4>\ngenerate_integers(10,\
    \ 14)\n</cell>\n<text>\nExercise: Generate all integers between 1 and 100 (both\
    \ included) that are divisible by 3\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqfarcy_v.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqfarcy_v.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if b < a \n        error(\"generate_integers: b must be greater than a\"\
    )\n    end\n    \n    digits = Vector{Int64}()\n    \n    while a <= b\n     \
    \   push!(digits, a)\n        a = a + 2\n    end\n    \n    return digits\nend\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10,\
    \ 14)\n</cell>\n<text>\nProblem 7: Generate all integers between 1 and 100 (both\
    \ included) that are divisible by 3\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi1efwch0.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpi1efwch0.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2, 8)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(10, 14)\n</cell>\n<text>\nExercise\nWrite a function that generates\
    \ integers up to a specified maximum.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk3j2tpb8.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk3j2tpb8.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp91jzfx4m.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp91jzfx4m.jl:14 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmp91jzfx4m.jl:23\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp91jzfx4m.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmp91jzfx4m.jl:24\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp91jzfx4m.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmp91jzfx4m.jl:25\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmp91jzfx4m.jl:14 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp91jzfx4m.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    even_integers = Vector{Int64}()\n    \n    if a < b\n        generate_integers(b,\
    \ a)\n    else\n        generate_integers(a, b)\n    end\n    \n    if a < b\n\
    \        even_integers = even_integers[end-1:end]\n    else\n        even_integers\
    \ = even_integers[end-1:end]\n    end\n    \n    even_integers = even_integers[2:end]\n\
    \    \n    return even_integers\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n<text>\nProblem 2\n\
    Write a function that generates all the prime numbers between two given integers,\
    \ inclusive.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptokdbb48.jl:30\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptokdbb48.jl:30\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    evens = Vector{Int64}()\n    \n    if a < b\n        generate_integers(b,\
    \ a)\n    else\n        generate_integers(a, b)\n    end\n    \n    evens = evens.+(a:b).filter(x\
    \ -> x % 2 == 0)\n    \n    return evens\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nExercise\nWrite a function that generates integers between 1 and 100 (both\
    \ inclusive) that are divisible by 7 and divisible by 3.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0seh3i96.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0seh3i96.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpd0uxgo0b.jl:23\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpd0uxgo0b.jl:15 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmpd0uxgo0b.jl:24\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpd0uxgo0b.jl:15\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpd0uxgo0b.jl:25\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpd0uxgo0b.jl:15\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpd0uxgo0b.jl:26\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmpd0uxgo0b.jl:15 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd0uxgo0b.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b \n        a, b = b, a\n    end\n    \n    evens = Vector{Int64}()\n\
    \    \n    while a <= b\n        evens.append(a)\n        a += 2\n    end\n  \
    \  \n    return evens\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n<text>\nProblem 3\n\
    Write a function that generates all the integers between 1 and 100 that are divisible\
    \ by 3 or 5.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjk8b4zfw.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjk8b4zfw.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    if b < a \n        error(\"generate_integers: b < a\")\n    end\n\
    \    \n    evens = Vector{Int64}()\n    \n    while a <= b\n        push!(evens,\
    \ a)\n        \n        a = a + 2\n    end\n    \n    return evens\nend\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10,\
    \ 14)\n</cell>\n<text>\nExercise\nWrite a function that generates integers between\
    \ 1 and 100 (both inclusive), inclusive.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsmnccfr0.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsmnccfr0.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8v8jxrz5.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp8v8jxrz5.jl:14 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmp8v8jxrz5.jl:23\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp8v8jxrz5.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmp8v8jxrz5.jl:24\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp8v8jxrz5.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmp8v8jxrz5.jl:25\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmp8v8jxrz5.jl:14 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8v8jxrz5.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkfz2l61_.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpkfz2l61_.jl:14 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmpkfz2l61_.jl:23\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpkfz2l61_.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpkfz2l61_.jl:24\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpkfz2l61_.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpkfz2l61_.jl:25\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmpkfz2l61_.jl:14 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkfz2l61_.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\n    \nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpeuon7088.jl:24\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpeuon7088.jl:15 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmpeuon7088.jl:25\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpeuon7088.jl:15\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpeuon7088.jl:26\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpeuon7088.jl:15\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpeuon7088.jl:27\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmpeuon7088.jl:15 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeuon7088.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    \n    evens = Vector{Int64}()\n\
    \    \n    while a <= b\n        push!(evens, a)\n        a += 2\n    end\n  \
    \  \n    return evens\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n<text>\nExercise: Generate\
    \ a list of all integers between 1 and 100 that are divisible by 3\nusing Test\n\
    \n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpakbas6xi.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpakbas6xi.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<text>\nExercise\nWrite a function that generates\
    \ all the integers between two given integers, inclusive.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp31d1o1om.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp31d1o1om.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpz0o3qhvw.jl:23\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpz0o3qhvw.jl:15 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmpz0o3qhvw.jl:24\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpz0o3qhvw.jl:15\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpz0o3qhvw.jl:25\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpz0o3qhvw.jl:15\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpz0o3qhvw.jl:26\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmpz0o3qhvw.jl:15 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz0o3qhvw.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        Vector{Int64}(undef,\
    \ a-b+1)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that generates\
    \ all the integers between 1 and a given number n, inclusive.\nusing Test\n\n\
    @testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpe0av7udl.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpe0av7udl.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if b < a \n        generate_integers(b, a)\n    else\n        Vector{Int64}(undef,\
    \ a-b+1)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3tqu3lw3.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  ArgumentError: invalid Array\
    \ dimensions\n  Stacktrace:\n   [1] Array at ./boot.jl:405 [inlined]\n   [2] generate_integers(::Int64,\
    \ ::Int64) at /tmp/tmp3tqu3lw3.jl:14\n   [3] top-level scope at /tmp/tmp3tqu3lw3.jl:22\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp3tqu3lw3.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmp3tqu3lw3.jl:23\n  Test threw exception\n  Expression: candidate(10,\
    \ 2) == [2, 4, 6, 8]\n  ArgumentError: invalid Array dimensions\n  Stacktrace:\n\
    \   [1] Array at ./boot.jl:405 [inlined]\n   [2] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmp3tqu3lw3.jl:14\n   [3] generate_integers(::Int64, ::Int64) at /tmp/tmp3tqu3lw3.jl:12\n\
    \   [4] top-level scope at /tmp/tmp3tqu3lw3.jl:23\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp3tqu3lw3.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmp3tqu3lw3.jl:24\n  Test threw exception\n  Expression: candidate(132,\
    \ 2) == [2, 4, 6, 8]\n  ArgumentError: invalid Array dimensions\n  Stacktrace:\n\
    \   [1] Array at ./boot.jl:405 [inlined]\n   [2] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmp3tqu3lw3.jl:14\n   [3] generate_integers(::Int64, ::Int64) at /tmp/tmp3tqu3lw3.jl:12\n\
    \   [4] top-level scope at /tmp/tmp3tqu3lw3.jl:24\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp3tqu3lw3.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmp3tqu3lw3.jl:25\n  Test threw exception\n  Expression: candidate(17,\
    \ 89) == Vector{Int64}([])\n  ArgumentError: invalid Array dimensions\n  Stacktrace:\n\
    \   [1] Array at ./boot.jl:405 [inlined]\n   [2] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmp3tqu3lw3.jl:14\n   [3] top-level scope at /tmp/tmp3tqu3lw3.jl:25\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp3tqu3lw3.jl:21\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3tqu3lw3.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphyyux33v.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmphyyux33v.jl:14 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmphyyux33v.jl:23\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmphyyux33v.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmphyyux33v.jl:24\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmphyyux33v.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmphyyux33v.jl:25\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmphyyux33v.jl:14 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphyyux33v.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ positive integer $n$ and returns the number of digits in $n$. For example, generate_integers(10,\
    \ 14) => 2.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t\
    @test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6,\
    \ 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyiuqdp4c.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyiuqdp4c.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < 0 || b < 0\n        error(\"a and b must be positive\")\n    end\n\
    \    \n    if a == 0 || b == 0\n        return []\n    end\n    \n    evens =\
    \ generate_integers(a - 1, b - 1)\n    \n    if a > b\n        evens = evens[end]\
    \ + 1\n    end\n    \n    evens\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n<text>\nProblem 3\n\
    Write a function is_palindrome(number::Int64) which returns true if the given\
    \ number is a palindrome and false otherwise.\nusing Test\n\n@testset begin\n\n\
    candidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t\
    @test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6,\
    \ 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwuc5m4ul.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwuc5m4ul.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b \n        generate_integers(b, a) \n    else \n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2, 8)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(10, 14)\n</cell>\n<text>\nExercise\nWrite a function that generates\
    \ integers between 1 and 100 (both inclusive) that are divisible by 7 and divisible\
    \ by 11. Then, write a function that generates integers between 1 and 100 (both\
    \ inclusive) that are divisible by both 7 and 11. Then, write a function that\
    \ generates integers between 1 and 100 (both inclusive) that are divisible by\
    \ either 7 or 11. Then, write a function that generates integers between 1 and\
    \ 100 (both inclusive) that are divisible by both 7 and 11. Then, write a function\
    \ that generates integers between 1 and 100 (both inclusive) that are divisible\
    \ by either 7 or 11.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq9496x6c.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq9496x6c.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < 0 || b < 0 || a > b || b > Int64(Int64(Int64(a) + Int64(b))) \n\
    \        error(\"generate_integers: invalid inputs\")\n    end\n    \n    evens\
    \ = Vector{Int64}()\n    \n    while a <= b\n        push!(evens, a)\n       \
    \ a = a + Int64(Int64(a) + 1)\n    end\n    \n    evens\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nProblem 7: Generate all integers between 1 and 100 (both included) that\
    \ are divisible by 7 and divisible by 11\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5fi92o64.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5fi92o64.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if b < a \n        error(\"generate_integers: b < a\")\n    end\n    \n\
    \    evens = Vector{Int64}()\n    \n    while a <= b\n        evens.append(a)\n\
    \        a += 2\n    end\n    \n    evens\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nExercise: Generate all integers between 1 and 100 that are divisible by\
    \ 3\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmxiv4y3n.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmxiv4y3n.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    evens = Vector{Int64}()\n    \n    if a < b\n        generate_integers(b,\
    \ a)\n    else\n        generate_integers(a, b)\n    end\n    \n    if a < b\n\
    \        evens = evens.+(a:b).-(a:b)\n    else\n        evens = evens.+(a:b).-(a:b)\n\
    \    end\n    \n    return evens\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpu434pma0.jl:33\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] Array at ./boot.jl:405 [inlined]\n   [2] Array at ./boot.jl:424 [inlined]\n\
    \   [3] generate_integers(::Int64, ::Int64) at /tmp/tmpu434pma0.jl:12\n   [4]\
    \ generate_integers(::Int64, ::Int64) at /tmp/tmpu434pma0.jl:17 (repeats 37387\
    \ times)\n   [5] generate_integers(::Int64, ::Int64) at /tmp/tmpu434pma0.jl:15\n\
    \   [6] top-level scope at /tmp/tmpu434pma0.jl:33\n   [7] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [8] top-level scope at /tmp/tmpu434pma0.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpu434pma0.jl:34\n  Test threw exception\n  Expression: candidate(10,\
    \ 2) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n   [1] Array at ./boot.jl:405\
    \ [inlined]\n   [2] Array at ./boot.jl:424 [inlined]\n   [3] generate_integers(::Int64,\
    \ ::Int64) at /tmp/tmpu434pma0.jl:12\n   [4] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmpu434pma0.jl:17 (repeats 37388 times)\n   [5] top-level scope at /tmp/tmpu434pma0.jl:34\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpu434pma0.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpu434pma0.jl:35\n  Test threw exception\n  Expression: candidate(132,\
    \ 2) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n   [1] Array at ./boot.jl:405\
    \ [inlined]\n   [2] Array at ./boot.jl:424 [inlined]\n   [3] generate_integers(::Int64,\
    \ ::Int64) at /tmp/tmpu434pma0.jl:12\n   [4] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmpu434pma0.jl:17 (repeats 37388 times)\n   [5] top-level scope at /tmp/tmpu434pma0.jl:35\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpu434pma0.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpu434pma0.jl:36\n  Test threw exception\n  Expression: candidate(17,\
    \ 89) == Vector{Int64}([])\n  StackOverflowError:\n  Stacktrace:\n   [1] Array\
    \ at ./boot.jl:405 [inlined]\n   [2] Array at ./boot.jl:424 [inlined]\n   [3]\
    \ generate_integers(::Int64, ::Int64) at /tmp/tmpu434pma0.jl:12\n   [4] generate_integers(::Int64,\
    \ ::Int64) at /tmp/tmpu434pma0.jl:17 (repeats 37387 times)\n   [5] generate_integers(::Int64,\
    \ ::Int64) at /tmp/tmpu434pma0.jl:15\n   [6] top-level scope at /tmp/tmpu434pma0.jl:36\n\
    \   [7] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [8] top-level scope at /tmp/tmpu434pma0.jl:32\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu434pma0.jl:30\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        generate_integers(b, a)\n    else\n        Vector{Int64}((a\
    \ % b) + 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n<text>\nExercise 2\n\
    Write a function that generates all the integers between 1 and 100 (both included)\
    \ that are divisible by 3\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz2o_la65.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpz2o_la65.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2, 8)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(10, 14)\n</cell>\n<text>\nExercise: Write a function that generates\
    \ integers up to a number n that are\n    divisible by k. For example, generate_integers(10,\
    \ 3, 2) should return [10, 12, 14].\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8ichkgf9.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8ichkgf9.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    evens = Vector{Int64}()\n    \n    while a <= b\n        evens.append(a)\n\
    \        a += 2\n    end\n    \n    return evens\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nExercise\nWrite a function that generates integers up to a specified maximum,\
    \ inclusive.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps4xjnzbb.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmps4xjnzbb.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    even_integers = Vector{Int64}()\n    \n    i = a\n    while i <=\
    \ b\n        if i%2 == 0\n            even_integers = even_integers + [i]\n  \
    \      end\n        i = i + 1\n    end\n    \n    return even_integers\nend\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10,\
    \ 14)\n</cell>\n<text>\nProblem 4\nWrite a function that returns the number of\
    \ digits in an integer.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpspansdus.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpspansdus.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\n    \nend\n</cell>\n<text>\nProblem 4\nWrite a function that takes\
    \ in two positive integers a and b, and returns the number of digits in each of\
    \ their decimal representations.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn22ocwxb.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpn22ocwxb.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < 0 || b < 0 \n        error(\"a and b must be positive\")\n    end\n\
    \    \n    evens = Vector{Int64}()\n    \n    if b == 0 \n        return evens\n\
    \    end\n    \n    if a < b \n        a, b = b, a\n    end\n    \n    digits\
    \ = Int64[]\n    \n    while a > 0 \n        push!(digits, a%10)\n        a =\
    \ a/10\n    end\n    \n    while b > 0 \n        push!(digits, b%10)\n       \
    \ b = b/10\n    end\n    \n    push!(evens, digits...)\n    \n    return evens\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes an integer $n$ and\
    \ returns the number of digits in $n$. \nFor example, \n$$ n = 12345 $$\n$$ n\
    \ = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345\
    \ $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n\
    \ = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345\
    \ $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n\
    \ = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345\
    \ $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n\
    \ = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345\
    \ $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n\
    \ = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345\
    \ $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n\
    \ = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$\nusing Test\n\
    \n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2dd86e19.jl:41\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2dd86e19.jl:41\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if b < a \n        generate_integers(b, a)\n    else\n        generate_integers(b,\
    \ a+1)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplwz5dx27.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmplwz5dx27.jl:14 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmplwz5dx27.jl:23\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmplwz5dx27.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmplwz5dx27.jl:24\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmplwz5dx27.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmplwz5dx27.jl:25\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmplwz5dx27.jl:14 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplwz5dx27.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < 0 || b < 0\n        error(\"a or b must be positive\")\n    end\n\
    \    \n    if a == 0 || b == 0\n        return Vector{Int64}()\n    end\n    \n\
    \    evens = generate_integers(a - 1, b - 1)\n    evens = evens[2:end] + evens[2:end]\n\
    \    \n    evens = evens[a:b]\n    \n    return evens\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nProblem 3\nWrite a function called generate_primes(a::Int64, b::Int64)\
    \ that takes in two positive integers a and b and returns a vector containing\
    \ the prime numbers between a and b (inclusive).\nusing Test\n\n@testset begin\n\
    \ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t\
    @test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6,\
    \ 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkin60got.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkin60got.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<text>\nProblem 3\nWrite a function that generates\
    \ the integers between 1 and a given number n inclusive.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkq3kjngs.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkq3kjngs.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that generates\
    \ the integers between 1 and a given number n, inclusive.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbvn522n6.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbvn522n6.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    \n    evens = Vector{Int64}()\n\
    \    \n    while a <= b\n        push!(evens, a)\n        a += 2\n    end\n  \
    \  \n    evens\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n<text>\nExercise\n\
    Write a function that generates integers between 1 and 100 (both inclusive) that\
    \ are divisible by 3 and 5.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplhm1sjer.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplhm1sjer.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if b < a \n        error(\"generate_integers: b must be greater than a\"\
    )\n    end\n    \n    evens = Vector{Int64}()\n    \n    while a <= b\n      \
    \  evens.append(a)\n        a += 1\n    end\n    \n    return evens\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that generates integers within a given range.\
    \ Your function should take two parameters: the first is the minimum value and\
    \ the second is the maximum value. Your function should return a list of integers\
    \ within the given range.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplb4kqdcf.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplb4kqdcf.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpoqfwpp_1.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpoqfwpp_1.jl:14 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmpoqfwpp_1.jl:23\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpoqfwpp_1.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpoqfwpp_1.jl:24\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpoqfwpp_1.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpoqfwpp_1.jl:25\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmpoqfwpp_1.jl:14 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoqfwpp_1.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b \n        generate_integers(b, a)\n    else if a == b\n     \
    \   Vector{Int64}[]\n    else\n        Vector{Int64}[a % b + 1]\n    end\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp339wt7d7.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp339wt7d7.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    generate_integers(0, b)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpstqnmcpg.jl:18\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpstqnmcpg.jl:11 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmpstqnmcpg.jl:19\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpstqnmcpg.jl:11\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpstqnmcpg.jl:20\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpstqnmcpg.jl:11\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpstqnmcpg.jl:21\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmpstqnmcpg.jl:11 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpstqnmcpg.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    \n    evens = Vector{Int64}()\n\
    \    \n    while a <= b\n        if a % 2 == 0\n            evens.push(a)\n  \
    \      end\n        a = a + 1\n    end\n    \n    return evens\nend\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10,\
    \ 14)\n</cell>\n<text>\nProblem 4\nWrite a function that takes in two positive\
    \ integers a and b, and returns the number of integers between a and b that are\
    \ divisible by 3.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsxwb819d.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsxwb819d.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that generates\
    \ all the integers between two given integers, inclusive.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1e8aw5vc.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1e8aw5vc.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    generate_integers(a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptjhbda59.jl:18\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmptjhbda59.jl:11 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmptjhbda59.jl:19\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmptjhbda59.jl:11\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmptjhbda59.jl:20\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmptjhbda59.jl:11\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmptjhbda59.jl:21\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmptjhbda59.jl:11 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptjhbda59.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    evens = Vector{Int64}()\n    \n    if a < b\n        generate_integers(b,\
    \ a)\n    else\n        generate_integers(a, b)\n    end\n    \n    for n in 1:(b\
    \ - a+1)\n        evens.push(n)\n    end\n    \n    evens\nend\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10,\
    \ 14)\n</cell>\n<text>\nProblem 3\nWrite a function that returns the number of\
    \ integers between a and b inclusive that satisfy the equation $n^2 + n$ is odd.\n\
    using Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjb4ml6x2.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjb4ml6x2.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    evens = Vector{Int64}()\n    \n    for i = a:b\n        if i%2 ==\
    \ 0\n            push!(evens, i)\n        end\n    end\n    \n    return evens\n\
    end\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(10, 14)\n</cell>\n<text>\nProblem 3\nWrite a function that takes\
    \ in a list of integers and returns the number of even numbers within that list.\n\
    using Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp52lxx3nl.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp52lxx3nl.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    even_integers = Vector{Int64}()\n    \n    while(a <= b)\n     \
    \   even_integers = even_integers + [a]\n        a = a + 2\n    end\n    \n  \
    \  return even_integers\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n<text>\nProblem 3\n\
    Write a function that returns the number of integers between 1 and a given number\
    \ n that have no factors of n.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdr63gq2b.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdr63gq2b.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    evens = Vector{Int64}()\n    \n    while a < b\n        evens.append(a)\n\
    \        a += 1\n    end\n    \n    return evens\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nExercise\nWrite a function that generates integers between 1 and 100,\
    \ and returns the even digits between 1 and 100.\nusing Test\n\n@testset begin\n\
    \ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t\
    @test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6,\
    \ 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn_l7cyca.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpn_l7cyca.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if b < a \n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9107c7c2.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp9107c7c2.jl:14 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmp9107c7c2.jl:23\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp9107c7c2.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmp9107c7c2.jl:24\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp9107c7c2.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmp9107c7c2.jl:25\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmp9107c7c2.jl:14 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9107c7c2.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpy8luzdp2.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpy8luzdp2.jl:14 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmpy8luzdp2.jl:23\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpy8luzdp2.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpy8luzdp2.jl:24\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpy8luzdp2.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpy8luzdp2.jl:25\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmpy8luzdp2.jl:14 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy8luzdp2.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<code language=julia-1.3>\ngenerate_integers(2, 8)\n\
    </cell>\n<code language=julia-1.3>\ngenerate_integers(8, 2)\n</cell>\n<code language=julia-1.3>\n\
    generate_integers(10, 14)\n</cell>\n<text>\nExercise\nWrite a function that generates\
    \ integers between 1 and 100 (both inclusive) that are divisible by 7 and divisible\
    \ by 3.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps73bhsx4.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmps73bhsx4.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < 0 || b < 0\n        error(\"a or b must be positive\")\n    end\n\
    \    if a > b\n        error(\"a must be less than b\")\n    end\n    \n    evens\
    \ = Vector{Int64}()\n    \n    while a <= b\n        if a % 2 == 0\n         \
    \   evens.push(a)\n        end\n        a = a + 1\n    end\n    \n    return evens\n\
    end\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(10, 14)\n</cell>\n<text>\nProblem 4\nWrite a function called\
    \ generate_primes(a::Int64, b::Int64) that generates all the prime numbers between\
    \ a and b (inclusive).\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwrov0lh5.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwrov0lh5.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpggcos_3k.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpggcos_3k.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpggcos_3k.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < 0 || b < 0\n        error(\"a and b must be positive\")\n    end\n\
    \    \n    evens = Vector{Int64}()\n    \n    while a <= b\n        if a % 2 ==\
    \ 0\n            evens.push(a)\n        end\n        a += 1\n    end\n    \n \
    \   return evens\nend\n</cell>\n<text>\nExercise 2\nWrite a function that generates\
    \ the integers between a and b inclusive, inclusive, without duplicates.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp367ubei6.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp367ubei6.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < 0 || b < 0\n        error(\"a and b must be non-negative\")\n \
    \   end\n    \n    if a > b\n        (a, b) = (b, a)\n    end\n    \n    evens\
    \ = Vector{Int64}()\n    \n    while a <= b\n        if a % 2 == 0\n         \
    \   evens.push(a)\n        end\n        a += 1\n    end\n    \n    evens\nend\n\
    </cell>\n<text>\nProblem 3\nWrite a function that returns the number of integers\
    \ between two given integers inclusively.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3lmti5pf.jl:30\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3lmti5pf.jl:30\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes in\
    \ two positive integers a and b and returns the number of integers between a and\
    \ b (inclusive) that contain an even digit.\nusing Test\n\n@testset begin\n\n\
    candidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t\
    @test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6,\
    \ 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg6k1gh6t.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg6k1gh6t.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpp4ppnbqd.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpp4ppnbqd.jl:14 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmpp4ppnbqd.jl:23\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpp4ppnbqd.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpp4ppnbqd.jl:24\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpp4ppnbqd.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpp4ppnbqd.jl:25\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmpp4ppnbqd.jl:14 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp4ppnbqd.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that generates\
    \ all the integers between two given integers, inclusive.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps91y8xwh.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmps91y8xwh.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of all even integers between two given integers. For example:\nusing\
    \ Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpewkrbmp7.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpewkrbmp7.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpphxcaait.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpphxcaait.jl:14 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmpphxcaait.jl:23\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpphxcaait.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpphxcaait.jl:24\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpphxcaait.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpphxcaait.jl:25\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmpphxcaait.jl:14 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpphxcaait.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\n    \nend\n</cell>\n<text>\nExercise 3\nWrite a function that generates\
    \ all the integers between two given integers, inclusive.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzy1p1m9x.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzy1p1m9x.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    evens = Vector{Int64}()\n    \n    if a < b\n        generate_integers(b,\
    \ a)\n    else\n        generate_integers(a, b)\n    end\n    \n    if a < b\n\
    \        evens = evens.+(a-b)\n    end\n    \n    return evens\nend\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10,\
    \ 14)\n</cell>\n<text>\nProblem 7\nWrite a function that generates all the integers\
    \ between 1 and a given number n that have no duplicates.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3dpw_lty.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3dpw_lty.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < 0 || b < 0\n        error(\"a and b must be positive\")\n    end\n\
    \    \n    if b > a\n        error(\"b must be greater than a\")\n    end\n  \
    \  \n    evens = Vector{Int64}()\n    \n    while a <= b\n        evens.append(a)\n\
    \        a = a + 2\n    end\n    \n    return evens\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that generates all the integers between two given integers,\
    \ inclusive.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp9xrlief.jl:28\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpp9xrlief.jl:28\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    evens = Vector{Int64}()\n    \n    if a < b\n        generate_integers(b,\
    \ a)\n    elseif b < a\n        generate_integers(a, b)\n    else\n        evens\
    \ = [a]\n        generate_integers(b+1, a)\n    end\n    \n    return evens\n\
    end\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(10, 14)\n</cell>\n<text>\nProblem 3\nWrite a function called\
    \ count_digits(n) that returns the number of digits in n.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3az7f_1w.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3az7f_1w.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes in\
    \ two positive integers a and b and returns the number of digits in each of their\
    \ decimal representations.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpeqh8rdwe.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpeqh8rdwe.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    even_integers = Vector{Int64}()\n    \n    for x in a:a:b\n    \
    \    if x % 2 == 0\n            even_integers = even_integers + [x]\n        end\n\
    \    end\n    \n    return even_integers\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes in two positive integers a and b, and returns the sum\
    \ of all even integers between a and b. For example, generate_integers(2, 8) =>\
    \ [2, 4, 6, 8], and generate_integers(8, 2) => [2, 4, 6, 8].\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsbjyva5_.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsbjyva5_.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8a8o2y8a.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp8a8o2y8a.jl:14 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmp8a8o2y8a.jl:23\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp8a8o2y8a.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmp8a8o2y8a.jl:24\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp8a8o2y8a.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmp8a8o2y8a.jl:25\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmp8a8o2y8a.jl:14 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8a8o2y8a.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b \n        a, b = b, a\n    end\n    \n    digits = Vector{Int64}()\n\
    \    \n    while a <= b\n        push!(digits, a)\n        \n        a, b = b,\
    \ (a + b) / 2\n    end\n    \n    digits\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nProblem 7\nWrite a function that returns the number of integers between\
    \ two given integers, inclusive.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb1k3q862.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpb1k3q862.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < 0 || b < 0\n        error(\"generate_integers: a and b must be\
    \ positive\")\n    end\n    if a > b\n        error(\"generate_integers: a must\
    \ be less than b\")\n    end\n    \n    evens = Vector{Int64}()\n    \n    while\
    \ a <= b\n        push!(evens, a)\n        \n        a = a + 2\n    end\n    \n\
    \    return evens\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9_pwa4_8.jl:33\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9_pwa4_8.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9_pwa4_8.jl:32\ntest set: Error During Test at\
    \ /tmp/tmp9_pwa4_8.jl:34\n  Test threw exception\n  Expression: candidate(10,\
    \ 2) == [2, 4, 6, 8]\n  generate_integers: a must be less than b\n  Stacktrace:\n\
    \   [1] error(::String) at ./error.jl:33\n   [2] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmp9_pwa4_8.jl:15\n   [3] top-level scope at /tmp/tmp9_pwa4_8.jl:34\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp9_pwa4_8.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmp9_pwa4_8.jl:35\n  Test threw exception\n  Expression: candidate(132,\
    \ 2) == [2, 4, 6, 8]\n  generate_integers: a must be less than b\n  Stacktrace:\n\
    \   [1] error(::String) at ./error.jl:33\n   [2] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmp9_pwa4_8.jl:15\n   [3] top-level scope at /tmp/tmp9_pwa4_8.jl:35\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp9_pwa4_8.jl:32\n  \ntest set: Test Failed at\
    \ /tmp/tmp9_pwa4_8.jl:36\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [17, 19, 21, 23, 25, 27, 29, 31, 33, 35  \u2026  71, 73, 75, 77,\
    \ 79, 81, 83, 85, 87, 89] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmp9_pwa4_8.jl:36\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9_pwa4_8.jl:32\nTest Summary: | Fail  Error \
    \ Total\ntest set      |    2      2      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9_pwa4_8.jl:30\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < 0 || b < 0 || a > b || b > a || b - a < 2 \n        error(\"Invalid\
    \ input\")\n    end\n    \n    evens = Vector{Int64}()\n    \n    while a <= b\n\
    \        evens.append(a)\n        a += 2\n    end\n    \n    return evens\nend\n\
    using Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkswact7x.jl:29\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  Invalid input\n  Stacktrace:\n\
    \   [1] error(::String) at ./error.jl:33\n   [2] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmpkswact7x.jl:12\n   [3] top-level scope at /tmp/tmpkswact7x.jl:29\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpkswact7x.jl:28\n  \ntest set: Error During\
    \ Test at /tmp/tmpkswact7x.jl:30\n  Test threw exception\n  Expression: candidate(10,\
    \ 2) == [2, 4, 6, 8]\n  Invalid input\n  Stacktrace:\n   [1] error(::String) at\
    \ ./error.jl:33\n   [2] generate_integers(::Int64, ::Int64) at /tmp/tmpkswact7x.jl:12\n\
    \   [3] top-level scope at /tmp/tmpkswact7x.jl:30\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpkswact7x.jl:28\n  \ntest set: Error During\
    \ Test at /tmp/tmpkswact7x.jl:31\n  Test threw exception\n  Expression: candidate(132,\
    \ 2) == [2, 4, 6, 8]\n  Invalid input\n  Stacktrace:\n   [1] error(::String) at\
    \ ./error.jl:33\n   [2] generate_integers(::Int64, ::Int64) at /tmp/tmpkswact7x.jl:12\n\
    \   [3] top-level scope at /tmp/tmpkswact7x.jl:31\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpkswact7x.jl:28\n  \ntest set: Error During\
    \ Test at /tmp/tmpkswact7x.jl:32\n  Test threw exception\n  Expression: candidate(17,\
    \ 89) == Vector{Int64}([])\n  Invalid input\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] generate_integers(::Int64, ::Int64) at /tmp/tmpkswact7x.jl:12\n\
    \   [3] top-level scope at /tmp/tmpkswact7x.jl:32\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpkswact7x.jl:28\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkswact7x.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    if a > b\n        a, b = b, a\n    end\n    \n    evens = Vector{Int64}()\n\
    \    \n    while a <= b\n        push!(evens, a)\n        \n        a = a + 2\n\
    \    end\n    \n    return evens\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n<text>\nExercise 2\n\
    Write a function that generates all the integers between 1 and 100 (both included)\
    \ that are divisible by 3.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps3u1ig01.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmps3u1ig01.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        Vector{Int64}[a,\
    \ b]\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that generates\
    \ the integers between 0 and $n$, inclusive, where $n$ is provided as an argument.\n\
    using Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl1a8xk09.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpl1a8xk09.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2t80ind2.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp2t80ind2.jl:14 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmp2t80ind2.jl:23\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp2t80ind2.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmp2t80ind2.jl:24\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp2t80ind2.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmp2t80ind2.jl:25\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmp2t80ind2.jl:14 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2t80ind2.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpusqalpk0.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpusqalpk0.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpusqalpk0.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if b < a \n        error(\"generate_integers: b must be greater than a\"\
    )\n    end\n    \n    evens = Vector{Int64}()\n    \n    while a <= b\n      \
    \  push!(evens, a)\n        a += 2\n    end\n    \n    return evens\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a positive integer $n$ and returns\
    \ the number of digits in $n$. For example, given $n = 12$, the function should\
    \ return 3.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t\
    @test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6,\
    \ 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpncjshb1z.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpncjshb1z.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    evens = Vector{Int64}()\n    \n    if a < b\n        generate_integers(b,\
    \ a)\n    end\n    \n    while a <= b\n        evens.append(a)\n        a += 1\n\
    \    end\n    \n    evens\nend\n</cell>\n<code language=julia-1.3>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.3>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.3>\ngenerate_integers(10, 14)\n</cell>\n<text>\nProblem 3\n\
    Write a function that returns the number of integers between two given integers,\
    \ inclusive.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphcyhst1m.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphcyhst1m.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    generate_integers(a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbzdxvx6_.jl:18\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpbzdxvx6_.jl:11 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmpbzdxvx6_.jl:19\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpbzdxvx6_.jl:11\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpbzdxvx6_.jl:20\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpbzdxvx6_.jl:11\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpbzdxvx6_.jl:21\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmpbzdxvx6_.jl:11 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbzdxvx6_.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    evens = Vector{Int64}()\n    \n    if a < b\n        generate_integers(b,\
    \ a)\n    else\n        generate_integers(a, b)\n    end\n    \n    evens = evens.+(a:b).filter(x\
    \ -> x % 2 == 0)\n    \n    return evens\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that generates all the integers between 1\
    \ and 100 (both included) that are divisible by 7 and are also divisible by 3.\n\
    using Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpw6els2td.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpw6els2td.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpipty_emq.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpipty_emq.jl:14 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmpipty_emq.jl:23\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpipty_emq.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpipty_emq.jl:24\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpipty_emq.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpipty_emq.jl:25\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmpipty_emq.jl:14 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpipty_emq.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    evens = Vector{Int64}()\n    \n    if a < b\n        generate_integers(b,\
    \ a)\n    else\n        generate_integers(a, b)\n    end\n    \n    for n in a:(b-1)\n\
    \        push!(evens, n)\n    end\n    \n    return evens\nend\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10,\
    \ 14)\n</cell>\n<text>\nProblem 3\nWrite a function called generate_primes(n)\
    \ that takes an integer n and returns a vector containing all the prime numbers\
    \ less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyhj1tnq8.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyhj1tnq8.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    generate_integers(a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpd6_wswdr.jl:18\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpd6_wswdr.jl:11 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmpd6_wswdr.jl:19\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpd6_wswdr.jl:11\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpd6_wswdr.jl:20\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpd6_wswdr.jl:11\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpd6_wswdr.jl:21\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmpd6_wswdr.jl:11 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd6_wswdr.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if b < a \n        generate_integers(b, a)\n    else\n        Vector{Int64}(undef,\
    \ a)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that generates\
    \ all the integers between 1 and a given number $n$, inclusive.\nusing Test\n\n\
    @testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1v24s2r1.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1v24s2r1.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    generate_integers(a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzi5k5ftu.jl:18\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpzi5k5ftu.jl:11 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmpzi5k5ftu.jl:19\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpzi5k5ftu.jl:11\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpzi5k5ftu.jl:20\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpzi5k5ftu.jl:11\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpzi5k5ftu.jl:21\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmpzi5k5ftu.jl:11 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzi5k5ftu.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    evens = Vector{Int64}()\n    \n    if a < b\n        generate_integers(b,\
    \ a)\n    else\n        generate_integers(a, b)\n    end\n    \n    for n in a:(b-1)\n\
    \        if n % 2 == 0\n            evens.push(n)\n        end\n    end\n    \n\
    \    return evens\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n<text>\nProblem 7\n\
    Write a function that generates all the prime numbers up to a given number.\n\
    using Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpptkfw0ks.jl:28\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpptkfw0ks.jl:28\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnishzty5.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpnishzty5.jl:14 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmpnishzty5.jl:23\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpnishzty5.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpnishzty5.jl:24\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpnishzty5.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpnishzty5.jl:25\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmpnishzty5.jl:14 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnishzty5.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b \n        generate_integers(b, a)\n    else\n        Vector{Int64}(undef,\
    \ (b - a) / 2 + 1)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes in two positive integers a and b, and returns the sum of all even\
    \ digits in a and b. For example, generate_integers(2, 8) => [2, 4, 6, 8], and\
    \ generate_integers(8, 2) => [2, 4, 6, 8].\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfra8kris.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfra8kris.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if b < a \n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgsmvpd3r.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpgsmvpd3r.jl:14 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmpgsmvpd3r.jl:23\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpgsmvpd3r.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpgsmvpd3r.jl:24\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpgsmvpd3r.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpgsmvpd3r.jl:25\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmpgsmvpd3r.jl:14 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgsmvpd3r.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7o5z4kx8.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp7o5z4kx8.jl:14 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmp7o5z4kx8.jl:23\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp7o5z4kx8.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmp7o5z4kx8.jl:24\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp7o5z4kx8.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmp7o5z4kx8.jl:25\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmp7o5z4kx8.jl:14 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7o5z4kx8.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        Vector{Int64}((a\
    \ % b) + 1)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes in two positive integers a and b, and returns the number of digits in\
    \ each of their decimal representations.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpko5nife7.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpko5nife7.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if b < a \n        error(\"generate_integers: b < a\")\n    end\n    \n\
    \    evens = Vector{Int64}()\n    \n    while a <= b\n        push!(evens, a)\n\
    \        a += 2\n    end\n    \n    return evens\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf55owmdo.jl:29\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf55owmdo.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpf55owmdo.jl:28\ntest set: Error During Test at\
    \ /tmp/tmpf55owmdo.jl:30\n  Test threw exception\n  Expression: candidate(10,\
    \ 2) == [2, 4, 6, 8]\n  generate_integers: b < a\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] generate_integers(::Int64, ::Int64) at /tmp/tmpf55owmdo.jl:12\n\
    \   [3] top-level scope at /tmp/tmpf55owmdo.jl:30\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpf55owmdo.jl:28\n  \ntest set: Error During\
    \ Test at /tmp/tmpf55owmdo.jl:31\n  Test threw exception\n  Expression: candidate(132,\
    \ 2) == [2, 4, 6, 8]\n  generate_integers: b < a\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] generate_integers(::Int64, ::Int64) at /tmp/tmpf55owmdo.jl:12\n\
    \   [3] top-level scope at /tmp/tmpf55owmdo.jl:31\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpf55owmdo.jl:28\n  \ntest set: Test Failed at\
    \ /tmp/tmpf55owmdo.jl:32\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [17, 19, 21, 23, 25, 27, 29, 31, 33, 35  \u2026  71, 73, 75, 77,\
    \ 79, 81, 83, 85, 87, 89] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpf55owmdo.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpf55owmdo.jl:28\nTest Summary: | Fail  Error \
    \ Total\ntest set      |    2      2      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf55owmdo.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of integers between a and b (inclusive) that are divisible by c.\n\
    using Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqr3mrehl.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqr3mrehl.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < 0 || b < 0\n        error(\"a or b must be positive\")\n    end\n\
    \    if a == 0 || b == 0\n        return []\n    end\n    \n    digits = Vector{Int64}()\n\
    \    \n    while a > 0 || b > 0\n        if a > 0 && b == 0\n            digits\
    \ = [digits..., a]\n            a -= 1\n        elseif b > 0 && a == 0\n     \
    \       digits = [digits..., b]\n            b -= 1\n        else\n          \
    \  digits = [digits..., a, b]\n            a -= 1\n            b -= 1\n      \
    \  end\n    end\n    \n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nProblem 3\nWrite a function that returns the number of positive integers\
    \ less than or equal to a given integer n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph7vsra87.jl:36\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmph7vsra87.jl:36\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < 0 || b < 0\n        error(\"generate_integers: a and b must be\
    \ non-negative\")\n    end\n    if a > b\n        error(\"generate_integers: a\
    \ and b must be less than or equal to each other\")\n    end\n    \n    evens\
    \ = Vector{Int64}()\n    \n    while a <= b\n        if a % 2 == 0\n         \
    \   evens.push(a)\n        end\n        a = a + 1\n    end\n    \n    return evens\n\
    end\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(10, 14)\n</cell>\n<text>\nProblem 3\nWrite a function called\
    \ generate_primes(a::Int64, b::Int64) that generates all the prime numbers between\
    \ a and b (inclusive).\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcyuv4r_f.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcyuv4r_f.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b \n        generate_integers(b, a)\n    else\n        Vector{Int64}((a\
    \ % b) + 1)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes in two positive integers a and b and returns True if a is divisible by\
    \ b, and False otherwise. Test it on $a$ and $b$ that are both greater than 0.\n\
    using Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8xcarbq7.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8xcarbq7.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    even_integers = Vector{Int64}()\n    \n    if a < b\n        generate_integers(b,\
    \ a)\n    else\n        generate_integers(a, b)\n    end\n    \n    \n    for\
    \ n in 1:b\n        if n % 2 == 0\n            even_integers = even_integers +\
    \ (n-1)\n        end\n    end\n    \n    return even_integers\nend\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10,\
    \ 14)\n</cell>\n<text>\nProblem 3\nWrite a function that returns the number of\
    \ integers between 1 and a given integer n that have no leading zeros.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgw7iyycj.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgw7iyycj.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if b < a \n        error(\"generate_integers: b < a\")\n    end\n    \n\
    \    evens = Vector{Int64}()\n    \n    while a <= b\n        evens.append(a)\n\
    \        a += 2\n    end\n    \n    return evens\nend\n</cell>\n<code language=julia-1.4>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.4>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.4>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that generates integers up to a specified\
    \ upper bound, inclusive.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp109bym9o.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp109bym9o.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    generate_integers(a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8c3r7ntv.jl:18\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp8c3r7ntv.jl:11 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmp8c3r7ntv.jl:19\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp8c3r7ntv.jl:11\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmp8c3r7ntv.jl:20\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp8c3r7ntv.jl:11\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmp8c3r7ntv.jl:21\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmp8c3r7ntv.jl:11 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8c3r7ntv.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5hbzq36t.jl:23\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp5hbzq36t.jl:15 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmp5hbzq36t.jl:24\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp5hbzq36t.jl:15\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmp5hbzq36t.jl:25\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp5hbzq36t.jl:15\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmp5hbzq36t.jl:26\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmp5hbzq36t.jl:15 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5hbzq36t.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpuhe5fet2.jl:23\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpuhe5fet2.jl:15 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmpuhe5fet2.jl:24\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpuhe5fet2.jl:15\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpuhe5fet2.jl:25\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpuhe5fet2.jl:15\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpuhe5fet2.jl:26\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmpuhe5fet2.jl:15 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuhe5fet2.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b \n        generate_integers(b, a)\n    else\n        Vector{Int64}[a,\
    \ b]\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes an\
    \ integer $n$ and returns the number of digits in $n$. For example, generate_integers(10,\
    \ 14) returns 3.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph3f633o_.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmph3f633o_.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    if b < a \n        return Vector{Int64}()\n    end\n    \n    evens\
    \ = generate_integers(b, a+1)\n    \n    evens = evens[2:end-1] + evens[2:end]\n\
    \    \n    evens = evens[2:end-1] + evens[2:end]\n    \n    evens = evens[2:end-1]\
    \ + evens[2:end]\n    \n    evens = evens[2:end-1] + evens[2:end]\n    \n    evens\
    \ = evens[2:end-1] + evens[2:end]\n    \n    evens = evens[2:end-1] + evens[2:end]\n\
    \    \n    evens = evens[2:end-1] + evens[2:end]\n    \n    evens = evens[2:end-1]\
    \ + evens[2:end]\n    \n    evens = evens[2:end-1] + evens[2:end]\n    \n    evens\
    \ = evens[2:end-1] + evens[2:end]\n    \n    evens = evens[2:end-1] + evens[2:end]\n\
    \    \n    evens = evens[2:end-1] + evens[2:end]\n    \n    evens = evens[2:end-1]\
    \ + evens[2:end]\n    \n    evens = evens[2:end-1] + evens[2:end]\n    \n    evens\
    \ = evens[2:end-1] + evens[2:end]\n    \n    evens = evens[2:end-1] + evens[2:end]\n\
    \    \n    evens = evens[2:end-1] + evens[2:end]\n    \n    evens = evens[2:end-1]\
    \ + evens[2:end]\n    \n    evens = evens[2:end-1] + evens[2:end]\n    \n    evens\
    \ = evens[2:end-1] + evens[2:end]\n    \n    evens = evens[2:end-1] + evens[2:end]\n\
    \    \n    evens = evens[2:end-1] + evens[2:end]\n    \n    evens = evens[2:end-1]\
    \ + evens[2:end]\n    \n    evens = evens[2:end-1] + evens[2:end]\n    \n    evens\
    \ = evens[2:end-1] + evens[2:end]\n    \n    evens = evens[2:end-1] + evens[2:end]\n\
    \    \n    evens = evens[2:end-1] + evens[2:end]\n    \n    evens = evens[2:end-1]\
    \ + evens[2:end]\n    \n    evens = evens[2:end-1] + evens[2:end]\n    \n    evens\
    \ = evens[2:end-1] + evens[2:end]\n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmb8a8qx6.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpmb8a8qx6.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpmb8a8qx6.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of digits in an integer.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprvnrcp9r.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprvnrcp9r.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if b < a \n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyst3fjhc.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpyst3fjhc.jl:14 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmpyst3fjhc.jl:23\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpyst3fjhc.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpyst3fjhc.jl:24\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpyst3fjhc.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpyst3fjhc.jl:25\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmpyst3fjhc.jl:14 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyst3fjhc.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b \n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp51sekvbv.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp51sekvbv.jl:14 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmp51sekvbv.jl:23\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp51sekvbv.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmp51sekvbv.jl:24\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp51sekvbv.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmp51sekvbv.jl:25\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmp51sekvbv.jl:14 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp51sekvbv.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpy89jcsep.jl:23\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpy89jcsep.jl:15 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmpy89jcsep.jl:24\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpy89jcsep.jl:15\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpy89jcsep.jl:25\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpy89jcsep.jl:15\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpy89jcsep.jl:26\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmpy89jcsep.jl:15 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy89jcsep.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if b < a \n        error(\"generate_integers: b < a\")\n    end\n    \n\
    \    evens = Vector{Int64}()\n    \n    while a <= b\n        push!(evens, a)\n\
    \        a = a + 2\n    end\n    \n    evens\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nProblem 3\nWrite a function that generates all the integers between 1\
    \ and 100 (both included)\nthat are divisible by 3 and 5.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpucdjvr8t.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpucdjvr8t.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    generate_integers(a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqg8r_2ou.jl:18\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpqg8r_2ou.jl:11 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmpqg8r_2ou.jl:19\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpqg8r_2ou.jl:11\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpqg8r_2ou.jl:20\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpqg8r_2ou.jl:11\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpqg8r_2ou.jl:21\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmpqg8r_2ou.jl:11 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqg8r_2ou.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes in\
    \ two integers a and b, and returns the sum of all the even digits in a and b.\
    \ For example, generate_integers(2, 8) => [2, 4, 6, 8], and generate_integers(8,\
    \ 2) => [2, 4, 6, 8].\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp38k6af4p.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp38k6af4p.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    evens = Vector{Int64}()\n    \n    while a <= b\n        evens.append(a)\n\
    \        a += 1\n    end\n    \n    return evens\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that generates all the integers between 1 and a given number\
    \ n that have no duplicates.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5rr0lnzg.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5rr0lnzg.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        Vector{Int64}[a,\
    \ b]\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwmfwda94.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  MethodError: Cannot `convert`\
    \ an object of type Int64 to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(::Array{Array{Int64,1},1}, ::Int64,\
    \ ::Int64) at ./array.jl:826\n   [2] getindex at ./array.jl:396 [inlined]\n  \
    \ [3] generate_integers(::Int64, ::Int64) at /tmp/tmpwmfwda94.jl:14\n   [4] generate_integers(::Int64,\
    \ ::Int64) at /tmp/tmpwmfwda94.jl:12\n   [5] top-level scope at /tmp/tmpwmfwda94.jl:22\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpwmfwda94.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpwmfwda94.jl:23\n  Test threw exception\n  Expression: candidate(10,\
    \ 2) == [2, 4, 6, 8]\n  MethodError: Cannot `convert` an object of type Int64\
    \ to an object of type Array{Int64,1}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::AbstractArray) where T<:Array at array.jl:533\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(::Array{Array{Int64,1},1}, ::Int64,\
    \ ::Int64) at ./array.jl:826\n   [2] getindex at ./array.jl:396 [inlined]\n  \
    \ [3] generate_integers(::Int64, ::Int64) at /tmp/tmpwmfwda94.jl:14\n   [4] top-level\
    \ scope at /tmp/tmpwmfwda94.jl:23\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpwmfwda94.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpwmfwda94.jl:24\n  Test threw exception\n  Expression: candidate(132,\
    \ 2) == [2, 4, 6, 8]\n  MethodError: Cannot `convert` an object of type Int64\
    \ to an object of type Array{Int64,1}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::AbstractArray) where T<:Array at array.jl:533\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(::Array{Array{Int64,1},1}, ::Int64,\
    \ ::Int64) at ./array.jl:826\n   [2] getindex at ./array.jl:396 [inlined]\n  \
    \ [3] generate_integers(::Int64, ::Int64) at /tmp/tmpwmfwda94.jl:14\n   [4] top-level\
    \ scope at /tmp/tmpwmfwda94.jl:24\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpwmfwda94.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpwmfwda94.jl:25\n  Test threw exception\n  Expression: candidate(17,\
    \ 89) == Vector{Int64}([])\n  MethodError: Cannot `convert` an object of type\
    \ Int64 to an object of type Array{Int64,1}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::AbstractArray) where T<:Array at array.jl:533\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(::Array{Array{Int64,1},1}, ::Int64,\
    \ ::Int64) at ./array.jl:826\n   [2] getindex at ./array.jl:396 [inlined]\n  \
    \ [3] generate_integers(::Int64, ::Int64) at /tmp/tmpwmfwda94.jl:14\n   [4] generate_integers(::Int64,\
    \ ::Int64) at /tmp/tmpwmfwda94.jl:12\n   [5] top-level scope at /tmp/tmpwmfwda94.jl:25\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpwmfwda94.jl:21\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwmfwda94.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < 0 || b < 0\n        error(\"a and b must be non-negative\")\n \
    \   end\n    \n    evens = Vector{Int64}()\n    \n    while a <= b\n        if\
    \ a % 2 == 0\n            evens.push(a)\n        end\n        a += 1\n    end\n\
    \    \n    return evens\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n<text>\nExercise 2\n\
    Write a function called generate_integers_between_1_and_10 that generates integers\
    \ between 1 and 10. Your function should return an array of integers including\
    \ 1 and 10.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t\
    @test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6,\
    \ 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppq2p6vud.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppq2p6vud.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if b < a \n        error(\"generate_integers: b < a\")\n    end\n    \n\
    \    evens = Vector{Int64}()\n    \n    while a <= b\n        push!(evens, a)\n\
    \        a += 2\n    end\n    \n    evens\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that generates integers up to a specified maximum, inclusive.\n\
    using Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwx42jvrb.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwx42jvrb.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    generate_integers(0, b)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmps4hb9e2p.jl:18\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmps4hb9e2p.jl:11 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmps4hb9e2p.jl:19\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmps4hb9e2p.jl:11\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmps4hb9e2p.jl:20\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmps4hb9e2p.jl:11\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmps4hb9e2p.jl:21\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmps4hb9e2p.jl:11 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps4hb9e2p.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < 0 || b < 0\n        error(\"generate_integers: a and b must be\
    \ non-negative\")\n    end\n    \n    if a == 0 || b == 0\n        return Vector{Int64}()\n\
    \    end\n    \n    evens = Vector{Int64}()\n    \n    if a < b\n        a, b\
    \ = b, a\n    end\n    \n    while a <= b\n        evens.append(a)\n        a\
    \ += 1\n    end\n    \n    return evens\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nProblem 4\nWrite a function that generates all the integers between 1\
    \ and a given number N, inclusive.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdyqaq6u_.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdyqaq6u_.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    generate_integers(a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpuxvypcoj.jl:18\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpuxvypcoj.jl:11 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmpuxvypcoj.jl:19\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpuxvypcoj.jl:11\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpuxvypcoj.jl:20\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpuxvypcoj.jl:11\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpuxvypcoj.jl:21\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmpuxvypcoj.jl:11 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuxvypcoj.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqs97sx63.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpqs97sx63.jl:14 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmpqs97sx63.jl:23\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpqs97sx63.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpqs97sx63.jl:24\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmpqs97sx63.jl:14\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpqs97sx63.jl:25\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmpqs97sx63.jl:14 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqs97sx63.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < 0 || b < 0\n        error(\"a or b must be positive\")\n    end\n\
    \    \n    if a > b\n        a, b = b, a\n    end\n    \n    evens = Vector{Int64}()\n\
    \    \n    while a <= b\n        evens.append(a)\n        a = a + 2\n    end\n\
    \    \n    return evens\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n<text>\nExercise 2\n\
    Write a function that generates integers within a given range (inclusive).\nusing\
    \ Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps33tdui_.jl:28\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmps33tdui_.jl:28\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5b6dmewl.jl:23\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp5b6dmewl.jl:15 (repeats\
    \ 79984 times)\n  \ntest set: Error During Test at /tmp/tmp5b6dmewl.jl:24\n  Test\
    \ threw exception\n  Expression: candidate(10, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp5b6dmewl.jl:15\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmp5b6dmewl.jl:25\n\
    \  Test threw exception\n  Expression: candidate(132, 2) == [2, 4, 6, 8]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmp5b6dmewl.jl:15\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmp5b6dmewl.jl:26\n\
    \  Test threw exception\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64)\
    \ at /tmp/tmp5b6dmewl.jl:15 (repeats 79984 times)\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5b6dmewl.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if b < a \n        error(\"b must be greater than a\")\n    end\n    \n\
    \    evens = Vector{Int64}()\n    \n    while a <= b\n        evens.append(a)\n\
    \        a += 1\n    end\n    \n    return evens\nend\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that generates the integers within a given range (inclusive).\n\
    using Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvs5nijjf.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvs5nijjf.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        Vector{Int64}[a,\
    \ b]\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnajkhne4.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  MethodError: Cannot `convert`\
    \ an object of type Int64 to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(::Array{Array{Int64,1},1}, ::Int64,\
    \ ::Int64) at ./array.jl:826\n   [2] getindex at ./array.jl:396 [inlined]\n  \
    \ [3] generate_integers(::Int64, ::Int64) at /tmp/tmpnajkhne4.jl:14\n   [4] generate_integers(::Int64,\
    \ ::Int64) at /tmp/tmpnajkhne4.jl:12\n   [5] top-level scope at /tmp/tmpnajkhne4.jl:22\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpnajkhne4.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpnajkhne4.jl:23\n  Test threw exception\n  Expression: candidate(10,\
    \ 2) == [2, 4, 6, 8]\n  MethodError: Cannot `convert` an object of type Int64\
    \ to an object of type Array{Int64,1}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::AbstractArray) where T<:Array at array.jl:533\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(::Array{Array{Int64,1},1}, ::Int64,\
    \ ::Int64) at ./array.jl:826\n   [2] getindex at ./array.jl:396 [inlined]\n  \
    \ [3] generate_integers(::Int64, ::Int64) at /tmp/tmpnajkhne4.jl:14\n   [4] top-level\
    \ scope at /tmp/tmpnajkhne4.jl:23\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpnajkhne4.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpnajkhne4.jl:24\n  Test threw exception\n  Expression: candidate(132,\
    \ 2) == [2, 4, 6, 8]\n  MethodError: Cannot `convert` an object of type Int64\
    \ to an object of type Array{Int64,1}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::AbstractArray) where T<:Array at array.jl:533\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(::Array{Array{Int64,1},1}, ::Int64,\
    \ ::Int64) at ./array.jl:826\n   [2] getindex at ./array.jl:396 [inlined]\n  \
    \ [3] generate_integers(::Int64, ::Int64) at /tmp/tmpnajkhne4.jl:14\n   [4] top-level\
    \ scope at /tmp/tmpnajkhne4.jl:24\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpnajkhne4.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpnajkhne4.jl:25\n  Test threw exception\n  Expression: candidate(17,\
    \ 89) == Vector{Int64}([])\n  MethodError: Cannot `convert` an object of type\
    \ Int64 to an object of type Array{Int64,1}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::AbstractArray) where T<:Array at array.jl:533\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(::Array{Array{Int64,1},1}, ::Int64,\
    \ ::Int64) at ./array.jl:826\n   [2] getindex at ./array.jl:396 [inlined]\n  \
    \ [3] generate_integers(::Int64, ::Int64) at /tmp/tmpnajkhne4.jl:14\n   [4] generate_integers(::Int64,\
    \ ::Int64) at /tmp/tmpnajkhne4.jl:12\n   [5] top-level scope at /tmp/tmpnajkhne4.jl:25\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpnajkhne4.jl:21\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnajkhne4.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b \n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<code language=julia-1.3>\ngenerate_integers(2, 8)\n\
    </cell>\n<code language=julia-1.3>\ngenerate_integers(8, 2)\n</cell>\n<code language=julia-1.3>\n\
    generate_integers(10, 14)\n</cell>\n<text>\nExercise: Write a function that generates\
    \ all the integers between two given integers, inclusive.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpufpxenwh.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpufpxenwh.jl:17\n"
  exit_code: 1
  status: Exception
