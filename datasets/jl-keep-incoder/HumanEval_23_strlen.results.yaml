name: HumanEval_23_strlen
language: julia
results:
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local len::Int64 = 0\n    for char in string:\n        len = len + 1\n  \
    \  return len\n</code>\n<|/ a |>\n<| c |>\nThis does not provide an answer to\
    \ the question. To critique or request clarification from an author, leave a comment\
    \ below their post. - [From Review](/review/low-quality-posts/11956271)\n<|/ c\
    \ |>\n<| c |>\nI believe this does answer the question. He asked how to count\
    \ the number of characters in a string. He also asked how to do this in Julia.\
    \ He also asked how to do this in Python. He also asked how to do this in R. He\
    \ also asked how to do this in Haskell. He also asked how to do this in Julia.\
    \ He also asked how to do this in R. He also asked how to do this in Julia. He\
    \ also asked how to do this in Julia. He also asked how to do this in Julia. He\
    \ also asked how to do this in Julia. He also asked how to do this in Julia. He\
    \ also asked how to do this in Julia. He also asked how to do this in Julia. He\
    \ also asked how to do this in Julia. He also asked how to do this in Julia. He\
    \ also asked how to do this in Julia. He also asked how to do this in Julia. He\
    \ also asked how to do this in Julia. He also asked how to do this in Julia. He\
    \ also asked how to do this in Julia. He also asked how to do this in Julia. He\
    \ also asked how to do this in Julia. He also asked how to do this in Julia. He\
    \ also asked how to do this in Julia. He also asked how to do this in Julia. He\
    \ also asked how to do this in Julia. He also asked how to do this in Julia. He\
    \ also asked how to do this in Julia. He also asked how to do this in Julia. He\
    \ also asked how to do this in Julia. He also asked how to do this in Julia. He\
    \ also asked how to do this in Julia. He also asked how to do this in Julia. He\
    \ also asked how to do this in Julia. He also asked how to do this in Julia. He\
    \ also asked how to do this in Julia. He also asked how to do this in Julia. \n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsw5cj1yz.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsw5cj1yz.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local len = string.len()\n    return len\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\"\
    ) == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5ukouy9w.jl:16\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  type String has no field len\n  Stacktrace:\n\
    \   [1] getproperty(::String, ::Symbol) at ./Base.jl:33\n   [2] strlen(::String)\
    \ at /tmp/tmp5ukouy9w.jl:8\n   [3] top-level scope at /tmp/tmp5ukouy9w.jl:16\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp5ukouy9w.jl:15\n  \ntest set: Error During\
    \ Test at /tmp/tmp5ukouy9w.jl:17\n  Test threw exception\n  Expression: candidate(\"\
    x\") == 1\n  type String has no field len\n  Stacktrace:\n   [1] getproperty(::String,\
    \ ::Symbol) at ./Base.jl:33\n   [2] strlen(::String) at /tmp/tmp5ukouy9w.jl:8\n\
    \   [3] top-level scope at /tmp/tmp5ukouy9w.jl:17\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp5ukouy9w.jl:15\n  \ntest set: Error During\
    \ Test at /tmp/tmp5ukouy9w.jl:18\n  Test threw exception\n  Expression: candidate(\"\
    asdasnakj\") == 9\n  type String has no field len\n  Stacktrace:\n   [1] getproperty(::String,\
    \ ::Symbol) at ./Base.jl:33\n   [2] strlen(::String) at /tmp/tmp5ukouy9w.jl:8\n\
    \   [3] top-level scope at /tmp/tmp5ukouy9w.jl:18\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp5ukouy9w.jl:15\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5ukouy9w.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local len::Int64 = 0\n    for char in string do \n        len = len + 1\n\
    \    end\n    return len\nend\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\"\
    )\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpz7sqczm4.jl:9\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpz7sqczm4.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprj8krssf.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmprj8krssf.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmprj8krssf.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk4emonx9.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpk4emonx9.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpk4emonx9.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local len::Int64 = 0\n    for c in string\n        len = len + 1\n    end\n\
    \    return len\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns true if the given string is\
    \ a palindrome, and false otherwise.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpprqhg4ym.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpprqhg4ym.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    Substring\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6jzojs1i.jl:8\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6jzojs1i.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgrn93h2b.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpgrn93h2b.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpgrn93h2b.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    length::Int64 = 0\n    for char in string\n        length += 1\n    return\
    \ length\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThe `length` variable is unnecessary\
    \ and can be replaced with `length::Int64 = 0`.\n<|/ c |>\n<| c |>\nI agree, thanks\
    \ for pointing that out. I was just trying to keep it close to the original code\
    \ as much as possible.\n<|/ c |>\n<| a |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\"\
    ) == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnx_ehwxx.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnx_ehwxx.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local result = 1\n    for char in string:\n        result = result + 1\n\
    \    return result\nend\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of characters\
    \ in a given string. \nThe function should take a string as input, and return\
    \ an Int64.\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy92aga5p.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpy92aga5p.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local result = 1\n    for char in string:\n        result = result * len(char)\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_luajqy5.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_luajqy5.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Compute length of given string\n    >>> strlen('')\n    0\n \
    \   >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpiyf_hb70.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpiyf_hb70.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpiyf_hb70.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local len::Int64 = 0\n    for char in string:\n        len = len + 1\n  \
    \  return len\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of characters in the string. \nWrite a function that takes a string and returns\
    \ the number of words in the string. \nWrite a function that takes a string and\
    \ returns the number of sentences in the string. \nWrite a function that takes\
    \ a string and returns the number of characters in the string divided by the number\
    \ of words in the string.\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkmn4ulu8.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkmn4ulu8.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbjwu0xyi.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpbjwu0xyi.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpbjwu0xyi.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd_st42i0.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpd_st42i0.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpd_st42i0.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnh3gjtnj.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpnh3gjtnj.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpnh3gjtnj.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl2g8jnii.jl:8\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpl2g8jnii.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyiz37fxi.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpyiz37fxi.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpyiz37fxi.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\nReturn length of given string\n\"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7mzz429l.jl:8\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7mzz429l.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    length = 0\n    for c in string\n        length += 1\n    return length\n\
    </code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string |>\nThe shortest way\
    \ is to use length\n<code>\njulia> length(\"hello\")\n5\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\n`length` also works on `Char` arrays, e.g. `length([\"h\", \"e\"\
    , \"l\", \"l\", \"o\"])` returns `5`.\n<|/ c |>\n<| a |>\nThe shortest way is\
    \ to use length\n<code>\njulia> length(\"hello\")\n5\n</code>\n<|/ a tags=julia,string\
    \ dscore=5 |>\n<| a dscore=5 |>\nThe shortest way is to use length\n<code>\njulia>\
    \ length(\"hello\")\n5\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string\
    \ |>\nThe shortest way is to use length\n<code>\njulia> length(\"hello\")\n5\n\
    </code>\n<|/ a dscore=4 |>\n<| a |>\nThe shortest way is to use length\n<code>\n\
    julia> length(\"hello\")\n5\n</code>\n<|/ a tags=julia,string dscore=4 |>\n<|\
    \ a dscore=4 |>\nThe shortest way is to use length\n<code>\njulia> length(\"hello\"\
    )\n5\n</code>\n<|/ a tags=julia,string |>\n<| a dscore=4 |>\nThe shortest way\
    \ is to use length\n<code>\njulia> length(\"hello\")\n5\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a tags=julia,string |>\nThe shortest way is to use length\n<code>\njulia>\
    \ length(\"hello\")\n5\n</code>\n<|/ a dscore=4 |>\n<| a dscore=3 |>\nThe shortest\
    \ way is to use length\n<code>\njulia> length(\"hello\")\n5\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a |>\nThe shortest way is to use length\n<code>\njulia> length(\"hello\"\
    )\n5\n</code>\n<|/ a dscore=3 tags=julia,string |>\n<| a tags=julia,string |>\n\
    The shortest way is to use length\n<code>\njulia> length(\"hello\")\n5\n</code>\n\
    <|/ a dscore=3 |>\n<| a dscore=3 |>\nThe shortest way is to use length\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\
    \t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp91t58de_.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp91t58de_.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvpqjqa75.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpvpqjqa75.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpvpqjqa75.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \n    if string == \"\" then \n        return 0\n    else \n        return\
    \ string.length()\nend\n</cell>\n<code language=julia-1.1>\nstrlen(\"\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of characters in\
    \ a string that are not spaces.\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5ji6b9qf.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5ji6b9qf.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp71ioodye.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp71ioodye.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp71ioodye.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps9pw2uis.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmps9pw2uis.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmps9pw2uis.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == nil\n        0\n    else\n        string.len()\n    end\nend\n\
    </cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nstrcat(string,\
    \ string...)\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7l8ochlu.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7l8ochlu.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local result = 1\n    for char in string:\n        result = result * len(char)\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8ll6y4ni.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8ll6y4ni.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp43azum1v.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp43azum1v.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp43azum1v.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\nstrlen(string::AbstractString)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoyvs4gkx.jl:8\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpoyvs4gkx.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local len::Int64 = 0\n    for char in string:\n        len = len + 1\n  \
    \  return len\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplu5rr4ik.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplu5rr4ik.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"abc\")\n</cell>\n<text>\nStrings are immutable in Julia\nStrings are\
    \ immutable in Julia. This means that we cannot change a string. Instead, we have\
    \ to create a new string with the desired changes.\nusing Test\n\n@testset begin\n\
    \ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\"\
    ) == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa2yxtf1x.jl:8\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpa2yxtf1x.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    Int64(string.len())\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\"\
    )\n</cell>\n<text>\nSubstring extraction\nJulia has many string extraction functions.\
    \ Here are some examples:\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxy2q4l3d.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxy2q4l3d.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \n    if string == \"\"\n        return 0\n    \n    length = 0\n    for\
    \ char in string\n        length += 1\n    \n    return length\n</cell>\n<code\
    \ language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are uppercase letters.\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfk3nb_vm.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfk3nb_vm.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local len::Int64 = 0\n    for char in string\n        len = len + 1\n   \
    \ end\n    return len\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that returns true if the given\
    \ string contains only letters, false otherwise.\nusing Test\n\n@testset begin\n\
    \ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\"\
    ) == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4yab153n.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4yab153n.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    Int64(string.len())\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwk2hrxxx.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  type String has no field len\n  Stacktrace:\n\
    \   [1] getproperty(::String, ::Symbol) at ./Base.jl:33\n   [2] strlen(::String)\
    \ at /tmp/tmpwk2hrxxx.jl:8\n   [3] top-level scope at /tmp/tmpwk2hrxxx.jl:15\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpwk2hrxxx.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpwk2hrxxx.jl:16\n  Test threw exception\n  Expression: candidate(\"\
    x\") == 1\n  type String has no field len\n  Stacktrace:\n   [1] getproperty(::String,\
    \ ::Symbol) at ./Base.jl:33\n   [2] strlen(::String) at /tmp/tmpwk2hrxxx.jl:8\n\
    \   [3] top-level scope at /tmp/tmpwk2hrxxx.jl:16\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpwk2hrxxx.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpwk2hrxxx.jl:17\n  Test threw exception\n  Expression: candidate(\"\
    asdasnakj\") == 9\n  type String has no field len\n  Stacktrace:\n   [1] getproperty(::String,\
    \ ::Symbol) at ./Base.jl:33\n   [2] strlen(::String) at /tmp/tmpwk2hrxxx.jl:8\n\
    \   [3] top-level scope at /tmp/tmpwk2hrxxx.jl:17\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpwk2hrxxx.jl:14\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwk2hrxxx.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6jp6rbys.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp6jp6rbys.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp6jp6rbys.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local result = 1\n    for char in string:\n        result = result * len(char)\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpelh611rr.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpelh611rr.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    string.length\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n\
    </cell>\n<text>\nSubstring\nReturn substring from given string from given start\
    \ index to given end index\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmsli44ix.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmsli44ix.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Calculate the length of given string\n    >>> strlen('abc')\n\
    \    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplpxux6e0.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmplpxux6e0.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmplpxux6e0.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"abc\")\n</cell>\n<text>\nSubstring\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9s3xx2hz.jl:8\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9s3xx2hz.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    Int64(string.len())\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\"\
    )\n</cell>\n<text>\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given \nusing Test\n\n@testset begin\n\
    \ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\"\
    ) == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp853lvpno.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp853lvpno.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplqlmjezo.jl:8\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplqlmjezo.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7c2qkiuq.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp7c2qkiuq.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp7c2qkiuq.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqqt4orhx.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpqqt4orhx.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpqqt4orhx.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    len = length(string)\n    if len == 0 \n        0\n    else\n        len\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\nReturn length of given\
    \ string\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_qzy9mk1.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_qzy9mk1.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    charindex(string::String, character::Char)::Int64\nusing Test\n\n\
    @testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpustkvb_i.jl:8\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpustkvb_i.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    length::Int64 = 0\n    for char in string\n        length += 1\n    return\
    \ length\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis is not the correct answer,\
    \ as `length` does not count the null character. `length(\"abc\")` returns 3,\
    \ not 4.\n<|/ c |>\n<| c |>\nI agree with you, I have edited my answer to reflect\
    \ this and to also include a link to the relevant documentation.\n<|/ c |>\n<|\
    \ a dscore=4 tags=julia |>\nThe most efficient way is to use length. \n<code>\n\
    julia> length(\"abc\")\n3\n</code>\n<|/ a |>\n<| a tags=julia |>\nThe most efficient\
    \ way is to use length. \n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a dscore=4\
    \ |>\n<| a |>\nThe most efficient way is to use length. \n<code>\njulia> length(\"\
    abc\")\n3\n</code>\n<|/ a dscore=4 tags=julia |>\n<| a tags=julia |>\nThe most\
    \ efficient way is to use length. \n<code>\njulia> length(\"abc\")\n3\n</code>\n\
    <|/ a dscore=3 |>\n<| a dscore=3 |>\nThe most efficient way is to use length.\
    \ \n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia |>\n<| a dscore=3\
    \ |>\nThe most efficient way is to use length. \n<code>\njulia> length(\"abc\"\
    )\n3\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\nThe most efficient way\
    \ is to use length. \n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a dscore=3\
    \ |>\n<| a tags=julia |>\nThe most efficient way is to use length. \n<code>\n\
    julia> length(\"abc\")\n3\n</code>\n<|/ a dscore=3 |>\n<| a |>\nThe most efficient\
    \ way is to use length. \n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a dscore=3\
    \ tags=julia |>\n<| a tags=julia |>\nThe most efficient way is to use length.\
    \ \n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a dscore=3 |>\n<| a tags=julia\
    \ |>\nThe most efficient way is to use length. \n<code>\njulia> \nusing Test\n\
    \n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp547h0oe_.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp547h0oe_.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvb1mxd42.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpvb1mxd42.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpvb1mxd42.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == ''\n        return 0\n    else \n        return string.length()\n\
    end\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\nSubstring\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpob6682xb.jl:8\n [2] include(::Module, ::String) at\
    \ ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpob6682xb.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length()\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\nReturn length of given string\n\"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4gh9ssmy.jl:8\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4gh9ssmy.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local result = 1\n    for char in string:\n        result = result * len(char)\n\
    \    return result\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of characters\
    \ in a string that are not in the given set.\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8885fv0x.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8885fv0x.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Calculate the length of given string\n    >>> strlen('')\n  \
    \  0\n    >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\"\
    ) == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy_66ayxe.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpy_66ayxe.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpy_66ayxe.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    length = 0\n    for c in string:\n        length = length + 1\n    return\
    \ length\n</code>\n<|/ a tags=julia,string |>\n<| c |>\nThis doesn't work for\
    \ me. `strlen(\"abc\")` returns `3` instead of `2`.\n<|/ c |>\n<| c |>\nI tested\
    \ it on Julia 0.6.0 and it works fine. Maybe you have a different version?\n<|/\
    \ c |>\n<| c |>\nI tested it on 0.6.1 and it works fine. Maybe you have a different\
    \ version?\n<|/ c |>\n<| c |>\nI tested it on 0.6.2 and it works fine. Maybe you\
    \ have a different version?\n<|/ c |>\n<| c |>\nI tested it on 0.6.3 and it works\
    \ fine. Maybe you have a different version?\n<|/ c |>\n<| a dscore=4 |>\nIn Julia\
    \ 0.6.1 you can use the function length\n<code>\njulia> length(\"abc\")\n2\n</code>\n\
    <|/ a tags=julia,string |>\n<| c |>\nThis doesn't work for me. `length(\"abc\"\
    )` returns `3` instead of `2`.\n<|/ c |>\n<| c |>\nIt works for me on Julia 0.6.1.\
    \ What version are you using?\n<|/ c |>\n<| c |>\nI tested it on 0.6.1 and it\
    \ works fine. Maybe you have a different version?\n<|/ c |>\n<| c |>\nI tested\
    \ it on 0.6.2 and it works fine. Maybe you have a different version?\n<|/ c |>\n\
    <| c |>\nI tested it on 0.6.3 and it works fine. Maybe you have a different version?\n\
    <|/ c |>\n<| a |>\nIn Julia 0.6.1 you can use the function length\n<code>\njulia>\
    \ length(\"abc\")\n2\n</code>\n<|/ a tags=julia,string dscore=4 |>\n<| a tags=julia,string\
    \ |>\nIn Julia 0.6.1 you can use the function length\n<code>\njulia> length(\"\
    abc\")\n2\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\nIn Julia 0.6.1 you can\
    \ use the function length\n<code>\njulia> length(\"abc\")\n2\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a dscore=3 |>\nIn Julia 0.6.1 you can use the function length\n<code>\n\
    julia> length(\"abc\")\n2\n</code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpabvbpsy9.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpabvbpsy9.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \n    \"\"\"\n    \n    \n    # Your code here\n    \n    return string.len()\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpef6h7k7q.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpef6h7k7q.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6gcdq4eu.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp6gcdq4eu.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp6gcdq4eu.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local string\n    local length\n    local i\n    local j\n    local length\n\
    \    length = 0\n    for i = 1, #string do\n        j = string.sub(i, i+1)\n \
    \       length = length + j\n    end\n    return length\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: local variable name \"string\" conflicts with\
    \ an argument\nStacktrace:\n [1] top-level scope at /tmp/tmpl6s2ezsm.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpl6s2ezsm.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpce0b0zuk.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpce0b0zuk.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpce0b0zuk.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == ''\n        return 0\n    else\n        return string.length\n\
    end\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nSubstring\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpnbyb2ate.jl:8\n [2] include(::Module, ::String) at\
    \ ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnbyb2ate.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\nReturn length of given string\n\"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp26wk3j4l.jl:8\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp26wk3j4l.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdh5g_fab.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpdh5g_fab.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpdh5g_fab.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then \n        return 0\n    else \n        return string.length\n\
    end\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nString\
    \ concatenation\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpobf_165f.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpobf_165f.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"abc\")\n</cell>\n<text>\nSubstring\nReturn a substring of a given string\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxcxdyjjn.jl:8\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxcxdyjjn.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"abc\")\n</cell>\n<text>\nSubstrings\nJulia has many string functions\
    \ to work with substrings. Here are some examples:\nusing Test\n\n@testset begin\n\
    \ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\"\
    ) == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplz0cnp9l.jl:8\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplz0cnp9l.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7l9ubik3.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp7l9ubik3.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp7l9ubik3.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local length = 0\n    for char in string:\n        length = length + 1\n\
    \    return length\nend\n</cell>\n<code language=julia-1.0>\nstrlen(\"\")\n</cell>\n\
    <code language=julia-1.0>\nstrlen(\"abc\")\n</cell>\n<text>\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia. Strings are immutable because Julia\
    \ is designed to avoid copying strings. Strings are immutable because Julia is\
    \ designed to avoid copying strings. Strings are immutable because Julia is designed\
    \ to avoid copying strings. Strings are immutable because Julia is designed to\
    \ avoid copying strings. Strings are immutable because Julia is designed to avoid\
    \ copying strings. Strings are immutable because Julia is designed to avoid copying\
    \ strings. Strings are immutable because Julia is designed to avoid copying strings.\
    \ Strings are immutable because Julia is designed to avoid copying strings. Strings\
    \ are immutable because Julia is designed to avoid copying strings. Strings are\
    \ immutable because Julia is designed to avoid copying strings. Strings are immutable\
    \ because Julia is designed to avoid copying strings. Strings are immutable because\
    \ Julia is designed to avoid copying strings. Strings are immutable because Julia\
    \ is designed to avoid copying strings. Strings are immutable because Julia is\
    \ designed to avoid copying strings. Strings are immutable because Julia is designed\
    \ to avoid copying strings. Strings are immutable because Julia is designed to\
    \ avoid copying strings. Strings are immutable because Julia is designed to avoid\
    \ copying strings. Strings are immutable because Julia is designed to avoid copying\
    \ strings. Strings are immutable because Julia is designed to avoid copying strings.\
    \ Strings are immutable because Julia is designed to avoid copying strings. Strings\
    \ are immutable because Julia is designed to avoid copying strings. Strings are\
    \ immutable because Julia is designed to avoid copying strings. Strings are immutable\
    \ because Julia is designed to avoid copying strings. Strings are immutable because\
    \ Julia is designed to avoid copying strings. Strings are immutable because Julia\
    \ is designed to avoid copying strings. Strings are immutable because Julia is\
    \ designed to avoid copying strings. Strings are immutable because Julia is designed\
    \ to avoid copying strings. Strings are immutable because Julia is de\nusing Test\n\
    \n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5yj9zahz.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5yj9zahz.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3r8sh751.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp3r8sh751.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp3r8sh751.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local len::Int64 = 0\n    for char in string\n        len = len + 1\n   \
    \ end\n    return len\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0dk94wkl.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp0dk94wkl.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp0dk94wkl.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu4lvjsaj.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpu4lvjsaj.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpu4lvjsaj.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpb5a_cpr9.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpb5a_cpr9.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpb5a_cpr9.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local result = 1\n    for char in string:\n        result = result + 1\n\
    \    return result\n</code>\n<|/ a tags=julia,string |>\n<| c |>\n`length` does\
    \ this for you\n<|/ c |>\n<| c |>\n`length` does this for you, but `length` also\
    \ counts newlines. `length(\"abc\\n\")` returns 3, but `length(\"abc\")` returns\
    \ 1. `length(\"abc\\n\")` returns 3, but `length(\"abc\")` returns 1. `length(\"\
    abc\\n\")` returns 3, but `length(\"abc\")` returns 1. `length(\"abc\\n\")` returns\
    \ 3, but `length(\"abc\")` returns 1. `length(\"abc\\n\")` returns 3, but `length(\"\
    abc\")` returns 1. `length(\"abc\\n\")` returns 3, but `length(\"abc\")` returns\
    \ 1. `length(\"abc\\n\")` returns 3, but `length(\"abc\")` returns 1. `length(\"\
    abc\\n\")` returns 3, but `length(\"abc\")` returns 1. `length(\"abc\\n\")` returns\
    \ 3, but `length(\"abc\")` returns 1. `length(\"abc\\n\")` returns 3, but `length(\"\
    abc\")` returns 1. `length(\"abc\\n\")` returns 3, but `length(\"abc\")` returns\
    \ 1. `length(\"abc\\n\")` returns 3, but `length(\"abc\")` returns 1. `length(\"\
    abc\\n\")` returns 3, but `length(\"abc\")` returns 1. `length(\"abc\\n\")` returns\
    \ 3, but `length(\"abc\")` returns 1. `length(\"abc\\n\")` returns 3, but `length(\"\
    abc\")` returns 1. `length(\"abc\\n\")` returns 3, but `length(\"abc\")` returns\
    \ 1. `length(\"abc\\n\")` returns 3, but `length(\"abc\")` returns 1. `length(\"\
    abc\\n\")` returns 3, but `length(\"abc\")` returns 1. `length(\"abc\\n\")` returns\
    \ 3, but `length(\"abc\")` returns 1. `length(\"abc\\n\")` returns 3, but `length(\"\
    abc\")` returns 1. `length(\"abc\\n\")` returns 3, but `length(\"abc\")` returns\
    \ 1. `length(\"abc\\n\")` returns 3, but `length(\"abc\")` returns 1. `length(\"\
    abc\\n\")` returns 3, but `length(\"abc\")` returns 1. `length(\"abc\\n\")` returns\
    \ 3, but `length(\"abc\")` returns 1. `length(\"abc\\n\")` returns 3, but `length(\"\
    abc\")` returns 1. `length(\"abc\\n\")` returns 3, but `length(\"abc\")` returns\
    \ 1. `length(\"abc\\n\")\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp05mckmt.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpp05mckmt.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local len::Int64 = 0\n    for char in string do \n        len = len + 1\n\
    \    end\n    return len\nend\n</cell>\n<code language=julia-1.5>\nstrlen(\"\"\
    )\n</cell>\n<text>\nExercise 3.2\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are uppercase letters.\nusing Test\n\
    \n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpmgxqmgoc.jl:9\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpmgxqmgoc.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local len::Int64\n    len = string.len()\n    return len\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmx_h_0i_.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  type String has no field len\n  Stacktrace:\n\
    \   [1] getproperty(::String, ::Symbol) at ./Base.jl:33\n   [2] strlen(::String)\
    \ at /tmp/tmpmx_h_0i_.jl:9\n   [3] top-level scope at /tmp/tmpmx_h_0i_.jl:17\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpmx_h_0i_.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpmx_h_0i_.jl:18\n  Test threw exception\n  Expression: candidate(\"\
    x\") == 1\n  type String has no field len\n  Stacktrace:\n   [1] getproperty(::String,\
    \ ::Symbol) at ./Base.jl:33\n   [2] strlen(::String) at /tmp/tmpmx_h_0i_.jl:9\n\
    \   [3] top-level scope at /tmp/tmpmx_h_0i_.jl:18\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpmx_h_0i_.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpmx_h_0i_.jl:19\n  Test threw exception\n  Expression: candidate(\"\
    asdasnakj\") == 9\n  type String has no field len\n  Stacktrace:\n   [1] getproperty(::String,\
    \ ::Symbol) at ./Base.jl:33\n   [2] strlen(::String) at /tmp/tmpmx_h_0i_.jl:9\n\
    \   [3] top-level scope at /tmp/tmpmx_h_0i_.jl:19\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpmx_h_0i_.jl:16\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmx_h_0i_.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.5>\nstrlen(\" abc\")\n</cell>\n\
    <code language=julia-1.5>\nstrlen(\" abc \")\n</cell>\n<code language=julia-1.5>\n\
    strlen(\" abc def\")\n</cell>\n<code language=julia-1.5>\nstrlen(\" abc def \"\
    )\n</cell>\n<code language=julia-1.5>\nstrlen(\" abc def ghi\")\n</cell>\n<code\
    \ language=julia-1.5>\nstrlen(\" abc def ghi \")\n</cell>\n<code language=julia-1.5>\n\
    strlen(\" abc def ghi jkl\")\n</cell>\n<code language=julia-1.5>\nstrlen(\" abc\
    \ def ghi jkl \")\n</cell>\n<code language=julia-1.5>\nstrlen(\" abc def ghi jkl\
    \ mno\")\n</cell>\n<code language=julia-1.5>\nstrlen(\" abc def ghi jkl mno pqr\"\
    )\n</cell>\n<code language=julia-1.5>\nstrlen(\" abc def ghi jkl mno pqr stu\"\
    )\n</cell>\n<code language=julia-1.5>\nstrlen(\" abc def ghi jkl mno pqr stu vwx\
    \ yza\")\n</cell>\n<code language=julia-1.5>\nstrlen(\" abc def ghi jkl mno pqr\
    \ stu vwx yza \")\n</cell>\n<code language=julia-1.5>\nstrlen(\" abc def ghi jkl\
    \ mno pqr stu vwx yza zab\")\n</cell>\n<code language=julia-1.5>\nstrlen(\" abc\
    \ def ghi jkl mno pqr stu vwx yza zab cda\")\n</cell>\n<code language=julia-1.5>\n\
    strlen(\" abc def ghi jkl mno pqr stu vwx yza zab cda efa\")\n</cell>\n<code language=julia-1.5>\n\
    strlen(\" abc def ghi jkl mno pqr stu vwx yza zab cda efa ghi\")\n</cell>\n<code\
    \ language=julia-1.5>\nstrlen(\" abc def ghi jkl mno pqr stu vwx yza zab cda ef\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzy6fqbk7.jl:8\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzy6fqbk7.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplsorf9oi.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmplsorf9oi.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmplsorf9oi.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local result = 0\n    for char in string:\n        result = result + 1\n\
    \    return result\n</code>\n<|/ a tags=julia,string |>\n<| c |>\nThe `length`\
    \ function was added in Julia v0.6.0, so this answer is no longer valid. `length`\
    \ was added in v0.6.0, so this answer is no longer valid. `length` was added in\
    \ v0.6.0, so this answer is no longer valid.\n<|/ c |>\n<| a dscore=4 |>\nThe\
    \ most efficient way is to use Base.count (as suggested by others). \n<code>\n\
    julia> Base.count(\"abc\", \"c\")\n2\n</code>\nThis function is implemented in\
    \ C and is very efficient. \n<code>\njulia> Base.count(\"abc\", \"c\")\n2\n</code>\n\
    <|/ a tags=julia,string |>\n<| c |>\nThis should be the accepted answer. `Base.count`\
    \ is implemented in C and is very efficient.\n<|/ c |>\n<| a tags=julia,string\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphw1ym453.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphw1ym453.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local len::Int64 = 0\n    for char in string do\n        len = len + 1\n\
    \    end\n    return len\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\"\
    )\n</cell>\n<text>\nStrings\nStrings are immutable sequences of Unicode characters.\
    \ Strings are represented using single quotes (') and double quotes (\").\nusing\
    \ Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\
    \t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp7xlb61xi.jl:9\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp7xlb61xi.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"abc\")\n</cell>\n<text>\nStrings are immutable\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvxe1wcew.jl:8\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvxe1wcew.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local length = 0\n    for char in string:\n        length = length + 1\n\
    \    return length\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2jb9uly2.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2jb9uly2.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkks0lbkc.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpkks0lbkc.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpkks0lbkc.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\nReturn length of given string\n\"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp32lpxrwm.jl:8\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp32lpxrwm.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length()\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\nReturn length of given string\n\"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy8le9qt7.jl:8\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpy8le9qt7.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local result = 1\n    for char in string:\n        result = result * len(char)\n\
    \    return result\nend\n</cell>\n<code language=julia-1.0>\nstrlen(\"abc\")\n\
    </cell>\n<text>\nStrings are immutable\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppv7ekyht.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppv7ekyht.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local result = 0\n    for char in string:\n        result = result + 1\n\
    \    return result\n</code>\n<|/ a |>\n<| c |>\nThanks for the answer. I'm new\
    \ to Julia, so I didn't know about `length` function. I tried your solution and\
    \ it works. But I still don't understand why my code doesn't work. Could you please\
    \ explain why my code doesn't work?\n<|/ c |>\n<| c |>\nI added some explanation\
    \ to the answer. Hope it helps.\n<|/ c |>\n<| a dscore=2 |>\nThe reason why your\
    \ function doesn't work is that you are trying to iterate over the string using\
    \ for loop, but you cannot do that in Julia. Instead, you should use for loop\
    \ to iterate over the characters of the string and use length to get the length\
    \ of the string.\n<code>\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4kr_d7qn.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4kr_d7qn.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"abc\")\n</cell>\n<text>\nSubstring\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3ixhj6uy.jl:8\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3ixhj6uy.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local result = 0\n    for char in string:\n        result = result + 1\n\
    \    return result\nend\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n\
    </cell>\n<text>\nSubstring\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg79h5v4x.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg79h5v4x.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local result = 1\n    for char in string:\n        result = result * len(char)\n\
    \    return result\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n\
    </cell>\n<text>\nStrings are immutable in Julia\nJulia strings are immutable,\
    \ meaning that they cannot be changed. However, they can be converted to a mutable\
    \ string using String() function, which returns a new string.\nusing Test\n\n\
    @testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp48a90lbr.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp48a90lbr.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local len::Int64 = 0\n    for char in string\n        len = len + 1\n   \
    \ end\n    return len\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in that string that are not letters.\nusing Test\n\n\
    @testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo2zwnmti.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpo2zwnmti.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\nReturn length of given string\n\"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk6r5t05i.jl:8\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk6r5t05i.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\nReturn length of given string\n\"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpylej4p5r.jl:8\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpylej4p5r.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    len = length(string.value)\n    if len == 0 \n        0\n    else\n     \
    \   len\n    end\nend\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n\
    <text>\nSubstrings\nJulia has many string manipulation functions. Here are some\
    \ of them:\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu0h4tons.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpu0h4tons.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"abc\")\n</cell>\n<text>\nSubstring\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmx964ixk.jl:8\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmx964ixk.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkxlyds85.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpkxlyds85.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpkxlyds85.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"abc\")\n</cell>\n<text>\nSubstrings\nJulia has many string functions.\
    \ Here are some of them:\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph9_tdbux.jl:8\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmph9_tdbux.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local length = 0\n    for char in string:\n        length = length + 1\n\
    \    return length\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3zcao8fn.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3zcao8fn.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local len::Int64 = 0\n    for char in string do len = len + 1 end\n    return\
    \ len\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    strcat(string, string...)\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpen65j2et.jl:9\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpen65j2et.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local len::Int64 = 0\n    for c in string:\n        len = len + 1\n    return\
    \ len\n</code>\n<|/ a |>\n<| a dscore=2 |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\"\
    ) == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoe9697va.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpoe9697va.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplr6xg75l.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmplr6xg75l.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmplr6xg75l.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then \n        return 0\n    else \n        return string.length\n\
    end\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nStrings\
    \ are immutable\nStrings are immutable in Julia. Strings are immutable because\
    \ they cannot be changed. Strings are immutable because they cannot be changed.\
    \ Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. String\nusing\
    \ Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\
    \t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa8ogsh3a.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpa8ogsh3a.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local result = 0\n    for char in string:\n        result = result + 1\n\
    \    return result\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n\
    </cell>\n<text>\nStrings in Julia\nStrings in Julia are immutable and are represented\
    \ as a vector of characters. Strings are written between single quotes (') and\
    \ are enclosed in double quotes (\").\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsbd1a6xq.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsbd1a6xq.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy3ivfjv1.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpy3ivfjv1.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpy3ivfjv1.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4sbxvazw.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp4sbxvazw.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp4sbxvazw.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjndhcu0n.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpjndhcu0n.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpjndhcu0n.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local result = 0\n    for char in string:\n        result = result + 1\n\
    \    return result\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are uppercase letters.\nusing Test\n\
    \n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvxkd2en8.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvxkd2en8.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local length = 0\n    for char in string\n        length = length + 1\n \
    \   end\n    return length\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local string\n    local length\n    local i\n    local j\n    local len\n\
    \    local len\n    local len\n    local len\n    local len\n    local len\n \
    \   local len\n    local len\n    local len\n    local len\n    local len\n  \
    \  local len\n    local len\n    local len\n    local len\n    local len\n   \
    \ local len\n    local len\n    local len\n    local len\n    local len\n    local\
    \ len\n    local len\n    local len\n    local len\n    local len\n    local len\n\
    \    local len\n    local len\n    local len\n    local len\n    local len\n \
    \   local len\n    local len\n    local len\n    local len\n    local len\n  \
    \  local len\n    local len\n    local len\n    local len\n    local len\n   \
    \ local len\n    local len\n    local len\n    local len\n    local len\n    local\
    \ len\n    local len\n    local len\n    local len\n    local len\n    local len\n\
    \    local len\n    local len\n    local len\n    local len\n    local len\n \
    \   local len\n    local len\n    local len\n    local len\n    local len\n  \
    \  local len\n    local len\n    local len\n    local len\n    local len\n   \
    \ local len\n    local len\n    local len\n    local len\n    local len\n    local\
    \ len\n    local len\n    local len\n    local len\n    local len\n    local len\n\
    \    local len\n    local len\n    local len\n    local len\n    local len\n \
    \   local len\n    local len\n    local len\n    local len\n    local len\n  \
    \  local len\n    local len\n    local len\n    local len\n    local len\n   \
    \ local len\n    local len\n    local len\n    local len\n    local len\n    local\
    \ len\n    local len\n    local len\n    local len\n    local len\n    local len\n\
    \    local len\n    local len\n    local len\n    local len\n    local len\n \
    \   local len\n    local len\n    local len\n    local len\n    local len\n  \
    \  local len\n    local len\n    local len\n    local len\n    local len\n   \
    \ local len\n    local len\n    local len\n    local len\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzagehgnl.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpzagehgnl.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpzagehgnl.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local result = 0\n    for char in string:\n        result = result + 1\n\
    \    return result\n</code>\n<|/ a dscore=1 |>\n<| c |>\n`for char in string`\
    \ iterates over the characters in the string. `string.len()` returns the length\
    \ of the string. `string.len()` is faster than `string.len()`\n<|/ c |>\n<| c\
    \ |>\n`string.len()` is faster than `string.len()`? I doubt that. `string.len()`\
    \ iterates over the characters in the string and `string.len()` is O(1). `string.len()`\
    \ is O(1) because it is implemented in C. `string.len()` is O(n) because it is\
    \ implemented in Lua.\n<|/ c |>\n<| c |>\n`string.len()` is O(n) because it is\
    \ implemented in Lua. `string.len()` is O(1) because it is implemented in C. `string.len()`\
    \ is O(1) because it is implemented in Lua. `string.len()` is O(1) because it\
    \ is implemented in C. `string.len()` is O(1) because it is implemented in Lua.\
    \ `string.len()` is O(1) because it is implemented in C. `string.len()` is O(1)\
    \ because it is implemented in Lua. `string.len()` is O(1) because it is implemented\
    \ in C. `string.len()` is O(1) because it is implemented in Lua. `string.len()`\
    \ is O(1) because it is implemented in C. `string.len()` is O(1) because it is\
    \ implemented in Lua. `string.len()` is O(1) because it is implemented in C. `string.len()`\
    \ is O(1) because it is implemented in Lua. `string.len()` is O(1) because it\
    \ is implemented in C. `string.len()` is O(1) because it is implemented in Lua.\
    \ `string.len()` is O(1) because it is implemented in C. `string.len()` is O(1)\
    \ because it is implemented in Lua. `string.len()` is O(1) because it is implemented\
    \ in C. `string.len()` is O(1) because it is implemented in Lua. `string.len()`\
    \ is O(1) because it is implemented in C. `string.len()` is O(1) because it is\
    \ implemented in Lua. `string.len()` is O(1) because it is implemented in C. `string.len()`\
    \ is O(1) because it is implemented in Lua. `string.len()` is O(1) because it\
    \ is implemented in C. `string.len()` is O(1) because it is implemented in Lua.\
    \ `string.len()` is O(1) because it is implemented in C. `string.len()` is O(1)\
    \ because it is implemented in Lu\nusing Test\n\n@testset begin\n\ncandidate =\
    \ strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj5_36lja.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj5_36lja.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"abc\")\n</cell>\n<text>\nSubstring\nReturn substring from given string\
    \ from given index to given index\nusing Test\n\n@testset begin\n\ncandidate =\
    \ strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_31rf4uo.jl:8\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_31rf4uo.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm43yy4z2.jl:8\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm43yy4z2.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then \n        return 0\n    else \n        return string.length()\n\
    end\n</cell>\n<code language=julia-1.4>\nstrlen(\"abc\")\n</cell>\n<text>\nSubstring\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcqkil4qe.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcqkil4qe.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqhdsr7n0.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpqhdsr7n0.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpqhdsr7n0.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    length = 0\n    for c in string:\n        length = length + 1\n    return\
    \ length\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz25v2_kx.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpz25v2_kx.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\"\n        return 0\n    else\n        return string.length\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpv_pg82gv.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpv_pg82gv.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpv_pg82gv.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Compute length of given string\n    >>> strlen('abc')\n    3\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnuyeju17.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpnuyeju17.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpnuyeju17.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6cpf9n5k.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp6cpf9n5k.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp6cpf9n5k.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local length::Int64 = 0\n    for char in string:\n        length = length\
    \ + 1\n    return length\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in that string that are not alphanumeric. For example,\
    \ if the string was \"abc123\" the function should return 3.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp68ugu49p.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp68ugu49p.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfqcx6pd4.jl:8\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfqcx6pd4.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local result = 1\n    for char in string:\n        result = result * len(char)\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5_0b2npc.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5_0b2npc.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\"\n        return 0\n    else\n        return string.length\n\
    end\n</cell>\n<code language=julia-1.0>\nstrlen(\"abc\")\n</cell>\n<text>\nString\
    \ concatenation\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1ad8sd9c.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1ad8sd9c.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == ''\n        return 0\n    else\n        return string.length()\n\
    end\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nReturn\
    \ number of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given \nusing Test\n\n@testset begin\n\
    \ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\"\
    ) == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp3te6vppn.jl:8\n [2] include(::Module, ::String) at\
    \ ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3te6vppn.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsg3zmarq.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpsg3zmarq.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpsg3zmarq.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Calculate the length of given string\n    >>> strlen('')\n  \
    \  0\n    >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\"\
    ) == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9zs0kt5p.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp9zs0kt5p.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp9zs0kt5p.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpci7qpb1w.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpci7qpb1w.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpci7qpb1w.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"abc\")\n</cell>\n<text>\nSubstring\nSubstring is a function that extracts\
    \ a substring from a given string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpznl78ff9.jl:8\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpznl78ff9.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp96_02t59.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp96_02t59.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp96_02t59.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwleq5qwu.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpwleq5qwu.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpwleq5qwu.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.4>\n\
    strlen(\"abc\")\n</cell>\n<text>\nStrings are immutable in Julia\nJulia strings\
    \ are immutable, meaning that they cannot be changed. Strings are immutable because\
    \ strings are immutable in Julia. Strings are immutable because strings are immutable\
    \ in Julia. Strings are immutable because strings are immutable in Julia. Strings\
    \ are immutable because strings are immutable in Julia. Strings are immutable\
    \ because strings are immutable in Julia. Strings are immutable because strings\
    \ are immutable in Julia. Strings are immutable because strings are immutable\
    \ in Julia. Strings are immutable because strings are immutable in Julia. Strings\
    \ are immutable because strings are immutable in Julia. Strings are immutable\
    \ because strings are immutable in Julia. Strings are immutable because strings\
    \ are immutable in Julia. Strings are immutable because strings are immutable\
    \ in Julia. Strings are immutable because strings are immutable in Julia. Strings\
    \ are immutable because strings are immutable in Julia. Strings are immutable\
    \ because strings are immutable in Julia. Strings are immutable because strings\
    \ are immutable in Julia. Strings are immutable because strings are immutable\
    \ in Julia. Strings are immutable because strings are immutable in Julia. Strings\
    \ are immutable because strings are immutable in Julia. Strings are immutable\
    \ because strings are immutable in Julia. Strings are immutable because strings\
    \ are immutable in Julia. Strings are immutable because strings are immutable\
    \ in Julia. Strings are immutable because strings are immutable in Julia. Strings\
    \ are immutable because strings are immutable in Julia. Strings are immutable\
    \ because strings are immutable in Julia. Strings are immutable because strings\
    \ are immutable in Julia. Strings are immutable because strings are immutable\
    \ in Julia. Strings are immutable because strings are immutable in Julia. Strings\
    \ are immutable because strings are immutable in Julia. Strings are immutable\
    \ because strings are immutable in Julia. Strings are immutable because strings\
    \ are immutable in Julia. Strings are immutable because strings are immutable\
    \ in Julia. Strings are immutable because strings are immutable in Julia. Strings\
    \ are immutable because strings are immutable in Julia. Strings are immutable\
    \ because strings are immutable in Julia. Strings are im\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx046rgsg.jl:8\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpx046rgsg.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"abc\")\n</cell>\n<text>\nSubstring\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvnbfnd5h.jl:8\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvnbfnd5h.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    length = 0\n    for char in string\n        length += 1\n    return length\n\
    </code>\n<|/ a tags=julia,string |>\n<| c |>\nI guess you meant `length(string)`\
    \ instead of `strlen(string)`\n<|/ c |>\n<| c |>\nThanks for pointing that out.\
    \ I've fixed it.\n<|/ c |>\n<| a tags=julia,string |>\n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy44velg0.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpy44velg0.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\"\n        return 0\n    else\n        return string.length()\n\
    end\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nString\
    \ indexing\nJulia has two string indexing operators: [] and []=. [] returns the\
    \ character at the given index. []= assigns the character at the given index.\
    \ For example, we can get the character at index 2 of the string \"abc\" as follows:\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl7r4qtqi.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpl7r4qtqi.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_jxt_vwe.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp_jxt_vwe.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp_jxt_vwe.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcjoyk2td.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpcjoyk2td.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpcjoyk2td.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local len::Int64 = 0\n    for c in string:\n        len = len + 1\n    return\
    \ len\n</code>\n<|/ a tags=julia,string |>\n<| c |>\nThis doesn't work if you\
    \ have a string with multiple lines. `length` counts the number of characters\
    \ in the first line only.\n<|/ c |>\n<| c |>\nIt does work if you have a string\
    \ with multiple lines. `length` counts the number of characters in the first line\
    \ only.\n<|/ c |>\n<| c |>\nIt does work if you have a string with multiple lines.\
    \ `length` counts the number of characters in the first line only.\n<|/ c |>\n\
    <| a tags=julia,string |>\nThe shortest way is to use length\n<code>\njulia> length(\"\
    abc\")\n3\n</code>\n<|/ a dscore=5 |>\n<| a dscore=4 |>\nThe shortest way is to\
    \ use length\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a dscore=4 |>\nThe shortest way is to use length\n<code>\njulia> length(\"\
    abc\")\n3\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string |>\n<code>\n\
    julia> \"abc\"\n\"abc\"\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwm51tql2.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwm51tql2.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\"\n        return 0\n    else\n        return string.length()\n\
    end\n</cell>\n<code language=julia-1.5>\nstrlen(\"\")\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"abc\")\n</cell>\n<text>\nSubstrings\nJulia has substring function, which\
    \ returns substring from given string and given starting index. \nSyntax: substring(string::String,\
    \ start::Int, end::Int)\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_74u3h8m.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_74u3h8m.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvdiki_4z.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpvdiki_4z.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpvdiki_4z.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf72cdr3s.jl:8\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpf72cdr3s.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    length = 0\n    for c in string:\n        length = length + 1\n    return\
    \ length\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nI wrote a function to\
    \ count the characters in a string and return the number of characters in the\
    \ string in Julia. \n<code>\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmfap0lzf.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmfap0lzf.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpt2x0oflv.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpt2x0oflv.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpt2x0oflv.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"abc\")\n</cell>\n<text>\nSubstring extraction\nJulia has a substring\
    \ function that extracts a substring from a string. Let's see how it works.\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwbvbttko.jl:8\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwbvbttko.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    length = 0\n    for c in string\n        length = length + 1\n    return\
    \ length\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1b54tahl.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1b54tahl.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local length = 0\n    for char in string:\n        length = length + 1\n\
    \    return length\n</code>\n<|/ a tags=julia |>\n<| c |>\nThanks for your answer!\
    \ I didn't know that `length` was a function in Julia. I'm still learning Julia\
    \ so I appreciate your help.\n<|/ c |>\n<| c |>\n`length` is a function in Julia.\
    \ `length(string)` returns the number of characters in the string. `length(string::String)`\
    \ returns the number of characters in the string `string`.\n<|/ c |>\n<| a tags=julia\
    \ |>\nIn Julia 1.2, you can use length(string) instead of length(string(string))\n\
    <|/ a dscore=2 |>\n<| a tags=julia |>\nIn Julia 1.2, you can use length(string)\
    \ instead of length(string(string))\n<|/ a dscore=2 |>\n<| a tags=julia |>\nIn\
    \ Julia 1.2, you can use length(string) instead of length(string(string))\n<|/\
    \ a dscore=1 |>\n<| a tags=julia |>\nIn Julia 1.2, you can use length(string)\
    \ instead of length(string(string))\n<|/ a dscore=1 |>\n<| a |>\nIn Julia 1.2,\
    \ you can use length(string) instead of length(string(string))\n<|/ a tags=julia\
    \ dscore=1 |>\n<| a tags=julia |>\nIn Julia 1.2, you can use length(string) instead\
    \ of length(string(string))\n<|/ a dscore=0 |>\n<| a tags=julia |>\nIn Julia 1.2,\
    \ you can use length(string) instead of length(string(string))\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\nIn Julia 1.2, you can use length(string) instead of length(string(string))\n\
    <|/ a tags=julia |>\n<| a dscore=0 |>\nIn Julia 1.2, you can use length(string)\
    \ instead of length(string(string))\n<|/ a tags=julia |>\n<| a dscore=0 |>\nIn\
    \ Julia 1.2, you can use length(string) instead of length(string(string))\n<|/\
    \ a tags=julia |>\n<| a tags=julia |>\nIn Julia 1.2, you can use length(string)\
    \ instead of length(string(string))\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nIn Julia\
    \ 1.2, you can use length(string) instead of length(string(string))\n<|/ a tags=julia\
    \ |>\n<| a tags=julia |>\nIn Julia 1.2, you can use length(string) instead of\
    \ length(string(string))\n<|/ a dscore=\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_gf4w4ac.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_gf4w4ac.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmvjl14pa.jl:8\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmvjl14pa.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local len::Int64 = 0\n    for char in string:\n        len += 1\n    return\
    \ len\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,string |>\nI like using mapslices\
    \ for these kinds of things:\n<code>\njulia> mapslices(length, [\"a\", \"b\",\
    \ \"c\"])\n3-element Array{Int64,1}:\n 3\n 3\n 3\n</code>\n<|/ a dscore=2 |>\n\
    <| a tags=julia,string |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate =\
    \ strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu_cvjknu.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpu_cvjknu.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptickpdzl.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmptickpdzl.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmptickpdzl.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == nil then return 0 else string.length\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmppovk6rbz.jl:8\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmppovk6rbz.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == null then return 0 else string.length\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp1a48lb1u.jl:8\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp1a48lb1u.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local len::Int64 = 0\n    for char in string do len = len + 1 end\n    return\
    \ len\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpmlzkx044.jl:9\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpmlzkx044.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Calculate the length of given string\n    \"\"\"\n    return\
    \ string.length()\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpoonqha79.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  type String has no field length\n  Stacktrace:\n\
    \   [1] getproperty(::String, ::Symbol) at ./Base.jl:33\n   [2] strlen(::String)\
    \ at /tmp/tmpoonqha79.jl:11\n   [3] top-level scope at /tmp/tmpoonqha79.jl:18\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpoonqha79.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpoonqha79.jl:19\n  Test threw exception\n  Expression: candidate(\"\
    x\") == 1\n  type String has no field length\n  Stacktrace:\n   [1] getproperty(::String,\
    \ ::Symbol) at ./Base.jl:33\n   [2] strlen(::String) at /tmp/tmpoonqha79.jl:11\n\
    \   [3] top-level scope at /tmp/tmpoonqha79.jl:19\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpoonqha79.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpoonqha79.jl:20\n  Test threw exception\n  Expression: candidate(\"\
    asdasnakj\") == 9\n  type String has no field length\n  Stacktrace:\n   [1] getproperty(::String,\
    \ ::Symbol) at ./Base.jl:33\n   [2] strlen(::String) at /tmp/tmpoonqha79.jl:11\n\
    \   [3] top-level scope at /tmp/tmpoonqha79.jl:20\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpoonqha79.jl:17\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoonqha79.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgr_2w115.jl:8\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgr_2w115.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.4>\n\
    strlen(\"abc\")\n</cell>\n<text>\nisascii(character::Char)::Bool\nusing Test\n\
    \n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5485v22x.jl:8\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5485v22x.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Compute length of given string\n    >>> strlen('abc')\n    3\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpptsg4k4c.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpptsg4k4c.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpptsg4k4c.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1op08q4s.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp1op08q4s.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp1op08q4s.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \n    if string == \"\" \n        then return 0\n    else \n        return\
    \ string.length()\nend\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n\
    </cell>\n<text>\nSubstring\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpe058iadd.jl:10\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpe058iadd.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local length::Int64 = 0\n    for character in string do \n        length\
    \ = length + 1\n    end\n    return length\nend\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ number of characters in a given string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp5y77w17s.jl:9\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp5y77w17s.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp988owr2p.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp988owr2p.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp988owr2p.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == ''\n        return 0\n    else \n        return string.length\n\
    end\n</cell>\n<code language=julia-1.3>\nstrlen(\"\")\n</cell>\n<code language=julia-1.3>\n\
    strlen(\" \")\n</cell>\n<code language=julia-1.3>\nstrlen(\" a \")\n</cell>\n\
    <code language=julia-1.3>\nstrlen(\" a b \")\n</cell>\n<code language=julia-1.3>\n\
    strlen(\" a b c \")\n</cell>\n<code language=julia-1.3>\nstrlen(\" a b c d \"\
    )\n</cell>\n<code language=julia-1.3>\nstrlen(\" a b c d e \")\n</cell>\n<code\
    \ language=julia-1.3>\nstrlen(\" a b c d e f \")\n</cell>\n<code language=julia-1.3>\n\
    strlen(\" a b c d e f g \")\n</cell>\n<code language=julia-1.3>\nstrlen(\" a b\
    \ c d e f g h \")\n</cell>\n<code language=julia-1.3>\nstrlen(\" a b c d e f g\
    \ h i \")\n</cell>\n<code language=julia-1.3>\nstrlen(\" a b c d e f g h i j \"\
    )\n</cell>\n<code language=julia-1.3>\nstrlen(\" a b c d e f g h i j k \")\n</cell>\n\
    <code language=julia-1.3>\nstrlen(\" a b c d e f g h i j k l \")\n</cell>\n<code\
    \ language=julia-1.3>\nstrlen(\" a b c d e f g h i j k l m \")\n</cell>\n<code\
    \ language=julia-1.3>\nstrlen(\" a b c d e f g h i j k l m n \")\n</cell>\n<code\
    \ language=julia-1.3>\nstrlen(\" a b c d e f g h i j k l m n o \")\n</cell>\n\
    <code language=julia-1.3>\nstrlen(\" a b c d e f g h i j k l m n o p \")\n</cell>\n\
    <code language=julia-1.3>\nstrlen(\" a b c d e f g h i j k l m n o p q \")\n</cell>\n\
    <code language=julia-1.3>\nstrlen(\" a b c d e f g h i j k l m n o p q r \")\n\
    </cell>\n<code language=julia-1.3>\nstrlen(\" a b c d e f g h i j k l m \nusing\
    \ Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\
    \t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmph_jgd6ze.jl:8\n [2] include(::Module, ::String) at\
    \ ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmph_jgd6ze.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    length = 0\n    for char in string do length += 1\n    return length\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't answer the question. He wants to know\
    \ how to use `length` function without using it.\n<|/ c |>\n<| c |>\nI added a\
    \ comment to the question to clarify what he is looking for.\n<|/ c |>\n<| c |>\n\
    I added a comment to the question to clarify what he is looking for.\n<|/ c |>\n\
    <| a tags=julia,string |>\nIn Julia 1.3 you can use the length function on a string\
    \ without having to import it first:\n<code>\njulia> length(\"abc\")\n3\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\nIn Julia 1.3 you can use the length function\
    \ on a string without having to import it first:\n<code>\njulia> length(\"abc\"\
    )\n3\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string |>\nIn Julia\
    \ 1.3 you can use the length function on a string without having to import it\
    \ first:\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ tags=julia,string |>\nIn Julia 1.3, you can use the length function on a string\
    \ without having to import it first:\n<code>\njulia> length(\"abc\")\n3\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\nIn Julia 1.3 you can use the length function\
    \ on a string without having to import it first:\n<code>\njulia> length(\"abc\"\
    )\n3\n</code>\n<|/ a tags=julia,string |>\n<| a dscore=0 |>\nIn Julia 1.3 you\
    \ can use the length function on a string without having to import it first:\n\
    <code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string\
    \ |>\nIn Julia 1.3 you can use the length function on a string without having\
    \ to import it first:\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=julia,string |>\nIn Julia 1.3 you can use the length function\
    \ on a string without having to import it first:\n<code>\njulia> length(\"abc\"\
    )\n3\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nusing Test\n\n@testset begin\n\
    \ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\"\
    ) == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpyx9tyara.jl:9\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpyx9tyara.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local len = string.len()\n    if len == 0 then \n        return 0\n    else\
    \ \n        return len\n    end\nend\n</cell>\n<code language=julia-1.3>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\
    \t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptea2tc79.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptea2tc79.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local len::Int64 = 0\n    for char in string:\n        len = len + 1\n  \
    \  return len\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\nIn Julia 1.3\
    \ you can use the function length\n<code>\njulia> length(\"abc\")\n3\n</code>\n\
    <|/ a dscore=5 |>\n<| a tags=julia |>\nIn Julia 1.3 you can use the function length\n\
    <code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a dscore=5 |>\n<| a dscore=4 |>\n\
    In Julia 1.3 you can use the function length\n<code>\njulia> length(\"abc\")\n\
    3\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\nIn Julia 1.3 you can use\
    \ the function length\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a dscore=4\
    \ |>\n<| a tags=julia |>\nIn Julia 1.3 you can use the function length\n<code>\n\
    julia> length(\"abc\")\n3\n</code>\n<|/ a dscore=4 |>\n<| a tags=julia |>\nIn\
    \ Julia 1.3 you can use the function length\n<code>\njulia> length(\"abc\")\n\
    3\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\nIn Julia 1.3 you can use the\
    \ function length\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia\
    \ |>\n<| a dscore=3 |>\nIn Julia 1.3 you can use the function length\n<code>\n\
    julia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia |>\n<| a dscore=3 |>\nIn\
    \ Julia 1.3 you can use the function length\n<code>\njulia> length(\"abc\")\n\
    3\n</code>\n<|/ a tags=julia |>\n<| a |>\nIn Julia 1.3 you can use the function\
    \ length\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a dscore=3 tags=julia\
    \ |>\n<| a dscore=3 |>\nIn Julia 1.3 you can use the function length\n<code>\n\
    julia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\n\
    In Julia 1.3 you can use the function length\n<code>\njulia> length(\"abc\")\n\
    3\n</code>\n<|/ a dscore=3 |>\n<| a \nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp_f25n6x.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpp_f25n6x.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp05xb6lav.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp05xb6lav.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp05xb6lav.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == ''\n        0\n    else\n        string.len()\nend\n</cell>\n\
    <code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\n@which - which function\n\
    @which - which function is a macro that prints the source code of a function or\
    \ expression. \nIt can be used inside functions to print the source code of a\
    \ function or expression.\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpq38gwiix.jl:8\n [2] include(::Module, ::String) at\
    \ ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq38gwiix.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpouhbcjk9.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpouhbcjk9.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpouhbcjk9.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp00kzxd1l.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp00kzxd1l.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp00kzxd1l.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Compute length of given string\n    \"\"\"\n    return string.len()\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5t4mqvmh.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  type String has no field len\n  Stacktrace:\n\
    \   [1] getproperty(::String, ::Symbol) at ./Base.jl:33\n   [2] strlen(::String)\
    \ at /tmp/tmp5t4mqvmh.jl:11\n   [3] top-level scope at /tmp/tmp5t4mqvmh.jl:18\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp5t4mqvmh.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmp5t4mqvmh.jl:19\n  Test threw exception\n  Expression: candidate(\"\
    x\") == 1\n  type String has no field len\n  Stacktrace:\n   [1] getproperty(::String,\
    \ ::Symbol) at ./Base.jl:33\n   [2] strlen(::String) at /tmp/tmp5t4mqvmh.jl:11\n\
    \   [3] top-level scope at /tmp/tmp5t4mqvmh.jl:19\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp5t4mqvmh.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmp5t4mqvmh.jl:20\n  Test threw exception\n  Expression: candidate(\"\
    asdasnakj\") == 9\n  type String has no field len\n  Stacktrace:\n   [1] getproperty(::String,\
    \ ::Symbol) at ./Base.jl:33\n   [2] strlen(::String) at /tmp/tmp5t4mqvmh.jl:11\n\
    \   [3] top-level scope at /tmp/tmp5t4mqvmh.jl:20\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp5t4mqvmh.jl:17\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5t4mqvmh.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\"\n        return 0\n    else\n        return string.length()\n\
    end\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\nStrings\
    \ are immutable\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6n_rhz1t.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6n_rhz1t.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsu2tp5ar.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpsu2tp5ar.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpsu2tp5ar.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_u0gupvn.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp_u0gupvn.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp_u0gupvn.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Get length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0u5db2h6.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp0u5db2h6.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp0u5db2h6.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_6_kpjby.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp_6_kpjby.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp_6_kpjby.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdwo9awgx.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpdwo9awgx.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpdwo9awgx.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local len::Int64 = 0\n    for char in string do \n        len = len + 1\n\
    \    end\n    return len\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpio676c1u.jl:9\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpio676c1u.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvryq38eo.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpvryq38eo.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpvryq38eo.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == ''\n        0\n    else\n        string.len()\nend\n</cell>\n\
    <code language=julia-1.4>\n\"\"\"\nReturn length of given string\n\"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\
    \t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpwqvpoeb7.jl:8\n [2] include(::Module, ::String) at\
    \ ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwqvpoeb7.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"abc\")\n</cell>\n<text>\nSubstrings\nJulia has many string manipulation\
    \ functions. One of them is substrings, which extracts a substring from a string.\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwmhqde37.jl:8\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwmhqde37.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local len::Int64 = 0\n    for char in string:\n        len += 1\n    return\
    \ len\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,string |>\nThe most efficient\
    \ way is to use Base.strlen\n<code>\njulia> Base.strlen(\"\")\n0\nusing Test\n\
    \n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdphz4elg.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdphz4elg.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == ''\n        return 0\n    else\n        return string.length\n\
    end\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\nReturn length of given string\n\"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpefjzww0e.jl:8\n [2] include(::Module, ::String) at\
    \ ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpefjzww0e.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local string\n    local len\n    len = 0\n    for char in string:\n     \
    \   len = len + 1\n    return len\nend\n</cell>\n<code language=julia-1.5>\nstrlen(\"\
    abc\")\n</cell>\n<text>\nReturn number of occurrences of substring in string\n\
    Return number of occurrences of substring in string\nReturn number of occurrences\
    \ of substring in string\nReturn number of occurrences of substring in string\n\
    Return number of occurrences of substring in string\nReturn number of occurrences\
    \ of substring in string\nReturn number of occurrences of substring in string\n\
    Return number of occurrences of substring in string\nReturn number of occurrences\
    \ of substring in string\nReturn number of occurrences of substring in string\n\
    Return number of occurrences of substring in string\nReturn number of occurrences\
    \ of substring in string\nReturn number of occurrences of substring in string\n\
    Return number of occurrences of substring in string\nReturn number of occurrences\
    \ of substring in string\nReturn number of occurrences of substring in string\n\
    Return number of occurrences of substring in string\nReturn number of occurrences\
    \ of substring in string\nReturn number of occurrences of substring in string\n\
    Return number of occurrences of substring in string\nReturn number of occurrences\
    \ of substring in string\nReturn number of occurrences of substring in string\n\
    Return number of occurrences of substring in string\nReturn number of occurrences\
    \ of substring in string\nReturn number of occurrences of substring in string\n\
    Return number of occurrences of substring in string\nReturn number of occurrences\
    \ of substring in string\nReturn number of occurrences of substring in string\n\
    Return number of occurrences of substring in string\nReturn number of occurrences\
    \ of substring in string\nReturn number of occurrences of substring in string\n\
    Return number of occurrences of substring in string\nReturn number of occurrences\
    \ of substring in string\nReturn number of occurrences of substring in string\n\
    Return number of occurrences of substring in string\nReturn number of occurrences\
    \ of substring in string\nReturn number of occurrences of substring in string\n\
    Return number of occurrences of substring in string\nReturn number of occurrences\
    \ of substring in string\nReturn number of occurrences of substring in string\n\
    Return number of occurrences of substring in string\nReturn number of occurrences\
    \ of substring in string\nReturn number of occurrences of substring in string\n\
    Return number of occurrences of substring in string\nReturn number of occurrences\
    \ of substring in string\nReturn number of occurrences of substring in string\n\
    Return number of occurrences of substring in string\nReturn number of occurrences\
    \ of substring in string\nReturn number of occurrences of substring in string\n\
    Return number of occurrences of substring in string\nReturn number of occurrences\
    \ of substring in string\nReturn number of occurrences of sub\nusing Test\n\n\
    @testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp69cj4kcr.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp69cj4kcr.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\"\n        return 0\n    else\n        return string.length\n\
    end\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\nSubstring\n\
    Return substring from given string from given index to given length\nIf index\
    \ is negative then start from end of string\nIf length is negative then return\
    \ empty string\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2txn3x39.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2txn3x39.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local length::Int64 = 0\n    for char in string:\n        length = length\
    \ + 1\n    return length\nend\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\"\
    )\n</cell>\n<text>\nSubstring extraction\nJulia has a built-in function substring\
    \ that extracts a substring from a given string.\nusing Test\n\n@testset begin\n\
    \ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\"\
    ) == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps8d9hoda.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmps8d9hoda.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local len::Int64 = 0\n    for char in string:\n        len = len + 1\n  \
    \  return len\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmhyavdjf.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmhyavdjf.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Compute length of given string\n    \"\"\"\n    return string.len()\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxt5guv6k.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpxt5guv6k.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpxt5guv6k.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    length = 0\n    for c in string\n        length += 1\n    return length\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nI like this answer because it uses recursion\
    \ and is easy to understand.\n<|/ c |>\n<| a tags=string,haskell,string-length\
    \ |>\n<code>\nstrlen :: String -> Int\nstrlen \"\" = 0\nstrlen str = 1 + strlen\
    \ $ tail str\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\nstrlen :: String ->\
    \ Int\nstrlen \"\" = 0\nstrlen str = length str + strlen $ tail str\n</code>\n\
    <|/ a dscore=2 tags=string,haskell,string-length |>\n<| a tags=string,haskell,string-length\
    \ |>\n<code>\nstrlen :: String -> Int\nstrlen \"\" = 0\nstrlen str = length str\
    \ + strlen $ tail str\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,haskell,string-length\
    \ |>\n<code>\nstrlen :: String -> Int\nstrlen \"\" = 0\nstrlen str = 1 + strlen\
    \ $ tail str\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,haskell,string-length\
    \ |>\n<code>\nstrlen :: String -> Int\nstrlen \"\" = 0\nstrlen str = 1 + strlen\
    \ $ tail str\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,haskell,string-length\
    \ |>\n<code>\nstrlen :: String -> Int\nstrlen \"\" = 0\nstrlen str = 1 + strlen\
    \ $ tail str\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstrlen ::\
    \ String -> Int\nstrlen \"\" = 0\nstrlen str = 1 + strlen $ tail str\n</code>\n\
    <|/ a tags=string,haskell,string-length |>\n<| a dscore=1 |>\n<code>\nstrlen ::\
    \ String -> Int\nstrlen \"\" = 0\nstrlen str = 1 + strlen $ tail str\n</code>\n\
    <|/ a tags=string,haskell,string-length |>\n<| a |>\n<code>\nstrlen :: String\
    \ -> Int\nstrlen \"\" = 0\nstrlen str = 1 + strlen $ tail str\n</code>\n<|/ a\
    \ tags=string,haskell,string-length dscore=1 |>\n<| a tags=string,haskell,string-length\
    \ |>\n<code>\nstrlen :: String -> Int\nstrlen \"\" = 0\nstrlen \nusing Test\n\n\
    @testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb2tw9mz_.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpb2tw9mz_.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfd90s0sj.jl:8\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfd90s0sj.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    length = 0\n    for char in string:\n        length = length + 1\n    return\
    \ length\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer. Your solution\
    \ is very similar to mine. My problem was that I didn't know that `length` was\
    \ a reserved word in Julia. Now I understand why my code didn't work. Thanks again.\n\
    <|/ c |>\n<| a dscore=1 |>\nI believe that your problem is that you are trying\
    \ to use length as a variable name.  In Julia, length is a reserved word.  Try\
    \ using another variable name such as len.\n<|/ a tags=julia |>\n<| c |>\nThanks\
    \ for your answer. Your solution is very similar to mine. My problem was that\
    \ I didn't know that `length` was a reserved word in Julia. Now I understand why\
    \ my code didn't work. Thanks again.\n<|/ c |>\n<| a tags=julia |>\nI believe\
    \ that your problem is that you are trying to use length as a variable name. In\
    \ Julia, length is a reserved word. Try using another variable name such as len.\n\
    <|/ a dscore=1 |>\n<| c |>\nThanks for your answer. Your solution is very similar\
    \ to mine. My problem was that I didn't know that `length` was a reserved word\
    \ in Julia. Now I understand why my code didn't work. Thanks again.\n<|/ c |>\n\
    <| a |>\nI believe that your problem is that you are trying to use length as a\
    \ variable name. In Julia, length is a reserved word. Try using another variable\
    \ name such as len.\n<|/ a tags=julia dscore=1 |>\n<| a dscore=1 |>\nI believe\
    \ that your problem is that you are trying to use length as a variable name. In\
    \ Julia, length is a reserved word. Try using another variable name such as len.\n\
    <|/ a tags=julia |>\n<| a dscore=1 |>\nThe issue is that you are trying to use\
    \ length as a variable name. In Julia, length is a reserved word. Try using another\
    \ variable name such as len.\n<|/ a tags=julia |>\n<| a tags=julia |>\nI believe\
    \ that your problem is that you are trying to use length as a variable name. In\
    \ Julia, length is a reserved word. Try using another variable name such as len.\n\
    <|/ a dscore=1 |>\n<| a tags=julia |>\nI believe that your problem is that you\
    \ are trying to use length as a variable name. In Julia, length is a reserved\
    \ word. Try using another variable name such as len.\n<|/ a dscore=1 |>\n<| a\
    \ dscore=1 |>\nI believe \nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn6yqyjus.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpn6yqyjus.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == nil then return 0 \n    else if string.len == 0 then return\
    \ 0 \n    else return string.len \nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\
    \t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpdzyblmgc.jl:8\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpdzyblmgc.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpslobccli.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpslobccli.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpslobccli.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"abc\")\n</cell>\n<text>\nStrings are immutable\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are \nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphjro94y1.jl:8\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphjro94y1.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local len::Int64 = 0\n    for char in string:\n        len = len + 1\n  \
    \  return len\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n\
    <text>\nStrings are immutable in Julia\nJulia strings are immutable, meaning that\
    \ once they are created, they cannot be changed. However, Julia has several ways\
    \ to create new strings. One of them is using the function string(). For example,\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplnygeqm7.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplnygeqm7.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local result = 1\n    for char in string:\n        result = result * len(char)\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm9eojat2.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm9eojat2.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then \n        return 0\n    else \n        return string.length()\n\
    end\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nSubstring\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy9lpd1m4.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpy9lpd1m4.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn52_twli.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpn52_twli.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpn52_twli.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf97b9r5y.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpf97b9r5y.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpf97b9r5y.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local result = 1\n    for char in string:\n        result = result * len(char)\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz9evffoz.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpz9evffoz.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp15k83_cr.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp15k83_cr.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp15k83_cr.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local len::Int64 = 0\n    for c in string\n        len = len + 1\n    end\n\
    \    return len\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of characters in that string. \nWrite a function that takes a string and returns\
    \ the number of words in that string. \nWrite a function that takes a string and\
    \ returns the number of sentences in that string. \nWrite a function that takes\
    \ a string and returns the number of characters in that string divided by the\
    \ number of words in that string. \nWrite a function that takes a string and returns\
    \ the number of characters in that string divided by the number of sentences in\
    \ that string. \nWrite a function that takes a string and returns the number of\
    \ characters in that string divided by the number of words in that string divided\
    \ by the number of sentences in that string. \nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl033l77r.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpl033l77r.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == ''\n        return 0\n    else\n        return string.length\n\
    end\n</cell>\n<code language=julia-1.4>\nstrlen(\"abc\")\n</cell>\n<text>\nSubstrings\n\
    Julia has many string functions. Here are some of them:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp8_89tn1p.jl:8\n [2] include(::Module, ::String) at\
    \ ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8_89tn1p.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_y_0xha1.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp_y_0xha1.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp_y_0xha1.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6joqt1c2.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp6joqt1c2.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp6joqt1c2.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp94tfb50i.jl:8\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp94tfb50i.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_kj7bw8r.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp_kj7bw8r.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp_kj7bw8r.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local len::Int64 = 0\n    for c in string:\n        len = len + 1\n    return\
    \ len\nend\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of characters in a string\
    \ that are not letters.\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg53rjq56.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg53rjq56.jl:10\n"
  exit_code: 1
  status: Exception
