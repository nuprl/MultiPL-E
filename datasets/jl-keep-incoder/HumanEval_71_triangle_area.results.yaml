name: HumanEval_71_triangle_area
language: julia
results:
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \     else return -1\n    else return -1\nend\n</cell>\n<code language=julia-1.0>\n\
    triangle_area(3, 4, 5)\n</cell>\n<code language=julia-1.0>\ntriangle_area(1, 2,\
    \ 10)\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the area\
    \ of a triangle given three sides a, b, and c. \nThe function should return -1\
    \ if the three sides form an invalid triangle. \nOtherwise it should return the\
    \ area of the triangle rounded to 2 decimal points.\nusing Test\n\n@testset begin\n\
    \ncandidate = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1,\
    \ 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2, 2,\
    \ 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5, 7)\
    \ == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1) ==\
    \ 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp6mp3ghkh.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp6mp3ghkh.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c && a + c > b && b + c > a \n        then return (a * b) /\
    \ c\n        else return -1\n    else return -1\nend\n</cell>\n<code language=julia-1.5>\n\
    triangle_area(3, 4, 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2,\
    \ 10)\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number is\
    \ prime or not. \nA number is prime if it has no divisors other than 1 and itself.\n\
    Example: \n    prime(12) == true\n    prime(13) == false\n    prime(20) == true\n\
    \    prime(21) == false\n    prime(22) == true\n    prime(23) == false\n    prime(24)\
    \ == true\n    prime(25) == false\n    prime(25) == true\n    prime(25) == true\n\
    \    prime(25) == true\n    prime(25) == true\n    prime(25) == true\n    prime(25)\
    \ == true\n    prime(25) == true\n    prime(25) == true\n    prime(25) == true\n\
    \    prime(25) == true\n    prime(25) == true\n    prime(25) == true\n    prime(25)\
    \ == true\n    prime(25) == true\n    prime(25) == true\n    prime(25) == true\n\
    \    prime(25) == true\n    prime(25) == true\n    prime(25) == true\n    prime(25)\
    \ == true\n    prime(25) == true\n    prime(25) == true\n    prime(25) == true\n\
    \    prime(25) == true\n    prime(25) == true\n    prime(25) == true\n    prime(25)\
    \ == true\n    prime(25) == true\n    prime(25) == true\n    prime(25) == true\n\
    \    prime(25) == true\n    prime(25) == true\n    prime(25) == true\n    prime(25)\
    \ == true\n    prime(25) == true\n    prime(25) == true\n    prime(25) == true\n\
    \    prime(25) == true\n    prime(25) == true\n    prime(25) == true\n    prime(25)\
    \ == true\n    prime(25) == true\n    prime(25) == true\n    prime(25) == true\n\
    \    prime(25) == true\n    prime(25) == true\n    prime(25) == true\n    prime(25)\
    \ == true\n    prime(25) == true\n    prime(25) == true\n    prime\nusing Test\n\
    \n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3, 4, 5) ==\
    \ 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\
    \t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10,\
    \ 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1,\
    \ 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpgr1evg_a.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpgr1evg_a.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \     else return -1\n    else return -1\nend\n</cell>\n<code language=julia-1.5>\n\
    triangle_area(3, 4, 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2,\
    \ 10)\n</cell>\n<text>\nExercise\nWrite a function that takes in three sides of\
    \ a triangle and returns the area rounded to 2 decimal points if it is a valid\
    \ triangle. Otherwise return -1.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2,\
    \ 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2)\
    \ == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5, 7) ==\
    \ 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\
    \t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp0goh29al.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp0goh29al.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c && a + c > b && b + c > a \n        then return (a * b *\
    \ c)/2\n        else return -1\n</code>\n<|/ a tags=julia |>\n<| a |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpjtvfz3mi.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpjtvfz3mi.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c && a + c > b && b + c > a \n        then 0.5 * triangle_area(a,\
    \ b, c)\n        else -1\n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0.5\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpzcxf_8_3.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpzcxf_8_3.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \     else return -1\n    else return -1\nend\n</cell>\n<code language=julia-1.5>\n\
    triangle_area(3, 4, 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2,\
    \ 10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the area of\
    \ a triangle given its sides. \nThe function should take in three integers a,\
    \ b, and c.\nThe function should return -1 if the triangle is not valid. \nOtherwise\
    \ it should return the area of the triangle rounded to 2 decimal points.\nExample:\
    \ \ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\nHint: \nThe\
    \ area of a triangle is equal to the sum of its two sides multiplied by the third.\n\
    using Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmph129xjr5.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmph129xjr5.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b\n        triangle_area = (a+b+c)/2\n\
    \    else\n        triangle_area = -1\n    end\n    return triangle_area\nend\n\
    </cell>\n<code language=julia-1.5>\ntriangle_area(3, 4, 5)\n</cell>\n<code language=julia-1.5>\n\
    triangle_area(1, 2, 10)\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in the\
    \ vector. \nExample: \n    vector_square([1, 2, 3]) == 9\n    vector_square([-1,\
    \ 2, -3]) == -9\n    vector_square([-1, 2, -3]) == 9\n    vector_square([-1, 2,\
    \ -3]) == -9\n    vector_square([-1, 2, -3]) == 9\n    vector_square([-1, 2, -3])\
    \ == -9\n    vector_square([-1, 2, -3]) == 9\n    vector_square([-1, 2, -3]) ==\
    \ -9\n    vector_square([-1, 2, -3]) == 9\n    vector_square([-1, 2, -3]) == -9\n\
    \    vector_square([-1, 2, -3]) == 9\n    vector_square([-1, 2, -3]) == -9\n \
    \   vector_square([-1, 2, -3]) == 9\n    vector_square([-1, 2, -3]) == -9\n  \
    \  vector_square([-1, 2, -3]) == 9\n    vector_square([-1, 2, -3]) == -9\n   \
    \ vector_square([-1, 2, -3]) == 9\n    vector_square([-1, 2, -3]) == -9\n    vector_square([-1,\
    \ 2, -3]) == 9\n    vector_square([-1, 2, -3]) == -9\n    vector_square([-1, 2,\
    \ -3]) == 9\n    vector_square([-1, 2, -3]) == -9\n    vector_square([-1, 2, -3])\
    \ == 9\n    vector_square([-1, 2, -3]) == -9\n    vector_square([-1, 2, -3]) ==\
    \ 9\n    vector_square([-1, 2, -3]) == -9\n    vector_square([-1, 2, -3]) == 9\n\
    \    vector_square([-1, 2, -3]) == -9\n    vector_square([-1, 2, -3]) == 9\n \
    \   vector_square([-1, 2, -3]) == -9\n    vector_square([-1, 2, -3]) == 9\n  \
    \  vector_square([-1, 2, -3]) == -9\n    vector_square([-1, 2, -3]) == 9\n   \
    \ vector_square([-1, 2, -3]) == -9\n    vector_square([-1, 2, -3]) == 9\n    vector_square([-1,\
    \ 2, -3]) == -9\n    vector_square([-1, 2, -3]) == \nusing Test\n\n@testset begin\n\
    \ncandidate = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1,\
    \ 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2, 2,\
    \ 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5, 7)\
    \ == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1) ==\
    \ 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6j5awk15.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6j5awk15.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b\n        return (a+b+c)/2\n    else\n\
    \        return -1\n    end\nend\n</cell>\n<code language=julia-1.5>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2, 10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the area of a triangle given\
    \ its three sides. \nThe function should take in three numbers and return one\
    \ number.\nThe function should return -1 if the three sides form a non-valid triangle\
    \ or \nthe area of the triangle if the three sides form a valid triangle.\nExample:\
    \ \ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\nHint: \nThe\
    \ area of a triangle is equal to the sum of two sides multiplied by the third.\n\
    The formula for the area of a triangle is:\n$A = \\sqrt{s(s-a)(s-b)(s-c)}$\nwhere\
    \ $s$ is the side of the triangle, $a$ and $b$ are the lengths of the sides, $c$\
    \ is the hypotenuse.\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\
    \t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4,\
    \ 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2,\
    \ 3) == -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3)\
    \ == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplzs9ch8p.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplzs9ch8p.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \     else return -1\n    else return -1\nend\n</cell>\n<code language=julia-1.5>\n\
    triangle_area(3, 4, 5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a number as input and returns the number of digits in that number. \nExample:\
    \ \n    digits(123) = 2 \n    digits(1234) = 2 \n    digits(1234567) = 7 \n  \
    \  digits(123456789) = 8 \n    digits(1234567890) = 8 \n    digits(12345678901)\
    \ = 9 \n    digits(123456789012) = 10 \n    digits(1234567890123) = 10 \n    digits(12345678901234)\
    \ = 10 \n    digits(12345678901234567) = 11 \n    digits(123456789012345678) =\
    \ 12 \n    digits(1234567890123456780) = 12 \n    digits(12345678901234567801)\
    \ = 12 \n    digits(123456789012345678012) = 12 \n    digits(1234567890123456780123)\
    \ = 12 \n    digits(12345678901234567801234) = 12 \n    digits(12345678901234567801234567)\
    \ = 13 \n    digits(123456789012345678012345678) = 13 \n    digits(1234567890123456780123456780)\
    \ = 13 \n    digits(12345678901234567801234567801) = 13 \n    digits(123456789012345678012345678012)\
    \ = 13 \n    digits(1234567890123456780123456780123) = 13 \n    digits(12345678901234567801234567801234)\
    \ = 13 \n    digits(12345678901234567801234567801234567) = 14 \n    digits(123456789012345678012345678012345678)\
    \ = 14 \n    digits(1234567890123456780123456780123456780) = 14 \n    digits(12345678901234567801234567801234567801)\
    \ = 14 \n    digits(123456789012345678012345678012345678012) = 14 \n    digits(1234567890123456780123456780123456780123)\
    \ = 14 \n    digits(12345678901234567801234567801234567801234) = 14 \n    digits(12345678901234567801234567801234567801234567)\
    \ = 15 \n    digits(123456789012345678012345678012345678012345678) = 15 \n   \
    \ digits(12345678901234567\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\
    \t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4,\
    \ 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2,\
    \ 3) == -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3)\
    \ == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp6s9ed1qm.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp6s9ed1qm.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c && a + c > b && b + c > a \n        then return (a * b *\
    \ c)/2\n        else return -1\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work\
    \ if `a`, `b` and `c` are negative numbers. `(a * b * c)/2` will give a negative\
    \ number if all three are negative.\n<|/ c |>\n<| c |>\nI agree, I have edited\
    \ the answer to include a check for negative numbers. Thanks.\n<|/ c |>\n<| a\
    \ tags=math,geometry,python,triangle |>\n<code>\ndef triangle_area(a, b, c):\n\
    \    if a + b > c and a + c > b and b + c > a:\n        return (a * b * c)/2\n\
    \    else:\n        return -1\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis doesn't\
    \ work if `a`, `b` and `c` are negative numbers. `(a * b * c)/2` will give a negative\
    \ number if all three are negative.\n<|/ c |>\n<| a dscore=4 |>\n<code>\ndef triangle_area(a,\
    \ b, c):\n    if a + b > c and a + c > b and b + c > a:\n        return (a * b\
    \ * c)/2\n    else:\n        return -1\n</code>\n<|/ a tags=math,geometry,python,triangle\
    \ |>\n<| c |>\nThis doesn't work if `a`, `b` and `c` are negative numbers. `(a\
    \ * b * c)/2` will give a negative number if all three are negative.\n<|/ c |>\n\
    <| a dscore=4 |>\n<code>\ndef triangle_area(a, b, c):\n    if a + b > c and a\
    \ + c > b and b + c > a:\n        return (a * b * c)/2\n    else:\n        return\
    \ -1\n</code>\n<|/ a tags=math,geometry,python,triangle |>\n<| c |>\nThis doesn't\
    \ work if `a`, `b` and `c` are negative numbers. `(a * b * c)/2` will give a negative\
    \ number if all three are negative.\n<|/ c |>\n<| c |>\nThis doesn't work if `a`,\
    \ `b` and `c` are negative numbers. `(a * b * c)/2` will give a negative number\
    \ if all three are negative.\n<|/ c |>\n<| a tags=math,geometry,python,triangle\
    \ |>\n<code>\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and\
    \ b + c > \nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpeseh1rdl.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpeseh1rdl.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a > b and a > c \n        then return (a * b) / 2\n    else if b >\
    \ c and b > a \n        then return (b * c) / 2\n    else if c > a and c > b \n\
    \        then return (c * a) / 2\n    else return -1\nend\n</cell>\n<code language=julia-1.5>\n\
    triangle_area(3, 4, 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2,\
    \ 10)\n</cell>\n<text>\nExercise: Write a function that checks if a number is\
    \ even.\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"a\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpflg5d5bd.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpflg5d5bd.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \     else return -1\n    else return -1\nend\n</cell>\n<code language=julia-1.5>\n\
    triangle_area(3, 4, 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2,\
    \ 10)\n</cell>\n<text>\nExercise: Write a function that takes in three sides of\
    \ a triangle and returns the area of the triangle rounded to 2 decimal points\
    \ if it forms a valid triangle. Otherwise return -1.\nusing Test\n\n@testset begin\n\
    \ncandidate = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1,\
    \ 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2, 2,\
    \ 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5, 7)\
    \ == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1) ==\
    \ 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpe2vbialk.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpe2vbialk.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a > b and a > c \n        then return (b * b) - (a * c)\n    else if\
    \ a < b and a < c \n        then return (b * b) - (a * c)\n    else if a > b and\
    \ a < c \n        then return (b * b) - (a * c)\n    else if a < b and a > c \n\
    \        then return (b * b) - (a * c)\n    else return -1\nend\n</cell>\n<code\
    \ language=julia-1.5>\ntriangle_area(3, 4, 5)\n</cell>\n<code language=julia-1.5>\n\
    triangle_area(1, 2, 10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the area of a triangle given its sides. \nThe function should take in three\
    \ sides and return its area rounded to 2 decimal points.\nThe function should\
    \ return -1 if the three sides do not form a valid triangle.\nExample: \ntriangle_area(3,\
    \ 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\nHint: \nThe formula for the area\
    \ of a triangle is:\n$A = \\sqrt{s^2 + t^2}$\nwhere $s$ is the hypotenuse and\
    \ $t$ is the side opposite the hypotenuse.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2,\
    \ 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2)\
    \ == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5, 7) ==\
    \ 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\
    \t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"a\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj5wz_mvn.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj5wz_mvn.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && c+a > b && b+c > a \n        then return (a+b+c)/2\n   \
    \     else return -1\n    end\nend\n</cell>\n<code language=julia-1.0>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<code language=julia-1.0>\ntriangle_area(1, 2, 10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector. \nExample: \n    vector_square([1,\
    \ 2, 3]) == 9\n    vector_square([4, 6, 8]) == 40\n    vector_square([5, 7, 9])\
    \ == 70\n    vector_square([10, 11, 12]) == 1440\n    vector_square([13, 14, 15])\
    \ == 1575\n    vector_square([16, 17, 18]) == 1920\n    vector_square([19, 20,\
    \ 21]) == 2092\n    vector_square([22, 23, 24]) == 2468\n    vector_square([25,\
    \ 26, 27]) == 2730\n    vector_square([28, 29, 30]) == 3090\n    vector_square([31,\
    \ 32, 33]) == 3460\n    vector_square([34, 35, 36]) == 3630\n    vector_square([37,\
    \ 38, 39]) == 3900\n    vector_square([40, 41, 42]) == 4160\n    vector_square([43,\
    \ 44, 45]) == 4530\n    vector_square([46, 47, 48]) == 4800\n    vector_square([49,\
    \ 50, 51]) == 5160\n    vector_square([52, 53, 54]) == 5430\n    vector_square([55,\
    \ 56, 57]) == 5700\n    vector_square([58, 59, 60]) == 5960\n    vector_square([61,\
    \ 62, 63]) == 6330\n    vector_square([64, 65, 66]) == 6600\n    vector_square([67,\
    \ 68, 69]) == 6960\n    vector_square([70, 71, 72]) == 7330\n    vector_square([73,\
    \ 74, 75]) == 7500\n    vector_square([76, 77, 78]) == 7840\n    vector_square([79,\
    \ 80, 81]) == 7960\n    vector_square([82, 83, 84]) == 8330\n    vector_square([85,\
    \ 86, 87]) == 8600\n    vector_square([88, 89, 90]) == 8960\n    vector_square([91,\
    \ 92, 93]) == 9330\n    vector_square([94, 95, 96]) == 9600\n    vector_square([97,\
    \ 98, 99]) == 9960\n    vector\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\
    \t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4,\
    \ 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2,\
    \ 3) == -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3)\
    \ == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpjahl_sqh.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpjahl_sqh.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a > b and a > c \n        return (a * b) / c\n    else if a < b and\
    \ a < c \n        return (b * c) / a\n    else if a < c \n        return -1\n\
    \    else \n        return -1\n</code>\n<|/ a tags=julia |>\n<| a |>\nThe accepted\
    \ answer by is correct, but I thought I'd add some explanation as to why it works.\n\
    The accepted answer uses if/else statements to determine which of the three possible\
    \ triangles is valid. However, the accepted answer does not take into account\
    \ the fact that there are three possible triangles that can form a triangle with\
    \ sides a, b, and c. \nTo determine which of the three possible triangles is valid,\
    \ the function needs to determine which of the three possible triangles has the\
    \ smallest area and which has the largest area. \nTo determine which of the three\
    \ possible triangles has the smallest area, the function needs to determine which\
    \ of the three possible triangles has the largest area. \nTo determine which of\
    \ the three possible triangles has the largest area, the function needs to determine\
    \ which of the three possible triangles has the smallest area. \nTo determine\
    \ which of the three possible triangles has the smallest area, the function needs\
    \ to determine which of the three possible triangles has the largest area. \n\
    To determine which of the three possible triangles has the largest area, the function\
    \ needs to determine which of the three possible triangles has the smallest area.\
    \ \nTo determine which of the three possible triangles has the smallest area,\
    \ the function needs to determine which of the three possible triangles has the\
    \ largest area. \nTo determine which of the three possible triangles has the largest\
    \ area, the function needs to determine which of the three possible triangles\
    \ has the smallest area. \nTo determine which of the three possible triangles\
    \ has the smallest area, the function needs to determine which of the three possible\
    \ triangles has the largest area. \nTo determine which of the three possible triangles\
    \ has the largest area, the function needs to determine which of the three possible\
    \ triangles has the smallest area. \nTo determine which of the three possible\
    \ triangles has the smallest area, the function needs to determine which of the\
    \ three possible triangles has the largest area. \nTo determine which of the three\
    \ possible triangles has the largest area, the function needs to determine which\
    \ of the three possible triangles has the smallest area. \nTo determine which\
    \ of the three possible triangles has the smallest area, the function needs to\
    \ determine which of the three possible triangles has the largest area. \nTo determine\
    \ which of the three possible triangles has the largest area, the function needs\
    \ to determine which of the three possible triangles has the smallest area. \n\
    To determine which of the three possible triangles has the smallest area, the\
    \ function needs to determine which of the three possible triangles has the largest\
    \ area. \nTo \nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t\
    @test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4,\
    \ 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2,\
    \ 3) == -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3)\
    \ == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"a\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppe56ai98.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppe56ai98.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c || a + c > b || b + c > a \n        return -1\n    else \n\
    \        return (a * b + c * a - b * c) / (2.0 * a)\nend\n</cell>\n<code language=julia-1.5>\n\
    triangle_area(3, 4, 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2,\
    \ 10)\n</cell>\n<text>\nExercise: Write a function that returns the area of a\
    \ triangle given its sides a, b, and c.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2,\
    \ 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2)\
    \ == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5, 7) ==\
    \ 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\
    \t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptktgxe9p.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptktgxe9p.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c and a+c > b and b+c > a then \n        area_tri = Float64((a\
    \ + b + c)/2)\n        return area_tri\n    else \n        return -1\nend\n</cell>\n\
    <code language=julia-1.5>\ntriangle_area(3, 4, 5)\n</cell>\n<code language=julia-1.5>\n\
    triangle_area(1, 2, 10)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the area of a triangle given its three sides. \nThe function should take in\
    \ three numbers and return one number.\nThe function should return -1 if the three\
    \ sides form a non-valid triangle.\nExample: triangle_area(3, 4, 5) == 6.00\n\
    Example: triangle_area(1, 2, 10) == -1\nHint: You can use the function triangle_area\
    \ defined above.\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\
    \t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4,\
    \ 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2,\
    \ 3) == -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3)\
    \ == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"a\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgdur4uvn.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgdur4uvn.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c && a + c > b && b + c > a \n        then return (a * b *\
    \ c)/2\n        else return -1\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp2lk4tixy.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp2lk4tixy.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \ else return -1\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis doesn't work.\
    \ `triangle_area(3, 4, 5) == 6.00` but `triangle_area(1, 2, 10) == -1`\n<|/ c\
    \ |>\n<| c |>\nI fixed the bug. Thanks for pointing it out. Now it works.\n<|/\
    \ c |>\n<| a tags=julia |>\nThe accepted answer does not work for all cases. Here\
    \ is a more general solution that works for any number of sides:\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3, 4,\
    \ 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5) ==\
    \ 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\
    \t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1,\
    \ 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpf09mvfo8.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpf09mvfo8.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a > b and a > c \n        then return (a * b) / c\n    else if b >\
    \ c \n        then return (b * c) / a\n    else \n        then return -1\n   \
    \ end\nend\n</cell>\n<code language=julia-1.5>\ntriangle_area(3, 4, 5)\n</cell>\n\
    <text>\nExercise\nWrite a function that returns the area of a triangle given its\
    \ sides. \nThe function should take in three sides and return the area rounded\
    \ to 2 decimal points.\nThe function should return -1 if the three sides form\
    \ an invalid triangle. \nExample: \ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1,\
    \ 2, 10) == -1\nHint: \nThe area of a triangle is equal to the product of the\
    \ lengths of the sides times each other. \nThe formula for the area of a triangle\
    \ is: \n$A = \\sqrt{s(s-a)^2 + s(s-b)^2 + s(s-c)^2}$\nusing Test\n\n@testset begin\n\
    \ncandidate = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1,\
    \ 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2, 2,\
    \ 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5, 7)\
    \ == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1) ==\
    \ 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"a\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfa3q1za8.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfa3q1za8.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \ else return -1\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia,if-statement\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp5_0wjy0y.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp5_0wjy0y.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a > b and a > c \n        then return (a * b) / c\n    else if a >\
    \ c \n        then return (a * b) / c\n    else if b > c \n        then return\
    \ (a * b) / c\n    else return -1\nend\n</cell>\n<code language=julia-1.5>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2, 10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes in three sides of a triangle and\
    \ returns the area of the triangle. \nIf the three sides form a valid triangle,\
    \ return the area rounded to 2 decimal points. \nOtherwise return -1\nExample:\
    \ \ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\nHint: \nThe\
    \ area of a triangle is equal to the product of its lengths times its base \n\
    (base being the height above the triangle). \nThe formula for the area of a triangle\
    \ is: \n$A = \\sqrt{s^2 + t^2}$\nwhere $s$ and $t$ are the lengths of the sides,\
    \ $A$ is the area of the triangle, and $s^2 + t^2$ is the area of the hypotenuse\
    \ of the triangle. \nThe formula for the hypotenuse of a triangle is: \n$H = \\\
    frac{s}{t}$\nwhere $s$ and $t$ are the lengths of the sides, $H$ is the hypotenuse\
    \ of the triangle, and $s^2 + t^2$ is the area of the hypotenuse of the triangle.\
    \ \nThe formula for the area of a triangle rounded to 2 decimal points is: \n\
    $A = \\sqrt{s^2 + t^2}$\nwhere $s$ and $t$ are the lengths of the sides, $A$ is\
    \ the area of the triangle, and $s^2 + t^2$ is the area of the hypotenuse of the\
    \ triangle. \nThe formula for the hypotenuse of a triangle rounded to 2 decimal\
    \ points is: \n$H = \\frac{s}{t}$\nwhere $s$ and $t$ are the lengths of the sides,\
    \ $H$ is the hypotenuse of the triangle, and $s^2 + t^2$ is the area of the hypotenuse\
    \ of the triangle. \nThe formula for the area of a triangle rounded to 2 decimal\
    \ points is: \n$A = \\sqrt{s^2 + t^2}$\nwhere $s$ and $t$ are the lengths of the\
    \ sides, $A$ is the area of the triangle, and $s^2 + t^2$ is the area of the hypotenuse\
    \ of the triangle. \nThe formula for the hypotenuse of a triangle rounded to 2\
    \ decimal points is: \nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\
    \t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4,\
    \ 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2,\
    \ 3) == -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3)\
    \ == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"a\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpilh0dsq2.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpilh0dsq2.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        return (a+b+c)/2\n    else\n\
    \        return -1\nend\n</cell>\n<code language=julia-1.5>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes in three points\
    \ and returns the area of the triangle formed by these three points.\nThe function\
    \ should return -1 if the three points do not form a valid triangle. Otherwise\
    \ it should return the area of the triangle rounded to 2 decimal points.\nExample:\
    \ \ntriangle_area(Point(1, 2), Point(2, 3), Point(3, 4)) == 6.00\ntriangle_area(Point(1,\
    \ 2), Point(2, 3), Point(3, 4)) == -1\ntriangle_area(Point(1, 2), Point(2, 3),\
    \ Point(3, 4)) == -1\ntriangle_area(Point(1, 2), Point(2, 3), Point(3, 4)) ==\
    \ -1\ntriangle_area(Point(1, 2), Point(2, 3), Point(3, 4)) == -1\ntriangle_area(Point(1,\
    \ 2), Point(2, 3), Point(3, 4)) == -1\ntriangle_area(Point(1, 2), Point(2, 3),\
    \ Point(3, 4)) == -1\ntriangle_area(Point(1, 2), Point(2, 3), Point(3, 4)) ==\
    \ -1\ntriangle_area(Point(1, 2), Point(2, 3), Point(3, 4)) == -1\ntriangle_area(Point(1,\
    \ 2), Point(2, 3), Point(3, 4)) == -1\ntriangle_area(Point(1, 2), Point(2, 3),\
    \ Point(3, 4)) == -1\ntriangle_area(Point(1, 2), Point(2, 3), Point(3, 4)) ==\
    \ -1\ntriangle_area(Point(1, 2), Point(2, 3), Point(3, 4)) == -1\ntriangle_area(Point(1,\
    \ 2), Point(2, 3), Point(3, 4)) == -1\ntriangle_area(Point(1, 2), Point(2, 3),\
    \ Point(3, 4)) == -1\ntriangle_area(Point(1, 2), Point(2, 3), Point(3, 4)) ==\
    \ -1\ntriangle_area(Point(1, 2), Point(2, 3), Point(3, 4)) == -1\ntriangle_area(Point(1,\
    \ 2), Point(2, 3), Point(3, 4)) == -1\ntriangle_area(Point(1, 2), Point(2, 3),\
    \ Point(3, 4)) == -1\ntriangle_area(Point(1, 2), Point(2, 3), Point(3, 4)) ==\
    \ -1\ntriangle_area(Point(1, 2), Point(2, 3), Point(3, 4)) == -1\ntriangle_area(Point(1,\
    \ 2), Point(2, 3), Point(3, 4)) == -1\ntriangle_area(Point(1, 2), Point(2, 3),\
    \ Point(3, 4)) == -1\ntriangle_area(Point(1, 2), Point(2, 3), Point(3, 4)) ==\
    \ -1\ntriangle_area(Point(1, 2), Point(2, 3), Point(3, 4)) == -1\ntriangle_\n\
    using Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8usa5s5e.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8usa5s5e.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c && a + c > b && b + c > a \n        then return (a * b *\
    \ c)/2\n        else return -1\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    triangle_area(3, 4, 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2,\
    \ 10)\n</cell>\n<text>\nExercise\nWrite a function that returns the area of a\
    \ triangle given its sides. \nThe function should take three arguments: a, b,\
    \ c.\nThe function should return -1 if the triangle is not valid, otherwise it\
    \ should return the area of the triangle rounded to 2 decimal points.\nusing Test\n\
    \n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3, 4, 5) ==\
    \ 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\
    \t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10,\
    \ 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1,\
    \ 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpus20ta1f.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpus20ta1f.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        return (a+b+c)/2\n    else\
    \ \n        return -1\nend\n</cell>\n<code language=julia-1.0>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<code language=julia-1.0>\ntriangle_area(1, 2, 10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the area of a triangle given\
    \ its sides. \nThe function should take in three sides and return its area rounded\
    \ to 2 decimal points.\nIf the sides form a triangle the function should return\
    \ its area rounded to 2 decimal points.\nIf the sides do not form a triangle the\
    \ function should return -1.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1,\
    \ 2, 10) == -1\nHint: You can use the function triangle_area defined above.\n\
    using Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphff4qsyx.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphff4qsyx.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a > b and a > c \n        then return (a * b) / c\n    else if b >\
    \ a and b > c \n        then return (b * a) / c\n    else if c > a and c > b \n\
    \        then return (c * a) / b\n    else return -1\nend\n</cell>\n<code language=julia-1.5>\n\
    triangle_area(3, 4, 5)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the area of a triangle given its three sides. \nThe function should take in\
    \ three numbers as arguments and return the area rounded to 2 decimal points.\n\
    Example: triangle_area(3, 4, 5) == 6.00\nHint: use triangle_area to solve the\
    \ problem\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"a\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp12ihlt72.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp12ihlt72.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && c+a > b && b+c > a \n        then return (a+b+c)/2\n   \
    \     else return -1\n    else return -1\nend\n</cell>\n<code language=julia-1.5>\n\
    triangle_area(3, 4, 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2,\
    \ 10)\n</cell>\n<text>\nExercise: Write a function that calculates the area of\
    \ a triangle given its three sides. \n    Use if/else statements to determine\
    \ if the sides are valid triangles. \n    Use a while loop to calculate the area\
    \ until the sides are all valid.\n    Example:\n    triangle_area(3, 4, 5) ==\
    \ 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t\
    @test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2,\
    \ 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5,\
    \ 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1)\
    \ == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpb11618zl.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpb11618zl.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a > b and a > c \n        then return (a * b) / 2\n    else if b >\
    \ a and b > c \n        then return (b * a) / 2\n    else if c > a and c > b \n\
    \        then return (c * a) / 2\n    else return -1\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\
    \t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4,\
    \ 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2,\
    \ 3) == -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3)\
    \ == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"a\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpum1n1blc.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpum1n1blc.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c && a + c > b && b + c > a \n        then return (a * b *\
    \ c)/2\n        else return -1\n</code>\n<|/ a tags=julia |>\n<| a tags=julia\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpdrocrdj5.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpdrocrdj5.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c && a + c > b && b + c > a \n        then 0.5 * sqrt(a * b\
    \ * c)\n        else -1\n    end\nend\n</cell>\n<code language=julia-1.0>\n@assert\
    \ triangle_area(3, 4, 5) == 6.00\n@assert triangle_area(1, 2, 10) == -1\n</cell>\n\
    <text>\nExercise 3\nWrite a function that checks if a number is prime. \nA number\
    \ is prime if all its factors are smaller than the number itself. \nThe function\
    \ should take one number as input and return a Bool.\nExample: \nisPrime(12) returns\
    \ true\nisPrime(13) returns false\nisPrime(14) returns true\nisPrime(15) returns\
    \ false\nisPrime(16) returns true\nisPrime(17) returns false\nisPrime(18) returns\
    \ true\nisPrime(19) returns false\nisPrime(20) returns true\nisPrime(21) returns\
    \ false\nisPrime(22) returns true\nisPrime(23) returns false\nisPrime(24) returns\
    \ true\nisPrime(25) returns false\nisPrime(26) returns true\nisPrime(27) returns\
    \ false\nisPrime(28) returns true\nisPrime(29) returns false\nisPrime(30) returns\
    \ true\nisPrime(31) returns false\nisPrime(32) returns true\nisPrime(33) returns\
    \ false\nisPrime(34) returns true\nisPrime(35) returns false\nisPrime(36) returns\
    \ true\nisPrime(37) returns false\nisPrime(38) returns true\nisPrime(39) returns\
    \ false\nisPrime(40) returns true\nisPrime(41) returns false\nisPrime(42) returns\
    \ true\nisPrime(43) returns false\nisPrime(44) returns true\nisPrime(45) returns\
    \ false\nisPrime(46) returns true\nisPrime(47) returns false\nisPrime(48) returns\
    \ true\nisPrime(49) returns false\nisPrime(50) returns true\nisPrime(51) returns\
    \ false\nisPrime(52) returns true\nisPrime(53) returns false\nisPrime(54) returns\
    \ true\nisPrime(55) returns false\nisPrime\nusing Test\n\n@testset begin\n\ncandidate\
    \ = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2,\
    \ 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2)\
    \ == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5, 7) ==\
    \ 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\
    \t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0.5\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpeodv7k51.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpeodv7k51.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c && a + c > b && b + c > a \n        then return (a * b *\
    \ c)/2\n    else return -1\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp5ftgljqm.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp5ftgljqm.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \     else return -1\n    else return -1\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that checks if a number is prime or not. \nThe function should take\
    \ in a single number as an argument and return a Boolean value.\nIf the number\
    \ is prime it should return true. Otherwise it should return false.\nExamples:\n\
    is_prime(2) == true\nis_prime(7) == false\nis_prime(11) == true\nis_prime(12)\
    \ == false\nis_prime(13) == true\nis_prime(14) == false\nis_prime(15) == true\n\
    is_prime(16) == false\nis_prime(17) == true\nis_prime(18) == false\nis_prime(19)\
    \ == true\nis_prime(20) == false\nis_prime(21) == true\nis_prime(22) == false\n\
    is_prime(23) == true\nis_prime(24) == false\nis_prime(25) == true\nis_prime(26)\
    \ == false\nis_prime(27) == true\nis_prime(28) == false\nis_prime(29) == true\n\
    is_prime(30) == false\nis_prime(31) == true\nis_prime(32) == false\nis_prime(33)\
    \ == true\nis_prime(34) == false\nis_prime(35) == true\nis_prime(36) == false\n\
    is_prime(37) == true\nis_prime(38) == false\nis_prime(39) == true\nis_prime(40)\
    \ == false\nis_prime(41) == true\nis_prime(42) == false\nis_prime(43) == true\n\
    is_prime(44) == false\nis_prime(45) == true\nis_prime(46) == false\nis_prime(47)\
    \ == true\nis_prime(48) == false\nis_prime(49) == true\nis_prime(50) == false\n\
    is_prime(51) == true\nis_prime(52) == false\nis_prime(53) == true\nis_prime(54)\
    \ == false\nis_prime(55) == true\nis_prime(56) == false\nis_prime(57) == true\n\
    is_prime(58) == false\nis_prime(59) == true\nis_prime(60) == false\nis_prime(61)\
    \ == true\nis_prime(62) == false\nis_prime(63) == true\nis_prime(64) == false\n\
    is_prime(65) == true\nis_prime(66) == false\nis_prime(67) == true\nis_prime(68)\
    \ == false\nis_prime(\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\
    \t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4,\
    \ 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2,\
    \ 3) == -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3)\
    \ == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpb6a86p3y.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpb6a86p3y.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a > b and a > c \n        then return (a * b) / c\n    else if a >\
    \ c \n        then return -1\n    else if b > c \n        then return -1\n   \
    \ else return -1\nend\n\"\"\"\n    Given the lengths of the three sides of a triangle.\
    \ Return the area of\n    the triangle rounded to 2 decimal points if the three\
    \ sides form a valid triangle. \n    Otherwise return -1\n    Three sides make\
    \ a valid triangle when the sum of any two sides is greater \n    than the third\
    \ side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1,\
    \ 2, 10) == -1\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\
    \t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4,\
    \ 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2,\
    \ 3) == -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3)\
    \ == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"a\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsmdaf6gr.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsmdaf6gr.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \ else return -1\nend\n</cell>\n<code language=julia-1.5>\ntriangle_area(3, 4,\
    \ 5)\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number is\
    \ prime or not. \nThe function should take one parameter and return true or false\
    \ depending on whether the number is prime or not. \nThe function should only\
    \ accept integers greater than 0. \nThe function should return false if the number\
    \ is 0 or negative. \nThe function should return true if the number is prime and\
    \ false otherwise. \nThe function should only accept integers greater than 0.\
    \ \nThe function should return false if the number is 0 or negative. \nThe function\
    \ should return true if the number is prime and false otherwise. \nThe function\
    \ should only accept integers greater than 0. \nThe function should return false\
    \ if the number is 0 or negative. \nThe function should return true if the number\
    \ is prime and false otherwise. \nThe function should only accept integers greater\
    \ than 0. \nThe function should return false if the number is 0 or negative. \n\
    The function should return true if the number is prime and false otherwise. \n\
    The function should only accept integers greater than 0. \nThe function should\
    \ return false if the number is 0 or negative. \nThe function should return true\
    \ if the number is prime and false otherwise. \nThe function should only accept\
    \ integers greater than 0. \nThe function should return false if the number is\
    \ 0 or negative. \nThe function should return true if the number is prime and\
    \ false otherwise. \nThe function should only accept integers greater than 0.\
    \ \nThe function should return false if the number is 0 or negative. \nThe function\
    \ should return true if the number is prime and false otherwise. \nThe function\
    \ should only accept integers greater than 0. \nThe function should return false\
    \ if the number is 0 or negative. \nThe function should return true if the number\
    \ is prime and false otherwise. \nThe function should only accept integers greater\
    \ than 0. \nThe function should return false if the number is 0 or negative. \n\
    The function should return true if the number is prime and false otherwise. \n\
    The function should only accept integers greater than 0. \nThe function should\
    \ return false if the number is 0 or negative. \nThe function should return true\
    \ if the number is prime and false otherwise. \nThe function should only accept\
    \ integers greater than 0. \nThe function should return false if the number is\
    \ 0 or negative. \nThe function should return true if the number is prime and\
    \ false otherwise. \nThe function should only accept integers greater than 0.\
    \ \nThe function should return false if the number is 0 or negative. \nThe function\
    \ should return true if the number is prime and false otherwise. \nThe function\
    \ should only accept integers greater than 0. \nThe function \nusing Test\n\n\
    @testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\
    \t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2,\
    \ 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5,\
    \ 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1)\
    \ == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmplmum37ae.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmplmum37ae.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c and a + c > b and b + c > a \n        then return (a * b\
    \ * c)/2\n        else return -1\n</code>\n<|/ a dscore=1 |>\n<| a tags=python,math\
    \ |>\n<code>\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and\
    \ b + c > a:\n        return (a * b * c)/2\n    else:\n        return -1\n</code>\n\
    <|/ a dscore=1 |>\n<| a |>\n<code>\ndef triangle_area(a, b, c):\n    if a + b\
    \ > c and a + c > b and b + c > a:\n        return (a * b * c)/2\n    else:\n\
    \        return -1\n</code>\n<|/ a tags=python,math dscore=1 |>\n<| a tags=python,math\
    \ |>\n<code>\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and\
    \ b + c > a:\n        return (a * b * c)/2\n    else:\n        return -1\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\ndef triangle_area(a, b, c):\n   \
    \ if a + b > c and a + c > b and b + c > a:\n        return (a * b * c)/2\n  \
    \  else:\n        return -1\n</code>\n<|/ a tags=python,math |>\n<| a dscore=1\
    \ |>\n<code>\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and\
    \ b + c > a:\n        return (a * b * c)/2\n    else:\n        return -1\n</code>\n\
    <|/ a tags=python,math |>\n<| a |>\n<code>\ndef triangle_area(a, b, c):\n    if\
    \ a + b > c and a + c > b and b + c > a:\n        return (a * b * c)/2\n    else:\n\
    \        return -1\n</code>\n<|/ a dscore=1 tags=python,math |>\n<| a |>\n<code>\n\
    def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n \
    \       return (a * b * c)/2\n    else:\n        return -1\n</code>\n<|/ a dscore=1\
    \ tags=python,math |>\n<| a dscore=1 |>\n<code>\ndef triangle_area(a, b, c):\n\
    \    if a + b > c and a + c > b and b + c > a:\n        return (a * b * c)/2\n\
    \    else:\n        return -1\n</code>\n<|/ a tags=python,math |>\n<| a tags=python,math\
    \ |>\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"a\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqesje9m4.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqesje9m4.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \ else return -1\nend\n</code>\n<|/ a tags=julia,function |>\n<| c |>\nThis doesn't\
    \ work if you try to use it for sides other than 3 or 4.\n<|/ c |>\n<| a tags=julia,function\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpm9bzsu6x.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpm9bzsu6x.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c && a + c > b && b + c > a \n        then return (a * b *\
    \ c)/2\n        else return -1\n</code>\n<|/ a tags=julia,function |>\n<| a |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpr9cmvjil.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpr9cmvjil.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c || b+c > a || c+a > b \n        then return -1\n    else return\
    \ (a+b+c)/2\nend\n</cell>\n<code language=julia-1.0>\ntriangle_area(3, 4, 5)\n\
    </cell>\n<code language=julia-1.0>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the area of a triangle given its three\
    \ sides. \n    Write a test that checks the area of the triangle formed by sides\
    \ 3, 4, and 5 \n    matches the area of the triangle formed by sides 1, 2, and\
    \ 10. \n    Then write a test that checks the area of the triangle formed by sides\
    \ 1, 2, and 10 \n    matches the area of the triangle formed by sides 3, 4, and\
    \ 5. \n    Then write a test that checks the area of the triangle formed by sides\
    \ 3, 4, and 5 \n    matches the area of the triangle formed by sides 1, 2, and\
    \ 10.\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp_vbrdbt0.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp_vbrdbt0.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c && a + c > b && b + c > a \n        then return (a * b *\
    \ c)/2\n        else return -1\n</code>\n<|/ a tags=julia,if-statement |>\n<|\
    \ c |>\nThis doesn't answer the question. OP wants to know if there is a way to\
    \ avoid the if-else statement. Your solution uses if-else statements.\n<|/ c |>\n\
    <| c |>\nThe question was how to avoid the if-else statement. Your solution uses\
    \ if-else statements. I thought the question was how to avoid if-else statements.\
    \ I answered the question by providing two solutions. One is using if-else statements\
    \ and the other is using an if-else statement with multiple conditions.\n<|/ c\
    \ |>\n<| c |>\nThe question was how to avoid if-else statements. Your solution\
    \ uses if-else statements. I thought the question was how to avoid if-else statements.\
    \ I answered the question by providing two solutions. One is using if-else statements\
    \ and the other is using an if-else statement with multiple conditions.\n<|/ c\
    \ |>\n<| c |>\nThe question was how to avoid if-else statements. Your solution\
    \ uses if-else statements. I thought the question was how to avoid if-else statements.\
    \ I answered the question by providing two solutions. One is using if-else statements\
    \ and the other is using an if-else statement with multiple conditions.\n<|/ c\
    \ |>\n<| c |>\nThe question was how to avoid if-else statements. Your solution\
    \ uses if-else statements. I thought the question was how to avoid if-else statements.\
    \ I answered the question by providing two solutions. One is using if-else statements\
    \ and the other is using an if-else statement with multiple conditions.\n<|/ c\
    \ |>\n<| a tags=julia,if-statement |>\nYou can use the ternary operator to return\
    \ different values based on the condition:\n<code>\njulia> function triangle_area(a::Int64,\
    \ b::Int64, c::Int64)::Float64\n           return (a * b * c)/2 if a + b > c &&\
    \ a + c > b && b + c > a else -1\n       end\ntriangle_area (a::Int64, b::Int64,\
    \ c::Int64)::Float64\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\
    \t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4,\
    \ 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2,\
    \ 3) == -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3)\
    \ == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpve7ae0fa.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpve7ae0fa.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c and a + c > b and b + c > a \n        then return (a * b\
    \ * c)/2\n        else return -1\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis\
    \ doesn't answer the question, which is about how to implement the function `triangle_area`.\n\
    <|/ c |>\n<| c |>\nI added the function triangle_area to the answer.\n<|/ c |>\n\
    <| c |>\nThis doesn't answer the question, which is about how to implement the\
    \ function `triangle_area`.\n<|/ c |>\n<| c |>\nI added the function triangle_area\
    \ to the answer.\n<|/ c |>\n<| a dscore=2 |>\nThe accepted answer doesn't work\
    \ for me. \nI used the code below to solve the problem:\n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\
    \t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2,\
    \ 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5,\
    \ 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1)\
    \ == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"a\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptgpplx9u.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptgpplx9u.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c and a+c > b and b+c > a then \n        return (a+b+c)/2\n \
    \   else \n        return -1\nend\n</cell>\n<code language=julia-1.5>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of\
    \ numbers and returns the sum of the squares of the numbers in the vector. \n\
    Example: \n    square_sum(Vector{Int64}([1,2,3])) == 9\n    square_sum(Vector{Int64}([1,-2,3]))\
    \ == -9\n    square_sum(Vector{Int64}([1,-2,-3,4])) == -36\n    square_sum(Vector{Int64}([1,-2,-3,-4,5]))\
    \ == -36\n    square_sum(Vector{Int64}([1,-2,-3,-4,-5,6])) == -36\n    square_sum(Vector{Int64}([1,-2,-3,-4,-5,-6,7]))\
    \ == -36\n    square_sum(Vector{Int64}([1,-2,-3,-4,-5,-6,-7,8])) == -36\n    square_sum(Vector{Int64}([1,-2,-3,-4,-5,-6,-7,-8,9]))\
    \ == -36\n    square_sum(Vector{Int64}([1,-2,-3,-4,-5,-6,-7,-8,-9,10])) == -36\n\
    \    square_sum(Vector{Int64}([1,-2,-3,-4,-5,-6,-7,-8,-9,-10,11])) == -36\n  \
    \  square_sum(Vector{Int64}([1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,12])) == -36\n\
    \    square_sum(Vector{Int64}([1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,13])) ==\
    \ -36\n    square_sum(Vector{Int64}([1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]))\
    \ == -36\n    square_sum(Vector{Int64}([1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,14]))\
    \ == -36\n    square_sum(Vector{Int64}([1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,15]))\
    \ == -36\n    square_sum(Vector{\nusing Test\n\n@testset begin\n\ncandidate =\
    \ triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2,\
    \ 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2)\
    \ == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5, 7) ==\
    \ 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\
    \t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"a\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprl6nm8w_.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprl6nm8w_.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \ else return -1\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a number as an argument and returns the number of digits in that number. \n\
    Example: \n    digits(123) == 3\n    digits(1234) == 4\n    digits(12345) == 5\n\
    \    digits(123456) == 6\n    digits(1234567) == 7\n    digits(12345678) == 8\n\
    \    digits(123456789) == 9\n    digits(1234567890) == 10\n    digits(12345678901)\
    \ == 11\n    digits(123456789012) == 12\n    digits(1234567890123) == 13\n   \
    \ digits(12345678901234) == 14\n    digits(123456789012345) == 15\n    digits(1234567890123456)\
    \ == 16\n    digits(12345678901234567) == 17\n    digits(123456789012345678) ==\
    \ 18\n    digits(1234567890123456789) == 19\n    digits(12345678901234567890)\
    \ == 20\n    digits(123456789012345678901) == 21\n    digits(1234567890123456789012)\
    \ == 22\n    digits(12345678901234567890123) == 23\n    digits(123456789012345678901234)\
    \ == 24\n    digits(1234567890123456789012345) == 25\n    digits(12345678901234567890123456)\
    \ == 26\n    digits(123456789012345678901234567) == 27\n    digits(1234567890123456789012345678)\
    \ == 28\n    digits(12345678901234567890123456789) == 29\n    digits(123456789012345678901234567890)\
    \ == 30\n    digits(1234567890123456789012345678901) == 31\n    digits(12345678901234567890123456789012)\
    \ == 32\n    digits(123456789012345678901234567890123) == 33\n    digits(1234567890123456789012345678901234)\
    \ == 34\n    digits(12345678901234567890123456789012345) == 35\n    digits(123456789012345678901234567890123456)\
    \ == 36\n    digits(1234567890123456789012345678901234567) == 37\n    digits(12345678901234567890123456789012345678)\
    \ == 38\n    digits(123456789012345678901234567890123456789) == 39\n    digits(1234567890123456789012345678901234567890)\
    \ == 40\n    digits(12345678901234567890123456789012345678901) == 41\n    digits(123456789012345678901234567890123456789012)\
    \ == 42\n    digits(1234567890123456789012345678901234567890123) == 43\n    digits(12345678901234567890123456789012345678901234)\
    \ == 44\n    digits(123456789012345678901234567890123456789012345) == 45\n   \
    \ digits(1234567890123456789012345678901234567890123456) == 46\n    digits(12345678901234567890123456789012345678901234567)\
    \ == 47\n    digits(123456789\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\
    \t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4,\
    \ 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2,\
    \ 3) == -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3)\
    \ == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpwfbhuc8d.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpwfbhuc8d.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c and a+c > b and b+c > a then \n        area_tri = Float64((a\
    \ + b + c) / 2)\n        return area_tri\n    else \n        return -1\nend\n\
    </code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1,\
    \ 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2, 2,\
    \ 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5, 7)\
    \ == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1) ==\
    \ 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"a\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvlla4y5l.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvlla4y5l.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \ else return -1\nend\n</cell>\n<code language=julia-1.5>\ntriangle_area(3, 4,\
    \ 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\n\
    Exercise: Write a function that checks if a triangle is valid (that is, has all\
    \ sides greater than zero).\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\
    \t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4,\
    \ 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2,\
    \ 3) == -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3)\
    \ == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp54flxg5j.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp54flxg5j.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c and a + c > b and b + c > a \n        then return (a * b\
    \ * c)/2\n    else return -1\nend\n</cell>\n<code language=julia-1.5>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2, 10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the area of a triangle given\
    \ its sides. \nThe function should take in three sides and return its area rounded\
    \ to 2 decimal points.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1,\
    \ 2, 10) == -1\nHint: You will need to use the triangle_area function you wrote\
    \ in the previous exercise.\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\
    \t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4,\
    \ 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2,\
    \ 3) == -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3)\
    \ == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"a\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_f4y3fp9.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_f4y3fp9.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \ else return -1\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,if-statement\
    \ |>\nThe accepted answer does not work for me. \nI used the code below and it\
    \ worked for me:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\
    \t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4,\
    \ 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2,\
    \ 3) == -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3)\
    \ == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpm9d0uzfz.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpm9d0uzfz.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \ else return -1\nend\n</code>\n<|/ a tags=julia |>\n<| a dscore=0 |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpx030akfn.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpx030akfn.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c and a+c > b and b+c > a \n        then return (a+b+c)/2\n \
    \   else return -1\nend\n</cell>\n<code language=julia-1.0>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes in three points\
    \ and returns the area of a triangle formed by these three points. \nThe triangle\
    \ is formed when the three points form a right triangle. \nIf the three points\
    \ do not form a right triangle, return -1.\nThe function should return -1 if the\
    \ three points do not form a right triangle. \nThe function should return 0 if\
    \ the three points form a right triangle.\nThe function should return 1 if the\
    \ three points form a right triangle and are collinear.\nThe function should return\
    \ 2 if the three points form a right triangle and are not collinear.\nThe function\
    \ should return 3 if the three points form a right triangle and are collinear\
    \ and are not collinear.\nThe function should return 4 if the three points form\
    \ a right triangle and are not collinear and are collinear.\nThe function should\
    \ return 5 if the three points form a right triangle and are not collinear and\
    \ are not collinear.\nThe function should return 6 if the three points form a\
    \ right triangle and are collinear and are not collinear.\nThe function should\
    \ return 7 if the three points form a right triangle and are not collinear and\
    \ are collinear.\nThe function should return 8 if the three points form a right\
    \ triangle and are collinear and are not collinear.\nThe function should return\
    \ 9 if the three points form a right triangle and are not collinear and are collinear.\n\
    The function should return 10 if the three points form a right triangle and are\
    \ collinear and are not collinear.\nThe function should return 11 if the three\
    \ points form a right triangle and are not collinear and are collinear.\nThe function\
    \ should return 12 if the three points form a right triangle and are collinear\
    \ and are not collinear.\nThe function should return 13 if the three points form\
    \ a right triangle and are not collinear and are collinear.\nThe function should\
    \ return 14 if the three points form a right triangle and are collinear and are\
    \ not collinear.\nThe function should return 15 if the three points form a right\
    \ triangle and are not collinear and are collinear.\nThe function should return\
    \ 16 if the three points form a right triangle and are collinear and are not collinear.\n\
    The function should return 17 if the three points form a right triangle and are\
    \ not col\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"a\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt2o83_hc.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpt2o83_hc.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c and a+c > b and b+c > a then \n        area_of_triangle = a/2\
    \ * (b+c) \n    else \n        area_of_triangle = -1\n    return area_of_triangle\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\ndef triangle_area(a, b,\
    \ c):\n    if a + b > c and a + c > b and b + c > a:\n        area_of_triangle\
    \ = a/2 * (b + c)\n    else:\n        area_of_triangle = -1\n    return area_of_triangle\n\
    using Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"a\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8kdihznk.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8kdihznk.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c || b + c > a || c + a > b \n        then return -1\n    else\
    \ \n        return (a * b * c) / (a + b + c)\nend\n</code>\n<|/ a tags=julia |>\n\
    <| c |>\nThis doesn't work if you have a triangle with equal sides. For example,\
    \ triangle_area(1,1,1) returns 1.\n<|/ c |>\n<| c |>\nI fixed the problem you\
    \ mentioned, thank you!\n<|/ c |>\n<| a tags=julia |>\nI wrote a package to solve\
    \ this problem in Julia. \n<code>\nusing GeometryBasics\nusing Test\n\n@testset\
    \ begin\n\ncandidate = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t\
    @test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2,\
    \ 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5,\
    \ 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1)\
    \ == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp0la25fsz.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp0la25fsz.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c && a + c > b && b + c > a \n        then return (a * b *\
    \ c)/2\n        else return -1\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\n\
    def triangle_area(a, b, c):\n    area_of_triangle = (a + b + c) / 2\n    if area_of_triangle\
    \ == (a * b * c) / 2:\n        return area_of_triangle\n    else:\n        return\
    \ -1\n</code>\n<|/ a tags=python,if-statement |>\n<| c |>\nWhile this code may\
    \ answer the question, providing additional context regarding how and/or why it\
    \ solves the problem would improve the answer's long-term value.\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>\ndef triangle_area(a, b, c):\n    area_of_triangle = (a\
    \ + b + c) / 2\n    if area_of_triangle == (a * b * c) / 2:\n        return area_of_triangle\n\
    \    else:\n        return -1\n</code>\n<|/ a tags=python,if-statement |>\n<|\
    \ c |>\nWhile this code may answer the question, providing additional context\
    \ regarding how and/or why it solves the problem would improve the answer's long-term\
    \ value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndef triangle_area(a, b, c):\n  \
    \  area_of_triangle = (a + b + c) / 2\n    if area_of_triangle == (a * b * c)\
    \ / 2:\n        return area_of_triangle\n    else:\n        return -1\n</code>\n\
    <|/ a tags=python,if-statement |>\n<| c |>\nWhile this code may answer the question,\
    \ providing additional context regarding how and/or why it solves the problem\
    \ would improve the answer's long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    def triangle_area(a, b, c):\n    area_of_triangle = (a + b + c) / 2\n    if area_of_triangle\
    \ == (a * b * c) / 2:\n        return area_of_triangle\n    else:\n        return\
    \ -1\n</code>\n<|/ a tags=python,if-statement |>\n<| c |>\nWhile this code may\
    \ answer the question, providing additional context regarding how and/or why it\
    \ solves the problem would improve the answer's long-term value.\n<|/ c |>\n<|\
    \ a tags=python,if-statement |>\n<code>\ndef triangle_area(a, b, c):\n    area_of_triangle\
    \ = (a + b + c) / 2\n    if area_of_triangle == (a * b * c) / 2:\n        return\
    \ area_of_triangle\n    else:\n        return -1\n</code>\n<|/ a \nusing Test\n\
    \n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3, 4, 5) ==\
    \ 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\
    \t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10,\
    \ 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1,\
    \ 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpg7gzisqu.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpg7gzisqu.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \     else return -1\n    end\nend\n</cell>\n<code language=julia-1.5>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2, 10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes in three points and returns the\
    \ area of a triangle formed by those three points. \nThe function should return\
    \ -1 if the three points do not form a valid triangle. \nThe function should return\
    \ 0 if the three points form a triangle with area 0\nThe function should return\
    \ 1 if the three points form a triangle with area 1\nThe function should return\
    \ 2 if the three points form a triangle with area 2\nThe function should return\
    \ 3 if the three points form a triangle with area 3\nThe function should return\
    \ 4 if the three points form a triangle with area 4\nThe function should return\
    \ 5 if the three points form a triangle with area 5\nThe function should return\
    \ 6 if the three points form a triangle with area 6\nThe function should return\
    \ 7 if the three points form a triangle with area 7\nThe function should return\
    \ 8 if the three points form a triangle with area 8\nThe function should return\
    \ 9 if the three points form a triangle with area 9\nThe function should return\
    \ 10 if the three points form a triangle with area 10\nThe function should return\
    \ 11 if the three points form a triangle with area 11\nThe function should return\
    \ 12 if the three points form a triangle with area 12\nThe function should return\
    \ 13 if the three points form a triangle with area 13\nThe function should return\
    \ 14 if the three points form a triangle with area 14\nThe function should return\
    \ 15 if the three points form a triangle with area 15\nThe function should return\
    \ 16 if the three points form a triangle with area 16\nThe function should return\
    \ 17 if the three points form a triangle with area 17\nThe function should return\
    \ 18 if the three points form a triangle with area 18\nThe function should return\
    \ 19 if the three points form a triangle with area 19\nThe function should return\
    \ 20 if the three points form a triangle with area 20\nThe function should return\
    \ 21 if the three points form a triangle with area 21\nThe function should return\
    \ 22 if the three points form a triangle with area 22\nThe function should return\
    \ 23 if the three points form a triangle with area 23\nThe function should return\
    \ 24 if the three points form a triangle with area \nusing Test\n\n@testset begin\n\
    \ncandidate = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1,\
    \ 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2, 2,\
    \ 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5, 7)\
    \ == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1) ==\
    \ 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp1rn121d_.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp1rn121d_.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c || b+c > a || c+a > b \n        then return -1\n    else \n\
    \        return (a+b+c)/2\nend\n</cell>\n<code language=julia-1.0>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<code language=julia-1.0>\ntriangle_area(1, 2, 10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the area of a triangle given\
    \ three sides. \nThe function should take in three sides and return the area rounded\
    \ to 2 decimal points.\nThe function should return -1 if the three sides form\
    \ a non-valid triangle or if the sum of any two sides is greater than the third\
    \ side.\nExample: \ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) ==\
    \ -1\nHint: \nThe formula for the area of a triangle is $\\frac{3}{2}$ * $\\frac{5}{2}$\
    \ * $\\frac{5}{2}$\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\
    \t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4,\
    \ 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2,\
    \ 3) == -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3)\
    \ == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpbr25eg8b.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpbr25eg8b.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b\n        triangle_area(a, b, c)\n   \
    \ else\n        -1\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes in three sides of a triangle and returns the area of the triangle.\
    \ \nIf the three sides form a valid triangle, return its area. Otherwise return\
    \ -1.\nExample: \ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n\
    Hint: \nThe area of a triangle is equal to the sum of two areas of the three sides.\
    \ \nThe area of a triangle is equal to the product of the two areas of the two\
    \ sides. \nThe area of a triangle is equal to the product of the two areas of\
    \ the three sides. \nThe area of a triangle is equal to the product of the two\
    \ areas of the two sides. \nThe area of a triangle is equal to the product of\
    \ the two areas of the three sides. \nThe area of a triangle is equal to the product\
    \ of the two areas of the two sides. \nThe area of a triangle is equal to the\
    \ product of the two areas of the three sides. \nThe area of a triangle is equal\
    \ to the product of the two areas of the two sides. \nThe area of a triangle is\
    \ equal to the product of the two areas of the three sides. \nThe area of a triangle\
    \ is equal to the product of the two areas of the two sides. \nThe area of a triangle\
    \ is equal to the product of the two areas of the three sides. \nThe area of a\
    \ triangle is equal to the product of the two areas of the two sides. \nThe area\
    \ of a triangle is equal to the product of the two areas of the three sides. \n\
    The area of a triangle is equal to the product of the two areas of the two sides.\
    \ \nThe area of a triangle is equal to the product of the two areas of the three\
    \ sides. \nThe area of a triangle is equal to the product of the two areas of\
    \ the two sides. \nThe area of a triangle is equal to the product of the two areas\
    \ of the three sides. \nThe area of a triangle is equal to the product of the\
    \ two areas of the two sides. \nThe area of a triangle is equal to the product\
    \ of the two areas of the three sides. \nThe area of a triangle is equal to the\
    \ product of the two areas of the two sides. \nThe area of a triangle is equal\
    \ to the product of the two areas of the three sides. \nThe area of a triangle\
    \ is equal to the product of the two areas of the two sides. \nThe area of a triangle\
    \ is equal to the product of the two areas of the three sides. \nThe area of a\
    \ triangle is equal to the product of the two areas of the two sides. \nThe area\
    \ of a tri\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv2fh69so.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpv2fh69so.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a > b and a > c \n        then return (a * b) / c\n    else if b >\
    \ a and b > c \n        then return (b * a) / c\n    else if c > a and c > b \n\
    \        then return (c * a) / b\n    else return -1\nend\n</cell>\n<code language=julia-1.5>\n\
    triangle_area(3, 4, 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2,\
    \ 10)\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number is\
    \ prime or not. \nA prime number is a natural number greater than 1 that has no\
    \ positive divisors other than 1 and itself.\nFor example 5 is a prime number\
    \ because all positive divisors are 1, 2, and 5.\nFor example 6 is not a prime\
    \ number because there is no positive divisor other than 6 and itself.\nFor example\
    \ 7 is a prime number because all positive divisors are 1, 2, and 7.\nFor example\
    \ 8 is not a prime number because there is no positive divisor other than 8 and\
    \ itself.\nFor example 9 is not a prime number because all positive divisors are\
    \ 1, 2, and 9.\nFor example 10 is not a prime number because all positive divisors\
    \ are 1, 2, and 10.\nFor example 11 is a prime number because all positive divisors\
    \ are 1, 2, and 11.\nFor example 12 is not a prime number because there is no\
    \ positive divisor other than 12 and itself.\nFor example 13 is not a prime number\
    \ because all positive divisors are 1, 2, and 13.\nFor example 14 is not a prime\
    \ number because all positive divisors are 1, 2, and 14.\nFor example 15 is a\
    \ prime number because all positive divisors are 1, 2, and 15.\nFor example 16\
    \ is not a prime number because there is no positive divisor other than 16 and\
    \ itself.\nFor example 17 is not a prime number because all positive divisors\
    \ are 1, 2, and 17.\nFor example 18 is not a prime number because all positive\
    \ divisors are 1, 2, and 18.\nFor example 19 is not a prime number because all\
    \ positive divisors are 1, 2, and 19.\nFor example 20 is a prime number because\
    \ all positive divisors are 1, 2, and 20.\nFor example 21 is a prime number because\
    \ all positive divisors are 1, 2, and 21.\nFor example 22 is not a prime number\
    \ because there is no positive divisor other than 22 and itself.\nFor example\
    \ 23 is not a prime number because all positive divisors are 1, 2, and 23.\nFor\
    \ example 24 is not a prime number because all positive divisors are 1, 2, and\
    \ 24.\nFor example 25 is a prime number because all positive divisors are 1, 2,\
    \ and 25.\nFor example 26 is not a prime number because there is no positive divisor\
    \ other than 26 and itself.\nFor example 27 is not a prime number because all\
    \ positive divisors are 1, 2, and 27.\nFor example 28 is not a prime number because\
    \ all positive divisors are 1, 2, and \nusing Test\n\n@testset begin\n\ncandidate\
    \ = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2,\
    \ 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2)\
    \ == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5, 7) ==\
    \ 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\
    \t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"a\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3slmr74n.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3slmr74n.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c && a + c > b && b + c > a \n        then return (a + b +\
    \ c) / 2\n        else return -1\n    else return -1\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test your function here\n@assert triangle_area(3, 4, 5) == 6.00\n@assert triangle_area(1,\
    \ 2, 10) == -1\n</cell>\n<text>\n12. Write a function that checks whether a number\
    \ is in a given triangle or not. \nThe triangle with edge lengths $(a, b, c)$\
    \ is defined by:\n$$\n\\begin{align}\n&a + b + c &\\leq 100, \\\n&a + 2b + c &\\\
    leq 100, \\\n&a + 3b + c &\\leq 100, \\\n&a + 4b + c &\\leq 100, \\\n&a + 5b +\
    \ c &\\leq 100, \\\n&a + 6b + c &\\leq 100, \\\n&a + 7b + c &\\leq 100, \\\n&a\
    \ + 8b + c &\\leq 100, \\\n&a + 9b + c &\\leq 100, \\\n&a + 10c + c &\\leq 100,\
    \ \\\n&a + 11c + c &\\leq 100, \\\n&a + 12c + c &\\leq 100, \\\n&a + 13c + c &\\\
    leq 100, \\\n&a + 14c + c &\\leq 100, \\\n&a + 15c + c &\\leq 100, \\\n&a + 16c\
    \ + c &\\leq 100, \\\n&a + 17c + c &\\leq 100, \\\n&a + 18c + c &\\leq 100, \\\
    \n&a + 19c + c &\\leq 100, \\\n&a + 20c + c &\\leq 100, \\\n&a + 21c + c &\\leq\
    \ 100, \\\n&a + 22c + c &\\leq 100, \\\n&a + 23c + c &\\leq 100, \\\n&a + 24c\
    \ + c &\\leq 100, \\\n&a + 25c + c &\\leq 100, \\\n&a + 26c + c &\\leq 100, \\\
    \n&a + 27c + c &\\leq 100, \\\n&a + 28c + c &\\leq 100, \\\n&a + 29c + c &\\leq\
    \ 100, \\\n&a + 30c + c &\\leq 100, \\\n&a + 31c + c &\\leq 100, \\\n&a + 32c\
    \ + c &\\leq 100, \\\n&a + 33c + c &\\\nusing Test\n\n@testset begin\n\ncandidate\
    \ = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2,\
    \ 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2)\
    \ == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5, 7) ==\
    \ 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\
    \t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpdm_ch166.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpdm_ch166.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        return (a+b+c)/2\n    else\
    \ \n        return -1\nend\n</cell>\n<code language=julia-1.5>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2, 10)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes in three points and returns the\
    \ area of a triangle formed by those three points. \nThe triangle is formed when\
    \ the sum of any two sides is greater than the third side.\nExample: \ntriangle_area(Point(1,1),\
    \ Point(2,2), Point(3,3)) == 6.00\ntriangle_area(Point(1,1), Point(2,2), Point(3,4))\
    \ == -1\ntriangle_area(Point(1,1), Point(2,3), Point(3,4)) == -1\ntriangle_area(Point(1,1),\
    \ Point(2,2), Point(3,1)) == -1\ntriangle_area(Point(1,1), Point(2,2), Point(3,4))\
    \ == -1\ntriangle_area(Point(1,1), Point(2,2), Point(3,3)) == -1\ntriangle_area(Point(1,1),\
    \ Point(2,2), Point(3,4)) == -1\ntriangle_area(Point(1,1), Point(2,2), Point(3,4))\
    \ == -1\ntriangle_area(Point(1,1), Point(2,2), Point(3,4)) == -1\ntriangle_area(Point(1,1),\
    \ Point(2,2), Point(3,4)) == -1\ntriangle_area(Point(1,1), Point(2,2), Point(3,4))\
    \ == -1\ntriangle_area(Point(1,1), Point(2,2), Point(3,4)) == -1\ntriangle_area(Point(1,1),\
    \ Point(2,2), Point(3,4)) == -1\ntriangle_area(Point(1,1), Point(2,2), Point(3,4))\
    \ == -1\ntriangle_area(Point(1,1), Point(2,2), Point(3,4)) == -1\ntriangle_area(Point(1,1),\
    \ Point(2,2), Point(3,4)) == -1\ntriangle_area(Point(1,1), Point(2,2), Point(3,4))\
    \ == -1\ntriangle_area(Point(1,1), Point(2,2), Point(3,4)) == -1\ntriangle_area(Point(1,1),\
    \ Point(2,2), Point(3,4)) == -1\ntriangle_area(Point(1,1), Point(2,2), Point(3,4))\
    \ == -1\ntriangle_area(Point(1,1), Point(2,2), Point(3,4)) == -1\ntriangle_area(Point(1,1),\
    \ Point(2,2), Point(3,4)) == -1\ntriangle_area(Point(1,1), Point(2,2), Point(3,4))\
    \ == -1\ntriangle_area(Point(1,1), Point(2,2), Point(3,4)) == -1\ntriangle_area(Point(1,1),\
    \ Point(2,\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6ot7rnak.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6ot7rnak.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && c+a > b && b+c > a \n        then return (a+b+c)/2\n   \
    \ else return -1\nend\n</cell>\n<code language=julia-1.5>\ntriangle_area(3, 4,\
    \ 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\n\
    Exercise: Write a function that checks if a number is prime. \nA prime number\
    \ is a natural number greater than 1 that has no positive divisors other than\
    \ 1 and itself. \nThe number 1 is not a prime number. \nThe number 5 is a prime\
    \ number. \nWrite a function that checks if a number is prime.\nExample: \ntriangle_area(3,\
    \ 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\ntriangle_area(6, 3, 5) == -1\n\
    triangle_area(6, 3, 6) == -1\ntriangle_area(6, 3, 7) == -1\ntriangle_area(6, 3,\
    \ 8) == -1\ntriangle_area(6, 3, 9) == -1\ntriangle_area(6, 3, 10) == -1\ntriangle_area(6,\
    \ 3, 11) == -1\ntriangle_area(6, 3, 12) == -1\ntriangle_area(6, 3, 13) == -1\n\
    triangle_area(6, 3, 14) == -1\ntriangle_area(6, 3, 15) == -1\ntriangle_area(6,\
    \ 3, 16) == -1\ntriangle_area(6, 3, 17) == -1\ntriangle_area(6, 3, 18) == -1\n\
    triangle_area(6, 3, 19) == -1\ntriangle_area(6, 3, 20) == -1\ntriangle_area(6,\
    \ 3, 21) == -1\ntriangle_area(6, 3, 22) == -1\ntriangle_area(6, 3, 23) == -1\n\
    triangle_area(6, 3, 24) == -1\ntriangle_area(6, 3, 25) == -1\ntriangle_area(6,\
    \ 3, 26) == -1\ntriangle_area(6, 3, 27) == -1\ntriangle_area(6, 3, 28) == -1\n\
    triangle_area(6, 3, 29) == -1\ntriangle_area(6, 3, 30) == -1\ntriangle_area(6,\
    \ 3, 31) == -1\ntriangle_area(6, 3, 32) == -1\ntriangle_area(6, 3, 33) == -1\n\
    triangle_area(6, 3, 34) == -1\ntriangle_area(6, 3, 35) == -1\ntriangle_area(6,\
    \ 3, 36) == -1\ntriangle_area(6, 3, 37) == -1\ntriangle_area(6, 3, 38) == -1\n\
    triangle_area(6, 3, 39) == -1\ntriangle_area(6, 3, 40) == -1\nusing Test\n\n@testset\
    \ begin\n\ncandidate = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t\
    @test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2,\
    \ 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5,\
    \ 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1)\
    \ == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpzn3ua3jy.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpzn3ua3jy.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c && a + c > b && b + c > a\n        return (a * b * c)/2\n\
    \    else\n        return -1\nend\n</cell>\n<code language=julia-1.5>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2, 10)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the area of a triangle given\
    \ its sides. \nThe function should take in three integers representing the lengths\
    \ of the sides of the triangle. \nThe function should return -1 if the triangle\
    \ is not valid. \nThe function should return 0 if the triangle is valid but has\
    \ zero area. \nThe function should return 1 if the triangle is valid and has an\
    \ area of 1.\nExample: triangle_area(3, 4, 5) == 6.00\nExample: triangle_area(1,\
    \ 2, 10) == -1\nExample: triangle_area(3, 4, 5) == 6.00\nExample: triangle_area(1,\
    \ 2, 10) == -1\nExample: triangle_area(3, 4, 5) == 6.00\nExample: triangle_area(1,\
    \ 2, 10) == -1\nExample: triangle_area(3, 4, 5) == 6.00\nExample: triangle_area(1,\
    \ 2, 10) == -1\nExample: triangle_area(3, 4, 5) == 6.00\nExample: triangle_area(1,\
    \ 2, 10) == -1\nExample: triangle_area(3, 4, 5) == 6.00\nExample: triangle_area(1,\
    \ 2, 10) == -1\nExample: triangle_area(3, 4, 5) == 6.00\nExample: triangle_area(1,\
    \ 2, 10) == -1\nExample: triangle_area(3, 4, 5) == 6.00\nExample: triangle_area(1,\
    \ 2, 10) == -1\nExample: triangle_area(3, 4, 5) == 6.00\nExample: triangle_area(1,\
    \ 2, 10) == -1\nExample: triangle_area(3, 4, 5) == 6.00\nExample: triangle_area(1,\
    \ 2, 10) == -1\nExample: triangle_area(3, 4, 5) == 6.00\nExample: triangle_area(1,\
    \ 2, 10) == -1\nExample: triangle_area(3, 4, 5) == 6.00\nExample: triangle_area(1,\
    \ 2, 10) == -1\nExample: triangle_area(3, 4, 5) == 6.00\nExample: triangle_area(1,\
    \ 2, 10) == -1\nExample: triangle_area(3, 4, 5) == 6.00\nExample: triangle_area(1,\
    \ 2, 10) == -1\nExample: triangle_area(3, 4, 5) == 6.00\nExample: triangle_area(1,\
    \ 2, 10) == -1\nExample: triangle_area(3, 4, 5) == 6.00\nExample: triangle_area(1,\
    \ 2, 10) == -1\nExample: triangle_area(3, 4, 5) == 6.00\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t\
    @test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2,\
    \ 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5,\
    \ 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1)\
    \ == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf15oswwl.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpf15oswwl.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c && a + c > b && b + c > a\n        area := (a + b + c) /\
    \ 2\n    else\n        area := -1\n    end\n    return area\nend\n</code>\n<|/\
    \ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2,\
    \ 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2)\
    \ == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5, 7) ==\
    \ 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\
    \t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unsupported assignment operator \":=\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3loz8ytv.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3loz8ytv.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \     else return -1\n    else return -1\nend\n</cell>\n<code language=julia-1.0>\n\
    triangle_area(3, 4, 5)\n</cell>\n<code language=julia-1.0>\ntriangle_area(1, 2,\
    \ 10)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a number as an\
    \ argument and returns the number of digits in that number. \nFor example, if\
    \ the number passed is 123, the function should return 3.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t\
    @test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2,\
    \ 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5,\
    \ 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1)\
    \ == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpdfucoxb1.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpdfucoxb1.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a > b + c || b > a + c || c > a + b \n        return -1\n    else \n\
    \        return (a * b * c) / sqrt((a+b) * (a+c) * (b+c))\nend\n</cell>\n<code\
    \ language=julia-1.5>\ntriangle_area(3, 4, 5)\n</cell>\n<code language=julia-1.5>\n\
    triangle_area(1, 2, 10)\n</cell>\n<text>\nExercise 2\nWrite a function that checks\
    \ if a number is prime or not. \nA number is prime if all its divisors are greater\
    \ than 1. \nA number is prime if all its divisors are less than or equal to sqrt(n).\
    \ \nA number is prime if all its divisors are less than or equal to sqrt(n).\n\
    Example: \n5 is prime\n6 is prime\n7 is prime\n8 is prime\n9 is prime\n10 is not\
    \ prime\n11 is not prime\n12 is not prime\n13 is not prime\n14 is not prime\n\
    15 is not prime\n16 is not prime\n17 is not prime\n18 is not prime\n19 is not\
    \ prime\n20 is not prime\n21 is not prime\n22 is not prime\n23 is not prime\n\
    24 is not prime\n25 is not prime\n26 is not prime\n27 is not prime\n28 is not\
    \ prime\n29 is not prime\n30 is not prime\n31 is not prime\n32 is not prime\n\
    33 is not prime\n34 is not prime\n35 is not prime\n36 is not prime\n37 is not\
    \ prime\n38 is not prime\n39 is not prime\n40 is not prime\n41 is not prime\n\
    42 is not prime\n43 is not prime\n44 is not prime\n45 is not prime\n46 is not\
    \ prime\n47 is not prime\n48 is not prime\n49 is not prime\n50 is not prime\n\
    51 is not prime\n52 is not prime\n53 is not prime\n54 is not prime\n55 is not\
    \ prime\n56 is not prime\n57 is not prime\n58 is not prime\n59 is not prime\n\
    60 is not prime\n61 is not prime\n62 is not prime\n63 is not prime\n64 is not\
    \ prime\n65 is not prime\n66 is not prime\n67 is not prime\n68 is not prime\n\
    69 is not prime\n70 is not prime\n71 is not prime\n72 is not prime\n73 is not\
    \ prime\n74 is not prime\n75 is not prime\n76 is not prime\n77 is not prime\n\
    78 is not prime\n79 is not prime\n80 is not prime\n81 is not prime\n82 is not\
    \ prime\n83 is not prime\n84 is not prime\n85 is not prime\n86 is not prime\n\
    87 is not prime\n88 is not prime\n89 is not prime\n90 is not prime\n91 is not\
    \ prime\n92 is not prime\n93 is not prime\n94 is not prime\n95 is not prime\n\n\
    using Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_8o8r9hn.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_8o8r9hn.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \ else return -1\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the area of a triangle given its three sides. \nThe function should take in\
    \ three integers representing the lengths of the sides of a triangle. \nThe function\
    \ should return -1 if the three sides form a non-valid triangle. \nThe function\
    \ should return 0 if the three sides are equal.\nThe function should return 1\
    \ if the three sides are opposite of each other.\nThe function should return 0.5\
    \ if the three sides are parallel.\nExample: triangle_area(3, 4, 5) == 6.00\n\
    Example: triangle_area(1, 2, 10) == -1\nExample: triangle_area(2, 1, 5) == 0.5\n\
    Example: triangle_area(2, 1, 10) == 0.5\nExample: triangle_area(2, 1, 10) == 0.5\n\
    Example: triangle_area(2, 1, 10) == 0.5\nExample: triangle_area(2, 1, 10) == 0.5\n\
    Example: triangle_area(2, 1, 10) == 0.5\nExample: triangle_area(2, 1, 10) == 0.5\n\
    Example: triangle_area(2, 1, 10) == 0.5\nExample: triangle_area(2, 1, 10) == 0.5\n\
    Example: triangle_area(2, 1, 10) == 0.5\nExample: triangle_area(2, 1, 10) == 0.5\n\
    Example: triangle_area(2, 1, 10) == 0.5\nExample: triangle_area(2, 1, 10) == 0.5\n\
    Example: triangle_area(2, 1, 10) == 0.5\nExample: triangle_area(2, 1, 10) == 0.5\n\
    Example: triangle_area(2, 1, 10) == 0.5\nExample: triangle_area(2, 1, 10) == 0.5\n\
    Example: triangle_area(2, 1, 10) == 0.5\nExample: triangle_area(2, 1, 10) == 0.5\n\
    Example: triangle_area(2, 1, 10) == 0.5\nExample: triangle_area(2, 1, 10) == 0.5\n\
    Example: triangle_area(2, 1, 10) == 0.5\nExample: triangle_area(2, 1, 10) == 0.5\n\
    Example: triangle_area(2, 1, 10) == 0.5\nExample: triangle_area(2, 1, 10) == 0.5\n\
    Example: triangle_area(2, 1, 10) == 0.5\nExample: triangle_area(2, 1, 10) == 0.5\n\
    Example: triangle_area(2, 1, 10) == 0.5\nExample: triangle_area(2, 1, 10) == 0.5\n\
    Example: triangle_area(2, 1, 10) == 0.5\nExample: triangle_area(2, 1, 10) == 0.5\n\
    Example: triangle_area(2, 1, 10) == 0.5\nExample: triangle_area(2, 1, 10\nusing\
    \ Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3, 4,\
    \ 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5) ==\
    \ 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\
    \t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1,\
    \ 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpi0jbvz77.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpi0jbvz77.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a > b and a > c \n        then return (a * b) / c\n    else if b >\
    \ c \n        then return (b * c) / a\n    else \n        then return -1\n   \
    \ end\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia,if-statement |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"a\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6cxc_pd4.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6cxc_pd4.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && c+a > b && b+c > a \n        then return (a+b+c)/2\n   \
    \ else return -1\nend\n</cell>\n<code language=julia-1.5>\ntriangle_area(3, 4,\
    \ 5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes in three sides\
    \ of a triangle and returns the area of the triangle. \nIf the three sides form\
    \ a valid triangle, return the area rounded to 2 decimal points. \nOtherwise return\
    \ -1.\nExample: \ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n\
    Hint: \nThe area of a triangle is equal to the sum of two sides multiplied by\
    \ the third.\nThe formula for the area of a triangle is: \n$A = \\frac{(a + b\
    \ + c) 2}{a^2 + b^2 + c^2}$\nThe formula for the area of a triangle rounded to\
    \ 2 decimal points is:\n$A = \\frac{(a + b + c) 2}{a^2 + b^2 + c^2}$\nusing Test\n\
    \n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3, 4, 5) ==\
    \ 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\
    \t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10,\
    \ 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1,\
    \ 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpep5yujx3.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpep5yujx3.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c && a + c > b && b + c > a \n        then return (a * b) /\
    \ c\n    else return -1\nend\n</cell>\n<code language=julia-1.5>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2, 10)\n</cell>\n\
    <text>\nExercise\nWrite a function that checks if a number is prime or not. \n\
    The function should take one argument, an integer and should return true or false\
    \ depending on whether the number is prime or not. \nThe function should only\
    \ use addition and subtraction to determine if the number is prime or not. \n\
    The function should only use multiplication and division to determine if the number\
    \ is prime or not. \nThe function should only use if statements to determine if\
    \ the number is prime or not. \nThe function should only use while loops to determine\
    \ if the number is prime or not. \nThe function should only use if statements\
    \ and while loops to determine if the number is prime or not. \nThe function should\
    \ only use if statements and while loops to determine if the number is prime or\
    \ not. \nThe function should only use if statements and while loops to determine\
    \ if the number is prime or not. \nThe function should only use if statements\
    \ and while loops to determine if the number is prime or not. \nThe function should\
    \ only use if statements and while loops to determine if the number is prime or\
    \ not. \nThe function should only use if statements and while loops to determine\
    \ if the number is prime or not. \nThe function should only use if statements\
    \ and while loops to determine if the number is prime or not. \nThe function should\
    \ only use if statements and while loops to determine if the number is prime or\
    \ not. \nThe function should only use if statements and while loops to determine\
    \ if the number is prime or not. \nThe function should only use if statements\
    \ and while loops to determine if the number is prime or not. \nThe function should\
    \ only use if statements and while loops to determine if the number is prime or\
    \ not. \nThe function should only use if statements and while loops to determine\
    \ if the number is prime or not. \nThe function should only use if statements\
    \ and while loops to determine if the number is prime or not. \nThe function should\
    \ only use if statements and while loops to determine if the number is prime or\
    \ not. \nThe function should only use if statements and while loops to determine\
    \ if the number is prime or not. \nThe function should only use if statements\
    \ and while loops to determine if the number is prime or not. \nThe function should\
    \ only use if statements and while loops to determine if the number is prime or\
    \ not. \nThe function should only use if statements and while loops to determine\
    \ if the number is prime or not. \nThe function should only use if statements\
    \ and while loops to determine if the number is prime or not. \nThe \nusing Test\n\
    \n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3, 4, 5) ==\
    \ 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\
    \t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10,\
    \ 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1,\
    \ 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpkqk5z7hv.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpkqk5z7hv.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c && a + c > b && b + c > a \n        then return (a * b *\
    \ c)/2\n    else return -1\nend\n</cell>\n<code language=julia-1.5>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a number as\
    \ an argument and returns the square of that number. \nExample: \nsquare_number(5)\
    \ == 25\nsquare_number(10) == 100\nsquare_number(20) == 200\nsquare_number(30)\
    \ == 300\nsquare_number(40) == 400\nsquare_number(50) == 500\nsquare_number(60)\
    \ == 600\nsquare_number(70) == 700\nsquare_number(80) == 800\nsquare_number(90)\
    \ == 900\nsquare_number(100) == 1000\nsquare_number(110) == 1100\nsquare_number(120)\
    \ == 1200\nsquare_number(130) == 1300\nsquare_number(140) == 1400\nsquare_number(150)\
    \ == 1500\nsquare_number(160) == 1600\nsquare_number(170) == 1700\nsquare_number(180)\
    \ == 1800\nsquare_number(190) == 1900\nsquare_number(200) == 2000\nsquare_number(210)\
    \ == 2100\nsquare_number(220) == 2200\nsquare_number(230) == 2300\nsquare_number(240)\
    \ == 2400\nsquare_number(250) == 2500\nsquare_number(260) == 2600\nsquare_number(270)\
    \ == 2700\nsquare_number(280) == 2800\nsquare_number(290) == 2900\nsquare_number(300)\
    \ == 3000\nsquare_number(310) == 3100\nsquare_number(320) == 3200\nsquare_number(330)\
    \ == 3300\nsquare_number(340) == 3400\nsquare_number(350) == 3500\nsquare_number(360)\
    \ == 3600\nsquare_number(370) == 3700\nsquare_number(380) == 3800\nsquare_number(390)\
    \ == 3900\nsquare_number(400) == 4000\nsquare_number(410) == 4100\nsquare_number(420)\
    \ == 4200\nsquare_number(430) == 4300\nsquare_number(440) == 4400\nsquare_number(450)\
    \ == 4500\nsquare_number(460) == 4600\nsquare_number(470) == 4700\nsquare_number(480)\
    \ == 4800\nsquare_number(490) == 4900\nsquare_number(500) == 5000\nsquare_number(510)\
    \ == 5100\nsquare_number(520) == 5200\nsquare_number(530) == 5300\nsquare_number(540)\
    \ == 5400\nsquare_number(550) == 5500\nsquare_number(560) == \nusing Test\n\n\
    @testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\
    \t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2,\
    \ 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5,\
    \ 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1)\
    \ == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpu0_revoe.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpu0_revoe.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \     else return -1\n    end\nend\n</cell>\n<code language=julia-1.5>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2, 10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes in three sides of a triangle and\
    \ returns the area rounded to 2 decimal points if it is a valid triangle. Otherwise\
    \ return -1.\nExample: triangle_area(3, 4, 5) == 6.00\nExample: triangle_area(1,\
    \ 2, 10) == -1\nHint: use if/else statements to check whether the sides are valid\
    \ triangles.\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpro2stmsn.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpro2stmsn.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a > b + c || b > a + c || c > a + b \n        return -1\n    else\n\
    \        return (a * b * c)/2\n    end\nend\n</code>\n<|/ a |>\n<| c |>\nThis\
    \ doesn't answer the question of how to find the area of a triangle given its\
    \ sides.\n<|/ c |>\n<| c |>\nI added a solution for that as well.\n<|/ c |>\n\
    <| c |>\nI added a solution for that as well.\n<|/ c |>\n<| a tags=julia,geometry,math\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqr_sx76a.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqr_sx76a.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \     else return -1\n</code>\n<|/ a tags=if-statement,julia,function |>\n<| a\
    \ dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\
    \t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4,\
    \ 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2,\
    \ 3) == -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3)\
    \ == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpk30bpfgv.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpk30bpfgv.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && c+a > b && b+c > a \n        then return (a+b+c)/2\n   \
    \     else return -1\n    else return -1\nend\n</cell>\n<code language=julia-1.5>\n\
    triangle_area(3, 4, 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2,\
    \ 10)\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number is\
    \ even.\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpy7mvmi41.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpy7mvmi41.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && c+a > b && b+c > a \n        then return (a+b+c)/2\n   \
    \ else return -1\nend\n</code>\n<|/ a tags=julia |>\n<| a dscore=0 |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp8mvqtkja.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp8mvqtkja.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a > b and a > c \n        then return (a * b) / c\n    else if a <\
    \ b and a < c \n        then return (-1 * (b * c)) / a\n    else if a < c and\
    \ b < c \n        then return (-1 * (a * b)) / c\n    else return -1\nend\n</cell>\n\
    <code language=julia-1.5>\ntriangle_area(3, 4, 5)\n</cell>\n<code language=julia-1.5>\n\
    triangle_area(1, 2, 10)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ in three sides of a triangle and returns the area of the triangle. \nIf the\
    \ three sides are equal, return 0.\nIf the three sides are equal, return 0.\n\
    If the three sides are equal, return 0.\nIf the three sides are equal, return\
    \ 0.\nIf the three sides are equal, return 0.\nIf the three sides are equal, return\
    \ 0.\nIf the three sides are equal, return 0.\nIf the three sides are equal, return\
    \ 0.\nIf the three sides are equal, return 0.\nIf the three sides are equal, return\
    \ 0.\nIf the three sides are equal, return 0.\nIf the three sides are equal, return\
    \ 0.\nIf the three sides are equal, return 0.\nIf the three sides are equal, return\
    \ 0.\nIf the three sides are equal, return 0.\nIf the three sides are equal, return\
    \ 0.\nIf the three sides are equal, return 0.\nIf the three sides are equal, return\
    \ 0.\nIf the three sides are equal, return 0.\nIf the three sides are equal, return\
    \ 0.\nIf the three sides are equal, return 0.\nIf the three sides are equal, return\
    \ 0.\nIf the three sides are equal, return 0.\nIf the three sides are equal, return\
    \ 0.\nIf the three sides are equal, return 0.\nIf the three sides are equal, return\
    \ 0.\nIf the three sides are equal, return 0.\nIf the three sides are equal, return\
    \ 0.\nIf the three sides are equal, return 0.\nIf the three sides are equal, return\
    \ 0.\nIf the three sides are equal, return 0.\nIf the three sides are equal, return\
    \ 0.\nIf the three sides are equal, return 0.\nIf the three sides are equal, return\
    \ 0.\nIf the three sides are equal, return 0.\nIf the three sides are equal, return\
    \ 0.\nIf the three sides are equal, return 0.\nIf the three sides are equal, return\
    \ 0.\nIf the three sides are equal, return 0.\nIf the three sides are equal, return\
    \ 0.\nIf the three sides are equal, return 0.\nIf the three sides are equal, return\
    \ 0.\nIf the three sides are equal, return 0.\nusing Test\n\n@testset begin\n\n\
    candidate = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1,\
    \ 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2, 2,\
    \ 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5, 7)\
    \ == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1) ==\
    \ 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"a\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl17epp6r.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpl17epp6r.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a > b and a > c \n        then return (a * b) / c\n    else if b >\
    \ c \n        then return (b * c) / a\n    else \n        then return -1\n   \
    \ end\nend\n</cell>\n<code language=julia-1.5>\n# Test your triangle_area function\
    \ below. \ntriangle_area(3, 4, 5)\n</cell>\n<code language=julia-1.5>\n# YOUR\
    \ CODE HERE\nraise NotImplementedError()\n</cell>\n<text>\nTest your triangle_area\
    \ function above using:\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\
    \t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4,\
    \ 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2,\
    \ 3) == -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3)\
    \ == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"a\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgzplwp3u.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgzplwp3u.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        return (a+b+c)/2\n    else\n\
    \        return -1\n    end\nend\n</cell>\n<code language=julia-1.5>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes in three sides\
    \ of a triangle and returns the area of the triangle. \nIf the three sides form\
    \ a valid triangle, return the area rounded to 2 decimal points. \nOtherwise return\
    \ -1.\nExample: \ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n\
    Hint: \nThe area of a triangle is equal to the sum of two sides multiplied by\
    \ the third.\nThe area of a triangle is equal to the product of the two sides\
    \ multiplied by the third.\nThe area of a triangle is equal to the product of\
    \ the two sides multiplied by the third.\nThe area of a triangle is equal to the\
    \ product of the two sides multiplied by the third.\nThe area of a triangle is\
    \ equal to the product of the two sides multiplied by the third.\nThe area of\
    \ a triangle is equal to the product of the two sides multiplied by the third.\n\
    The area of a triangle is equal to the product of the two sides multiplied by\
    \ the third.\nThe area of a triangle is equal to the product of the two sides\
    \ multiplied by the third.\nThe area of a triangle is equal to the product of\
    \ the two sides multiplied by the third.\nThe area of a triangle is equal to the\
    \ product of the two sides multiplied by the third.\nThe area of a triangle is\
    \ equal to the product of the two sides multiplied by the third.\nThe area of\
    \ a triangle is equal to the product of the two sides multiplied by the third.\n\
    The area of a triangle is equal to the product of the two sides multiplied by\
    \ the third.\nThe area of a triangle is equal to the product of the two sides\
    \ multiplied by the third.\nThe area of a triangle is equal to the product of\
    \ the two sides multiplied by the third.\nThe area of a triangle is equal to the\
    \ product of the two sides multiplied by the third.\nThe area of a triangle is\
    \ equal to the product of the two sides multiplied by the third.\nThe area of\
    \ a triangle is equal to the product of the two sides multiplied by the third.\n\
    The area of a triangle is equal to the product of the two sides multiplied by\
    \ the third.\nThe area of a triangle is equal to the product of the two sides\
    \ multiplied by the third.\nThe area of a triangle is equal to the product of\
    \ the two sides multiplied by the third.\nThe area of a triangle is equal to the\
    \ product of the two \nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\
    \t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4,\
    \ 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2,\
    \ 3) == -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3)\
    \ == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz56evvjo.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpz56evvjo.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \ else return -1\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide\
    \ an answer to the question. Once you have sufficient [reputation](https://stackoverflow.com/help/whats-reputation)\
    \ you will be able to [comment on any post](https://stackoverflow.com/help/privileges/comment);\
    \ instead, [provide answers that don't require clarification from the asker](https://meta.stackexchange.com/questions/214173/why-do-i-need-50-reputation-to-comment-what-can-i-do-instead).\
    \ - [From Review](/review/low-quality-posts/26505308)\n<|/ c |>\n<| c |>\nI added\
    \ an explanation to the answer\n<|/ c |>\n<| c |>\nThis does not provide an answer\
    \ to the question. Once you have sufficient [reputation](https://stackoverflow.com/help/whats-reputation)\
    \ you will be able to [comment on any post](https://stackoverflow.com/help/privileges/comment);\
    \ instead, [provide answers that don't require clarification from the asker](https://meta.stackexchange.com/questions/214173/why-do-i-need-50-reputation-to-comment-what-can-i-do-instead).\
    \ - [From Review](/review/low-quality-posts/26505308)\n<|/ c |>\n<| c |>\nI added\
    \ an explanation to the answer\n<|/ c |>\n<| c |>\nThis does not provide an answer\
    \ to the question. Once you have sufficient [reputation](https://stackoverflow.com/help/whats-reputation)\
    \ you will be able to [comment on any post](https://stackoverflow.com/help/privileges/comment);\
    \ instead, [provide answers that don't require clarification from the asker](https://meta.stackexchange.com/questions/214173/why-do-i-need-50-reputation-to-comment-what-can-i-do-instead).\
    \ - [From Review](/review/low-quality-posts/26505308)\n<|/ c |>\n<| a tags=julia\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpu6abt3n8.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpu6abt3n8.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c || a + c > b || b + c > a \n        then return -1\n    else\
    \ \n        return (a * b * c)/2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    triangle_area(3, 4, 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2,\
    \ 10)\n</cell>\n<text>\nExercise\nWrite a function that takes a vector of numbers\
    \ and returns the sum of the squares of the numbers in the vector. \nExample:\
    \ \n    vector_square([1,2,3]) == 9\n    vector_square([1,4,9]) == 25\n    vector_square([1,4,0])\
    \ == -1\n    vector_square([1,4,0]) == -1\n    vector_square([1,4,0]) == -1\n\
    \    vector_square([1,4,0]) == -1\n    vector_square([1,4,0]) == -1\n    vector_square([1,4,0])\
    \ == -1\n    vector_square([1,4,0]) == -1\n    vector_square([1,4,0]) == -1\n\
    \    vector_square([1,4,0]) == -1\n    vector_square([1,4,0]) == -1\n    vector_square([1,4,0])\
    \ == -1\n    vector_square([1,4,0]) == -1\n    vector_square([1,4,0]) == -1\n\
    \    vector_square([1,4,0]) == -1\n    vector_square([1,4,0]) == -1\n    vector_square([1,4,0])\
    \ == -1\n    vector_square([1,4,0]) == -1\n    vector_square([1,4,0]) == -1\n\
    \    vector_square([1,4,0]) == -1\n    vector_square([1,4,0]) == -1\n    vector_square([1,4,0])\
    \ == -1\n    vector_square([1,4,0]) == -1\n    vector_square([1,4,0]) == -1\n\
    \    vector_square([1,4,0]) == -1\n    vector_square([1,4,0]) == -1\n    vector_square([1,4,0])\
    \ == -1\n    vector_square([1,4,0]) == -1\n    vector_square([1,4,0]) == -1\n\
    \    vector_square([1,4,0]) == -1\n    vector_square([1,4,0]) == -1\n    vector_square([1,4,0])\
    \ == -1\n    vector_square([1,4,0]) == -1\n    vector_square([1,4,0]) == -1\n\
    \    vector_square([1,4,0]) == -1\n    vector_square([1,4,0]) == -1\n    vector_square([1,4,0])\
    \ == -1\n    vector_square([1,4,0]) == -1\n    vector_square([1,4,0]) == -1\n\
    \    vector_square([1,4,0]) == -1\n    vector_square([\nusing Test\n\n@testset\
    \ begin\n\ncandidate = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t\
    @test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2,\
    \ 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5,\
    \ 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1)\
    \ == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpdpdnfy0v.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpdpdnfy0v.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \     else return -1\n    else return -1\nend\n</code>\n<|/ a tags=julia,function\
    \ |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\
    \t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4,\
    \ 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2,\
    \ 3) == -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3)\
    \ == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp78310x_j.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp78310x_j.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \     else return -1\n    end\nend\n</cell>\n<code language=julia-1.0>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<text>\nExercise: Write a function that returns the area of\
    \ a triangle given its three sides. \n    Use a conditional statement to determine\
    \ if the sides are valid triangles. \n    If they are valid triangles, return\
    \ the area of the triangle. \n    Otherwise return -1\n    Use a function to test\
    \ your function.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1,\
    \ 2, 10) == -1\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\
    \t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4,\
    \ 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2,\
    \ 3) == -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3)\
    \ == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp3111_kk9.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp3111_kk9.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a > b + c || b > a + c || c > a + b \n        then return -1\n    else\
    \ return (a * b * c)/2\nend\n</cell>\n<code language=julia-1.5>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2, 10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the area of a triangle given\
    \ three sides. \nThe function should take in three sides and return the area rounded\
    \ to 2 decimal points.\nThe function should return -1 if the three sides form\
    \ a triangle.\nExample: triangle_area(3, 4, 5) == 6.00\nExample: triangle_area(1,\
    \ 2, 10) == -1\nHint: You can use the triangle_area function you wrote in the\
    \ previous exercise.\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\
    \t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4,\
    \ 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2,\
    \ 3) == -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3)\
    \ == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpqd2qhyp4.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpqd2qhyp4.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \ else return -1\nend\n</code>\n<|/ a tags=julia,function |>\n<| a dscore=1 |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpkpymayx5.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpkpymayx5.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c and a + c > b and b + c > a then \n        area_of_triangle\
    \ = Float64((a + b + c) / 2)\n        return area_of_triangle\n    else\n    \
    \    return -1\n    end\nend\n</code>\n<|/ a tags=julia,function |>\n<| a |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"a\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx4z7nc7l.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpx4z7nc7l.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \ else return -1\nend\n</cell>\n<code language=julia-1.0>\ntriangle_area(3, 4,\
    \ 5)\n</cell>\n<code language=julia-1.0>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the area of a triangle given its sides.\
    \ \nThe function should take in three sides and return the area rounded to 2 decimal\
    \ points.\nExample: triangle_area(3, 4, 5) == 6.00\nExample: triangle_area(1,\
    \ 2, 10) == -1\nHint: use the function triangle_area defined above.\nusing Test\n\
    \n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3, 4, 5) ==\
    \ 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\
    \t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10,\
    \ 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1,\
    \ 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpmxueumnp.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpmxueumnp.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \     else return -1\n    else return -1\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp7vhlh3f0.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp7vhlh3f0.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c && a + c > b && b + c > a \n        then return (a * b *\
    \ c)/2\n        else return -1\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    triangle_area(3, 4, 5)\n</cell>\n<text>\nExercise\nWrite a function that checks\
    \ if a number is prime (ie. divisible only by 1 and itself)\nHint: use isPrime()\n\
    using Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpd9d7ae73.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpd9d7ae73.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \     else return -1\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes in three points and returns the area of a triangle formed by the\
    \ three points.\nThe triangle is formed when the sum of any two sides is greater\
    \ than the third side.\nExample: \ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1,\
    \ 2, 10) == -1\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t\
    @test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4,\
    \ 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2,\
    \ 3) == -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3)\
    \ == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmputuj49b2.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmputuj49b2.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c && a + c > b && b + c > a \n        then return (a * b *\
    \ c)/2\n        else return -1\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpfvk6yr2o.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpfvk6yr2o.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c || b+c > a || c+a > b \n        return -1\n    else \n    \
    \    return (a+b+c)/2\nend\n</cell>\n<code language=julia-1.5>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2, 10)\n</cell>\n\
    <text>\nExercise\nWrite a function that returns the area of a triangle given its\
    \ sides. \nThe function should take in three integers representing the lengths\
    \ of the three sides of the triangle. \nThe function should return -1 if the three\
    \ sides form a non-valid triangle. \nThe function should return an Float64 if\
    \ the three sides form a valid triangle. \nThe function should return an Float64\
    \ if the three sides form a non-valid triangle. \nThe function should return an\
    \ Float64 if the three sides form a non-valid triangle. \nThe function should\
    \ return an Float64 if the three sides form a non-valid triangle. \nThe function\
    \ should return an Float64 if the three sides form a non-valid triangle. \nThe\
    \ function should return an Float64 if the three sides form a non-valid triangle.\
    \ \nThe function should return an Float64 if the three sides form a non-valid\
    \ triangle. \nThe function should return an Float64 if the three sides form a\
    \ non-valid triangle. \nThe function should return an Float64 if the three sides\
    \ form a non-valid triangle. \nThe function should return an Float64 if the three\
    \ sides form a non-valid triangle. \nThe function should return an Float64 if\
    \ the three sides form a non-valid triangle. \nThe function should return an Float64\
    \ if the three sides form a non-valid triangle. \nThe function should return an\
    \ Float64 if the three sides form a non-valid triangle. \nThe function should\
    \ return an Float64 if the three sides form a non-valid triangle. \nThe function\
    \ should return an Float64 if the three sides form a non-valid triangle. \nThe\
    \ function should return an Float64 if the three sides form a non-valid triangle.\
    \ \nThe function should return an Float64 if the three sides form a non-valid\
    \ triangle. \nThe function should return an Float64 if the three sides form a\
    \ non-valid triangle. \nThe function should return an Float64 if the three sides\
    \ form a non-valid triangle. \nThe function should return an Float64 if the three\
    \ sides form a non-valid triangle. \nThe function should return an Float64 if\
    \ the three sides form a non-valid triangle. \nThe function should return an Float64\
    \ if the three sides form a \nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\
    \t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4,\
    \ 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2,\
    \ 3) == -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3)\
    \ == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprioabh4i.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprioabh4i.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c || a + c > b || b + c > a \n        then return -1\n    else\
    \ \n        return (a * b * c)/2\nend\n</cell>\n<code language=julia-1.5>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2, 10)\n</cell>\n\
    <text>\nExercise: Write a function that returns the area of a triangle given its\
    \ sides. \n    Use a conditional statement to determine if the sides are valid\
    \ triangles. \n    Otherwise return -1.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2,\
    \ 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2)\
    \ == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5, 7) ==\
    \ 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\
    \t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpnupjd8l1.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpnupjd8l1.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c && a + c > b && b + c > a \n        then return (a * b *\
    \ c)/2\n        else return -1\n</code>\n<|/ a dscore=0 |>\n<| a tags=if-statement,julia\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpktfjvmxh.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpktfjvmxh.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c && a + c > b && b + c > a \n        then return (a * b *\
    \ c)/2\n        else return -1\n    else return -1\nend\n</cell>\n<code language=julia-1.5>\n\
    triangle_area(3, 4, 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2,\
    \ 10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the area of\
    \ a triangle given its three sides. \nThe function should take in three arguments:\
    \ a, b, c. \nThe function should return -1 if the three sides form a non-valid\
    \ triangle. \nOtherwise it should return the area of the triangle rounded to 2\
    \ decimal points.\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\
    \t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4,\
    \ 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2,\
    \ 3) == -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3)\
    \ == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpjiz8k1i3.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpjiz8k1i3.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c && a + c > b && b + c > a \n        then return (a * b *\
    \ c)/2\n    else return -1\nend\n</code>\n<|/ a tags=julia,if-statement |>\n<|\
    \ c |>\nI like this solution, but I wonder if it can be made more efficient. For\
    \ example, `if a + b > c && a + c > b && b + c > a then return (a * b * c)/2 else\
    \ return -1 end` can be simplified to `return (a * b * c)/2 if a + b > c && a\
    \ + c > b && b + c > a else -1 end`.\n<|/ c |>\n<| c |>\nYes, that is a good point.\
    \ I will edit my answer to include your suggestion.\n<|/ c |>\n<| a tags=julia,if-statement\
    \ |>\nThe answer by is correct, but I thought I'd add some explanation as to why\
    \ it works.\nThe reason why this works is because Julia has lazy evaluation. Basically,\
    \ the if statement is evaluated only when it is actually needed. So, the following\
    \ code will work:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\
    \t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4,\
    \ 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2,\
    \ 3) == -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3)\
    \ == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpy5m4mtoj.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpy5m4mtoj.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \     else return -1\n    end\nend\n</cell>\n<code language=julia-1.5>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2, 10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of length n and returns\
    \ the sum of the squares of the numbers in the vector.\nExample: \n    square_sum(5)\
    \ == 25\n    square_sum(3) == 9\n    square_sum(1) == 3\n    square_sum(0) ==\
    \ 0\n    square_sum(2) == 4\n    square_sum(10) == 100\n    square_sum(100) ==\
    \ 1000\n    square_sum(1000) == 10000\n    square_sum(10000) == 100000\n    square_sum(100000)\
    \ == 1000000\n    square_sum(1000000) == 10000000\n    square_sum(10000000) ==\
    \ 100000000\n    square_sum(100000000) == 1000000000\n    square_sum(1000000000)\
    \ == 10000000000\n    square_sum(10000000000) == 100000000000\n    square_sum(100000000000)\
    \ == 1000000000000\n    square_sum(1000000000000) == 10000000000000\n    square_sum(10000000000000)\
    \ == 100000000000000\n    square_sum(100000000000000) == 1000000000000000\n  \
    \  square_sum(1000000000000000) == 10000000000000000\n    square_sum(10000000000000000)\
    \ == 100000000000000000\n    square_sum(100000000000000000) == 1000000000000000000\n\
    \    square_sum(1000000000000000000) == 10000000000000000000\n    square_sum(10000000000000000000)\
    \ == 100000000000000000000\n    square_sum(100000000000000000000) == 1000000000000000000000\n\
    \    square_sum(1000000000000000000000) == 10000000000000000000000\n    square_sum(10000000000000000000000)\
    \ == 100000000000000000000000\n    square_sum(100000000000000000000000) == 1000000000000000000000000\n\
    \    square_sum(1000000000000000000000000) == 10000000000000000000000000\n   \
    \ square_sum(10000000000000000000000000) == 100000000000000000000000000\n    square_sum(100000000000000000000000000)\
    \ == 1000000000000000000000000000\n    square_sum(1000000000000000000000000000)\
    \ == 10000000000000000000000000000\n    square_sum(10000000000000000000000000000)\
    \ == 100000000000000000000000000000\n    square_sum(100000000000000000000000000000)\
    \ == 1000000000000000000000000000000\n    square_sum(1000000000000000000000000000000)\
    \ == 10000000000000000000000000000000\n    square_sum(10000000000000000000000000000000)\
    \ == 100000000000000000000000000000000\n    square_sum(100000000000000000000000000000000)\
    \ == 1000000000000000000000000000000000\n    square_sum(1000000000000000000000000000000000)\
    \ == \nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpyetljue4.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpyetljue4.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c and a + c > b and b + c > a then \n        area_tri = Float64(sqrt(a\
    \ * b * c))\n        return area_tri\n    else\n        return -1\n    end\nend\n\
    </code>\n<|/ a tags=julia,function |>\n<| c |>\nThis answer would be better if\
    \ you explained what it does and how it works.\n<|/ c |>\n<| c |>\nI added some\
    \ explanation.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1,\
    \ 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2, 2,\
    \ 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5, 7)\
    \ == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1) ==\
    \ 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"a\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpknerm8ec.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpknerm8ec.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \     else return -1\n    else return -1\nend\n</code>\n<|/ a tags=julia,if-statement\
    \ |>\n<| c |>\nThis does not provide an answer to the question. To critique or\
    \ request clarification from an author, leave a comment below their post. - [From\
    \ Review](/review/low-quality-posts/27815156)\n<|/ c |>\n<| c |>\nThe question\
    \ was how to implement a function that checks if three sides of a triangle form\
    \ a valid triangle. The function I provided does exactly that. My answer was to\
    \ show how it can be done in Julia. How is this not an answer?\n<|/ c |>\n<| c\
    \ |>\nThe question was how to implement a function that checks if three sides\
    \ of a triangle form a valid triangle. The function I provided does exactly that.\
    \ My answer was to show how it can be done in Julia. How is this not an answer?\n\
    <|/ c |>\n<| c |>\nThe question was how to implement a function that checks if\
    \ three sides of a triangle form a valid triangle. The function I provided does\
    \ exactly that. My answer was to show how it can be done in Julia. How is this\
    \ not an answer?\n<|/ c |>\n<| c |>\nThe question was how to implement a function\
    \ that checks if three sides of a triangle form a valid triangle. The function\
    \ I provided does exactly that. My answer was to show how it can be done in Julia.\
    \ How is this not an answer?\n<|/ c |>\n<| a dscore=1 |>\nThe function below checks\
    \ if three sides of a triangle form a valid triangle. \n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\
    \t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2,\
    \ 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5,\
    \ 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1)\
    \ == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpoiivmd0t.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpoiivmd0t.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a < b + c and b < c + a then \n        return (a * b + c * a) * (b\
    \ * c - a * b)\n    else \n        return -1\nend\n</cell>\n<code language=julia-1.5>\n\
    triangle_area(3, 4, 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2,\
    \ 10)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the area of\
    \ a triangle given its three sides. \n    Write a test to see if the function\
    \ works.\n    Write a function that returns the area of a triangle given its three\
    \ sides. \n    Write a test to see if the function works.\n    Write a function\
    \ that returns the area of a triangle given its three sides. \n    Write a test\
    \ to see if the function works.\n    Write a function that returns the area of\
    \ a triangle given its three sides. \n    Write a test to see if the function\
    \ works.\n    Write a function that returns the area of a triangle given its three\
    \ sides. \n    Write a test to see if the function works.\n    Write a function\
    \ that returns the area of a triangle given its three sides. \n    Write a test\
    \ to see if the function works.\n    Write a function that returns the area of\
    \ a triangle given its three sides. \n    Write a test to see if the function\
    \ works.\n    Write a function that returns the area of a triangle given its three\
    \ sides. \n    Write a test to see if the function works.\n    Write a function\
    \ that returns the area of a triangle given its three sides. \n    Write a test\
    \ to see if the function works.\n    Write a function that returns the area of\
    \ a triangle given its three sides. \n    Write a test to see if the function\
    \ works.\n    Write a function that returns the area of a triangle given its three\
    \ sides. \n    Write a test to see if the function works.\n    Write a function\
    \ that returns the area of a triangle given its three sides. \n    Write a test\
    \ to see if the function works.\n    Write a function that returns the area of\
    \ a triangle given its three sides. \n    Write a test to see if the function\
    \ works.\n    Write a function that returns the area of a triangle given its three\
    \ sides. \n    Write a test to see if the function works.\n    Write a function\
    \ that returns the area of a triangle given its three sides. \n    Write a test\
    \ to see if the function works.\n    Write a function that returns the area of\
    \ a triangle given its three sides. \n    Write a test to see if the function\
    \ works.\n    Write a function that returns the area of a triangle given its three\
    \ sides. \n    Write a test to \nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\
    \t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4,\
    \ 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2,\
    \ 3) == -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3)\
    \ == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"b\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0vovxsa_.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0vovxsa_.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c && a + c > b && b + c > a \n        then return (a * b *\
    \ c)/2\n        else return -1\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpco38a6om.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpco38a6om.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c || b + c > a || c + a > b \n        return -1\n    else\n\
    \        return (a * b * c)/2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    triangle_area(3, 4, 5)\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the perimeter of a triangle given its lengths. \nThe perimeter of a triangle\
    \ is the sum of all its sides lengths.\nExample: \ntriangle_perimeter(3, 4, 5)\
    \ == 10\ntriangle_perimeter(5, 6, 7) == 15\ntriangle_perimeter(4, 6, 8) == 12\n\
    triangle_perimeter(4, 6, 10) == 16\ntriangle_perimeter(4, 6, 12) == 20\ntriangle_perimeter(4,\
    \ 6, 14) == 24\ntriangle_perimeter(4, 6, 16) == 28\ntriangle_perimeter(4, 6, 18)\
    \ == 32\ntriangle_perimeter(4, 6, 20) == 36\ntriangle_perimeter(4, 6, 22) == 40\n\
    triangle_perimeter(4, 6, 24) == 44\ntriangle_perimeter(4, 6, 26) == 48\ntriangle_perimeter(4,\
    \ 6, 28) == 52\ntriangle_perimeter(4, 6, 30) == 56\ntriangle_perimeter(4, 6, 32)\
    \ == 60\ntriangle_perimeter(4, 6, 34) == 64\ntriangle_perimeter(4, 6, 36) == 68\n\
    triangle_perimeter(4, 6, 38) == 72\ntriangle_perimeter(4, 6, 40) == 76\ntriangle_perimeter(4,\
    \ 6, 42) == 80\ntriangle_perimeter(4, 6, 44) == 84\ntriangle_perimeter(4, 6, 46)\
    \ == 88\ntriangle_perimeter(4, 6, 48) == 92\ntriangle_perimeter(4, 6, 50) == 96\n\
    triangle_perimeter(4, 6, 52) == 100\ntriangle_perimeter(4, 6, 54) == 104\ntriangle_perimeter(4,\
    \ 6, 56) == 108\ntriangle_perimeter(4, 6, 58) == 112\ntriangle_perimeter(4, 6,\
    \ 60) == 116\ntriangle_perimeter(4, 6, 62) == 120\ntriangle_perimeter(4, 6, 64)\
    \ == 124\ntriangle_perimeter(4, 6, 66) == 128\ntriangle_perimeter(4, 6, 68) ==\
    \ 132\ntriangle_perimeter(4, 6, 70) == 136\ntriangle_perimeter(4, 6, 72) == 140\n\
    triangle_perimeter(4, 6, 74) == 144\ntriangle_perimeter(4, 6, 76) == 148\ntriangle_perimeter(4,\
    \ 6, 78) == 152\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t\
    @test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4,\
    \ 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2,\
    \ 3) == -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3)\
    \ == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1x50fr0z.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1x50fr0z.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b\n        triangle_area = (a+b+c)/2\n\
    \    else\n        triangle_area = -1\n    end\n    return triangle_area\nend\n\
    using Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjd15wf8k.jl:26\n  Expression: candidate(4,\
    \ 8, 5) == 8.18\n   Evaluated: 8.5 == 8.18\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpjd15wf8k.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjd15wf8k.jl:23\ntest set: Test Failed at /tmp/tmpjd15wf8k.jl:27\n\
    \  Expression: candidate(2, 2, 2) == 1.73\n   Evaluated: 3.0 == 1.73\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjd15wf8k.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjd15wf8k.jl:23\ntest set: Test Failed at /tmp/tmpjd15wf8k.jl:29\n\
    \  Expression: candidate(10, 5, 7) == 16.25\n   Evaluated: 11.0 == 16.25\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjd15wf8k.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjd15wf8k.jl:23\ntest set: Test Failed at /tmp/tmpjd15wf8k.jl:31\n\
    \  Expression: candidate(1, 1, 1) == 0.43\n   Evaluated: 1.5 == 0.43\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjd15wf8k.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjd15wf8k.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     4      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjd15wf8k.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c && a + c > b && b + c > a \n        then return (a * b *\
    \ c) / 2 \n        else return -1\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI appreciate\
    \ your efforts but this does not answer the question. I am looking for a solution\
    \ that does not involve any loops.\n<|/ c |>\n<| c |>\nI appreciate your efforts\
    \ but this does not answer the question. I am looking for a solution that does\
    \ not involve any loops.\n<|/ c |>\n<| c |>\nI appreciate your efforts but this\
    \ does not answer the question. I am looking for a solution that does not involve\
    \ any loops.\n<|/ c |>\n<| c |>\nI appreciate your efforts but this does not answer\
    \ the question. I am looking for a solution that does not involve any loops.\n\
    <|/ c |>\n<| c |>\nI appreciate your efforts but this does not answer the question.\
    \ I am looking for a solution that does not involve any loops.\n<|/ c |>\n<| a\
    \ dscore=0 |>\nI wrote a solution that does not involve any loops. \n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp2tcz5eip.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp2tcz5eip.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \ else return -1\nend\n</cell>\n<code language=julia-1.5>\ntriangle_area(3, 4,\
    \ 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the area of a triangle given its sides\
    \ a, b, c. \nThe function should return -1 if the triangle is invalid. \nThe function\
    \ should return 0 if the triangle is valid but has zero area.\nThe function should\
    \ return 1 if the triangle is valid and has an area of 1.\nThe function should\
    \ return 2 if the triangle is valid and has an area of 2.\nThe function should\
    \ return 3 if the triangle is valid and has an area of 3.\nThe function should\
    \ return 4 if the triangle is valid and has an area of 4.\nThe function should\
    \ return 5 if the triangle is valid and has an area of 5.\nThe function should\
    \ return 6 if the triangle is valid and has an area of 6.\nThe function should\
    \ return 7 if the triangle is valid and has an area of 7.\nThe function should\
    \ return 8 if the triangle is valid and has an area of 8.\nThe function should\
    \ return 9 if the triangle is valid and has an area of 9.\nThe function should\
    \ return 10 if the triangle is valid and has an area of 10.\nThe function should\
    \ return 11 if the triangle is valid and has an area of 11.\nThe function should\
    \ return 12 if the triangle is valid and has an area of 12.\nThe function should\
    \ return 13 if the triangle is valid and has an area of 13.\nThe function should\
    \ return 14 if the triangle is valid and has an area of 14.\nThe function should\
    \ return 15 if the triangle is valid and has an area of 15.\nThe function should\
    \ return 16 if the triangle is valid and has an area of 16.\nThe function should\
    \ return 17 if the triangle is valid and has an area of 17.\nThe function should\
    \ return 18 if the triangle is valid and has an area of 18.\nThe function should\
    \ return 19 if the triangle is valid and has an area of 19.\nThe function should\
    \ return 20 if the triangle is valid and has an area of 20.\nThe function should\
    \ return 21 if the triangle is valid and has an area of 21.\nThe function should\
    \ return 22 if the triangle is valid and has an area of 22.\nThe function should\
    \ return 23 if the triangle is valid and has an area of 23.\nThe function should\
    \ return 24 if the triangle is valid and has an area of 24.\nThe function should\
    \ return 25 if the tri\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\
    \t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4,\
    \ 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2,\
    \ 3) == -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3)\
    \ == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpoqinmbbe.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpoqinmbbe.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c && a + c > b && b + c > a \n        then return (a * b *\
    \ c)/2\n        else return -1\n    else return -1\nend\n</cell>\n<code language=julia-1.5>\n\
    triangle_area(3, 4, 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2,\
    \ 10)\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a number is\
    \ prime or not. \nA prime number is a natural number greater than 1 that has no\
    \ positive divisors other than 1 and itself.\nExample: \n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    triangle_area(6, 4, 3)\
    \ == -1\n    triangle_area(6, 4, 3) == -1\n    triangle_area(6, 4, 3) == -1\n\
    \    triangle_area(6, 4, 3) == -1\n    triangle_area(6, 4, 3) == -1\n    triangle_area(6,\
    \ 4, 3) == -1\n    triangle_area(6, 4, 3) == -1\n    triangle_area(6, 4, 3) ==\
    \ -1\n    triangle_area(6, 4, 3) == -1\n    triangle_area(6, 4, 3) == -1\n   \
    \ triangle_area(6, 4, 3) == -1\n    triangle_area(6, 4, 3) == -1\n    triangle_area(6,\
    \ 4, 3) == -1\n    triangle_area(6, 4, 3) == -1\n    triangle_area(6, 4, 3) ==\
    \ -1\n    triangle_area(6, 4, 3) == -1\n    triangle_area(6, 4, 3) == -1\n   \
    \ triangle_area(6, 4, 3) == -1\n    triangle_area(6, 4, 3) == -1\n    triangle_area(6,\
    \ 4, 3) == -1\n    triangle_area(6, 4, 3) == -1\n    triangle_area(6, 4, 3) ==\
    \ -1\n    triangle_area(6, 4, 3) == -1\n    triangle_area(6, 4, 3) == -1\n   \
    \ triangle_area(6, 4, 3) == -1\n    triangle_area(6, 4, 3) == -1\n    triangle_area(6,\
    \ 4, 3) == -1\n    triangle_area(6, 4, 3) == -1\n    triangle_area(6, 4, 3) ==\
    \ -1\n    triangle_area(6, 4, 3) == -1\n    triangle_area(6, 4, 3) == -1\n   \
    \ triangle_area(6, 4, 3) == -1\n    triangle_area(6, 4, 3) == -1\n    triangle_area(6,\
    \ 4, 3) == -1\n    triangle_area(6, \nusing Test\n\n@testset begin\n\ncandidate\
    \ = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2,\
    \ 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2)\
    \ == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5, 7) ==\
    \ 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\
    \t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpm8_v4np0.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpm8_v4np0.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c && a + c > b && b + c > a \n        then return (a * b *\
    \ c)/2\n        else return -1\n    end \nend\n</cell>\n<code language=julia-1.0>\n\
    @assert triangle_area(3, 4, 5) == 6.00\n@assert triangle_area(1, 2, 10) == -1\n\
    </cell>\n<text>\nExercise 3\nWrite a function that checks if a triangle is valid\
    \ or not.\nA triangle is valid if:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2,\
    \ 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2)\
    \ == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5, 7) ==\
    \ 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\
    \t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmppaooil5b.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmppaooil5b.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c || b+c > a || c+a > b \n        -1\n    else\n        (a+b+c)/2\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\ntriangle_area(3, 4, 5)\n</cell>\n\
    <code language=julia-1.0>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the area of a triangle given its sides.\
    \ \nThe function should take in three sides and return its area rounded to 2 decimal\
    \ points.\nThe function should return -1 if the three sides do not form a valid\
    \ triangle. \nThe function should return 0 if the three sides are equal.\nExample:\
    \ \ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\ntriangle_area(3,\
    \ 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\ntriangle_area(3, 4, 5) == 6.00\n\
    triangle_area(1, 2, 10) == -1\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1,\
    \ 2, 10) == -1\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n\
    triangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\ntriangle_area(3,\
    \ 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\ntriangle_area(3, 4, 5) == 6.00\n\
    triangle_area(1, 2, 10) == -1\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1,\
    \ 2, 10) == -1\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n\
    triangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\ntriangle_area(3,\
    \ 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\ntriangle_area(3, 4, 5) == 6.00\n\
    triangle_area(1, 2, 10) == -1\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1,\
    \ 2, 10) == -1\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n\
    triangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\ntriangle_area(3,\
    \ 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\ntriangle_area(3, 4, 5) == 6.00\n\
    triangle_area(1, 2, 10) == -1\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1,\
    \ 2, 10) == -1\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n\
    triangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, \nusing Test\n\n@testset begin\n\
    \ncandidate = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1,\
    \ 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2, 2,\
    \ 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5, 7)\
    \ == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1) ==\
    \ 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4at2axv6.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4at2axv6.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a < 0 || b < 0 || c < 0\n        return -1\n    else if a == 0 || b\
    \ == 0 || c == 0 || a + b + c != 0\n        return 0\n    else\n        return\
    \ (a * b * c)/((a + b) * (a + c) * (b + c))\nend\n</cell>\n<code language=julia-1.5>\n\
    triangle_area(3, 4, 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2,\
    \ 10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the area of\
    \ a triangle given its three sides. \nThe function should take in three integers\
    \ representing the lengths of the three sides of a triangle. \nIf the three sides\
    \ form a valid triangle, return the area of the triangle rounded to 2 decimal\
    \ points. \nOtherwise return -1.\nExample: triangle_area(3, 4, 5) == 6.00\nExample:\
    \ triangle_area(1, 2, 10) == -1\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\
    \t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4,\
    \ 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2,\
    \ 3) == -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3)\
    \ == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdt7a6l0v.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdt7a6l0v.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a > b and a > c then return (a+b+c)/2\n    if b > a and b > c then\
    \ return (b+a+c)/2\n    if c > a and c > b then return (c+a+b)/2\n    return -1\n\
    </code>\n<|/ a tags=julia,if-statement |>\n<| c |>\nThis does not answer the question.\
    \ OP asked for how to write an `if` statement in Julia. Your answer does not do\
    \ that.\n<|/ c |>\n<| c |>\nThe question was how to write an if statement in Julia.\
    \ Your answer does not do that.\n<|/ c |>\n<| c |>\nThe question was how to write\
    \ an if statement in Julia. Your answer does not do that.\n<|/ c |>\n<| c |>\n\
    The question was how to write an if statement in Julia. Your answer does not do\
    \ that.\n<|/ c |>\n<| c |>\nThe question was how to write an if statement in Julia.\
    \ Your answer does not do that.\n<|/ c |>\n<| a dscore=4 |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3, 4, 5) ==\
    \ 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\
    \t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10,\
    \ 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1,\
    \ 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"a\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp17xedk8q.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp17xedk8q.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a > b and a > c \n        then return (a * b) / c\n    else if b >\
    \ a and b > c \n        then return (b * a) / c\n    else if c > a and c > b \n\
    \        then return (c * a) / b\n    else return -1\nend\n</cell>\n<code language=julia-1.5>\n\
    triangle_area(3, 4, 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2,\
    \ 10)\n</cell>\n<text>\nExercise: Write a function that returns the area of a\
    \ triangle given its three sides. \n    Use your function to calculate the area\
    \ of any triangle you like.\n    Use your function to calculate the area of any\
    \ triangle you like.\n    Use your function to calculate the area of any triangle\
    \ you like.\n    Use your function to calculate the area of any triangle you like.\n\
    \    Use your function to calculate the area of any triangle you like.\n    Use\
    \ your function to calculate the area of any triangle you like.\n    Use your\
    \ function to calculate the area of any triangle you like.\n    Use your function\
    \ to calculate the area of any triangle you like.\n    Use your function to calculate\
    \ the area of any triangle you like.\n    Use your function to calculate the area\
    \ of any triangle you like.\n    Use your function to calculate the area of any\
    \ triangle you like.\n    Use your function to calculate the area of any triangle\
    \ you like.\n    Use your function to calculate the area of any triangle you like.\n\
    \    Use your function to calculate the area of any triangle you like.\n    Use\
    \ your function to calculate the area of any triangle you like.\n    Use your\
    \ function to calculate the area of any triangle you like.\n    Use your function\
    \ to calculate the area of any triangle you like.\n    Use your function to calculate\
    \ the area of any triangle you like.\n    Use your function to calculate the area\
    \ of any triangle you like.\n    Use your function to calculate the area of any\
    \ triangle you like.\n    Use your function to calculate the area of any triangle\
    \ you like.\n    Use your function to calculate the area of any triangle you like.\n\
    \    Use your function to calculate the area of any triangle you like.\n    Use\
    \ your function to calculate the area of any triangle you like.\n    Use your\
    \ function to calculate the area of any triangle you like.\n    Use your function\
    \ to calculate the area of any triangle you like.\n    Use your function to calculate\
    \ the area of any triangle you like.\n    Use your function to calculate the area\
    \ of any triangle you like.\n    Use your function to \nusing Test\n\n@testset\
    \ begin\n\ncandidate = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t\
    @test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2,\
    \ 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5,\
    \ 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1)\
    \ == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"a\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8wddj6d7.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8wddj6d7.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c && a + c > b && b + c > a \n        then return (a * b) /\
    \ c\n        else return -1\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert triangle_area(3, 4, 5) == 6.00\n@assert triangle_area(1, 2, 10) == -1\n\
    </cell>\n<text>\nExercise 2\nWrite a function that determines whether a number\
    \ is odd or even. \nThe function should take in a single number as an argument\
    \ and return a boolean.\nIf the number is even, return true. \nIf the number is\
    \ odd, return false.\nExample: \nodd_or_even(5) == true\nodd_or_even(10) == false\n\
    odd_or_even(15) == true\nodd_or_even(16) == false\nodd_or_even(17) == true\nodd_or_even(18)\
    \ == false\nodd_or_even(19) == true\nodd_or_even(20) == false\nodd_or_even(21)\
    \ == true\nodd_or_even(22) == false\nodd_or_even(23) == true\nodd_or_even(24)\
    \ == false\nodd_or_even(25) == true\nodd_or_even(26) == false\nodd_or_even(27)\
    \ == true\nodd_or_even(28) == false\nodd_or_even(29) == true\nodd_or_even(30)\
    \ == false\nodd_or_even(31) == true\nodd_or_even(32) == false\nodd_or_even(33)\
    \ == true\nodd_or_even(34) == false\nodd_or_even(35) == true\nodd_or_even(36)\
    \ == false\nodd_or_even(37) == true\nodd_or_even(38) == false\nodd_or_even(39)\
    \ == true\nodd_or_even(40) == false\nodd_or_even(41) == true\nodd_or_even(42)\
    \ == false\nodd_or_even(43) == true\nodd_or_even(44) == false\nodd_or_even(45)\
    \ == true\nodd_or_even(46) == false\nodd_or_even(47) == true\nodd_or_even(48)\
    \ == false\nodd_or_even(49) == true\nodd_or_even(50) == false\nodd_or_even(51)\
    \ == true\nodd_or_even(52) == false\nodd_or_even(53) == true\nodd_or_even(54)\
    \ == false\nodd_or_even(55) == true\nodd_or_even(56) == false\nodd_or_even(57)\
    \ == true\nodd_or_even(58) == false\nodd_or_even(59) == true\nodd_or_even(60)\
    \ == false\nodd_or_even(61) == true\nod\nusing Test\n\n@testset begin\n\ncandidate\
    \ = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2,\
    \ 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2)\
    \ == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5, 7) ==\
    \ 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\
    \t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpr0mqpl5k.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpr0mqpl5k.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \ else return -1\nend\n</cell>\n<code language=julia-1.5>\ntriangle_area(3, 4,\
    \ 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\n\
    Exercise\nWrite a function that checks if a number is prime. \nThe function should\
    \ take in a single number as an argument and should return true or false depending\
    \ on if the number is prime or not. \nThe function should only take in positive\
    \ integers. \nThe function should only return true or false and not print anything.\
    \ \nThe function should only use basic mathematical operations (+, -, *, /, %,\
    \ ==, !=, <, <=, >, >=). \nThe function should only use basic if statements (if,\
    \ else, elseif). \nThe function should only use basic loops (for, while, dowhile).\
    \ \nThe function should only use basic control flow statements (break, continue,\
    \ return, if, elseif, else, while, dowhile). \nThe function should only use basic\
    \ control flow statements (break, continue, return, if, elseif, else, while, dowhile).\
    \ \nThe function should only use basic control flow statements (break, continue,\
    \ return, if, elseif, else, while, dowhile). \nThe function should only use basic\
    \ control flow statements (break, continue, return, if, elseif, else, while, dowhile).\
    \ \nThe function should only use basic control flow statements (break, continue,\
    \ return, if, elseif, else, while, dowhile). \nThe function should only use basic\
    \ control flow statements (break, continue, return, if, elseif, else, while, dowhile).\
    \ \nThe function should only use basic control flow statements (break, continue,\
    \ return, if, elseif, else, while, dowhile). \nThe function should only use basic\
    \ control flow statements (break, continue, return, if, elseif, else, while, dowhile).\
    \ \nThe function should only use basic control flow statements (break, continue,\
    \ return, if, elseif, else, while, dowhile). \nThe function should only use basic\
    \ control flow statements (break, continue, return, if, elseif, else, while, dowhile).\
    \ \nThe function should only use basic control flow statements (break, continue,\
    \ return, if, elseif, else, while, do\nusing Test\n\n@testset begin\n\ncandidate\
    \ = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2,\
    \ 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2)\
    \ == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5, 7) ==\
    \ 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\
    \t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmppy_hc_ru.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmppy_hc_ru.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \ else return -1\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ in three points and returns the area of the triangle formed by the three points.\n\
    The function should return -1 if the three points do not form a valid triangle.\
    \ Otherwise it should return the area of the triangle rounded to 2 decimal points.\n\
    Example:\ntriangle_area(Point(0, 0), Point(1, 0), Point(0, 1)) == 6\ntriangle_area(Point(0,\
    \ 0), Point(0, 1), Point(1, 1)) == -1\ntriangle_area(Point(0, 0), Point(1, 0),\
    \ Point(1, 1)) == -1\ntriangle_area(Point(0, 0), Point(1, 0), Point(0, 2)) ==\
    \ -1\ntriangle_area(Point(0, 0), Point(1, 0), Point(2, 0)) == -1\ntriangle_area(Point(0,\
    \ 0), Point(1, 0), Point(2, 1)) == -1\ntriangle_area(Point(0, 0), Point(1, 0),\
    \ Point(2, 2)) == -1\ntriangle_area(Point(0, 0), Point(1, 0), Point(2, 3)) ==\
    \ -1\ntriangle_area(Point(0, 0), Point(1, 0), Point(2, 4)) == -1\ntriangle_area(Point(0,\
    \ 0), Point(1, 0), Point(2, 5)) == -1\ntriangle_area(Point(0, 0), Point(1, 0),\
    \ Point(2, 6)) == -1\ntriangle_area(Point(0, 0), Point(1, 0), Point(2, 7)) ==\
    \ -1\ntriangle_area(Point(0, 0), Point(1, 0), Point(2, 8)) == -1\ntriangle_area(Point(0,\
    \ 0), Point(1, 0), Point(2, 9)) == -1\ntriangle_area(Point(0, 0), Point(1, 0),\
    \ Point(2, 10)) == -1\ntriangle_area(Point(0, 0), Point(1, 0), Point(2, 11)) ==\
    \ -1\ntriangle_area(Point(0, 0), Point(1, 0), Point(2, 12)) == -1\ntriangle_area(Point(0,\
    \ 0), Point(1, 0), Point(2, 13)) == -1\ntriangle_area(Point(0, 0), Point(1, 0),\
    \ Point(2, 14)) == -1\ntriangle_area(Point(0, 0), Point(1, 0), Point(2, 15)) ==\
    \ -1\ntriangle_area(Point(0, 0), Point(1, 0), Point(2, 16)) == -1\ntriangle_area(Point(0,\
    \ 0), Point(1, 0), Point(2, 17)) == -1\ntriangle_area(Point(0, 0), Point(1, 0),\
    \ Point(2, 18)) == -1\ntriangle_area(Point(0, 0), Point(1, 0), Point(2, 19)) ==\
    \ -1\ntriangle_area(Point(0, 0), Point(1, 0), Point(2, 20)) == -1\ntriangle_area(Point(0,\
    \ 0), Point(1, 0), Point(2, 21)) == -1\ntriangle_area(Point(0, \nusing Test\n\n\
    @testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\
    \t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2,\
    \ 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5,\
    \ 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1)\
    \ == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpcfdxbpuf.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpcfdxbpuf.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a > b and a > c \n        return (a * b) / c\n    else if a < b and\
    \ a < c \n        return (b * c) / a\n    else if a > b and a < c \n        return\
    \ ((b * c) / a) + ((a * b) / c)\n    else if a < b and b < c \n        return\
    \ ((b * c) / a) + ((a * b) / c)\n    else if a < b and b > c \n        return\
    \ ((b * c) / a) + ((a * b) / c)\n    else if a > b and b > c \n        return\
    \ ((b * c) / a) + ((a * b) / c)\n    else \n        return -1\nend\n</cell>\n\
    <code language=julia-1.5>\ntriangle_area(3, 4, 5)\n</cell>\n<code language=julia-1.5>\n\
    triangle_area(1, 2, 10)\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the area of a triangle given three sides. \nThe function should return -1 if\
    \ the three sides form a degenerate triangle. \nOtherwise it should return the\
    \ area of the triangle rounded to 2 decimal points.\nusing Test\n\n@testset begin\n\
    \ncandidate = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1,\
    \ 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2, 2,\
    \ 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5, 7)\
    \ == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1) ==\
    \ 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"a\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_m37r24n.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_m37r24n.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c && a + c > b && b + c > a\n        triangle_area = (a * b\
    \ * c)/2\n    else\n        triangle_area = -1\n    end\n    return triangle_area\n\
    end\n</cell>\n<code language=julia-1.5>\ntriangle_area(3, 4, 5)\n</cell>\n<code\
    \ language=julia-1.5>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the area of a triangle given its three sides. \n\
    The function should take in three parameters: a, b, c.\nThe function should return\
    \ -1 if the three sides form a triangle and \nthe area of the triangle if the\
    \ three sides do not form a triangle. \nThe function should return -1 if the three\
    \ sides do not form a triangle. \nThe function should return -1 if the three sides\
    \ form a triangle but \nthe area is negative. \nThe function should return -1\
    \ if the three sides form a triangle but \nthe area is zero. \nThe function should\
    \ return -1 if the three sides form a triangle but \nthe area is positive. \n\
    The function should return -1 if the three sides form a triangle but \nthe area\
    \ is greater than the third side. \nThe function should return -1 if the three\
    \ sides form a triangle but \nthe area is less than the third side. \nThe function\
    \ should return -1 if the three sides form a triangle but \nthe area is equal\
    \ to the third side. \nThe function should return -1 if the three sides form a\
    \ triangle but \nthe area is greater than the third side. \nThe function should\
    \ return -1 if the three sides form a triangle but \nthe area is less than the\
    \ third side. \nThe function should return -1 if the three sides form a triangle\
    \ but \nthe area is equal to the third side. \nThe function should return -1 if\
    \ the three sides form a triangle but \nthe area is greater than the third side.\
    \ \nThe function should return -1 if the three sides form a triangle but \nthe\
    \ area is less than the third side. \nThe function should return -1 if the three\
    \ sides form a triangle but \nthe area is equal to the third side. \nThe function\
    \ should return -1 if the three sides form a triangle but \nthe area is greater\
    \ than the third side. \nThe function should return -1 if the three sides form\
    \ a triangle but \nthe area is less than the third side. \nThe function should\
    \ return -1 if the three sides form a triangle but \nthe area is equal to the\
    \ third side. \nThe function should return -1 if the three sides \nusing Test\n\
    \n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3, 4, 5) ==\
    \ 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\
    \t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10,\
    \ 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1,\
    \ 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkyq1c13x.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkyq1c13x.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a > b and a > c \n        then return (a * b) / c\n    else if a <\
    \ b and a < c \n        then return (-1 * (b * c) / a)\n    else if a < b and\
    \ b < c \n        then return (-1 * (b * c) / a)\n    else if a > b and b > c\
    \ \n        then return (-1 * (a * b) / c)\n    else return -1\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert triangle_area(3, 4, 5) == 6.00\n@assert triangle_area(1,\
    \ 2, 10) == -1\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ area of a triangle given its three sides. \nThe triangle is defined by three\
    \ points: p1, p2, and p3. \nThe area is computed as the area of the triangle formed\
    \ by these three points.\nThe function should work for any three sides lengths.\n\
    Example: triangle_area(3, 4, 5) == 6.00\nHint: You can use the triangle_area function\
    \ you wrote earlier.\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\
    \t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4,\
    \ 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2,\
    \ 3) == -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3)\
    \ == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"a\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7ejelpm5.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7ejelpm5.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c || b + c > a || c + a > b \n        then return -1\n    \
    \    else return (a + b + c) / 2\n</code>\n<|/ a |>\n<| c |>\nThis doesn't answer\
    \ the question. OP wants to know if three sides make a valid triangle, not the\
    \ area of the triangle.\n<|/ c |>\n<| c |>\nThis answer is correct. OP wants to\
    \ know if three sides make a valid triangle, not the area of the triangle. He\
    \ also wants to know if three sides make a valid triangle when all sides are equal\
    \ (which is not possible with your code).\n<|/ c |>\n<| c |>\nThe question was\
    \ edited after I posted my answer. Now it makes more sense. Thanks for pointing\
    \ it out.\n<|/ c |>\n<| c |>\nI edited my answer to include a solution for your\
    \ new question.\n<|/ c |>\n<| a tags=math,geometry,algorithm,language-agnostic\
    \ |>\nThe area of a triangle is equal to the sum of the two sides times the third,\
    \ so you can just add them all up:\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2,\
    \ 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2)\
    \ == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5, 7) ==\
    \ 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\
    \t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpz8n2p50b.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpz8n2p50b.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \ else return -1\nend\n</cell>\n<code language=julia-1.5>\ntriangle_area(3, 4,\
    \ 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\n\
    Exercise\nWrite a function that checks if a triangle is valid (all sides are greater\
    \ than zero)\nWrite a function that checks if a triangle is valid (all sides are\
    \ equal)\nWrite a function that checks if a triangle is valid (all sides are greater\
    \ than zero)\nWrite a function that checks if a triangle is valid (all sides are\
    \ equal)\nWrite a function that checks if a triangle is valid (all sides are greater\
    \ than zero)\nWrite a function that checks if a triangle is valid (all sides are\
    \ equal)\nWrite a function that checks if a triangle is valid (all sides are greater\
    \ than zero)\nWrite a function that checks if a triangle is valid (all sides are\
    \ equal)\nWrite a function that checks if a triangle is valid (all sides are greater\
    \ than zero)\nWrite a function that checks if a triangle is valid (all sides are\
    \ equal)\nWrite a function that checks if a triangle is valid (all sides are greater\
    \ than zero)\nWrite a function that checks if a triangle is valid (all sides are\
    \ equal)\nWrite a function that checks if a triangle is valid (all sides are greater\
    \ than zero)\nWrite a function that checks if a triangle is valid (all sides are\
    \ equal)\nWrite a function that checks if a triangle is valid (all sides are greater\
    \ than zero)\nWrite a function that checks if a triangle is valid (all sides are\
    \ equal)\nWrite a function that checks if a triangle is valid (all sides are greater\
    \ than zero)\nWrite a function that checks if a triangle is valid (all sides are\
    \ equal)\nWrite a function that checks if a triangle is valid (all sides are greater\
    \ than zero)\nWrite a function that checks if a triangle is valid (all sides are\
    \ equal)\nWrite a function that checks if a triangle is valid (all sides are greater\
    \ than zero)\nWrite a function that checks if a triangle is valid (all sides are\
    \ equal)\nWrite a function that checks if a triangle is valid (all sides are greater\
    \ than zero)\nWrite a function that checks if a triangle is valid (all sides are\
    \ equal)\nWrite a function that checks if a triangle is valid (all sides are \n\
    using Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpufdglb59.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpufdglb59.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a > b and a > c then return (a+b+c)/2\n    elif b > a and b > c then\
    \ return (b+a+c)/2\n    else return -1\nend\n</code>\n<|/ a tags=julia,function\
    \ |>\n<| a tags=julia,function |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2,\
    \ 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2)\
    \ == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5, 7) ==\
    \ 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\
    \t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"a\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjhgmyv99.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjhgmyv99.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c and a+c > b and b+c > a \n        then return (a+b+c)/2\n \
    \       else return -1\n    end\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\n\
    This does not answer the question. He wants to know if three sides form a valid\
    \ triangle, not the area of the triangle. Your function returns -1 for invalid\
    \ triangles.\n<|/ c |>\n<| c |>\nI agree with you. I just wanted to show an example\
    \ of the function which returns -1 for invalid triangles.\n<|/ c |>\n<| c |>\n\
    I agree with you. I just wanted to show an example of the function which returns\
    \ -1 for invalid triangles.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\
    \t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2,\
    \ 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5,\
    \ 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1)\
    \ == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"a\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7fw0okl2.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7fw0okl2.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a > b and a > c \n        then return (a * b) / c\n    else if a >\
    \ c \n        then return -1\n    else if b > c \n        then return -1\n   \
    \ else return -1\nend\n</cell>\n<code language=julia-1.3>\ntriangle_area(3, 4,\
    \ 5)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the area of a\
    \ triangle given its three sides. \nIf the three sides are equal, return 0\nIf\
    \ the three sides are opposite, return -1\nIf the three sides are equal, return\
    \ 0\nIf the three sides are opposite, return -1\nIf the three sides are equal,\
    \ return 0\nIf the three sides are opposite, return -1\nIf the three sides are\
    \ equal, return 0\nIf the three sides are opposite, return -1\nIf the three sides\
    \ are equal, return 0\nIf the three sides are opposite, return -1\nIf the three\
    \ sides are equal, return 0\nIf the three sides are opposite, return -1\nIf the\
    \ three sides are equal, return 0\nIf the three sides are opposite, return -1\n\
    If the three sides are equal, return 0\nIf the three sides are opposite, return\
    \ -1\nIf the three sides are equal, return 0\nIf the three sides are opposite,\
    \ return -1\nIf the three sides are equal, return 0\nIf the three sides are opposite,\
    \ return -1\nIf the three sides are equal, return 0\nIf the three sides are opposite,\
    \ return -1\nIf the three sides are equal, return 0\nIf the three sides are opposite,\
    \ return -1\nIf the three sides are equal, return 0\nIf the three sides are opposite,\
    \ return -1\nIf the three sides are equal, return 0\nIf the three sides are opposite,\
    \ return -1\nIf the three sides are equal, return 0\nIf the three sides are opposite,\
    \ return -1\nIf the three sides are equal, return 0\nIf the three sides are opposite,\
    \ return -1\nIf the three sides are equal, return 0\nIf the three sides are opposite,\
    \ return -1\nIf the three sides are equal, return 0\nIf the three sides are opposite,\
    \ return -1\nIf the three sides are equal, return 0\nIf the three sides are opposite,\
    \ return -1\nIf the three sides are equal, return 0\nIf the three sides are opposite,\
    \ return -1\nIf the three sides are equal, return 0\nIf the three sides are opposite,\
    \ return -1\nIf the three sides are \nusing Test\n\n@testset begin\n\ncandidate\
    \ = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2,\
    \ 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2)\
    \ == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5, 7) ==\
    \ 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\
    \t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"a\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwatjsloe.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwatjsloe.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \ else return -1\nend\n</code>\n<|/ a tags=julia,function |>\n<| c |>\nThis doesn't\
    \ answer the question. OP wants to know if there is a function which can determine\
    \ if three sides of a triangle form a valid triangle. Your function only checks\
    \ if three sides are equal\n<|/ c |>\n<| c |>\nI agree with you. My answer is\
    \ not the best solution. I'll try to improve it.\n<|/ c |>\n<| c |>\nI edited\
    \ my answer to include a solution that checks if three sides are equal.\n<|/ c\
    \ |>\n<| c |>\nI edited my answer to include a solution that checks if three sides\
    \ are equal.\n<|/ c |>\n<| c |>\nI edited my answer to include a solution that\
    \ checks if three sides are equal.\n<|/ c |>\n<| a tags=julia,function |>\nThe\
    \ function below checks if three sides of a triangle form a valid triangle. \n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpz2_6en0a.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpz2_6en0a.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && c+a > b && b+c > a \n        then return (a+b+c)/2\n   \
    \     else return -1\n    else return -1\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test your function here\n@assert triangle_area(3, 4, 5) == 6.00\n@assert triangle_area(1,\
    \ 2, 10) == -1\n</cell>\n<text>\n12. Write a Julia function named triangle_circumference\
    \ that computes the circumference of a triangle given its side lengths. Assume\
    \ that the input lengths are all integers.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2,\
    \ 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2)\
    \ == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5, 7) ==\
    \ 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\
    \t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpfiwl4ln4.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpfiwl4ln4.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \     else return -1\n    else return -1\nend\n</cell>\n<code language=julia-1.5>\n\
    triangle_area(3, 4, 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2,\
    \ 10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the area of\
    \ a triangle given its sides. \nThe function should take in three sides and return\
    \ its area rounded to 2 decimal points.\nExample: triangle_area(3, 4, 5) == 6.00\n\
    Example: triangle_area(1, 2, 10) == -1\nHint: use if, else, and, or, not\nusing\
    \ Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3, 4,\
    \ 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5) ==\
    \ 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\
    \t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1,\
    \ 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmphk8dp6nj.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmphk8dp6nj.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c && a + c > b && b + c > a \n        then return (a * b *\
    \ c) / 2 \n        else return -1\n</code>\n<|/ a |>\n<| c |>\nThis doesn't answer\
    \ the question. OP asked for a solution that doesn't require the use of external\
    \ libraries.\n<|/ c |>\n<| c |>\nI added a solution that doesn't require external\
    \ libraries.\n<|/ c |>\n<| c |>\nI added a solution that doesn't require external\
    \ libraries.\n<|/ c |>\n<| c |>\nI added a solution that doesn't require external\
    \ libraries.\n<|/ c |>\n<| c |>\nI added a solution that doesn't require external\
    \ libraries.\n<|/ c |>\n<| a tags=math,geometry,algorithm,python |>\nI wrote a\
    \ solution that doesn't require external libraries. I used the formula for area\
    \ of triangle to calculate the area of the triangle and used the formula for area\
    \ of rectangle to calculate the area of the rectangle and used the formula for\
    \ area of circle to calculate the area of the circle.\n<code>\nimport math\nusing\
    \ Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3, 4,\
    \ 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5) ==\
    \ 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\
    \t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1,\
    \ 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpo1olagnz.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpo1olagnz.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c || a + c > b || b + c > a \n        then return -1\n    else\
    \ \n        area_of_triangle = sqrt( ((a + b) * (b - c)) + ((a + c) * (c - b))\
    \ + ((b + c) * (a - b)) )\n        return round(area_of_triangle, 2)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@time triangle_area(3, 4, 5)\n</cell>\n\
    <code language=julia-1.5>\n@time triangle_area(1, 2, 10)\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the area of a triangle given its sides and a third\
    \ side.\nExample: triangle_area(3, 4, 5) == 6.00\nHint: Look at the formula for\
    \ the area of a triangle and use that to write a function that returns the area\
    \ of a triangle given its sides and a third side.\nusing Test\n\n@testset begin\n\
    \ncandidate = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1,\
    \ 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2, 2,\
    \ 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5, 7)\
    \ == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1) ==\
    \ 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpyw84wnmy.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpyw84wnmy.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c && a + c > b && b + c > a \n        then return (a * b) /\
    \ c\n        else return -1\n    else return -1\nend\n</cell>\n<code language=julia-1.5>\n\
    triangle_area(3, 4, 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2,\
    \ 10)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the area of\
    \ a triangle given its sides. \nThe function should take in three integers representing\
    \ the lengths of the three sides of the triangle. \nThe function should return\
    \ -1 if the three sides do not form a valid triangle. \nOtherwise it should return\
    \ the area of the triangle rounded to 2 decimal points.\nExample: \ntriangle_area(3,\
    \ 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\nHint: \nThe area of a triangle\
    \ is equal to the sum of its two sides multiplied by the third.\nusing Test\n\n\
    @testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\
    \t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2,\
    \ 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5,\
    \ 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1)\
    \ == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp391i6r9v.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp391i6r9v.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c || a + c > b || b + c > a \n        return -1\n    else \n\
    \        return (a * b * c)/2\nend\n</cell>\n<code language=julia-1.5>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2, 10)\n</cell>\n\
    <text>\nExercise\nWrite a function that returns the area of a triangle given its\
    \ sides a, b, and c. \nThe function should return -1 if the triangle is not valid.\
    \ \nThe function should return 0 if all sides are the same. \nThe function should\
    \ return 1 if any two sides are the same. \nThe function should return the area\
    \ of the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \nOtherwise return -1\nThree sides make a valid triangle when the\
    \ sum of any two sides is greater \nthan the third side.\nExample: triangle_area(3,\
    \ 4, 5) == 6.00\nExample: triangle_area(1, 2, 10) == -1\nusing Test\n\n@testset\
    \ begin\n\ncandidate = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t\
    @test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2,\
    \ 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5,\
    \ 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1)\
    \ == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy3xvmhlc.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpy3xvmhlc.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \     else return -1\n    else return -1\nend\n</cell>\n<code language=julia-1.5>\n\
    triangle_area(3, 4, 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2,\
    \ 10)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the area of\
    \ a triangle given its sides. \nThe function should take in three integers representing\
    \ the lengths of the sides of the triangle. \nThe function should return -1 if\
    \ the triangle is not valid. \nThe function should return 0 if the triangle is\
    \ valid but has zero area. \nThe function should return 1 if the triangle is valid\
    \ and has area greater than 0.\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\
    \t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4,\
    \ 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2,\
    \ 3) == -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3)\
    \ == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpl026ipqh.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpl026ipqh.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \     else return -1\n    else return -1\nend\n</cell>\n<code language=julia-1.5>\n\
    triangle_area(3, 4, 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2,\
    \ 10)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of numbers\
    \ and returns the sum of the squares of the numbers in the vector. \nExample:\
    \ \n    square_sum(Vector{Int64}([1,2,3])) == 9\n    square_sum(Vector{Int64}([1,2,-3,5]))\
    \ == 25\n    square_sum(Vector{Int64}([1,-2,3,5])) == -1\n    square_sum(Vector{Int64}([1,-2,3,-5,7]))\
    \ == -1\n    square_sum(Vector{Int64}([1,-2,3,-5,7,-9,11])) == -1\n    square_sum(Vector{Int64}([1,-2,3,-5,7,-9,11,-13,17]))\
    \ == -1\n    square_sum(Vector{Int64}([1,-2,3,-5,7,-9,11,-13,17,-21])) == -1\n\
    \    square_sum(Vector{Int64}([1,-2,3,-5,7,-9,11,-13,17,-21,-25])) == -1\n   \
    \ square_sum(Vector{Int64}([1,-2,3,-5,7,-9,11,-13,17,-21,-25,-29])) == -1\n  \
    \  square_sum(Vector{Int64}([1,-2,3,-5,7,-9,11,-13,17,-21,-25,-29,-33])) == -1\n\
    \    square_sum(Vector{Int64}([1,-2,3,-5,7,-9,11,-13,17,-21,-25,-29,-33,-41]))\
    \ == -1\n    square_sum(Vector{Int64}([1,-2,3,-5,7,-9,11,-13,17,-21,-25,-29,-33,-41,-47]))\
    \ == -1\n    square_sum(Vector{Int64}([1,-2,3,-5,7,-9,11,-13,17,-21,-25,-29,-33,-41,-47,-49]))\
    \ == -1\n    square_sum(Vector{Int64}([1,-2,3,-5,7,-9,11,-13,17,-21,-25,-29,-33,-41,-47,-49,-53]))\
    \ == -1\n    square_sum(Vector{Int64}([1,-2,3,-\nusing Test\n\n@testset begin\n\
    \ncandidate = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1,\
    \ 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2, 2,\
    \ 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5, 7)\
    \ == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1) ==\
    \ 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp8fde6yzw.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp8fde6yzw.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \ else return -1\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ in three points and returns the area of the triangle formed by the three points.\n\
    The function should return -1 if the three points do not form a triangle.\nThe\
    \ function should return 0 if the three points form a triangle with equal sides.\n\
    The function should return 1 if the three points form a triangle with opposite\
    \ sides.\nThe function should return 2 if the three points form a triangle with\
    \ equal sides and opposite sides.\nThe function should return 3 if the three points\
    \ form a triangle with equal sides, opposite sides, and an equilateral triangle.\n\
    The function should return 4 if the three points form a triangle with equal sides,\
    \ opposite sides, an equilateral triangle, and an isosceles triangle.\nThe function\
    \ should return 5 if the three points form a triangle with equal sides, opposite\
    \ sides, an equilateral triangle, and an isosceles triangle.\nThe function should\
    \ return 6 if the three points form a triangle with equal sides, opposite sides,\
    \ an equilateral triangle, and an isosceles triangle.\nThe function should return\
    \ 7 if the three points form a triangle with equal sides, opposite sides, an equilateral\
    \ triangle, and an isosceles triangle.\nThe function should return 8 if the three\
    \ points form a triangle with equal sides, opposite sides, an equilateral triangle,\
    \ and an isosceles triangle.\nThe function should return 9 if the three points\
    \ form a triangle with equal sides, opposite sides, an equilateral triangle, and\
    \ an isosceles triangle.\nThe function should return 10 if the three points form\
    \ a triangle with equal sides, opposite sides, an equilateral triangle, and an\
    \ isosceles triangle.\nThe function should return 11 if the three points form\
    \ a triangle with equal sides, opposite sides, an equilateral triangle, and an\
    \ isosceles triangle.\nThe function should return 12 if the three points form\
    \ a triangle with equal sides, opposite sides, an equilateral triangle, and an\
    \ isosceles triangle.\nThe function should return 13 if the three points form\
    \ a triangle with equal sides, opposite sides, an equ\nusing Test\n\n@testset\
    \ begin\n\ncandidate = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t\
    @test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2,\
    \ 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5,\
    \ 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1)\
    \ == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpxkekvb61.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpxkekvb61.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c && a + c > b && b + c > a \n        then return (a * b *\
    \ c)/2\n        else return -1\n</code>\n<|/ a dscore=0 |>\n<| a tags=math,geometry,python\
    \ |>\n<code>\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and\
    \ b + c > a:\n        return (a * b * c) / 2\n    else:\n        return -1\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\ndef triangle_area(a, b, c):\n   \
    \ if a + b > c and a + c > b and b + c > a:\n        return (a * b * c) / 2\n\
    \    else:\n        return -1\n</code>\n<|/ a tags=math,geometry,python |>\n<|\
    \ c |>\nPlease don't post only code as answer, but also provide an explanation\
    \ what your code does and how it solves the problem of the question. Answers with\
    \ an explanation are usually more helpful and of better quality, and are more\
    \ likely to attract upvotes.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndef triangle_area(a,\
    \ b, c):\n    if a + b > c and a + c > b and b + c > a:\n        return (a * b\
    \ * c) / 2\n    else:\n        return -1\n</code>\n<|/ a tags=math,geometry,python\
    \ |>\n<| c |>\nPlease don't post only code as answer, but also provide an explanation\
    \ what your code does and how it solves the problem of the question. Answers with\
    \ an explanation are usually more helpful and of better quality, and are more\
    \ likely to attract upvotes.\n<|/ c |>\n<| a tags=math,geometry,python |>\n<code>\n\
    def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n \
    \       return (a * b * c) / 2\n    else:\n        return -1\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nPlease don't post only code as answer, but also provide an explanation\
    \ what your code does and how it solves the problem of the question. Answers with\
    \ an explanation are usually more helpful and of better quality, and are more\
    \ likely to attract upvotes.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndef triangle_area(a,\
    \ b, c):\n    if a + b > c and a + c > b and b + c > a:\n        return (a * b\
    \ * c) / 2\n    else:\n        return -1\n</code>\n<|/ a tags=\nusing Test\n\n\
    @testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\
    \t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2,\
    \ 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5,\
    \ 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1)\
    \ == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpbcvooff2.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpbcvooff2.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c || c+a > b || b+c > a \n        then return -1\n    else \n\
    \        return (a+b+c)/2\nend\n</cell>\n<code language=julia-1.5>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2, 10)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes in three points and returns the\
    \ area of a triangle formed by those three points.\nThe function should return\
    \ -1 if the three points do not form a triangle or if the area of the triangle\
    \ is 0.\nThe function should return 0 if all three points are the same.\nThe function\
    \ should return 1 if any two of the three points are the same.\nThe function should\
    \ return 0 if all three points are the same.\nThe function should return 1 if\
    \ any two of the three points are the same.\nThe function should return -1 if\
    \ all three points are the same.\nThe function should return 0 if all three points\
    \ are the same.\nThe function should return 1 if any two of the three points are\
    \ the same.\nThe function should return -1 if all three points are the same.\n\
    The function should return 0 if all three points are the same.\nThe function should\
    \ return 1 if any two of the three points are the same.\nThe function should return\
    \ -1 if all three points are the same.\nThe function should return 0 if all three\
    \ points are the same.\nThe function should return 1 if any two of the three points\
    \ are the same.\nThe function should return -1 if all three points are the same.\n\
    The function should return 0 if all three points are the same.\nThe function should\
    \ return 1 if any two of the three points are the same.\nThe function should return\
    \ -1 if all three points are the same.\nThe function should return 0 if all three\
    \ points are the same.\nThe function should return 1 if any two of the three points\
    \ are the same.\nThe function should return -1 if all three points are the same.\n\
    The function should return 0 if all three points are the same.\nThe function should\
    \ return 1 if any two of the three points are the same.\nThe function should return\
    \ -1 if all three points are the same.\nThe function should return 0 if all three\
    \ points are the same.\nThe function should return 1 if any two of the three points\
    \ are the same.\nThe function should return -1 if all three points are the same.\n\
    The function should return 0 if all three points are the same.\nThe function should\
    \ return 1 if any two of the three points are the same.\nThe function should return\
    \ -1 if all three points are the same.\nThe function should return 0 if all three\
    \ points are the same.\nThe function \nusing Test\n\n@testset begin\n\ncandidate\
    \ = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2,\
    \ 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2)\
    \ == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5, 7) ==\
    \ 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\
    \t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpt9canxlq.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpt9canxlq.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \     else return -1\n    else return -1\nend\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=julia,if-statement,function |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1,\
    \ 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2, 2,\
    \ 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5, 7)\
    \ == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1) ==\
    \ 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp1ods7upc.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp1ods7upc.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \     else return -1\n    else return -1\nend\n</cell>\n<code language=julia-1.5>\n\
    triangle_area(3, 4, 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2,\
    \ 10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the area of\
    \ a triangle given its sides. \nThe function should take in three sides and return\
    \ the area rounded to 2 decimal points.\nThe function should return -1 if the\
    \ three sides form an invalid triangle. \nExample: \ntriangle_area(3, 4, 5) ==\
    \ 6.00\ntriangle_area(1, 2, 10) == -1\nHint: \nThe area of a triangle is equal\
    \ to the product of the two sides multiplied by the third.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t\
    @test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2,\
    \ 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5,\
    \ 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1)\
    \ == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpqdf1f5o9.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpqdf1f5o9.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        return (a+b+c)/2\n    else\n\
    \        return -1\nend\n</cell>\n<code language=julia-1.0>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<code language=julia-1.0>\ntriangle_area(1, 2, 10)\n</cell>\n\
    <text>\nExercise: Write a function that returns the area of a triangle given its\
    \ three sides. \n    You may assume that the three sides are all positive.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3, 4,\
    \ 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5) ==\
    \ 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\
    \t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1,\
    \ 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9tadveyw.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9tadveyw.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a > b and a > c then \n        return (b * b) - (a * c)\n    else if\
    \ a < b and a < c then \n        return (c * c) - (b * b)\n    else if a > b and\
    \ a < c then \n        return (b * b) - (a * c)\n    else if a < b and b < c then\
    \ \n        return (c * c) - (b * b)\n    else if a > b and b > c then \n    \
    \    return (b * b) - (a * c)\n    else if a < b and c < a then \n        return\
    \ (c * c) - (b * b)\n    else if a > b and c > a then \n        return (b * b)\
    \ - (a * c)\n    else if a < b and c > a then \n        return (c * c) - (b *\
    \ b)\n    else if a > b and c < a then \n        return (b * b) - (a * c)\n  \
    \  else if a < b and c > a then \n        return (c * c) - (b * b)\n    else if\
    \ a > b and c > a then \n        return (b * b) - (a * c)\n    else if a < b and\
    \ c < a then \n        return (c * c) - (b * b)\n    else if a > b and c < a then\
    \ \n        return (b * b) - (a * c)\n    else if a < b and c > a then \n    \
    \    return (c * c) - (b * b)\n    else if a > b and c > a then \n        return\
    \ (b * b) - (a * c)\n    else if a < b and c < a then \n        return (c * c)\
    \ - (b * b)\n    else if a > b and c < a then \n        return (b * b) - (a *\
    \ c)\n    else if a < b and c > a then \n        return (c * c) - (b * b)\n  \
    \  else if a > b and c > a then \n        return (b * b) - (a * c)\n    else if\
    \ a < b and c < a then \n        return (c * c) - (b * b)\n    else if a > b and\
    \ c < a then \n        return (b * b) - (a * c)\n    else if a < b and c > a then\
    \ \n        return (c * c) - (b * b)\n    else if a > b and c > a then \n    \
    \    return (b * b) - (a * c)\n    else if a < b and c < a then \n        return\
    \ (c * c) - (b * b)\n    else if a > b and c < a then \n        return (b * b)\
    \ - (a * c)\n    else if a < b and c > a then \n        return (c * c) - (b *\
    \ b)\n    else if a > b and \nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\
    \t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4,\
    \ 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2,\
    \ 3) == -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3)\
    \ == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"a\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9ne3pe5g.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9ne3pe5g.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \     else return -1\n</code>\n<|/ a tags=julia,if-statement |>\n<| a dscore=0\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpi38ce540.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpi38ce540.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c || b + c > a || c + a > b \n        then return -1\n    else\
    \ \n        return (a * b * c)/2\nend\n</cell>\n<code language=julia-1.5>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2, 10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the area of a triangle given\
    \ its sides a, b, and c. \nIf the sides are equal, return 0\nIf the sides are\
    \ opposite, return -1\nIf the sides are equal, return 0\nIf the sides are opposite,\
    \ return -1\nIf the sides are equal, return 0\nIf the sides are opposite, return\
    \ -1\nIf the sides are equal, return 0\nIf the sides are opposite, return -1\n\
    If the sides are equal, return 0\nIf the sides are opposite, return -1\nIf the\
    \ sides are equal, return 0\nIf the sides are opposite, return -1\nIf the sides\
    \ are equal, return 0\nIf the sides are opposite, return -1\nIf the sides are\
    \ equal, return 0\nIf the sides are opposite, return -1\nIf the sides are equal,\
    \ return 0\nIf the sides are opposite, return -1\nIf the sides are equal, return\
    \ 0\nIf the sides are opposite, return -1\nIf the sides are equal, return 0\n\
    If the sides are opposite, return -1\nIf the sides are equal, return 0\nIf the\
    \ sides are opposite, return -1\nIf the sides are equal, return 0\nIf the sides\
    \ are opposite, return -1\nIf the sides are equal, return 0\nIf the sides are\
    \ opposite, return -1\nIf the sides are equal, return 0\nIf the sides are opposite,\
    \ return -1\nIf the sides are equal, return 0\nIf the sides are opposite, return\
    \ -1\nIf the sides are equal, return 0\nIf the sides are opposite, return -1\n\
    If the sides are equal, return 0\nIf the sides are opposite, return -1\nIf the\
    \ sides are equal, return 0\nIf the sides are opposite, return -1\nIf the sides\
    \ are equal, return 0\nIf the sides are opposite, return -1\nIf the sides are\
    \ equal, return 0\nIf the sides are opposite, return -1\nIf the sides are equal,\
    \ return 0\nIf the sides are opposite, return -1\nIf the sides are equal, return\
    \ 0\nIf the sides are opposite, return -1\nIf the sides are equal\nusing Test\n\
    \n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3, 4, 5) ==\
    \ 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\
    \t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10,\
    \ 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1,\
    \ 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpe0gvdcwc.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpe0gvdcwc.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a > b and a > c \n        then return (a * b) / c\n    else if a <\
    \ b and a < c \n        then return (-1 * (b * c)) / (a * b)\n    else if a <\
    \ c and b < c \n        then return (-1 * (a * b)) / (a * c)\n    else return\
    \ -1\nend\n</cell>\n<code language=julia-1.5>\ntriangle_area(3, 4, 5)\n</cell>\n\
    <code language=julia-1.5>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the area of a triangle given its sides. \n\
    The function should take in three sides and return its area.\nExample: triangle_area(3,\
    \ 4, 5) == 6.00\nHint: You may want to use if, else, else if, else statements\
    \ to solve this problem. \nYou may want to use if, else, else if, else statements\
    \ to solve this problem. \nYou may want to use if, else, else if, else statements\
    \ to solve this problem. \nYou may want to use if, else, else if, else statements\
    \ to solve this problem. \nYou may want to use if, else, else if, else statements\
    \ to solve this problem.\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\
    \t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4,\
    \ 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2,\
    \ 3) == -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3)\
    \ == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"a\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo54wfaz8.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpo54wfaz8.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \ else return -1\nend\n</cell>\n<code language=julia-1.5>\ntriangle_area(3, 4,\
    \ 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in the vector. \nExample: \n    vector_square([1,2,3])\
    \ == 9\n    vector_square([1,4,9,16]) == 5040\n    vector_square([1,4,9,16]) ==\
    \ 5040\n    vector_square([1,4,9,16]) == 5040\n    vector_square([1,4,9,16]) ==\
    \ 5040\n    vector_square([1,4,9,16]) == 5040\n    vector_square([1,4,9,16]) ==\
    \ 5040\n    vector_square([1,4,9,16]) == 5040\n    vector_square([1,4,9,16]) ==\
    \ 5040\n    vector_square([1,4,9,16]) == 5040\n    vector_square([1,4,9,16]) ==\
    \ 5040\n    vector_square([1,4,9,16]) == 5040\n    vector_square([1,4,9,16]) ==\
    \ 5040\n    vector_square([1,4,9,16]) == 5040\n    vector_square([1,4,9,16]) ==\
    \ 5040\n    vector_square([1,4,9,16]) == 5040\n    vector_square([1,4,9,16]) ==\
    \ 5040\n    vector_square([1,4,9,16]) == 5040\n    vector_square([1,4,9,16]) ==\
    \ 5040\n    vector_square([1,4,9,16]) == 5040\n    vector_square([1,4,9,16]) ==\
    \ 5040\n    vector_square([1,4,9,16]) == 5040\n    vector_square([1,4,9,16]) ==\
    \ 5040\n    vector_square([1,4,9,16]) == 5040\n    vector_square([1,4,9,16]) ==\
    \ 5040\n    vector_square([1,4,9,16]) == 5040\n    vector_square([1,4,9,16]) ==\
    \ 5040\n    vector_square([1,4,9,16]) == 5040\n    vector_square([1,4,9,16]) ==\
    \ 5040\n    vector_square([1,4,9,16]) == 5040\n    vector_square([1,4,9,16]) ==\
    \ 5040\n    vector_square([1,4,9,16]) == 5040\n    \nusing Test\n\n@testset begin\n\
    \ncandidate = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1,\
    \ 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2, 2,\
    \ 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5, 7)\
    \ == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1) ==\
    \ 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmplxr4opyk.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmplxr4opyk.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c && a + c > b && b + c > a \n        then return (a * b *\
    \ c)/2\n        else return -1\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes in three points and returns the area of a triangle formed\
    \ by those three points. \nThe function should return -1 if the three points do\
    \ not form a triangle or if the area is zero. \nThe function should return 0 if\
    \ all three points are the same. \nThe function should return 1 if all three points\
    \ are different. \nThe function should return 2 if the three points are the same.\
    \ \nThe function should return 3 if the three points are different. \nThe function\
    \ should return 4 if the area is zero. \nThe function should return 5 if the area\
    \ is negative. \nThe function should return 6 if the area is positive. \nThe function\
    \ should return 7 if the area is greater than or equal to zero. \nThe function\
    \ should return 8 if the area is less than or equal to zero. \nThe function should\
    \ return 9 if the area is greater than or equal to 10. \nThe function should return\
    \ 10 if the area is less than or equal to 10. \nThe function should return 11\
    \ if the area is greater than or equal to 100. \nThe function should return 12\
    \ if the area is less than or equal to 100. \nThe function should return 13 if\
    \ the area is greater than or equal to 1000. \nThe function should return 14 if\
    \ the area is less than or equal to 1000. \nThe function should return 15 if the\
    \ area is greater than or equal to 10000. \nThe function should return 16 if the\
    \ area is less than or equal to 10000. \nThe function should return 17 if the\
    \ area is greater than or equal to 100000. \nThe function should return 18 if\
    \ the area is less than or equal to 100000. \nThe function should return 19 if\
    \ the area is greater than or equal to 1000000. \nThe function should return 20\
    \ if the area is less than or equal to 1000000. \nThe function should return 21\
    \ if the area is greater than or equal to 10000000. \nThe function should return\
    \ 22 if the area is less than or equal to 10000000. \nThe function should return\
    \ 23 if the area is greater than or equal to 100000000. \nThe function should\
    \ return 24 if the area is less than or equal to 100000000. \nThe function should\
    \ return 25 if the area is greater than or equal to 1000000000. \nThe function\
    \ should return 26 if the area is less than or equal to 1000000000. \nThe function\
    \ should return 27 if the area is greater than or equal to 10000000000. \nThe\
    \ function should return 28 if the area is less than or equal to 10000000000.\
    \ \nThe function should return 29 if the area is greater than or equal to 100000000000.\
    \ \nThe function should return 30 if the area is less than or equal to 100000000000.\
    \ \n\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp55oom8ds.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp55oom8ds.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \ else return -1\nend\n</code>\n<|/ a tags=julia,if-statement |>\n<| c |>\nThanks\
    \ so much for the help!\n<|/ c |>\n<| a tags=julia,if-statement |>\nThe other\
    \ answers here are great, but I wanted to add that you can also use ifelse, which\
    \ is a vectorized version of if:\n<code>\njulia> ifelse(a < b, a, b)\n5-element\
    \ Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\nusing Test\n\n@testset begin\n\ncandidate\
    \ = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2,\
    \ 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2)\
    \ == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5, 7) ==\
    \ 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\
    \t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmptyy7fegy.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmptyy7fegy.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c && a + c > b && b + c > a \n        then return (a * b *\
    \ c)/2\n        else return -1\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test the function \ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10)\
    \ == -1\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is prime. \nA prime number is a natural number greater than 1 that has no positive\
    \ divisors other than 1 and itself.\nFor example 5 is a prime number.\nWrite a\
    \ function that checks if a number is prime using your triangle function.\nTest\
    \ your function on all prime numbers between 1 and 100. \nWhat is the largest\
    \ prime number that is less than 100?\nWhat is the smallest prime number that\
    \ is greater than 0?\nWhat is the sum of all the prime numbers less than 100?\n\
    What is the sum of all the prime numbers greater than 0?\nWhat is the product\
    \ of all prime numbers less than 100?\nWhat is the product of all prime numbers\
    \ greater than 0?\nWhat is the greatest common divisor of all prime numbers less\
    \ than 100?\nWhat is the greatest common divisor of all prime numbers greater\
    \ than 0?\nWhat is the least common multiple of all the prime numbers less than\
    \ 100?\nWhat is the least common multiple of all the prime numbers greater than\
    \ 0?\nWhat is the sum of all the prime numbers less than 100 that are divisible\
    \ by 3?\nWhat is the sum of all the prime numbers greater than 0 that are divisible\
    \ by 3?\nWhat is the product of all prime numbers less than 100 that are divisible\
    \ by 3?\nWhat is the product of all prime numbers greater than 0 that are divisible\
    \ by 3?\nWhat is the greatest common divisor of all prime numbers less than 100\
    \ that are divisible by 3?\nWhat is the greatest common divisor of all prime numbers\
    \ greater than 0 that are divisible by 3?\nWhat is the least common multiple of\
    \ all the prime numbers less than 100 that are divisible by 3?\nWhat is the least\
    \ common multiple of all the prime numbers greater than 0 that are divisible by\
    \ 3?\nWhat is the sum of all the prime numbers less than 100 that are divisible\
    \ by 5?\nWhat is the sum of all the prime numbers greater than 0 that are divisible\
    \ by 5?\nWhat is the product of all prime numbers less than 100 that are divisible\
    \ by 5?\nWhat is the product of all prime numbers greater than 0 that are divisible\
    \ by 5?\nWhat is the greatest common divisor of all prime numbers less than 100\
    \ that are divisible by 5?\nWhat is the greatest common divisor of all prime numbers\
    \ greater than 0 that are divisible by 5?\nWhat is the least common multiple of\
    \ all the prime numbers less than 100 that are divisible by 5?\nWhat \nusing Test\n\
    \n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3, 4, 5) ==\
    \ 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\
    \t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10,\
    \ 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1,\
    \ 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpy47a_3a4.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpy47a_3a4.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \ else return -1\nend\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpfwix5qai.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpfwix5qai.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && c+a > b && b+c > a\n        triangle_area = (a+b+c)/2\n\
    \    else\n        triangle_area = -1\n    end\n    return triangle_area\nend\n\
    </cell>\n<code language=julia-1.5>\ntriangle_area(3, 4, 5)\n</cell>\n<code language=julia-1.5>\n\
    triangle_area(1, 2, 10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the area of a triangle given its sides a, b, and c.\nThe triangle is valid if\
    \ all three sides are greater than 0.\nExample: triangle_area(3, 4, 5) == 6.00\n\
    Example: triangle_area(1, 2, 10) == -1\nHint: You will need to use if, else, and\
    \ end\nHint: You can use the triangle_area function you wrote earlier\nusing Test\n\
    \n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3, 4, 5) ==\
    \ 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\
    \t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10,\
    \ 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1,\
    \ 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpaawl6bd7.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpaawl6bd7.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c || b + c > a || c + a > b \n        return -1\n    else\n\
    \        return (a * b * c)/2\nend\n</cell>\n<code language=julia-1.5>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2, 10)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes in three sides of a triangle and\
    \ returns the area of the triangle. \nIf the three sides form a valid triangle,\
    \ return its area. Otherwise return -1.\nExample: triangle_area(3, 4, 5) == 6.00\n\
    Example: triangle_area(1, 2, 10) == -1\nHint: You may want to use if/else statements\
    \ to test whether a triangle is valid or not.\nusing Test\n\n@testset begin\n\n\
    candidate = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1,\
    \ 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2, 2,\
    \ 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5, 7)\
    \ == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1) ==\
    \ 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdaiaut4o.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdaiaut4o.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \ else return -1\nend\n</cell>\n<code language=julia-1.5>\ntriangle_area(3, 4,\
    \ 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\n\
    Exercise: Write a function that calculates the area of a triangle given its sides\
    \ and return -1 if the triangle is invalid.\nusing Test\n\n@testset begin\n\n\
    candidate = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1,\
    \ 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2, 2,\
    \ 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5, 7)\
    \ == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1) ==\
    \ 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp6n__5r95.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp6n__5r95.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c || a + c > b || b + c > a \n        then return -1\n    else\
    \ \n        area_triangle = sqrt(a^2 + b^2 + c^2)\n        return round(area_triangle,\
    \ 2)\nend\n</cell>\n<code language=julia-1.5>\ntriangle_area(3, 4, 5)\n</cell>\n\
    <code language=julia-1.5>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes in three sides of a triangle and returns the\
    \ area of the triangle rounded to 2 decimal points. \nIf the three sides form\
    \ a valid triangle, return its area. Otherwise return -1.\nExample: \ntriangle_area(3,\
    \ 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\nHint: \nThe area of a triangle\
    \ is given by the formula $\\frac{3}{4} \\times \\frac{5}{6} \\times \\frac{5}{6}$\n\
    using Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp9_auq6tu.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp9_auq6tu.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \     else return -1\n    else return -1\nend\n</cell>\n<code language=julia-1.0>\n\
    triangle_area(3, 4, 5)\n</cell>\n<code language=julia-1.0>\ntriangle_area(1, 2,\
    \ 10)\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number is\
    \ prime or not. \nA number is prime if it is only evenly divisible by 1 and itself.\
    \ \nWrite a function that checks if a number is prime or not. \nA number is prime\
    \ if it is only evenly divisible by 1 and itself. \nWrite a function that checks\
    \ if a number is prime or not. \nA number is prime if it is only evenly divisible\
    \ by 1 and itself. \nWrite a function that checks if a number is prime or not.\
    \ \nA number is prime if it is only evenly divisible by 1 and itself. \nWrite\
    \ a function that checks if a number is prime or not. \nA number is prime if it\
    \ is only evenly divisible by 1 and itself. \nWrite a function that checks if\
    \ a number is prime or not. \nA number is prime if it is only evenly divisible\
    \ by 1 and itself. \nWrite a function that checks if a number is prime or not.\
    \ \nA number is prime if it is only evenly divisible by 1 and itself. \nWrite\
    \ a function that checks if a number is prime or not. \nA number is prime if it\
    \ is only evenly divisible by 1 and itself. \nWrite a function that checks if\
    \ a number is prime or not. \nA number is prime if it is only evenly divisible\
    \ by 1 and itself. \nWrite a function that checks if a number is prime or not.\
    \ \nA number is prime if it is only evenly divisible by 1 and itself. \nWrite\
    \ a function that checks if a number is prime or not. \nA number is prime if it\
    \ is only evenly divisible by 1 and itself. \nWrite a function that checks if\
    \ a number is prime or not. \nA number is prime if it is only evenly divisible\
    \ by 1 and itself. \nWrite a function that checks if a number is prime or not.\
    \ \nA number is prime if it is only evenly divisible by 1 and itself. \nWrite\
    \ a function that checks if a number is prime or not. \nA number is prime if it\
    \ is only evenly divisible by 1 and itself. \nWrite a function that checks if\
    \ a number is prime or not. \nA number is prime if it is only evenly divisible\
    \ by 1 and itself. \nWrite a function that checks if a number is prime or not.\
    \ \nA number is prime if it is only evenly divisible by 1 and itself. \nWrite\
    \ a function that checks if a number is prime or not. \nA number is prime if it\
    \ is only evenly divisible by 1 and itself. \nWrite a function that check\nusing\
    \ Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3, 4,\
    \ 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5) ==\
    \ 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\
    \t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1,\
    \ 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpdb0ecn_0.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpdb0ecn_0.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \ else return -1\nend\n</cell>\n<code language=julia-1.5>\ntriangle_area(3, 4,\
    \ 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the area of a triangle given its\
    \ sides. \nThe function should take in three sides and return the area rounded\
    \ to 2 decimal points.\nExample: triangle_area(3, 4, 5) == 6.00\nHint: use the\
    \ triangle_area function you wrote earlier\nusing Test\n\n@testset begin\n\ncandidate\
    \ = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2,\
    \ 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2)\
    \ == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5, 7) ==\
    \ 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\
    \t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp00zr4yvy.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp00zr4yvy.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a > b and a > c \n        then return (a * b) / c\n    else if b >\
    \ a and b > c \n        then return (b * a) / c\n    else if c > a and c > b \n\
    \        then return (c * a) / b\n    else return -1\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert triangle_area(3, 4, 5) == 6.00\n@assert triangle_area(1, 2, 10) == -1\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the area of a triangle\
    \ given its three sides. \nThe function should take in three parameters of type\
    \ Int64 and return type Float64.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2,\
    \ 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2)\
    \ == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5, 7) ==\
    \ 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\
    \t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"a\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_du9rc1z.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_du9rc1z.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c || a+c > b || b+c > a \n        return -1\n    else \n    \
    \    return (a+b+c)/2\nend\n</cell>\n<code language=julia-1.0>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<code language=julia-1.0>\ntriangle_area(1, 2, 10)\n</cell>\n\
    <text>\nExercise\nWrite a function that calculates the area of a triangle given\
    \ three sides a, b, and c.\nThe function should return -1 if the triangle is not\
    \ valid. Otherwise it should return the area of the triangle rounded to 2 decimal\
    \ points.\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplhtv57cg.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplhtv57cg.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c && a + c > b && b + c > a \n        then return (a * b *\
    \ c)/2\n        else return -1\n</code>\n<|/ a |>\n<| c |>\nThis doesn't answer\
    \ the question. OP wants to know if there is a way to do this without using an\
    \ if statement.\n<|/ c |>\n<| c |>\nI agree with you. OP wants to know if there\
    \ is a way to do this without using an if statement.\n<|/ c |>\n<| c |>\nI believe\
    \ this answer does answer the question. OP wants to know if there is a way to\
    \ do this without using an if statement. OP wants to know if there is a way to\
    \ do this without using an if statement. OP wants to know if there is a way to\
    \ do this without using an if statement.\n<|/ c |>\n<| c |>\nThis answer doesn't\
    \ answer the question. OP wants to know if there is a way to do this without using\
    \ an if statement.\n<|/ c |>\n<| c |>\nI believe this answer does answer the question.\
    \ OP wants to know if there is a way to do this without using an if statement.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2,\
    \ 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2)\
    \ == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5, 7) ==\
    \ 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\
    \t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp3ymkga3r.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp3ymkga3r.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c and a+c > b and b+c > a then \n        return (a+b+c)/2\n \
    \   else\n        return -1\nend\n</cell>\n<code language=julia-1.5>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes in three sides\
    \ of a triangle and returns the area of the triangle rounded to 2 decimal points.\
    \ \nIf the three sides form a valid triangle, return its area rounded to 2 decimal\
    \ points. Otherwise return -1.\nExample: triangle_area(3, 4, 5) == 6.00\nExample:\
    \ triangle_area(1, 2, 10) == -1\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\
    \t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4,\
    \ 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2,\
    \ 3) == -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3)\
    \ == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"a\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg0zutkaf.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg0zutkaf.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \     else return -1\n    else return -1\nend\n</cell>\n<code language=julia-1.5>\n\
    triangle_area(3, 4, 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2,\
    \ 10)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of numbers\
    \ and returns the sum of the squares of the numbers in the vector.\nusing Test\n\
    \n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3, 4, 5) ==\
    \ 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\
    \t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10,\
    \ 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1,\
    \ 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmprg3a0ycr.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmprg3a0ycr.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c and a+c > b and b+c > a \n        then return (a+b+c)/2\n \
    \       else return -1\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't answer\
    \ the question. OP wants to know if there is a way to do this without using if\
    \ statements.\n<|/ c |>\n<| c |>\nI agree with you. I just wanted to show that\
    \ it is possible without using if statements. I didn't want to give the answer\
    \ straight away, because I wanted to show that it is possible. Anyway, I edited\
    \ my answer to show that it is possible without using if statements.\n<|/ c |>\n\
    <| c |>\nI edited my answer to show that it is possible without using if statements.\n\
    <|/ c |>\n<| c |>\nI edited my answer to show that it is possible without using\
    \ if statements.\n<|/ c |>\n<| c |>\nI edited my answer to show that it is possible\
    \ without using if statements.\n<|/ c |>\n<| a tags=if-statement,julia,function\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"a\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpusruw0qt.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpusruw0qt.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a > b and a > c \n        then return (a * b) / c\n    else if a <\
    \ b and a < c \n        then return (-1 * (b * c) / a)\n    else if a > b and\
    \ a < c \n        then return (-1 * (b * c) / a)\n    else if a < b and a > c\
    \ \n        then return (-1 * (b * c) / a)\n    else return -1\nend\n</cell>\n\
    <code language=julia-1.5>\ntriangle_area(3, 4, 5)\n</cell>\n<code language=julia-1.5>\n\
    triangle_area(1, 2, 10)\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the perimeter of a triangle given its sides. \nThe perimeter of a triangle is\
    \ defined as the sum of all its sides \ndivided by the length of the hypotenuse.\n\
    Example: \ntriangle_perimeter(3, 4, 5) == 5.00\ntriangle_perimeter(1, 2, 10) ==\
    \ -1\nHint: \nThe formula for the perimeter of a triangle is:\n$$\\text{perimeter}\
    \ = \\frac{\\text{length}}{2} \\times \\text{hypotenuse}$$\nusing Test\n\n@testset\
    \ begin\n\ncandidate = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t\
    @test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2,\
    \ 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5,\
    \ 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1)\
    \ == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"a\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbj47aoxk.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbj47aoxk.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \     else return -1\n    else return -1\nend\n</cell>\n<code language=julia-1.5>\n\
    triangle_area(3, 4, 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2,\
    \ 10)\n</cell>\n<text>\nExercise 3\nWrite a function that takes in three points\
    \ and returns the area of a triangle formed by those three points. \nThe function\
    \ should return -1 if the three points do not form a triangle. \nThe function\
    \ should return 0 if the three points are collinear. \nThe function should return\
    \ 1 if the three points are on the same line and form a triangle. \nThe function\
    \ should return 2 if the three points are on opposite sides of the same line and\
    \ form a triangle. \nThe function should return 3 if the three points are on opposite\
    \ sides of different lines and form a triangle. \nThe function should return 4\
    \ if the three points are on opposite sides of different lines and form a triangle.\
    \ \nThe function should return 5 if the three points are on opposite sides of\
    \ different lines and form a triangle. \nThe function should return 6 if the three\
    \ points are on opposite sides of different lines and form a triangle. \nThe function\
    \ should return 7 if the three points are on opposite sides of different lines\
    \ and form a triangle. \nThe function should return 8 if the three points are\
    \ on opposite sides of different lines and form a triangle. \nThe function should\
    \ return 9 if the three points are on opposite sides of different lines and form\
    \ a triangle. \nThe function should return 10 if the three points are on opposite\
    \ sides of different lines and form a triangle. \nThe function should return 11\
    \ if the three points are on opposite sides of different lines and form a triangle.\
    \ \nThe function should return 12 if the three points are on opposite sides of\
    \ different lines and form a triangle. \nThe function should return 13 if the\
    \ three points are on opposite sides of different lines and form a triangle. \n\
    The function should return 14 if the three points are on opposite sides of different\
    \ lines and form a triangle. \nThe function should return 15 if the three points\
    \ are on opposite sides of different lines and form a triangle. \nThe function\
    \ should return 16 if the three points are on opposite sides of different lines\
    \ and form a triangle. \nThe function should return 17 if the three points are\
    \ on opposite sides of different lines and form a \nusing Test\n\n@testset begin\n\
    \ncandidate = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1,\
    \ 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2, 2,\
    \ 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5, 7)\
    \ == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1) ==\
    \ 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpdvvzovsw.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpdvvzovsw.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a > b + c || b > a + c || c > a + b \n        then return -1\n    else\
    \ \n        return (a * b * c)/2\nend\n</cell>\n<code language=julia-1.5>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of\
    \ numbers and returns the sum of the squares of the numbers in the vector.\nExample:\
    \ \n    square_sum(Vector{Int64}([1,2,3])) == 9\n    square_sum(Vector{Int64}([1,2]))\
    \ == 4\n    square_sum(Vector{Int64}([1,3,5,7,9])) == 50\n    square_sum(Vector{Int64}([1,3,5,7,9,11]))\
    \ == 100\n    square_sum(Vector{Int64}([1,3,5,7,9,11,13])) == 225\n    square_sum(Vector{Int64}([1,3,5,7,9,11,13,15]))\
    \ == 225\n    square_sum(Vector{Int64}([1,3,5,7,9,11,13,15,17])) == 225\n    square_sum(Vector{Int64}([1,3,5,7,9,11,13,15,17,19]))\
    \ == 225\n    square_sum(Vector{Int64}([1,3,5,7,9,11,13,15,17,19,21])) == 225\n\
    \    square_sum(Vector{Int64}([1,3,5,7,9,11,13,15,17,19,21,23])) == 225\n    square_sum(Vector{Int64}([1,3,5,7,9,11,13,15,17,19,21,23,25]))\
    \ == 225\n    square_sum(Vector{Int64}([1,3,5,7,9,11,13,15,17,19,21,23,25,27]))\
    \ == 225\n    square_sum(Vector{Int64}([1,3,5,7,9,11,13,15,17,19,21,23,25,27,29]))\
    \ == 225\n    square_sum(Vector{Int64}([1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31]))\
    \ == 225\n    square_sum(Vector{Int64}([1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33]))\
    \ == 225\n    square_sum(Vector{Int64}([1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35]))\
    \ == 225\n    square_sum(Vector{Int64}([1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37]))\
    \ == 225\n    square_sum(Vector{Int64}([1,\nusing Test\n\n@testset begin\n\ncandidate\
    \ = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2,\
    \ 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2)\
    \ == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5, 7) ==\
    \ 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\
    \t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmps6r2rtql.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmps6r2rtql.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c && a + c > b && b + c > a \n        then return (a * b *\
    \ c)/2\n        else return -1\n</code>\n<|/ a dscore=0 |>\n<| a tags=if-statement,julia,function\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpn6akapm4.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpn6akapm4.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a < b + c || b < a + c || c < a + b \n        then return -1\n    else\
    \ \n        return (a * b * c) / sqrt(a * b + c * c + a * a + b * b + c * c)\n\
    end\n</cell>\n<code language=julia-1.5>\ntriangle_area(3, 4, 5)\n</cell>\n<code\
    \ language=julia-1.5>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that calculates the area of a triangle given its side lengths.\
    \ \nThe function should take in three numbers and return one number.\nusing Test\n\
    \n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3, 4, 5) ==\
    \ 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\
    \t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10,\
    \ 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1,\
    \ 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp41dmb34s.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp41dmb34s.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        return (a+b+c)/2\n    else\n\
    \        return -1\n    end\nend\n</cell>\n<code language=julia-1.5>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2, 10)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that checks if a number is prime. \nThe function\
    \ should take in a single number as an argument and return a boolean.\nIf the\
    \ number is prime, return true. Otherwise return false.\nExample: \nprime(5) ==\
    \ true\nprime(7) == false\nprime(11) == true\nHint: \nThe first few prime numbers\
    \ are 2, 3, 5, 7, 11, 13 and 17.\nThe first few prime numbers are 2, 3, 5, 7,\
    \ 11, 13 and 17.\nThe first few prime numbers are 2, 3, 5, 7, 11, 13 and 17.\n\
    The first few prime numbers are 2, 3, 5, 7, 11, 13 and 17.\nThe first few prime\
    \ numbers are 2, 3, 5, 7, 11, 13 and 17.\nThe first few prime numbers are 2, 3,\
    \ 5, 7, 11, 13 and 17.\nThe first few prime numbers are 2, 3, 5, 7, 11, 13 and\
    \ 17.\nThe first few prime numbers are 2, 3, 5, 7, 11, 13 and 17.\nThe first few\
    \ prime numbers are 2, 3, 5, 7, 11, 13 and 17.\nThe first few prime numbers are\
    \ 2, 3, 5, 7, 11, 13 and 17.\nThe first few prime numbers are 2, 3, 5, 7, 11,\
    \ 13 and 17.\nThe first few prime numbers are 2, 3, 5, 7, 11, 13 and 17.\nThe\
    \ first few prime numbers are 2, 3, 5, 7, 11, 13 and 17.\nThe first few prime\
    \ numbers are 2, 3, 5, 7, 11, 13 and 17.\nThe first few prime numbers are 2, 3,\
    \ 5, 7, 11, 13 and 17.\nThe first few prime numbers are 2, 3, 5, 7, 11, 13 and\
    \ 17.\nThe first few prime numbers are 2, 3, 5, 7, 11, 13 and 17.\nThe first few\
    \ prime numbers are 2, 3, 5, 7, 11, 13 and 17.\nThe first few prime numbers are\
    \ 2, 3, 5, 7, 11, 13 and 17.\nThe first few prime numbers are 2, 3, 5, 7, 11,\
    \ 13 and 17.\nThe first few prime numbers are 2, 3, 5, 7, 11, 13 and 17.\nThe\
    \ first few prime numbers are 2, 3, 5, 7, 11, 13 and 17.\nThe first few prime\
    \ numbers are 2, 3, 5, 7, 11, 13 and 17.\nThe first few prime numbers are 2, 3,\
    \ 5, 7, 11, 13 and 17.\nThe first few prime numbers are 2, 3, 5, 7, 11, 13 and\
    \ 17.\nThe first few prime numbers are 2, 3, 5, 7, 11, 13 and 17.\nThe first few\
    \ prime numbers are 2, 3, 5, 7, 11, \nusing Test\n\n@testset begin\n\ncandidate\
    \ = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2,\
    \ 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2)\
    \ == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5, 7) ==\
    \ 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\
    \t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp29qj4sz_.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp29qj4sz_.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \ else return -1\nend\n</cell>\n<code language=julia-1.5>\ntriangle_area(3, 4,\
    \ 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the area of a triangle given its\
    \ sides. \nThe function should take in three sides and return the area rounded\
    \ to 2 decimal points.\nIf the sides are equal, return 0.\nIf the sides are equal,\
    \ return 0.\nIf the sides are equal, return 0.\nIf the sides are equal, return\
    \ 0.\nIf the sides are equal, return 0.\nIf the sides are equal, return 0.\nIf\
    \ the sides are equal, return 0.\nIf the sides are equal, return 0.\nIf the sides\
    \ are equal, return 0.\nIf the sides are equal, return 0.\nIf the sides are equal,\
    \ return 0.\nIf the sides are equal, return 0.\nIf the sides are equal, return\
    \ 0.\nIf the sides are equal, return 0.\nIf the sides are equal, return 0.\nIf\
    \ the sides are equal, return 0.\nIf the sides are equal, return 0.\nIf the sides\
    \ are equal, return 0.\nIf the sides are equal, return 0.\nIf the sides are equal,\
    \ return 0.\nIf the sides are equal, return 0.\nIf the sides are equal, return\
    \ 0.\nIf the sides are equal, return 0.\nIf the sides are equal, return 0.\nIf\
    \ the sides are equal, return 0.\nIf the sides are equal, return 0.\nIf the sides\
    \ are equal, return 0.\nIf the sides are equal, return 0.\nIf the sides are equal,\
    \ return 0.\nIf the sides are equal, return 0.\nIf the sides are equal, return\
    \ 0.\nIf the sides are equal, return 0.\nIf the sides are equal, return 0.\nIf\
    \ the sides are equal, return 0.\nIf the sides are equal, return 0.\nIf the sides\
    \ are equal, return 0.\nIf the sides are equal, return 0.\nIf the sides are equal,\
    \ return 0.\nIf the sides are equal, return 0.\nIf the sides are equal, return\
    \ 0.\nIf the sides are equal, return 0.\nIf the sides are equal, return 0.\nIf\
    \ the sides are equal, return 0.\nIf the sides are equal, return 0.\nIf the sides\
    \ are equal, return 0.\nIf the sides are equal, return 0.\nIf the sides are equal,\
    \ return 0.\nIf the sides are equal, return 0.\nIf the sides are equal, return\
    \ 0.\nIf the sides are equal, return 0.\nIf the sides are \nusing Test\n\n@testset\
    \ begin\n\ncandidate = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t\
    @test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2,\
    \ 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5,\
    \ 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1)\
    \ == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpol1iueeb.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpol1iueeb.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && c+a > b && b+c > a \n        then return (a+b+c)/2\n   \
    \     else return -1\n    else return -1\nend\n</cell>\n<code language=julia-1.5>\n\
    triangle_area(3, 4, 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2,\
    \ 10)\n</cell>\n<text>\nExercise 3\nWrite a function that calculates the area\
    \ of a triangle given its sides. \nThe function should take in three sides and\
    \ return its area rounded to 2 decimal points. \nIf the sides are invalid return\
    \ -1.\nExample: \ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n\
    Hint: \nThe formula for the area of a triangle is: \n$A = \\sqrt{s^2 + t^2}$\n\
    where $s$ is the hypotenuse and $t$ is the side opposite the hypotenuse.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3, 4,\
    \ 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5) ==\
    \ 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\
    \t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1,\
    \ 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpe8uasiw4.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpe8uasiw4.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a < b and a < c \n        return (a+b+c)/2\n    else if a < c \n  \
    \      return (a+b+c)/2\n    else if b < c \n        return (a+b+c)/2\n    else\
    \ \n        return -1\nend\n</cell>\n<code language=julia-1.5>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2, 10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes in three sides of a triangle and\
    \ returns the area of the triangle rounded to 2 decimal points if it forms a valid\
    \ triangle. Otherwise return -1.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2,\
    \ 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2)\
    \ == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5, 7) ==\
    \ 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\
    \t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"a\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5s1b01_f.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5s1b01_f.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b\n        triangle_area = (a+b+c)/2\n\
    \    else\n        triangle_area = -1\n    end\n    return triangle_area\nend\n\
    </cell>\n<code language=julia-1.0>\ntriangle_area(3, 4, 5)\n</cell>\n<code language=julia-1.0>\n\
    triangle_area(1, 2, 10)\n</cell>\n<text>\nExercise\nWrite a function that returns\
    \ the area of a triangle given three sides a, b, and c.\nThe function should return\
    \ -1 if the triangle is not valid. \nThe function should return 0 if the triangle\
    \ is valid but has zero area.\nThe function should return 1 if the triangle is\
    \ valid and has an area of 1.\nThe function should return 2 if the triangle is\
    \ valid and has an area of 2.\nThe function should return 3 if the triangle is\
    \ valid and has an area of 3.\nThe function should return 4 if the triangle is\
    \ valid and has an area of 4.\nThe function should return 5 if the triangle is\
    \ valid and has an area of 5.\nThe function should return 6 if the triangle is\
    \ valid and has an area of 6.\nThe function should return 7 if the triangle is\
    \ valid and has an area of 7.\nThe function should return 8 if the triangle is\
    \ valid and has an area of 8.\nThe function should return 9 if the triangle is\
    \ valid and has an area of 9.\nThe function should return 10 if the triangle is\
    \ valid and has an area of 10.\nThe function should return 11 if the triangle\
    \ is valid and has an area of 11.\nThe function should return 12 if the triangle\
    \ is valid and has an area of 12.\nThe function should return 13 if the triangle\
    \ is valid and has an area of 13.\nThe function should return 14 if the triangle\
    \ is valid and has an area of 14.\nThe function should return 15 if the triangle\
    \ is valid and has an area of 15.\nThe function should return 16 if the triangle\
    \ is valid and has an area of 16.\nThe function should return 17 if the triangle\
    \ is valid and has an area of 17.\nThe function should return 18 if the triangle\
    \ is valid and has an area of 18.\nThe function should return 19 if the triangle\
    \ is valid and has an area of 19.\nThe function should return 20 if the triangle\
    \ is valid and has an area of 20.\nThe function should return 21 if the triangle\
    \ is valid and has an area of 21.\nThe function should return 22 if the triangle\
    \ is valid and has an area of 22.\nThe function should return 23 if the triangle\
    \ is valid and has an area of 23.\nThe function should return 24 if the triangle\
    \ is valid and has an \nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\
    \t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4,\
    \ 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2,\
    \ 3) == -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3)\
    \ == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0d6fea0p.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0d6fea0p.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c and a+c > b and b+c > a then \n        return (a+b+c)/2\n \
    \   else \n        return -1\nend\n</cell>\n<code language=julia-1.5>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes in three sides\
    \ of a triangle and returns the area of the triangle rounded to 2 decimal points\
    \ if it forms a valid triangle. Otherwise return -1.\nExample: triangle_area(3,\
    \ 4, 5) == 6.00\nExample: triangle_area(1, 2, 10) == -1\nHint: use if, else, elseif\
    \ to test the validity of the triangle sides\nusing Test\n\n@testset begin\n\n\
    candidate = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1,\
    \ 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2, 2,\
    \ 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5, 7)\
    \ == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1) ==\
    \ 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"a\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9f3q3_i4.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9f3q3_i4.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c && a + c > b && b + c > a \n        then return (a * b) /\
    \ c\n        else return -1\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpnxn5p1np.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpnxn5p1np.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a > b and a > c \n        then return (a * b) / c\n    else if b >\
    \ c \n        then return (b * c) / a\n    else if c > a \n        then return\
    \ (c * a) / b\n    else return -1\nend\n</cell>\n<code language=julia-1.5>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2, 10)\n</cell>\n\
    <text>\nExercise\nWrite a function that calculates the area of a triangle given\
    \ its sides. \nThe function should take in three sides and return the area rounded\
    \ to 2 decimal points.\nThe function should return -1 if the three sides form\
    \ an invalid triangle.\nExample: triangle_area(3, 4, 5) == 6.00\nExample: triangle_area(1,\
    \ 2, 10) == -1\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t\
    @test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4,\
    \ 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2,\
    \ 3) == -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3)\
    \ == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"a\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt9d91j07.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpt9d91j07.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        return (a+b+c)/2\n    else\n\
    \        return -1\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpowt8ad9w.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpowt8ad9w.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \ else return -1\nend\n</cell>\n<code language=julia-1.5>\ntriangle_area(3, 4,\
    \ 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the perimeter of a triangle given\
    \ its sides. \nThe perimeter of a triangle is the sum of all its sides multiplied\
    \ by the length of each side.\nExample: \ntriangle_perimeter(3, 4, 5) == 30\n\
    triangle_perimeter(1, 2, 10) == -1\nHint: \nThe perimeter of a triangle is equal\
    \ to the sum of all its sides multiplied by the length of each side.\nThe perimeter\
    \ of a triangle is equal to the sum of all its sides multiplied by the length\
    \ of each side.\nThe perimeter of a triangle is equal to the sum of all its sides\
    \ multiplied by the length of each side.\nThe perimeter of a triangle is equal\
    \ to the sum of all its sides multiplied by the length of each side.\nThe perimeter\
    \ of a triangle is equal to the sum of all its sides multiplied by the length\
    \ of each side.\nThe perimeter of a triangle is equal to the sum of all its sides\
    \ multiplied by the length of each side.\nThe perimeter of a triangle is equal\
    \ to the sum of all its sides multiplied by the length of each side.\nThe perimeter\
    \ of a triangle is equal to the sum of all its sides multiplied by the length\
    \ of each side.\nThe perimeter of a triangle is equal to the sum of all its sides\
    \ multiplied by the length of each side.\nThe perimeter of a triangle is equal\
    \ to the sum of all its sides multiplied by the length of each side.\nThe perimeter\
    \ of a triangle is equal to the sum of all its sides multiplied by the length\
    \ of each side.\nThe perimeter of a triangle is equal to the sum of all its sides\
    \ multiplied by the length of each side.\nThe perimeter of a triangle is equal\
    \ to the sum of all its sides multiplied by the length of each side.\nThe perimeter\
    \ of a triangle is equal to the sum of all its sides multiplied by the length\
    \ of each side.\nThe perimeter of a triangle is equal to the sum of all its sides\
    \ multiplied by the length of each side.\nThe perimeter of a triangle is equal\
    \ to the sum of all its sides multiplied by the length of each side.\nThe perimeter\
    \ of a triangle is equal to the sum of all its sides multiplied by the length\
    \ of each \nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpognz6gv8.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpognz6gv8.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        return (a+b+c)/2\n    else\n\
    \        return -1\n    end\nend\n</cell>\n<code language=julia-1.4>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes in three sides\
    \ of a triangle and returns the area of the triangle. \nIf the three sides form\
    \ a valid triangle, return their area rounded to 2 decimal points. \nOtherwise\
    \ return -1.\nExample: \ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10)\
    \ == -1\nHint: \nThe area of a triangle is equal to the sum of its two sides multiplied\
    \ by the third's length. \nThe length of a side is equal to the square root of\
    \ the sum of squares of the side's lengths. \nThe sum of squares of two sides\
    \ is equal to the sum of the squares of the two sides. \nThe sum of squares of\
    \ the lengths of two sides is equal to the product of the lengths of the two sides.\
    \ \nThe product of two sides is equal to the product of the two sides multiplied\
    \ by the third's length. \nThe product of the lengths of two sides is equal to\
    \ the product of the lengths of the two sides multiplied by the third's length.\
    \ \nThe product of the lengths of the two sides is equal to the sum of the squares\
    \ of the lengths of the two sides. \nThe sum of the squares of the lengths of\
    \ two sides is equal to the sum of the squares of the two sides. \nThe sum of\
    \ the squares of the two sides is equal to the sum of the squares of the two sides.\
    \ \nThe sum of the squares of the lengths of the two sides is equal to the sum\
    \ of the squares of the lengths of the two sides. \nThe sum of the squares of\
    \ the two sides is equal to the sum of the squares of the two sides. \nThe sum\
    \ of the squares of the lengths of the two sides is equal to the sum of the squares\
    \ of the lengths of the two sides. \nThe sum of the squares of the two sides is\
    \ equal to the sum of the squares of the two sides. \nThe sum of the squares of\
    \ the lengths of the two sides is equal to the sum of the squares of the lengths\
    \ of the two sides. \nThe sum of the squares of the two sides is equal to the\
    \ sum of the squares of the two sides. \nThe sum of the squares of the lengths\
    \ of the two sides is equal to the sum of the squares of the lengths of the two\
    \ sides. \nThe sum of the squares of the two sides is equal to the sum of the\
    \ squares of the two sides. \nThe sum of the squares of the lengths of the two\
    \ sides is equal to the sum of the squares of the lengths of the two sides. \n\
    The sum of the squares of the two sides is equal to the sum of the squares of\
    \ the two sides. \nThe sum of the squares of the lengths of the two sides is equal\
    \ to the sum of the squares of the lengths of the two sides. \nThe sum of the\
    \ \nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpleqgpjtj.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpleqgpjtj.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c || b+c > a || c+a > b \n        then return -1\n        else\
    \ return (a+b+c)/2\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpgjzilxc8.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpgjzilxc8.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c || b+c > a || c+a > b \n        return -1\n    else \n    \
    \    return (a+b+c)/2\n</code>\n<|/ a tags=julia,function |>\n<| a dscore=1 |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfk882f_e.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfk882f_e.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a > b and a > c \n        then return (a * b) / c\n    else if b >\
    \ a and b > c \n        then return (b * a) / c\n    else if c > a and c > b \n\
    \        then return (c * a) / b\n    else return -1\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert triangle_area(3, 4, 5) == 6.00\n@assert triangle_area(1, 2, 10) == -1\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the area of a triangle\
    \ given its three sides. \nThe triangle is defined by three points: A, B and C.\
    \ \nThe area is $\\pi r^2$, where $r$ is the hypotenuse of the triangle side.\
    \ \nThe function should return -1 if the three sides form a degenerate triangle.\
    \ \nOtherwise it should return the area of the triangle rounded to 2 decimal points.\n\
    using Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"a\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp31sfi86t.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp31sfi86t.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b\n        triangle_area(a, b, c)\n   \
    \ else\n        -1\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes in three points and returns the area of a triangle formed by those\
    \ three points.\nThe triangle is formed when the sum of any two sides is greater\
    \ than the third side.\nExample: triangle_area(3, 4, 5) == 6.00\nExample: triangle_area(1,\
    \ 2, 10) == -1\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t\
    @test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4,\
    \ 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2,\
    \ 3) == -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3)\
    \ == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplcsnafp1.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplcsnafp1.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        return (a+b+c)/2\n    else\n\
    \        return -1\n    end\nend\n</cell>\n<code language=julia-1.5>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2, 10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the area of a triangle given\
    \ its sides. \nThe function should take in three integers representing the lengths\
    \ of the sides.\nThe function should return -1 if the triangle is invalid.\nThe\
    \ function should return 0 if the triangle is valid but has zero area.\nThe function\
    \ should return 1 if the triangle is valid and has an area of 1.\nExample: \n\
    triangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\ntriangle_area(3,\
    \ 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\ntriangle_area(3, 4, 5) == 6.00\n\
    triangle_area(1, 2, 10) == -1\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1,\
    \ 2, 10) == -1\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n\
    triangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\ntriangle_area(3,\
    \ 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\ntriangle_area(3, 4, 5) == 6.00\n\
    triangle_area(1, 2, 10) == -1\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1,\
    \ 2, 10) == -1\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n\
    triangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\ntriangle_area(3,\
    \ 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\ntriangle_area(3, 4, 5) == 6.00\n\
    triangle_area(1, 2, 10) == -1\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1,\
    \ 2, 10) == -1\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n\
    triangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\ntriangle_area(3,\
    \ 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\ntriangle_area(3, 4, 5) == 6.00\n\
    triangle_area(1, 2, 10) == -1\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1,\
    \ 2, 10) == -1\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n\
    \nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp89tk384j.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp89tk384j.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \     else return -1\n    else return -1\nend\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a tags=julia,function |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2,\
    \ 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2)\
    \ == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5, 7) ==\
    \ 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\
    \t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp2izn_bp7.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp2izn_bp7.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \ else return -1\nend\n</cell>\n<code language=julia-1.5>\ntriangle_area(3, 4,\
    \ 5)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the area of a\
    \ triangle given three sides. \nThe function should take in three numbers and\
    \ return one number.\nThe function should return -1 if the three sides form an\
    \ invalid triangle.\nExample: triangle_area(3, 4, 5) == 6.00\nExample: triangle_area(1,\
    \ 2, 10) == -1\nHint: You can use the function triangle_area defined above.\n\
    using Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp1_021jkh.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp1_021jkh.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c && a + c > b && b + c > a \n        then \n            area_of_triangle\
    \ = sqrt( ((a + b) * (a + c)) - ((b + c) * (b + a)) )\n            area_of_triangle\
    \ = round(area_of_triangle, 2)\n        else \n            area_of_triangle =\
    \ -1\n    end\n    return area_of_triangle\nend\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=julia,function |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2,\
    \ 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2)\
    \ == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5, 7) ==\
    \ 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\
    \t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdrrmyyos.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdrrmyyos.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a > b and a > c \n        then return (a * b) / c\n    else if b >\
    \ a and b > c \n        then return (b * a) / c\n    else if c > a and c > b \n\
    \        then return (c * a) / b\n    else return -1\nend\n</code>\n<|/ a tags=julia,if-statement\
    \ |>\n<| c |>\nThanks for your answer! I understand that my code is not the most\
    \ efficient but I am not very familiar with Julia. Could you please explain to\
    \ me how you used the if-else statement? I understand that it is used to compare\
    \ the values of a, b and c but I don't understand how you used the if-else statement\
    \ to compare the values of a, b and c.\n<|/ c |>\n<| c |>\nThe if-else statement\
    \ is just used to compare the values of a, b and c. Since you said that your function\
    \ should return -1 if the three sides are equal, it is sufficient to compare the\
    \ values of a, b and c to see if they are equal. If they are equal, then the function\
    \ should return -1. If they are not equal, then the function should return the\
    \ area of the triangle rounded to 2 decimal points.\n<|/ c |>\n<| c |>\nI understand\
    \ that it is sufficient to compare the values of a, b and c to see if they are\
    \ equal. If they are equal, then the function should return -1. If they are not\
    \ equal, then the function should return the area of the triangle rounded to 2\
    \ decimal points. But I don't understand how you used the if-else statement to\
    \ compare the values of a, b and c. Could you please explain to me how you used\
    \ the if-else statement?\n<|/ c |>\n<| c |>\nI added some comments to my answer.\
    \ Hope that helps.\n<|/ c |>\n<| c |>\nThank you so much for your explanation!\
    \ I understand it better now!\n<|/ c |>\n<| a dscore=0 |>\nThe other answers here\
    \ are great, but I wanted to add my own solution. \n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t\
    @test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2,\
    \ 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5,\
    \ 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1)\
    \ == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"a\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp13pob9li.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp13pob9li.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b\n        return (a+b+c)/2\n    else\n\
    \        return -1\n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia\
    \ |>\nI wrote a package to solve this problem. \nhttps://github.com/kamilah/Triangle\n\
    <code>\nusing Triangle\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\
    \t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4,\
    \ 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2,\
    \ 3) == -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3)\
    \ == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpds9x5hsx.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpds9x5hsx.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \     else return -1\n</code>\n<|/ a tags=math,geometry,python,triangle |>\n<|\
    \ c |>\nThis doesn't answer the question. He wants to know if three sides make\
    \ a valid triangle when their sum is greater than the third side.\n<|/ c |>\n\
    <| c |>\nI see what you mean. I've updated my answer to reflect that.\n<|/ c |>\n\
    <| c |>\nI believe this answer is wrong. Try it with `triangle_area(3, 4, 5)`\
    \ which returns `6.00` but should return `6.00`.\n<|/ c |>\n<| c |>\nI believe\
    \ this answer is wrong. Try it with `triangle_area(3, 4, 5)` which returns `6.00`\
    \ but should return `6.00`.\n<|/ c |>\n<| c |>\nI believe this answer is wrong.\
    \ Try it with `triangle_area(3, 4, 5)` which returns `6.00` but should return\
    \ `6.00`.\n<|/ c |>\n<| a dscore=5 |>\nThe formula for area of a triangle is given\
    \ by \n<code>\nA = (S + T + U) / 2\n</code>\nwhere S is the side of triangle and\
    \ T is the side of triangle. \n<code>\nS = (a1 + b2 + c3)/2 \nT = (a2 + b3 + c1)/2\n\
    U = (a3 + b1 + c2)/2\n</code>\nThe formula for area of a triangle is given by\
    \ \n<code>\nA = (S + T + U) / 2\n</code>\nwhere S is the side of triangle and\
    \ T is the side of triangle. \n<code>\nS = (a1 + b2 + c3)/2 \nT = (a2 + b3 + c1)/2\n\
    U = (a3 + b1 + c2)/2\n</code>\nThe formula for area of a triangle is given by\
    \ \n<code>\nA = (S + T + U) / 2\n</code>\nwhere S is the side of triangle and\
    \ T is the side of triangle. \n<code>\nS = (a1 + b2 + c3)/2 \nT = (a2 + b3 + c1)/2\n\
    U = (a3 + b1 + c2)/2\n</code>\nThe formula for area of a triangle is given by\
    \ \n<code>\nA = (S + T + U) / 2\n</code>\nwhere S is the side of triangle and\
    \ T is the side of triangle. \n<code>\nS = (a1 + b2 + c3)/2 \nT = (a2 + b3 + \n\
    using Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmprxdfc41e.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmprxdfc41e.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a > b and a > c \n        then return (a * b) / c\n    else if a >\
    \ c \n        then return -1\n    else if b > c \n        then return -1\n   \
    \ else return -1\nend\n\"\"\"\n    Given the lengths of the three sides of a triangle.\
    \ Return the area of\n    the triangle rounded to 2 decimal points if the three\
    \ sides form a valid triangle. \n    Otherwise return -1\n    Three sides make\
    \ a valid triangle when the sum of any two sides is greater \n    than the third\
    \ side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1,\
    \ 2, 10) == -1\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\
    \t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4,\
    \ 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2,\
    \ 3) == -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3)\
    \ == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"a\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx1b7dp20.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpx1b7dp20.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \ else return -1\nend\n</cell>\n<code language=julia-1.0>\ntriangle_area(3, 4,\
    \ 5)\n</cell>\n<code language=julia-1.0>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a number as an argument and returns the\
    \ number of digits in that number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2,\
    \ 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2)\
    \ == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5, 7) ==\
    \ 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\
    \t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpfxzsuthr.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpfxzsuthr.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \ else return -1\nend\n</cell>\n<code language=julia-1.5>\ntriangle_area(3, 4,\
    \ 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\n\
    Exercise\nWrite a function that returns the area of a triangle given its sides.\
    \ \nThe function should take in three integers representing the lengths of the\
    \ three sides of a triangle.\nThe function should return -1 if the three sides\
    \ form a non-valid triangle. \nOtherwise it should return the area of the triangle\
    \ rounded to 2 decimal points.\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\
    \t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4,\
    \ 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2,\
    \ 3) == -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3)\
    \ == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpmvi1p1jj.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpmvi1p1jj.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c && a + c > b && b + c > a \n        then return (a + b +\
    \ c) / 2\n    else return -1\nend\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpt61ph358.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpt61ph358.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \ else return -1\nend\n</cell>\n<code language=julia-1.0>\ntriangle_area(3, 4,\
    \ 5)\n</cell>\n<code language=julia-1.0>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\n\
    Exercise\nWrite a function that returns the area of a triangle given its sides.\
    \ \nThe function should take three arguments: a, b, c. \nThe function should return\
    \ -1 if the triangle is not valid. \nThe function should return 0 if the triangle\
    \ is valid but all sides are equal.  \nThe function should return 1 if the triangle\
    \ is valid and all sides are different. \nThe function should return 2 if the\
    \ triangle is valid and all sides are equal.  \nThe function should return 3 if\
    \ the triangle is valid and all sides are different. \nThe function should return\
    \ 4 if the triangle is valid and all sides are equal.  \nThe function should return\
    \ 5 if the triangle is valid and all sides are different. \nThe function should\
    \ return 6 if the triangle is valid and all sides are equal.  \nThe function should\
    \ return 7 if the triangle is valid and all sides are different. \nThe function\
    \ should return 8 if the triangle is valid and all sides are equal.  \nThe function\
    \ should return 9 if the triangle is valid and all sides are different. \nThe\
    \ function should return 10 if the triangle is valid and all sides are equal.\
    \  \nThe function should return 11 if the triangle is valid and all sides are\
    \ different. \nThe function should return 12 if the triangle is valid and all\
    \ sides are equal.  \nThe function should return 13 if the triangle is valid and\
    \ all sides are different. \nThe function should return 14 if the triangle is\
    \ valid and all sides are equal.  \nThe function should return 15 if the triangle\
    \ is valid and all sides are different. \nThe function should return 16 if the\
    \ triangle is valid and all sides are equal.  \nThe function should return 17\
    \ if the triangle is valid and all sides are different. \nThe function should\
    \ return 18 if the triangle is valid and all sides are equal.  \nThe function\
    \ should return 19 if the triangle is valid and all sides are different. \nThe\
    \ function should return 20 if the triangle is valid and all sides are equal.\
    \  \nThe function should return 21 if the triangle is valid and all sides are\
    \ different. \nThe function should return 22 if the triangle is valid and all\
    \ sides are equal.  \nThe function should return 23 if the triangle \nusing Test\n\
    \n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3, 4, 5) ==\
    \ 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\
    \t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10,\
    \ 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1,\
    \ 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpiahnj5pf.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpiahnj5pf.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \     else return -1\n    else return -1\nend\n</cell>\n<code language=julia-1.5>\n\
    triangle_area(3, 4, 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2,\
    \ 10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the area of\
    \ a triangle given its three sides. \nThe function should take in three parameters:\
    \ a, b, c\nThe function should return -1 if the triangle is not valid. \nThe function\
    \ should return 0 if the triangle is valid but has zero area.\nThe function should\
    \ return 1 if the triangle is valid and has an area of 1.\nThe function should\
    \ return 2 if the triangle is valid and has an area of 2.\nThe function should\
    \ return 3 if the triangle is valid and has an area of 3.\nThe function should\
    \ return 4 if the triangle is valid and has an area of 4.\nThe function should\
    \ return 5 if the triangle is valid and has an area of 5.\nThe function should\
    \ return 6 if the triangle is valid and has an area of 6.\nThe function should\
    \ return 7 if the triangle is valid and has an area of 7.\nThe function should\
    \ return 8 if the triangle is valid and has an area of 8.\nThe function should\
    \ return 9 if the triangle is valid and has an area of 9.\nThe function should\
    \ return 10 if the triangle is valid and has an area of 10.\nThe function should\
    \ return 11 if the triangle is valid and has an area of 11.\nThe function should\
    \ return 12 if the triangle is valid and has an area of 12.\nThe function should\
    \ return 13 if the triangle is valid and has an area of 13.\nThe function should\
    \ return 14 if the triangle is valid and has an area of 14.\nThe function should\
    \ return 15 if the triangle is valid and has an area of 15.\nThe function should\
    \ return 16 if the triangle is valid and has an area of 16.\nThe function should\
    \ return 17 if the triangle is valid and has an area of 17.\nThe function should\
    \ return 18 if the triangle is valid and has an area of 18.\nThe function should\
    \ return 19 if the triangle is valid and has an area of 19.\nThe function should\
    \ return 20 if the triangle is valid and has an area of 20.\nThe function should\
    \ return 21 if the triangle is valid and has an area of 21.\nThe function should\
    \ return 22 if the triangle is valid and has an area of 22.\nThe function should\
    \ return 23 if the triangle is valid and has an area of 23.\nThe function should\
    \ return 24 if the triangle is \nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\
    \t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4,\
    \ 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2,\
    \ 3) == -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3)\
    \ == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmper4o9bkc.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmper4o9bkc.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \     else return -1\n    else return -1\nend\n</cell>\n<code language=julia-1.5>\n\
    triangle_area(3, 4, 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2,\
    \ 10)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of numbers\
    \ and returns the sum of the numbers in the vector.\nExample: \n    sum([1, 2,\
    \ 3]) == 6\n    sum([1, 4, 5]) == 10\n    sum([1, 4, 3, 2]) == 6\n    sum([1,\
    \ 4, 3, 2]) == 6\n    sum([1, 4, 3, 2]) == 6\n    sum([1, 4, 3, 2]) == 6\n   \
    \ sum([1, 4, 3, 2]) == 6\n    sum([1, 4, 3, 2]) == 6\n    sum([1, 4, 3, 2]) ==\
    \ 6\n    sum([1, 4, 3, 2]) == 6\n    sum([1, 4, 3, 2]) == 6\n    sum([1, 4, 3,\
    \ 2]) == 6\n    sum([1, 4, 3, 2]) == 6\n    sum([1, 4, 3, 2]) == 6\n    sum([1,\
    \ 4, 3, 2]) == 6\n    sum([1, 4, 3, 2]) == 6\n    sum([1, 4, 3, 2]) == 6\n   \
    \ sum([1, 4, 3, 2]) == 6\n    sum([1, 4, 3, 2]) == 6\n    sum([1, 4, 3, 2]) ==\
    \ 6\n    sum([1, 4, 3, 2]) == 6\n    sum([1, 4, 3, 2]) == 6\n    sum([1, 4, 3,\
    \ 2]) == 6\n    sum([1, 4, 3, 2]) == 6\n    sum([1, 4, 3, 2]) == 6\n    sum([1,\
    \ 4, 3, 2]) == 6\n    sum([1, 4, 3, 2]) == 6\n    sum([1, 4, 3, 2]) == 6\n   \
    \ sum([1, 4, 3, 2]) == 6\n    sum([1, 4, 3, 2]) == 6\n    sum([1, 4, 3, 2]) ==\
    \ 6\n    sum([1, 4, 3, 2]) == 6\n    sum([1, 4, 3, 2]) == 6\n    sum([1, 4, 3,\
    \ 2]) == 6\n    sum([1, 4, 3, 2]) == 6\n    sum([1, 4, 3, 2]) == 6\n    sum([1,\
    \ 4, 3, 2]) == 6\n    sum([1, 4, 3, 2]) == 6\n    sum([1, 4, 3, 2]) == 6\n   \
    \ sum([1, 4, 3, 2]) == 6\n    sum([1, 4, 3, 2]) == 6\n    sum([1, 4, 3, 2]) ==\
    \ 6\n    sum([1, 4, 3, 2]) == 6\n    sum([1, 4, 3, 2]) == 6\n    sum([1, 4, 3,\
    \ 2]) == 6\n    sum([1, 4, 3, 2]) == 6\n    sum([\nusing Test\n\n@testset begin\n\
    \ncandidate = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1,\
    \ 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2, 2,\
    \ 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5, 7)\
    \ == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1) ==\
    \ 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp595yl2gv.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp595yl2gv.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c && a + c > b && b + c > a \n        then return (a * b) /\
    \ c\n        else return -1\n</code>\n<|/ a |>\n<| c |>\nThis doesn't answer the\
    \ question. OP wants to know how to round the area to 2 decimal places.\n<|/ c\
    \ |>\n<| c |>\nThe question was how to round the area to 2 decimal places. I answered\
    \ how to round the area to 2 decimal places. I didn't say anything about rounding\
    \ the area to 2 decimal places.\n<|/ c |>\n<| c |>\nThe question was how to round\
    \ the area to 2 decimal places. I answered how to round the area to 2 decimal\
    \ places. I didn't say anything about rounding the area to 2 decimal places.\n\
    <|/ c |>\n<| c |>\nThe question was how to round the area to 2 decimal places.\
    \ I answered how to round the area to 2 decimal places. I didn't say anything\
    \ about rounding the area to 2 decimal places.\n<|/ c |>\n<| c |>\nThe question\
    \ was how to round the area to 2 decimal places. I answered how to round the area\
    \ to 2 decimal places. I didn't say anything about rounding the area to 2 decimal\
    \ places.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1,\
    \ 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2, 2,\
    \ 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5, 7)\
    \ == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1) ==\
    \ 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp2tmz2gni.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp2tmz2gni.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a > b and a > c \n        return (a * b) / c\n    else if a < b and\
    \ a < c \n        return (b * c) / a\n    else if a < b and b < c \n        return\
    \ (b * c) / a\n    else if a > b and b > c \n        return (a * c) / b\n    else\
    \ \n        return -1\nend\n</cell>\n<code language=julia-1.5>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2, 10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the area of a triangle given\
    \ its three sides. \nThe function should return -1 if the three sides form a degenerate\
    \ triangle. \nOtherwise it should return the area of the triangle rounded to 2\
    \ decimal points.\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\
    \t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4,\
    \ 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2,\
    \ 3) == -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3)\
    \ == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"a\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa7vn7a1v.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpa7vn7a1v.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \     else return -1\n    else return -1\nend\n</cell>\n<code language=julia-1.0>\n\
    triangle_area(3, 4, 5)\n</cell>\n<code language=julia-1.0>\ntriangle_area(1, 2,\
    \ 10)\n</cell>\n<text>\nExercise: Write a function that takes a vector of numbers\
    \ and returns the sum of the squares of the numbers in the vector. \n    Use a\
    \ for loop to do this.\n    Example:\n    vector_square([1,2,3]) == 9\n    vector_square([1,4,9])\
    \ == 25\n    vector_square([1,4,0]) == -1\n    vector_square([1,4,0]) == -1\n\
    \    vector_square([1,4,0]) == -1\n    vector_square([1,4,0]) == -1\n    vector_square([1,4,0])\
    \ == -1\n    vector_square([1,4,0]) == -1\n    vector_square([1,4,0]) == -1\n\
    \    vector_square([1,4,0]) == -1\n    vector_square([1,4,0]) == -1\n    vector_square([1,4,0])\
    \ == -1\n    vector_square([1,4,0]) == -1\n    vector_square([1,4,0]) == -1\n\
    \    vector_square([1,4,0]) == -1\n    vector_square([1,4,0]) == -1\n    vector_square([1,4,0])\
    \ == -1\n    vector_square([1,4,0]) == -1\n    vector_square([1,4,0]) == -1\n\
    \    vector_square([1,4,0]) == -1\n    vector_square([1,4,0]) == -1\n    vector_square([1,4,0])\
    \ == -1\n    vector_square([1,4,0]) == -1\n    vector_square([1,4,0]) == -1\n\
    \    vector_square([1,4,0]) == -1\n    vector_square([1,4,0]) == -1\n    vector_square([1,4,0])\
    \ == -1\n    vector_square([1,4,0]) == -1\n    vector_square([1,4,0]) == -1\n\
    \    vector_square([1,4,0]) == -1\n    vector_square([1,4,0]) == -1\n    vector_square([1,4,0])\
    \ == -1\n    vector_square([1,4,0]) == -1\n    vector_square([1,4,0]) == -1\n\
    \    vector_square([1,4,0]) == -1\n    vector_square([1,4,0]) == -1\n    vector_square([1,4,0])\
    \ == -1\n    vector_square([1,4,0]) == -1\n    vector_square([1,4,0]) == -1\n\
    \    vector_square([1,4,0]) == -1\n    vector\nusing Test\n\n@testset begin\n\n\
    candidate = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1,\
    \ 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2, 2,\
    \ 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5, 7)\
    \ == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1) ==\
    \ 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpxomutc1b.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpxomutc1b.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \     else return -1\n    else return -1\nend\n</cell>\n<code language=julia-1.5>\n\
    triangle_area(3, 4, 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2,\
    \ 10)\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number is\
    \ prime or not. \nThe function should take one argument, x, and return a Boolean\
    \ value.\nIf the number is prime it should return true. \nIf the number is composite\
    \ it should return false.\nExample: \nisPrime(5) == true\nisPrime(7) == false\n\
    isPrime(11) == true\nisPrime(13) == false\nisPrime(17) == true\nisPrime(19) ==\
    \ false\nisPrime(23) == true\nisPrime(29) == false\nisPrime(31) == true\nisPrime(37)\
    \ == false\nisPrime(41) == true\nisPrime(43) == false\nisPrime(47) == true\nisPrime(53)\
    \ == false\nisPrime(59) == true\nisPrime(61) == false\nisPrime(67) == true\nisPrime(71)\
    \ == false\nisPrime(73) == true\nisPrime(79) == false\nisPrime(83) == true\nisPrime(89)\
    \ == false\nisPrime(97) == true\nisPrime(101) == false\nisPrime(103) == true\n\
    isPrime(107) == false\nisPrime(109) == true\nisPrime(113) == false\nisPrime(127)\
    \ == true\nisPrime(131) == false\nisPrime(137) == true\nisPrime(139) == false\n\
    isPrime(149) == true\nisPrime(153) == false\nisPrime(157) == true\nisPrime(163)\
    \ == false\nisPrime(167) == true\nisPrime(173) == false\nisPrime(179) == true\n\
    isPrime(183) == false\nisPrime(191) == true\nisPrime(193) == false\nisPrime(197)\
    \ == true\nisPrime(199) == false\nisPrime(211) == true\nisPrime(223) == false\n\
    isPrime(227) == true\nisPrime\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\
    \t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4,\
    \ 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2,\
    \ 3) == -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3)\
    \ == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp7bwvkw31.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp7bwvkw31.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        return (a+b+c)/2\n    else\n\
    \        return -1\n    end\nend\n</cell>\n<code language=julia-1.5>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes in three sides\
    \ of a triangle and returns the area of the triangle rounded to 2 decimal points.\n\
    using Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjn_e3pzr.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjn_e3pzr.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c && a + c > b && b + c > a \n        then return (a * b *\
    \ c)/2\n        else return -1\n</code>\n<|/ a tags=julia,if-statement |>\n<|\
    \ c |>\nThank you so much for this! I really appreciate it!\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpid2t3v3o.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpid2t3v3o.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c && a + c > b && b + c > a \n        then return (a * b) /\
    \ c\n        else return -1\n</code>\n<|/ a tags=julia,if-statement |>\n<| c |>\n\
    Thank you for your answer! I understand your solution, but I still don't understand\
    \ why my code didn't work. Could you please explain why my code didn't work?\n\
    <|/ c |>\n<| c |>\nI added some explanation to the answer\n<|/ c |>\n<| c |>\n\
    Thank you for your explanation! I understand now why my code didn't work. Your\
    \ solution works perfectly fine, but I still don't understand why my code didn't\
    \ work. Could you please explain why my code didn't work?\n<|/ c |>\n<| c |>\n\
    I added some explanation to the answer\n<|/ c |>\n<| a tags=julia,if-statement\
    \ |>\nThe reason your code doesn't work is that your if statement is wrong. \n\
    <code>\nif a + b > c && a + c > b && b + c > a\n</code>\nThis statement is always\
    \ true. \nWhat you meant to write is \n<code>\nif a > b + c && a > c + b && b\
    \ > a + c\n</code>\nThis statement is true if a is greater than the sum of b and\
    \ c AND b is greater than the sum of c and a.\n<|/ a dscore=1 |>\n<| c |>\nThank\
    \ you for your answer! I understand your solution, but I still don't understand\
    \ why my code didn't work. Could you please explain why my code didn't work?\n\
    <|/ c |>\n<| c |>\nI added some explanation to the answer\n<|/ c |>\n<| a tags=julia,if-statement\
    \ |>\nThe reason your code doesn't work is that your if statement is wrong. \n\
    <code>\nif a + b > c && a + c > b && b + c > a\n</code>\nThis statement is always\
    \ true. \nWhat you meant to write is \n<code>\nif a > b + c && a > c + b && b\
    \ > a + c\n</code>\nThis statement is true if a is greater than the sum of b and\
    \ c AND b is greater than the sum of c and a.\n<|/ a dscore=1 |>\n<| a dscore=0\
    \ |>\nThe reason your code doesn't work is that your if statement is wrong. \n\
    <code>\nif a + b > c && a + c > b && b + c > a\n</code>\nThis statement is always\
    \ true. \nWhat you meant to write is \n<code>\nif a > \nusing Test\n\n@testset\
    \ begin\n\ncandidate = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t\
    @test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2,\
    \ 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5,\
    \ 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1)\
    \ == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp7y12tqa_.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp7y12tqa_.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a > b + c || b > a + c || c > a + b \n        then return -1\n    else\
    \ \n        area_of_triangle = if b > a then b - a else 0\n        area_of_triangle\
    \ += if c > b then c - b else 0\n        area_of_triangle += if c > a then c -\
    \ a else 0\n        area_of_triangle /= 2\n        return round(area_of_triangle,\
    \ 2)\nend\n</code>\n<|/ a tags=julia,if-statement |>\n<| a tags=julia,if-statement\
    \ |>\nThe accepted answer by is good, but I thought I'd add my two cents anyway.\n\
    The accepted answer uses if/else statements, which are generally considered bad\
    \ practice in Julia. Instead, one should use if/else if/else statements.\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpxw4fyevd.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpxw4fyevd.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c && a + c > b && b + c > a \n        then return (a * b *\
    \ c)/2\n        else return -1\n</code>\n<|/ a tags=julia,function |>\n<| a dscore=0\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmptp0_k7m0.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmptp0_k7m0.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a + b > c and a + c > b and b + c > a \n        then return (a * b\
    \ * c)/2\n        else return -1\n    else return -1\nend\n</cell>\n<code language=julia-1.5>\n\
    triangle_area(3, 4, 5)\n</cell>\n<code language=julia-1.5>\ntriangle_area(1, 2,\
    \ 10)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the area of\
    \ a triangle given its sides. \nThe function should take in three sides and return\
    \ the area rounded to 2 decimal points.\nExample: \ntriangle_area(3, 4, 5) ==\
    \ 6.00\ntriangle_area(1, 2, 10) == -1\nHint: \nThe area of a triangle is equal\
    \ to the sum of its three sides multiplied by the \nproduct of the two other sides.\
    \ \nThe area of a triangle is equal to the product of the two other sides multiplied\
    \ by the \nproduct of the two other sides. \nThe product of two sides is equal\
    \ to the product of the other two sides \ndivided by the product of the two other\
    \ sides. \nThe product of three sides is equal to the product of the other three\
    \ sides \ndivided by the product of the two other sides. \nThe product of three\
    \ sides is equal to the product of the other three sides \ndivided by the product\
    \ of the two other sides. \nThe product of three sides is equal to the product\
    \ of the other three sides \ndivided by the product of the two other sides. \n\
    The product of three sides is equal to the product of the other three sides \n\
    divided by the product of the two other sides. \nThe product of three sides is\
    \ equal to the product of the other three sides \ndivided by the product of the\
    \ two other sides. \nThe product of three sides is equal to the product of the\
    \ other three sides \ndivided by the product of the two other sides. \nThe product\
    \ of three sides is equal to the product of the other three sides \ndivided by\
    \ the product of the two other sides. \nThe product of three sides is equal to\
    \ the product of the other three sides \ndivided by the product of the two other\
    \ sides. \nThe product of three sides is equal to the product of the other three\
    \ sides \ndivided by the product of the two other sides. \nThe product of three\
    \ sides is equal to the product of the other three sides \ndivided by the product\
    \ of the two other sides. \nThe product of three sides is equal to the product\
    \ of the other three sides \ndivided by the product of the two other sides. \n\
    The product of three sides is equal to the product of the other three sides \n\
    divided by the product of the two other sides. \nThe product of three sides is\
    \ equal to the product of the other three sides \ndivided by the product of the\
    \ two other sides. \nThe product of three sides is equal to the product of the\
    \ other three \nusing Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t\
    @test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4,\
    \ 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2,\
    \ 3) == -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3)\
    \ == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"a\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9uj8jnvs.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9uj8jnvs.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a+b > c && b+c > a && c+a > b \n        then return (a+b+c)/2\n   \
    \ else return -1\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
    \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
    \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) ==\
    \ -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\
    \t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpj2i3m2ty.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpj2i3m2ty.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10)\
    \ == -1\n    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ \n    if a > b and a > c \n        return (a * b) / c\n    else if a < b and\
    \ a < c \n        return (a * b) / c\n    else if a > b and a < c \n        return\
    \ (a * c) / b\n    else if a < b and a > c \n        return (a * c) / b\n    else\
    \ if a < c \n        return (a * b) / c\n    else \n        return -1\nend\n</cell>\n\
    <code language=julia-1.5>\ntriangle_area(3, 4, 5)\n</cell>\n<text>\nExercise 2\n\
    Write a function that calculates the area of a triangle given its three sides.\
    \ \nThe function should take in three sides and return the area rounded to 2 decimal\
    \ points.\nExample: triangle_area(3, 4, 5) == 6.00\nHint: You will need to use\
    \ the triangle_area function you wrote in the previous exercise.\nusing Test\n\
    \n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3, 4, 5) ==\
    \ 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\
    \t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10,\
    \ 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1,\
    \ 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"a\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxxnrrzhq.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxxnrrzhq.jl:12\n"
  exit_code: 1
  status: Exception
