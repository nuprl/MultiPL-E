name: HumanEval_161_solve
language: julia
prompt: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case\
  \ from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the\
  \ string contains no letters, reverse the string.\n    The function should return\
  \ the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"\
  ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction solve(s::String)::String\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\"\
  ) == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"ab\"\
  ) == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\"\
  ) == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
  #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
completions: ["    if length(s) <= 0 \n        return s \n    else if s[0] == '#'\
    \ \n        return reverse(s[2:]) \n    else if s[0] == '@' \n        return reverse(s[2:])\
    \ \n    else if isLetter(s) \n        return reverse(toUpper(s[2:])) \n    else\
    \ \n        return reverse(toLower(s[2:])) \nend\n</cell>\n<code language=julia-1.0>\n\
    solve(\"1234\")\n</cell>\n<code language=julia-1.0>\nsolve(\"ab\")\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"#a@C\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"a@C\")\n</cell>\n<code language=julia-1.0>\nsolve(\"a@C\")\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"a@C\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"a@C\")\n</cell>\n<code language=julia-1.0>\nsolve(\"a@C\")\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"a@C\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"a@C\")\n</cell>\n<code language=julia-1.0>\nsolve(\"a@C\")\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"a@C\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"a@C\")\n</cell>\n<code language=julia-1.0>\nsolve(\"a@C\")\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"a@C\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"a@C\")\n</cell>\n<code language=julia-1.0>\nsolve(\"a@C\")\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"a@C\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"a@C\")\n</cell>\n<code language=julia-1.0>\nsolve(\"a@C\")\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"a@C\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"a@C\")\n</cell>\n<code language=julia-1.0>\nsolve(\"a@C\")\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"a@C\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"a@C\")\n</cell>\n<code language=julia-1.0>\nsolve(\"a@C\")\n</cell>\n",
  "    \n    if length(s) == 0\n        return s\n    \n    if isLetter(s[1])\n  \
    \      return reverse(s[1..end-1]) + reverse(s[end..end-1])\n    else\n      \
    \  return reverse(s[1..end-1]) + s\nend\n</cell>\n<code language=julia-1.5>\n\
    # Run this cell to test your function.\n@test solve(\"1234\") == \"4321\"\n@test\
    \ solve(\"ab\") == \"AB\"\n@test solve(\"#a@C\") == \"#A@c\"\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string as input and returns a string\
    \ with all duplicates removed.\nExamples\nremoveDuplicates(\"abba\") returns \"\
    aab\"\nremoveDuplicates(\"abb\") returns \"ab\"\nremoveDuplicates(\"ab\") returns\
    \ \"a\"\nremoveDuplicates(\"a\") returns \"\"\nremoveDuplicates(\"\") returns\
    \ \"\"\nremoveDuplicates(nothing) returns nothing\nremoveDuplicates(1) returns\
    \ nothing\nremoveDuplicates(rand(1:10)) returns nothing\nremoveDuplicates(randstring(10))\
    \ returns nothing\nremoveDuplicates(randstring(10)) returns nothing\nremoveDuplicates(randstring(10))\
    \ returns nothing\nremoveDuplicates(randstring(10)) returns nothing\nremoveDuplicates(randstring(10))\
    \ returns nothing\nremoveDuplicates(randstring(10)) returns nothing\nremoveDuplicates(randstring(10))\
    \ returns nothing\nremoveDuplicates(randstring(10)) returns nothing\nremoveDuplicates(randstring(10))\
    \ returns nothing\nremoveDuplicates(randstring(10)) returns nothing\nremoveDuplicates(randstring(10))\
    \ returns nothing\nremoveDuplicates(randstring(10)) returns nothing\nremoveDuplicates(randstring(10))\
    \ returns nothing\nremoveDuplicates(randstring(10)) returns nothing\nremoveDuplicates(randstring(10))\
    \ returns nothing\nremoveDuplicates(randstring(10)) returns nothing\nremoveDuplicates(randstring(10))\
    \ returns nothing\nremoveDuplicates(randstring(10)) returns nothing\nremoveDuplicates(randstring(10))\
    \ returns nothing\nremoveDuplicates(randstring(10)) returns nothing\nremoveDuplicates(randstring(10))\
    \ returns nothing\nremoveDuplicates(randstring(10)) returns nothing\nremoveDuplicates(randstring(10))\
    \ returns nothing\nremoveDuplicates(randstring(10)) returns nothing\nremoveDuplicates(randstring(10))\
    \ returns nothing\nremoveDuplicates(randstring(10)) returns nothing\nremoveDuplicates(randstring(10))\
    \ returns nothing\nremoveDuplicates(randstring(10)) returns nothing\nremoveDuplicates(randstring(10))\
    \ returns nothing\nremoveDuplicates(randstring(10)) returns nothing\nremoveDuplicates(randstring(10))\
    \ returns nothing\nremoveDuplicates(", "    if s.length == 0 \n        \"\"\n\
    \    else if length(s) == 1 \n        s[toupper(s[0])]\n    else \n        solve(reverse(s))\n\
    end\n</code>\n<|/ a tags=string,julia |>\n<| a dscore=2 |>\nHere's a solution\
    \ using recursion:\n<code>", "    if s.length==0\n        return s\n    if isLetter(s)\n\
    \        return reverse(toUpper(s))\n    return reverse(toLower(s))\nend", " \
    \   \n    \n    if length(s) <= 0\n        return s\n    \n    \n    if isLetter(s)\n\
    \        return reverse(toUpper(s))\n    \n    \n    if isLetter(toUpper(s))\n\
    \        return reverse(toLower(s))\n    \n    \n    return s\nend\n</cell>\n\
    <code language=julia-1.5>\nsolve(\"1234\")\n</cell>\n<code language=julia-1.5>\n\
    solve(\"ab\")\n</cell>\n<code language=julia-1.5>\nsolve(\"#a@C\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ the number of characters in the string that are letters.", "    if length(s)==0\n\
    \        return s\n    if isLetter(s)\n        return reverse(toUpper(s))\n  \
    \  return reverse(toLower(s))\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,julia\
    \ |>\n<code>", "    if length(s) <= 0\n        return s\n    \n    if isLetter(s)\n\
    \        return reverse(toUpper(s))\n    \n    return reverse(toLower(s))\nend\n\
    </cell>\n<code language=julia-1.0>", "    if length(s) <= 1 \n        return s\n\
    \    else if isLetter(s) \n        upperCase(s)\n    else \n        lowerCase(s)\n\
    end\n</code>\n<|/ a tags=string,julia |>\n<| a tags=string,julia |>\n<code>",
  "    if length(s) <= 0\n        return s\n    if isLetter(s)\n        return reverse(toUpper(s))\n\
    \    return reverse(toLower(s))\nend\n</cell>\n<code language=julia-1.0>", " \
    \   \n    if length(s) == 0 \n        return s \n    \n    \n    if isLetter(s)\
    \ \n        return reverse(toUpper(s))\n    \n    \n    if isLetter(toUpper(s))\
    \ \n        return reverse(toLower(s))\n    \n    \n    return reverse(toLower(s))\n\
    end\n</cell>\n<code language=julia-1.5>\n# test your code\n@test solve(\"1234\"\
    ) == \"4321\"\n@test solve(\"ab\") == \"AB\"\n@test solve(\"#a@C\") == \"#A@c\"\
    \n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of times each character appears in the string.", "    if length(s)\
    \ <= 1 \n        return s\n    \n    if isLetter(s[end-1]) \n        return reverse(s[end-1])\
    \ + s[end]\n    else \n        return reverse(s[end-1]) + s[end-1]\nend\n</cell>\n\
    <code language=julia-1.0>", "    \n    if length(s) <= 0\n        return s\n \
    \   \n    if isLetter(s)\n        return reverse(toUpper(s))\n    \n    return\
    \ reverse(toLower(s))\nend\n</cell>\n<code language=julia-1.5>", "    if length(s)\
    \ <= 0\n        return s\n    \n    if isLetter(s)\n        return reverse(toUpper(s))\n\
    \    \n    return reverse(toLower(s))\nend", "    \n    if length(s) <= 0\n  \
    \      return s\n    \n    \n    if isLetter(s)\n        return reverse(toUpper(s))\n\
    \    \n    \n    if isLetter(toUpper(s))\n        return reverse(toLower(s))\n\
    \    \n    \n    return s\nend\n</cell>\n<code language=julia-1.0>", "    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    if length(s) <= 0 \n\
    \        return s \n    \n    if isLetter(s) \n        return reverse(toUpper(s))\n\
    \    \n    return reverse(toLower(s))\nend\n</cell>\n<code language=julia-1.0>\n\
    solve(\"1234\")\n</cell>\n<code language=julia-1.0>\nsolve(\"ab\")\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"#a@C\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string as input and returns the number of characters\
    \ in the string. \nThe function should ignore all non-letter characters and return\
    \ the number of letters in the string.\nExamples\ncount_letters(\"1234\") = 4\n\
    count_letters(\"ab\") = 2\ncount_letters(\"#a@C\") = 3\nHint: Use isLetter() function\
    \ to check whether a character is a letter or not.", "    if s.length == 0 \n\
    \        \"\" \n    else if length(s) == 1 \n        s \n    else if isLetter(s)\
    \ \n        upperCase(solve(reverse(s))) \n    else \n        solve(reverse(s))\
    \ \nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,julia,reverse |>\n<code>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    if length(s) == 0\n        return\
    \ s\n    if isLetter(s[1])\n        return reverse(s[1..end-1]) + reverse(s[end..end-1])\n\
    \    else\n        return reverse(s[1..end-1]) + s\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    if length(s) <= 0\n        return s\n    \n    if isLetter(s)\n     \
    \   return reverse(toUpper(s))\n    \n    return reverse(toLower(s))\nend\n</cell>\n\
    <code language=julia-1.3>\n# Run this cell to test your code\ns = solve(\"\"\"\
    \n    You are given a string s.\n    if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the\
    \ string contains no letters, reverse the string.\n    The function should return\
    \ the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"\
    ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\")\n@test s == \"\"\"\
    4321\nAB\n#A@c\"\"\"\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string that are\
    \ uppercase letters.", "    \n    \n    if length(s) == 0\n        return s\n\
    \    \n    if isLetter(s)\n        return reverse(toUpper(s))\n    \n    return\
    \ reverse(toLower(s))\nend\n</cell>\n<code language=julia-1.5>", "    if s.length\
    \ == 0 \n        \"\" \n    else if length(s) == 1 \n        s \n    else if isLetter(s)\
    \ \n        solve(reverse(s))\n    else \n        solve(reverse(s))\nend\n</code>\n\
    <|/ a tags=string,julia,reverse |>\n<| a dscore=2 |>\n<code>", "    if length(s)\
    \ <= 0\n        return s\n    \n    if isLetter(s)\n        return reverse(toUpper(s))\n\
    \    \n    return reverse(toLower(s))\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test your code\n@test solve(\"1234\") == \"4321\"\n@test solve(\"ab\") == \"\
    AB\"\n@test solve(\"#a@C\") == \"#A@c\"\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a string and returns the number of characters in the string\
    \ that are uppercase letters.", "    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   if length(s) == 0 \n        return s \n    else if length(s) == 1 \n     \
    \   return toupper(s[0]) \n    else \n        lett = toupper(s[0]) \n        res1\
    \ = solve(substring(s, 1, length(s)-1)) \n        res2 = solve(substring(s, 2,\
    \ length(s))) \n        return concat(res1, lett, res2) \nend\n</code>\n<|/ a\
    \ tags=string,julia |>\n<| a tags=string,julia |>\n<code>", "    if s.length ==\
    \ 0 \n        return s \n    \n    if isLetter(s) \n        return reverse(toUpper(s))\n\
    \    \n    return reverse(toLower(s))\nend\n</cell>\n<code language=julia-1.0>\n\
    # test your code\n@assert solve(\"1234\") == \"4321\"\n@assert solve(\"ab\") ==\
    \ \"AB\"\n@assert solve(\"#a@C\") == \"#A@c\"\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string as its argument and returns the number of characters\
    \ in the string that are uppercase letters.", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    if length(s) <= 0\n        return s\n    \n \
    \   if isLetter(s)\n        return reverse(toUpper(s))\n    \n    return reverse(toLower(s))\n\
    end\n</cell>\n<code language=julia-1.5>", "    if length(s) == 0 \n        return\
    \ s \n    else if length(s) == 1 \n        return toupper(s[0]) \n    else \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        ", "    if s.length\
    \ == 0 \n        return \"#\" \n    else if length(s) == 1 \n        return reverse(s,1)\
    \ \n    else \n        return reverse(s,0) \nend\n</cell>\n<code language=julia-1.0>\n\
    solve(\"1234\")\n</cell>\n<code language=julia-1.0>\nsolve(\"ab\")\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"#a@C\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string as input and returns the number of vowels present\
    \ in the string.\nExamples\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\"\
    ) = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\"\
    ) = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\"\
    ) = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\"\
    ) = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\"\
    ) = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\"\
    ) = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\"\
    ) = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\"\
    ) = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\"\
    ) = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\"\
    ) = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\"\
    ) = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\"\
    ) = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\"\
    ) = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\"\
    )", "    if length(s) == 0\n        return s\n    \n    if isLetter(s)\n     \
    \   return reverse(toUpper(s))\n    \n    return reverse(toLower(s))\nend\n</cell>\n\
    <code language=julia-1.4>\nsolve(\"1234\")\n</cell>\n<code language=julia-1.4>\n\
    solve(\"ab\")\n</cell>\n<code language=julia-1.4>\nsolve(\"#a@C\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ the number of vowels present in the string.", "    if length(s) <= 0\n     \
    \   return s\n    \n    if isLetter(s[end])\n        return reverse(s[end..end-1])\n\
    \    \n    return reverse(s[end..end-1]) \nend\n</cell>\n<code language=julia-1.4>\n\
    # test your code\n@test solve(\"1234\") == \"4321\"\n@test solve(\"ab\") == \"\
    AB\"\n@test solve(\"#a@C\") == \"#A@c\"\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes a string as input and returns a string where all characters\
    \ have been converted to lowercase letters.", "    if length(s) <= 1 \n      \
    \  return s \n    \n    if isLetter(s) \n        return reverse(upper(s))\n  \
    \  \n    return reverse(lower(s))\nend\n</cell>\n<code language=julia-1.5>\nsolve(\"\
    1234\")\n</cell>\n<code language=julia-1.5>\nsolve(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    solve(\"#a@C\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ as input and returns the number of vowels contained in the string.\nExamples\n\
    vowels(\"hello\") = 2\nvowels(\"helloo\") = 1\nvowels(\"hellooo\") = 3\nvowels(\"\
    helloooo\") = 4\nvowels(\"helloooooo\") = 5\nvowels(\"hellooooooo\") = 6\nvowels(\"\
    helloooooooo\") = 7\nvowels(\"hellooooooooo\") = 8\nvowels(\"helloooooooooo\"\
    ) = 9\nvowels(\"hellooooooooooo\") = 10\nvowels(\"helloooooooooooo\") = 11\nvowels(\"\
    hellooooooooooooo\") = 12\nvowels(\"helloooooooooooooo\") = 13\nvowels(\"hellooooooooooooooo\"\
    ) = 14\nvowels(\"helloooooooooooooooo\") = 15\nvowels(\"hellooooooooooooooooo\"\
    ) = 16\nvowels(\"helloooooooooooooooooo\") = 17\nvowels(\"helloooooooooooooooooo\"\
    ) = 18\nvowels(\"hellooooooooooooooooooo\") = 19\nvowels(\"helloooooooooooooooooooo\"\
    ) = 20\nvowels(\"hellooooooooooooooooooooo\") = 21\nvowels(\"helloooooooooooooooooooooo\"\
    ) = 22\nvowels(\"hellooooooooooooooooooooooo\") = 23\nvowels(\"helloooooooooooooooooooooooo\"\
    ) = 24\nvowels(\"hellooooooooooooooooooooooooo\") = 25\nvowels(\"helloooooooooooooooooooooooooo\"\
    ) = 26\nvowels(\"hellooooooooooooooooooooooooooo\") = 27\nvowels(\"helloooooooooooooooooooooooooooo\"\
    ) = 28\nvowels(\"hellooooooooooooooooooooooooooooo\") = 29\nvowels(\"helloooooooooooooooooooooooooooooo\"\
    ) = 30\nvowels(\"hellooooooooooooooooooooooooooooooo\") = 31\nvowels(\"helloooooooooooooooooooooooooooooooo\"\
    ) = 32\nvowels(\"hellooooooooooooooooooooooooooooooooo\") = 33\nvowels(\"helloooooooooooooooooooooooooooooooooo\"\
    ) = 34\nvowels(\"hellooooooooooooooooooooooooooooooooooo\") = 35\nvowels(\"hellooooo",
  "    if length(s) <= 0 \n        return s \n    else if isLetter(s) \n        return\
    \ reverse(toUpper(s))\n    else \n        return reverse(toLower(s))\nend\n</code>\n\
    <|/ a |>\n<| c |>\nThis doesn't work if you have a string like \"#a@C\"\n<|/ c\
    \ |>\n<| c |>\nI thought the question was about reversing a string. My bad.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>", "    if length(s) <= 0\n        return s\n\
    \    \n    if isLetter(s)\n        return reverse(toUpper(s))\n    \n    return\
    \ reverse(toLower(s))\nend\n</cell>\n<code language=julia-1.5>\nsolve(\"1234\"\
    )\n</cell>\n<code language=julia-1.5>\nsolve(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    solve(\"#a@C\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ as input and returns the number of vowels contained in the string.\nExamples\n\
    vowels(\"aba\") = 2\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"\
    aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"\
    aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"\
    aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"\
    aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"\
    aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"\
    aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"\
    aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"\
    aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"\
    aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"\
    aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"\
    aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"\
    aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"\
    aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"\
    aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"\
    aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"\
    aba\")\nvowels(\"ab", "    if length(s) <= 0\n        return s\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if length(s) <= 0 \n        return s \n    else if\
    \ s[0] == '#' \n        return reverse(s[2:end-1]) \n    else if s[0] == '@' \n\
    \        return reverse(s[2:end-1]) \n    else if s[0] == '$' \n        return\
    \ reverse(s[2:end-1]) \n    else if s[0] == '^' \n        return reverse(s[2:end-1])\
    \ \n    else if s[0] == '&' \n        return reverse(s[2:end-1]) \n    else if\
    \ s[0] == '*' \n        return reverse(s[2:end-1]) \n    else if s[0] == '!' \n\
    \        return reverse(s[2:end-1]) \n    else if s[0] == '.' \n        return\
    \ reverse(s[2:end-1]) \n    else if s[0] == '-' \n        return reverse(s[2:end-1])\
    \ \n    else if s[0] == '+' \n        return reverse(s[2:end-1]) \n    else if\
    \ s[0] == '/' \n        return reverse(s[2:end-1]) \n    else if s[0] == '=' \n\
    \        return reverse(s[2:end-1]) \n    else if s[0] == '<' \n        return\
    \ reverse(s[2:end-1]) \n    else if s[0] == '>' \n        return reverse(s[2:end-1])\
    \ \n    else if s[0] == '?' \n        return reverse(s[2:end-1]) \n    else if\
    \ s[0] == '|' \n        return reverse(s[2:end-1]) \n    else if s[0] == '^' \n\
    \        return reverse(s[2:end-1]) \n    else if s[0] == '[' \n        return\
    \ reverse(s[2:end-1]) \n    else if s[0] == ']' \n        return reverse(s[2:end-1])\
    \ \n    else if s[0] == '{' \n        return reverse(s[2:end-1]) \n    else if\
    \ s[0] == '}' \n        return reverse(s[2:end-1]) \n    else if s[0] == '\\''\
    \ \n        return reverse(s[2:end-1]) \n    else if s[0] == '\"' \n        return\
    \ reverse(s[2:end-1]) \n    else if s[0] == '~' \n        return reverse(s[2:end-1])\
    \ \n    else if s[0] == '`' \n        return reverse(s[2:end-1]) \n    else if\
    \ s[0] == '-' \n        return reverse(s[2:end-1]) \n    else if s[0] == '+' \n\
    \        return reverse(s[2:end-1]) \n    else if s[0] == '/' \n        return\
    \ reverse(s[2:end-1]) \n    else if s[0] == '=' \n        return reverse(s[2:end-1])\
    \ \n    else if s[0] == '<' \n        return reverse(s[2:end-1]) \n    else if\
    \ s[0] == '>' \n        return reverse(s[2:end-1]) \n    else if s[0] == '?' \n\
    \        return reverse(", "    if length(s) <= 0\n        return s\n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    if length(s) <= 0\n        return s\n    \n    if isLetter(s)\n\
    \        return reverse(toUpper(s))\n    \n    return reverse(toLower(s))\nend\n\
    </cell>\n<code language=julia-1.5>", "    if length(s) <= 0 \n        return s\
    \ \n    \n    if isLetter(s) \n        return reverse(toUpper(s))\n    \n    return\
    \ reverse(toLower(s))\nend\n</cell>\n<code language=julia-1.3>\nsolve(\"1234\"\
    )\n</cell>\n<code language=julia-1.3>\nsolve(\"ab\")\n</cell>\n<code language=julia-1.3>\n\
    solve(\"#a@C\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of vowels \nin it.", "    \n    if length(s) == 0 \n\
    \        return s \n    \n    if isLetter(s) \n        return reverse(upper(s))\n\
    \    \n    return reverse(lower(s))\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test your function with the examples from above\n@test solve(\"1234\") == \"\
    4321\"\n@test solve(\"ab\") == \"AB\"\n@test solve(\"#a@C\") == \"#A@c\"\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns a string\
    \ where all characters have been capitalized.", "    if length(s) <= 0 \n    \
    \    return s \n    else if isLetter(s) \n        return reverse(upper(s))\n \
    \   else \n        return reverse(lower(s))\nend\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=string,julia,reverse |>\n<code>", "    if length(s) <= 0 \n        then\
    \ return s\n    else if isLetter(s) \n        then return reverse(toUpper(s))\n\
    \        else return reverse(toLower(s))\nend\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a tags=string,julia |>\n<code>", "    if s.length == 0 \n        return \"#\"\
    \ \n    else if length(s) == 1 \n        return reverse(s,1) \n    else \n   \
    \     return reverse(s,0) \nend", "    if length(s) <= 0\n        return s\n \
    \   if isLetter(s[end])\n        return reverse(s[end..end-1])\n    return reverse(s[end..end])\n\
    end\n</code>\n<|/ a tags=string,julia |>\n<| a tags=string,julia |>\n<code>",
  "    if length(s) <= 0\n        return \"\"\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \
    \  if s.length == 0 \n        s \n    else if isLetter(s) \n        solve(reverseCase(s))\n\
    \    else \n        solve(reverse(s))\nend\n</code>\n<|/ a tags=julia,string |>\n\
    <| a tags=julia,string |>\n<code>", "    \n    if length(s) == 0\n        return\
    \ s\n    \n    if isLetter(s)\n        return reverse(upper(s))\n    \n    return\
    \ reverse(lower(s))\nend\n</cell>\n<code language=julia-1.3>\nsolve(\"1234\")\n\
    </cell>\n<code language=julia-1.3>\nsolve(\"ab\")\n</cell>\n<code language=julia-1.3>\n\
    solve(\"#a@C\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of vowels contained in the string.\nExamples\nvowels(\"\
    hello\") = 3\nvowels(\"helloooo\") = 2\nvowels(\"abracadabra\") = 3\nvowels(\"\
    abracadabra\") = 3\nvowels(\"abracadabra\") = 3\nvowels(\"abracadabra\") = 3\n\
    vowels(\"abracadabra\") = 3\nvowels(\"abracadabra\") = 3\nvowels(\"abracadabra\"\
    ) = 3\nvowels(\"abracadabra\") = 3\nvowels(\"abracadabra\") = 3\nvowels(\"abracadabra\"\
    ) = 3\nvowels(\"abracadabra\") = 3\nvowels(\"abracadabra\") = 3\nvowels(\"abracadabra\"\
    ) = 3\nvowels(\"abracadabra\") = 3\nvowels(\"abracadabra\") = 3\nvowels(\"abracadabra\"\
    ) = 3\nvowels(\"abracadabra\") = 3\nvowels(\"abracadabra\") = 3\nvowels(\"abracadabra\"\
    ) = 3\nvowels(\"abracadabra\") = 3\nvowels(\"abracadabra\") = 3\nvowels(\"abracadabra\"\
    ) = 3\nvowels(\"abracadabra\") = 3\nvowels(\"abracadabra\") = 3\nvowels(\"abracadabra\"\
    ) = 3\nvowels(\"abracadabra\") = 3\nvowels(\"abracadabra\") = 3\nvowels(\"abracadabra\"\
    ) = 3\nvowels(\"abracadabra\") = 3\nvowels(\"abracadabra\") = 3\nvowels(\"abracadabra\"\
    ) = 3\nvowels(\"abracadabra\") = 3\nvowels(\"abracadabra\") = 3\nvowels(\"abracadabra\"\
    ) = 3\nvowels(\"abracadabra\") = 3\nvowels(\"abracadabra\") = 3\nvowels(\"abracadabra\"\
    ) = 3\nvowels(\"abracadabra\") = 3\nvowels(\"abracadabra\") = 3\nvowels(\"ab",
  "    \n    if length(s) == 0\n        return s\n    \n    if isLetter(s)\n     \
    \   return reverse(toUpper(s))\n    \n    return reverse(toLower(s))\nend\n</cell>\n\
    <code language=julia-1.4>\nsolve(\"1234\")\n</cell>\n<code language=julia-1.4>\n\
    solve(\"ab\")\n</cell>\n<code language=julia-1.4>\nsolve(\"#a@C\")\n</cell>\n\
    <code language=julia-1.4>\nsolve(\"aBcD\")\n</cell>\n<code language=julia-1.4>\n\
    solve(\"aBcD\")\n</cell>\n<code language=julia-1.4>\nsolve(\"aBcD\")\n</cell>\n\
    <code language=julia-1.4>\nsolve(\"aBcD\")\n</cell>\n<code language=julia-1.4>\n\
    solve(\"aBcD\")\n</cell>\n<code language=julia-1.4>\nsolve(\"aBcD\")\n</cell>\n\
    <code language=julia-1.4>\nsolve(\"aBcD\")\n</cell>\n<code language=julia-1.4>\n\
    solve(\"aBcD\")\n</cell>\n<code language=julia-1.4>\nsolve(\"aBcD\")\n</cell>\n\
    <code language=julia-1.4>\nsolve(\"aBcD\")\n</cell>\n<code language=julia-1.4>\n\
    solve(\"aBcD\")\n</cell>\n<code language=julia-1.4>\nsolve(\"aBcD\")\n</cell>\n\
    <code language=julia-1.4>\nsolve(\"aBcD\")\n</cell>\n<code language=julia-1.4>\n\
    solve(\"aBcD\")\n</cell>\n<code language=julia-1.4>\nsolve(\"aBcD\")\n</cell>\n\
    <code language=julia-1.4>\nsolve(\"aBcD\")\n</cell>\n<code language=julia-1.4>\n\
    solve(\"aBcD\")\n</cell>\n<code language=julia-1.4>\nsolve(\"aBcD\")\n</cell>\n\
    <code language=julia-1.4>\nsolve(\"aBcD\")\n</cell>\n<code language=julia-1.4>\n\
    solve(\"aBcD\")\n</cell>\n<code language=julia-1.4>\nsolve(\"aBcD\")\n</cell>\n\
    <code language=julia-1.4>\nsolve(\"aBcD\")\n</cell>\n<code language=julia-1.4>\n\
    solve(\"aBcD\")\n</cell>\n<code language=julia-1.4>\nsolve(\"aBcD", "    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    if s.length == 0 \n \
    \       return s \n    else if isLetter(s) \n        return reverse(s.toLowerCase())\
    \ \n    else \n        return reverse(s.toUpperCase()) \nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>", "    if length(s) <= 0\n        return s\n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    if length(s) <= 0 \n        return s \n    else if s[0] ==\
    \ '#' \n        return reverse(s[1..-1]) \n    else if s[0] == '@' \n        return\
    \ reverse(s[1..-1]) \n    else if isLetter(s) \n        return reverse(toUpper(s))\n\
    \    else \n        return reverse(toLower(s))\nend\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=0 |>\n<code>", "    if length(s) <= 0\n        return s\n    \n  \
    \  if isLetter(s)\n        return reverse(toUpper(s))\n    \n    return reverse(toLower(s))\n\
    end\n</cell>\n<code language=julia-1.5>\nsolve(\"1234\")\n</cell>\n<code language=julia-1.5>\n\
    solve(\"ab\")\n</cell>\n<code language=julia-1.5>\nsolve(\"#a@C\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ a string with all the characters in lower case and all the characters in upper\
    \ case.\nExamples\ntoLower(\"hello\") = \"hello\"\ntoUpper(\"HELLO\") = \"HELLO\"\
    \ntoLower(\"Hello World\") = \"hello world\"\ntoUpper(\"Hello World\") = \"HELLO\
    \ WORLD\"\ntoLower(\"Hello World\") = \"hello world\"\ntoUpper(\"Hello World\"\
    ) = \"HELLO WORLD\"\ntoLower(\"Hello World\") = \"hello world\"\ntoUpper(\"Hello\
    \ World\") = \"HELLO WORLD\"\ntoLower(\"Hello World\") = \"hello world\"\ntoUpper(\"\
    Hello World\") = \"HELLO WORLD\"\ntoLower(\"Hello World\") = \"hello world\"\n\
    toUpper(\"Hello World\") = \"HELLO WORLD\"\ntoLower(\"Hello World\") = \"hello\
    \ world\"\ntoUpper(\"Hello World\") = \"HELLO WORLD\"\ntoLower(\"Hello World\"\
    ) = \"hello world\"\ntoUpper(\"Hello World\") = \"HELLO WORLD\"\ntoLower(\"Hello\
    \ World\") = \"hello world\"\ntoUpper(\"Hello World\") = \"HELLO WORLD\"\ntoLower(\"\
    Hello World\") = \"hello world\"\ntoUpper(\"Hello World\") = \"HELLO WORLD\"\n\
    toLower(\"Hello World\") = \"hello world\"\ntoUpper(\"Hello World\") = \"HELLO\
    \ WORLD\"\ntoLower(\"Hello World\") = \"hello world\"\ntoUpper(\"Hello World\"\
    ) = \"HELLO WORLD\"\ntoLower(\"Hello World\") = \"hello world\"\ntoUpper(\"Hello\
    \ World\") = \"HELLO WORLD\"\ntoLower(\"Hello World\") = \"hello world\"\ntoUpper(\"\
    Hello World\") = \"HELLO WORLD\"\ntoLower(\"Hello World\") = \"hello world\"\n\
    toUpper(\"Hello World\") = \"HELLO WORLD\"\ntoLower(\"Hello World\") = \"hello\
    \ world\"\ntoUpper(\"Hello World\") = \"HELLO WORLD\"\ntoLower", "    if s.length\
    \ == 0 \n        return s \n    \n    if isLetter(s) \n        return reverse(toUpper(s))\n\
    \    \n    return reverse(toLower(s))\nend", "    if s.length == 0 \n        return\
    \ s \n    else if is_letter(s) \n        return reverse(s.toLowerCase()) \n  \
    \  else \n        return reverse(s.toUpperCase()) \nend\n</cell>\n<code language=julia-1.3>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if length(s) ==\
    \ 0 \n        return s \n    else if length(s) == 1 \n        return toupper(s[0])\
    \ \n    else \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        ",
  "    if length(s) <= 0\n        return s\n    \n    \n    if isLetter(s)\n     \
    \   return reverse(upper(s))\n    else\n        return reverse(lower(s))\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    solve(s::String)::String\n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    ", "    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    if length(s) <= 0\n        return\
    \ s\n    \n    if isLetter(s)\n        return reverse(toUpper(s))\n    else\n\
    \        return reverse(toLower(s))\nend\n</cell>\n<code language=julia-1.0>",
  "    if length(s)==0\n        return s\n    \n    if isLetter(s)\n        return\
    \ reverse(toUpper(s))\n    \n    return reverse(toLower(s))\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    if length(s) <= 0 \n        return s \n    else \n        \n        if isLetter(s)\
    \ \n            return reverse(toUpper(s))\n        else \n            return\
    \ reverse(toLower(s))\nend\n</cell>\n<code language=julia-1.3>", "    if length(s)\
    \ <= 1 \n        return s\n    else if isLetter(s) \n        upperCase(s)\n  \
    \  else \n        lowerCase(s)\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,julia,reverse\
    \ |>\n<code>", "    \n    if length(s)==0\n        return s\n    \n    if isLetter(s)\n\
    \        return reverse(toUpper(s))\n    \n    return reverse(toLower(s))\nend\n\
    </cell>\n<code language=julia-1.3>\nsolve(\"1234\")\n</cell>\n<code language=julia-1.3>\n\
    solve(\"ab\")\n</cell>\n<code language=julia-1.3>\nsolve(\"#a@C\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ the string with all vowels replaced by an underscore.", "    if length(s) <=\
    \ 0\n        return s\n    \n    if isLetter(s)\n        return reverse(toUpper(s))\n\
    \    \n    return reverse(toLower(s))\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if s.length==0\n\
    \        return \"\"\n    else if length(s) mod 2==0\n        return reverse(s,1,length(s))\n\
    \    else\n        return reverse(s,0,length(s))\nend", "    if length(s) <= 1\
    \ \n        return s\n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    if length(s) == 0 \n        \"\"\n    else if length(s) == 1 \n        if isletter(s)\
    \ \n            reverse(toupper(s))\n        else \n            reverse(tolower(s))\n\
    \    else \n        if isletter(s) \n            reverse(tolower(s))\n       \
    \ else \n            reverse(toupper(s))\nend\n</code>\n<|/ a tags=string,julia\
    \ |>\n<| a dscore=0 |>\n<code>", "    if length(s) == 0 \n        return s \n\
    \    else if length(s) == 1 \n        return toupper(s[0]) \n    else \n     \
    \   \n        \n        \n        \n        \n        \n        \n        \n \
    \       \n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        ", "    \n    if s.length\
    \ == 0 \n        \n        return \"\"\n    \n    if isLetter(s) \n        \n\
    \        return reverse(toUpper(s))\n    \n    return reverse(toLower(s))\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    if length(s) <= 0 \n        return s \n    \n    if isLetter(s) \n        return\
    \ reverse(upper(s))\n    \n    return reverse(lower(s))\nend\n</cell>\n<code language=julia-1.4>\n\
    solve(\"1234\")\n</cell>\n<code language=julia-1.4>\nsolve(\"ab\")\n</cell>\n\
    <code language=julia-1.4>\nsolve(\"#a@C\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string as input and returns the number of vowels present\
    \ in the string.", "    if length(s)==0\n        return s\n    if isLetter(s)\n\
    \        return reverse(toUpper(s))\n    return reverse(toLower(s))\nend", " \
    \   if length(s)==0 \n        return s \n    else if isLetter(s) \n        return\
    \ reverse(toUpper(s))\n    else \n        return reverse(toLower(s))\nend\n</code>\n\
    <|/ a tags=julia,string |>\n<| c |>\nThis does not work. `solve(\"ab\")` returns\
    \ `\"Ab\"` instead of `\"Ab\"`.\n<|/ c |>\n<| c |>\nThis does not work. `solve(\"\
    ab\")` returns `\"Ab\"` instead of `\"Ab\"`.\n<|/ c |>\n<| c |>\nThis does not\
    \ work. `solve(\"ab\")` returns `\"Ab\"` instead of `\"Ab\"`.\n<|/ c |>\n<| c\
    \ |>\nThis does not work. `solve(\"ab\")` returns `\"Ab\"` instead of `\"Ab\"\
    `.\n<|/ c |>\n<| c |>\nThis does not work. `solve(\"ab\")` returns `\"Ab\"` instead\
    \ of `\"Ab\"`.\n<|/ c |>\n<| a tags=julia,string |>\n<code>", "    if s.length==0\n\
    \        return \"\"\n    if isLetter(s[0])\n        return reverse(s,1)\n   \
    \ return s\nend\n</cell>\n<code language=julia-1.0>", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   if s.length==0 \n        return \"#a@C\"\n    else if contains(s,\"#\")==true\
    \ \n        return reverse(solve(reverse(s))) \n    else if contains(s,\"@\")==true\
    \ \n        return reverse(solve(reverse(s))) \n    else if contains(s,\"#\")==true\
    \ \n        return reverse(solve(reverse(s))) \n    else if contains(s,\"@\")==true\
    \ \n        return reverse(solve(reverse(s))) \n    else if contains(s,\"#\")==true\
    \ \n        return reverse(solve(reverse(s))) \n    else if contains(s,\"a\")==true\
    \ \n        return reverse(solve(reverse(s))) \n    else if contains(s,\"b\")==true\
    \ \n        return reverse(solve(reverse(s))) \n    else if contains(s,\"c\")==true\
    \ \n        return reverse(solve(reverse(s))) \n    else if contains(s,\"d\")==true\
    \ \n        return reverse(solve(reverse(s))) \n    else if contains(s,\"e\")==true\
    \ \n        return reverse(solve(reverse(s))) \n    else if contains(s,\"f\")==true\
    \ \n        return reverse(solve(reverse(s))) \n    else if contains(s,\"g\")==true\
    \ \n        return reverse(solve(reverse(s))) \n    else if contains(s,\"h\")==true\
    \ \n        return reverse(solve(reverse(s))) \n    else if contains(s,\"i\")==true\
    \ \n        return reverse(solve(reverse(s))) \n    else if contains(s,\"j\")==true\
    \ \n        return reverse(solve(reverse(s))) \n    else if contains(s,\"k\")==true\
    \ \n        return reverse(solve(reverse(s))) \n    else if contains(s,\"l\")==true\
    \ \n        return reverse(solve(reverse(s))) \n    else if contains(s,\"m\")==true\
    \ \n        return reverse(solve(reverse(s))) \n    else if contains(s,\"n\")==true\
    \ \n        return reverse(solve(reverse(s))) \n    else if contains(s,\"o\")==true\
    \ \n        return reverse(solve(reverse(s))) \n    else if contains(s,\"p\")==true\
    \ \n        return reverse(solve(reverse(s))) \n    else if contains(s,\"q\")==true\
    \ \n        return reverse(solve(reverse(s))) \n    else if contains(s,\"r\")==true\
    \ \n        return reverse(solve(reverse(s))) \n    else if contains(s,\"s\")==true\
    \ \n        return reverse(solve(reverse(s))) \n    else if contains(s,\"t\")==true\
    \ \n        return reverse(solve(reverse(s))) \n    else if contains(s,\"u\")",
  "    if length(s) == 0 \n        return s \n    else if length(s) == 1 \n      \
    \  return reverse(s,1) \n    else \n        \n        \n        \n        \n \
    \       \n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        ", "    if length(s) <= 0\n        return s\n\
    \    \n    if isLetter(s)\n        return reverse(toUpper(s))\n    else\n    \
    \    return reverse(toLower(s))\nend\n</code>\n<|/ a tags=string,julia |>\n<|\
    \ a tags=string,julia |>\n<code>", "    if length(s) <= 0\n        return s\n\
    \    \n    if isLetter(s)\n        return reverse(toUpper(s))\n    \n    return\
    \ reverse(toLower(s))\nend", "    if s.length == 0 \n        \"\" \n    else if\
    \ length(s) >= 1 \n        if isLetter(s) \n            reverse(toUpper(s))\n\
    \        else \n            reverse(toLower(s))\n    else \n        reverse(s)\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>", "    if s.length == 0 \n  \
    \      \"\" \n    else if length(s) == 1 \n        s \n    else if is_letter(s)\
    \ \n        solve_reverse(s)\n    else \n        solve_reverse(tolower(s))\nend",
  "    if length(s) <= 0\n        return s\n    \n    if isLetter(s)\n        return\
    \ reverse(upper(s))\n    \n    return reverse(lower(s))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solve(\"1234\") == \"4321\"\n@assert solve(\"ab\") == \"AB\"\n@assert\
    \ solve(\"#a@C\") == \"#A@c\"\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string as input and returns a string where all characters are converted\
    \ to uppercase except for the first character and all characters after the first\
    \ character are converted to lowercase. \nExamples\nupperExcept(\"hello\") = \"\
    HELLO\"\nupperExcept(\"hello1\") = \"hello1\"\nupperExcept(\"hello12\") = \"HELLO12\"\
    \nupperExcept(\"hello123\") = \"HELLO123\"\nupperExcept(\"hello1234\") = \"HELLO1234\"\
    \nupperExcept(\"hello12345\") = \"HELLO12345\"\nupperExcept(\"hello123456\") =\
    \ \"HELLO123456\"\nupperExcept(\"hello1234567\") = \"HELLO1234567\"\nupperExcept(\"\
    hello12345678\") = \"HELLO12345678\"\nupperExcept(\"hello123456789\") = \"HELLO123456789\"\
    \nupperExcept(\"hello1234567890\") = \"HELLO1234567890\"\nupperExcept(\"hello12345678901\"\
    ) = \"HELLO12345678901\"\nupperExcept(\"hello123456789012\") = \"HELLO123456789012\"\
    \nupperExcept(\"hello1234567890123\") = \"HELLO1234567890123\"\nupperExcept(\"\
    hello12345678901234\") = \"HELLO12345678901234\"\nupperExcept(\"hello123456789012345\"\
    ) = \"HELLO123456789012345\"\nupperExcept(\"hello1234567890123456\") = \"HELLO1234567890123456\"\
    \nupperExcept(\"hello12345678901234567\") = \"HELLO12345678901234567\"\nupperExcept(\"\
    hello123456789012345678\") = \"HELLO123456789012345678\"\nupperExcept(\"hello1234567890123456789\"\
    ) = \"HELLO1234567890123456789\"\nupperExcept(\"hello12345678901234567890\") =\
    \ \"HELLO12345678901234567890\"\nupperExcept(\"hello123456789012345678901\") =\
    \ \"HELLO123456789012345678901\"\nupperExcept(\"hello1234567890123456789012\"\
    ) = \"HELLO1234567890123456789012\"\nupperExcept(\"hello12345678901234567890123\"\
    ) = \"HELLO12345678901234567890123\"\nupperExcept(\"hello123456789012345678901234\"\
    ) = \"HELLO123456789012345678901234\"\nupperExcept(\"hello1234567890123456789012345\"\
    ) = \"HEL", "    if s.length == 0 \n        \"\"\n    else if length(s) == 1 \n\
    \        s[toupper(s[0])]\n    else if all(isLetter(s[i]))\n        solve(toupper(s))\n\
    \    else\n        solve(tolower(s))\n    end\nend\n</code>\n<|/ a tags=string,julia\
    \ |>\n<| c |>\nThis doesn't work if you have a string like `#a@C`\n<|/ c |>\n\
    <| c |>\nI added a solution for that case as well\n<|/ c |>\n<| c |>\nI added\
    \ a solution for that case as well\n<|/ c |>\n<| a tags=string,julia |>\nI wrote\
    \ a recursive function which solves the problem of reversing a string in Julia.\
    \ \n<code>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if length(s) <=\
    \ 1 \n        return s\n    \n    \n    if isLetter(s[end-1]) \n        return\
    \ reverse(s[end-1:end]) + s[end]\n    \n    \n    return reverse(s[end-1:end])\
    \ + s[end-1:end]\nend\n</cell>\n<code language=julia-1.5>", "    if length(s)\
    \ <= 0\n        return s\n    if isLetter(s)\n        return reverse(toUpper(s))\n\
    \    return reverse(toLower(s))\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\n\
    This doesn't work if there are non-letters in the string. For example, `solve(\"\
    ab\")` returns `\"B\"` instead of `\"AB\"`.\n<|/ c |>\n<| c |>\nThanks for pointing\
    \ that out. I've updated the answer to include a solution for that case.\n<|/\
    \ c |>\n<| a tags=julia |>\n<code>", "    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    if length(s) == 0\n        return s\n \
    \   \n    if isLetter(s)\n        return reverse(toUpper(s))\n    \n    return\
    \ reverse(toLower(s))\nend\n</cell>\n<code language=julia-1.5>", "    if length(s)\
    \ <= 0\n        return s\n    \n    if isLetter(s[end])\n        return reverse(s[end..end-1])\n\
    \    \n    return reverse(s[1..end])\nend\n</cell>\n<code language=julia-1.0>",
  "    if length(s)==0\n        return s\n    if isLetter(s)\n        return reverse(upper(s))\n\
    \    return reverse(lower(s))\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\
    \n    upper(s)\n    \n    Convert a string to upper case.\n    \n    Parameters\n\
    \    ----------\n    s : str\n        Input string\n    \n    Returns\n    -------\n\
    \    out : str\n        Upper case string\n    \n    Examples\n    --------\n\
    \    >>> upper(\"abc\")\n    \"ABC\"\n    >>> upper(\"AaBbCc\")\n    \"ABC\"\n\
    \    \"\"\"", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   if s.length == 0 \n        \"\" \n    else if length(s) == 1 \n        s[toupper(s[0])]\
    \ \n    else \n        solve(s[toupper(s[0])]) + s[tolower(s[end])]\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=string,julia |>\n<code>", "    if length(s) <= 0\n\
    \        return s\n    if isLetter(s)\n        return reverse(toUpper(s))\n  \
    \  return reverse(toLower(s))\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,julia\
    \ |>\n<code>", "    if length(s)==0\n        return s\n    if isLetter(s)\n  \
    \      return reverse(upper(s))\n    return reverse(lower(s))\nend\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"1234\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"ab\")\n</cell>\n<code language=julia-1.0>\nsolve(\"#a@C\")\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"abc\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n\
    <code language=julia-1.0>", "    \n    if length(s) <= 0 \n        return s \n\
    \    \n    if isLetter(s) \n        return reverse(toUpper(s))\n    \n    return\
    \ reverse(toLower(s))\nend\n</cell>\n<code language=julia-1.4>\nsolve(\"1234\"\
    )\n</cell>\n<code language=julia-1.4>\nsolve(\"ab\")\n</cell>\n<code language=julia-1.4>\n\
    solve(\"#a@C\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns a string where all characters are reversed.\nExamples\nreverse(\"\
    hello\") = \"olleh\"\nreverse(\"hello123\") = \"321ello\"\nreverse(\"hello\")\
    \ = \"olleh\"\nreverse(\"hello123\") = \"321ello\"\nreverse(\"hello\") = \"olleh\"\
    \nreverse(\"hello123\") = \"321ello\"\nreverse(\"hello\") = \"olleh\"\nreverse(\"\
    hello123\") = \"321ello\"\nreverse(\"hello\") = \"olleh\"\nreverse(\"hello123\"\
    ) = \"321ello\"\nreverse(\"hello\") = \"olleh\"\nreverse(\"hello123\") = \"321ello\"\
    \nreverse(\"hello\") = \"olleh\"\nreverse(\"hello123\") = \"321ello\"\nreverse(\"\
    hello\") = \"olleh\"\nreverse(\"hello123\") = \"321ello\"\nreverse(\"hello\")\
    \ = \"olleh\"\nreverse(\"hello123\") = \"321ello\"\nreverse(\"hello\") = \"olleh\"\
    \nreverse(\"hello123\") = \"321ello\"\nreverse(\"hello\") = \"olleh\"\nreverse(\"\
    hello123\") = \"321ello\"\nreverse(\"hello\") = \"olleh\"\nreverse(\"hello123\"\
    ) = \"321ello\"\nreverse(\"hello\") = \"olleh\"\nreverse(\"hello123\") = \"321ello\"\
    \nreverse(\"hello\") = \"olleh\"\nreverse(\"hello123\") = \"321ello\"\nreverse(\"\
    hello\") = \"olleh\"\nreverse(\"hello123\") = \"321ello\"\nreverse(\"hello\")\
    \ = \"olleh\"\nreverse(\"hello123\") = \"321ello\"\nreverse(\"hello\") = \"olleh\"\
    \nreverse(\"hello123\") = \"321ello\"\nreverse(\"hello\") = \"olleh\"\nreverse(\"\
    hello123\") = \"321ello\"\nreverse(\"hello\") = \"olleh\"\nreverse(\"hello123\"\
    ) = \"321ello\"\nreverse(\"", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    \n    if length(s) <= 0\n        return s\n    \n    if isLetter(s)\n\
    \        return reverse(toUpper(s))\n    \n    return reverse(toLower(s))\nend\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\n    solve2(s)\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    ", "    if length(s) == 0\n        return s\n   \
    \ if isletter(s)\n        chars = split(s, \"\")\n        chars = chars[2:end]\n\
    \        chars = chars[2:end]\n        chars = chars[2:end]\n        chars = chars[2:end]\n\
    \        chars = chars[2:end]\n        chars = chars[2:end]\n        chars = chars[2:end]\n\
    \        chars = chars[2:end]\n        chars = chars[2:end]\n        chars = chars[2:end]\n\
    \        chars = chars[2:end]\n        chars = chars[2:end]\n        chars = chars[2:end]\n\
    \        chars = chars[2:end]\n        chars = chars[2:end]\n        chars = chars[2:end]\n\
    \        chars = chars[2:end]\n        chars = chars[2:end]\n        chars = chars[2:end]\n\
    \        chars = chars[2:end]\n        chars = chars[2:end]\n        chars = chars[2:end]\n\
    \        chars = chars[2:end]\n        chars = chars[2:end]\n        chars = chars[2:end]\n\
    \        chars = chars[2:end]\n        chars = chars[2:end]\n        chars = chars[2:end]\n\
    \        chars = chars[2:end]\n        chars = chars[2:end]\n        chars = chars[2:end]\n\
    \        chars = chars[2:end]\n        chars = chars[2:end]\n        chars = chars[2:end]\n\
    \        chars = chars[2:end]\n        chars = chars[2:end]\n        chars = chars[2:end]\n\
    \        chars = chars[2:end]\n        chars = chars[2:end]\n        chars = chars[2:end]\n\
    \        chars = chars[2:end]\n        chars = chars[2:end]\n        chars = chars[2:end]\n\
    \        chars = chars[2:end]\n        chars = chars[2:end]\n        chars = chars[2:end]\n\
    \        chars = chars[2:end]\n        chars = chars[2:end]\n        chars = chars[2:end]\n\
    \        chars = chars[2:end]\n        chars = chars[2:end]\n        chars = chars[2:end]\n\
    \        chars = chars[2:end]\n        chars = chars[2:end]\n        chars = chars[2:end]\n\
    \        chars = chars[2:end]\n        chars = chars[2:end]\n        chars = chars[2:end]\n\
    \        chars = chars[2:end]\n        chars = chars[2:end]\n        chars = chars[2:end]\n\
    \        chars = char", "    if length(s) <= 0\n        return s\n    \n    if\
    \ isLetter(s)\n        return reverse(toUpper(s))\n    \n    return reverse(toLower(s))\n\
    end\n</cell>\n<code language=julia-1.5>\nsolve(\"1234\")\n</cell>\n<code language=julia-1.5>\n\
    solve(\"ab\")\n</cell>\n<code language=julia-1.5>\nsolve(\"#a@C\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ the string with all vowels replaced by \"*\".\nExamples\nvowels(\"abracadabra\"\
    ) returns \"*a*b*c*a*b*c*a*b\"\nvowels(\"abracadabra\") returns \"*a*b*c*a*b*c*a*b\"\
    \nvowels(\"abracadabra\") returns \"*a*b*c*a*b*c*a*b\"\nvowels(\"abracadabra\"\
    ) returns \"*a*b*c*a*b*c*a*b\"\nvowels(\"abracadabra\") returns \"*a*b*c*a*b*c*a*b\"\
    \nvowels(\"abracadabra\") returns \"*a*b*c*a*b*c*a*b\"\nvowels(\"abracadabra\"\
    ) returns \"*a*b*c*a*b*c*a*b\"\nvowels(\"abracadabra\") returns \"*a*b*c*a*b*c*a*b\"\
    \nvowels(\"abracadabra\") returns \"*a*b*c*a*b*c*a*b\"\nvowels(\"abracadabra\"\
    ) returns \"*a*b*c*a*b*c*a*b\"\nvowels(\"abracadabra\") returns \"*a*b*c*a*b*c*a*b\"\
    \nvowels(\"abracadabra\") returns \"*a*b*c*a*b*c*a*b\"\nvowels(\"abracadabra\"\
    ) returns \"*a*b*c*a*b*c*a*b\"\nvowels(\"abracadabra\") returns \"*a*b*c*a*b*c*a*b\"\
    \nvowels(\"abracadabra\") returns \"*a*b*c*a*b*c*a*b\"\nvowels(\"abracadabra\"\
    ) returns \"*a*b*c*a*b*c*a*b\"\nvowels(\"abracadabra\") returns \"*a*b*c*a*b*c*a*b\"\
    \nvowels(\"abracadabra\") returns \"*a*b*c*a*b*c*a*b\"\nvowels(\"abracad", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    if length(s)\
    \ <= 0\n        return s\n    \n    if isLetter(s)\n        return reverse(toUpper(s))\n\
    \    \n    return reverse(toLower(s))\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(\"1234\")\n</cell>\n<code language=julia-1.5>\nsolve(\"ab\")\n</cell>\n\
    <code language=julia-1.5>\nsolve(\"#a@C\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of vowels present in the\
    \ string.\nExamples\nvowels(\"hello\") = 2\nvowels(\"hellooo\") = 3\nvowels(\"\
    aba\") = 1\nvowels(\"abacaba\") = 2\nvowels(\"abacabacaba\") = 3\nvowels(\"abacabacabacaba\"\
    ) = 4\nvowels(\"abacabacabacabacaba\") = 5\nvowels(\"abacabacabacabacabacaba\"\
    ) = 6\nvowels(\"abacabacabacabacabacabacaba\") = 7\nvowels(\"abacabacabacabacabacabacabacaba\"\
    ) = 8\nvowels(\"abacabacabacabacabacabacabacabacaba\") = 9\nvowels(\"abacabacabacabacabacabacabacabacabacaba\"\
    ) = 10\nvowels(\"abacabacabacabacabacabacabacabacabacabacaba\") = 11\nvowels(\"\
    abacabacabacabacabacabacabacabacabacabacabacaba\") = 12\nvowels(\"abacabacabacabacabacabacabacabacabacabacabacabacaba\"\
    ) = 13\nvowels(\"abacabacabacabacabacabacabacabacabacabacabacabacabacaba\") =\
    \ 14\nvowels(\"abacabacabacabacabacabacabacabacabacabacabacabacabacabacaba\")\
    \ = 15\nvowels(\"abacabacabacabacabacabacabacabacabacabacabacabacabacabacabacaba\"\
    ) = 16\nvowels(\"abacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacaba\"\
    ) = 17\nvowels(\"abacabacabacabacabac", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if length(s) == 0 \n        return s \n    else if\
    \ length(s) == 1 \n        return reverse(s,1) \n    else \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        ", "    if length(s)\
    \ <= 0 \n        return s \n    else if length(s) == 1 \n        return toupper(s[0])\
    \ \n    else \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n", "    if\
    \ length(s) <= 0 \n        return s \n    \n    if isLetter(s) \n        return\
    \ reverse(upper(s))\n    \n    return reverse(lower(s))\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(\"1234\")\n</cell>\n<code language=julia-1.5>\nsolve(\"ab\")\n</cell>\n\
    <code language=julia-1.5>\nsolve(\"#a@C\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of vowels contained in\
    \ the string.\nExamples\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\")\
    \ = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\"\
    ) = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\"\
    ) = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\"\
    ) = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\"\
    ) = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\"\
    ) = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\"\
    ) = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\"\
    ) = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\"\
    ) = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\"\
    ) = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\"\
    ) = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\"\
    ) = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\"\
    ) = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra",
  "    if length(s) <= 0\n        return s\n    if isLetter(s)\n        return reverse(toUpper(s))\n\
    \    return reverse(toLower(s))\nend\n</code>\n<|/ a tags=string,julia |>\n<|\
    \ c |>\nThis doesn't work for \"#a@C\"\n<|/ c |>\n<| c |>\nIt works for me. Are\
    \ you sure you copied it correctly? I tested it on Julia 0.6.2\n<|/ c |>\n<| c\
    \ |>\nYes, I copied it correctly. I'm on 0.6.2\n<|/ c |>\n<| c |>\nI tested it\
    \ on 0.6.2 too. Are you sure you copied it correctly? I tested it on Julia 0.6.2\n\
    <|/ c |>\n<| c |>\nI tested it on 0.6.2 too. Are you sure you copied it correctly?\
    \ I tested it on Julia 0.6.2\n<|/ c |>\n<| a |>\n<code>", "    if length(s) <=\
    \ 0 \n        then return s\n    else if isLetter(s) \n        then return reverse(toUpper(s))\n\
    \        else return reverse(toLower(s))\nend\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a |>\n<code>", "    \n    if s.length == 0 \n        return s \n    \n    if\
    \ isLetter(s) \n        return reverse(toUpper(s))\n    \n    return reverse(toLower(s))\n\
    end\n</cell>\n<code language=julia-1.5>\n# test your code\n@test solve(\"1234\"\
    ) == \"4321\"\n@test solve(\"ab\") == \"AB\"\n@test solve(\"#a@C\") == \"#A@c\"\
    \n</cell>\n<text>\n4.2 Write a Julia function named isPalindrome that takes a\
    \ string as its argument and determines whether the string is a palindrome or\
    \ not.\nThe function should return a boolean value.\nThe function should only\
    \ use loops, no conditional statements.\nExamples\nisPalindrome(\"A man, a plan,\
    \ a canal: Panama\") = true\nisPalindrome(\"A man, a plan, a canal: Panama\")\
    \ = false\nisPalindrome(\"A man, a plan, a canal: Panama\") = false\nisPalindrome(\"\
    A man, a plan, a canal: Panama\") = false\nisPalindrome(\"A man, a plan, a canal:\
    \ Panama\") = false\nisPalindrome(\"A man, a plan, a canal: Panama\") = false\n\
    isPalindrome(\"A man, a plan, a canal: Panama\") = false\nisPalindrome(\"A man,\
    \ a plan, a canal: Panama\") = false\nisPalindrome(\"A man, a plan, a canal: Panama\"\
    ) = false\nisPalindrome(\"A man, a plan, a canal: Panama\") = false\nisPalindrome(\"\
    A man, a plan, a canal: Panama\") = false\nisPalindrome(\"A man, a plan, a canal:\
    \ Panama\") = false\nisPalindrome(\"A man, a plan, a canal: Panama\") = false\n\
    isPalindrome(\"A man, a plan, a canal: Panama\") = false\nisPalindrome(\"A man,\
    \ a plan, a canal: Panama\") = false\nisPalindrome(\"A man, a plan, a canal: Panama\"\
    ) = false\nisPalindrome(\"A man, a plan, a canal: Panama\") = false\nisPalindrome(\"\
    A man, a plan, a canal: Panama\") = false\nisPalindrome(\"A man", "    if s.length\
    \ == 0 \n        return \"#\" \n    else if length(s) == 1 \n        return toupper(s[0])\
    \ \n    else \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n", "    if\
    \ s.length == 0 \n        return s \n    else if isLetter(s) \n        return\
    \ reverse(toUpper(toLower(s))) \n    else \n        return reverse(toLower(s))\
    \ \nend\n</cell>\n<code language=julia-1.4>", "    if length(s) == 0 \n      \
    \  return s \n    else if length(s) == 1 \n        return toupper(s[0]) \n   \
    \ else \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        ", "    if\
    \ length(s) <= 0\n        return s\n    \n    if isLetter(s)\n        return reverse(toUpper(s))\n\
    \    \n    return reverse(toLower(s))\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    solve(s::String)::String\n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    if length(s) == 0 \n        return s \n    else if isLetter(s)\
    \ \n        return reverse(upper(s))\n    else \n        return reverse(lower(s))\n\
    end\n</code>\n<|/ a tags=julia,string |>\n<| c |>\nThis doesn't work if there\
    \ are multiple letters in the string. For example, `solve(\"ab\")` returns `\"\
    A\"` instead of `\"AB\"`.\n<|/ c |>\n<| c |>\nYes, you are right. I've edited\
    \ my answer to fix this issue. Thanks!\n<|/ c |>\n<| a tags=julia,string |>\n\
    <code>", "    if length(s)==0 then return s\n    else if isLetter(s) then \n \
    \       upperCase(s)\n    else \n        lowerCase(s)\n    end\nend\n</code>\n\
    <|/ a tags=string,julia |>\n<| a tags=string,julia |>\nA simple solution:\n<code>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if length(s) ==\
    \ 0 \n        return s \n    else if length(s) == 1 \n        return toupper(s[0])\
    \ \n    else \n        return reverse(toupper(s[0])) ++ reverse(tolower(s[1]))\
    \ ++ reverse(tolower(s[2])) \nend\n</cell>\n<code language=julia-1.0>", "    if\
    \ length(s) <= 1 \n        return s\n    \n    \n    if isLetter(s[end-1]) \n\
    \        return reverse(s[end-1]) + reverse(s[end])\n    \n    \n    return reverse(s[end-1])\
    \ + s\nend\n</cell>\n<code language=julia-1.0>\nsolve(\"1234\")\n</cell>\n<code\
    \ language=julia-1.0>\nsolve(\"ab\")\n</cell>\n<code language=julia-1.0>\nsolve(\"\
    #a@C\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as\
    \ input and returns the number of vowels contained in the string.\nExamples\n\
    vowels(\"hello\") = 2\nvowels(\"hellooo\") = 3\nvowels(\"abracadabra\") = 7\n\
    vowels(\"abracadabra\") = 7\nvowels(\"abracadabra\") = 7\nvowels(\"abracadabra\"\
    ) = 7\nvowels(\"abracadabra\") = 7\nvowels(\"abracadabra\") = 7\nvowels(\"abracadabra\"\
    ) = 7\nvowels(\"abracadabra\") = 7\nvowels(\"abracadabra\") = 7\nvowels(\"abracadabra\"\
    ) = 7\nvowels(\"abracadabra\") = 7\nvowels(\"abracadabra\") = 7\nvowels(\"abracadabra\"\
    ) = 7\nvowels(\"abracadabra\") = 7\nvowels(\"abracadabra\") = 7\nvowels(\"abracadabra\"\
    ) = 7\nvowels(\"abracadabra\") = 7\nvowels(\"abracadabra\") = 7\nvowels(\"abracadabra\"\
    ) = 7\nvowels(\"abracadabra\") = 7\nvowels(\"abracadabra\") = 7\nvowels(\"abracadabra\"\
    ) = 7\nvowels(\"abracadabra\") = 7\nvowels(\"abracadabra\") = 7\nvowels(\"abracadabra\"\
    ) = 7\nvowels(\"abracadabra\") = 7\nvowels(\"abracadabra\") = 7\nvowels(\"abracadabra\"\
    ) = 7\nvowels(\"abracadabra\") = 7\nvowels(\"abracadabra\") = 7\nvowels(\"abracadabra\"\
    ) = 7\nvowels(\"abracadabra\") = 7\nvowels(\"abracadabra\") = 7\nvowels(\"abracadabra\"\
    ) = 7\nvowels(\"abracadabra\") = 7\nvowels(\"abracadabra\") = 7\nvowels(\"abracadabra\"\
    ) = 7\nvowels(\"abracadabra\") = 7", "    \n    if length(s) == 0 \n        return\
    \ s \n    \n    \n    if isLetter(s) \n        return reverse(toUpper(s))\n  \
    \  \n    \n    if isLetter(toUpper(s)) \n        return reverse(toLower(s))\n\
    \    \n    \n    return s \nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ s.length==0\n        return \"\"\n    if isLetter(s[0])\n        return reverse(s,1)\n\
    \    return reverse(s,0)\nend", "    if s.length==0\n        return s\n    if\
    \ isLetter(s)\n        return reverse(toUpper(s))\n    return reverse(toLower(s))\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "    if length(s)\
    \ == 0 \n        return s \n    else if length(s) == 1 \n        return reverse(s,1)\
    \ \n    else \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        ", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if\
    \ length(s)==0\n        return s\n    if isLetter(s)\n        return reverse(toUpper(s))\n\
    \    return reverse(toLower(s))\nend\n</code>\n<|/ a tags=string,julia,reverse\
    \ |>\n<| a tags=string,julia,reverse |>\n<code>", "    if length(s) <= 0 \n  \
    \      return s \n    else if all(isLetter(s)) \n        return reverse(toUpper(s))\n\
    \    else \n        return reverse(toLower(s))\nend\n</code>\n<|/ a tags=julia\
    \ |>\n<| a dscore=1 |>\nI wrote a package for solving this problem called ReverseStrings.jl\n\
    <code>\njulia> using ReverseStrings", "    if length(s) <= 1 \n        return\
    \ s\n    \n    if isLetter(s[end-1]) \n        return reverse(s[end-1]) + reverse(s[end])\n\
    \    else \n        return reverse(s[end-1]) + s\nend\n</cell>\n<code language=julia-1.5>",
  "    if s.length == 0 \n        return s \n    else if isLetter(s) \n        return\
    \ reverse(toUpper(s))\n    else \n        return reverse(toLower(s))\nend\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"1234\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"ab\")\n</cell>\n<code language=julia-1.0>\nsolve(\"#a@C\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ the number of vowels present in the string.", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    if length(s) <= 0\n        return s\n    \n \
    \   if isLetter(s)\n        return reverse(toUpper(s))\n    \n    return reverse(toLower(s))\n\
    end\n</cell>\n<code language=julia-1.0>\n# Test your function with the example\n\
    @test solve(\"1234\") == \"4321\"\n@test solve(\"ab\") == \"AB\"\n@test solve(\"\
    #a@C\") == \"#A@c\"\n</cell>\n<text>\n4.3 Write a function that takes a string\
    \ and returns a string where all characters have been capitalized.\nExamples\n\
    capitalize(\"hello\") = \"Hello\"\ncapitalize(\"hello world\") = \"Hello World\"\
    \ncapitalize(\"i love julia\") = \"I Love Julia\"\nHint: You may want to use replace()\
    \ with a regular expression to capitalize all letters.", "    if length(s) <=\
    \ 0\n        return s\n    \n    if isLetter(s)\n        return reverse(toUpper(s))\n\
    \    \n    return reverse(toLower(s))\nend", "    if length(s) <= 0\n        return\
    \ s\n    \n    if isLetter(s[1])\n        return reverse(s[1..end-1]) + reverse(s[end..end-1])\n\
    \    else\n        return reverse(s[1..end-1]) + s\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test your code\n@test solve(\"1234\") == \"4321\"\n@test solve(\"ab\") == \"\
    AB\"\n@test solve(\"#a@C\") == \"#A@c\"\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a string as input and returns the number of characters in\
    \ the string that are not letters.", "    if length(s) <= 0\n        return s\n\
    \    \n    if isLetter(s)\n        return reverse(toUpper(s))\n    \n    return\
    \ reverse(toLower(s))\nend\n</cell>\n<code language=julia-1.5>\nsolve(\"1234\"\
    )\n</cell>\n<code language=julia-1.5>\nsolve(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    solve(\"#a@C\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of vowels present in the string.\nExamples\nvowels(\"\
    hello\") = 1\nvowels(\"abracadabra\") = 3\nvowels(\"#a@C\") = 1\nvowels(\"#a@C#\"\
    ) = 2\nvowels(\"#a@C#@\") = 3\nvowels(\"#a@C#@#\") = 4\nvowels(\"#a@C#@#@\") =\
    \ 5\nvowels(\"#a@C#@#@#\") = 6\nvowels(\"#a@C#@#@#@\") = 7\nvowels(\"#a@C#@#@#@#\"\
    ) = 8\nvowels(\"#a@C#@#@#@#\") = 9\nvowels(\"#a@C#@#@#@#@\") = 10\nvowels(\"#a@C#@#@#@#@#\"\
    ) = 11\nvowels(\"#a@C#@#@#@#@#\") = 12\nvowels(\"#a@C#@#@#@#@#\") = 13\nvowels(\"\
    #a@C#@#@#@#@#\") = 14\nvowels(\"#a@C#@#@#@#@#\") = 15\nvowels(\"#a@C#@#@#@#@#\"\
    ) = 16\nvowels(\"#a@C#@#@#@#@#\") = 17\nvowels(\"#a@C#@#@#@#@#\") = 18\nvowels(\"\
    #a@C#@#@#@#@#\") = 19\nvowels(\"#a@C#@#@#@#@#\") = 20\nvowels(\"#a@C#@#@#@#@#\"\
    ) = 21\nvowels(\"#a@C#@#@#@#@#\") = 22\nvowels(\"#a@C#@#@#@#@#\") = 23\nvowels(\"\
    #a@C#@#@#@#@#\") = 24\nvowels(\"#a@C#@#@#@", "    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    if length(s) == 0 \n        return s \n    else\
    \ if length(s) == 1 \n        return toupper(s[0]) \n    else \n        return\
    \ reverse(solve(reverse(s))) \nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   if length(s) <= 1 \n        return s\n    else if all(isLetter(s[i]))\n  \
    \      uppercase = reverse(upperCase(s))\n        lowercase = reverse(lowerCase(s))\n\
    \        return uppercase + lowercase\n    else\n        return reverse(upperCase(s))\n\
    \    end\nend\n</code>\n<|/ a tags=string,julia |>\n<| a tags=string,julia |>\n\
    <code>", "    if s.length == 0 \n        \"\"\n    elseif length(s) <= 1 \n  \
    \      s\n    elseif isLetter(s) \n        upperCase(solve(reverse(s))) \n   \
    \ else\n        solve(reverse(s))\n    end\nend\n</code>\n<|/ a tags=string,julia\
    \ |>\n<| a tags=string,julia |>\n<code>", "    if length(s) <= 0 \n        return\
    \ s \n    \n    if isLetter(s) \n        return reverse(upper(s))\n    \n    return\
    \ reverse(lower(s))\nend\n</cell>\n<code language=julia-1.4>\nsolve(\"1234\")\n\
    </cell>\n<code language=julia-1.4>\nsolve(\"ab\")\n</cell>\n<code language=julia-1.4>\n\
    solve(\"#a@C\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of vowels contained in the string.\nExamples\nvowels(\"\
    hello\") = 2\nvowels(\"abracadabra\") = 3\nvowels(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.4>", "    if length(s) <= 0\n        return s\n    \n \
    \   if isLetter(s)\n        return reverse(toUpper(s))\n    \n    return reverse(toLower(s))\n\
    end\n</cell>\n<code language=julia-1.5>\nsolve(\"1234\")\n</cell>\n<code language=julia-1.5>\n\
    solve(\"ab\")\n</cell>\n<code language=julia-1.5>\nsolve(\"#a@C\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ the number of vowels present in the string.\nExamples\nvowels(\"abracadabra\"\
    ) \u279E 5\nvowels(\"abracadabra\") \u279E 3\nvowels(\"abracadabra\") \u279E 0\n\
    vowels(\"abracadabra\") \u279E -1\nvowels(\"abracadabra\") \u279E -1\nvowels(\"\
    abracadabra\") \u279E -1\nvowels(\"abracadabra\") \u279E -1\nvowels(\"abracadabra\"\
    ) \u279E -1\nvowels(\"abracadabra\") \u279E -1\nvowels(\"abracadabra\") \u279E\
    \ -1\nvowels(\"abracadabra\") \u279E -1\nvowels(\"abracadabra\") \u279E -1\nvowels(\"\
    abracadabra\") \u279E -1\nvowels(\"abracadabra\") \u279E -1\nvowels(\"abracadabra\"\
    ) \u279E -1\nvowels(\"abracadabra\") \u279E -1\nvowels(\"abracadabra\") \u279E\
    \ -1\nvowels(\"abracadabra\") \u279E -1\nvowels(\"abracadabra\") \u279E -1\nvowels(\"\
    abracadabra\") \u279E -1\nvowels(\"abracadabra\") \u279E -1\nvowels(\"abracadabra\"\
    ) \u279E -1\nvowels(\"abracadabra\") \u279E -1\nvowels(\"abracadabra\") \u279E\
    \ -1\nvowels(\"abracadabra\") \u279E -1\nvowels(\"abracadabra\") \u279E -1\nvowels(\"\
    abracadabra\") \u279E -1\nvowels(\"abracadabra\") \u279E -1\nvowels(\"abracadabra\"\
    ) \u279E -1\nvowel", "    if s.length == 0 \n        return s \n    else if isLetter(s)\
    \ \n        return reverse(upper(s))\n    else \n        return reverse(lower(s))\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it on `solve(\"\
    ab\")`.\n<|/ c |>\n<| c |>\nThanks for pointing out. I've fixed the code now.\n\
    <|/ c |>\n<| a tags=string,julia,reverse |>\n<code>", "    if s.length==0 then\
    \ return \"\"\n    if isLetter(s) then return reverse(toUpper(s))\n    else return\
    \ reverse(toLower(s))\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,julia,reverse\
    \ |>\n<code>", "    if length(s) <= 0\n        return s\n    \n    if isLetter(s)\n\
    \        return reverse(toUpper(s))\n    else\n        return reverse(toLower(s))\n\
    end\n</cell>\n<code language=julia-1.5>\n# test your code\n@test solve(\"1234\"\
    ) == \"4321\"\n@test solve(\"ab\") == \"AB\"\n@test solve(\"#a@C\") == \"#A@c\"\
    \n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of vowels \nin the string.\nExamples\nvowels(\"abracadabra\") \u279E\
    \ 5\nvowels(\"abra\") \u279E 3\nvowels(\"abraz\") \u279E 0\nvowels(\"abra\") \u279E\
    \ 3\nHint: You may want to use regular expressions.", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    if s.length == 0 \n        return s \n\
    \    \n    if isLetter(s) \n        return reverse(toUpper(s))\n    \n    return\
    \ reverse(toLower(s))\nend\n</cell>\n<code language=julia-1.0>\nsolve(\"1234\"\
    )\n</cell>\n<code language=julia-1.0>\nsolve(\"ab\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"#a@C\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of vowels contained in the string.\nExamples\nvowels(\"\
    hello\") = 2\nvowels(\"abracadabra\") = 3\nvowels(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.0>", "    if length(s) == 0 \n        return s \n    else\
    \ if length(s) == 1 \n        return reverse(s,1) \n    else \n        \n    \
    \    \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        ", "    if length(s)\
    \ <= 0\n        return s\n    \n    if isLetter(s)\n        return reverse(toUpper(s))\n\
    \    \n    return reverse(toLower(s))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solve(\"1234\") == \"4321\"\n@assert solve(\"ab\") == \"AB\"\n@assert\
    \ solve(\"#a@C\") == \"#A@c\"\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string as input and returns the number of characters in the string.",
  "    \n    if s.length == 0\n        return \"\"\n    \n    if isLetter(s)\n   \
    \     return reverse(toUpper(s))\n    \n    return reverse(toLower(s))\nend\n\
    </cell>\n<code language=julia-1.0>\nsolve(\"1234\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"ab\")\n</cell>\n<code language=julia-1.0>\nsolve(\"#a@C\")\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\nsolve(\"aBcD", "    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    if length(s) <= 0 \n\
    \        error(\"String is empty\")\n    else if length(s) == 1 \n        return\
    \ s\n    else if isLetter(s) \n        return reverse(toUpper(s))\n    else \n\
    \        return reverse(toLower(s))\nend", "    if length(s) == 0 \n        return\
    \ s \n    else if length(s) == 1 \n        return reverse(s,1) \n    else \n \
    \       \n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        ", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if s.length ==\
    \ 0 \n        return s \n    else if isLetter(s) \n        return reverse(toUpper(s))\n\
    \    else \n        return reverse(toLower(s))\nend\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a tags=julia,string |>\n<code>", "    if length(s) <= 0\n        return\
    \ s\n    if isLetter(s[end])\n        return reverse(s[end..end-1])\n    return\
    \ s\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "    if length(s)\
    \ <= 0\n        return s\n    \n    if isLetter(s[end])\n        return reverse(s[end..end-1])\n\
    \    \n    return reverse(s[end..end-1])\nend\n</cell>\n<code language=julia-1.5>",
  "    if s.length == 0 \n        \"\" \n    else if length(s) == 1 \n        s[toupper(s[0])]\
    \ \n    else \n        solve(s[toupper(s[0])]) + s[tolower(s[end-1])]\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "    if length(s) == 0 \n      \
    \  return s \n    else if isletter(s) \n        return reverse(toupper(s))\n \
    \   else \n        return reverse(tolower(s)) \nend\n</code>\n<|/ a tags=string,julia\
    \ |>\n<| c |>\nThis doesn't work if the string contains any non-letters. For example,\
    \ `solve(\"ab\")` returns `\"Ab\"` instead of `\"Ab\"`.\n<|/ c |>\n<| c |>\nYes,\
    \ you are right. I edited my answer to fix this problem.\n<|/ c |>\n<| a |>\n\
    <code>", "    if length(s) == 0 \n        return s \n    else if isLetter(s) \n\
    \        return reverse(upper(s))\n    else \n        return reverse(lower(s))\n\
    end\n</cell>\n<code language=julia-1.0>\nsolve(\"1234\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"ab\")\n</cell>\n<code language=julia-1.0>\nsolve(\"#a@C\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string as input and returns\
    \ the number of vowels present in the string.", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if\
    \ length(s) == 0 \n        return s \n    else if length(s) == 1 \n        return\
    \ reverse(s,1) \n    else \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        ", "    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    if length(s) <= 0\n        return s\n    \n    if isLetter(s)\n\
    \        return reverse(toUpper(s))\n    \n    return reverse(toLower(s))\nend",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    if\
    \ length(s) == 0 \n        return s \n    \n    if isLetter(s) \n        return\
    \ reverse(toUpper(s))\n    \n    return reverse(toLower(s))\nend\n</cell>\n<code\
    \ language=julia-1.3>", "    if length(s) == 0 \n        return s \n    else if\
    \ length(s) == 1 \n        return toupper(s[0]) \n    else \n        local result\
    \ = \"\"\n        for c in s \n            local upper = toupper(c)\n        \
    \    local lower = tolower(c)\n            if upper == lower \n              \
    \  then upper = upper\n                else upper = lower\n            end\n \
    \           result = result .. upper\n        end\n        return result\n   \
    \ end\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,lowercase,uppercase,haskell\
    \ |>\n<code>\nimport Data.Char", "    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    if length(s) == 0\n        return s\n    if isLetter(s)\n\
    \        return reverse(toUpper(s))\n    return reverse(toLower(s))\nend\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"1234\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"ab\")\n</cell>\n<code language=julia-1.0>\nsolve(\"#a@C\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of vowels in it.", "    if length(s) <= 0\n        return s\n    \n    if isLetter(s[end])\n\
    \        return reverse(s[end..end-1])\n    \n    return reverse(s[end..end-1])\n\
    end", "    if length(s) == 0 \n        return s \n    \n    if isLetter(s) \n\
    \        return reverse(toUpper(s))\n    \n    return reverse(toLower(s))\nend\n\
    </cell>\n<code language=julia-1.5>\nsolve(\"1234\")\n</cell>\n<code language=julia-1.5>\n\
    solve(\"ab\")\n</cell>\n<code language=julia-1.5>\nsolve(\"#a@C\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ the number of characters in the string that are uppercase letters.", "    if\
    \ length(s) <= 0 \n        error(\"String is empty\")\n    elseif s[0] == '#'\
    \ \n        error(\"String starts with #\")\n    elseif isLetter(s) \n       \
    \ solve_reverse(s)\n    else\n        solve_reverse(toUpper(s))\n    end\nend",
  "    if length(s) <= 0 \n        return s \n    else if s[0] == '#' \n        return\
    \ reverse(s[2:]) \n    else if s[0] == '@' \n        return reverse(s[2:]) \n\
    \    else if s[0] == 'a' \n        return reverse(s[2:]) \n    else if s[0] ==\
    \ 'b' \n        return reverse(s[2:]) \n    else if s[0] == 'c' \n        return\
    \ reverse(s[2:]) \n    else if s[0] == 'd' \n        return reverse(s[2:]) \n\
    \    else if s[0] == 'e' \n        return reverse(s[2:]) \n    else if s[0] ==\
    \ 'f' \n        return reverse(s[2:]) \n    else if s[0] == 'g' \n        return\
    \ reverse(s[2:]) \n    else if s[0] == 'h' \n        return reverse(s[2:]) \n\
    \    else if s[0] == 'i' \n        return reverse(s[2:]) \n    else if s[0] ==\
    \ 'j' \n        return reverse(s[2:]) \n    else if s[0] == 'k' \n        return\
    \ reverse(s[2:]) \n    else if s[0] == 'l' \n        return reverse(s[2:]) \n\
    \    else if s[0] == 'm' \n        return reverse(s[2:]) \n    else if s[0] ==\
    \ 'n' \n        return reverse(s[2:]) \n    else if s[0] == 'o' \n        return\
    \ reverse(s[2:]) \n    else if s[0] == 'p' \n        return reverse(s[2:]) \n\
    \    else if s[0] == 'q' \n        return reverse(s[2:]) \n    else if s[0] ==\
    \ 'r' \n        return reverse(s[2:]) \n    else if s[0] == 's' \n        return\
    \ reverse(s[2:]) \n    else if s[0] == 't' \n        return reverse(s[2:]) \n\
    \    else if s[0] == 'u' \n        return reverse(s[2:]) \n    else if s[0] ==\
    \ 'v' \n        return reverse(s[2:]) \n    else if s[0] == 'w' \n        return\
    \ reverse(s[2:]) \n    else if s[0] == 'x' \n        return reverse(s[2:]) \n\
    \    else if s[0] == 'y' \n        return reverse(s[2:]) \n    else if s[0] ==\
    \ 'z' \n        return reverse(s[2:]) \n    else \n        return reverse(s[2:])\
    \ \nend\n</cell>\n<code language=julia-1.4>", "    if length(s) <= 0\n       \
    \ return s\n    \n    if isLetter(s[end])\n        return reverse(s[end..end-1])\n\
    \    \n    return reverse(s[1..end])\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(\"1234\")\n</cell>\n<code language=julia-1.5>\nsolve(\"ab\")\n</cell>\n\
    <code language=julia-1.5>\nsolve(\"#a@C\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the number of characters in the string\
    \ that are letters.", "    if length(s) <= 0 \n        return s \n    \n    if\
    \ isLetter(s) \n        return reverse(toUpper(s))\n    \n    return reverse(toLower(s))\n\
    end\n</cell>\n<code language=julia-1.0>", "    if s.length == 0 \n        \"\"\
    \ \n    else if length(s) == 1 \n        s[toupper(s[0])] \n    else \n      \
    \  solve(reverse(s))\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work.\
    \ `solve(\"ab\")` returns `\"A\"` instead of `\"AB\"`.\n<|/ c |>\n<| c |>\nI fixed\
    \ the bug. Thanks for pointing it out.\n<|/ c |>\n<| a tags=recursion,julia |>\n\
    <code>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    if length(s) <= 0 \n\
    \        return s \n    else if isLetter(s) \n        return reverse(upper(s))\n\
    \    else \n        return reverse(lower(s))\nend\n</code>\n<|/ a tags=string,julia\
    \ |>\n<| a dscore=0 |>\n<code>", "    \n    if length(s) == 0 \n        \n   \
    \     return \"\"\n    \n    \n    if isLetter(s) \n        \n        return reverse(toUpper(s))\n\
    \    \n    \n    return reverse(toLower(s))\nend\n</cell>\n<code language=julia-1.0>\n\
    solve(\"1234\")\n</cell>\n<code language=julia-1.0>\nsolve(\"ab\")\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"#a@C\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of characters in the string.\n\
    Examples\ncount(\"abc\") = 3\ncount(\"ab\") = 2\ncount(\"a\") = 1\ncount(\"\"\
    ) = 0\ncount(nothing) = 0\nHint: Use length() function", "    if length(s) <=\
    \ 1 \n        return s\n    else if isletter(s) \n        solve(s)\n    else\n\
    \        solve(reverse(s))\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if\
    \ s.length==0 \n        return s \n    else if length(filter(x -> x>='a' && x<='z',s))\
    \ == 0 \n        return reverse(s) \n    else \n        return reverse(transform(s,toUpper))\
    \ \nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    transform(str::String,\
    \ func::Function)\n    Transforms the string str using the function func.\n  \
    \  For example,\n    transform(\"hello\", x -> x + 1) \n    transform(\"hello\"\
    , x -> x + 1) \n    transform(\"hello\", x -> x + 1) \n    transform(\"hello\"\
    , x -> x + 1) \n    transform(\"hello\", x -> x + 1) \n    transform(\"hello\"\
    , x -> x + 1) \n    transform(\"hello\", x -> x + 1) \n    transform(\"hello\"\
    , x -> x + 1) \n    transform(\"hello\", x -> x + 1) \n    transform(\"hello\"\
    , x -> x + 1) \n    transform(\"hello\", x -> x + 1) \n    transform(\"hello\"\
    , x -> x + 1) \n    transform(\"hello\", x -> x + 1) \n    transform(\"hello\"\
    , x -> x + 1) \n    transform(\"hello\", x -> x + 1) \n    transform(\"hello\"\
    , x -> x + 1) \n    transform(\"hello\", x -> x + 1) \n    transform(\"hello\"\
    , x -> x + 1) \n    transform(\"hello\", x -> x + 1) \n    transform(\"hello\"\
    , x -> x + 1) \n    transform(\"hello\", x -> x + 1) \n    transform(\"hello\"\
    , x -> x + 1) \n    transform(\"hello\", x -> x + 1) \n    transform(\"hello\"\
    , x -> x + 1) \n    transform(\"hello\", x -> x + 1) \n    transform(\"hello\"\
    , x -> x + 1) \n    transform(\"hello\", x -> x + 1) \n    transform(\"hello\"\
    , x -> x + 1) \n    transform(\"hello\", x -> x + 1) \n    transform(\"hello\"\
    , x -> x + 1) \n    transform(\"hello\", x -> x + 1) \n    transform(\"hello\"\
    , x -> x + 1) \n    transform(\"hello\", x -> x + 1) \n    transform(\"hello\"\
    , x -> x + 1) \n    transform(\"hello\", x -> x + 1) \n    transform(\"hello\"\
    , x -> x + 1) \n    transform(\"hello\", x -> x + 1) \n    transform(\"hello\"\
    , x -> x + 1) \n    transform(\"hello\", x -> x + 1) \n    transform(\"hello\"\
    , x -> x + 1) \n    transform(\"hello\", x -> x + 1) \n    transform(\"hello\"\
    , x -> x + 1) \n    transform(\"hello\", x -> x + 1) \n    ", "    if s.length\
    \ == 0 \n        return s \n    else if isLetter(s) \n        return reverse(s.toLowerCase())\
    \ \n    else \n        return reverse(s.toUpperCase()) \nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=string,julia,reverse |>\n<code>", "    if length(s) <= 0\n   \
    \     return s\n    \n    if isLetter(s)\n        return reverse(upper(s))\n \
    \   else\n        return reverse(lower(s))\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(\"1234\")\n</cell>\n<code language=julia-1.5>\nsolve(\"ab\")\n</cell>\n\
    <code language=julia-1.5>\nsolve(\"#a@C\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of characters in the string.\n\
    Examples\ncount(\"1234\") = 4\ncount(\"ab\") = 2\ncount(\"#a@C\") = 3\nHint: use\
    \ the length function.", "    if s.length == 0 \n        return s \n    else if\
    \ isLetter(s) \n        return reverse(toUpper(s))\n    else \n        return\
    \ reverse(toLower(s))\nend", "    if length(s) == 0 \n        return s \n    else\
    \ if length(s) == 1 \n        return toupper(s[0]) \n    else \n        return\
    \ reverse(solve(reverse(s))) \nend\n</code>\n<|/ a tags=string,julia,reverse |>\n\
    <| c |>\nI like this solution, but I wonder if there is a more efficient way of\
    \ doing this without using recursion.\n<|/ c |>\n<| c |>\nI believe that there\
    \ is an efficient way of doing this without recursion, but I haven't thought it\
    \ through yet. I'll post it here if I figure it out.\n<|/ c |>\n<| c |>\nI added\
    \ a solution without recursion.\n<|/ c |>\n<| c |>\nI added a solution without\
    \ recursion.\n<|/ c |>\n<| a dscore=2 |>\nI believe that there is an efficient\
    \ way of doing this without recursion, but I haven't thought it through yet. I'll\
    \ post it here if I figure it out.\n<code>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
