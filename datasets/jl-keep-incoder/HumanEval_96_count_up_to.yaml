name: HumanEval_96_count_up_to
language: julia
prompt: "\"\"\"Implement a function that takes an non-negative integer and returns\
  \ an array of the first n\n    integers that are prime numbers and less than n.\n\
  \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
  \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
  \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5)\
  \ == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2, 3,\
  \ 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\
  \t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) ==\
  \ Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47)\
  \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101)\
  \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
  \ 73, 79, 83, 89, 97])\nend\n"
completions: ["    if n < 1 \n        return Vector{Int64}() \n    else \n       \
    \ primes = primes_up_to_n(n) \n        primes = primes[primes <= n] \n       \
    \ primes = primes[primes <= n] \n        return primes \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an array of integers and returns the number of positive\
    \ integers less than or equal to each of the integers in the array.", "    if\
    \ n < 0\n        return Vector{Int64}()\n    end\n    \n    primes = primes_list(n)\n\
    \    \n    primes = primes[2:end]\n    \n    primes = primes[primes <= n]\n  \
    \  \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= ", "    if n < 2 \n        return Vector{Int64}()\
    \ \n    else \n        primes = primes_up_to_n(n) \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        prime", "    if n < 0\n\
    \        error(\"count_up_to: n must be non-negative\")\n    end\n    \n    primes\
    \ = prime_numbers(n)\n    \n    primes = primes[2:end]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = ", "    if n < 0 \n        return [] \n    else if\
    \ n == 0 \n        return [] \n    else \n        primes = prime_numbers(n) \n\
    \        prime_numbers_less_than = prime_numbers_less_than(n) \n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .< n] \n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .>= 2] \n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .<= n] \n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n] \n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n] \n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n] \n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n] \n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n] \n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n] \n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n] \n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n] \n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n] \n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n] \n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n] \n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n] \n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n] \n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n] \n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n] ", "    \n    if n\
    \ == 0\n        return Vector{}\n    end\n    \n    primes = prime_numbers(n)\n\
    \    \n    prime_numbers_less_than = prime_numbers_less_than(n)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n    \n    prime_numbers_less_than\
    \ = prime_", "    if n < 2\n        return Vector{}\n    end\n    \n    primes\
    \ = prime_numbers(n)\n    \n    primes = primes[2:end]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    ", "    if n < 2 \n     \
    \   return Vector{Int64}() \n    else \n        primes = primes_up_to_n(n) \n\
    \        prime_numbers = primes[2:end] \n        prime_numbers_less_than = prime_numbers[prime_numbers\
    \ < n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ < n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ != 0] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ != 0] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ != 0] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ != 0] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ != 0] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ != 0] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ != 0] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ != 0] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ != 0] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ != 0] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ != 0] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ != 0] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ != 0] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ != 0] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ != 0] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ != 0] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ != 0] \n        prime_numbers_less_", "    \n    if n < 0\n        error(\"\
    count_up_to only accepts non-negative integers\")\n    end\n    \n    primes =\
    \ prime_numbers(n)\n    \n    primes = primes[2:end]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    return primes\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(19)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(21)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(22)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(23)\n</cell>\n<code language=julia-1.5>\ncount_up_to(24)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(25)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(26)\n</cell>\n<code language=julia-1.5>\ncount_up_to(27)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(28)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(29)\n</cell>\n<code language=julia-1.5>\ncount_up_to(30)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(31)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(32)\n</cell>\n<code language=julia-1.5>\ncount_up_to(33)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(34)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(35)\n</cell>\n<code language=julia-1.5>\ncount_up_to(36)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(37)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(38)\n</cell>\n<code language=julia-1.5>\ncount_up_to(39)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(40)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(41)\n</cell>\n<code language=julia-", "    if n < 0 \n        error(\"\
    count_up_to only accepts non-negative integers\") \n    end\n    \n    primes\
    \ = prime_numbers(n)\n    \n    prime_array = []\n    \n    for p in primes\n\
    \        if p > n\n            break\n        end\n        \n        if p > n\n\
    \            prime_array = [p]\n            break\n        end\n        \n   \
    \     prime_array = [p for p in prime_array if p > p]\n    end\n    \n    return\
    \ prime_array\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nImplement a function that takes\
    \ an integer $n$ and returns the number of prime numbers less than or equal to\
    \ $n$.", "    if n < 2 \n        return [] \n    else \n        primes = prime_numbers(n)\
    \ \n        primes = primes[2:end] \n        primes = primes[primes <= n] \n \
    \       primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] ", "    if n < 0\n        return Vector{Int64}()\n\
    \    end\n    \n    primes = primes_list(n)\n    \n    prime_numbers = Vector{Int64}()\n\
    \    \n    for prime in primes\n        if prime < n\n            prime_numbers\
    \ = prime_numbers + [prime]\n        end\n    end\n    \n    prime_numbers = prime_numbers[2:end]\n\
    \    \n    prime_numbers = prime_numbers[prime_numbers .< n]\n    \n    return\
    \ prime_numbers\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an integer\
    \ $n$ and returns the number of prime numbers less than or equal to $n$. \nFor\
    \ example count_primes(5) => [2,3,5,7]\nHint: use the count_up_to function you\
    \ wrote earlier.", "    if n < 2 \n        return Vector{Int64}()\n    end\n \
    \   \n    primes = prime_numbers(n)\n    \n    prime_numbers = Vector{Int64}()\n\
    \    \n    for p in primes\n        if p > n\n            break\n        end\n\
    \        \n        if p % 2 == 0\n            prime_numbers = prime_numbers +\
    \ [p]\n        end\n    end\n    \n    prime_numbers = prime_numbers[prime_numbers\
    \ < n]\n    \n    return prime_numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<code language=julia-1.5>\ncount_up_to(19)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(21)\n</cell>\n<code language=julia-1.5>\ncount_up_to(22)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(23)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(24)\n</cell>\n<code language=julia-1.5>\ncount_up_to(25)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(26)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(27)\n</cell>\n<code language=julia-1.5>\ncount_up_to(28)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(29)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(30)\n</cell>\n<code language=julia-1.5>\ncount_up_to(31)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(32)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(33)\n</cell>\n<code language=julia-1.5>\ncount_up_to(34)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(35)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(36)\n</cell>\n<code language=julia-1.5>\ncount_up_to(37)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(38)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(39)\n</cell>\n<code language=julia-1.5>\ncount_up_to(40)\n</cell>",
  "    if n < 0\n        error(\"count_up_to only accepts non-negative integers\"\
    )\n    end\n    \n    primes = prime_numbers(n)\n    \n    count_up = []\n   \
    \ \n    for p in primes\n        if p > n\n            count_up = []\n       \
    \     break\n        end\n        if p <= n\n            count_up = count_up +\
    \ [p]\n        end\n    end\n    \n    return count_up\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes an array of integers and returns the number\
    \ of positive integers that are less than or equal to each of the integers in\
    \ the array.\nfor example:\ncount_positive([2,3,5,7,11,13,17]) => 3\ncount_positive([2,3,5,7,11,13,17,19])\
    \ => 4\ncount_positive([2,3,5,7,11,13,17,19,23,29,31]) => 5\ncount_positive([2,3,5,7,11,13,17,19,23,29,31,37])\
    \ => 6\ncount_positive([2,3,5,7,11,13,17,19,23,29,31,37,41]) => 7\ncount_positive([2,3,5,7,11,13,17,19,23,29,31,37,41,49])\
    \ => 8\ncount_positive([2,3,5,7,11,13,17,19,23,29,31,37,41,49,57]) => 9\ncount_positive([2,3,5,7,11,13,17,19,23,29,31,37,41,49,57,63,69])\
    \ => 10\ncount_positive([2,3,5,7,11,13,17,19,23,29,31,37,41,49,57,63,69,83,97])\
    \ => 11\ncount_positive([2,3,5,7,11,13,17,19,23,29,31,37,41,49,57,63,69,83,97,109,127])\
    \ => 12\ncount_positive([2,3,5,7,11,13,17,19,23,29,31,37,41,49,57,63,69,83,97,109,127,131])\
    \ => 13\ncount_positive([2,3,5,7,11,13,17,19,23,29,31,37,41,49,57,63,69,83,97,109,127,131,137,143,151])\
    \ => 14\ncount_positive([2,3,5,7,11,13,17,19,23,29,31,37,41,49,57,63,69,83,97,109,127,131,137,143,151,163])\
    \ => 15\ncount_positive([2,3,5,7,11,13,17,19,23,29,31,37,41,49,57,63,69,83,97,109,127,131,137,14",
  "    if n < 0\n        return Vector{Int64}()\n    end\n    \n    primes = prime_numbers(n)\n\
    \    \n    prime_numbers = Vector{Int64}()\n    \n    for p in primes\n      \
    \  if p > n\n            break\n        end\n        \n        if p % 2 == 0\n\
    \            continue\n        end\n        \n        prime_numbers = prime_numbers\
    \ + [p]\n    end\n    \n    prime_numbers = prime_numbers[2:end]\n    \n    return\
    \ prime_numbers\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 3\nWrite a function that takes an array\
    \ and returns the number of elements that are less than or equal to each element\
    \ in the array. For example:\n    count_less_than([1,2,3]) => 2\n    count_less_than([1,2,2,3])\
    \ => 3\n    count_less_than([1,2,3,4,5]) => 4\n    count_less_than([1,2]) => 1\n\
    \    count_less_than([1,3,5]) => 2\n    count_less_than([1,3,5,7]) => 3\n    count_less_than([1,3,5,7,11])\
    \ => 4\n    count_less_than([1,3,5,7,11,13]) => 5\n    count_less_than([1,3,5,7,11,13,17])\
    \ => 6\n    count_less_than([1,3,5,7,11,13,17,19]) => 7\n    count_less_than([1,3,5,7,11,13,17,19,23])\
    \ => 8\n    count_less_than([1,3,5,7,11,13,17,19,23,29]) => 9\n    count_less_than([1,3,5,7,11,13,17,19,23,29,31])\
    \ => 10\n    count_less_than([1,3,5,7,11,13,17,19,23,29,31,37]) => 11\n    count_less_than([1,3,5,7,11,13,17,19,23,29,31,37,41])\
    \ => 12\n    count_less_than([1,3,5,7,11,13,17,19,23,29,31,37,41,43]) => 13\n\
    \    count_less_than([1,3,5,7,11,13,17,19,23,29,31,37,41,43,47]) => 14\n    count_less_than([1,3,5,",
  "    count_up_to(n) = Vector{Int64}()\n    count_up_to(n) = count_up_to(n-1) + [n\
    \ for n in 1:n if prime_number(n)]\nend\n</cell>\n<code language=julia-1.4>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.4>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.4>\ncount_up_to(0)\n</cell>\n<code language=julia-1.4>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.4>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.4>\ncount_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an array and returns the number of elements that are not\
    \ equal to zero.", "    if n < 2 \n        return Vector{Int64}() \n    else \n\
    \        primes = primes_up_to_n(n) \n        prime_numbers = primes[2:end] \n\
    \        prime_numbers_less_than = primes[2:end-1] \n        prime_numbers_less_than[1]\
    \ = n \n        count_up_to(n) = prime_numbers_less_than ++ count_up_to(n-1) \n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(19)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(21)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(22)\n</cell>\n<code language=julia-1.5>\ncount_up_to(23)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(24)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(25)\n</cell>\n<code language=julia-1.5>\ncount_up_to(26)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(27)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(28)\n</cell>\n<code language=julia-1.5>\ncount_up_to(29)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(30)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(31)\n</cell>\n<code language=julia-1.5>\ncount_up_to(32)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(33)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(34)\n</cell>\n<code language=julia-1.5>\ncount_up_to(35)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(36)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(37)\n</cell>\n<code language=julia-1.5>\ncount_up_to(38)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(39)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(40)\n</cell>\n<code language=julia-1.5>\ncount_up_to(41)\n</cell>\n\
    <code language=julia-", "    if n < 0\n        error(\"count_up_to: n must be\
    \ non-negative\")\n    end\n    \n    primes = prime_list_generator(n)\n    primes\
    \ = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n\
    \    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n  \
    \  primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes\
    \ = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n\
    \    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n  \
    \  primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes\
    \ = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n\
    \    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n  \
    \  primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes\
    \ = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n\
    \    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n  \
    \  primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes\
    \ = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n\
    \    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n  \
    \  primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes\
    \ = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n\
    \    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n  \
    \  primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes\
    \ = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n\
    \    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n  \
    \  primes = primes[2:end]\n    \n    primes = ", "    if n == 0\n        Vector{}\n\
    \    else\n        primes = primes_upto(n)\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = ", "    if n < 0\n        error(\"count_up_to: n must be\
    \ non-negative\")\n    end\n    \n    primes = primes_up_to(n)\n    \n    counts\
    \ = Vector{Int64}()\n    for p in primes\n        if p > n\n            push!(counts,\
    \ 0)\n        else\n            push!(counts, 1)\n        end\n    end\n    \n\
    \    return counts\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<code language=julia-1.5>\ncount_up_to(100)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(10000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(100000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(1000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(10000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(100000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(10000000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(100000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(1000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(100000000000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(10000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1000000000000000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1000000000000000000000)\n</cell>\n<code\
    \ language=juli", "    if n < 2 \n        return [] \n    else \n        primes\
    \ = prime_list_upto(n) \n        prime_sum = 0\n        prime_sums = prime_sum\n\
    \        for prime in primes \n            if prime > n \n                break\
    \ \n            else \n                prime_sum += prime \n                prime_sums\
    \ = prime_sum + prime\n        prime_sums = prime_sum - prime_sums\n        prime_sums\
    \ = prime_sums / prime_sum\n        prime_sums = prime_sums - 1\n        prime_sums\
    \ = prime_sums / prime_sum\n        prime_sums = prime_sums - 1\n        prime_sums\
    \ = prime_sums / prime_sum\n        prime_sums = prime_sums - 1\n        prime_sums\
    \ = prime_sums / prime_sum\n        prime_sums = prime_sums - 1\n        prime_sums\
    \ = prime_sums / prime_sum\n        prime_sums = prime_sums - 1\n        prime_sums\
    \ = prime_sums / prime_sum\n        prime_sums = prime_sums - 1\n        prime_sums\
    \ = prime_sums / prime_sum\n        prime_sums = prime_sums - 1\n        prime_sums\
    \ = prime_sums / prime_sum\n        prime_sums = prime_sums - 1\n        prime_sums\
    \ = prime_sums / prime_sum\n        prime_sums = prime_sums - 1\n        prime_sums\
    \ = prime_sums / prime_sum\n        prime_sums = prime_sums - 1\n        prime_sums\
    \ = prime_sums / prime_sum\n        prime_sums = prime_sums - 1\n        prime_sums\
    \ = prime_sums / prime_sum\n        prime_sums = prime_sums - 1\n        prime_sums\
    \ = prime_sums / prime_sum\n        prime_sums = prime_sums - 1\n        prime_sums\
    \ = prime_sums / prime_sum\n        prime_sums = prime_sums - 1\n        prime_sums\
    \ = prime_sums / prime_sum\n        prime_sums = prime_sums - 1\n        prime_sums\
    \ = prime_sums / prime_sum\n        prime_sums = prime_sums - 1\n        prime_sums\
    \ = prime_sums / prime_sum\n        prime_sums = prime_sums - 1\n        prime_sums\
    \ = prime_sums / prime_sum\n        prime_sums = prime_sum", "    if n == 0 \n\
    \        return Vector{Int64}() \n    else \n        primes = primes_up_to_n(n)\
    \ \n        prime_numbers = primes[2:end] \n        prime_numbers_less_than =\
    \ primes[2:end] - primes[1:end-1] \n        prime_numbers_less_than = prime_numbers_less_than[1:end-1]\
    \ \n        prime_numbers_less_than = prime_numbers_less_than .+ prime_numbers[1:end-1]\
    \ \n        prime_numbers_less_than = prime_numbers_less_than .+ primes[1:end-1]\
    \ \n        prime_numbers_less_than = prime_numbers_less_than .+ primes[1:end-1]\
    \ \n        prime_numbers_less_than = prime_numbers_less_than .+ primes[1:end-1]\
    \ \n        prime_numbers_less_than = prime_numbers_less_than .+ primes[1:end-1]\
    \ \n        prime_numbers_less_than = prime_numbers_less_than .+ primes[1:end-1]\
    \ \n        prime_numbers_less_than = prime_numbers_less_than .+ primes[1:end-1]\
    \ \n        prime_numbers_less_than = prime_numbers_less_than .+ primes[1:end-1]\
    \ \n        prime_numbers_less_than = prime_numbers_less_than .+ primes[1:end-1]\
    \ \n        prime_numbers_less_than = prime_numbers_less_than .+ primes[1:end-1]\
    \ \n        prime_numbers_less_than = prime_numbers_less_than .+ primes[1:end-1]\
    \ \n        prime_numbers_less_than = prime_numbers_less_than .+ primes[1:end-1]\
    \ \n        prime_numbers_less_than = prime_numbers_less_than .+ primes[1:end-1]\
    \ \n        prime_numbers_less_than = prime_numbers_less_than .+ primes[1:end-1]\
    \ \n        prime_numbers_less_than = prime_numbers_less_than .+ primes[1:end-1]\
    \ \n        prime_numbers_less_than = prime_numbers_less_than .+ primes[1:end-1]\
    \ \n        prime_numbers_less_than = prime_numbers_less_than .+ primes[1:end-1]\
    \ \n        prime_numbers_less_than = prime_numbers_less_than .+ primes[1:end-1]\
    \ \n        prime_numbers_less_than = prime_numbers_less_than .+ primes[1:end-1]\
    \ \n        prime_numbers_less_than = prime_numbers_less_than .+ prime", "   \
    \ if n < 2\n        return Vector{Int64}()\n    end\n    \n    primes = primes_up_to_n(n)\n\
    \    \n    prime_numbers = Vector{Int64}()\n    \n    for p in primes\n      \
    \  if p > n\n            break\n        end\n        \n        prime_numbers =\
    \ push!(prime_numbers, p)\n    end\n    \n    return prime_numbers\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an array of integers and returns\
    \ the number of positive integers in it.", "    count_up_to = []\n    if n <=\
    \ 0\n        count_up_to\n    else\n        count_up_to += prime_numbers(n)\n\
    \        count_up_to += count_up_to(n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes an array of integers and returns the number of prime numbers\
    \ less than or equal to the given number.", "    if n == 0 \n        return Vector{Int64}()\
    \ \n    else \n        primes = prime_list_upto(n) \n        primes = primes[2:end]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = prime", "    if n\
    \ < 0\n        return Vector{Int64}()\n    end\n    \n    primes = prime_numbers(n)\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[", "    count_up_to = []\n    for i = 2 to n\n    \
    \    if prime_number(i)\n            count_up_to += [i]\n        end\n    end\n\
    \    return count_up_to\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(19)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(21)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(22)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(23)\n</cell>\n<code language=julia-1.5>\ncount_up_to(24)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(25)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(26)\n</cell>\n<code language=julia-1.5>\ncount_up_to(27)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(28)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(29)\n</cell>\n<code language=julia-1.5>\ncount_up_to(30)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(31)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(32)\n</cell>\n<code language=julia-1.5>\ncount_up_to(33)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(34)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(35)\n</cell>\n<code language=julia-1.5>\ncount_up_to(36)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(37)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(38)\n</cell>\n<code language=julia-1.5>\ncount_up_to(39)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(40)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(41)\n</cell>\n<code language=julia-1.5>\ncount_up_to(42)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(43)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(44)\n</cell>\n<code language=julia-1.5>", "    if n < 2\n        return\
    \ Vector{Int64}()\n    end\n    \n    primes = prime_numbers(n)\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[", "    if n == 0\n        Vector{Int64}()\n    else\n        count_up_to(n-1)\
    \ + [n isprime]\n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n\
    <code>", "    if n == 0\n        Vector{}\n    else\n        primes = primes_upto(n)\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = ", "    if n == 0\n  \
    \      return Vector{Int64}()\n    \n    primes = prime_numbers(n)\n    \n   \
    \ primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n\
    \    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n  \
    \  \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes ", "    \n    if n == 0\n        return Vector{Int64}()\n\
    \    end\n    \n    primes = primes_up_to(n)\n    \n    prime_numbers = Vector{Int64}()\n\
    \    \n    for prime in primes\n        if prime < n\n            push!(prime_numbers,\
    \ prime)\n        end\n    end\n    \n    prime_numbers = prime_numbers[2:end]\n\
    \    \n    return prime_numbers\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(19)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(21)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(22)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(23)\n</cell>\n<code language=julia-1.5>\ncount_up_to(24)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(25)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(26)\n</cell>\n<code language=julia-1.5>\ncount_up_to(27)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(28)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(29)\n</cell>\n<code language=julia-1.5>\ncount_up_to(30)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(31)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(32)\n</cell>\n<code language=julia-1.5>\ncount_up_to(33)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(34)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(35)\n</cell>\n<code language=julia-1.5>\ncount_up_to(36)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(37)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(38)\n</cell>\n<code language=julia-1.5>\ncount_up_to(39)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(40)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(41)\n</", "    if n == 0 \n        return Vector{Int64}()\n    else\
    \ if n == 1 \n        return [1]\n    else \n        primes = prime_numbers(n)\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]",
  "    if n < 0\n        error(\"count_up_to only accepts non-negative integers\"\
    )\n    end\n    \n    primes = primes_list(n)\n    \n    prime_numbers = Vector{Int64}()\n\
    \    \n    for p in primes\n        if p > n\n            push!(prime_numbers,\
    \ p)\n        end\n    end\n    \n    prime_numbers = prime_numbers[2:end]\n \
    \   \n    prime_numbers = prime_numbers[prime_numbers .<= n]\n    \n    return\
    \ prime_numbers\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a positive\
    \ integer $n$ and returns the number of prime numbers less than or equal to $n$.\
    \ \nFor example count_primes(5) => 3 because there are 3 prime numbers less than\
    \ or equal to 5.", "    if n < 2\n        return Vector{Int64}()\n    end\n  \
    \  primes = primes_up_to_n(n)\n    primes = primes[2:end]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n", "    if n < 2\n        return Vector{Int64}()\n  \
    \  end\n    primes = primes_list(n)\n    primes_less_than = primes[primes..<n]\n\
    \    primes_less_than = primes_less_than[primes_less_than.!=n]\n    primes_less_than\
    \ = primes_less_than[primes_less_than .!= n]\n    primes_less_than = primes_less_than[primes_less_than\
    \ .!= n]\n    primes_less_than = primes_less_than[primes_less_than .!= n]\n  \
    \  primes_less_than = primes_less_than[primes_less_than .!= n]\n    primes_less_than\
    \ = primes_less_than[primes_less_than .!= n]\n    primes_less_than = primes_less_than[primes_less_than\
    \ .!= n]\n    primes_less_than = primes_less_than[primes_less_than .!= n]\n  \
    \  primes_less_than = primes_less_than[primes_less_than .!= n]\n    primes_less_than\
    \ = primes_less_than[primes_less_than .!= n]\n    primes_less_than = primes_less_than[primes_less_than\
    \ .!= n]\n    primes_less_than = primes_less_than[primes_less_than .!= n]\n  \
    \  primes_less_than = primes_less_than[primes_less_than .!= n]\n    primes_less_than\
    \ = primes_less_than[primes_less_than .!= n]\n    primes_less_than = primes_less_than[primes_less_than\
    \ .!= n]\n    primes_less_than = primes_less_than[primes_less_than .!= n]\n  \
    \  primes_less_than = primes_less_than[primes_less_than .!= n]\n    primes_less_than\
    \ = primes_less_than[primes_less_than .!= n]\n    primes_less_than = primes_less_than[primes_less_than\
    \ .!= n]\n    primes_less_than = primes_less_than[primes_less_than .!= n]\n  \
    \  primes_less_than = primes_less_than[primes_less_than .!= n]\n    primes_less_than\
    \ = primes_less_than[primes_less_than .!= n]\n    primes_less_than = primes_less_than[primes_less_than\
    \ .!= n]\n    primes_less_than = primes_less_than[primes_less_than .!= n]\n  \
    \  primes_less_than = primes_less_than[primes_less_than .!= n]\n    ", "    count_up_to(n)\
    \ = Vector{Int64}()\n    if n == 0\n        count_up_to(n) = Vector{Int64}()\n\
    \        return count_up_to(n)\n    end\n    count_up_to(n) = count_up_to(n-1)\
    \ + [Int64(n)]\n    for x in count_up_to(n-1)\n        if x % 2 != 0\n       \
    \     count_up_to(n) = count_up_to(n-1) + [Int64(x)]\n        end\n    end\n \
    \   return count_up_to(n)\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(19)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(21)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(22)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(23)\n</cell>\n<code language=julia-1.5>\ncount_up_to(24)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(25)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(26)\n</cell>\n<code language=julia-1.5>\ncount_up_to(27)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(28)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(29)\n</cell>\n<code language=julia-1.5>\ncount_up_to(30)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(31)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(32)\n</cell>\n<code language=julia-1.5>\ncount_up_to(33)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(34)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(35)\n</cell>\n<code language=julia-1.5>\ncount_up_to(36)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(37)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(38)\n</cell>\n<code language=julia-1.5>\ncount_up_to(39)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(40)\n</cell>\n<code language=julia-", " \
    \   if n == 0\n        return Vector{Int64}()\n    elseif n < 0\n        error(\"\
    count_up_to only accepts non-negative integers\")\n    else\n        primes =\
    \ primes_up_to_n(n)\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        return primes\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an integer $n$ and returns the number of prime numbers\
    \ less than or equal to $n$. \nFor example count_primes(5) => 2\ncount_primes(11)\
    \ => 3\ncount_primes(0) => 0\ncount_primes(20) => 4\ncount_primes(1) => 1\ncount_primes(18)\
    \ => 2", "    if n == 0 \n        Vector{Int64}() \n    else \n        count_up_to(n\
    \ - 1)\n        push!(count_up_to(n), n)\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes an integer $n$ and returns the number of prime\
    \ numbers less than or equal to $n$. \nFor example count_primes(5) => 2.", " \
    \   if n < 0\n        error(\"count_up_to: n must be non-negative\")\n    end\n\
    \    \n    primes = prime_numbers(n)\n    \n    counts = Vector{Int64}()\n   \
    \ \n    for p in primes\n        if p > n\n            break\n        end\n  \
    \      \n        if p > 1\n            push!(counts, p)\n        end\n    end\n\
    \    \n    counts\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an integer\
    \ $n$ and returns the number of prime numbers less than or equal to $n$. \nFor\
    \ example count_primes(5) => 3\ncount_primes(11) => 5\ncount_primes(0) => 0\n\
    count_primes(20) => 5\ncount_primes(1) => 1\ncount_primes(18) => 5", "    if n\
    \ < 0\n        error(\"count_up_to: n must be non-negative\")\n    end\n    \n\
    \    primes = primes_up_to_n(n)\n    \n    count_up_to = []\n    for p in primes\n\
    \        if p <= n\n            count_up_to += [p]\n        end\n    end\n   \
    \ \n    return count_up_to\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<code language=julia-1.5>\ncount_up_to(100)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(10000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(100000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(1000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(10000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(100000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(10000000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(100000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(1000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(100000000000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(10000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1000000000000000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1000000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(10000000000000000000000)", "    count_up_to(n)\
    \ = Vector{Int64}()\n    if n < 0\n        return count_up_to(0)\n    end\n  \
    \  \n    if n == 0\n        return count_up_to(1)\n    end\n    \n    if n ==\
    \ 1\n        return count_up_to(1)\n    end\n    \n    count_up_to(n-1) = count_up_to(n-1)\
    \ + [Int64(n)]\n    \n    for i in 2:(n-1)\n        if isPrime(Int(i)) && isPrime(Int(n-1))\n\
    \            count_up_to(n) = count_up_to(n-1) + [Int64(i)]\n        end\n   \
    \ end\n    \n    return count_up_to(n)\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<code language=julia-1.5>\ncount_up_to(19)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(21)\n</cell>\n<code language=julia-1.5>\ncount_up_to(22)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(23)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(24)\n</cell>\n<code language=julia-1.5>\ncount_up_to(25)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(26)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(27)\n</cell>\n<code language=julia-1.5>\ncount_up_to(28)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(29)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(30)\n</cell>\n<code language=julia-1.5>\ncount_up_to(31)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(32)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(33)\n</cell>\n<code language=julia-1.5>\ncount_up_to(34)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(35)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(36)\n</cell>\n<code language=julia-1.5>\ncount_up_to(37)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(38)\n</cell>\n<code language=julia-1.5>",
  "    count_up_to(n) = Vector{Int64}()\n    if n < 0\n        return count_up_to(0)\n\
    \    end\n    \n    count_up_to(n) = count_up_to(n-1) + [Int64(n)]\n    \n   \
    \ for x in count_up_to(n-1)\n        if x % 2 != 0\n            count_up_to(n)\
    \ = count_up_to(n-1) + [Int64(x)]\n        end\n    end\n    \n    return count_up_to(n)\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(19)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(21)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(22)\n</cell>\n<code language=julia-1.5>\ncount_up_to(23)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(24)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(25)\n</cell>\n<code language=julia-1.5>\ncount_up_to(26)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(27)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(28)\n</cell>\n<code language=julia-1.5>\ncount_up_to(29)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(30)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(31)\n</cell>\n<code language=julia-1.5>\ncount_up_to(32)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(33)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(34)\n</cell>\n<code language=julia-1.5>\ncount_up_to(35)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(36)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(37)\n</cell>\n<code language=julia-1.5>\ncount_up_to(38)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(39)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(40)\n</cell>\n<code language=julia-1.5>\ncount_up_to(4", "    if n\
    \ < 2 \n        return Vector{Int64}() \n    else \n        primes = primes_up_to_n(n)\
    \ \n        primes_less_than = primes[2:end] \n        primes_less_than = primes_less_than[primes_less_than\
    \ .< n] \n        primes_less_than = primes_less_than[primes_less_than .> n] \n\
    \        primes_less_than = primes_less_than - primes[2:end] \n        primes_less_than\
    \ = primes_less_than .+ 1 \n        primes_less_than = primes_less_than .+ 1 \n\
    \        primes_less_than = primes_less_than .+ 1 \n        primes_less_than =\
    \ primes_less_than .+ 1 \n        primes_less_than = primes_less_than .+ 1 \n\
    \        primes_less_than = primes_less_than .+ 1 \n        primes_less_than =\
    \ primes_less_than .+ 1 \n        primes_less_than = primes_less_than .+ 1 \n\
    \        primes_less_than = primes_less_than .+ 1 \n        primes_less_than =\
    \ primes_less_than .+ 1 \n        primes_less_than = primes_less_than .+ 1 \n\
    \        primes_less_than = primes_less_than .+ 1 \n        primes_less_than =\
    \ primes_less_than .+ 1 \n        primes_less_than = primes_less_than .+ 1 \n\
    \        primes_less_than = primes_less_than .+ 1 \n        primes_less_than =\
    \ primes_less_than .+ 1 \n        primes_less_than = primes_less_than .+ 1 \n\
    \        primes_less_than = primes_less_than .+ 1 \n        primes_less_than =\
    \ primes_less_than .+ 1 \n        primes_less_than = primes_less_than .+ 1 \n\
    \        primes_less_than = primes_less_than .+ 1 \n        primes_less_than =\
    \ primes_less_than .+ 1 \n        primes_less_than = primes_less_than .+ 1 \n\
    \        primes_less_than = primes_less_than .+ 1 \n        primes_less_than =\
    \ primes_less_than .+ 1 \n        primes_less_than = primes_less_than .+ 1 \n\
    \        primes_less_than = primes_less_than .+ 1 \n        primes_less_than =\
    \ primes_less_than .+ 1 \n        primes_less_than = primes_less_than .+ 1 \n\
    \        primes_less_than = primes_less_than .", "    if n < 0\n        return\
    \ Vector{Int64}()\n    end\n    \n    primes = prime_numbers(n)\n    \n    prime_numbers_less_than\
    \ = primes[primes..<n]\n    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x\
    \ -> x != 1)\n    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x\
    \ -> x != n)\n    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x\
    \ -> x != n)\n    \n    return prime_numbers_less_than\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(100)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1000)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(10000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(100000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(10000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(100000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(100000000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(10000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(100000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1000000000000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(10000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(100000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1000000000000000000)\n</cell>\n<code language=julia-1.5>\n",
  "    if n < 0 \n        return [] \n    else if n == 0 \n        return [] \n  \
    \  else if n == 1 \n        return [1] \n    else \n        primes = prime_numbers(n)\
    \ \n        primes_less_than = primes[primes..] < n \n        primes_less_than\
    \ = primes_less_than[primes_less_than.!.] \n        primes_less_than = primes_less_than[primes_less_than.!.]\
    \ \n        primes_less_than = primes_less_than[primes_less_than.!.] \n      \
    \  primes_less_than = primes_less_than[primes_less_than.!.] \n        primes_less_than\
    \ = primes_less_than[primes_less_than.!.] \n        primes_less_than = primes_less_than[primes_less_than.!.]\
    \ \n        primes_less_than = primes_less_than[primes_less_than.!.] \n      \
    \  primes_less_than = primes_less_than[primes_less_than.!.] \n        primes_less_than\
    \ = primes_less_than[primes_less_than.!.] \n        primes_less_than = primes_less_than[primes_less_than.!.]\
    \ \n        primes_less_than = primes_less_than[primes_less_than.!.] \n      \
    \  primes_less_than = primes_less_than[primes_less_than.!.] \n        primes_less_than\
    \ = primes_less_than[primes_less_than.!.] \n        primes_less_than = primes_less_than[primes_less_than.!.]\
    \ \n        primes_less_than = primes_less_than[primes_less_than.!.] \n      \
    \  primes_less_than = primes_less_than[primes_less_than.!.] \n        primes_less_than\
    \ = primes_less_than[primes_less_than.!.] \n        primes_less_than = primes_less_than[primes_less_than.!.]\
    \ \n        primes_less_than = primes_less_than[primes_less_than.!.] \n      \
    \  primes_less_than = primes_less_than[primes_less_than.!.] \n        primes_less_than\
    \ = primes_less_than[primes_less_than.!.] \n        primes_less_than = primes_less_than[primes_less_than.!.]\
    \ \n        primes_less_than = primes_less_than[primes_less_than.!.] \n", "  \
    \  if n == 0 \n        return Vector{Int64}() \n    else \n        primes = prime_numbers(n)\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = ", "    if n == 0 \n        return Vector{Int64}()\n    else\
    \ if n == 1 \n        return Vector{Int64}(1)\n    else \n        primes = prime_numbers(n)\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = prime", "    if n < 2\
    \ \n        return Vector{Int64}() \n    else \n        count_up_to(n-1) + [Int64(n)]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(19)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an integer\
    \ $n$ and returns the number of prime numbers less than or equal to $n$. \nFor\
    \ example count_primes(5) => 3\ncount_primes(11) => 5\ncount_primes(0) => 0\n\
    count_primes(20) => 5\ncount_primes(1) => 1\ncount_primes(18) => 4\ncount_primes(19)\
    \ => 5\nHint: Use a for loop and a boolean to keep track of whether a number is\
    \ prime or not.", "    count_up_to(n) = Vector{Int64}()\n    if n == 0\n     \
    \   return count_up_to(0)\n    end\n    if n == 1\n        return count_up_to(1)\n\
    \    end\n    if n % 2 == 0\n        count_up_to(n / 2)\n    end\n    for i =\
    \ 3; i * i <= n; i = i + 2\n        if n % i == 0\n            count_up_to(n /\
    \ i)\n        end\n    end\n    return count_up_to(n)\nend\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.0>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.0>\ncount_up_to(0)\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.0>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.0>\ncount_up_to(18)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes an integer $n$ and returns the number of prime numbers\
    \ less than or equal to $n$.", "    if n < 0\n        error(\"count_up_to only\
    \ accepts non-negative integers\")\n    end\n    \n    primes = primes_list(n)\n\
    \    \n    prime_numbers = Vector{Int64}()\n    \n    for prime in primes\n  \
    \      if prime > n\n            prime_numbers = prime_numbers + [prime]\n   \
    \     end\n    end\n    \n    prime_numbers = prime_numbers + [Int64(n)]\n   \
    \ \n    prime_numbers = prime_numbers[2:end]\n    \n    return prime_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an array of integers and returns\
    \ the number of integers in the array that are less than or equal to n.", "  \
    \  if n < 2 \n        return Vector{Int64}() \n    else \n        primes = prime_numbers(n)\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = ", "    if n < 2 \n        return Vector{Int64}()\n    end\n\
    \    \n    primes = prime_numbers(n)\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[", "    if\
    \ n < 0\n        return Vector{}\n    end\n    \n    primes = primes_up_to_n(n)\n\
    \    \n    count_up_to = []\n    \n    for p in primes\n        if p > n\n   \
    \         break\n        end\n        \n        count_up_to += [p]\n    end\n\
    \    \n    return count_up_to\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an integer\
    \ $n$ and returns the number of prime numbers less than $n$. \nFor example count_primes(5)\
    \ => 2\ncount_primes(11) => 4\ncount_primes(0) => 0\ncount_primes(20) => 5\ncount_primes(1)\
    \ => 1\ncount_primes(18) => 2", "    if n < 2\n        return Vector{Int64}()\n\
    \    end\n    \n    primes = primes_list(n)\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[prime",
  "    if n == 0\n        Vector{Int64}()\n    else\n        primes = primes_up_to_n(n)\n\
    \        prime_numbers = primes[2:end]\n        prime_numbers_less_than = prime_numbers[prime_numbers\
    \ < n]\n        prime_numbers_less_than\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an array of integers and returns the number of positive\
    \ integers that are less than or equal to each of the integers in the array.\n\
    \    for example:\n    count_less_than([2,3,5,7,11,13,17]) => 4\n    count_less_than([2,3,5,7,11,13,17,19])\
    \ => 5\n    count_less_than([2,3,5,7,11,13,17,19,23,29]) => 6\n    count_less_than([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97])\
    \ => 10\n    count_less_than([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199])\
    \ => 12\n    count_less_than([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,",
  "    if n < 0 \n        return Vector{Int64}() \n    else \n        primes = prime_numbers(n)\
    \ \n        primes = primes[2:end] \n        primes = primes[primes <= n] \n \
    \       return primes \n    end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(19)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(21)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(22)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(23)\n</cell>\n<code language=julia-1.5>\ncount_up_to(24)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(25)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(26)\n</cell>\n<code language=julia-1.5>\ncount_up_to(27)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(28)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(29)\n</cell>\n<code language=julia-1.5>\ncount_up_to(30)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(31)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(32)\n</cell>\n<code language=julia-1.5>\ncount_up_to(33)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(34)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(35)\n</cell>\n<code language=julia-1.5>\ncount_up_to(36)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(37)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(38)\n</cell>\n<code language=julia-1.5>\ncount_up_to(39)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(40)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(41)\n</cell>\n<code language=julia-1.5>\ncount_up_to(42)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(43)\n</cell>\n<code language=julia-1.5",
  "    if n < 2 \n        return [] \n    else \n        primes = primes_up_to_n(n)\
    \ \n        primes = primes[2:end] \n        primes = primes[primes <= n] \n \
    \       primes = primes[primes <= n] \n        return primes \n    end\nend\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an array of integers and returns\
    \ the number of positive integers that are less than or equal to each of the integers\
    \ in the array. \nFor example \n    count_less_than([1,3,5,7,9]) should return\
    \ [2,1,0,1]\n    count_less_than([1,3,5,7,9,11]) should return [2,1,1,1]\n   \
    \ count_less_than([1,3,5,7,9,11,13]) should return [2,1,1,1,1]\n    count_less_than([1,3,5,7,9,11,13,17])\
    \ should return [2,1,1,1,1,1]\n    count_less_than([1,3,5,7,9,11,13,17,19]) should\
    \ return [2,1,1,1,1,1,1]\n    count_less_than([1,3,5,7,9,11,13,17,19,21]) should\
    \ return [2,1,1,1,1,1,1,1]\n    count_less_than([1,3,5,7,9,11,13,17,19,21,23])\
    \ should return [2,1,1,1,1,1,1,1,1]\n    count_less_than([1,3,5,7,9,11,13,17,19,21,23,25])\
    \ should return [2,1,1,1,1,1,1,1,1]\n    count_less_than([1,3,5,7,9,11,13,17,19,21,23,25,27])\
    \ should return [2,1,1,1,1,1,1,1,1]\n    count_less_than([1,3,5,7,9,11,13,17,19,21,23,25,27,29])\
    \ should return [2,1,1,1,1,1,1,1,1]\n    count_less_than([1,3,5,7,9,11,13,17,19,21,23,25,27,29,31])\
    \ should return [2,1,1,1,1,1,1,1,1]\n    count_less_than([1,3,5,7,9,11,13,17,19,21,23,25,27,29,31,33])\
    \ should return [2,1,1,1,1,1,1,1,1]\n    count_less_than([1,3,5,7,9,11,13,17,19,21,23,25,27,29,31,33,35])\
    \ should return [", "    if n < 2 \n        return Vector{Int64}() \n    else\
    \ \n        primes = primes_up_to_n(n) \n        primes_less_than = primes[2:end]\
    \ \n        primes_less_than = primes_less_than .+ primes[1] \n        count_up_to(n-1)\
    \ \n    end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an array\
    \ of integers and returns the number of positive integers in the array.", "  \
    \  count_up_to = []\n    if n <= 0\n        count_up_to\n    else\n        count_up_to\
    \ += prime_numbers(n)\n        count_up_to += count_up_to(n-1)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(19)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(21)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(22)\n</cell>\n<code language=julia-1.5>\ncount_up_to(23)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(24)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(25)\n</cell>\n<code language=julia-1.5>\ncount_up_to(26)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(27)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(28)\n</cell>\n<code language=julia-1.5>\ncount_up_to(29)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(30)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(31)\n</cell>\n<code language=julia-1.5>\ncount_up_to(32)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(33)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(34)\n</cell>\n<code language=julia-1.5>\ncount_up_to(35)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(36)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(37)\n</cell>\n<code language=julia-1.5>\ncount_up_to(38)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(39)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(40)\n</cell>\n<code language=julia-1.5>\ncount_up_to(41)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(42)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(43)\n</cell>\n<code language=julia-1.5>\ncount_up_to(44)\n</", " \
    \   if n < 0 \n        error(\"count_up_to: n must be non-negative\")\n    else\
    \ if n == 0 \n        Vector{}\n    else \n        primes = prime_numbers(n)\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = prime", "    if n == 0\
    \ \n        Vector{Int64}() \n    else \n        count_up_to(n-1) + [Int64(n)]\n\
    \    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,primes |>\n<code>",
  "    if n == 0\n        Vector{Int64}()\n    else\n        primes = prime_numbers(n)\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]", "    if n < 0\n        error(\"count_up_to\
    \ only accepts non-negative integers\")\n    end\n    \n    primes = primes_list(n)\n\
    \    \n    primes = primes[2:end]\n    \n    primes = primes[primes <= n]\n  \
    \  \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = prime", "    \n    primes = prime_numbers(n)\n    \n    count_up\
    \ = Vector{Int64}()\n    \n    for p in primes\n        if p <= n\n          \
    \  count_up += primes[p+1:n]\n        end\n    end\n    \n    return count_up\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(19)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(21)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(22)\n</cell>\n<code language=julia-1.5>\ncount_up_to(23)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(24)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(25)\n</cell>\n<code language=julia-1.5>\ncount_up_to(26)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(27)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(28)\n</cell>\n<code language=julia-1.5>\ncount_up_to(29)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(30)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(31)\n</cell>\n<code language=julia-1.5>\ncount_up_to(32)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(33)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(34)\n</cell>\n<code language=julia-1.5>\ncount_up_to(35)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(36)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(37)\n</cell>\n<code language=julia-1.5>\ncount_up_to(38)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(39)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(40)\n</cell>\n<code language=julia-1.5>\ncount_up_to(41)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(42)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(43)\n</cell>", "    \n    if n == 0\n        Vector{Int64}()\n   \
    \ else\n        primes = prime_numbers(n)\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes ", "   \
    \ if n < 2\n        return Vector{Int64}()\n    end\n    \n    primes = primes_up_to(n)\n\
    \    \n    counts = Vector{Int64}()\n    \n    for p in primes\n        if p >\
    \ n\n            break\n        end\n        counts[p] += 1\n    end\n    \n \
    \   return counts\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nImplement a function that takes\
    \ an integer $n$ and returns the number of prime numbers less than or equal to\
    \ $n$.", "    if n < 0 \n        return [] \n    else if n == 0 \n        return\
    \ Vector{Int64}() \n    else \n        primes = prime_numbers(n) \n        primes\
    \ = primes[2:end] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes ", "    if n < 2\n        return Vector{Int64}()\n\
    \    end\n    primes = prime_numbers(n)\n    primes = primes[primes <= n]\n  \
    \  primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]", "    if n < 0 \n        error(\"count_up_to:\
    \ n must be non-negative\")\n    end\n    \n    primes = primes_up_to_n(n)\n \
    \   \n    prime_numbers = Vector{Int64}()\n    \n    for p in primes\n       \
    \ if p > n\n            push!(prime_numbers, p)\n        end\n    end\n    \n\
    \    prime_numbers = prime_numbers[2:end]\n    \n    return prime_numbers\nend\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes an integer $n$ and returns the\
    \ number of prime numbers less than or equal to $n$. \nFor example count_primes(5)\
    \ => 3\ncount_primes(11) => 5\ncount_primes(0) => 0\ncount_primes(20) => 5\ncount_primes(1)\
    \ => 1\ncount_primes(18) => 4", "    if n == 0 \n        return Vector{Int64}()\
    \ \n    else \n        primes = primes_upto(n) \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = ", "    count_up_to\
    \ = []\n    if n == 0\n        count_up_to\n    else\n        count_up_to += prime_numbers(n)\n\
    \        count_up_to += count_up_to(n - prime_numbers(n))\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes an array of integers and returns\
    \ the number of positive integers in it.", "    if n == 0\n        Vector{Int64}()\n\
    \    else\n        primes = prime_numbers(n)\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]", "    if n < 2 \n        return Vector{Int64}() \n    else \n        count_up_to(n-1)\
    \ + [Int64(n)]\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes an array and returns the number of elements that are less than or equal\
    \ to each element in the array.\n    for example:\n    count_less_than([2,3,5,7,11,13,17])\
    \ => [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17,19]) => [2,3,5,7,11,13,17]\n\
    \    count_less_than([2,3,5,7,11,13,17,19,21]) => [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17,19,21,23])\
    \ => [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17,19,21,23,25]) =>\
    \ [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17,19,21,23,25,27]) =>\
    \ [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17,19,21,23,25,27,29])\
    \ => [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17,19,21,23,25,27,29,31])\
    \ => [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17,19,21,23,25,27,29,31,33])\
    \ => [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17,19,21,23,25,27,29,31,33,35])\
    \ => [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17,19,21,23,25,27,29,31,33,35,37])\
    \ => [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17,19,21,23,25,27,29,31,33,35,37,39])\
    \ => [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17,19,21,23,25,27,29,31,33,35,37,39,41])\
    \ => [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17,19,21,23,25,27,29,31,33,35,37,39,41,43])\
    \ => [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17,19,21,23,25,27,29,",
  "    if n < 2 \n        return Vector{Int64}() \n    else \n        primes = prime_numbers(n)\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = ", "    if n < 0\n        return Vector{Int64}()\n    end\n\
    \    \n    primes = prime_numbers(n)\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[", "    if\
    \ n == 0\n        Vector{Int64}()\n    else\n        primes = primes_up_to_n(n)\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= ", "    if n < 0\n        error(\"count_up_to\
    \ only accepts non-negative integers\")\n    end\n    \n    primes = prime_numbers(n)\n\
    \    \n    prime_numbers_less_than = prime_numbers_less_than(n)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x -> x != 1)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x -> x != 2)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x -> x != 3)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x -> x != 5)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x -> x != 7)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x -> x != 11)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x -> x != 13)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x -> x != 17)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x -> x != 19)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x -> x != 25)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x -> x != 31)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x -> x != 37)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x -> x != 43)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x -> x != 49)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x -> x != 57)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x -> x != 63)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x -> x != 71)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x -> x != 79)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x -> x != 89)", "    \n    if n == 0\n    \
    \    Vector{}\n    else\n        primes = prime_numbers(n)\n        primes = primes[2:end]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = ", "    if n < 2\n        return Vector{Int64}()\n    end\n\
    \    \n    primes = prime_numbers(n)\n    \n    prime_numbers = Vector{Int64}()\n\
    \    \n    for p in primes\n        if p <= n\n            prime_numbers.push(p)\n\
    \        end\n    end\n    \n    prime_numbers = prime_numbers[prime_numbers.length:end]\n\
    \    \n    prime_numbers = prime_numbers[prime_numbers.length:end]\n    \n   \
    \ return prime_numbers\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<code language=julia-1.5>\ncount_up_to(100)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(10000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(100000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(1000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(10000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(100000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(10000000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(100000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(1000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(100000000000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(10000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1000000000000000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(", "    if n < 0\n        error(\"\
    count_up_to: n must be non-negative\")\n    end\n    \n    primes = primes_up_to_n(n)\n\
    \    \n    count_up_to_vec = Vector{Int64}()\n    \n    for p in primes\n    \
    \    if p > n\n            count_up_to_vec += [p]\n        else\n            count_up_to_vec\
    \ += [p] * (p - n)\n        end\n    end\n    \n    return count_up_to_vec\nend\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_", "    if n == 0\n        Vector{}\n    else\n\
    \        primes = prime_numbers(n)\n        primes = primes[primes <= n]\n   \
    \     primes = primes[primes <= n]\n        primes = primes[primes <= n]\n   \
    \     primes = primes[primes <= n]\n        primes = primes[primes <= n]\n   \
    \     primes = primes[primes <= n]\n        primes = primes[primes <= n]\n   \
    \     primes = primes[primes <= n]\n        primes = primes[primes <= n]\n   \
    \     primes = primes[primes <= n]\n        primes = primes[primes <= n]\n   \
    \     primes = primes[primes <= n]\n        primes = primes[primes <= n]\n   \
    \     primes = primes[primes <= n]\n        primes = primes[primes <= n]\n   \
    \     primes = primes[primes <= n]\n        primes = primes[primes <= n]\n   \
    \     primes = primes[primes <= n]\n        primes = primes[primes <= n]\n   \
    \     primes = primes[primes <= n]\n        primes = primes[primes <= n]\n   \
    \     primes = primes[primes <= n]\n        primes = primes[primes <= n]\n   \
    \     primes = primes[primes <= n]\n        primes = primes[primes <= n]\n   \
    \     primes = primes[primes <= n]\n        primes = primes[primes <= n]\n   \
    \     primes = primes[primes <= n]\n        primes = primes[primes <= n]\n   \
    \     primes = primes[primes <= n]\n        primes = primes[primes <= n]\n   \
    \     primes = primes[primes <= n]\n        primes = primes[primes <= n]\n   \
    \     primes = primes[primes <= n]\n        primes = primes[primes <= n]\n   \
    \     primes = primes[primes <= n]\n        primes = primes[primes <= n]\n   \
    \     primes = primes[primes <= n]\n        primes = primes[primes <= n]\n   \
    \     primes = primes[primes <= n]\n        primes = primes[primes <= n]\n   \
    \     primes = primes[primes <= n]\n        primes = primes[primes <= n]\n   \
    \     primes = primes[primes <= n]\n        primes = primes[primes <= n]\n   \
    \     primes = primes[primes <= n]\n        primes = primes[primes <= n]\n   \
    \     primes = primes[primes <= n]\n        primes = primes[primes <= n]\n   \
    \     primes = ", "    if n < 0\n        error(\"count_up_to only accepts non-negative\
    \ integers\")\n    end\n    \n    primes = prime_numbers(n)\n    \n    prime_numbers\
    \ = primes[2:end]\n    \n    prime_numbers = prime_numbers[prime_numbers < n]\n\
    \    \n    prime_numbers = prime_numbers[prime_numbers > 1]\n    \n    prime_numbers\
    \ = prime_numbers[prime_numbers != 0]\n    \n    prime_numbers = prime_numbers[prime_numbers\
    \ != 1]\n    \n    prime_numbers = prime_numbers[prime_numbers != 2]\n    \n \
    \   prime_numbers = prime_numbers[prime_numbers != 3]\n    \n    prime_numbers\
    \ = prime_numbers[prime_numbers != 4]\n    \n    prime_numbers = prime_numbers[prime_numbers\
    \ != 5]\n    \n    prime_numbers = prime_numbers[prime_numbers != 6]\n    \n \
    \   prime_numbers = prime_numbers[prime_numbers != 7]\n    \n    prime_numbers\
    \ = prime_numbers[prime_numbers != 8]\n    \n    prime_numbers = prime_numbers[prime_numbers\
    \ != 9]\n    \n    prime_numbers = prime_numbers[prime_numbers != 10]\n    \n\
    \    prime_numbers = prime_numbers[prime_numbers != 11]\n    \n    prime_numbers\
    \ = prime_numbers[prime_numbers != 12]\n    \n    prime_numbers = prime_numbers[prime_numbers\
    \ != 13]\n    \n    prime_numbers = prime_numbers[prime_numbers != 14]\n    \n\
    \    prime_numbers = prime_numbers[prime_numbers != 15]\n    \n    prime_numbers\
    \ = prime_numbers[prime_numbers != 16]\n    \n    prime_numbers = prime_numbers[prime_numbers\
    \ != 17]\n    \n    prime_numbers = prime_numbers[prime_numbers != 18]\n    \n\
    \    prime_numbers = prime_numbers[prime_numbers != 19]\n    \n    prime_numbers\
    \ = prime_numbers[prime_numbers != 20]\n    \n    prime_numbers = prime_numbers[prime_numbers\
    \ != 21]\n    \n    prime_numbers = prime_numbers[prime_numbers != 22]\n    \n\
    \    prime_numbers = prime_numbers[prime_numbers != 23]\n    \n    prime_numbers\
    \ = prime_numbers[prime_numbers != 24", "    if n < 1 \n        return Vector{Int64}()\
    \ \n    else \n        primes = primes_up_to_n(n) \n        prime_numbers = primes[2:end]\
    \ \n        prime_numbers_less_than = primes[2:end] - primes[1:end-1] \n     \
    \   prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .> 0] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .<= n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .<= n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .<= n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .<= n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .<= n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .<= n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .<= n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .<= n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .<= n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .<= n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .<= n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .<= n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .<= n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .<= n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .<= n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .<= n] \n        prime_numbers_less_than = prime_numbers_less_than", "    if\
    \ n < 0\n        error(\"count_up_to only accepts non-negative integers\")\n \
    \   end\n    \n    primes = prime_numbers(n)\n    \n    primes = primes[2:end]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = ", "    if n < 0\n\
    \        return Vector{Int64}()\n    end\n    \n    primes = primes_up_to_n(n)\n\
    \    \n    primes_less_than = primes[2:end]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ primes[1]\n \
    \   \n    primes_less_than = primes_less_than .+ primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ primes[1]\n \
    \   \n    primes_less_than = primes_less_than .+ primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ primes[1]\n \
    \   \n    primes_less_than = primes_less_than .+ primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ primes[1]\n \
    \   \n    primes_less_than = primes_less_than .+ primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ primes[1]\n \
    \   \n    primes_less_than = primes_less_than .+ primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ primes[1]\n \
    \   \n    primes_less_than = primes_less_than .+ primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ primes[1]\n \
    \   \n    primes_less_than = primes_less_than .+ primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .+ ", "    count_up_to(n) = Vector{Int64}()\n    \n    if\
    \ n == 0\n        return count_up_to(0)\n    end\n    \n    if n == 1\n      \
    \  return count_up_to(1)\n    end\n    \n    count_up_to(n) = count_up_to(n-1)\
    \ + [Int64(n)]\n    \n    for n in count_up_to(n-1)\n        if n % 2 == 0\n \
    \           count_up_to(n) = count_up_to(n-1) + [Int64(n)]\n        end\n    end\n\
    \    \n    return count_up_to(n)\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(19)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(21)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(22)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(23)\n</cell>\n<code language=julia-1.5>\ncount_up_to(24)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(25)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(26)\n</cell>\n<code language=julia-1.5>\ncount_up_to(27)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(28)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(29)\n</cell>\n<code language=julia-1.5>\ncount_up_to(30)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(31)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(32)\n</cell>\n<code language=julia-1.5>\ncount_up_to(33)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(34)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(35)\n</cell>\n<code language=julia-1.5>\ncount_up_to(36)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(37)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(38)\n</cell>\n<code language=julia-1.5>\ncount_up_to(39)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(40)\n", "    if n < 0 \n        error(\"\
    count_up_to called with negative number\")\n    end\n    \n    primes = primes_up_to(n)\n\
    \    \n    count_up_to = []\n    for p in primes\n        if p > n\n         \
    \   count_up_to += [p]\n        else\n            break\n        end\n    end\n\
    \    \n    return count_up_to\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an integer\
    \ $n$ and returns the number of prime numbers less than $n$.", "    if n < 0\n\
    \        error(\"count_up_to: n must be non-negative\")\n    end\n    \n    primes\
    \ = prime_numbers(n)\n    \n    prime_numbers = Vector{Int64}()\n    \n    for\
    \ p in primes\n        if p > n\n            prime_numbers = prime_numbers + [p]\n\
    \        end\n    end\n    \n    prime_numbers = prime_numbers[2:end]\n    \n\
    \    prime_numbers = prime_numbers[prime_numbers .<= n]\n    \n    return prime_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an integer $n$ and returns the\
    \ number of prime numbers less than or equal to $n$.", "    if n == 0\n      \
    \  Vector{Int64}()\n    else\n        count_up_to(n - 1)\n        push!(count_up_to(n),\
    \ n)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes an\
    \ array of integers and returns the number of integers in the array that are less\
    \ than the given integer.", "    if n < 0\n        return Vector{}\n    end\n\
    \    \n    primes = prime_numbers(n)\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]",
  "    if n < 0\n        error(\"count_up_to: n must be non-negative\")\n    end\n\
    \    \n    primes = primes_up_to(n)\n    \n    primes = primes[2:end]\n    \n\
    \    primes = primes[primes <= n]\n    \n    return primes\nend\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nExercise: Implement\
    \ a function that takes an array of integers and returns the number of integers\
    \ that are less than or equal to each of the integers in the array.\n    for example:\n\
    \    count_less_than([2,3,5,7,11,13,17,19]) => [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17])\
    \ => [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17,19]) => [2,3,5,7,11,13,17]\n\
    \    count_less_than([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17,19])\
    \ => [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n\
    \    count_less_than([2,3,5,7,11,13,17,19]) => [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17])\
    \ => [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17,19]) => [2,3,5,7,11,13,17]\n\
    \    count_less_than([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17,19])\
    \ => [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n\
    \    count_less_than([2,3,5,7,11,13,17,19]) => [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,",
  "    count_up_to = []\n    if n == 0\n        count_up_to\n    else\n        for\
    \ i in 2..n\n            if n % i == 0\n                count_up_to += [i]\n \
    \           else\n                break\n        end\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(19)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(21)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(22)\n</cell>\n<code language=julia-1.5>\ncount_up_to(23)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(24)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(25)\n</cell>\n<code language=julia-1.5>\ncount_up_to(26)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(27)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(28)\n</cell>\n<code language=julia-1.5>\ncount_up_to(29)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(30)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(31)\n</cell>\n<code language=julia-1.5>\ncount_up_to(32)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(33)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(34)\n</cell>\n<code language=julia-1.5>\ncount_up_to(35)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(36)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(37)\n</cell>\n<code language=julia-1.5>\ncount_up_to(38)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(39)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(40)\n</cell>\n<code language=julia-1.5>\ncount_up_to(41)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(42)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(43)\n</cell>\n<code language=julia-1.5>\ncount_up_to(44)\n", "   \
    \ if n < 2\n        return Vector{Int64}()\n    end\n    \n    primes = prime_numbers(n)\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[", "    if n < 0\n        return Vector{Int64}()\n\
    \    end\n    \n    primes = prime_numbers(n)\n    \n    primes_less_than = primes[primes..<n]\n\
    \    \n    primes_less_than = primes_less_than[primes_less_than.!=n]\n    \n \
    \   return primes_less_than\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<code language=julia-1.5>\ncount_up_to(19)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(21)\n</cell>\n<code language=julia-1.5>\ncount_up_to(22)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(23)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(24)\n</cell>\n<code language=julia-1.5>\ncount_up_to(25)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(26)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(27)\n</cell>\n<code language=julia-1.5>\ncount_up_to(28)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(29)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(30)\n</cell>\n<code language=julia-1.5>\ncount_up_to(31)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(32)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(33)\n</cell>\n<code language=julia-1.5>\ncount_up_to(34)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(35)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(36)\n</cell>\n<code language=julia-1.5>\ncount_up_to(37)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(38)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(39)\n</cell>\n<code language=julia-1.5>\ncount_up_to(40)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(41)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(42)\n</cell>\n<code language=julia-1.5>\ncount_up_to(43)\n</cell>\n",
  "    if n == 0\n        Vector{Int64}()\n    else\n        primes = primes_up_to_n(n)\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= ", "    if n < 2\n        return Vector{Int64}()\n\
    \    end\n    \n    primes = primes_up_to(n)\n    \n    prime_numbers = Vector{Int64}()\n\
    \    \n    for prime in primes\n        if prime < n\n            prime_numbers.push(prime)\n\
    \        end\n    end\n    \n    return prime_numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an integer $n$ and returns the number of prime numbers\
    \ less than or equal to $n$. \nFor example count_primes(5) => [2,3,5,7]\nHint:\
    \ use the function count_up_to to implement the function\nHint: use the function\
    \ primes_up_to to implement the function\nHint: use the function primes_up_to\
    \ to implement the function\nHint: use the function primes_up_to to implement\
    \ the function\nHint: use the function primes_up_to to implement the function\n\
    Hint: use the function primes_up_to to implement the function\nHint: use the function\
    \ primes_up_to to implement the function\nHint: use the function primes_up_to\
    \ to implement the function\nHint: use the function primes_up_to to implement\
    \ the function\nHint: use the function primes_up_to to implement the function\n\
    Hint: use the function primes_up_to to implement the function\nHint: use the function\
    \ primes_up_to to implement the function\nHint: use the function primes_up_to\
    \ to implement the function\nHint: use the function primes_up_to to implement\
    \ the function\nHint: use the function primes_up_to to implement the function\n\
    Hint: use the function primes_up_to to implement the function\nHint: use the function\
    \ primes_up_to to implement the function\nHint: use the function primes_up_to\
    \ to implement the function\nHint: use the function primes_up_to to implement\
    \ the function\nHint: use the function primes_up_to to implement the function\n\
    Hint: use the function primes_up_to to implement the function\nHint: use the function\
    \ primes_up_to to implement the function\nHint: use the function primes_up_to\
    \ to implement the function\nHint: use the function primes_", "    count_up_to(n)\
    \ = Vector{Int64}()\n    if n == 0\n        return count_up_to(0)\n    end\n \
    \   if n == 1\n        return count_up_to(1)\n    end\n    if n % 2 == 0\n   \
    \     count_up_to(n / 2)\n    end\n    if n % 3 == 0\n        count_up_to(n /\
    \ 3)\n    end\n    if n % 5 == 0\n        count_up_to(n / 5)\n    end\n    if\
    \ n % 7 == 0\n        count_up_to(n / 7)\n    end\n    if n % 11 == 0\n      \
    \  count_up_to(n / 11)\n    end\n    if n % 13 == 0\n        count_up_to(n / 13)\n\
    \    end\n    if n % 17 == 0\n        count_up_to(n / 17)\n    end\n    if n %\
    \ 19 == 0\n        count_up_to(n / 19)\n    end\n    if n % 23 == 0\n        count_up_to(n\
    \ / 23)\n    end\n    if n % 29 == 0\n        count_up_to(n / 29)\n    end\n \
    \   if n % 37 == 0\n        count_up_to(n / 37)\n    end\n    if n % 43 == 0\n\
    \        count_up_to(n / 43)\n    end\n    if n % 59 == 0\n        count_up_to(n\
    \ / 59)\n    end\n    if n % 67 == 0\n        count_up_to(n / 67)\n    end\n \
    \   if n % 73 == 0\n        count_up_to(n / 73)\n    end\n    if n % 79 == 0\n\
    \        count_up_to(n / 79)\n    end\n    if n % 83 == 0\n        count_up_to(n\
    \ / 83)\n    end\n    if n % 89 == 0\n        count_up_to(n / 89)\n    end\n \
    \   if n % 97 == 0\n        count_up_to(n / 97)\n    end\n    if n % 111 == 0\n\
    \        count_up_to(n / 111)\n    end\n    if n % 131 == 0\n        count_up_to(n\
    \ / 131)\n    end\n    if n % 167 == 0\n        count_up_to(n / 167)\n    end\n\
    \    if n % 191 == 0\n        count_up_to(n / 191)\n    end\n    if n % 231 ==\
    \ 0\n        count_up_to(n / 231)\n    end\n    if n % 291 == 0\n        count_up_to(n\
    \ / 291)\n    end\n    if n % 371 == 0\n        count_up_to(n / 371)\n    end\n\
    \    if n % 431 == 0\n        count_up_to(n / 431)\n    end\n    if n % 591 ==\
    \ 0\n        count_up_to(n / 591)\n    end\n    if n % 671 == 0\n        count_up_to(n\
    \ / 671)\n    end\n    if n % 731 == 0\n        count_up_to(n ", "    if n < 2\
    \ \n        return Vector{Int64}() \n    else \n        count_up_to(n-1)\n   \
    \     primes = prime_numbers(n) \n        primes = primes[primes <= n] \n    \
    \    primes = primes[primes <= n] \n        primes = primes[primes <= n] \n  \
    \      primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes ", "    if n == 0\n        Vector{}\n    else\n\
    \        primes = primes_upto(n)\n        primes = primes[primes <= n]\n     \
    \   primes[primes > n] = primes[primes > n]\n        primes\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an array and returns the number\
    \ of elements that are greater than or equal to each element in the array. For\
    \ example:", "    if n < 2 \n        return Vector{Int64}() \n    else \n    \
    \    primes = primes_up_to_n(n) \n        primes_less_than = primes[2:end] \n\
    \        primes_less_than = primes_less_than - primes[1] \n        primes_less_than\
    \ = primes_less_than - primes[2] \n        primes_less_than = primes_less_than\
    \ - primes[3] \n        primes_less_than = primes_less_than - primes[4] \n   \
    \     primes_less_than = primes_less_than - primes[5] \n        primes_less_than\
    \ = primes_less_than - primes[6] \n        primes_less_than = primes_less_than\
    \ - primes[7] \n        primes_less_than = primes_less_than - primes[8] \n   \
    \     primes_less_than = primes_less_than - primes[9] \n        primes_less_than\
    \ = primes_less_than - primes[10] \n        primes_less_than = primes_less_than\
    \ - primes[11] \n        primes_less_than = primes_less_than - primes[12] \n \
    \       primes_less_than = primes_less_than - primes[13] \n        primes_less_than\
    \ = primes_less_than - primes[14] \n        primes_less_than = primes_less_than\
    \ - primes[15] \n        primes_less_than = primes_less_than - primes[16] \n \
    \       primes_less_than = primes_less_than - primes[17] \n        primes_less_than\
    \ = primes_less_than - primes[18] \n        primes_less_than = primes_less_than\
    \ - primes[19] \n        primes_less_than = primes_less_than - primes[20] \n \
    \       primes_less_than = primes_less_than - primes[21] \n        primes_less_than\
    \ = primes_less_than - primes[22] \n        primes_less_than = primes_less_than\
    \ - primes[23] \n        primes_less_than = primes_less_than - primes[24] \n \
    \       primes_less_than = primes_less_than - primes[25] \n        primes_less_than\
    \ = primes_less_than - primes[26] \n        primes_less_than = primes_less_than\
    \ - primes[27] \n        primes_less_than = primes_less_than - primes[28] \n \
    \       primes_less_than = primes_less_than - primes[29] \n        primes_less_than\
    \ = primes_less_than - primes[3", "    if n < 1 \n        return Vector{Int64}()\n\
    \    end\n    \n    primes = primes_list(n)\n    \n    prime_numbers = Vector{Int64}()\n\
    \    \n    for p in primes\n        if p > n\n            break\n        end\n\
    \        \n        if p % 2 == 0\n            prime_numbers[end] = p\n       \
    \ end\n    end\n    \n    prime_numbers = prime_numbers[2:end]\n    \n    prime_numbers\
    \ = prime_numbers[prime_numbers < n]\n    \n    return prime_numbers\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(19)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(21)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(22)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(23)\n</cell>\n<code language=julia-1.5>\ncount_up_to(24)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(25)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(26)\n</cell>\n<code language=julia-1.5>\ncount_up_to(27)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(28)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(29)\n</cell>\n<code language=julia-1.5>\ncount_up_to(30)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(31)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(32)\n</cell>\n<code language=julia-1.5>\ncount_up_to(33)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(34)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(35)\n</cell>\n<code language=julia-1.5>\ncount_up_to(36)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(37)\n</cell>\n<code language=julia-1.5>\n",
  "    if n == 0 \n        Vector{Int64}() \n    else \n        count_up_to(n - 1)\
    \ |> collect{x->x} ++ [n - 1]\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.0>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.0>\ncount_up_to(20)\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(18)\n</cell>\n<code language=julia-1.0>\ncount_up_to(19)\n</cell>\n\
    <code language=julia-1.0>\ncount_up_to(20)\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(21)\n</cell>\n<code language=julia-1.0>\ncount_up_to(22)\n</cell>\n\
    <code language=julia-1.0>\ncount_up_to(23)\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(24)\n</cell>\n<code language=julia-1.0>\ncount_up_to(25)\n</cell>\n\
    <code language=julia-1.0>\ncount_up_to(26)\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(27)\n</cell>\n<code language=julia-1.0>\ncount_up_to(28)\n</cell>\n\
    <code language=julia-1.0>\ncount_up_to(29)\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(30)\n</cell>\n<code language=julia-1.0>\ncount_up_to(31)\n</cell>\n\
    <code language=julia-1.0>\ncount_up_to(32)\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(33)\n</cell>\n<code language=julia-1.0>\ncount_up_to(34)\n</cell>\n\
    <code language=julia-1.0>\ncount_up_to(35)\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(36)\n</cell>\n<code language=julia-1.0>\ncount_up_to(37)\n</cell>\n\
    <code language=julia-1.0>\ncount_up_to(38)\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(39)\n</cell>\n<code language=julia-1.0>\ncount_up_to(40)\n</cell>\n\
    <code language=julia-1.0>\ncount_up_to(41)\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(42)\n</cell>\n<code language=julia-1.0>\ncount_up_to(43)\n</cell>\n\
    <code language=julia-1.0>\ncount_up_to(44)\n</cell>\n<code language=julia-", " \
    \   if n < 0\n        error(\"count_up_to called with negative number\")\n   \
    \ end\n    \n    primes = primes_up_to_n(n)\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    ", "    if n < 0\n\
    \        error(\"count_up_to: n must be non-negative\")\n    end\n    \n    primes\
    \ = prime_list_generator(n)\n    \n    prime_numbers = Vector{Int64}()\n    \n\
    \    for p in primes\n        if p < n\n            prime_numbers.push(p)\n  \
    \      end\n    end\n    \n    prime_numbers = prime_numbers[prime_numbers < n]\n\
    \    \n    return prime_numbers\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 3\nWrite a function that takes an integer\
    \ $n$ and returns the number of prime numbers less than or equal to $n$. \nFor\
    \ example count_primes(5) => 2\ncount_primes(11) => 4\ncount_primes(0) => 0\n\
    count_primes(20) => 5\ncount_primes(1) => 1\ncount_primes(18) => 2", "    if n\
    \ < 0\n        error(\"count_up_to: n must be non-negative\")\n    end\n    \n\
    \    primes = primes_up_to_n(n)\n    \n    primes = primes[primes <= n]\n    \n\
    \    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n  \
    \  \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n", "    if n < 0\n        return\
    \ Vector{Int64}()\n    end\n    \n    primes = primes_up_to_n(n)\n    \n    prime_numbers\
    \ = Vector{Int64}()\n    \n    for p in primes\n        if p > n\n           \
    \ break\n        end\n        \n        if p % 2 == 0\n            prime_numbers\
    \ += [p]\n        end\n    end\n    \n    prime_numbers += primes\n    \n    return\
    \ prime_numbers\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an integer\
    \ $n$ and returns the number of prime numbers less than $n$.", "    if n < 2 \n\
    \        return Vector{Int64}() \n    else \n        count_up_to(n-1) + [Int64(n)]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(19)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)", "    if n < 0\n        error(\"count_up_to only accepts non-negative\
    \ integers\")\n    end\n    \n    primes = prime_numbers(n)\n    \n    prime_numbers_less_than\
    \ = primes[primes..<n]\n    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x\
    \ -> x != 1)\n    \n    return prime_numbers_less_than\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an array of integers and returns the number of positive\
    \ integers that are less than the maximum of the array.", "    if n < 0\n    \
    \    error(\"count_up_to only accepts non-negative integers\")\n    end\n    \n\
    \    primes = prime_numbers(n)\n    primes = primes[2:end]\n    \n    primes =\
    \ primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[", "    if n < 0\n        error(\"\
    count_up_to: n must be non-negative\")\n    end\n    \n    primes = primes_up_to(n)\n\
    \    \n    counts = Vector{Int64}()\n    for p in primes\n        counts += [p]\n\
    \    end\n    \n    return counts\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise: Write a function that takes an integer\
    \ $n$ and returns the number of prime numbers less than $n$.", "    if n < 2 \n\
    \        return Vector{Int64}()\n    end\n    \n    primes = primes_up_to(n)\n\
    \    \n    primes_less_than = primes[2:end]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ primes[1]\n \
    \   \n    primes_less_than = primes_less_than .+ primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ primes[1]\n \
    \   \n    primes_less_than = primes_less_than .+ primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ primes[1]\n \
    \   \n    primes_less_than = primes_less_than .+ primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ primes[1]\n \
    \   \n    primes_less_than = primes_less_than .+ primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ primes[1]\n \
    \   \n    primes_less_than = primes_less_than .+ primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ primes[1]\n \
    \   \n    primes_less_than = primes_less_than .+ primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ primes[1]\n \
    \   \n    primes_less_than = primes_less_than .+ primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .+ prime", "    if n < 2 \n        return Vector{Int64}()\
    \ \n    else \n        primes = prime_numbers(n) \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = ", "    count_up_to(n)\
    \ = Vector{Int64}()\n    if n == 0\n        count_up_to(n) = Vector{Int64}()\n\
    \    else\n        count_up_to(n) = count_up_to(n-1) + [Int64(n)]\n    end\nend\n\
    </cell>\n<code language=julia-1.3>\ncount_up_to(5)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.3>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.3>\ncount_up_to(18)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.3>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.3>\ncount_up_to(20)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.3>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.3>\ncount_up_to(20)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.3>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.3>\ncount_up_to(20)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.3>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.3>\ncount_up_to(20)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.3>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.3>\ncount_up_to(20)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.3>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.3>\ncount_up_to(20)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.3>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.3>\ncount_up_to(20)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.3>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.3>\ncount_up_to(20)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.3>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.", "    count_up_to = []\n    if n == 0\n        count_up_to\n\
    \    else\n        count_up_to += prime_numbers(n-1)\n        for p in prime_numbers(n)\n\
    \            if p > n\n                break\n            count_up_to += [p]\n\
    \        end\n    end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an array\
    \ of integers and returns the sum of the squares of the integers in the array.\n\
    \    for example:\n    square_of_array([1,2,3]) => 9\n    square_of_array([1,4,9,16])\
    \ => 50\n    square_of_array([]) => 0\n    square_of_array([1,4,9,16,25]) => 2525\n\
    \    square_of_array([1,4,9,16,25,36]) => 2525\n    square_of_array([1,4,9,16,25,36,49])\
    \ => 2525\n    square_of_array([1,4,9,16,25,36,49,64]) => 2525\n    square_of_array([1,4,9,16,25,36,49,64,81])\
    \ => 2525\n    square_of_array([1,4,9,16,25,36,49,64,81,100]) => 2525\n    square_of_array([1,4,9,16,25,36,49,64,81,100,121])\
    \ => 2525\n    square_of_array([1,4,9,16,25,36,49,64,81,100,121,144]) => 2525\n\
    \    square_of_array([1,4,9,16,25,36,49,64,81,100,121,144,168]) => 2525\n    square_of_array([1,4,9,16,25,36,49,64,81,100,121,144,168,192])\
    \ => 2525\n    square_of_array([1,4,9,16,25,36,49,64,81,100,121,144,168,192,224])\
    \ => 2525\n    square_of_array([1,4,9,16,25,36,49,64,81,100,121,144,168,192,224,256])\
    \ => 2525\n    square_of_array([1,4,9,16,25,36,49,64,81,100,121,144,168,192,",
  "    if n == 0 \n        Vector{Int64}() \n    else \n        count_up_to(n-1) +\
    \ [n isprime] \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes an array of numbers and returns the sum of the squares of the numbers.\n\
    \    for example:\n    square_of_array([1,2,3]) => [1,2,3]\n    square_of_array([1,4,9,16])\
    \ => [1,2,9,16]\n    square_of_array([1,4,9,16,25]) => [1,2,9,16,25]\n    square_of_array([])\
    \ => []\n    square_of_array([1]) => [1]\n    square_of_array([1,2]) => [1,4]\n\
    \    square_of_array([1,2,3]) => [1,2,3]\n    square_of_array([1,2,3,4,5]) =>\
    \ [1,2,3,4,5]\n    square_of_array([1,2,3,4,5,6,7,8,9,10]) => [1,2,3,4,5,6,7,8,9,10]\n\
    \    square_of_array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) =>\
    \ [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n    square_of_array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n\
    \    square_of_array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,",
  "    if n < 0\n        return Vector{Int64}()\n    end\n    \n    primes = prime_numbers(n)\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[", "    if n < 0\n        return Vector{Int64}()\n\
    \    end\n    \n    primes = prime_numbers(n)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than(n)\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = ", "    if n == 0 \n        return\
    \ Vector{Int64}()\n    end\n    \n    primes = primes_list(n)\n    \n    primes_less_than\
    \ = primes[2:end]\n    \n    primes_less_than = primes_less_than .- primes[1]\n\
    \    \n    primes_less_than = primes_less_than .- primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .- primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .- primes[1]\n    \n    primes_less_than = primes_less_than .- primes[1]\n \
    \   \n    primes_less_than = primes_less_than .- primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .- primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .- primes[1]\n    \n    primes_less_than = primes_less_than .- primes[1]\n \
    \   \n    primes_less_than = primes_less_than .- primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .- primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .- primes[1]\n    \n    primes_less_than = primes_less_than .- primes[1]\n \
    \   \n    primes_less_than = primes_less_than .- primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .- primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .- primes[1]\n    \n    primes_less_than = primes_less_than .- primes[1]\n \
    \   \n    primes_less_than = primes_less_than .- primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .- primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .- primes[1]\n    \n    primes_less_than = primes_less_than .- primes[1]\n \
    \   \n    primes_less_than = primes_less_than .- primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .- primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .- primes[1]\n    \n    primes_less_than = primes_less_than .- primes[1]\n \
    \   \n    primes_less_than = primes_less_than .- primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .- primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .- primes[1]", "    count_up_to = []\n    \n    if n == 0\n        count_up_to\n\
    \    else\n        count_up_to += prime_numbers(n)\n        count_up_to += count_up_to(n-1)\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes an array\
    \ of integers and returns the number of positive integers that are less than or\
    \ equal to each of the integers in the array.\n    for example:\n    count_positive([1,2,3])\
    \ => 2\n    count_positive([1,-2,-3]) => 1\n    count_positive([1,-3,-4]) => 0\n\
    \    count_positive([1,-4,-5]) => 0\n    count_positive([1,-5,-6,-7,-8,-9]) =>\
    \ 0\n    count_positive([1,-6,-7,-8,-9]) => 1\n    count_positive([1,-7,-8,-9])\
    \ => 1\n    count_positive([1,-8,-9]) => 1\n    count_positive([1,-9]) => 1\n\
    \    count_positive([1,-10,-11,-12]) => 1\n    count_positive([1,-11,-12]) =>\
    \ 2\n    count_positive([1,-12]) => 2\n    count_positive([1,-13,-14,-15]) =>\
    \ 1\n    count_positive([1,-14,-15]) => 2\n    count_positive([1,-15]) => 2\n\
    \    count_positive([1,-16,-17,-18,-19,-20,-21,-22,-23]) => 1\n    count_positive([1,-16,-17,-18,-19,-20,-21,-22,-23])\
    \ => 2\n    count_positive([1,-16,-17,-18,-19,-20,-21,-22,-23]) => 3\n    count_positive([1,-16,-17,-18,-19,-20,-21,-22,-23])\
    \ => 4\n    count_positive([1,-16,-17,-18,-19,-20,-21,-22,-23]) => 5\n    count_positive([1,-16,-17,-18,-19,-20,-21,-22,-23])\
    \ => 6\n    count_positive([1,-16,-17,-18,-19,-20,-21,-22,-23]) => 7\n    count_positive([1,-16,-17,-18,-19,-20,-21,-22,-23])\
    \ => 8\n    count_positive([1,-16,-17,-18,-19,-20,-21,-22,-23]) => 9\n    count_positive([1,-16,-17,-18,-19,-20,-21,-22,-23])\
    \ => 10\n    count_positive([1,-", "    if n < 2\n        return Vector{Int64}()\n\
    \    end\n    \n    primes = primes_list(n)\n    \n    primes_less_than = primes[primes..<n]\n\
    \    \n    primes_less_than = primes_less_than[primes_less_than.!=n]\n    \n \
    \   primes_less_than = primes_less_than[primes_less_than .!= 1]\n    \n    primes_less_than\
    \ = primes_less_than[primes_less_than .!= 0]\n    \n    primes_less_than = primes_less_than[primes_less_than\
    \ .!= 2]\n    \n    primes_less_than = primes_less_than[primes_less_than .!= 3]\n\
    \    \n    primes_less_than = primes_less_than[primes_less_than .!= 5]\n    \n\
    \    primes_less_than = primes_less_than[primes_less_than .!= 7]\n    \n    primes_less_than\
    \ = primes_less_than[primes_less_than .!= 11]\n    \n    primes_less_than = primes_less_than[primes_less_than\
    \ .!= 13]\n    \n    primes_less_than = primes_less_than[primes_less_than .!=\
    \ 17]\n    \n    primes_less_than = primes_less_than[primes_less_than .!= 19]\n\
    \    \n    primes_less_than = primes_less_than[primes_less_than .!= 23]\n    \n\
    \    primes_less_than = primes_less_than[primes_less_than .!= 29]\n    \n    primes_less_than\
    \ = primes_less_than[primes_less_than .!= 31]\n    \n    primes_less_than = primes_less_than[primes_less_than\
    \ .!= 37]\n    \n    primes_less_than = primes_less_than[primes_less_than .!=\
    \ 41]\n    \n    primes_less_than = primes_less_than[primes_less_than .!= 41]\n\
    \    \n    primes_less_than = primes_less_than[primes_less_than .!= 47]\n    \n\
    \    primes_less_than = primes_less_than[primes_less_than .!= 53]\n    \n    primes_less_than\
    \ = primes_less_than[primes_less_than .!= 59]\n    \n    primes_less_than = primes_less_than[primes_less_than\
    \ .!= 67]\n    \n    primes_less_than = primes_less_than[primes_less_than ", " \
    \   if n < 0\n        error(\"count_up_to: n must be non-negative\")\n    end\n\
    \    \n    primes = prime_numbers(n)\n    \n    prime_numbers = primes[2:end]\n\
    \    \n    prime_numbers = prime_numbers[prime_numbers < n]\n    \n    prime_numbers\
    \ = prime_numbers[prime_numbers > 1]\n    \n    prime_numbers = prime_numbers[prime_numbers\
    \ != 0]\n    \n    prime_numbers = prime_numbers[prime_numbers != n]\n    \n \
    \   return prime_numbers\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an array\
    \ and returns the sum of the squares of the numbers in the array.\n    for example:\n\
    \    square_of_numbers([1,2,3]) => [1,2,3]\n    square_of_numbers([1,4,9]) =>\
    \ [1,2,3,4,9,16]\n    square_of_numbers([]) => []\n    square_of_numbers([1,4,9,16])\
    \ => [1,2,3,4,9,16]\n    square_of_numbers([1]) => [1]\n    square_of_numbers([])\
    \ => []\n    \"\"\"", "    if n < 0\n        error(\"count_up_to only accepts\
    \ non-negative integers\")\n    end\n    \n    primes = prime_numbers(n)\n   \
    \ \n    count_up_to = []\n    for p in primes\n        if p < n\n            count_up_to\
    \ = [p] + count_up_to\n        else\n            count_up_to += [p]\n        end\n\
    \    end\n    \n    return count_up_to\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an array of integers and returns the number of positive\
    \ integers that are less than or equal to each of the integers in the array.\n\
    For example count_positive([2,3,5,7,11,13,17,19]) should return [2,3,5,7,11,13,17]",
  "    if n == 0\n        Vector{Int64}()\n    else\n        primes = prime_numbers(n)\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]", "    if n < 2 \n        return Vector{Int64}()\
    \ \n    else \n        count_up_to(n-1)\n        primes = prime_numbers(n) \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes ", "  \
    \  count_up_to = []\n    if n == 0\n        count_up_to\n    else\n        for\
    \ n in 1:n\n            if n % 2 == 0\n                count_up_to += [n]\n  \
    \          else\n                count_up_to += [n]\n                count_up_to\
    \ += [n+1]\n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(19)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(21)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(22)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(23)\n</cell>\n<code language=julia-1.5>\ncount_up_to(24)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(25)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(26)\n</cell>\n<code language=julia-1.5>\ncount_up_to(27)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(28)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(29)\n</cell>\n<code language=julia-1.5>\ncount_up_to(30)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(31)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(32)\n</cell>\n<code language=julia-1.5>\ncount_up_to(33)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(34)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(35)\n</cell>\n<code language=julia-1.5>\ncount_up_to(36)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(37)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(38)\n</cell>\n<code language=julia-1.5>\ncount_up_to(39)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(40)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(41)\n</cell>\n<code language=julia-1.5>\ncount_up_to(42)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(43)\n</", "    if n < 1 \n        return\
    \ Vector{Int64}() \n    else \n        primes = primes_up_to_n(n) \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        prime",
  "    \n    if n < 0\n        return Vector{Int64}()\n    end\n    \n    primes =\
    \ primes_up_to_n(n)\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    return primes\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(100)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1000)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(10000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(100000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(10000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(100000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(100000000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(10000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(100000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1000000000000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(10000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(100000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(10000000000000000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(10000000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5", "    if n == 0 \n        return Vector{Int64}() \n    else\
    \ \n        primes = primes_up_to_n(n) \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        return primes \n    end\nend\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(19)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(21)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(22)\n</cell>\n<code language=julia-1.5>\ncount_up_to(23)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(24)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(25)\n</cell>\n<code language=julia-1.5>\ncount_up_to(26)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(27)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(28)\n</cell>\n<code language=julia-1.5>\ncount_up_to(29)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(30)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(31)\n</cell>\n<code language=julia-1.5>\ncount_up_to(32)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(33)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(34)\n</cell>\n<code language=julia-1.5>\ncount_up_to(35)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(36)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(37)\n</cell>\n<code language=julia-1.5>\ncount_up_to(38)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(39)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(40)\n</cell>\n<code language=julia-1.5>\ncount_up_to(41)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(42)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(43)\n</cell>\n<code language=", "    if n < 2 \n        return Vector{Int64}()\
    \ \n    else \n        primes = prime_numbers(n) \n        primes = primes[2:end]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        return primes \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes an array and returns the number of elements that are less\
    \ than or equal to each element in another array. \nFor example \n    count_less_than([1,5,7,9],[1,5,7,9])\
    \ => [1,2,3]\n    count_less_than([1,5,7,9],[1,5,7,10]) => [1,2,3]\n    count_less_than([1,5,7,9],[1,5,7,11])\
    \ => [1,2,3]\n    count_less_than([1,5,7,9],[1,5,7,12]) => [1,2,3]\n    count_less_than([1,5,7,9],[1,5,7,13])\
    \ => [1,2,3]\n    count_less_than([1,5,7,9],[1,5,7,14]) => [1,2,3]\n    count_less_than([1,5,7,9],[1,5,7,15])\
    \ => [1,2,3]\n    count_less_than([1,5,7,9],[1,5,7,16]) => [1,2,3]\n    count_less_than([1,5,7,9],[1,5,7,17])\
    \ => [1,2,3]\n    count_less_than([1,5,7,9],[1,5,7,18]) => [1,2,3]\n    count_less_than([1,5,7,9],[1,5,7,19])\
    \ => [1,2,3]\n    count_less_than([1,5,7,9],[1,5,7,20]) => [1,2,3]\n    count_less_than([1,5,7,9],[1,5,7,21])\
    \ => [1,2,3]\n    count_less_than([1,5,7,9],[1,5,7,22]) => [1,2,3]\n    count_less_than([1,5,7,9],[1,5,7,23])\
    \ => [1,2,3]\n    count_less_than([1,5,7,9],[1,5,7,24]) => [1,2,3]\n    count_less_than([1,5,",
  "    if n == 0 \n        Vector{Int64}() \n    else \n        count_up_to(n-1) +\
    \ [n isprime] \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes an integer $n$ and returns the number of prime numbers less than or equal\
    \ to $n$. \nFor example count_primes(5) => [2,3,5,7,11]", "    if n < 2 \n   \
    \     return Vector{Int64}() \n    else \n        primes = prime_numbers(n) \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = ", "    primes = prime_numbers(n)\n    primes = primes[2:end]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[", "    if n < 1 \n        return Vector{Int64}() \n    else\
    \ \n        primes = prime_numbers(n) \n        primes = primes[2:end] \n    \
    \    primes = primes[primes <= n] \n        primes = primes[primes <= n] \n  \
    \      primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[", "    if n <\
    \ 0\n        return Vector{Int64}()\n    end\n    \n    primes = primes_list(n)\n\
    \    \n    primes_less_than = primes[2:end]\n    \n    primes_less_than = primes_less_than\
    \ .- primes[1]\n    \n    primes_less_than = primes_less_than .- primes[1]\n \
    \   \n    primes_less_than = primes_less_than .- primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .- primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .- primes[1]\n    \n    primes_less_than = primes_less_than .- primes[1]\n \
    \   \n    primes_less_than = primes_less_than .- primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .- primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .- primes[1]\n    \n    primes_less_than = primes_less_than .- primes[1]\n \
    \   \n    primes_less_than = primes_less_than .- primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .- primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .- primes[1]\n    \n    primes_less_than = primes_less_than .- primes[1]\n \
    \   \n    primes_less_than = primes_less_than .- primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .- primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .- primes[1]\n    \n    primes_less_than = primes_less_than .- primes[1]\n \
    \   \n    primes_less_than = primes_less_than .- primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .- primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .- primes[1]\n    \n    primes_less_than = primes_less_than .- primes[1]\n \
    \   \n    primes_less_than = primes_less_than .- primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .- primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .- primes[1]\n    \n    primes_less_than = primes_less_than .- primes[1]\n \
    \   \n    primes_less_than = primes_less_than .- primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .- primes[1]", "    if n < 2 \n        return Vector{Int64}()\n\
    \    \n    primes = primes_up_to(n)\n    \n    primes = primes[2:end]\n    \n\
    \    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n  \
    \  \n    return primes\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an integer\
    \ $n$ and returns the number of prime numbers less than or equal to $n$. \nFor\
    \ example count_primes(5) => 2\ncount_primes(11) => 5\ncount_primes(0) => 0\n\
    count_primes(20) => 5\ncount_primes(1) => 0\ncount_primes(18) => 5", "    if n\
    \ < 0\n        return Vector{Int64}()\n    end\n    \n    primes = primes_list(n)\n\
    \    \n    primes_less_than = primes[primes..<n]\n    \n    primes_less_than =\
    \ primes_less_than[primes_less_than.!=n]\n    \n    primes_less_than = primes_less_than[primes_less_than\
    \ .!= n]\n    \n    primes_less_than = primes_less_than[primes_less_than .!= n]\n\
    \    \n    primes_less_than = primes_less_than[primes_less_than .!= n]\n    \n\
    \    primes_less_than = primes_less_than[primes_less_than .!= n]\n    \n    primes_less_than\
    \ = primes_less_than[primes_less_than .!= n]\n    \n    primes_less_than = primes_less_than[primes_less_than\
    \ .!= n]\n    \n    primes_less_than = primes_less_than[primes_less_than .!= n]\n\
    \    \n    primes_less_than = primes_less_than[primes_less_than .!= n]\n    \n\
    \    primes_less_than = primes_less_than[primes_less_than .!= n]\n    \n    primes_less_than\
    \ = primes_less_than[primes_less_than .!= n]\n    \n    primes_less_than = primes_less_than[primes_less_than\
    \ .!= n]\n    \n    primes_less_than = primes_less_than[primes_less_than .!= n]\n\
    \    \n    primes_less_than = primes_less_than[primes_less_than .!= n]\n    \n\
    \    primes_less_than = primes_less_than[primes_less_than .!= n]\n    \n    primes_less_than\
    \ = primes_less_than[primes_less_than .!= n]\n    \n    primes_less_than = primes_less_than[primes_less_than\
    \ .!= n]\n    \n    primes_less_than = primes_less_than[primes_less_than .!= n]\n\
    \    \n    primes_less_than = primes_less_than[primes_less_than .!= n]\n    \n\
    \    primes_less_than = primes_less_than[primes_less_than .!= n]\n    \n    primes_less_than\
    \ = primes_less_than[primes_less_than .!= n]\n    \n    primes_less_than = primes_less_than[primes_less_than\
    \ .!= n]\n    \n    primes_less_than = primes_", "    if n < 2 \n        return\
    \ Vector{Int64}() \n    else \n        primes = primes_up_to_n(n) \n        primes_less_than\
    \ = primes[2:end] \n        primes_less_than = primes_less_than - primes_less_than[primes_less_than\
    \ .<= n] \n        primes_less_than = primes_less_than - primes_less_than[primes_less_than\
    \ .> n] \n        primes_less_than = primes_less_than - primes_less_than[primes_less_than\
    \ .< n] \n        return primes_less_than \n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.0>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.0>\ncount_up_to(20)\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(18)\n</cell>\n<code language=julia-1.0>\ncount_up_to(10)\n</cell>\n\
    <code language=julia-1.0>\ncount_up_to(11)\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.0>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.0>\ncount_up_to(11)\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.0>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.0>\ncount_up_to(11)\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.0>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.0>\ncount_up_to(11)\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.0>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.0>\ncount_up_to(11)\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.0>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.0>\ncount_up_to(11)\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.0>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.0>\ncount_up_to(11)\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.0>\ncount_up_to(11)", "    if\
    \ n == 0\n        Vector{}\n    else\n        primes = prime_numbers(n)\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = ", "    if n < 2 \n      \
    \  return Vector{Int64}() \n    else \n        count_up_to(n-1) + [Int64(n)]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(19)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(21)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(22)\n</cell>\n<code language=julia-1.5>\ncount_up_to(23)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(24)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(25)\n</cell>\n<code language=julia-1.5>\ncount_up_to(26)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(27)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(28)\n</cell>\n<code language=julia-1.5>\ncount_up_to(29)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(30)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(31)\n</cell>\n<code language=julia-1.5>\ncount_up_to(32)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(33)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(34)\n</cell>\n<code language=julia-1.5>\ncount_up_to(35)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(36)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(37)\n</cell>\n<code language=julia-1.5>\ncount_up_to(38)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(39)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(40)\n</cell>\n<code language=julia-1.5>\ncount_up_to(41)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(42)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(43)\n</cell>\n<code language=julia-1.5>\ncount_up_to(44)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(", "    count_up_to = []\n    if n == 0\n\
    \        count_up_to\n    else\n        count_up_to += count_up_to(n-1)\n    \
    \    for i in 2..n\n            if n % i == 0\n                count_up_to +=\
    \ [i]\n            end\n        end\n    end\nend\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=julia |>\n<code>", "    if n == 0\n        Vector{}\n    else\n    \
    \    primes = prime_numbers(n)\n        primes = primes[primes <= n]\n       \
    \ primes = primes[primes <= n]\n        primes = primes[primes <= n]\n       \
    \ primes = primes[primes <= n]\n        primes = primes[primes <= n]\n       \
    \ primes = primes[primes <= n]\n        primes = primes[primes <= n]\n       \
    \ primes = primes[primes <= n]\n        primes = primes[primes <= n]\n       \
    \ primes = primes[primes <= n]\n        primes = primes[primes <= n]\n       \
    \ primes = primes[primes <= n]\n        primes = primes[primes <= n]\n       \
    \ primes = primes[primes <= n]\n        primes = primes[primes <= n]\n       \
    \ primes = primes[primes <= n]\n        primes = primes[primes <= n]\n       \
    \ primes = primes[primes <= n]\n        primes = primes[primes <= n]\n       \
    \ primes = primes[primes <= n]\n        primes = primes[primes <= n]\n       \
    \ primes = primes[primes <= n]\n        primes = primes[primes <= n]\n       \
    \ primes = primes[primes <= n]\n        primes = primes[primes <= n]\n       \
    \ primes = primes[primes <= n]\n        primes = primes[primes <= n]\n       \
    \ primes = primes[primes <= n]\n        primes = primes[primes <= n]\n       \
    \ primes = primes[primes <= n]\n        primes = primes[primes <= n]\n       \
    \ primes = primes[primes <= n]\n        primes = primes[primes <= n]\n       \
    \ primes = primes[primes <= n]\n        primes = primes[primes <= n]\n       \
    \ primes = primes[primes <= n]\n        primes = primes[primes <= n]\n       \
    \ primes = primes[primes <= n]\n        primes = primes[primes <= n]\n       \
    \ primes = primes[primes <= n]\n        primes = primes[primes <= n]\n       \
    \ primes = primes[primes <= n]\n        primes = primes[primes <= n]\n       \
    \ primes = primes[primes <= n]\n        primes = primes[primes <= n]\n       \
    \ primes = primes[primes <= n]\n        primes = primes[primes <= n]\n       \
    \ primes = primes[primes <= n]\n        primes = primes[primes <= n]\n       \
    \ primes = ", "    if n == 0\n        Vector{}\n    else\n        primes = primes_up_to_n(n)\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        prime", "    if n < 2 \n      \
    \  return Vector{Int64}()\n    end\n    \n    primes = primes_up_to_n(n)\n   \
    \ \n    count_up = Vector{Int64}()\n    \n    for p in primes\n        if p >\
    \ n\n            break\n        end\n        if p <= n\n            count_up +=\
    \ [p]\n        end\n    end\n    \n    return count_up\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(100)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1000)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(10000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(100000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(10000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(100000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(100000000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(10000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(100000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1000000000000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(10000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(100000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(10000000000000000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(1000000000000000000000)\n</cell>\n\
    <code language=julia-", "    if n == 0 \n        return Vector{Int64}() \n   \
    \ else \n        primes = prime_numbers(n) \n        primes = primes[primes <=\
    \ n] \n        primes = primes[primes <= n] \n        primes = primes[primes <=\
    \ n] \n        primes = primes[primes <= n] \n        primes = primes[primes <=\
    \ n] \n        primes = primes[primes <= n] \n        primes = primes[primes <=\
    \ n] \n        primes = primes[primes <= n] \n        primes = primes[primes <=\
    \ n] \n        primes = primes[primes <= n] \n        primes = primes[primes <=\
    \ n] \n        primes = primes[primes <= n] \n        primes = primes[primes <=\
    \ n] \n        primes = primes[primes <= n] \n        primes = primes[primes <=\
    \ n] \n        primes = primes[primes <= n] \n        primes = primes[primes <=\
    \ n] \n        primes = primes[primes <= n] \n        primes = primes[primes <=\
    \ n] \n        primes = primes[primes <= n] \n        primes = primes[primes <=\
    \ n] \n        primes = primes[primes <= n] \n        primes = primes[primes <=\
    \ n] \n        primes = primes[primes <= n] \n        primes = primes[primes <=\
    \ n] \n        primes = primes[primes <= n] \n        primes = primes[primes <=\
    \ n] \n        primes = primes[primes <= n] \n        primes = primes[primes <=\
    \ n] \n        primes = primes[primes <= n] \n        primes = primes[primes <=\
    \ n] \n        primes = primes[primes <= n] \n        primes = primes[primes <=\
    \ n] \n        primes = primes[primes <= n] \n        primes = primes[primes <=\
    \ n] \n        primes = primes[primes <= n] \n        primes = primes[primes <=\
    \ n] \n        primes = primes[primes <= n] \n        primes = primes[primes <=\
    \ n] \n        primes = primes[primes <= n] \n        primes = primes[primes <=\
    \ n] \n        primes = primes[primes <= n] \n        primes = primes[primes <=\
    \ n] \n        primes = primes[primes <= n] \n        primes = ", "    if n ==\
    \ 0\n        Vector{Int64}()\n    else\n        primes = primes_up_to_n(n)\n \
    \       primes = primes[primes <= n]\n        primes[primes > n] = primes[primes\
    \ > n]\n        primes\n    end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an array\
    \ of integers and returns the number of positive integers that are less than or\
    \ equal to each of the integers in the array.\n    for example:\n    count_less_than([2,3,5,7,11,13,17])\
    \ => [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17,19]) => [2,3,5,7,11,13,17]\n\
    \    count_less_than([2,3,5,7,11,13,17,19,21]) => [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17,19,21,25])\
    \ => [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17,19,21,25,31]) =>\
    \ [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17,19,21,25,31,37]) =>\
    \ [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17,19,21,25,31,37,41])\
    \ => [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17,19,21,25,31,37,41,43,47])\
    \ => [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17,19,21,25,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97])\
    \ => [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17,19,21,25,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,",
  "    \n    primes = prime_numbers(n)\n    primes = primes[2:end]\n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    ", "    if n == 0\n        return Vector{Int64}()\n    else\n\
    \        primes = primes_up_to_n(n)\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        return primes\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an integer $n$ and returns the\
    \ number of prime numbers less than $n$. \nFor example count_primes(5) => 2\n\
    count_primes(11) => 4\ncount_primes(0) => 0\ncount_primes(20) => 4\ncount_primes(1)\
    \ => 0\ncount_primes(18) => 4", "    if n < 0\n        error(\"count_up_to only\
    \ accepts non-negative integers\")\n    end\n    \n    primes = prime_numbers(n)\n\
    \    \n    primes = primes[2:end]\n    \n    primes = primes[primes <= n]\n  \
    \  \n    primes = primes[primes <= n]\n    \n    return primes\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(100)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(10000)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(100000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(10000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(100000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1000000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(10000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(100000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(10000000000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(10000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(100000000000000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(10000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(100000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(1000000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(100", "    if n == 0 \n        Vector{Int64}() \n    else \n     \
    \   count_up_to(n-1) + [Int64(n)]\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.4>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.4>\ncount_up_to(20)\n</cell>\n<code language=julia-1.4>\n\
    count_up_to(18)\n</cell>\n<code language=julia-1.4>\ncount_up_to(19)\n</cell>\n\
    <code language=julia-1.4>\ncount_up_to(20)\n</cell>\n<code language=julia-1.4>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.4>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.4>\ncount_up_to(20)\n</cell>\n<code language=julia-1.4>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.4>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.4>\ncount_up_to(20)\n</cell>\n<code language=julia-1.4>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.4>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.4>\ncount_up_to(20)\n</cell>\n<code language=julia-1.4>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.4>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.4>\ncount_up_to(20)\n</cell>\n<code language=julia-1.4>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.4>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.4>\ncount_up_to(20)\n</cell>\n<code language=julia-1.4>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.4>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.4>\ncount_up_to(20)\n</cell>\n<code language=julia-1.4>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.4>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.4>\ncount_up_to(20)\n</cell>\n<code language=julia-1.4>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.4>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.4>\ncount_up_to(20)\n</cell>\n<code language=julia-1.4>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.4>\ncount_up_to(20)", "    if\
    \ n == 0 \n        Vector{Int64}() \n    else \n        count_up_to(n-1) + [n\
    \ isprime] \n    end\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis code does\
    \ not work. `count_up_to(0)` returns an empty vector. `count_up_to(1)` returns\
    \ `[1]`.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I fixed the code accordingly.\n\
    <|/ c |>\n<| a tags=julia |>\n<code>", "    if n < 0\n        error(\"count_up_to:\
    \ n must be non-negative\")\n    end\n    \n    primes = prime_numbers(n)\n  \
    \  \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    ", "    if n < 0 \n        error(\"count_up_to: n must be non-negative\"\
    )\n    end\n    \n    primes = prime_numbers(n)\n    \n    primes = primes[2:end]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = ", "    if n < 2 \n\
    \        return Vector{Int64}()\n    \n    primes = prime_numbers(n)\n    \n \
    \   prime_numbers_less_than = prime_numbers_less_than(n)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x -> x < n)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x -> x % 2 != 0)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x -> x % 3 != 0)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x -> x % 5 != 0)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x -> x % 7 != 0)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x -> x % 11 != 0)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x -> x % 13 != 0)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x -> x % 17 != 0)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x -> x % 19 != 0)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x -> x % 23 != 0)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x -> x % 29 != 0)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x -> x % 31 != 0)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x -> x % 37 != 0)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x -> x % 41 != 0)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x -> x % 43 != 0)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x -> x % 47 != 0)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x -> x % 51 != 0)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x -> x % 55 != 0)\n    \n    prime_number",
  "    if n < 0 \n        return Vector{Int64}()\n    end\n    \n    primes = prime_numbers(n)\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes > 1]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[prime", "    if n < 0\n        error(\"count_up_to\
    \ only accepts non-negative integers\")\n    end\n    \n    primes = prime_numbers(n)\n\
    \    \n    prime_array = []\n    \n    for p in primes\n        if p > n\n   \
    \         break\n        end\n        \n        push!(prime_array, p)\n    end\n\
    \    \n    prime_array\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an integer\
    \ $n$ and returns the number of prime numbers less than or equal to $n$. \nFor\
    \ example count_primes(5) => 2\nFor example count_primes(11) => 5\nFor example\
    \ count_primes(0) => 0\nFor example count_primes(20) => 7\nFor example count_primes(1)\
    \ => 1", "    if n == 0\n        Vector{Int64}()\n    else\n        primes = primes_up_to_n(n)\n\
    \        prime_numbers = primes[2:end]\n        prime_numbers_less_than = prime_numbers[prime_numbers\
    \ < n]\n        prime_numbers_less_than\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an array of integers and returns the number of positive\
    \ integers in the array.\n    for example:\n    count_positive([2,-3,-5,7,-9,-10,-15,-20,0])\
    \ => 4\n    count_positive([2,-3,-5,7,-9,-10,-15,-20,0]) => 0\n    count_positive([2,-3,-5,7,-9,-10,-15,-20])\
    \ => 0\n    count_positive([2,-3,-5,7,-9,-10,-15,-20,0]) => 0\n    count_positive([2,-3,-5,7,-9,-10,-15,-20,0])\
    \ => 0\n    count_positive([2,-3,-5,7,-9,-10,-15,-20,0]) => 0\n    count_positive([2,-3,-5,7,-9,-10,-15,-20,0])\
    \ => 0\n    count_positive([2,-3,-5,7,-9,-10,-15,-20,0]) => 0\n    count_positive([2,-3,-5,7,-9,-10,-15,-20,0])\
    \ => 0\n    count_positive([2,-3,-5,7,-9,-10,-15,-20,0]) => 0\n    count_positive([2,-3,-5,7,-9,-10,-15,-20,0])\
    \ => 0\n    count_positive([2,-3,-5,7,-9,-10,-15,-20,0]) => 0\n    count_positive([2,-3,-5,7,-9,-10,-15,-20,0])\
    \ => 0\n    count_positive([2,-3,-5,7,-9,-10,-15,-20,0]) => 0\n    count_positive([2,-3,-5,7,-9,-10,-15,-20,0])\
    \ => 0\n    ", "    if n == 0\n        Vector{}\n    else\n        primes = primes_up_to_n(n)\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        prime", "    if n < 0\n       \
    \ error(\"count_up_to only accepts non-negative integers\")\n    end\n    \n \
    \   primes = prime_numbers(n)\n    primes = primes[2:end]\n    \n    primes =\
    \ primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[", "    if n < 2\n        return\
    \ Vector{Int64}()\n    end\n    primes = primes_list(n)\n    primes = primes[2:end]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    prime", "    if n < 2 \n      \
    \  return Vector{Int64}() \n    else \n        primes = primes_up_to_n(n) \n \
    \       primes_less_than = primes[2:end] \n        primes_less_than = primes_less_than\
    \ .- primes[1] \n        count_up_to(n-1) \n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.3>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.3>\ncount_up_to(20)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(18)\n</cell>\n<code language=julia-1.3>\ncount_up_to(19)\n</cell>\n\
    <code language=julia-1.3>\ncount_up_to(20)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(21)\n</cell>\n<code language=julia-1.3>\ncount_up_to(22)\n</cell>\n\
    <code language=julia-1.3>\ncount_up_to(23)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(24)\n</cell>\n<code language=julia-1.3>\ncount_up_to(25)\n</cell>\n\
    <code language=julia-1.3>\ncount_up_to(26)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(27)\n</cell>\n<code language=julia-1.3>\ncount_up_to(28)\n</cell>\n\
    <code language=julia-1.3>\ncount_up_to(29)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(30)\n</cell>\n<code language=julia-1.3>\ncount_up_to(31)\n</cell>\n\
    <code language=julia-1.3>\ncount_up_to(32)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(33)\n</cell>\n<code language=julia-1.3>\ncount_up_to(34)\n</cell>\n\
    <code language=julia-1.3>\ncount_up_to(35)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(36)\n</cell>\n<code language=julia-1.3>\ncount_up_to(37)\n</cell>\n\
    <code language=julia-1.3>\ncount_up_to(38)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(39)\n</cell>\n<code language=julia-1.3>\ncount_up_to(40)\n</cell>\n\
    <code language=julia-1.3>\ncount_up_to(41)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(42)\n</cell>\n<code language=julia-1.3>\ncount_up_", "    if n < 0\
    \ \n        error(\"count_up_to: n must be non-negative\")\n    end\n    \n  \
    \  primes = prime_numbers(n)\n    primes = primes[2:end]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    return primes\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an array\
    \ of integers and returns the number of positive integers in the array.", "  \
    \  if n < 0\n        error(\"count_up_to only accepts non-negative integers\"\
    )\n    end\n    \n    primes = prime_numbers(n)\n    \n    prime_numbers_less_than\
    \ = primes[2:end]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .<= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .> n]\n    \n    return prime_numbers_less_than\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an array of integers and returns the sum of the squares\
    \ of the integers in the array.\n    for example:\n    square_array(5) => 25\n\
    \    square_array(11) => 479\n    square_array(0) => 0\n    square_array(20) =>\
    \ 479\n    square_array(1) => 0\n    square_array(18) => 479\n    \"\"\"", " \
    \   if n < 0\n        error(\"count_up_to only accepts non-negative integers\"\
    )\n    end\n    \n    primes = primes_up_to(n)\n    \n    count_up_to = []\n \
    \   for p in primes\n        if p > n\n            count_up_to += [n]\n      \
    \      break\n        end\n        \n        count_up_to += [p]\n    end\n   \
    \ \n    return count_up_to\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an array\
    \ and returns the number of elements that are less than or equal to each element\
    \ in the array. For example:\n    count_less_than([1,2,3]) => 2\n    count_less_than([1,2,3])\
    \ => 0\n    count_less_than([1,2,3]) => 0\n    count_less_than([1,2,3]) => 0\n\
    \    count_less_than([1,2,3]) => 0\n    count_less_than([1,2,3]) => 0\n    count_less_than([1,2,3])\
    \ => 0\n    count_less_than([1,2,3]) => 0\n    count_less_than([1,2,3]) => 0\n\
    \    count_less_than([1,2,3]) => 0\n    count_less_than([1,2,3]) => 0\n    count_less_than([1,2,3])\
    \ => 0\n    count_less_than([1,2,3]) => 0\n    count_less_than([1,2,3]) => 0\n\
    \    count_less_than([1,2,3]) => 0\n    count_less_than([1,2,3]) => 0\n    count_less_than([1,2,3])\
    \ => 0\n    count_less_than([1,2,3]) => 0\n    count_less_than([1,2,3]) => 0\n\
    \    count_less_than([1,2,3]) => 0\n    count_less_than([1,2,3]) => 0\n    count_less_than([1,2,3])\
    \ => 0\n    count_less_than([1,2,3]) => 0\n    count_less_than([1,2,3]) => 0\n\
    \    count_less_than([1,2,3]) => 0\n    count_less_than([1,2,3]) => 0\n    count_less_than([1,2,3])\
    \ => 0\n    count_less_than([1,2,3]) => 0\n    count_less_than([1,2,3]) => 0\n\
    \    count_less_than([1,2,3]) => 0\n    count_less_than([1,2,3]) => 0\n    ",
  "    \n    if n == 0\n        Vector{}\n    else\n        primes = prime_numbers(n)\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        ", "    if n < 2 \n        return\
    \ [] \n    else \n        primes = prime_numbers(n) \n        primes = primes[2:end]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n] ",
  "    if n < 2 \n        return Vector{Int64}() \n    else \n        count_up_to(n-1)\n\
    \        primes = prime_list_upto(n) \n        prime_numbers = primes[2:end] \n\
    \        prime_numbers_less_than = prime_numbers[prime_numbers < n] \n       \
    \ prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than <\
    \ n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ > n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ > n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ > n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ > n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ > n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ > n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ > n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ > n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ > n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ > n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ > n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ > n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ > n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ > n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ > n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ > n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ > n] ", "    if n < 0 \n        error(\"count_up_to only accepts non-negative\
    \ integers\") \n    end\n    \n    primes = prime_numbers(n) \n    \n    primes\
    \ = primes[2:end] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n", "    if n < 1 \n        return Vector{Int64}()\
    \ \n    else \n        primes = prime_numbers(n) \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = ", "    if n\
    \ < 0\n        error(\"count_up_to only accepts non-negative integers\")\n   \
    \ end\n    \n    primes = prime_numbers(n)\n    \n    prime_numbers = prime_numbers(n)\n\
    \    \n    prime_numbers = prime_numbers[prime_numbers < n]\n    \n    prime_numbers\
    \ = prime_numbers[prime_numbers > 1]\n    \n    prime_numbers = prime_numbers[prime_numbers\
    \ != 0]\n    \n    prime_numbers = prime_numbers[prime_numbers != 1]\n    \n \
    \   prime_numbers = prime_numbers[prime_numbers != 2]\n    \n    prime_numbers\
    \ = prime_numbers[prime_numbers != 3]\n    \n    prime_numbers = prime_numbers[prime_numbers\
    \ != 4]\n    \n    prime_numbers = prime_numbers[prime_numbers != 5]\n    \n \
    \   prime_numbers = prime_numbers[prime_numbers != 6]\n    \n    prime_numbers\
    \ = prime_numbers[prime_numbers != 7]\n    \n    prime_numbers = prime_numbers[prime_numbers\
    \ != 8]\n    \n    prime_numbers = prime_numbers[prime_numbers != 9]\n    \n \
    \   prime_numbers = prime_numbers[prime_numbers != 10]\n    \n    prime_numbers\
    \ = prime_numbers[prime_numbers != 11]\n    \n    prime_numbers = prime_numbers[prime_numbers\
    \ != 12]\n    \n    prime_numbers = prime_numbers[prime_numbers != 13]\n    \n\
    \    prime_numbers = prime_numbers[prime_numbers != 14]\n    \n    prime_numbers\
    \ = prime_numbers[prime_numbers != 15]\n    \n    prime_numbers = prime_numbers[prime_numbers\
    \ != 16]\n    \n    prime_numbers = prime_numbers[prime_numbers != 17]\n    \n\
    \    prime_numbers = prime_numbers[prime_numbers != 18]\n    \n    prime_numbers\
    \ = prime_numbers[prime_numbers != 19]\n    \n    prime_numbers = prime_numbers[prime_numbers\
    \ != 20]\n    \n    prime_numbers = prime_numbers[prime_numbers != 21]\n    \n\
    \    prime_numbers = prime_numbers[prime_numbers != 22]\n    \n    prime_numbers\
    \ = prime_numbers[prime_numbers != 23]\n    \n    prime_numbers = prime_numbers[prime_numbers\
    \ != ", "    if n == 0\n        Vector{Int64}()\n    else\n        primes = prime_numbers(n)\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]", "    if n == 0\n        Vector{}\n   \
    \ else\n        primes = prime_numbers(n)\n        prime_numbers_less_than = primes[2:end]\n\
    \        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .<= n]\n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .> n]\n        prime_numbers_less_than\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes an array and returns the number of elements that are greater\
    \ than or equal to each element in an array. For example:\n    count_greater_than_or_equal([1,2,3,4,5])\
    \ => 3\n    count_greater_than_or_equal([1,2,3,4,5,6,7,8,9,10]) => 5\n    count_greater_than_or_equal([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\
    \ => 20\n    count_greater_than_or_equal([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\
    \ => 100\n    count_greater_than_or_equal([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49",
  "    if n == 0 \n        Vector{Int64}() \n    else \n        count_up_to(n - 1)\n\
    \        push!(count_up_to(n), n)\n    end\nend\n</cell>\n<text>\nExercise 4\n\
    Write a function that takes an integer $n$ and returns the number of prime numbers\
    \ less than or equal to $n$.", "    if n < 2 \n        return Vector{Int64}()\
    \ \n    else \n        primes = primes_up_to_n(n) \n        prime_numbers = primes[2:end]\
    \ \n        prime_numbers = prime_numbers[prime_numbers != n] \n        prime_numbers\
    \ = prime_numbers[prime_numbers > 0] \n        prime_numbers = prime_numbers[prime_numbers\
    \ < n] \n        prime_numbers = prime_numbers[prime_numbers != n] \n        prime_numbers\
    \ = prime_numbers[prime_numbers != n] \n        prime_numbers = prime_numbers[prime_numbers\
    \ != n] \n        prime_numbers = prime_numbers[prime_numbers != n] \n       \
    \ prime_numbers = prime_numbers[prime_numbers != n] \n        prime_numbers =\
    \ prime_numbers[prime_numbers != n] \n        prime_numbers = prime_numbers[prime_numbers\
    \ != n] \n        prime_numbers = prime_numbers[prime_numbers != n] \n       \
    \ prime_numbers = prime_numbers[prime_numbers != n] \n        prime_numbers =\
    \ prime_numbers[prime_numbers != n] \n        prime_numbers = prime_numbers[prime_numbers\
    \ != n] \n        prime_numbers = prime_numbers[prime_numbers != n] \n       \
    \ prime_numbers = prime_numbers[prime_numbers != n] \n        prime_numbers =\
    \ prime_numbers[prime_numbers != n] \n        prime_numbers = prime_numbers[prime_numbers\
    \ != n] \n        prime_numbers = prime_numbers[prime_numbers != n] \n       \
    \ prime_numbers = prime_numbers[prime_numbers != n] \n        prime_numbers =\
    \ prime_numbers[prime_numbers != n] \n        prime_numbers = prime_numbers[prime_numbers\
    \ != n] \n        prime_numbers = prime_numbers[prime_numbers != n] \n       \
    \ prime_numbers = prime_numbers[prime_numbers != n] \n        prime_numbers =\
    \ prime_numbers[prime_numbers != n] \n        prime_numbers = prime_numbers[prime_numbers\
    \ != n] \n        prime_numbers = prime_numbers[prime_numbers != n] \n       \
    \ prime_numbers = prime_numbers[prime_numbers != n] \n        prime_numbers =\
    \ prime_numbers[prime_numbers != n] \n        prime_numbers = prime_numbers[prime_",
  "    if n == 0\n        Vector{Int64}()\n    else\n        count_up_to(n-1) + [n\
    \ for n in 1:n if prime_number(n)]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nExercise: Write a\
    \ function that takes an integer and returns the number of prime factors of that\
    \ integer.", "    if n < 1 \n        return Vector{Int64}() \n    else \n    \
    \    primes = prime_numbers(n) \n        primes = primes[primes <= n] \n     \
    \   primes = primes[primes <= n] \n        primes = primes[primes <= n] \n   \
    \     primes = primes[primes <= n] \n        primes = primes[primes <= n] \n \
    \       primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = ", "    if n < 0\n  \
    \      error(\"count_up_to called with negative number\")\n    end\n    \n   \
    \ primes = primes_up_to_n(n)\n    \n    primes = primes[2:end]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    return\
    \ primes\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an array of integers and returns\
    \ the number of positive integers in it.", "    if n < 0\n        return Vector{Int64}()\n\
    \    end\n    \n    primes = primes_up_to_n(n)\n    \n    primes_less_than = primes[2:end]\n\
    \    \n    primes_less_than = primes_less_than .- primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .- primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .- primes[1]\n    \n    primes_less_than = primes_less_than .- primes[1]\n \
    \   \n    primes_less_than = primes_less_than .- primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .- primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .- primes[1]\n    \n    primes_less_than = primes_less_than .- primes[1]\n \
    \   \n    primes_less_than = primes_less_than .- primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .- primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .- primes[1]\n    \n    primes_less_than = primes_less_than .- primes[1]\n \
    \   \n    primes_less_than = primes_less_than .- primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .- primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .- primes[1]\n    \n    primes_less_than = primes_less_than .- primes[1]\n \
    \   \n    primes_less_than = primes_less_than .- primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .- primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .- primes[1]\n    \n    primes_less_than = primes_less_than .- primes[1]\n \
    \   \n    primes_less_than = primes_less_than .- primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .- primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .- primes[1]\n    \n    primes_less_than = primes_less_than .- primes[1]\n \
    \   \n    primes_less_than = primes_less_than .- primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .- primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .- primes[1]\n    \n    primes_less_than = primes_less_than .- ", "    count_up_to(n)\
    \ = Vector{Int64}()\n    count_up_to(n) = count_up_to(n-1)\n    count_up_to(n)\
    \ = count_up_to(n-1)\n    count_up_to(n) = count_up_to(n-1)\n    count_up_to(n)\
    \ = count_up_to(n-1)\n    count_up_to(n) = count_up_to(n-1)\n    count_up_to(n)\
    \ = count_up_to(n-1)\n    count_up_to(n) = count_up_to(n-1)\n    count_up_to(n)\
    \ = count_up_to(n-1)\n    count_up_to(n) = count_up_to(n-1)\n    count_up_to(n)\
    \ = count_up_to(n-1)\n    count_up_to(n) = count_up_to(n-1)\n    count_up_to(n)\
    \ = count_up_to(n-1)\n    count_up_to(n) = count_up_to(n-1)\n    count_up_to(n)\
    \ = count_up_to(n-1)\n    count_up_to(n) = count_up_to(n-1)\n    count_up_to(n)\
    \ = count_up_to(n-1)\n    count_up_to(n) = count_up_to(n-1)\n    count_up_to(n)\
    \ = count_up_to(n-1)\n    count_up_to(n) = count_up_to(n-1)\n    count_up_to(n)\
    \ = count_up_to(n-1)\n    count_up_to(n) = count_up_to(n-1)\n    count_up_to(n)\
    \ = count_up_to(n-1)\n    count_up_to(n) = count_up_to(n-1)\n    count_up_to(n)\
    \ = count_up_to(n-1)\n    count_up_to(n) = count_up_to(n-1)\n    count_up_to(n)\
    \ = count_up_to(n-1)\n    count_up_to(n) = count_up_to(n-1)\n    count_up_to(n)\
    \ = count_up_to(n-1)\n    count_up_to(n) = count_up_to(n-1)\n    count_up_to(n)\
    \ = count_up_to(n-1)\n    count_up_to(n) = count_up_to(n-1)\n    count_up_to(n)\
    \ = count_up_to(n-1)\n    count_up_to(n) = count_up_to(n-1)\n    count_up_to(n)\
    \ = count_up_to(n-1)\n    count_up_to(n) = count_up_to(n-1)\n    count_up_to(n)\
    \ = count_up_to(n-1)\n    count_up_to(n) = count_up_to(n-1)\n    count_up_to(n)\
    \ = count_up_to(n-1)\n    count_up_to(n) = count_up_to(n-1)\n    count_up_to(n)\
    \ = count_up_to(n-1)\n    count_up_to(n) = count_up_to(n-1)\n    count_up_to(n)\
    \ = count_", "    if n < 0\n        error(\"count_up_to: n must be non-negative\"\
    )\n    end\n    \n    primes = prime_list_generator(n)\n    \n    prime_numbers\
    \ = Vector{Int64}()\n    \n    for p in primes\n        if p <= n\n          \
    \  prime_numbers.push(p)\n        end\n    end\n    \n    prime_numbers = prime_numbers[prime_numbers.length:end]\n\
    \    \n    return prime_numbers\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an integer\
    \ $n$ and returns the number of prime numbers less than or equal to $n$. \nFor\
    \ example count_primes(5) => 3 because there are 3 prime numbers less than or\
    \ equal to 5.\nFor example count_primes(11) => 5 because there are 5 prime numbers\
    \ less than or equal to 11.\nFor example count_primes(0) => 0 because there are\
    \ no prime numbers less than or equal to 0.\nFor example count_primes(20) => 5\
    \ because there are 5 prime numbers less than or equal to 20.\nFor example count_primes(1)\
    \ => 1 because there are no prime numbers less than or equal to 1.\nFor example\
    \ count_primes(18) => 3 because there are 3 prime numbers less than or equal to\
    \ 18.", "    if n < 2 \n        return Vector{Int64}()\n    end\n    \n    primes\
    \ = primes_up_to(n)\n    \n    primes = primes[2:end]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    return primes\nend\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(100)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(10000)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(100000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(10000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(100000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1000000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(10000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(100000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(10000000000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(10000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(100000000000000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(10000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(100000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(1000000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(10000000000000000000000)\n</", "    if n == 0\n        Vector{Int64}()\n\
    \    else\n        primes = prime_numbers(n)\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]", "    if n < 0\n        return Vector{}\n    \n    primes = primes_up_to_n(n)\n\
    \    \n    primes = primes[2:end]\n    \n    primes = primes[primes <= n]\n  \
    \  \n    primes = primes[primes <= n]\n    \n    return primes\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an integer $n$ and returns an\
    \ array of the prime factors of $n$. \nFor example if $n=6$ then $[2,3]$. \nThe\
    \ function should return an empty array if $n$ is less than 2.", "    if n < 1\
    \ \n        return Vector{Int64}() \n    else \n        primes = prime_numbers(n)\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = ", "    if n < 2 \n        return Vector{Int64}() \n    else\
    \ \n        primes = prime_numbers(n) \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = ", "    if n < 0 \n \
    \       return [] \n    else if n == 0 \n        return Vector{Int64}() \n   \
    \ else \n        primes = prime_numbers(n) \n        primes = primes[primes <=\
    \ n] \n        primes = primes[primes <= n] \n        primes = primes[primes <=\
    \ n] \n        primes = primes[primes <= n] \n        primes = primes[primes <=\
    \ n] \n        primes = primes[primes <= n] \n        primes = primes[primes <=\
    \ n] \n        primes = primes[primes <= n] \n        primes = primes[primes <=\
    \ n] \n        primes = primes[primes <= n] \n        primes = primes[primes <=\
    \ n] \n        primes = primes[primes <= n] \n        primes = primes[primes <=\
    \ n] \n        primes = primes[primes <= n] \n        primes = primes[primes <=\
    \ n] \n        primes = primes[primes <= n] \n        primes = primes[primes <=\
    \ n] \n        primes = primes[primes <= n] \n        primes = primes[primes <=\
    \ n] \n        primes = primes[primes <= n] \n        primes = primes[primes <=\
    \ n] \n        primes = primes[primes <= n] \n        primes = primes[primes <=\
    \ n] \n        primes = primes[primes <= n] \n        primes = primes[primes <=\
    \ n] \n        primes = primes[primes <= n] \n        primes = primes[primes <=\
    \ n] \n        primes = primes[primes <= n] \n        primes = primes[primes <=\
    \ n] \n        primes = primes[primes <= n] \n        primes = primes[primes <=\
    \ n] \n        primes = primes[primes <= n] \n        primes = primes[primes <=\
    \ n] \n        primes = primes[primes <= n] \n        primes = primes[primes <=\
    \ n] \n        primes = primes[primes <= n] \n        primes = primes[primes <=\
    \ n] \n        primes = primes[primes <= n] \n        primes = primes[primes <=\
    \ n] \n        primes = primes[primes <= n] \n        primes = primes[primes <=\
    \ n] \n        primes = primes[primes <= n] \n        primes = primes[primes <=\
    \ n] \n        primes = primes[", "    if n < 2 \n        return Vector{Int64}()\
    \ \n    else \n        primes = prime_numbers(n) \n        primes = primes[2:end]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[", "    if\
    \ n < 2\n        return Vector{Int64}()\n    end\n    \n    primes = primes_up_to_n(n)\n\
    \    \n    primes_less_than = primes[primes..<n]\n    \n    primes_less_than =\
    \ primes_less_than[primes_less_than.!=n]\n    \n    primes_less_than = primes_less_than[primes_less_than.!=1]\n\
    \    \n    return primes_less_than\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nExercise\nWrite a\
    \ function that takes an integer $n$ and returns the number of prime numbers less\
    \ than or equal to $n$. \nFor example count_primes(5) => [2,3,5,7,11,13,17]",
  "    count_up_to(n) = Vector{Int64}()\n    count_up_to(n) = count_up_to(n-1) + [Int64(n)]\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes an integer $n$ and returns the number of prime numbers\
    \ less than or equal to $n$.", "    if n < 0 \n        return [] \n    else if\
    \ n == 0 \n        return Vector{Int64}() \n    else \n        primes = prime_numbers(n)\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[", "    if\
    \ n == 0\n        Vector{}\n    else\n        primes = prime_numbers(n)\n    \
    \    prime_numbers_less_than = prime_numbers_less_than(n)\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime", " \
    \   if n < 0 \n        error(\"count_up_to only accepts non-negative integers\"\
    ) \n    else if n == 0 \n        Vector{Int64}() \n    else \n        count_up_to(n-1)\
    \ + [n for n in prime_numbers(n) if n < n]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an array of integers and returns the number of positive\
    \ integers that are less than or equal to each of the integers in the array.\n\
    for example:\ncount_less_than([2,3,5,7,11,13,17,19]) => [2,3,5,7,11,13,17]\ncount_less_than([2,3,5,7,11,13,17])\
    \ => [2,3,5,7,11,13,17]\ncount_less_than([2,3,5,7,11,13,17,19]) => [2,3,5,7,11,13,17]\n\
    count_less_than([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\ncount_less_than([2,3,5,7,11,13,17,19])\
    \ => [2,3,5,7,11,13,17]\ncount_less_than([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n\
    count_less_than([2,3,5,7,11,13,17,19]) => [2,3,5,7,11,13,17]\ncount_less_than([2,3,5,7,11,13,17])\
    \ => [2,3,5,7,11,13,17]\ncount_less_than([2,3,5,7,11,13,17,19]) => [2,3,5,7,11,13,17]\n\
    count_less_than([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\ncount_less_than([2,3,5,7,11,13,17,19])\
    \ => [2,3,5,7,11,13,17]\ncount_less_than([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n\
    count_less_than([2,3,5,7,11,13,17,19]) => [2,3,5,7,11,13,17]\ncount_less_than([2,3,5,7,11,13,17])\
    \ => [2,3,5,7,11,13,17]\ncount_", "    count_up_to(n) = Vector{Int64}()\n    \n\
    \    if n < 0\n        return count_up_to(0)\n    end\n    \n    if n == 0\n \
    \       return count_up_to(1)\n    end\n    \n    count_up_to(n-1) = count_up_to(n-1)\
    \ + [Int64(n)]\n    \n    for i = 2 to Int(sqrt(n))\n        if count_up_to(n-i)\
    \ == count_up_to(n)\n            return count_up_to(n)\n        end\n    end\n\
    \    \n    return count_up_to(n)\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(19)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(21)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(22)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(23)\n</cell>\n<code language=julia-1.5>\ncount_up_to(24)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(25)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(26)\n</cell>\n<code language=julia-1.5>\ncount_up_to(27)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(28)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(29)\n</cell>\n<code language=julia-1.5>\ncount_up_to(30)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(31)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(32)\n</cell>\n<code language=julia-1.5>\ncount_up_to(33)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(34)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(35)\n</cell>\n<code language=julia-1.5>\ncount_up_to(36)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(37)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(38)\n</cell>\n<code language=julia-1.5>\ncount_up_to(39)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(40)\n</cell>\n", "    if n < 1 \n     \
    \   return Vector{Int64}() \n    else \n        primes = prime_numbers(n) \n \
    \       primes = primes[2:end] \n        primes = primes[primes <= n] \n     \
    \   primes = primes[primes <= n] \n        primes = primes[primes <= n] \n   \
    \     primes = primes[primes <= n] \n        primes = primes[primes <= n] \n \
    \       primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[", "    if n == 0 \n        Vector{Int64}() \n    else\
    \ \n        count_up_to(n-1) + [n isprime] \n    end\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis code does not work. `count_up_to(5)` returns `[2,3]` but `count_up_to(10)`\
    \ returns `[2,3,5,7]`\n<|/ c |>\n<| c |>\nI fixed the bug, thank you for pointing\
    \ it out. Now it should work fine.\n<|/ c |>\n<| c |>\nThis code still does not\
    \ work. `count_up_to(5)` returns `[2,3]` but `count_up_to(10)` returns `[2,3,5,7]`\n\
    <|/ c |>\n<| c |>\nI fixed the bug, thank you for pointing it out. Now it should\
    \ work fine.\n<|/ c |>\n<| c |>\nThis code still does not work. `count_up_to(5)`\
    \ returns `[2,3]` but `count_up_to(10)` returns `[2,3,5,7]`\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "    if n < 2 \n        return Vector{Int64}() \n    else \n  \
    \      primes = prime_numbers(n) \n        primes = primes[primes <= n] \n   \
    \     primes = primes[primes <= n] \n        primes = primes[primes <= n] \n \
    \       primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = ", "    if n < 0\n  \
    \      error(\"count_up_to only takes non-negative integers\")\n    end\n    \n\
    \    primes = prime_list_generator()\n    primes = primes[2:end]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[", "    if n < 2 \n       \
    \ return Vector{Int64}() \n    else \n        primes = primes_up_to_n(n) \n  \
    \      primes_less_than = primes[2:end] \n        primes_less_than = primes_less_than[primes_less_than\
    \ .< n] \n        primes_less_than = primes_less_than .+ 1 \n        count_up_to(n)\
    \ =  primes_less_than \n    end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an array\
    \ of integers and returns the number of positive integers less than or equal to\
    \ each of the integers in the array.", "    if n < 2 \n        return Vector{Int64}()\n\
    \    \n    primes = prime_numbers(n)\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes ", " \
    \   primes = primes_up_to_n(n)\n    primes = primes[2:end]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    return primes\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise: Write a function that takes an array\
    \ of integers and returns the number of prime numbers less than or equal to each\
    \ element in the array."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
