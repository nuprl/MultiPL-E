name: HumanEval_29_filter_by_prefix
language: julia
prompt: "\"\"\" Filter an input list of strings only for ones that start with a given\
  \ prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
  \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
  \ prefix::String)::Vector{String} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
  \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
  , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
  ])\nend\n"
completions: ["    strings = strings[:]\n    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    return strings\nend", "    \n    prefix_length = length(prefix)\n\
    \    \n    strings = filter( x -> startswith(String(x), prefix), strings)\n  \
    \  \n    if prefix_length == 0\n        return strings\n    \n    strings = filter(\
    \ x -> startswith(String(x), prefix), strings)\n    \n    if prefix_length ==\
    \ 1\n        return strings\n    \n    strings = filter( x -> startswith(String(x),\
    \ prefix), strings)\n    \n    if prefix_length == 2\n        return strings\n\
    \    \n    strings = filter( x -> startswith(String(x), prefix), strings)\n  \
    \  \n    if prefix_length == 3\n        return strings\n    \n    strings = filter(\
    \ x -> startswith(String(x), prefix), strings)\n    \n    if prefix_length ==\
    \ 4\n        return strings\n    \n    strings = filter( x -> startswith(String(x),\
    \ prefix), strings)\n    \n    if prefix_length == 5\n        return strings\n\
    \    \n    strings = filter( x -> startswith(String(x), prefix), strings)\n  \
    \  \n    if prefix_length == 6\n        return strings\n    \n    strings = filter(\
    \ x -> startswith(String(x), prefix), strings)\n    \n    if prefix_length ==\
    \ 7\n        return strings\n    \n    strings = filter( x -> startswith(String(x),\
    \ prefix), strings)\n    \n    if prefix_length == 8\n        return strings\n\
    \    \n    strings = filter( x -> startswith(String(x), prefix), strings)\n  \
    \  \n    if prefix_length == 9\n        return strings\n    \n    strings = filter(\
    \ x -> startswith(String(x), prefix), strings)\n    \n    if prefix_length ==\
    \ 10\n        return strings\n    \n    strings = filter( x -> startswith(String(x),\
    \ prefix), strings)\n    \n    if prefix_length == 11\n        return strings\n\
    \    \n    strings = filter( x -> startswith(String(x), prefix), strings)\n  \
    \  \n    if prefix_length == 12\n        return strings\n    \n    strings = filter(\
    \ x -> startswith(String(x), prefix), strings)\n    \n    if prefix_length ==\
    \ 13\n        return strings\n    \n    strings = filter( x -> startswith(String(x),\
    \ prefix), strings)\n    \n    if prefix_length == 14\n        return strings\n\
    \    \n    strings = filter( x -> startswith(String(x), prefix), strings)\n  \
    \  \n    if prefix_length == 15\n        return strings\n    \n    strings = filter(\
    \ x -> startswith(String(x), prefix), strings)\n    \n    if prefix_length ==\
    \ 16\n        return strings\n    \n    strings = filter( x -> startswith(String(x),\
    \ prefix), strings)\n    \n    if prefix_length == 17\n        return strings\n\
    \    \n    strings = filter( x -> startswith(String(x), prefix", "    \n    prefix_length\
    \ = length(prefix)\n    \n    filtered_strings = Vector{String}()\n    \n    for\
    \ string in strings\n        if startswith(string, prefix)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that filters a list of\
    \ strings based on whether they start with a given prefix.", "    \n    prefix_len\
    \ = length(prefix)\n    \n    strings = filter( x -> startswith(prefix, x), strings)\n\
    \    \n    if prefix_len == 0\n        return strings\n    \n    strings = filter(\
    \ x -> startswith(prefix, x), strings)\n    \n    if prefix_len > 0\n        strings\
    \ = filter( x -> startswith(prefix, x), strings)\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    strings = strings[:]\n  \
    \  \n    for s in strings\n        if startswith(prefix, s)\n            delete!(s,\
    \ prefix)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L::Vector{String}, prefix::String)::Vector{String}",
  "    \n    strings = strings[:]\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            strings.remove(string)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of strings and returns a vector of strings that start with a\
    \ given prefix.", "    \n    strings = strings[:]\n    \n    strings = filter(x->startswith(x,\
    \ prefix), strings)\n    \n    return strings\nend", "    \n    prefix_length\
    \ = length(prefix)\n    \n    strings = strings[:]\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            delete!(strings, string)\n\
    \        end\n    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.4>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise: Write a function that filters an input list of strings only for ones\
    \ that end with a given suffix.\n    >>> filter_by_suffix([], 'a')\n    []\n \
    \   >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc']\n \
    \   \"\"\"", "    \n    prefix_length = length(prefix)\n    \n    filtered_strings\
    \ = Vector{String}()\n    \n    for string in strings\n        if startswith(string,\
    \ prefix)\n            push!(filtered_strings, string)\n        end\n    end\n\
    \    \n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    filter_by_prefix(String[], String)", "    \n    strings = strings[:]\n    \n \
    \   strings = filter( x -> startswith(prefix, x), strings)\n    \n    return strings\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that filters an input list\
    \ of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([],\
    \ 'a')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'b')\n['abc', 'bcd']\n>>>\
    \ filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'c')\n['abc', 'bcd', 'cde']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'd')\n['abc', 'bcd', 'cde',\
    \ 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'e')\n['abc',\
    \ 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'q')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'r')\n['abc', 'b", "    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if string.startswith(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3: Filtering by length\nWrite a function\
    \ that filters an input list of strings only for ones that have a given length.\n\
    \    >>> filter_by_length([], 'a')\n    []\n    >>> filter_by_length(['abc', 'bcd',\
    \ 'cde', 'array'], 'a')\n    ['abc']\n    >>> filter_by_length(['abc', 'bcd',\
    \ 'cde', 'array'], 'b')\n    ['bcd', 'cde', 'array']\n    \"\"\"", "    \n   \
    \ prefix_length = length(prefix)\n    \n    filtered_strings = copy(strings)\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        filtered_strings = remove(filtered_strings, string)\n        end\n  \
    \  end\n    \n    return filtered_strings\nend\n</cell>\n<text>\nExercise 4\n\
    Write a function that filters an input list of strings only for those that end\
    \ with a given suffix.\n>>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'b')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'c')\n['abc', 'bcd', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'd')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'e')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'q')\n['abc', 'bcd', 'cde', 'array", "    \n    prefix_length\
    \ = length(prefix)\n    \n    strings = strings[:]\n    \n    for string in strings\n\
    \        if startswith(string, prefix)\n            remove!(strings, string)\n\
    \        end\n    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.4>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters a string list for strings that end with\
    \ a given suffix.", "    \n    strings = strings[:]\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            strings.remove(string)\n \
    \       end\n    end\n    \n    return strings\nend", "    filter!(x -> startswith(prefix,\
    \ x), strings)\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(words,\
    \ prefix) -> Vector{String}\nFilter a list of strings only for those that start\
    \ with a given prefix.\nThe function returns a new list with the filtered strings.\n\
    The prefix is case insensitive.", "    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if startswith(string, prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.4>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise\nWrite a function that filters a list of\
    \ strings based on whether they start with a given prefix.", "    \n    prefix_length\
    \ = length(prefix)\n    \n    filtered_strings = Vector{String}()\n    \n    for\
    \ string in strings\n        if startswith(string, prefix)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that filters an input\
    \ list of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([],\
    \ 'a')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'b')\n['abc', 'bcd']\n>>>\
    \ filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'c')\n['abc', 'bcd', 'cde']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'd')\n['abc', 'bcd', 'cde',\
    \ 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'e')\n['abc',\
    \ 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array", "    \n    strings\
    \ = strings[:]\n    \n    for s in strings\n        if startswith(prefix, s)\n\
    \            delete!(s, prefix)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String}", "    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters an input\
    \ list of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([],\
    \ 'a')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'ab')\n['abc']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'cd')\n['cde']\n>>> filter_by_suffix(['abc', 'bcd',\
    \ 'cde', 'array'], 'array')\n['array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'bcd')\n['bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'cde')\n\
    ['cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abc')\n['abc']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'bcdc')\n['bcd']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'bcdde')\n['bcd']\n>>> filter_by_suffix(['abc', 'bcd',\
    \ 'cde', 'array'], 'bcddea')\n['bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'bcddeab')\n['bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'bcddeabc')\n['bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'bcddeabcd')\n\
    ['bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'bcddeabcdc')\n\
    ['bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'bcddeabcdcde')\n\
    ['bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'bcddeabcdcdea')\n\
    ['bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'bcddeabcdcdeab')\n\
    ['bcd']", "    \n    strings = strings[:]\n    \n    i = 0\n    while i < length(strings)\n\
    \        if strings[i] == prefix\n            i += 1\n        else\n         \
    \   delete!(strings, i)\n        end\n    end\n    \n    return strings\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters\
    \ strings by a prefix and suffix.", "    \n    strings = strings[:]\n    \n  \
    \  for string in strings\n        if string.starts_with(prefix)\n            delete!(strings,\
    \ string)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters an input list of strings only for ones\
    \ that end with a given suffix.\n>>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'b')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'c')\n['abc', 'bcd', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'd')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'e')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'q')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'c", "    \n    prefix_length = length(prefix)\n    \n    filtered_strings\
    \ = Vector{String}()\n    \n    for string in strings\n        if startswith(string,\
    \ prefix)\n            push!(filtered_strings, string)\n        end\n    end\n\
    \    \n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters an input list of strings only for ones\
    \ that end with a given suffix.\n>>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'b')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'c')\n['abc', 'bcd', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'd')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'e')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array", "    \n    prefix_length\
    \ = length(prefix)\n    \n    filtered_strings = Vector{String}()\n    \n    for\
    \ string in strings\n        if string.starts_with(prefix)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that filters a given\
    \ list of strings only for the ones that end with a given suffix.\n>>> filter_by_suffix([],\
    \ 'a')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'b')\n['abc', 'bcd']\n>>>\
    \ filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'c')\n['abc', 'bcd', 'cde']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'd')\n['abc', 'bcd', 'cde',\
    \ 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'e')\n['abc',\
    \ 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'c", "    filter!(x -> startswith(prefix,\
    \ x), strings)\nend\n</cell>\n<text>\nExercise 3: Write a function that filters\
    \ an input list of strings only for ones that end with a given suffix.\n    >>>\
    \ filter_by_suffix([], 'a')\n    []\n    >>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'a')\n    ['abc']\n    \"\"\"", "    \n    strings = strings[:]\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        strings.remove(string)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise: Write a function that filters\
    \ an input list of strings only for those that end with a given suffix.\n    >>>\
    \ filter_by_suffix([], 'a')\n    []\n    >>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'a')\n    ['abc']\n    \"\"\"", "    \n    prefix_length = length(prefix)\n\
    \    \n    if prefix_length == 0\n        return strings\n    \n    strings_copy\
    \ = copy(strings)\n    \n    for string in strings_copy\n        if startswith(string,\
    \ prefix)\n            delete!(string, prefix_length)\n        end\n    end\n\
    \    \n    return strings_copy\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abd\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"abde\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdez\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abdeza\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abdezab\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abdezabd\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abdezabde\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abdezabdez\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abdezabdeza\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abdezabdezab\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abdezabdezabd\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdezabdezabde\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abdezabde", "    strings\
    \ = strings[:]\n    strings = filter((x) -> startswith(prefix, x), strings)\n\
    \    return strings\nend", "    \n    strings = strings[:]\n    \n    for string\
    \ in strings\n        if string.starts_with(prefix)\n            remove!(strings,\
    \ string)\n        end\n    end\n    \n    return strings\nend", "    \n    prefix_length\
    \ = length(prefix)\n    \n    filtered_strings = Vector{String}()\n    \n    for\
    \ string in strings\n        if startswith(string, prefix)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2: filter_by_prefix", "    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    return strings\nend\n</cell>\n<text>\nExercise 3: Filtering\
    \ by prefix\nWrite a function that filters an input list of strings only for ones\
    \ that start with a given prefix.\nFor example, given a list of strings:", " \
    \   filter!(x -> startswith(x, prefix), strings)\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that filters out all strings that do not start with a given\
    \ prefix.\nFor example, given the following list of strings:", "    \n    prefix_length\
    \ = length(prefix)\n    \n    filtered_strings = Vector{String}()\n    \n    for\
    \ string in strings\n        if startswith(string, prefix)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise: Write a function that filters strings by\
    \ a prefix and suffix.\nHint: Use filter_by_prefix and filter_by_suffix to solve\
    \ this exercise.", "    \n    strings = strings[:]\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            strings.remove(string)\n \
    \       end\n    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that filters an input list of strings only for ones that\
    \ end with a given suffix.\n>>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'b')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'c')\n['abc', 'bcd', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'd')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'e')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'q')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde", "    strings = filter(x->startswith(x, prefix), strings)\n   \
    \ return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2: filter_by_prefix",
  "    \n    strings = strings[:]\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            delete!(strings, string)\n        end\n    end\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that filters an input list of strings only for ones that end with a given suffix.\n\
    >>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'a')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'b')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'c')\n\
    ['abc', 'bcd', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'd')\n\
    ['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'e')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'c", "    \n    strings = strings[:]\n    \n    prefix_len = len(prefix)\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        strings.remove(string)\n        end\n    end\n    \n    return strings\n\
    end", "    \n    strings = strings[:]\n    \n    for string in strings\n     \
    \   if string.starts_with(prefix)\n            remove!(strings, string)\n    \
    \    end\n    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters an input list of strings only for ones\
    \ that end with a given suffix.\n>>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'b')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'c')\n['abc', 'bcd', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'd')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'e')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'c", "    \n    strings = strings[:]\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            delete!(strings, string)\n\
    \        end\n    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    filter_by_prefix(L::Vector{String}, prefix::String)::Vector{String}", "    \n\
    \    strings = strings[:]\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            delete!(strings, string)\n        end\n    end\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of strings and returns a vector of strings where each string\
    \ starts with the prefix \"array\".", "    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = copy(strings)\n    \n    for string in strings\n\
    \        if startswith(string, prefix)\n            filtered_strings = remove(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L::Vector{String}, prefix::String)::Vector{String}",
  "    strings = strings[:]\n    strings = filter((x) -> startswith(prefix, x), strings)\n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L::AbstractVector,\
    \ prefix::AbstractString)", "    \n    strings = filter( x -> startswith(prefix,\
    \ x), strings)\n    return strings\nend", "    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if startswith(string, prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 7: filter_by_prefix\nWrite a function that filters an input list of strings\
    \ only for ones that start with a given prefix.\nThis function should take as\
    \ input a vector of strings and a prefix string.\nThe function should return a\
    \ new vector of strings that only contains strings that start with the given prefix.\n\
    For example, given the following input vector:\n[\"abc\", \"bcd\", \"cde\", \"\
    array\"]\nand the prefix \"a\", the function should return the following new vector:\n\
    [\"abc\", \"array\"]\nThis function should work for any prefix string, not just\
    \ \"a\".\nFor example, given the following input vector:\n[\"abc\", \"bcd\", \"\
    cde\", \"array\"]\nand the prefix \"ab\", the function should return the following\
    \ new vector:\n[\"abc\"]\nHint: Use filter_by_prefix to solve this exercise.",
  "    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters a list of strings based on whether they start with a\
    \ given prefix.\nThis function should return a vector of strings that start with\
    \ the given prefix.", "    \n    prefix_length = length(prefix)\n    \n    filtered_strings\
    \ = Vector{String}()\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that filters an input list of strings only for ones that end with a given suffix.\n\
    >>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'a')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'b')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'c')\n\
    ['abc', 'bcd', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'd')\n\
    ['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'e')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'q')\n['abc', 'bcd', 'cde", "    \n    filtered_strings\
    \ = Vector{String}()\n    for string in strings\n        if string.starts_with(prefix)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that filters an input list of strings only for ones that end with\
    \ a given suffix.\n>>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'b')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'c')\n['abc', 'bcd', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'd')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'e')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc",
  "    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.startswith(prefix)\n     \
    \       push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<text>\nExercise 3\nWrite a function that filters\
    \ strings by a certain prefix and suffix.", "    \n    strings = strings[:]\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        delete!(strings, string)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters an input list of strings only for ones that end with a given suffix.\n\
    >>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'a')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'b')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'c')\n\
    ['abc', 'bcd', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'd')\n\
    ['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'e')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'c", "    \n    strings = strings[:]\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            delete!(strings, string)\n\
    \        end\n    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of strings and a prefix and returns\
    \ a vector of strings containing only the strings that start with the prefix.\
    \ For example, given the following input:", "    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if startswith(string, prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 3: filter_by_prefix\nWrite a function that filters an input list of strings\
    \ only for ones that start with a given prefix.\nThe function should return a\
    \ vector of strings that start with the given prefix.", "    \n    prefix_length\
    \ = length(prefix)\n    \n    filtered_strings = Vector{String}()\n    \n    for\
    \ string in strings\n        if string.starts_with(prefix)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise\nWrite a function that filters an input list\
    \ of strings only for ones that end with a given suffix.", "    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters an input list of strings only for ones\
    \ that end with a given suffix.\n>>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'b')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'c')\n['abc', 'bcd', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'd')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'e')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'q')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc",
  "    strings = filter( x -> startswith(x, prefix), strings)\n    return strings\n\
    end", "    strings = strings[strings.length>0]\n    strings = strings[strings[end-1].startsWith(prefix)]\n\
    \    return strings\nend", "    \n    prefix_length = length(prefix)\n    \n \
    \   strings = strings[:]\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)", "    \n    strings = strings[:]\n    \n    for string in\
    \ strings\n        if string.starts_with(prefix)\n            remove!(strings,\
    \ string)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that filters a list of strings based on whether they\
    \ end with a given suffix.", "    \n    strings = filter( x -> startswith(prefix,\
    \ x), strings)\n    \n    return strings\nend", "    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters an input list of strings only for ones\
    \ that end with a given suffix.\n>>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'ab')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'cd')\n['abc', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'de')\n['abc', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'bc')\n['abc', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'bcde')\n['abc', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'array')\n['abc', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'abarray')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abbcde')\n\
    ['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abbcdearray')\n\
    ['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abbcdearray')\n\
    ['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abbcdearray')\n\
    ['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abbcdearray')\n\
    ['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abbcdearray')\n\
    ['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abbcdearray')\n\
    ['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abbcdearray')\n\
    ['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abbcdearray')\n\
    ['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abbcdearray')\n\
    ['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abbcdearray')\n\
    ['abc", "    \n    prefix_length = length(prefix)\n    \n    filtered_strings\
    \ = Vector{String}()\n    \n    for string in strings\n        if string.startswith(prefix)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters an input list of strings only for those that end with\
    \ a given suffix.\n>>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'b')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'c')\n['abc', 'bcd', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'd')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'e')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array", "    strings =\
    \ filter(x->startswith(prefix, x), strings)\n    return strings\nend", "    \n\
    \    filtered_strings = Vector{String}()\n    \n    for string in strings\n  \
    \      if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters a vector\
    \ of strings based on whether they end with a given suffix.", "    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters an input list of strings only for ones\
    \ that end with a given suffix.\n>>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'b')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'c')\n['abc', 'bcd', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'd')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'e')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'q')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc",
  "    \n    strings = strings[:]\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            strings.remove(string)\n        end\n    end\n    \n    return strings\n\
    end", "    \n    strings = strings[:]\n    \n    for string in strings\n     \
    \   if string.starts_with(prefix)\n            strings.remove(string)\n      \
    \  end\n    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters a list of strings based on whether they\
    \ start with a given prefix.", "    \n    prefix_length = length(prefix)\n   \
    \ \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if startswith(string, prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters an input list of strings only for those\
    \ that end with a given suffix.\n>>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'b')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'c')\n['abc', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'd')\n\
    ['abc', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'e')\n['abc', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'f')\n['abc', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'g')\n['abc', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'h')\n['abc', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'i')\n['abc', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'j')\n['abc', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'k')\n['abc', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'l')\n['abc', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'm')\n['abc', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'n')\n['abc', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'o')\n['abc', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'p')\n['abc', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'q')\n['abc', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'r')\n['abc', 'cde', 'array']\n>>> filter_by_suffix(['", "    \n    prefix_length\
    \ = length(prefix)\n    \n    strings = filter( x -> startswith(String(x), prefix),\
    \ strings)\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    filter_by_prefix(L::AbstractVector, prefix::AbstractString)", "    filter!(x ->\
    \ startswith(x, prefix), strings)\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that filters an input list of strings only for ones that end with a given suffix.\n\
    >>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'a')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'ab')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'cd')\n\
    ['abc', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n\
    ['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n['abc']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n['abc']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'abd')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd',\
    \ 'cde', 'array'], 'abd')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'abd')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n\
    ['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n['abc']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n['abc']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'abd')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd',\
    \ 'cde', 'array'], 'abd')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'abd')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n\
    ['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n['abc']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n['abc']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'abd')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd',\
    \ 'cde', 'array'], 'abd')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n['abc']", "    \n    strings = strings[:]\n    \n    for s\
    \ in strings\n        if startswith(prefix, s)\n            delete!(s, prefix)\n\
    \        end\n    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters strings by a regular expression.\nThe\
    \ function should take two arguments: a string and a regular expression. The function\
    \ should return a new list containing only those strings that match the regular\
    \ expression.", "    \n    strings = filter( x -> startswith(x, prefix), strings)\n\
    \    \n    return strings\nend", "    \n    strings = strings[:]\n    \n    for\
    \ string in strings\n        if string.starts_with(prefix)\n            strings.remove(string)\n\
    \        end\n    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that filters an input list of strings only for ones that\
    \ end with a given suffix.\n>>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'b')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'c')\n['abc', 'bcd', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'd')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'e')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'q')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde", "    \n    prefix_length = length(prefix)\n    \n    filtered_strings\
    \ = Vector{String}()\n    \n    for string in strings\n        if string.startswith(prefix)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abd\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"abde\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdez\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abdeza\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abdezab\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abdezabd\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abdezabde\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abdezabdez\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abdezabdeza\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abdezabdezab\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abdezabdezabd\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdezabdezabde\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abdezabdezabdez\")\n\
    </cell>\n<code language=", "    \n    prefix_length = length(prefix)\n    \n \
    \   filtered_strings = Vector{String}()\n    \n    for string in strings\n   \
    \     if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that filters a list of strings only for those that\
    \ end with a given suffix.\n>>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'b')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'c')\n['abc', 'bcd', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'd')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'e')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'q')\n['abc', 'bcd', 'cde', 'array", "    \n    strings\
    \ = strings[:]\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            strings.remove(string)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<text>\nExercise 3: filter_by_prefix\nWrite a function that filters\
    \ an input list of strings only for ones that start with a given prefix.", " \
    \   \n    strings = strings[:]\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            delete!(strings, string)\n        end\n    end\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise: Write a function\
    \ that filters a list of strings only for those that end with a given suffix.\n\
    \    >>> filter_by_suffix([], 'a')\n    []\n    >>> filter_by_suffix(['abc', 'bcd',\
    \ 'cde', 'array'], 'a')\n    ['abc']\n    \"\"\"", "    \n    strings = strings[:]\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        strings.remove(string)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(string, prefix) ->\
    \ boolean\nFilter an input list of strings only for ones that start with a given\
    \ prefix.\nThis function returns true if the input string starts with the prefix,\
    \ otherwise it returns false.", "    strings = filter( x -> startswith(prefix,\
    \ x), strings)\n    return strings\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that filters an input list of strings only for ones that end with a\
    \ given suffix.\n>>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'ab')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'cd')\n['abc', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'bc')\n['abc', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'array')\n['array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n\
    ['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'bcd')\n['abc',\
    \ 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'cde')\n['abc',\
    \ 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'cda')\n[]\n>>>\
    \ filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'cdb')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'cdbd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'cdbda')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'cdbdb')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'cdbdbd')\n\
    []\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'cdbdbda')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'cdbdbdb')\n[]\n>>> filter_by_suffix(['abc', 'bcd',\
    \ 'cde', 'array'], 'cdbdbdbd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'cdbdbdbda')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'cdbdbdbdb')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'cdbdbdbdbd')\n\
    []\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'cdbdbdbdbda')\n[]\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'cdbdbdbdb", "    filter!(x\
    \ -> startswith(prefix, x), strings)\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise: Write a function that filters an input list of strings only for ones\
    \ that end with a given suffix.\n    >>> filter_by_suffix([], 'a')\n    []\n \
    \   >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc']\n \
    \   \"\"\"", "    \n    strings = strings[:]\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            delete!(strings, string)\n\
    \        end\n    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.4>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    filter_by_prefix(string, prefix) returns a new list containing only the strings\
    \ that start with the prefix string.", "    \n    strings = strings[:]\n    \n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  strings.remove(string)\n        end\n    end\n    \n    return strings\nend\n\
    </cell>\n<text>\nExercise 4\nWrite a function that filters a list of strings based\
    \ on whether they start with a given prefix.", "    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if string.startswith(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters strings\
    \ by a regular expression. For example, filter_by_regex([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"^a.*\") should return [\"abc\", \"array\"].", "    strings\
    \ = filter(x->startswith(x, prefix), strings)\n    return strings\nend\n</cell>\n\
    <code language=julia-1.3>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise\nWrite a function that filters strings by\
    \ a prefix and suffix.", "    strings = filter(x->startswith(x, prefix), strings)\n\
    \    return strings\nend", "    filter!(x -> startswith(prefix, x), strings)\n\
    end\n</cell>\n<text>\nfilter_by_prefix(words, \"a\")", "    \n    strings = strings[:]\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        remove!(strings, string)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(String[], String)",
  "    strings = strings[:]\n    strings = filter(x->startswith(x, prefix), strings)\n\
    \    return strings\nend\n</cell>\n<code language=julia-1.3>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2: filter_by_prefix",
  "    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters an input list of strings only for ones that end with\
    \ a given suffix.\n>>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'b')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'c')\n['abc', 'bcd', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'd')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'e')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde", "    \n    prefix_length\
    \ = length(prefix)\n    \n    strings = strings[:]\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            remove!(strings, string)\n\
    \        end\n    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise\
    \ 3: Filtering by Prefix\nWrite a function that filters an input list of strings\
    \ only for ones that start with a given prefix.\nFor example, given a list of\
    \ strings ['abc', 'bcd', 'cde', 'array'], filter_by_prefix(['abc', 'bcd', 'cde',\
    \ 'array'], 'a') should return ['abc', 'array'].", "    \n    strings = strings[:]\n\
    \    \n    for s in strings\n        if startswith(prefix, s)\n            delete!(s,\
    \ prefix)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise: Write a function that filters an input list\
    \ of strings only for ones that end with a given suffix.\n    >>> filter_by_suffix([],\
    \ 'a')\n    []\n    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \"\"\"", "    \n    strings = strings[:]\n    \n  \
    \  for string in strings\n        if string.starts_with(prefix)\n            strings.remove(string)\n\
    \        end\n    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that filters an input list of strings only for ones that\
    \ end with a given suffix.\n>>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'b')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'c')\n['abc', 'bcd', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'd')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'e')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'q')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde", "    \n    strings = strings[:]\n    \n    for s in strings\n\
    \        if startswith(s, prefix)\n            delete!(s, prefix)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters a string list for strings that end with\
    \ a given suffix.\n>>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'b')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'c')\n['abc', 'bcd', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'd')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'e')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], '", "    \n    prefix_length = length(prefix)\n    \n\
    \    strings = filter( x -> startswith(x, prefix), strings)\n    \n    if prefix_length\
    \ == 0\n        return strings\n    else\n        return filter_by_prefix(strings,\
    \ substring(prefix, 1, prefix_length))\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of strings and returns a vector\
    \ of strings that only contain the words that start with a given prefix.", " \
    \   \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.startswith(prefix)\n     \
    \       push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters an input list of strings only for ones that end with\
    \ a given suffix.\n>>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'b')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'c')\n['abc', 'bcd', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'd')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'e')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array", "    strings =\
    \ strings[:]\n    strings = filter((x) -> startswith(prefix, x), strings)\n  \
    \  return strings\nend", "    \n    strings = strings[:]\n    \n    for string\
    \ in strings\n        if string.starts_with(prefix)\n            delete!(strings,\
    \ string)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 4\nWrite a function that takes a vector of\
    \ strings and a prefix and returns a vector of strings that start with the prefix.\
    \ For example, filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\"\
    ) should return [\"abc\", \"array\"].", "    \n    prefix_length = length(prefix)\n\
    \    \n    strings = filter(x -> startswith(String(x), prefix), strings)\n   \
    \ \n    if prefix_length == 0\n        return strings\n    else\n        return\
    \ filter_by_prefix(strings, prefix[1:end-1]) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters a given list of strings only for the\
    \ ones that end with a given suffix.\n>>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'b')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'c')\n['abc', 'bcd', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'd')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'e')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde", "    \n    prefix_length\
    \ = length(prefix)\n    \n    if prefix_length == 0\n        return strings\n\
    \    \n    strings_filtered = Vector{String}()\n    \n    for string in strings\n\
    \        if startswith(string, prefix)\n            strings_filtered << string\n\
    \        end\n    end\n    \n    return strings_filtered\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that filters an input\
    \ list of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([],\
    \ 'a')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'ab')\n['abc']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'bc')\n['bcd']\n>>> filter_by_suffix(['abc', 'bcd',\
    \ 'cde', 'array'], 'cd')\n['cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'de')\n['cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'array')\n['array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n\
    ['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'bcd')\n['bcd']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'cde')\n['cde']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'dea')\n['cde']\n>>> filter_by_suffix(['abc', 'bcd',\
    \ 'cde', 'array'], 'de')\n['cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'dea')\n['cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'de')\n['cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'dea')\n\
    ['cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'de')\n['cde']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'dea')\n['cde']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'de')\n['cde']\n>>> filter_by_suffix(['abc', 'bcd',\
    \ 'cde', 'array'], 'dea')\n['cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array", "    \n    strings = filter(x->startswith(prefix, x), strings)\n  \
    \  \n    return strings\nend", "    \n    prefix_length = length(prefix)\n   \
    \ \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters an input\
    \ list of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([],\
    \ 'a')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'b')\n['abc', 'bcd']\n>>>\
    \ filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'c')\n['abc', 'bcd', 'cde']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'd')\n['abc', 'bcd', 'cde',\
    \ 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'e')\n['abc',\
    \ 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde", "    strings = filter(x->startswith(x,\
    \ prefix), strings)\n    return strings\nend", "    filter!(x -> startswith(prefix,\
    \ x), strings)\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String}", "    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    return strings\nend", "    \n    strings = strings[:]\n  \
    \  \n    strings = filter((x) -> startswith(prefix, x), strings)\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(String[],\
    \ String)", "    \n    strings = strings[:]\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            delete!(strings, string)\n\
    \        end\n    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    filter_by_prefix(vector, prefix)", "    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if startswith(string, prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters an input\
    \ list of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([],\
    \ 'a')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc',\
    \ 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'b')\n['abc',\
    \ 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'c')\n['abc', 'cde']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'd')\n['abc', 'cde', 'array']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'e')\n['abc', 'cde', 'array']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'f')\n['abc', 'cde', 'array']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'g')\n['abc', 'cde', 'array']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'h')\n['abc', 'cde', 'array']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'i')\n['abc', 'cde', 'array']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'j')\n['abc', 'cde', 'array']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'k')\n['abc', 'cde', 'array']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'l')\n['abc', 'cde', 'array']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'm')\n['abc', 'cde', 'array']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'n')\n['abc', 'cde', 'array']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'o')\n['abc', 'cde', 'array']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'p')\n['abc', 'cde', 'array']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'q')\n['abc', 'cde', 'array']\n",
  "    \n    prefix_length = length(prefix)\n    \n    filtered_strings = copy(strings)\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        filtered_strings = remove(filtered_strings, string)\n        end\n  \
    \  end\n    \n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters an input list of strings only for those\
    \ that end with a given suffix.\n>>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'b')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'c')\n['abc', 'bcd', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'd')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'e')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array", "    \n    strings\
    \ = strings[:]\n    \n    for s in strings\n        if startswith(s, prefix)\n\
    \            delete!(s, prefix)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise: filter_by_prefix([], \"\
    a\")", "    \n    prefix_length = length(prefix)\n    \n    strings = filter(\
    \ x -> startswith(String(x), prefix), strings)\n    \n    return strings\nend",
  "    \n    prefix_length = length(prefix)\n    \n    if prefix_length == 0\n   \
    \     return strings\n    \n    strings_filtered = Vector{String}()\n    \n  \
    \  for string in strings\n        if startswith(string, prefix)\n            strings_filtered\
    \ << string\n        end\n    end\n    \n    return strings_filtered\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of\
    \ strings and returns a vector of strings that start with a given prefix.", " \
    \   \n    strings = strings[:]\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            delete!(strings, string)\n        end\n    end\n    \n    return\
    \ strings\nend\n</cell>\n<text>\nExercise 3\nWrite a function that filters strings\
    \ by a regular expression.\nThe function should take three arguments:", "    \n\
    \    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that filters strings based on whether they start with a given prefix.\n\
    This function should take as input a list of strings and a prefix string.\nThe\
    \ function should return a list of strings only containing the strings that start\
    \ with the given prefix.\nFor example, if the prefix is \"a\", then the function\
    \ should return [\"abc\", \"array\"].", "    \n    strings = strings[:]\n    \n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  delete!(strings, string)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String}", "    \n    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters an input list of strings only for those\
    \ that end with a given suffix.", "    filter!(x -> startswith(prefix, x), strings)\n\
    end\n</cell>\n<code language=julia-1.3>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter!\nfilter! modifies the input\
    \ list in-place and returns the modified list. \nThe function filter! modifies\
    \ the input list in-place and returns the modified list.", "    \n    prefix_length\
    \ = length(prefix)\n    \n    strings = filter(s -> startswith(s, prefix), strings)\n\
    \    \n    if prefix_length == 0\n        strings\n    else\n        map(s ->\
    \ substring(s, prefix_length), strings)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    filter_by_prefix(L::AbstractVector, prefix::AbstractString)", "    \n    strings\
    \ = filter(x->startswith(prefix, x), strings)\n    \n    return strings\nend",
  "    \n    strings = strings[:]\n    \n    strings = filter( x -> startswith(prefix,\
    \ x), strings)\n    \n    return strings\nend", "    \n    strings = filter(x->startswith(x,\
    \ prefix), strings)\n    \n    return strings\nend", "    \n    prefix_length\
    \ = length(prefix)\n    \n    filtered_strings = Vector{String}()\n    \n    for\
    \ string in strings\n        if startswith(string, prefix)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that filters strings\
    \ by a regular expression. \nThe function should take two arguments: the list\
    \ of strings and the regular expression. \nThe function should return a list of\
    \ strings that match the regular expression. \nThe function should ignore case\
    \ when matching.", "    \n    strings = strings[:]\n    \n    strings = filter(\
    \ x -> startswith(prefix, x), strings)\n    \n    return strings\nend", "    \n\
    \    prefix_length = length(prefix)\n    \n    strings_filtered = Vector{String}()\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        strings_filtered << string\n        end\n    end\n    \n    return strings_filtered\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that filters a list of strings\
    \ based on whether they start with a given prefix.", "    \n    prefix_length\
    \ = length(prefix)\n    \n    strings = filter(x->startswith(prefix, x), strings)\n\
    \    \n    if prefix_length == 0\n        return strings\n    \n    strings =\
    \ filter(x->startswith(prefix, x), strings)\n    \n    if prefix_length == 1\n\
    \        return strings\n    \n    strings = filter(x->startswith(prefix, x),\
    \ strings)\n    \n    if prefix_length == 2\n        return strings\n    \n  \
    \  strings = filter(x->startswith(prefix, x), strings)\n    \n    if prefix_length\
    \ == 3\n        return strings\n    \n    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    \n    if prefix_length == 4\n        return strings\n    \n\
    \    strings = filter(x->startswith(prefix, x), strings)\n    \n    if prefix_length\
    \ == 5\n        return strings\n    \n    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    \n    if prefix_length == 6\n        return strings\n    \n\
    \    strings = filter(x->startswith(prefix, x), strings)\n    \n    if prefix_length\
    \ == 7\n        return strings\n    \n    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    \n    if prefix_length == 8\n        return strings\n    \n\
    \    strings = filter(x->startswith(prefix, x), strings)\n    \n    if prefix_length\
    \ == 9\n        return strings\n    \n    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    \n    if prefix_length == 10\n        return strings\n   \
    \ \n    strings = filter(x->startswith(prefix, x), strings)\n    \n    if prefix_length\
    \ == 11\n        return strings\n    \n    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    \n    if prefix_length == 12\n        return strings\n   \
    \ \n    strings = filter(x->startswith(prefix, x), strings)\n    \n    if prefix_length\
    \ == 13\n        return strings\n    \n    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    \n    if prefix_length == 14\n        return strings\n   \
    \ \n    strings = filter(x->startswith(prefix, x), strings)\n    \n    if prefix_length\
    \ == 15\n        return strings\n    \n    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    \n    if prefix_length == 16\n        return strings\n   \
    \ \n    strings = filter(x->startswith(prefix, x), strings)\n    \n    if prefix_length\
    \ == 17\n        return strings\n    \n    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    \n    if prefix_length == 18\n        return strings\n   \
    \ \n    strings = filter(x->startswith(prefix, x), strings)\n    \n    if prefix_length\
    \ == 19\n        return strings\n    \n    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    \n    if ", "    \n    prefix_length = length(prefix)\n  \
    \  \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if startswith(string, prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise: Write a function that filters strings by\
    \ a prefix and suffix.\nThe function should take two arguments: a list of strings\
    \ and a prefix and suffix.\nThe function should return a list of strings that\
    \ start with the prefix and end with the suffix.\nThe function should ignore case\n\
    The function should ignore leading and trailing whitespace\nThe function should\
    \ ignore empty strings\nThe function should ignore empty prefixes and suffixes\n\
    The function should ignore prefixes and suffixes that contain whitespace\nThe\
    \ function should ignore prefixes and suffixes that do not start with a letter\n\
    The function should ignore prefixes and suffixes that do not end with a letter\n\
    The function should ignore prefixes and suffixes that do not contain any letter\n\
    The function should ignore prefixes and suffixes that do not contain any letter\n\
    The function should ignore prefixes and suffixes that do not contain any letter\n\
    The function should ignore prefixes and suffixes that do not contain any letter\n\
    The function should ignore prefixes and suffixes that do not contain any letter\n\
    The function should ignore prefixes and suffixes that do not contain any letter\n\
    The function should ignore prefixes and suffixes that do not contain any letter\n\
    The function should ignore prefixes and suffixes that do not contain any letter\n\
    The function should ignore prefixes and suffixes that do not contain any letter\n\
    The function should ignore prefixes and suffixes that do not contain any letter\n\
    The function should ignore prefixes and suffixes that do not contain any letter\n\
    The function should ignore prefixes and suffixes that do not contain any letter\n\
    The function should ignore prefixes and suffixes that do not contain any letter\n\
    The function should ignore prefixes and suffixes that do not contain any letter\n\
    The function should ignore prefixes and suffixes that do not contain any letter\n\
    The function should ignore prefixes and suffixes that do not contain any letter\n\
    The function should ignore prefixes and suffixes that do not contain any letter\n\
    The function should ignore prefixes and suffixes that do not contain any letter\n\
    The function should ignore prefixes and suffixes that do not contain any letter\n\
    The function should ignore prefixes and suffixes that do not contain any letter\n\
    The function should ignore prefix", "    \n    strings = strings[:]\n    \n  \
    \  for s in strings\n        if startswith(prefix, s)\n            delete!(s,\
    \ prefix)\n        end\n    end\n    \n    return strings\nend", "    filter!(x\
    \ -> startswith(prefix, x), strings)\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    filter!", "    strings = strings[:]\n    strings = filter(x->startswith(x, prefix),\
    \ strings)\n    return strings\nend", "    \n    strings = strings[:]\n    \n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  delete!(strings, string)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise: Write a function that filters\
    \ strings based on whether they end with a given suffix.", "    \n    strings\
    \ = strings[:]\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            strings.remove(string)\n        end\n    end\n    \n    return strings\n\
    end", "    \n    strings = strings[:]\n    \n    for s in strings\n        if\
    \ startswith(prefix, s)\n            delete!(s, prefix)\n        end\n    end\n\
    \    \n    return strings\nend", "    \n    prefix_length = length(prefix)\n \
    \   \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if startswith(string, prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters an input list of strings only for ones\
    \ that end with a given suffix.\n>>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'b')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'c')\n['abc', 'bcd', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'd')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'e')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'q')\n['abc', 'bcd', 'cde', 'array", "    \n    strings\
    \ = strings[:]\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            strings.remove(string)\n        end\n    end\n    \n    return strings\n\
    end", "    \n    prefix_length = length(prefix)\n    \n    filtered_strings =\
    \ copy(strings)\n    \n    for string in strings\n        if startswith(string,\
    \ prefix)\n            filtered_strings = remove(filtered_strings, string)\n \
    \       end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 3: Filtering by substrings\nWrite a function that filters an input list\
    \ of strings only for ones that contain a given substring.\n>>> filter_by_substring([],\
    \ 'a')\n[]\n>>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc',\
    \ 'array']\n>>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'ab')\n['abc']\n\
    >>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'bc')\n['bcd']\n>>> filter_by_substring(['abc',\
    \ 'bcd', 'cde', 'array'], 'cd')\n['cde']\n>>> filter_by_substring(['abc', 'bcd',\
    \ 'cde', 'array'], 'array')\n['array']\n>>> filter_by_substring(['abc', 'bcd',\
    \ 'cde', 'array'], 'abd')\n[]\n>>> filter_by_substring(['abc', 'bcd', 'cde', 'array'],\
    \ 'abd')\n[]\n>>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'abd')\n\
    []\n>>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_substring(['abc',\
    \ 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_substring(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n[]\n>>> filter_by_substring(['abc', 'bcd', 'cde', 'array'],\
    \ 'abd')\n[]\n>>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'abd')\n\
    []\n>>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_substring(['abc',\
    \ 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_substring(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n[]\n>>> filter_by_substring(['abc', 'bcd', 'cde', 'array'],\
    \ 'abd')\n[]\n>>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'abd')\n\
    []\n>>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_substring(['abc',\
    \ 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_substring(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n[]\n>>> filter_by_", "    \n    strings = filter(x->startswith(x,\
    \ prefix), strings)\n    \n    return strings\nend", "    strings = filter(x->startswith(x,\
    \ prefix), strings)\n    return strings\nend\n</cell>\n<text>\nfilter_by_prefix(all_strings,\
    \ \"array\")", "    \n    strings = strings[:]\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            strings.remove(string)\n \
    \       end\n    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters strings by a regular expression.\nThe\
    \ function should take two arguments: a list of strings and a regular expression.\
    \ The function should return a list of strings that match the regular expression.\
    \ The function should ignore case when matching.", "    \n    strings = strings[:]\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        remove!(strings, string)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that filters an input list\
    \ of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([],\
    \ 'a')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'ab')\n['abc']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'cd')\n['abc', 'cde']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'array')\n['array']\n>>> filter_by_suffix(['abc', 'bcd',\
    \ 'cde', 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'abd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n[]\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n\
    []\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n\
    []\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n\
    []\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n\
    []\n>>> filter_by_suffix(['abc', 'bcd', 'cde', '", "    strings = filter(x->startswith(x,prefix),\
    \ strings)\n    return strings\nend", "    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"ab\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abde\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abdez\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\",\
    \ \"bcd\", \"cde\", \"array\"], \"abdeza\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abdezab\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abdezabd\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abdezabde\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abdezabdez\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abdezabdeza\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdezabdezab\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abdezabdezabd\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abdezabdezabde\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdezabdezabdez\")\n</cell>", "    strings\
    \ = strings[2:end]\n    return strings\nend", "    \n    prefix_len = length(prefix)\n\
    \    \n    strings = filter( x -> startswith(String(x), prefix), strings)\n  \
    \  \n    if prefix_len == 0\n        return strings\n    else\n        return\
    \ filter_by_prefix(strings, prefix[1:prefix_len])\n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters a list of strings only for those that\
    \ end with a given suffix.", "    \n    prefix_length = length(prefix)\n    \n\
    \    filtered_strings = Vector{String}()\n    \n    for string in strings\n  \
    \      if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise: Write a function that filters an input list\
    \ of strings only for ones that end with a given suffix.\n    >>> filter_by_suffix([],\
    \ 'a')\n    []\n    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc']\n    \"\"\"", "    \n    prefix_length = length(prefix)\n    \n \
    \   filtered_strings = Vector{String}()\n    \n    for string in strings\n   \
    \     if startswith(string, prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters an input\
    \ list of strings only for those that end with a given suffix.\n>>> filter_by_suffix([],\
    \ 'a')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'b')\n['abc', 'bcd']\n>>>\
    \ filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'c')\n['abc', 'bcd', 'cde']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'd')\n['abc', 'bcd', 'cde',\
    \ 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'e')\n['abc',\
    \ 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array", "    strings =\
    \ strings[:]\n    strings = filter((x) -> startswith(x, prefix), strings)\n  \
    \  return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L,\
    \ prefix) -> Vector{String}\nFilter an input list of strings only for ones that\
    \ start with a given prefix.\nThis function returns a new list with the filtered\
    \ strings. \nThe input list is modified in-place.", "    \n    strings = strings[:]\n\
    \    \n    for s in strings\n        if startswith(prefix, s)\n            delete!(s,\
    \ prefix)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise\nWrite a function that filters a list of\
    \ strings only for those that start with a given prefix.\nWrite a function that\
    \ filters a list of strings only for those that end with a given suffix.\nWrite\
    \ a function that filters a list of strings only for those that contain given\
    \ substrings.", "    \n    strings = strings[:]\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            strings.remove(string)\n \
    \       end\n    end\n    \n    return strings\nend", "    \n    strings = strings[:]\n\
    \    \n    strings = filter( x -> startswith(prefix, x), strings)\n    \n    return\
    \ strings\nend", "    \n    prefix_len = length(prefix)\n    \n    strings = strings[:]\n\
    \    \n    i = 0\n    while i < length(strings)\n        if strings[i] == prefix\n\
    \            i += 1\n        else\n            strings[i] = \"\"\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.4>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    filter_by_prefix(String[], String)::Vector{String}", "    \n    prefix_length\
    \ = length(prefix)\n    \n    filtered_strings = Vector{String}()\n    \n    for\
    \ string in strings\n        if string.starts_with(prefix)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <text>\nExercise 2: filter_by_prefix\nWrite a function that filters an input list\
    \ of strings only for ones that start with a given prefix.\nThis function should\
    \ return a vector of strings.", "    \n    strings = strings[:]\n    \n    for\
    \ s in strings\n        if startswith(prefix, s)\n            delete!(s, prefix)\n\
    \        end\n    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that filters an input list of strings only for ones that\
    \ end with a given suffix.\n>>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'ab')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'cd')\n['abc', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'bc')\n['abc', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'array')\n['array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'arrays')\n\
    []\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n\
    []\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n\
    []\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n\
    []\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n\
    []\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde", "    \n    prefix_length = length(prefix)\n    \n    filtered_strings\
    \ = Vector{String}()\n    \n    for string in strings\n        if startswith(string,\
    \ prefix)\n            push!(filtered_strings, string)\n        end\n    end\n\
    \    \n    return filtered_strings\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that filters strings by a regular expression.\nThe function should\
    \ take two arguments: the list of strings and the regular expression. The function\
    \ should return a new list of strings that match the regular expression. \nThe\
    \ function should return an empty list if the regular expression is empty or if\
    \ the list of strings is empty.", "    strings = strings[:]\n    strings = filter((x)\
    \ -> startswith(x, prefix), strings)\n    return strings\nend", "    \n    strings\
    \ = strings[:]\n    \n    i = 0\n    while i < length(prefix) && i < length(strings)\n\
    \        if prefix[i] != strings[i]\n            i += 1\n        else\n      \
    \      i += 1\n        end\n    end\n    \n    if i == length(strings)\n     \
    \   append!(strings, prefix)\n    end\n    \n    return strings\nend", "    strings\
    \ = strings[:]\n    strings = filter((x) -> startswith(prefix, x), strings)\n\
    \    return strings\nend", "    strings = filter((x) -> startswith(prefix, x),\
    \ strings)\n    return strings\nend", "    \n    prefix_length = length(prefix)\n\
    \    \n    strings = filter(x->startswith(prefix, x), strings)\n    \n    strings\
    \ = filter(x->length(x) > prefix_length, strings)\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(String[], String)",
  "    \n    prefix_length = length(prefix)\n    \n    strings = strings[:]\n    \n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  strings.remove(string)\n        end\n    end\n    \n    return strings\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"a\")\n</cell>\n<text>\nExercise 4\nWrite a function that filters\
    \ an input list of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([],\
    \ 'a')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'b')\n['abc', 'bcd']\n>>>\
    \ filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'c')\n['abc', 'bcd', 'cde']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'd')\n['abc', 'bcd', 'cde',\
    \ 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'e')\n['abc',\
    \ 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array']\n>>> filter", " \
    \   \n    strings = strings[:]\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            delete!(strings, string)\n        end\n    end\n    \n    return\
    \ strings\nend\n</cell>\n<text>\nExercise 3\nWrite a function that filters an\
    \ input list of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([],\
    \ 'a')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'ab')\n['abc']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'cd')\n['abc', 'cde']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'bc')\n['abc', 'cde']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'array')\n['array']\n>>> filter_by_suffix(['abc', 'bcd',\
    \ 'cde', 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'abd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n[]\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n\
    []\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n\
    []\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n\
    []\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n[]\n>>> filter_by_suffix(['abc', 'b", "    \n    strings =\
    \ strings[:]\n    \n    for s in strings\n        if startswith(prefix, s)\n \
    \           delete!(s, prefix)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String}", "    \n    strings = strings[:]\n    \n  \
    \  for string in strings\n        if string.starts_with(prefix)\n            delete!(strings,\
    \ string)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters an input list of strings only for ones\
    \ that end with a given suffix.\n>>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'b')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'c')\n['abc', 'bcd', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'd')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'e')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'q')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'c", "    \n    prefix_length = length(prefix)\n    \n    strings = strings[:]\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        strings = filter!(x -> x != string, strings)\n        end\n    end\n\
    \    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that filters strings by a regular expression.\nThe function should\
    \ take two arguments: a regular expression and a list of strings. The function\
    \ should return a list of strings that match the given regular expression.\nThe\
    \ function should ignore case when matching.\nThe function should ignore leading\
    \ and trailing whitespace.\nThe function should ignore leading and trailing periods.\n\
    The function should ignore leading and trailing underscores.\nThe function should\
    \ ignore leading and trailing dashes.\nThe function should ignore leading and\
    \ trailing colons.\nThe function should ignore leading and trailing colons and\
    \ periods.\nThe function should ignore leading and trailing colons and periods\
    \ and dashes.\nThe function should ignore leading and trailing colons and periods\
    \ and underscores.\nThe function should ignore leading and trailing colons and\
    \ periods and dashes and underscores.\nThe function should ignore leading and\
    \ trailing colons and periods and dashes and underscores and whitespace.\nThe\
    \ function should ignore leading and trailing colons and periods and dashes and\
    \ underscores and whitespace and ignore leading and trailing periods and dashes\
    \ and underscores.\nThe function should ignore leading and trailing colons and\
    \ periods and dashes and underscores and whitespace and ignore leading and trailing\
    \ periods and dashes and underscores and whitespace and ignore leading and trailing\
    \ periods and dashes and underscores and whitespace and ignore leading and trailing\
    \ periods and dashes and underscores and whitespace and ignore leading and trailing\
    \ periods and dashes and underscores and whitespace and ignore leading and trailing\
    \ periods and dashes and underscores and whitespace and ignore leading and trailing\
    \ periods and dashes and underscores and whitespace and ignore leading and trailing\
    \ periods and dashes and underscores and whitespace and ignore leading and trailing\
    \ periods and dashes and underscores and whitespace and ignore leading and trailing\
    \ periods and dashes and underscores and whitespace and ignore leading and trailing\
    \ periods and dashes and underscores and whitespace and ignore leading and trailing\
    \ periods and dashes and underscores and whitespace and ignore leading and trailing\
    \ periods and dashes and underscores and whitespace and ignore leading and trailing\
    \ periods and dashes and underscores and whitespace and ignore leading and trailing\
    \ periods and dashes and underscores and whitespace and ignore leading and trailing\
    \ periods and dashes and underscores and whitespace and ignore leading and trailing\
    \ periods and dashes and underscores and whitespace ", "    \n    prefix_len =\
    \ length(prefix)\n    \n    strings = filter( x -> startswith(x, prefix), strings)\n\
    \    \n    if prefix_len == 0\n        return strings\n    \n    strings = filter(\
    \ x -> startswith(x, prefix), strings)\n    \n    if prefix_len == 1\n       \
    \ return strings\n    \n    strings = filter( x -> startswith(x, prefix), strings)\n\
    \    \n    if prefix_len == 2\n        return strings\n    \n    strings = filter(\
    \ x -> startswith(x, prefix), strings)\n    \n    if prefix_len == 3\n       \
    \ return strings\n    \n    strings = filter( x -> startswith(x, prefix), strings)\n\
    \    \n    if prefix_len == 4\n        return strings\n    \n    strings = filter(\
    \ x -> startswith(x, prefix), strings)\n    \n    if prefix_len == 5\n       \
    \ return strings\n    \n    strings = filter( x -> startswith(x, prefix), strings)\n\
    \    \n    if prefix_len == 6\n        return strings\n    \n    strings = filter(\
    \ x -> startswith(x, prefix), strings)\n    \n    if prefix_len == 7\n       \
    \ return strings\n    \n    strings = filter( x -> startswith(x, prefix), strings)\n\
    \    \n    if prefix_len == 8\n        return strings\n    \n    strings = filter(\
    \ x -> startswith(x, prefix), strings)\n    \n    if prefix_len == 9\n       \
    \ return strings\n    \n    strings = filter( x -> startswith(x, prefix), strings)\n\
    \    \n    if prefix_len == 10\n        return strings\n    \n    strings = filter(\
    \ x -> startswith(x, prefix), strings)\n    \n    if prefix_len == 11\n      \
    \  return strings\n    \n    strings = filter( x -> startswith(x, prefix), strings)\n\
    \    \n    if prefix_len == 12\n        return strings\n    \n    strings = filter(\
    \ x -> startswith(x, prefix), strings)\n    \n    if prefix_len == 13\n      \
    \  return strings\n    \n    strings = filter( x -> startswith(x, prefix), strings)\n\
    \    \n    if prefix_len == 14\n        return strings\n    \n    strings = filter(\
    \ x -> startswith(x, prefix), strings)\n    \n    if prefix_len == 15\n      \
    \  return strings\n    \n    strings = filter( x -> startswith(x, prefix), strings)\n\
    \    \n    if prefix_len == 16\n        return strings\n    \n    strings = filter(\
    \ x -> startswith(x, prefix), strings)\n    \n    if prefix_len == 17\n      \
    \  return strings\n    \n    strings = filter( x -> startswith(x, prefix), strings)\n\
    \    \n    if prefix_len == 18\n        return strings\n    \n    string", " \
    \   \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<text>\nExercise 4\nWrite a function that filters\
    \ a list of strings only for those that end with a given suffix.\n>>> filter_by_suffix([],\
    \ 'a')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'b')\n['abc', 'bcd']\n>>>\
    \ filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'c')\n['abc', 'bcd', 'cde']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'd')\n['abc', 'bcd', 'cde',\
    \ 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'e')\n['abc',\
    \ 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'q')\n['abc', 'bcd', 'cde', 'array", "    \n    strings\
    \ = filter(x->startswith(prefix, x), strings)\n    \n    return strings\nend",
  "    \n    strings = strings[:]\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            delete!(strings, string)\n        end\n    end\n    \n    return\
    \ strings\nend\n</cell>\n<text>\nExercise 2\nWrite a function that filters an\
    \ input list of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([],\
    \ 'a')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'ab')\n['abc']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'cd')\n['abc', 'cde']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'array')\n['array']\n>>> filter_by_suffix(['abc', 'bcd',\
    \ 'cde', 'array'], 'b')\n['abc', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'c')\n['abc', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'de')\n['abc', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'e')\n['abc', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'ab')\n\
    ['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'cd')\n['abc', 'cde']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'array')\n['array']\n>>>\
    \ filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'b')\n['abc', 'cde']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'c')\n['abc', 'cde']\n>>> filter_by_suffix(['abc', 'bcd',\
    \ 'cde', 'array'], 'de')\n['abc', 'cde']\n>>> filter_by_suffix(['abc', 'bcd',\
    \ 'cde', 'array'], 'e')\n['abc', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'ab')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'cd')\n['abc', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'array')\n['array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'b')\n\
    ['abc', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'c')\n['abc',\
    \ 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'de')", "    strings\
    \ = strings[:]\n    strings = filter((x) -> startswith(prefix, x), strings)\n\
    \    return strings\nend", "    \n    strings = strings[:]\n    \n    for string\
    \ in strings\n        if string.starts_with(prefix)\n            delete!(strings,\
    \ string)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that filters an input\
    \ list of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([],\
    \ 'a')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'b')\n['abc', 'bcd']\n>>>\
    \ filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'c')\n['abc', 'bcd', 'cde']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'd')\n['abc', 'bcd', 'cde',\
    \ 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'e')\n['abc',\
    \ 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'c", "    \n    prefix_length = length(prefix)\n    \n    filtered_strings\
    \ = Vector{String}()\n    \n    for string in strings\n        if string.startswith(prefix)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abd\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"abde\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdez\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abdeza\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abdezab\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abdezabd\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abdezabde\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abdezabdez\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abdezabdeza\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abdezabdezab\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abdezabdezabd\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdezabdezabde\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abdezabdezabdez\")\n\
    </cell>\n<code language=", "    filter!(x -> startswith(prefix, x), strings)\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L::AbstractVector,\
    \ prefix::AbstractString)", "    \n    strings = strings[:]\n    \n    for string\
    \ in strings\n        if string.starts_with(prefix)\n            strings.remove(string)\n\
    \        end\n    end\n    \n    return strings\nend", "    \n    strings = strings[:]\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        strings.remove(string)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters a given list of strings only for the ones that end with a given suffix.",
  "    filter_by_prefix(strings, prefix, [])\nend", "    \n    strings = strings[:]\n\
    \    \n    strings = filter(x->startswith(prefix, x), strings)\n    \n    return\
    \ strings\nend", "    \n    strings = strings[:]\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            delete!(strings, string)\n\
    \        end\n    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters strings by a regular expression. For\
    \ example, given a list of strings:", "    \n    strings = strings[:]\n    \n\
    \    strings = filter((x) -> startswith(prefix, x), strings)\n    \n    return\
    \ strings\nend", "    \n    strings = strings[:]\n    \n    prefix = prefix:lower()\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        delete!(strings, string)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters strings based on whether they end with a given suffix.", "    \n   \
    \ strings = strings[:]\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            strings.remove(string)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters a list of strings based on whether they end with a given suffix.", " \
    \   strings = filter(x->startswith(x, prefix), strings)\n    return strings\n\
    end", "    strings = strings[:]\n    strings = filter((x) -> startswith(prefix,\
    \ x), strings)\n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters an input list of strings only for ones\
    \ that end with a given suffix.\n>>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'b')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'c')\n['abc', 'bcd', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'd')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'e')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'q')\n['abc', 'bcd', 'cde', 'array", "    \n    prefix_length\
    \ = length(prefix)\n    \n    filtered_strings = Vector{String}()\n    \n    for\
    \ string in strings\n        if startswith(string, prefix)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that filters an input list of strings only\
    \ for ones that end with a given suffix.\n    >>> filter_by_suffix([], 'a')\n\
    \    []\n    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc']\n\
    \    \"\"\"", "    \n    prefix_length = length(prefix)\n    \n    strings = filter(\
    \ x -> startswith(prefix, x), strings)\n    \n    if prefix_length == 0\n    \
    \    return strings\n    \n    strings = filter( x -> startswith(prefix, x), strings)\n\
    \    \n    if prefix_length == 1\n        return strings\n    \n    strings =\
    \ filter( x -> startswith(prefix, x), strings)\n    \n    if prefix_length ==\
    \ 2\n        return strings\n    \n    strings = filter( x -> startswith(prefix,\
    \ x), strings)\n    \n    if prefix_length == 3\n        return strings\n    \n\
    \    strings = filter( x -> startswith(prefix, x), strings)\n    \n    if prefix_length\
    \ == 4\n        return strings\n    \n    strings = filter( x -> startswith(prefix,\
    \ x), strings)\n    \n    if prefix_length == 5\n        return strings\n    \n\
    \    strings = filter( x -> startswith(prefix, x), strings)\n    \n    if prefix_length\
    \ == 6\n        return strings\n    \n    strings = filter( x -> startswith(prefix,\
    \ x), strings)\n    \n    if prefix_length == 7\n        return strings\n    \n\
    \    strings = filter( x -> startswith(prefix, x), strings)\n    \n    if prefix_length\
    \ == 8\n        return strings\n    \n    strings = filter( x -> startswith(prefix,\
    \ x), strings)\n    \n    if prefix_length == 9\n        return strings\n    \n\
    \    strings = filter( x -> startswith(prefix, x), strings)\n    \n    if prefix_length\
    \ == 10\n        return strings\n    \n    strings = filter( x -> startswith(prefix,\
    \ x), strings)\n    \n    if prefix_length == 11\n        return strings\n   \
    \ \n    strings = filter( x -> startswith(prefix, x), strings)\n    \n    if prefix_length\
    \ == 12\n        return strings\n    \n    strings = filter( x -> startswith(prefix,\
    \ x), strings)\n    \n    if prefix_length == 13\n        return strings\n   \
    \ \n    strings = filter( x -> startswith(prefix, x), strings)\n    \n    if prefix_length\
    \ == 14\n        return strings\n    \n    strings = filter( x -> startswith(prefix,\
    \ x), strings)\n    \n    if prefix_length == 15\n        return strings\n   \
    \ \n    strings = filter( x -> startswith(prefix, x), strings)\n    \n    if prefix_length\
    \ == 16\n        return strings\n    \n    strings = filter( x -> startswith(prefix,\
    \ x), strings)\n    \n    if prefix_length == 17\n        return strings\n   \
    \ \n    strings = filter( x -> startswith(prefix, x), strings)\n    \n    if prefix_length\
    \ == 18\n        return strings\n    \n    strings = filter( x -> startswith(prefix,\
    \ x), strings)\n    \n    if prefix_length == 19\n", "    \n    strings = strings[:]\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        strings.remove(string)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise: Write a function that filters\
    \ strings by a prefix and suffix.", "    filter!(x -> startswith(prefix, x), strings)\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that filters an input list\
    \ of strings only for those that end with a given suffix.\n>>> filter_by_suffix([],\
    \ 'a')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'ab')\n['abc']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'abd')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd',\
    \ 'cde', 'array'], 'abd')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'abd')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n\
    ['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n['abc']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n['abc']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'abd')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd',\
    \ 'cde', 'array'], 'abd')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'abd')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n\
    ['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n['abc']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n['abc']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'abd')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd',\
    \ 'cde', 'array'], 'abd')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'abd')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'abd')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n\
    ['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n['abc']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n['abc']\n>>> filter",
  "    strings = strings[2:end]\n    return strings\nend", "    strings = strings[:]\n\
    \    strings = filter((x) -> startswith(prefix, x), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String} is defined above", "    strings = strings[start:end]\n\
    end\n</cell>\n<code language=julia-1.4>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters an input list of strings only for ones that end with a given suffix.\n\
    >>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'a')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'ab')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'cd')\n\
    ['cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'de')\n['cde']\n\
    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'bc')\n['abc', 'bcd']\n>>>\
    \ filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n['abc', 'bcd']\n>>>\
    \ filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n['abc', 'bcd']\n>>>\
    \ filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n['abc', 'bcd']\n>>>\
    \ filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n['abc', 'bcd']\n>>>\
    \ filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n['abc', 'bcd']\n>>>\
    \ filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n['abc', 'bcd']\n>>>\
    \ filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n['abc', 'bcd']\n>>>\
    \ filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n['abc', 'bcd']\n>>>\
    \ filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n['abc', 'bcd']\n>>>\
    \ filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n['abc', 'bcd']\n>>>\
    \ filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n['abc', 'bcd']\n>>>\
    \ filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n['abc', 'bcd']\n>>>\
    \ filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n['abc', 'bcd']\n>>>\
    \ filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n['abc', 'bcd']\n>>>\
    \ filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'abd')\n['abc', 'bcd']\n>>>\
    \ filter_by_suffix(['", "    strings = filter(x->startswith(x, prefix), strings)\n\
    \    return strings\nend", "    \n    strings = strings[:]\n    \n    for string\
    \ in strings\n        if string.starts_with(prefix)\n            remove!(strings,\
    \ string)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nfilter_by_prefix(string, prefix)", "    \n    strings\
    \ = strings[:]\n    \n    strings = filter( x -> startswith(prefix, x), strings)\n\
    \    \n    return strings\nend", "    \n    strings = strings[:]\n    \n    for\
    \ s in strings\n        if startswith(s, prefix)\n            delete!(s, prefix)\n\
    \        end\n    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters an input list of strings only for ones\
    \ that end with a given suffix.\n>>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n['abc']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'b')\n['abc', 'bcd']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'c')\n['abc', 'bcd', 'cde']\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'],\
    \ 'd')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc', 'bcd', 'cde',\
    \ 'array'], 'e')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'f')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'h')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'i')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'j')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'k')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'l')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'm')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'n')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'o')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'p')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array", "    \n    strings = strings[:]\n    \n    prefix = prefix:lower()\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        delete!(strings, string)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String}", "    \n    prefix_length = length(prefix)\n\
    \    \n    if prefix_length == 0\n        return strings\n    \n    strings =\
    \ filter(x->startswith(prefix, x), strings)\n    \n    return strings\nend", " \
    \   \n    strings = strings[:]\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            strings.remove(string)\n        end\n    end\n    \n    return strings\n\
    end", "    filter_by_prefix(strings, prefix, \"\")\nend", "    filter_by_prefix(strings,\
    \ prefix, \"\")\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters strings by a prefix and suffix.", "    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters an input list of strings only for ones\
    \ that end with a given suffix.\n    >>> filter_by_suffix([], 'a')\n    []\n \
    \   >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"", "    strings = strings[:]\n    strings = filter((x) -> startswith(prefix,\
    \ x), strings)\n    return strings\nend", "    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if startswith(string, prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 4\nWrite a function that filters a string\
    \ list for strings that end with a given suffix.", "    strings = filter( x ->\
    \ startswith(prefix, x), strings)\n    return strings\nend", "    \n    strings\
    \ = strings[:]\n    \n    for s in strings\n        if startswith(prefix, s)\n\
    \            delete!(s, prefix)\n        end\n    end\n    \n    return strings\n\
    end", "    \n    prefix_length = length(prefix)\n    \n    filtered_strings =\
    \ Vector{String}()\n    \n    for string in strings\n        if string.startswith(prefix)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters a list of strings based on whether they start with a\
    \ given prefix.", "    \n    strings = strings[:]\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            delete!(strings, string)\n\
    \        end\n    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that filters strings by a prefix and suffix."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
