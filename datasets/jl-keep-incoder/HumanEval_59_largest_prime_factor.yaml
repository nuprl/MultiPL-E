name: HumanEval_59_largest_prime_factor
language: julia
prompt: "\"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  \    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n\
  \    2\n    \"\"\"\nfunction largest_prime_factor(n::Int64)::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = largest_prime_factor;\n\t@test(candidate(15)\
  \ == 5)\n\t@test(candidate(27) == 3)\n\t@test(candidate(63) == 7)\n\t@test(candidate(330)\
  \ == 11)\n\t@test(candidate(13195) == 29)\nend\n"
completions: ["    if n == 1 \n        1\n    else\n        largest_prime_factor(n-1)\
    \ * prime_factor(n)\nend\n</cell>\n<code language=julia-1.5>", "    if n < 2 \n\
    \        then return n\n    else if n % 2 == 0 \n        then return largest_prime_factor(n/2)\n\
    \    else \n        largest = 2\n        for p in prime_factors(n) \n        \
    \    do if p > largest \n                then largest = p\n        return largest\n\
    end\n</cell>\n<code language=julia-1.4>", "    if n==1 \n        1 \n    else\
    \ \n        largest_prime_factor(n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert largest_prime_factor(2) == 2 \"largest_prime_factor test 1 failed\"\n\
    @assert largest_prime_factor(3) == 1 \"largest_prime_factor test 2 failed\"\n\
    @assert largest_prime_factor(5) == 2 \"largest_prime_factor test 3 failed\"\n\
    @assert largest_prime_factor(7) == 3 \"largest_prime_factor test 4 failed\"\n\
    @assert largest_prime_factor(11) == 5 \"largest_prime_factor test 5 failed\"\n\
    @assert largest_prime_factor(13) == 5 \"largest_prime_factor test 6 failed\"\n\
    @assert largest_prime_factor(17) == 7 \"largest_prime_factor test 7 failed\"\n\
    @assert largest_prime_factor(29) == 11 \"largest_prime_factor test 8 failed\"\n\
    @assert largest_prime_factor(31) == 13 \"largest_prime_factor test 9 failed\"\n\
    @assert largest_prime_factor(41) == 17 \"largest_prime_factor test 10 failed\"\
    \n@assert largest_prime_factor(43) == 17 \"largest_prime_factor test 11 failed\"\
    \n@assert largest_prime_factor(47) == 19 \"largest_prime_factor test 12 failed\"\
    \n@assert largest_prime_factor(53) == 29 \"largest_prime_factor test 13 failed\"\
    \n@assert largest_prime_factor(59) == 41 \"largest_prime_factor test 14 failed\"\
    \n@assert largest_prime_factor(61) == 41 \"largest_prime_factor test 15 failed\"\
    \n@assert largest_prime_factor(67) == 53 \"largest_prime_factor test 16 failed\"\
    \n@assert largest_prime_factor(71) == 59 \"largest_prime_factor test 17 failed\"\
    \n@assert largest_prime_factor(73) == 61 \"largest_prime_factor test 18 failed\"\
    \n@assert largest_prime_factor(79) == 67 \"largest_prime_factor test 19 failed\"\
    \n@assert largest_prime_factor(83) == 71 \"largest_prime_factor test 20 failed\"\
    \n@assert largest_prime_factor(89) == 73 \"largest_prime_factor test 21 failed\"\
    \n@assert largest_prime_factor(97) == 79 \"largest_prime_factor test 22 failed\"\
    \n@assert largest_prime_factor(101) == 83 \"", "    if n < 2 \n        then return\
    \ n\n    else if n % 2 == 0 \n        then return largest_prime_factor(n / 2)\n\
    \    else \n        largest = 2\n        largest = largest_prime_factor(n / 2)\n\
    \        while largest != n \n            largest = largest * 2\n        return\
    \ largest\nend\n</cell>\n<code language=julia-1.3>\nlargest_prime_factor(13195)\n\
    </cell>\n<code language=julia-1.3>\nlargest_prime_factor(2048)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the smallest prime factor of n. Assume\
    \ n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n    3\n   \
    \ >>> smallest_prime_factor(2048)\n    2\n    \"\"\"", "    if n < 2 \n      \
    \  then return n\n    else if n % 2 == 0 \n        then return largest_prime_factor(n\
    \ / 2)\n    else \n        largest_prime_factor(3 * n + 1) \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nlargest_prime_factor(13195)\n</cell>\n<code language=julia-1.5>\n\
    largest_prime_factor(2048)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the smallest prime factor of n. Assume n > 1 and is not a prime.\n \
    \   >>> smallest_prime_factor(13195)\n    13\n    >>> smallest_prime_factor(2048)\n\
    \    3\n    \"\"\"", "    if n==1 \n        1\n    else\n        largest_prime_factor(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nlargest_prime_factor(13195)\n\
    </cell>\n<code language=julia-1.3>\nlargest_prime_factor(2048)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the smallest prime factor of n. Assume\
    \ n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n    13\n  \
    \  >>> smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n < 2 \n     \
    \   then return n\n    else if n % 2 == 0 \n        then return 2\n    else if\
    \ n % 3 == 0 \n        then return 3\n    else if n % 5 == 0 \n        then return\
    \ 5\n    else if n % 7 == 0 \n        then return 7\n    else if n % 11 == 0 \n\
    \        then return 11\n    else if n % 13 == 0 \n        then return 13\n  \
    \  else if n % 17 == 0 \n        then return 17\n    else if n % 19 == 0 \n  \
    \      then return 19\n    else if n % 23 == 0 \n        then return 23\n    else\
    \ if n % 29 == 0 \n        then return 29\n    else if n % 31 == 0 \n        then\
    \ return 31\n    else if n % 37 == 0 \n        then return 37\n    else if n %\
    \ 41 == 0 \n        then return 41\n    else if n % 43 == 0 \n        then return\
    \ 43\n    else if n % 47 == 0 \n        then return 47\n    else if n % 53 ==\
    \ 0 \n        then return 53\n    else if n % 59 == 0 \n        then return 59\n\
    \    else if n % 61 == 0 \n        then return 61\n    else if n % 67 == 0 \n\
    \        then return 67\n    else if n % 71 == 0 \n        then return 71\n  \
    \  else if n % 73 == 0 \n        then return 73\n    else if n % 79 == 0 \n  \
    \      then return 79\n    else if n % 83 == 0 \n        then return 83\n    else\
    \ if n % 89 == 0 \n        then return 89\n    else if n % 97 == 0 \n        then\
    \ return 97\n    else if n % 101 == 0 \n        then return 101\n    else if n\
    \ % 103 == 0 \n        then return 103\n    else if n % 107 == 0 \n        then\
    \ return 107\n    else if n % 111 == 0 \n        then return 111\n    else if\
    \ n % 117 == 0 \n        then return 117\n    else if n % 121 == 0 \n        then\
    \ return 121\n    else if n % 123 == 0 \n        then return 123\n    else if\
    \ n % 127 == 0 \n        then return 127\n    else if n % 131 == 0 \n        then\
    \ return 131\n    else if n % 137 == 0 \n        then return 137\n    else if\
    \ n % 141 == 0 \n        then return 141\n    else if n % 147 == 0 \n        then\
    \ return 147\n    else if n % 151 == 0 \n        then return 151\n    else if\
    \ n % 157 == 0 ", "    if n == 1 \n        1\n    else\n        largest_prime_factor(n\
    \ / 2)\n    end\nend\n</cell>\n<code language=julia-1.0>", "    if n < 2 \n  \
    \      then return n\n    else if n == 2 \n        then return 1\n    else if\
    \ n % 2 == 0 \n        then return largest_prime_factor(n / 2)\n    else \n  \
    \      largest_prime_factor(n / 2)\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n\
    \    2\n    \"\"\"", "    if n==1 \n        1 \n    else if n==2 \n        2 \n\
    \    else if n%2==0 \n        largest_prime_factor(n/2) \n    else \n        largest_prime_factor(n-1)\
    \ \nend\n</cell>\n<code language=julia-1.5>\n@assert largest_prime_factor(7) ==\
    \ 3\n@assert largest_prime_factor(12) == 3\n@assert largest_prime_factor(13) ==\
    \ 5\n@assert largest_prime_factor(17) == 7\n@assert largest_prime_factor(19) ==\
    \ 11\n@assert largest_prime_factor(25) == 13\n@assert largest_prime_factor(29)\
    \ == 29\n@assert largest_prime_factor(31) == 31\n@assert largest_prime_factor(37)\
    \ == 37\n@assert largest_prime_factor(41) == 41\n@assert largest_prime_factor(43)\
    \ == 43\n@assert largest_prime_factor(47) == 47\n@assert largest_prime_factor(53)\
    \ == 53\n@assert largest_prime_factor(59) == 59\n@assert largest_prime_factor(61)\
    \ == 61\n@assert largest_prime_factor(67) == 67\n@assert largest_prime_factor(71)\
    \ == 71\n@assert largest_prime_factor(73) == 73\n@assert largest_prime_factor(79)\
    \ == 79\n@assert largest_prime_factor(83) == 83\n@assert largest_prime_factor(89)\
    \ == 89\n@assert largest_prime_factor(97) == 97\n@assert largest_prime_factor(101)\
    \ > 101\n@assert largest_prime_factor(101) < 101\n@assert largest_prime_factor(101)\
    \ != 101\n@assert largest_prime_factor(101) != 101\n@assert largest_prime_factor(101)\
    \ != 101\n@assert largest_prime_factor(101) != 101\n@assert largest_prime_factor(101)\
    \ != 101\n@assert largest_prime_factor(101) != 101\n@assert largest_prime_factor(101)\
    \ != 101\n@assert largest_prime_factor(101) != 101\n@assert largest_prime_factor(101)\
    \ != 101\n@assert largest_prime_factor(101) != 101\n@assert largest_prime_factor(101)\
    \ != 101\n@assert largest_prime_factor(101) != 101\n@assert largest_prime_factor(101)\
    \ != 101\n@assert largest_prime_factor(101) != 101\n@assert largest_prime_factor(101)\
    \ != 101\n@assert largest_prime_factor(", "    if n == 1 \n        1 \n    else\
    \ if n % 2 == 0 \n        largest_prime_factor(n / 2) \n    else \n        largest_prime_factor(3\
    \ * n + 1) / 2 \nend\n</cell>\n<code language=julia-1.5>\nlargest_prime_factor(13195)\n\
    </cell>\n<code language=julia-1.5>\nlargest_prime_factor(2048)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the smallest prime factor of n. Assume\
    \ n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n    13\n  \
    \  >>> smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n < 2 \n     \
    \   then return n\n    else if n % 2 == 0 \n        then return 2\n    else \n\
    \        p := 3\n        while p < n \n            do if n % p == 0 \n       \
    \         then return p\n                p := p + 2\n            end\n       \
    \ end\n    end\nend\n</cell>\n<code language=julia-1.3>\nlargest_prime_factor(13195)\n\
    </cell>\n<code language=julia-1.3>\nlargest_prime_factor(2048)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the smallest prime factor of n. Assume\
    \ n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n    7\n   \
    \ >>> smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n == 1 \n     \
    \   1\n    else if n % 2 == 0 \n        largest_prime_factor(n / 2)\n    else\
    \ \n        largest_prime_factor(3 * n + 1)\nend\n</cell>\n<code language=julia-1.3>\n\
    largest_prime_factor(13195)\n</cell>\n<code language=julia-1.3>\nlargest_prime_factor(2048)\n\
    </cell>\n<text>\nExercise: Write a function that returns the greatest prime factor\
    \ of n. Assume n > 1 and is not a prime.\nHint: Use a while loop and a prime number\
    \ sieve.", "    if n < 2 \n        then return 1 \n    else if n == 2 \n     \
    \   then return 2 \n    else if n % 2 == 0 \n        then return largest_prime_factor(n\
    \ / 2) \n    else \n        largest_prime_factor(3 * n + 1) \nend\n</cell>\n<code\
    \ language=julia-1.4>\nlargest_prime_factor(13195)\n</cell>\n<code language=julia-1.4>\n\
    largest_prime_factor(2048)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the smallest prime factor of n. Assume n > 1 and is not a prime.\n \
    \   >>> smallest_prime_factor(13195)\n    13\n    >>> smallest_prime_factor(2048)\n\
    \    3\n    \"\"\"", "    if n == 1 \n        1\n    else\n        largest_prime_factor(n-1)\
    \ * prime_factor(n-1)\n    end\nend\n</cell>\n<code language=julia-1.1>\nlargest_prime_factor(100)\n\
    </cell>\n<code language=julia-1.1>\nlargest_prime_factor(10000)\n</cell>\n<code\
    \ language=julia-1.1>\nlargest_prime_factor(20000)\n</cell>\n<code language=julia-1.1>\n\
    largest_prime_factor(2000000)\n</cell>\n<code language=julia-1.1>\nlargest_prime_factor(200000000)\n\
    </cell>\n<code language=julia-1.1>\nlargest_prime_factor(2000000000)\n</cell>\n\
    <code language=julia-1.1>\nlargest_prime_factor(20000000000)\n</cell>\n<code language=julia-1.1>\n\
    largest_prime_factor(200000000000)\n</cell>\n<code language=julia-1.1>\nlargest_prime_factor(2000000000000)\n\
    </cell>\n<code language=julia-1.1>\nlargest_prime_factor(20000000000000)\n</cell>\n\
    <code language=julia-1.1>\nlargest_prime_factor(200000000000000)\n</cell>\n<code\
    \ language=julia-1.1>\nlargest_prime_factor(2000000000000000)\n</cell>\n<code\
    \ language=julia-1.1>\nlargest_prime_factor(20000000000000000)\n</cell>\n<code\
    \ language=julia-1.1>\nlargest_prime_factor(200000000000000000)\n</cell>\n<code\
    \ language=julia-1.1>\nlargest_prime_factor(2000000000000000000)\n</cell>\n<code\
    \ language=julia-1.1>\nlargest_prime_factor(20000000000000000000)\n</cell>\n<code\
    \ language=julia-1.1>\nlargest_prime_factor(200000000000000000000)\n</cell>\n\
    <code language=julia-1.1>\nlargest_prime_factor(2000000000000000000000)\n</cell>\n\
    <code language=julia-1.1>\nlargest_prime_factor(20000000000000000000000)\n</cell>\n\
    <code language=julia-1.1>\nlargest_prime_factor(200000000000000000000000)\n</cell>\n\
    <code language=julia-1.1>\nlargest_prime_factor(2000000000000000000000000)\n</cell>\n\
    <code language=julia-1.1>\nlargest_prime_factor(20000000000000000000000000)\n\
    </cell>\n<code language=julia-1.1>\nlargest_prime_factor(200000000000000000000000000)\n\
    </cell>\n<code language=julia-1.1>\nlargest_prime_factor(2000000000000000000000000000)\n\
    </cell>\n<code language=julia-1.1>", "    if n < 2 \n        then return n\n \
    \   else if n % 2 == 0 \n        then return largest_prime_factor(n / 2)\n   \
    \ else \n        largest_prime_factor(3 * n + 1) \n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\nlargest_prime_factor(13195)\n</cell>\n<code language=julia-1.3>\n\
    largest_prime_factor(2048)\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the smallest prime factor of n. Assume n > 1 and is not a prime.\nHint: Use\
    \ a while loop to keep looping until you find a prime factor.", "    if n == 1\
    \ \n        1 \n    else \n        largest_prime_factor(n / 2) \n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(100_000_000)\n\
    </cell>\n<text>\nExercise: Write a function that returns the smallest prime factor\
    \ of n. Assume n > 1 and is not a prime.\nHint: Use a while loop and a prime number\
    \ sieve.", "    if n < 2 \n        then return 1 \n    else if n % 2 == 0 \n \
    \       then return n \n    else \n        p := largest_prime_factor(n / 2) \n\
    \        if n % p == 0 \n            then return p \n        else \n         \
    \   return n \nend \n</cell>\n<code language=julia-1.5>\nlargest_prime_factor(13195)\n\
    </cell>\n<code language=julia-1.5>\nlargest_prime_factor(2048)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the smallest prime factor of n. Assume\
    \ n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n    13\n  \
    \  >>> smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n < 2 \n     \
    \   then return n\n    else if n % 2 == 0 \n        then return 2\n    else if\
    \ n % 3 == 0 \n        then return 3\n    else if n % 5 == 0 \n        then return\
    \ 5\n    else if n % 7 == 0 \n        then return 7\n    else if n % 11 == 0 \n\
    \        then return 11\n    else if n % 13 == 0 \n        then return 13\n  \
    \  else if n % 17 == 0 \n        then return 17\n    else if n % 19 == 0 \n  \
    \      then return 19\n    else if n % 23 == 0 \n        then return 23\n    else\
    \ if n % 29 == 0 \n        then return 29\n    else if n % 31 == 0 \n        then\
    \ return 31\n    else if n % 37 == 0 \n        then return 37\n    else if n %\
    \ 41 == 0:\n        then return 41\n    else if n % 43 == 0 \n        then return\
    \ 43\n    else if n % 47 == 0 \n        then return 47\n    else if n % 53 ==\
    \ 0 \n        then return 53\n    else if n % 59 == 0 \n        then return 59\n\
    \    else if n % 61 == 0 \n        then return 61\n    else if n % 67 == 0 \n\
    \        then return 67\n    else if n % 71 == 0 \n        then return 71\n  \
    \  else if n % 73 == 0 \n        then return 73\n    else if n % 79 == 0 \n  \
    \      then return 79\n    else if n % 83 == 0 \n        then return 83\n    else\
    \ if n % 89 == 0 \n        then return 89\n    else if n % 97 == 0 \n        then\
    \ return 97\n    else if n % 101 == 0 \n        then return 101\n    else if n\
    \ % 103 == 0 \n        then return 103\n    else if n % 107 == 0 \n        then\
    \ return 107\n    else if n % 111 == 0 \n        then return 111\n    else if\
    \ n % 113 == 0 \n        then return 113\n    else if n % 117 == 0 \n        then\
    \ return 117\n    else if n % 121 == 0 \n        then return 121\n    else if\
    \ n % 123 == 0 \n        then return 123\n    else if n % 127 == 0 \n        then\
    \ return 127\n    else if n % 131 == 0 \n        then return 131\n    else if\
    \ n % 137 == 0 \n        then return 137\n    else if n % 141 == 0 \n        then\
    \ return 141\n    else if n % 147 == 0 \n        then return 147\n    else if\
    \ n % 151 == 0 \n", "    if n < 2 \n        then return n\n    else if n % 2 ==\
    \ 0 \n        then return largest_prime_factor(n / 2)\n    else \n        largest\
    \ = 2\n        for factor in prime_factors(n) \n            do if factor > largest\n\
    \                then largest = factor\n        return largest\nend\n</cell>\n\
    <code language=julia-1.4>\nlargest_prime_factor(13195)\n</cell>\n<code language=julia-1.4>\n\
    largest_prime_factor(2048)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the smallest prime factor of n. Assume n > 1 and is not a prime.\n \
    \   >>> smallest_prime_factor(13195)\n    13\n    >>> smallest_prime_factor(2048)\n\
    \    3\n    \"\"\"", "    if n==1 \n        1\n    else\n        largest_prime_factor(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(10^8)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(10^9)\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(10^10)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(10^11)\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(10^12)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(10^13)\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(10^14)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(10^15)\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(10^16)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(10^17)\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(10^18)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(10^19)\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(10^20)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(10^21)\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(10^22)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(10^23)\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(10^24)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(10^25)\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(10^26)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(10^27)\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(10^28)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(10^29)\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(10^30)\n</", "    if n <\
    \ 2 \n        then return n\n    else if n == 2 \n        then return 2\n    else\
    \ if n % 2 == 0 \n        then return largest_prime_factor(n/2)\n    else \n \
    \       largest_prime_factor(3*n+2)\nend\n</cell>\n<code language=julia-1.0>\n\
    largest_prime_factor(13195)\n</cell>\n<code language=julia-1.0>\nlargest_prime_factor(2048)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of prime\
    \ factors of a given number. Assume n > 1 and is not a prime.\nHint: use the function\
    \ largest_prime_factor(n::Int64)::Int64 to find the largest prime factor of n",
  "    if n < 2 || n % 2 == 0 \n        then return n\n    else if n % 3 == 0 \n \
    \       then return 3\n    else if n % 5 == 0 \n        then return 5\n    else\
    \ if n % 7 == 0 \n        then return 7\n    else if n % 11 == 0 \n        then\
    \ return 11\n    else if n % 13 == 0 \n        then return 13\n    else if n %\
    \ 17 == 0 \n        then return 17\n    else if n % 19 == 0 \n        then return\
    \ 19\n    else if n % 23 == 0 \n        then return 23\n    else if n % 29 ==\
    \ 0 \n        then return 29\n    else if n % 31 == 0 \n        then return 31\n\
    \    else if n % 37 == 0 \n        then return 37\n    else if n % 41 == 0 \n\
    \        then return 41\n    else if n % 43 == 0 \n        then return 43\n  \
    \  else if n % 47 == 0 \n        then return 47\n    else if n % 53 == 0 \n  \
    \      then return 53\n    else if n % 59 == 0 \n        then return 59\n    else\
    \ if n % 61 == 0 \n        then return 61\n    else if n % 67 == 0 \n        then\
    \ return 67\n    else if n % 71 == 0 \n        then return 71\n    else if n %\
    \ 73 == 0 \n        then return 73\n    else if n % 79 == 0 \n        then return\
    \ 79\n    else if n % 83 == 0 \n        then return 83\n    else if n % 89 ==\
    \ 0 \n        then return 89\n    else if n % 97 == 0 \n        then return 97\n\
    \    else if n % 101 == 0 \n        then return 101\n    else if n % 103 == 0\
    \ \n        then return 103\n    else if n % 107 == 0 \n        then return 107\n\
    \    else if n % 111 == 0 \n        then return 111\n    else if n % 117 == 0\
    \ \n        then return 117\n    else if n % 121 == 0 \n        then return 121\n\
    \    else if n % 123 == 0 \n        then return 123\n    else if n % 127 == 0\
    \ \n        then return 127\n    else if n % 131 == 0 \n        then return 131\n\
    \    else if n % 137 == 0 \n        then return 137\n    else if n % 141 == 0\
    \ \n        then return 141\n    else if n % 147 == 0 \n        then return 147\n\
    \    else if n % 151 == 0 \n        then return 151\n    else if n % 157 == 0\
    \ \n        then return 157\n    else ", "    if n == 1 \n        1\n    else\
    \ if n % 2 == 0 \n        largest_prime_factor(n / 2)\n    else \n        largest_prime_factor(3\
    \ * n + 1)\nend\n</cell>\n<code language=julia-1.3>", "    if n < 2 \n       \
    \ return n\n    else if n == 2 \n        return 2\n    else if n % 2 == 0 \n \
    \       return largest_prime_factor(n/2)\n    else \n        largest_prime_factor(n/3)\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n == 1 \n        1\n    else\n\
    \        largest_prime_factor(n / 2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(1000000000)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the greatest common divisor of two numbers. Assume that both numbers\
    \ are positive integers.", "    if n < 2 \n        then return n\n    else if\
    \ n == 2 \n        then return 1\n    else if n % 2 == 0 \n        then return\
    \ largest_prime_factor(n/2)\n    else \n        largest_prime_factor(3*n+1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_prime_factor(13195)\n\
    </cell>\n<code language=julia-1.5>\nlargest_prime_factor(2048)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the smallest prime factor of n. Assume\
    \ n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n    13\n  \
    \  >>> smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n == 1 \n    \
    \    1 \n    else \n        largest_prime_factor(n / 2) \n    end\nend\n</cell>\n\
    <code language=julia-1.1>", "    if n < 2 \n        then return 1\n    else if\
    \ n % 2 == 0 \n        then return 2\n    else if n % 3 == 0 \n        then return\
    \ 3\n    else if n % 5 == 0 \n        then return 5\n    else if n % 7 == 0 \n\
    \        then return 7\n    else if n % 11 == 0 \n        then return 11\n   \
    \ else if n % 13 == 0 \n        then return 13\n    else if n % 17 == 0 \n   \
    \     then return 17\n    else if n % 19 == 0 \n        then return 19\n    else\
    \ if n % 23 == 0 \n        then return 23\n    else if n % 29 == 0 \n        then\
    \ return 29\n    else if n % 31 == 0 \n        then return 31\n    else if n %\
    \ 37 == 0 \n        then return 37\n    else if n % 41 == 0 \n        then return\
    \ 41\n    else if n % 43 == 0 \n        then return 43\n    else if n % 47 ==\
    \ 0 \n        then return 47\n    else if n % 53 == 0 \n        then return 53\n\
    \    else if n % 59 == 0 \n        then return 59\n    else if n % 61 == 0 \n\
    \        then return 61\n    else if n % 67 == 0 \n        then return 67\n  \
    \  else if n % 71 == 0 \n        then return 71\n    else if n % 73 == 0 \n  \
    \      then return 73\n    else if n % 79 == 0 \n        then return 79\n    else\
    \ if n % 83 == 0 \n        then return 83\n    else if n % 89 == 0 \n        then\
    \ return 89\n    else if n % 97 == 0 \n        then return 97\n    else if n %\
    \ 101 == 0 \n        then return 101\n    else if n % 103 == 0 \n        then\
    \ return 103\n    else if n % 107 == 0 \n        then return 107\n    else if\
    \ n % 111 == 0 \n        then return 111\n    else if n % 117 == 0 \n        then\
    \ return 117\n    else if n % 121 == 0 \n        then return 121\n    else if\
    \ n % 123 == 0 \n        then return 123\n    else if n % 127 == 0 \n        then\
    \ return 127\n    else if n % 131 == 0 \n        then return 131\n    else if\
    \ n % 137 == 0 \n        then return 137\n    else if n % 141 == 0 \n        then\
    \ return 141\n    else if n % 147 == 0 \n        then return 147\n    else if\
    \ n % 151 == 0 \n        then return 151\n    else if n % 157 == 0 ", "    if\
    \ n == 1 \n        1 \n    else \n        largest_prime_factor(n / 2) \n    end\n\
    end\n</cell>\n<code language=julia-1.4>", "    if n < 2 \n        then return\
    \ n\n    else if n == 2 \n        then return 2\n    else if n % 2 == 0 \n   \
    \     then return 2\n    else \n        largest_prime_factor(n / 2)\n    end\n\
    end\n</cell>\n<code language=julia-1.0>", "    if n < 2 \n        then return\
    \ 2\n    else if n % 2 == 0 \n        then return 2\n    else if n % 3 == 0 \n\
    \        then return 3\n    else if n % 5 == 0 \n        then return 5\n    else\
    \ if n % 7 == 0 \n        then return 7\n    else if n % 11 == 0 \n        then\
    \ return 11\n    else if n % 13 == 0 \n        then return 13\n    else if n %\
    \ 17 == 0 \n        then return 17\n    else if n % 19 == 0 \n        then return\
    \ 19\n    else if n % 23 == 0 \n        then return 23\n    else if n % 29 ==\
    \ 0 \n        then return 29\n    else if n % 31 == 0 \n        then return 31\n\
    \    else if n % 37 == 0 \n        then return 37\n    else if n % 41 == 0 \n\
    \        then return 41\n    else if n % 43 == 0 \n        then return 43\n  \
    \  else if n % 47 == 0 \n        then return 47\n    else if n % 53 == 0 \n  \
    \      then return 53\n    else if n % 59 == 0 \n        then return 59\n    else\
    \ if n % 61 == 0 \n        then return 61\n    else if n % 67 == 0 \n        then\
    \ return 67\n    else if n % 71 == 0 \n        then return 71\n    else if n %\
    \ 73 == 0 \n        then return 73\n    else if n % 79 == 0 \n        then return\
    \ 79\n    else if n % 83 == 0 \n        then return 83\n    else if n % 89 ==\
    \ 0 \n        then return 89\n    else if n % 97 == 0 \n        then return 97\n\
    \    else if n % 101 == 0 \n        then return 101\n    else if n % 103 == 0\
    \ \n        then return 103\n    else if n % 107 == 0 \n        then return 107\n\
    \    else if n % 111 == 0 \n        then return 111\n    else if n % 117 == 0\
    \ \n        then return 117\n    else if n % 121 == 0 \n        then return 121\n\
    \    else if n % 123 == 0 \n        then return 123\n    else if n % 127 == 0\
    \ \n        then return 127\n    else if n % 131 == 0 \n        then return 131\n\
    \    else if n % 137 == 0 \n        then return 137\n    else if n % 141 == 0\
    \ \n        then return 141\n    else if n % 147 == 0 \n        then return 147\n\
    \    else if n % 151 == 0 \n        then return 151\n    else if n % 157 == 0 ",
  "    if n == 1 \n        1 \n    else \n        largest_prime_factor(n-1) * n \n\
    end\n</cell>\n<code language=julia-1.5>", "    if n<2 return 1\n    \n    factor::Int64\
    \ = 1\n    \n    for f in factors(n) do \n        if f > factor then \n      \
    \      factor = f\n        end\n    end\n    \n    return factor\nend\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(13195)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(2048)\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the smallest prime factor of n. Assume n > 1 and is not a prime.\n\
    Hint: Use a for loop to iterate over all prime factors of n.", "    if n == 1\
    \ \n        1\n    else\n        largest_prime_factor(n / 2)\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\n@time largest_prime_factor(100_000_000)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the smallest prime factor of\
    \ n. Assume n > 1 and is not a prime.\nHint: use the function largest_prime_factor.",
  "    if n == 1 \n        1\n    else\n        largest_prime_factor(n / 2)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\n@time largest_prime_factor(100_000_000)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the smallest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nHint: You may want to use n%i\
    \ to test if i is a factor.", "    if n < 2 \n        then return n\n    else\
    \ if n == 2 \n        then return 2\n    else if n % 2 == 0 \n        then return\
    \ largest_prime_factor(n / 2)\n    else \n        largest_prime_factor(3 * n +\
    \ 1)\n    end\nend\n</cell>\n<code language=julia-1.3>\nlargest_prime_factor(13195)\n\
    </cell>\n<code language=julia-1.3>\nlargest_prime_factor(2048)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the smallest prime factor of n. Assume\
    \ n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n    13\n  \
    \  >>> smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n < 2 \n     \
    \   then return 1\n    else if n % 2 == 0 \n        then return 2\n    else \n\
    \        p := 3\n        while p < n \n            do if n % p == 0 \n       \
    \         then return p\n                p := p + 2\n            end\n       \
    \ end\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if n < 2 \n   \
    \     then return 1\n    else if n % 2 == 0 \n        then return 2\n    else\
    \ if n % 3 == 0 \n        then return 3\n    else if n % 5 == 0 \n        then\
    \ return 5\n    else if n % 7 == 0 \n        then return 7\n    else if n % 11\
    \ == 0 \n        then return 11\n    else if n % 13 == 0 \n        then return\
    \ 13\n    else if n % 17 == 0 \n        then return 17\n    else if n % 19 ==\
    \ 0 \n        then return 19\n    else if n % 23 == 0 \n        then return 23\n\
    \    else if n % 29 == 0 \n        then return 29\n    else if n % 31 == 0 \n\
    \        then return 31\n    else if n % 37 == 0 \n        then return 37\n  \
    \  else if n % 41 == 0 \n        then return 41\n    else if n % 43 == 0 \n  \
    \      then return 43\n    else if n % 47 == 0 \n        then return 47\n    else\
    \ if n % 53 == 0 \n        then return 53\n    else if n % 59 == 0 \n        then\
    \ return 59\n    else if n % 61 == 0 \n        then return 61\n    else if n %\
    \ 67 == 0 \n        then return 67\n    else if n % 71 == 0 \n        then return\
    \ 71\n    else if n % 73 == 0 \n        then return 73\n    else if n % 79 ==\
    \ 0 \n        then return 79\n    else if n % 83 == 0 \n        then return 83\n\
    \    else if n % 89 == 0 \n        then return 89\n    else if n % 97 == 0 \n\
    \        then return 97\n    else if n % 101 == 0 \n        then return 101\n\
    \    else if n % 103 == 0 \n        then return 103\n    else if n % 107 == 0\
    \ \n        then return 107\n    else if n % 111 == 0 \n        then return 111\n\
    \    else if n % 117 == 0 \n        then return 117\n    else if n % 121 == 0\
    \ \n        then return 121\n    else if n % 123 == 0 \n        then return 123\n\
    \    else if n % 127 == 0 \n        then return 127\n    else if n % 131 == 0\
    \ \n        then return 131\n    else if n % 137 == 0 \n        then return 137\n\
    \    else if n % 141 == 0 \n        then return 141\n    else if n % 147 == 0\
    \ \n        then return 147\n    else if n % 151 == 0 \n        then return 151\n\
    \    else if n % 157 == 0 ", "    if n < 2 \n        then return 1\n    else if\
    \ n == 2 \n        then return 2\n    else if n % 2 == 0 \n        then return\
    \ n\n    else \n        largest_prime_factor(n / 2) \n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n == 1 \n        1\n    else\n        largest_prime_factor(n\
    \ / 2)\n    end\nend\n</cell>\n<code language=julia-1.3>\n@time largest_prime_factor(100_000_000)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of prime\
    \ factors of n. Assume n > 1 and is not a prime.", "    if n < 2 \n        then\
    \ return n\n    else if n == 2 \n        then return 2\n    else if n % 2 == 0\
    \ \n        then return largest_prime_factor(n/2)\n    else \n        largest_prime_factor(3*n+2)\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n<2 return 1\n    factor::Int64\
    \ = 1\n    factor::Int64 = 2\n    while factor*factor <= n do\n        if n%factor==0\
    \ then return factor\n        factor = factor+1\n    end\n    return factor\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_prime_factor(13195)\n</cell>\n\
    <code language=julia-1.5>\nlargest_prime_factor(2048)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the smallest prime factor of n. Assume n >\
    \ 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n    3\n    >>>\
    \ smallest_prime_factor(2048)\n    2\n    \"\"\"", "    if n < 2 \n        then\
    \ return n\n    else if n % 2 == 0 \n        then return largest_prime_factor(n\
    \ / 2)\n    else \n        largest_prime_factor(3 * n + 1)\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\nlargest_prime_factor(13195)\n</cell>\n<code language=julia-1.3>\n\
    largest_prime_factor(2048)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the smallest prime factor of n. Assume n > 1 and is not a prime.\n \
    \   >>> smallest_prime_factor(13195)\n    3\n    >>> smallest_prime_factor(2048)\n\
    \    2\n    \"\"\"", "    if n == 1 \n        1\n    else if n % 2 == 0 \n   \
    \     largest_prime_factor(n / 2)\n    else \n        largest_prime_factor(3 *\
    \ n + 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_prime_factor(13195)\n\
    </cell>\n<code language=julia-1.5>\nlargest_prime_factor(2048)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the smallest prime factor of n. Assume\
    \ n > 1 and is not a prime.\nHint: Use a while loop to keep looping until you\
    \ find a prime factor.", "    if n < 2 \n        then return n\n    else if n\
    \ % 2 == 0 \n        then return 2\n    else if n % 3 == 0 \n        then return\
    \ 3\n    else if n % 5 == 0 \n        then return 5\n    else if n % 7 == 0 \n\
    \        then return 7\n    else if n % 11 == 0 \n        then return 11\n   \
    \ else if n % 13 == 0 \n        then return 13\n    else if n % 17 == 0 \n   \
    \     then return 17\n    else if n % 19 == 0 \n        then return 19\n    else\
    \ if n % 23 == 0 \n        then return 23\n    else if n % 29 == 0 \n        then\
    \ return 29\n    else if n % 31 == 0 \n        then return 31\n    else if n %\
    \ 37 == 0 \n        then return 37\n    else if n % 41 == 0 \n        then return\
    \ 41\n    else if n % 43 == 0 \n        then return 43\n    else if n % 47 ==\
    \ 0 \n        then return 47\n    else if n % 53 == 0 \n        then return 53\n\
    \    else if n % 59 == 0 \n        then return 59\n    else if n % 61 == 0 \n\
    \        then return 61\n    else if n % 67 == 0 \n        then return 67\n  \
    \  else if n % 71 == 0 \n        then return 71\n    else if n % 73 == 0 \n  \
    \      then return 73\n    else if n % 79 == 0 \n        then return 79\n    else\
    \ if n % 83 == 0 \n        then return 83\n    else if n % 89 == 0 \n        then\
    \ return 89\n    else if n % 97 == 0 \n        then return 97\n    else if n %\
    \ 101 == 0 \n        then return 101\n    else if n % 103 == 0 \n        then\
    \ return 103\n    else if n % 107 == 0 \n        then return 107\n    else if\
    \ n % 111 == 0 \n        then return 111\n    else if n % 117 == 0 \n        then\
    \ return 117\n    else if n % 121 == 0 \n        then return 121\n    else if\
    \ n % 123 == 0 \n        then return 123\n    else if n % 127 == 0 \n        then\
    \ return 127\n    else if n % 131 == 0 \n        then return 131\n    else if\
    \ n % 137 == 0 \n        then return 137\n    else if n % 141 == 0 \n        then\
    \ return 141\n    else if n % 147 == 0 \n        then return 147\n    else if\
    \ n % 151 == 0 \n        then return 151\n    else if n % 157 == 0 ", "    if\
    \ n < 2 \n        then return n\n    else if n % 2 == 0 \n        then return\
    \ largest_prime_factor(n / 2)\n    else \n        largest_prime_factor(n / 2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(2000000)\n\
    </cell>\n<text>\nExercise: Write a function that returns the greatest prime factor\
    \ of n. Assume n > 1 and is not a prime.\nHint: Use a while loop.", "    if n\
    \ < 2 \n        return n\n    \n    p :: Int64 = 2 \n    while p * p <= n \n \
    \       p :: Int64 = p \n        while n % p == 0 \n            n :: Int64 = n\
    \ / p\n            p :: Int64 = p \n    return n \nend\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(2000000)\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the smallest prime factor of n. Assume n > 1 and is not a prime.\n\
    Hint: Use a while loop to keep dividing n by primes until you get down to 1.",
  "    if n < 2 \n        then return 1\n    else if n % 2 == 0 \n        then return\
    \ 2\n    else if n % 3 == 0 \n        then return 3\n    else if n % 5 == 0 \n\
    \        then return 5\n    else if n % 7 == 0 \n        then return 7\n    else\
    \ if n % 11 == 0 \n        then return 11\n    else if n % 13 == 0 \n        then\
    \ return 13\n    else if n % 17 == 0 \n        then return 17\n    else if n %\
    \ 19 == 0 \n        then return 19\n    else if n % 23 == 0 \n        then return\
    \ 23\n    else if n % 29 == 0 \n        then return 29\n    else if n % 31 ==\
    \ 0 \n        then return 31\n    else if n % 37 == 0 \n        then return 37\n\
    \    else if n % 41 == 0 \n        then return 41\n    else if n % 43 == 0 \n\
    \        then return 43\n    else if n % 47 == 0 \n        then return 47\n  \
    \  else if n % 53 == 0 \n        then return 53\n    else if n % 59 == 0 \n  \
    \      then return 59\n    else if n % 61 == 0 \n        then return 61\n    else\
    \ if n % 67 == 0 \n        then return 67\n    else if n % 71 == 0 \n        then\
    \ return 71\n    else if n % 73 == 0 \n        then return 73\n    else if n %\
    \ 79 == 0 \n        then return 79\n    else if n % 83 == 0 \n        then return\
    \ 83\n    else if n % 89 == 0 \n        then return 89\n    else if n % 97 ==\
    \ 0 \n        then return 97\n    else if n % 101 == 0 \n        then return 101\n\
    \    else if n % 103 == 0 \n        then return 103\n    else if n % 107 == 0\
    \ \n        then return 107\n    else if n % 111 == 0 \n        then return 111\n\
    \    else if n % 117 == 0 \n        then return 117\n    else if n % 121 == 0\
    \ \n        then return 121\n    else if n % 123 == 0 \n        then return 123\n\
    \    else if n % 127 == 0 \n        then return 127\n    else if n % 131 == 0\
    \ \n        then return 131\n    else if n % 137 == 0 \n        then return 137\n\
    \    else if n % 141 == 0 \n        then return 141\n    else if n % 147 == 0\
    \ \n        then return 147\n    else if n % 151 == 0 \n        then return 151\n\
    \    else if n % 157 == 0 ", "    if n == 1 \n        1\n    else\n        largest_prime_factor(n-1)\
    \ * n\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(100_000_000)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(100_000_000_000)\n\
    </cell>\n<text>\nExercise: Write a function that returns the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\nHint: Use a while loop and a prime number\
    \ checker function.", "    if n == 1 \n        1\n    else if n % 2 == 0 \n  \
    \      largest_prime_factor(n / 2)\n    else \n        largest_prime_factor(3\
    \ * n + 1) \nend\n</cell>\n<code language=julia-1.5>\nlargest_prime_factor(13195)\n\
    </cell>\n<code language=julia-1.5>\nlargest_prime_factor(2048)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the smallest prime factor of n. Assume\
    \ n > 1 and is not a prime.\nHint: use the function largest_prime_factor.", " \
    \   if n == 1 \n        1\n    else\n        largest_prime_factor(n-1) * 3 + 1\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(100_000_000)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the smallest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n\
    \    13\n    >>> smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n <\
    \ 2 \n        then return n\n    else if n == 2 \n        then return 2\n    else\
    \ if n % 2 == 0 \n        then return largest_prime_factor(n / 2)\n    else \n\
    \        largest_prime_factor(3 * n + 1) \nend\n</cell>\n<code language=julia-1.3>\n\
    largest_prime_factor(13195)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the smallest prime factor of n. Assume n > 1 and is not a prime.\n \
    \   >>> smallest_prime_factor(13195)\n    13\n    >>> smallest_prime_factor(2048)\n\
    \    3\n    \"\"\"", "    if n == 1 \n        1\n    else\n        largest_prime_factor(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if n < 2 \n        then\
    \ return n\n    else if n % 2 == 0 \n        then return largest_prime_factor(n\
    \ / 2)\n    else \n        p := largest_prime_factor(n / 2)\n        if n % p\
    \ == 0 \n            then return p\n        else return n\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time largest_prime_factor(20000000)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(20000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ largest_prime_factor(20000000)\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(20000000)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(20000000)\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(20000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time largest_prime_factor(20000000)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(20000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ largest_prime_factor(20000000)\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(20000000)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(20000000)\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(20000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time largest_prime_factor(20000000)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(20000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ largest_prime_factor(20000000)\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(20000000)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(20000000)\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(20000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time largest_prime_factor(20000000)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(20000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ largest_prime_factor(20000000)\n</cell>\n<code language=julia-1.5>\n@", "  \
    \  if n == 1 \n        1\n    else\n        largest_prime_factor(n / 2)\n    end\n\
    end\n</cell>\n<code language=julia-1.1>", "    if n == 1 \n        1 \n    else\
    \ \n        largest_prime_factor(n / 2) \n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    @time largest_prime_factor(2000000);\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the greatest common divisor of two numbers. Assume that both numbers\
    \ are positive.\nHint: use the Euclidean algorithm.", "    if n == 1 \n      \
    \  1\n    else\n        largest_prime_factor(n-1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(100_000_000)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the smallest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nHint: Use a sieve of Eratosthenes.", "    if n < 2 \n        then\
    \ return 1\n    else if n == 2 \n        then return 2\n    else if n % 2 == 0\
    \ \n        then return 2\n    else if n % 3 == 0 \n        then return 3\n  \
    \  else if n % 5 == 0 \n        then return 5\n    else if n % 7 == 0 \n     \
    \   then return 7\n    else if n % 11 == 0 \n        then return 11\n    else\
    \ if n % 13 == 0 \n        then return 13\n    else if n % 17 == 0 \n        then\
    \ return 17\n    else if n % 19 == 0 \n        then return 19\n    else if n %\
    \ 23 == 0 \n        then return 23\n    else if n % 29 == 0 \n        then return\
    \ 29\n    else if n % 31 == 0 \n        then return 31\n    else if n % 37 ==\
    \ 0 \n        then return 37\n    else if n % 41 == 0 \n        then return 41\n\
    \    else if n % 43 == 0 \n        then return 43\n    else if n % 47 == 0 \n\
    \        then return 47\n    else if n % 53 == 0 \n        then return 53\n  \
    \  else if n % 59 == 0 \n        then return 59\n    else if n % 61 == 0 \n  \
    \      then return 61\n    else if n % 67 == 0 \n        then return 67\n    else\
    \ if n % 71 == 0 \n        then return 71\n    else if n % 73 == 0 \n        then\
    \ return 73\n    else if n % 79 == 0 \n        then return 79\n    else if n %\
    \ 83 == 0 \n        then return 83\n    else if n % 89 == 0 \n        then return\
    \ 89\n    else if n % 97 == 0 \n        then return 97\n    else if n % 101 ==\
    \ 0 \n        then return 101\n    else if n % 103 == 0 \n        then return\
    \ 103\n    else if n % 107 == 0 \n        then return 107\n    else if n % 111\
    \ == 0 \n        then return 111\n    else if n % 117 == 0 \n        then return\
    \ 117\n    else if n % 121 == 0 \n        then return 121\n    else if n % 127\
    \ == 0 \n        then return 127\n    else if n % 131 == 0 \n        then return\
    \ 131\n    else if n % 137 == 0 \n        then return 137\n    else if n % 141\
    \ == 0 \n        then return 141\n    else if n % 147 == 0 \n        then return\
    \ 147\n    else if n % 151 == 0 \n        then return 151\n    else if n % 157\
    \ == 0 \n        ", "    if n < 2 \n        then return n\n    else if n % 2 ==\
    \ 0 \n        then return 2\n    else if n % 3 == 0 \n        then return 3\n\
    \    else if n % 5 == 0 \n        then return 5\n    else if n % 7 == 0 \n   \
    \     then return 7\n    else if n % 11 == 0 \n        then return 11\n    else\
    \ if n % 13 == 0 \n        then return 13\n    else if n % 17 == 0 \n        then\
    \ return 17\n    else if n % 19 == 0 \n        then return 19\n    else if n %\
    \ 23 == 0 \n        then return 23\n    else if n % 29 == 0 \n        then return\
    \ 29\n    else if n % 31 == 0 \n        then return 31\n    else if n % 37 ==\
    \ 0 \n        then return 37\n    else if n % 41 == 0 \n        then return 41\n\
    \    else if n % 43 == 0 \n        then return 43\n    else if n % 47 == 0 \n\
    \        then return 47\n    else if n % 53 == 0 \n        then return 53\n  \
    \  else if n % 59 == 0 \n        then return 59\n    else if n % 61 == 0 \n  \
    \      then return 61\n    else if n % 67 == 0 \n        then return 67\n    else\
    \ if n % 71 == 0 \n        then return 71\n    else if n % 73 == 0 \n        then\
    \ return 73\n    else if n % 79 == 0 \n        then return 79\n    else if n %\
    \ 83 == 0 \n        then return 83\n    else if n % 89 == 0 \n        then return\
    \ 89\n    else if n % 97 == 0 \n        then return 97\n    else if n % 101 ==\
    \ 0 \n        then return 101\n    else if n % 103 == 0 \n        then return\
    \ 103\n    else if n % 107 == 0 \n        then return 107\n    else if n % 111\
    \ == 0 \n        then return 111\n    else if n % 117 == 0 \n        then return\
    \ 117\n    else if n % 121 == 0 \n        then return 121\n    else if n % 123\
    \ == 0 \n        then return 123\n    else if n % 127 == 0 \n        then return\
    \ 127\n    else if n % 131 == 0 \n        then return 131\n    else if n % 137\
    \ == 0 \n        then return 137\n    else if n % 141 == 0 \n        then return\
    \ 141\n    else if n % 147 == 0 \n        then return 147\n    else if n % 151\
    \ == 0 \n        then return 151\n    else if n % 157 == 0 ", "    if n == 1 \n\
    \        1\n    else if n % 2 == 0 \n        largest_prime_factor(n / 2)\n   \
    \ else \n        largest_prime_factor(3 * n + 1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nlargest_prime_factor(13195)\n</cell>\n<code language=julia-1.5>\n\
    largest_prime_factor(2048)\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the smallest prime factor of n. Assume n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n\
    \    13\n    >>> smallest_prime_factor(2048)\n    2\n    \"\"\"", "    if n<2\
    \ return 1\n    if n==2 return n\n    if n%2==0 return 2\n    if n%3==0 return\
    \ 3\n    if n%5==0 return 5\n    if n%7==0 return 7\n    if n%11==0 return 11\n\
    \    if n%13==0 return 13\n    if n%17==0 return 17\n    if n%19==0 return 19\n\
    \    if n%23==0 return 23\n    if n%29==0 return 29\n    if n%311==0 return 31\n\
    \    if n%127==0 return 127\n    if n%255==0 return 255\n    if n%511==0 return\
    \ 511\n    if n%1023==0 return 1023\n    if n%4095==0 return 4095\n    if n%7031==0\
    \ return 7031\n    if n%1048577==0 return 1048577\n    if n%2147483647==0 return\
    \ 2147483647\n    if n%4294967297==0 return 4294967297\n    if n%8589934591==0\
    \ return 8589934591\n    if n%17179869183==0 return 17179869183\n    if n%34359738367==0\
    \ return 34359738367\n    if n%68719476735==0 return 68719476735\n    if n%13743895347==0\
    \ return 13743895347\n    if n%26843545591==0 return 26843545591\n    if n%536870911==0\
    \ return 536870911\n    if n%1073741823==0 return 1073741823\n    if n%2147483647\
    \ return 2147483647\n    if n%4294967297 return 4294967297\n    if n%8589934591\
    \ return 8589934591\n    if n%17179869183 return 17179869183\n    if n%34359738367\
    \ return 34359738367\n    if n%68719476735 return 68719476735\n    if n%13743895347\
    \ return 13743895347\n    if n%26843545591 return 26843545591\n    if n%536870911\
    \ return 536870911\n    if n%1073741823 return 1073741823\n    if n%214", "  \
    \  if n < 2 \n        then return n\n    else if n % 2 == 0 \n        then return\
    \ largest_prime_factor(n / 2)\n    else \n        largest_prime_factor(3 * n +\
    \ 1) \nend\n</cell>\n<code language=julia-1.3>\nlargest_prime_factor(13195)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the smallest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n\
    \    3\n    >>> smallest_prime_factor(2048)\n    7\n    \"\"\"", "    if n < 2\
    \ || n % 2 == 0 \n        then return 2\n    else if n % 3 == 0 \n        then\
    \ return 3\n    else if n % 5 == 0 \n        then return 5\n    else if n % 7\
    \ == 0 \n        then return 7\n    else \n        largest_prime_factor(n/2) \n\
    end\n</cell>\n<code language=julia-1.5>\n@assert largest_prime_factor(7) == 7\n\
    @assert largest_prime_factor(11) == 11\n@assert largest_prime_factor(13) == 13\n\
    @assert largest_prime_factor(17) == 17\n@assert largest_prime_factor(19) == 19\n\
    @assert largest_prime_factor(23) == 23\n@assert largest_prime_factor(29) == 29\n\
    @assert largest_prime_factor(31) == 31\n@assert largest_prime_factor(37) == 37\n\
    @assert largest_prime_factor(43) == 43\n@assert largest_prime_factor(47) == 47\n\
    @assert largest_prime_factor(53) == 53\n@assert largest_prime_factor(59) == 59\n\
    @assert largest_prime_factor(61) == 61\n@assert largest_prime_factor(67) == 67\n\
    @assert largest_prime_factor(71) != 71 && largest_prime_factor(71) != 71\n@assert\
    \ largest_prime_factor(73) != 73\n@assert largest_prime_factor(79) != 79 && largest_prime_factor(79)\
    \ != 79\n@assert largest_prime_factor(89) != 89 && largest_prime_factor(89) !=\
    \ 89\n@assert largest_prime_factor(97) != 97 && largest_prime_factor(97) != 97\n\
    @assert largest_prime_factor(101) != 101 && largest_prime_factor(101) != 101\n\
    @assert largest_prime_factor(103) != 103 && largest_prime_factor(103) != 103\n\
    @assert largest_prime_factor(107) != 107 && largest_prime_factor(107) != 107\n\
    @assert largest_prime_factor(109) != 109 && largest_prime_factor(109) != 109\n\
    @assert largest_prime_factor(113) != 113 && largest_prime_factor(113) != 113\n\
    @assert largest_prime_factor(127) != 127 && largest_prime_factor(127) != 127\n\
    @assert largest_prime_factor(131) != 131 && largest_prime_factor(131) != 131\n\
    @assert largest_prime_factor(137) != 137 && largest_prime_factor(137) != 137\n\
    @assert largest_prime", "    if n<2 return 1\n    factor::Int64 = 1\n    factor::Int64\
    \ = 2\n    while factor*factor <= n do\n        factor::Int64 = factor*factor\n\
    \    end\n    return factor\nend\n</cell>\n<code language=julia-1.4>\nlargest_prime_factor(13195)\n\
    </cell>\n<code language=julia-1.4>\nlargest_prime_factor(2048)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the smallest prime factor of n. Assume\
    \ n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n    13\n  \
    \  >>> smallest_prime_factor(2048)\n    2\n    \"\"\"", "    if n < 2 \n     \
    \   then return n\n    else if n % 2 == 0 \n        then return largest_prime_factor(n/2)\n\
    \    else \n        largest_prime_factor(3*n+1)\nend\n</cell>\n<code language=julia-1.3>\n\
    largest_prime_factor(13195)\n</cell>\n<code language=julia-1.3>\nlargest_prime_factor(2048)\n\
    </cell>\n<text>\nExercise 3\nWrite a function prime_factor that takes an integer\
    \ $n$ and returns the prime factors of $n$. Assume that $n$ is prime.", "    if\
    \ n<2\n        error(\"n must be > 1\")\n    end\n    if n==2\n        return\
    \ n\n    \n    largest=2\n    for p in primes(n)\n        if p*p > largest\n \
    \           largest = p\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.1>\nlargest_prime_factor(13195)\n</cell>\n<code language=julia-1.1>\n\
    largest_prime_factor(2048)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the smallest prime factor of n. Assume n > 1 and is not a prime.\n \
    \   >>> smallest_prime_factor(13195)\n    13\n    >>> smallest_prime_factor(2048)\n\
    \    3\n    \"\"\"", "    if n<2 return 1\n    else if n%2==0 return 2\n    else\
    \ if n%3==0 return 3\n    else if n%5==0 return 5\n    else if n%7==0 return 7\n\
    \    else return largest_prime_factor(n/3)\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_prime_factor(13195)\n</cell>\n<code language=julia-1.5>\nlargest_prime_factor(2048)\n\
    </cell>\n<text>\nProblem 3\nA palindromic number reads the same both ways. The\
    \ largest palindrome made from the product of two 2-digit numbers is 9009 = 91\
    \ \xD7 99.", "    if n < 2 \n        then return 1\n    else if n == 2 \n    \
    \    then return 2\n    else if n % 2 == 0 \n        then return n\n    else if\
    \ n % 3 == 0 \n        then return n\n    else if n % 5 == 0 \n        then return\
    \ n\n    else if n % 7 == 0 \n        then return n\n    else \n        largest_prime_factor(n\
    \ / 2)\nend\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(20000000)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(20000001)\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(20000002)\n</cell>\n<code\
    \ language=julia-1.5>\n@time largest_prime_factor(20000003)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(20000004)\n</cell>\n<code language=julia-1.5>\n@time\
    \ largest_prime_factor(20000005)\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(20000006)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(20000007)\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(20000008)\n</cell>\n<code\
    \ language=julia-1.5>\n@time largest_prime_factor(20000009)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(20000010)\n</cell>\n<code language=julia-1.5>\n@time\
    \ largest_prime_factor(20000011)\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(20000012)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(20000013)\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(20000014)\n</cell>\n<code\
    \ language=julia-1.5>\n@time largest_prime_factor(20000015)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(20000016)\n</cell>\n<code language=julia-1.5>\n@time\
    \ largest_prime_factor(20000017)\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(20000018)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(20000019)\n</cell>\n\
    <code language=juli", "    if n < 2 \n        then return n\n    else if n ==\
    \ 2 \n        then return 2\n    else if n % 2 == 0 \n        then return largest_prime_factor(n/2)\n\
    \    else \n        largest_prime_factor(3*n+2)\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_prime_factor(13195)\n</cell>\n<code language=julia-1.5>\nlargest_prime_factor(2048)\n\
    </cell>\n<text>\nExercise: Write a function that returns the greatest prime factor\
    \ of n. Assume n > 1 and is not a prime.\nHint: Use a recursive function and base\
    \ case is when n is even.", "    if n < 2 \n        then return 1\n    else if\
    \ n % 2 == 0 \n        then return 2\n    else \n        p := 3\n        while\
    \ p < n \n            do if n % p == 0 \n                then return p\n     \
    \           p := p + 2\n        end \n        return n\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n<2 return 1\n    if n==2 return n\n    factors=prime_factors(n)\n\
    \    largest=factors[1]\n    for f in factors[2:] \n        if f>largest \n  \
    \          largest=f\n    return largest\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    This does not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/26839463)\n\
    <|/ c |>\n<| c |>\nIt does provide an answer to the question. He asked \"What\
    \ is the largest prime factor of n?\" The code he posted does exactly that. He\
    \ also asked \"What is the largest prime factor of n?\" The code he posted does\
    \ exactly that. He also asked \"What is the largest prime factor of n?\" The code\
    \ he posted does exactly that. He also asked \"What is the largest prime factor\
    \ of n?\" The code he posted does exactly that. He also asked \"What is the largest\
    \ prime factor of n?\" The code he posted does exactly that. He also asked \"\
    What is the largest prime factor of n?\" The code he posted does exactly that.\
    \ He also asked \"What is the largest prime factor of n?\" The code he posted\
    \ does exactly that. He also asked \"What is the largest prime factor of n?\"\
    \ The code he posted does exactly that. He also asked \"What is the largest prime\
    \ factor of n?\" The code he posted does exactly that. He also asked \"What is\
    \ the largest prime factor of n?\" The code he posted does exactly that. He also\
    \ asked \"What is the largest prime factor of n?\" The code he posted does exactly\
    \ that. He also asked \"What is the largest prime factor of n?\" The code he posted\
    \ does exactly that. He also asked \"What is the largest prime factor of n?\"\
    \ The code he posted does exactly that. He also asked \"What is the largest prime\
    \ factor of n?\" The code he posted does exactly that. He also asked \"What is\
    \ the largest prime factor of n?\" The code he posted does exactly that. He also\
    \ asked \"What is the largest prime factor of n?\" The code he posted does ",
  "    if n < 2 \n        then return n\n    else if n % 2 == 0 \n        then return\
    \ largest_prime_factor(n / 2)\n    else \n        largest_prime_factor(3 * n +\
    \ 1)\n    end\nend\n</cell>\n<code language=julia-1.4>\nlargest_prime_factor(13195)\n\
    </cell>\n<code language=julia-1.4>\nlargest_prime_factor(2048)\n</cell>\n<text>\n\
    Exercise\nWrite a function that returns the smallest prime factor of n. Assume\
    \ n > 1 and is not a prime.\nHint: use the largest_prime_factor function you wrote\
    \ earlier.", "    if n==1 \n        1\n    else if n==2 \n        2\n    else\
    \ if n%2==0 \n        largest_prime_factor(n/2)\n    else \n        largest_prime_factor(n/3)\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\n@time largest_prime_factor(2000000);\n\
    </cell>\n<text>\nProblem 3\nThe prime factors of 13195 are 5, 7, 13 and 29.",
  "    if n < 2 \n        then return n\n    else if n % 2 == 0 \n        then return\
    \ largest_prime_factor(n / 2)\n    else \n        largest_prime_factor(3 * n +\
    \ 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert largest_prime_factor(7)\
    \ == 3\n@assert largest_prime_factor(12) == 5\n@assert largest_prime_factor(13)\
    \ == 7\n@assert largest_prime_factor(14) == 7\n@assert largest_prime_factor(15)\
    \ == 11\n@assert largest_prime_factor(16) == 13\n@assert largest_prime_factor(17)\
    \ == 17\n@assert largest_prime_factor(18) == 19\n@assert largest_prime_factor(19)\
    \ == 23\n@assert largest_prime_factor(20) == 29\n@assert largest_prime_factor(21)\
    \ == 31\n@assert largest_prime_factor(22) == 37\n@assert largest_prime_factor(23)\
    \ == 41\n@assert largest_prime_factor(24) == 43\n@assert largest_prime_factor(25)\
    \ == 47\n@assert largest_prime_factor(26) == 59\n@assert largest_prime_factor(27)\
    \ == 71\n@assert largest_prime_factor(28) == 73\n@assert largest_prime_factor(29)\
    \ == 79\n@assert largest_prime_factor(30) == 83\n@assert largest_prime_factor(31)\
    \ == 89\n@assert largest_prime_factor(32) == 97\n@assert largest_prime_factor(33)\
    \ == 101\n@assert largest_prime_factor(34) == 103\n@assert largest_prime_factor(35)\
    \ == 107\n@assert largest_prime_factor(36) == 109\n@assert largest_prime_factor(37)\
    \ == 113\n@assert largest_prime_factor(38) == 117\n@assert largest_prime_factor(39)\
    \ == 121\n@assert largest_prime_factor(40) == 123\n@assert largest_prime_factor(41)\
    \ == 127\n@assert largest_prime_factor(42) == 131\n@assert largest_prime_factor(43)\
    \ == 137\n@assert largest_prime_factor(44) == 139\n@assert largest_prime_factor(45)\
    \ == 147\n@assert largest_prime_factor(46) == 151\n@assert largest_prime_factor(47)\
    \ == 157\n@assert largest_prime_factor(48) == 163\n@assert largest_prime_factor(49)\
    \ == 179\n@assert largest_prime_factor(50) == 193\n@assert largest_prime_factor(51)\
    \ == 197\n@", "    if n < 2 \n        then return n\n    else if n % 2 == 0 \n\
    \        then return 2\n    else \n        p := 3\n        while p < n \n    \
    \        do if n % p == 0 \n                then return p\n                p :=\
    \ p + 2\n            end\n        end\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 1 \n        1\n    else\n        largest_prime_factor(n / 2)\n    end\n\
    end\n</cell>\n<code language=julia-1.4>", "    if n < 2 || n % 2 == 0 \n     \
    \   then return 2\n    else if n % 3 == 0 \n        then return 3\n    else if\
    \ n % 5 == 0 \n        then return 5\n    else if n % 7 == 0 \n        then return\
    \ 7\n    else if n % 11 == 0 \n        then return 11\n    else if n % 13 == 0\
    \ \n        then return 13\n    else if n % 17 == 0 \n        then return 17\n\
    \    else if n % 19 == 0 \n        then return 19\n    else if n % 23 == 0 \n\
    \        then return 23\n    else if n % 29 == 0 \n        then return 29\n  \
    \  else if n % 31 == 0 \n        then return 31\n    else if n % 37 == 0 \n  \
    \      then return 37\n    else if n % 41 == 0 \n        then return 41\n    else\
    \ if n % 43 == 0 \n        then return 43\n    else if n % 47 == 0 \n        then\
    \ return 47\n    else if n % 53 == 0 \n        then return 53\n    else if n %\
    \ 59 == 0 \n        then return 59\n    else if n % 61 == 0 \n        then return\
    \ 61\n    else if n % 67 == 0 \n        then return 67\n    else if n % 71 ==\
    \ 0 \n        then return 71\n    else if n % 73 == 0 \n        then return 73\n\
    \    else if n % 79 == 0 \n        then return 79\n    else if n % 83 == 0 \n\
    \        then return 83\n    else if n % 89 == 0 \n        then return 89\n  \
    \  else if n % 97 == 0 \n        then return 97\n    else if n % 101 == 0 \n \
    \       then return 101\n    else if n % 103 == 0 \n        then return 103\n\
    \    else if n % 107 == 0 \n        then return 107\n    else if n % 111 == 0\
    \ \n        then return 111\n    else if n % 117 == 0 \n        then return 117\n\
    \    else if n % 121 == 0 \n        then return 121\n    else if n % 123 == 0\
    \ \n        then return 123\n    else if n % 127 == 0 \n        then return 127\n\
    \    else if n % 131 == 0 \n        then return 131\n    else if n % 137 == 0\
    \ \n        then return 137\n    else if n % 141 == 0 \n        then return 141\n\
    \    else if n % 147 == 0 \n        then return 147\n    else if n % 151 == 0\
    \ \n        then return 151\n    else if n % 157 == 0 \n        then return 157\n\
    \    else ", "    if n == 1 \n        1\n    else\n        largest_prime_factor(n\
    \ / 2)\n    end\nend\n</cell>\n<code language=julia-1.3>\n@time largest_prime_factor(20000000)\n\
    </cell>\n<text>\nExercise: Write a function that returns the smallest prime factor\
    \ of n. Assume n > 1 and is not a prime.\nHint: Use a while loop and a primality\
    \ test.", "    if n == 1 \n        1\n    else if n % 2 == 0 \n        largest_prime_factor(n\
    \ / 2)\n    else \n        largest_prime_factor(3 * n + 1) \n    end\nend\n</cell>\n\
    <code language=julia-1.3>\nlargest_prime_factor(13195)\n</cell>\n<code language=julia-1.3>\n\
    largest_prime_factor(2048)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the smallest prime factor of n. Assume n > 1 and is not a prime.\n \
    \   >>> smallest_prime_factor(13195)\n    13\n    >>> smallest_prime_factor(2048)\n\
    \    3\n    \"\"\"", "    if n < 2 \n        return n\n    \n    p :: Int64 =\
    \ 1\n    q :: Int64 = 2\n    \n    while true\n        if n % p == 0 \n      \
    \      return p\n        p += 1\n        if n % q == 0 \n            return q\n\
    \        q += 1\n    end\nend\n</cell>\n<code language=julia-1.3>\nlargest_prime_factor(13195)\n\
    </cell>\n<code language=julia-1.3>\nlargest_prime_factor(2048)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the smallest prime factor of n. Assume\
    \ n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n    13\n  \
    \  >>> smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n==1 \n      \
    \  1 \n    else \n        largest_prime_factor(n-1) * n \nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time largest_prime_factor(10^6)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the smallest prime factor of n. Assume n >\
    \ 1 and is not a prime.\nHint: Use a while loop and a primality test.", "    if\
    \ n < 2 \n        then return n\n    else if n % 2 == 0 \n        then return\
    \ largest_prime_factor(n / 2)\n    else if n % 3 == 0 \n        then return largest_prime_factor(n\
    \ / 3)\n    else if n % 5 == 0 \n        then return largest_prime_factor(n /\
    \ 5)\n    else if n % 7 == 0 \n        then return largest_prime_factor(n / 7)\n\
    \    else if n % 11 == 0 \n        then return largest_prime_factor(n / 11)\n\
    \    else if n % 13 == 0 \n        then return largest_prime_factor(n / 13)\n\
    \    else if n % 17 == 0 \n        then return largest_prime_factor(n / 17)\n\
    \    else if n % 19 == 0 \n        then return largest_prime_factor(n / 19)\n\
    \    else if n % 23 == 0 \n        then return largest_prime_factor(n / 23)\n\
    \    else if n % 29 == 0 \n        then return largest_prime_factor(n / 29)\n\
    \    else if n % 31 == 0 \n        then return largest_prime_factor(n / 31)\n\
    \    else if n % 37 == 0 \n        then return largest_prime_factor(n / 37)\n\
    \    else if n % 41 == 0 \n        then return largest_prime_factor(n / 41)\n\
    \    else if n % 43 == 0 \n        then return largest_prime_factor(n / 43)\n\
    \    else if n % 47 == 0 \n        then return largest_prime_factor(n / 47)\n\
    \    else if n % 53 == 0 \n        then return largest_prime_factor(n / 53)\n\
    \    else if n % 59 == 0 \n        then return largest_prime_factor(n / 59)\n\
    \    else if n % 61 == 0 \n        then return largest_prime_factor(n / 61)\n\
    \    else if n % 67 == 0 \n        then return largest_prime_factor(n / 67)\n\
    \    else if n % 71 == 0 \n        then return largest_prime_factor(n / 71)\n\
    \    else if n % 73 == 0 \n        then return largest_prime_factor(n / 73)\n\
    \    else if n % 79 == 0 \n        then return largest_prime_factor(n / 79)\n\
    \    else if n % 83 == 0 \n        then return largest_prime_factor(n / 83)\n\
    \    else if n % 89 == 0 \n        then return largest_prime_factor(n / 89)\n\
    \    else if n % 97 == 0 \n        ", "    if n==1 \n        1\n    else \n  \
    \      largest_prime_factor(n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(20000)\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the smallest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    >>> smallest_prime_factor(13195)\n    13\n    >>> smallest_prime_factor(2048)\n\
    \    3\n    \"\"\"", "    if n < 2 \n        then return n\n    else if n == 2\
    \ \n        then return 2\n    else if n % 2 == 0 \n        then return 2\n  \
    \  else if n % 3 == 0 \n        then return 3\n    else if n % 5 == 0 \n     \
    \   then return 5\n    else if n % 7 == 0 \n        then return 7\n    else if\
    \ n % 11 == 0 \n        then return 11\n    else if n % 13 == 0 \n        then\
    \ return 13\n    else if n % 17 == 0 \n        then return 17\n    else if n %\
    \ 19 == 0 \n        then return 19\n    else if n % 23 == 0 \n        then return\
    \ 23\n    else if n % 29 == 0 \n        then return 29\n    else if n % 31 ==\
    \ 0 \n        then return 31\n    else if n % 37 == 0 \n        then return 37\n\
    \    else if n % 41 == 0 \n        then return 41\n    else if n % 43 == 0 \n\
    \        then return 43\n    else if n % 47 == 0 \n        then return 47\n  \
    \  else if n % 53 == 0 \n        then return 53\n    else if n % 59 == 0 \n  \
    \      then return 59\n    else if n % 61 == 0 \n        then return 61\n    else\
    \ if n % 67 == 0 \n        then return 67\n    else if n % 71 == 0 \n        then\
    \ return 71\n    else if n % 73 == 0 \n        then return 73\n    else if n %\
    \ 79 == 0 \n        then return 79\n    else if n % 83 == 0 \n        then return\
    \ 83\n    else if n % 89 == 0 \n        then return 89\n    else if n % 97 ==\
    \ 0 \n        then return 97\n    else if n % 101 == 0 \n        then return 101\n\
    \    else if n % 103 == 0 \n        then return 103\n    else if n % 107 == 0\
    \ \n        then return 107\n    else if n % 111 == 0 \n        then return 111\n\
    \    else if n % 117 == 0 \n        then return 117\n    else if n % 121 == 0\
    \ \n        then return 121\n    else if n % 127 == 0 \n        then return 127\n\
    \    else if n % 131 == 0 \n        then return 131\n    else if n % 137 == 0\
    \ \n        then return 137\n    else if n % 141 == 0 \n        then return 141\n\
    \    else if n % 147 == 0 \n        then return 147\n    else if n % 151 == 0\
    \ \n        then return 151\n    else if n % 157 == 0 \n        ", "    if n <\
    \ 2 \n        then return n\n    else if n % 2 == 0 \n        then return largest_prime_factor(n/2)\n\
    \    else if n % 3 == 0 \n        then return largest_prime_factor(n/3)\n    else\
    \ if n % 5 == 0 \n        then return largest_prime_factor(n/5)\n    else if n\
    \ % 7 == 0 \n        then return largest_prime_factor(n/7)\n    else if n % 11\
    \ == 0 \n        then return largest_prime_factor(n/11)\n    else if n % 13 ==\
    \ 0 \n        then return largest_prime_factor(n/13)\n    else if n % 17 == 0\
    \ \n        then return largest_prime_factor(n/17)\n    else if n % 19 == 0 \n\
    \        then return largest_prime_factor(n/19)\n    else if n % 23 == 0 \n  \
    \      then return largest_prime_factor(n/23)\n    else if n % 29 == 0 \n    \
    \    then return largest_prime_factor(n/29)\n    else if n % 31 == 0 \n      \
    \  then return largest_prime_factor(n/31)\n    else if n % 37 == 0 \n        then\
    \ return largest_prime_factor(n/37)\n    else if n % 41 == 0 \n        then return\
    \ largest_prime_factor(n/41)\n    else if n % 43 == 0 \n        then return largest_prime_factor(n/43)\n\
    \    else if n % 47 == 0 \n        then return largest_prime_factor(n/47)\n  \
    \  else if n % 53 == 0 \n        then return largest_prime_factor(n/53)\n    else\
    \ if n % 59 == 0 \n        then return largest_prime_factor(n/59)\n    else if\
    \ n % 61 == 0 \n        then return largest_prime_factor(n/61)\n    else if n\
    \ % 67 == 0 \n        then return largest_prime_factor(n/67)\n    else if n %\
    \ 71 == 0 \n        then return largest_prime_factor(n/71)\n    else if n % 73\
    \ == 0 \n        then return largest_prime_factor(n/73)\n    else if n % 79 ==\
    \ 0 \n        then return largest_prime_factor(n/79)\n    else if n % 83 == 0\
    \ \n        then return largest_prime_factor(n/83)\n    else if n % 89 == 0 \n\
    \        then return largest_prime_factor(n/89)\n    else if n % 97 == 0 \n  \
    \      then return largest_prime_factor(n/97)\n    else if n % 101 == 0 \n   \
    \     then return largest_prime_factor(n/", "    if n < 2 \n        then return\
    \ n\n    else if n == 2 \n        then return 2\n    else if n % 2 == 0 \n   \
    \     then return largest_prime_factor(n / 2)\n    else \n        largest_prime_factor(n\
    \ / 2)\n    end\nend\n</cell>\n<code language=julia-1.3>\nlargest_prime_factor(13195)\n\
    </cell>\n<code language=julia-1.3>\nlargest_prime_factor(2048)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the smallest prime factor of n. Assume\
    \ n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n    3\n   \
    \ >>> smallest_prime_factor(2048)\n    2\n    \"\"\"", "    if n==1 \n       \
    \ 1\n    else\n        largest_prime_factor(n-1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.4>", "    if n == 1 \n        1 \n    else \n        largest_prime_factor(n\
    \ / 2) \n    end\nend\n</cell>\n<code language=julia-1.5>", "    if n < 2 \n \
    \       then return 1\n    else if n == 2 \n        then return 2\n    else if\
    \ n % 2 == 0 \n        then return 2\n    else if n % 3 == 0 \n        then return\
    \ 3\n    else if n % 5 == 0 \n        then return 5\n    else if n % 7 == 0 \n\
    \        then return 7\n    else if n % 11 == 0 \n        then return 11\n   \
    \ else if n % 13 == 0 \n        then return 13\n    else if n % 17 == 0 \n   \
    \     then return 17\n    else if n % 19 == 0 \n        then return 19\n    else\
    \ if n % 23 == 0 \n        then return 23\n    else if n % 29 == 0 \n        then\
    \ return 29\n    else if n % 31 == 0 \n        then return 31\n    else if n %\
    \ 37 == 0 \n        then return 37\n    else if n % 41 == 0 \n        then return\
    \ 41\n    else if n % 43 == 0 \n        then return 43\n    else if n % 47 ==\
    \ 0 \n        then return 47\n    else if n % 53 == 0 \n        then return 53\n\
    \    else if n % 59 == 0 \n        then return 59\n    else if n % 61 == 0 \n\
    \        then return 61\n    else if n % 67 == 0 \n        then return 67\n  \
    \  else if n % 71 == 0 \n        then return 71\n    else if n % 73 == 0 \n  \
    \      then return 73\n    else if n % 79 == 0 \n        then return 79\n    else\
    \ if n % 83 == 0 \n        then return 83\n    else if n % 89 == 0 \n        then\
    \ return 89\n    else if n % 97 == 0 \n        then return 97\n    else if n %\
    \ 101 == 0 \n        then return 101\n    else if n % 103 == 0 \n        then\
    \ return 103\n    else if n % 107 == 0 \n        then return 107\n    else if\
    \ n % 111 == 0 \n        then return 111\n    else if n % 117 == 0 \n        then\
    \ return 117\n    else if n % 121 == 0 \n        then return 121\n    else if\
    \ n % 123 == 0 \n        then return 123\n    else if n % 127 == 0 \n        then\
    \ return 127\n    else if n % 131 == 0 \n        then return 131\n    else if\
    \ n % 137 == 0 \n        then return 137\n    else if n % 141 == 0 \n        then\
    \ return 141\n    else if n % 147 == 0 \n        then return 147\n    else if\
    \ n % 151 == 0 \n        then ", "    if n == 1 \n        1\n    else\n      \
    \  largest_prime_factor(n / 2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(100_000_000)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the smallest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nHint: Use a while loop.", "    if n == 1 \n        1\n    else\n \
    \       largest_prime_factor(n / 2)\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    @time largest_prime_factor(100_000_000)\n</cell>\n<code language=julia-1.4>\n\
    @time largest_prime_factor(100_000_000)\n</cell>\n<code language=julia-1.4>\n\
    @time largest_prime_factor(100_000_000)\n</cell>\n<code language=julia-1.4>\n\
    @time largest_prime_factor(100_000_000)\n</cell>\n<code language=julia-1.4>\n\
    @time largest_prime_factor(100_000_000)\n</cell>\n<code language=julia-1.4>\n\
    @time largest_prime_factor(100_000_000)\n</cell>\n<code language=julia-1.4>\n\
    @time largest_prime_factor(100_000_000)\n</cell>\n<code language=julia-1.4>\n\
    @time largest_prime_factor(100_000_000)\n</cell>\n<code language=julia-1.4>\n\
    @time largest_prime_factor(100_000_000)\n</cell>\n<code language=julia-1.4>\n\
    @time largest_prime_factor(100_000_000)\n</cell>\n<code language=julia-1.4>\n\
    @time largest_prime_factor(100_000_000)\n</cell>\n<code language=julia-1.4>\n\
    @time largest_prime_factor(100_000_000)\n</cell>\n<code language=julia-1.4>\n\
    @time largest_prime_factor(100_000_000)\n</cell>\n<code language=julia-1.4>\n\
    @time largest_prime_factor(100_000_000)\n</cell>\n<code language=julia-1.4>\n\
    @time largest_prime_factor(100_000_000)\n</cell>\n<code language=julia-1.4>\n\
    @time largest_prime_factor(100_000_000)\n</cell>\n<code language=julia-1.4>\n\
    @time largest_prime_factor(100_000_000)\n</cell>\n<code language=julia-1.4>\n\
    @time largest_prime_factor(100_000_000)\n</cell>\n<code language=julia-1.4>\n\
    @time largest_prime_factor(100_000_000)\n</cell>\n<code language=julia-1.4>\n\
    @time largest_prime_factor(100_000_000)\n</cell>\n<code language=julia-1.4>",
  "    if n<2 return 1\n    if n==2 return n\n    if n%2==0 return 2\n    \n    factors=[]\n\
    \    \n    for f in factors(n) do \n        if f>n then \n            factors.push(f)\
    \ \n        else \n            factors.push(n/f) \n    end\n    \n    return factors[end-1]\n\
    end\n</cell>\n<code language=julia-1.1>\nlargest_prime_factor(13195)\n</cell>\n\
    <code language=julia-1.1>\nlargest_prime_factor(2048)\n</cell>\n<code language=julia-1.1>\n\
    largest_prime_factor(1025)\n</cell>\n<code language=julia-1.1>\nlargest_prime_factor(1025)\n\
    </cell>\n<code language=julia-1.1>\nlargest_prime_factor(1025)\n</cell>\n<code\
    \ language=julia-1.1>\nlargest_prime_factor(1025)\n</cell>\n<code language=julia-1.1>\n\
    largest_prime_factor(1025)\n</cell>\n<code language=julia-1.1>\nlargest_prime_factor(1025)\n\
    </cell>\n<code language=julia-1.1>\nlargest_prime_factor(1025)\n</cell>\n<code\
    \ language=julia-1.1>\nlargest_prime_factor(1025)\n</cell>\n<code language=julia-1.1>\n\
    largest_prime_factor(1025)\n</cell>\n<code language=julia-1.1>\nlargest_prime_factor(1025)\n\
    </cell>\n<code language=julia-1.1>\nlargest_prime_factor(1025)\n</cell>\n<code\
    \ language=julia-1.1>\nlargest_prime_factor(1025)\n</cell>\n<code language=julia-1.1>\n\
    largest_prime_factor(1025)\n</cell>\n<code language=julia-1.1>\nlargest_prime_factor(1025)\n\
    </cell>\n<code language=julia-1.1>\nlargest_prime_factor(1025)\n</cell>\n<code\
    \ language=julia-1.1>\nlargest_prime_factor(1025)\n</cell>\n<code language=julia-1.1>\n\
    largest_prime_factor(1025)\n</cell>\n<code language=julia-1.1>\nlargest_prime_factor(1025)\n\
    </cell>\n<code language=julia-1.1>\nlargest_prime_factor(1025)\n</cell>\n<code\
    \ language=julia-1.1>\nlargest_prime_factor(1025)\n</cell>\n<code language=julia-1.1>\n\
    largest_prime_factor(1025)\n</cell>\n<code language=julia-1.1>\nlargest_prime_factor(1025)\n\
    </cell>\n<code language=juli", "    if n == 1 \n        1 \n    else \n      \
    \  largest_prime_factor(n / 2) \n    end\nend\n</cell>\n<code language=julia-1.3>",
  "    if n < 2 \n        then return 2\n    else if n == 2 \n        then return\
    \ 1\n    else if n % 2 == 0 \n        then return 2\n    else \n        largest_prime_factor(n\
    \ / 2)\n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_prime_factor(13195)\n\
    </cell>\n<code language=julia-1.5>\nlargest_prime_factor(2048)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the smallest prime factor of n. Assume\
    \ n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n    13\n  \
    \  >>> smallest_prime_factor(2048)\n    2\n    \"\"\"", "    if n<2 return 1\n\
    \    \n    prime_factors = prime_factorization(n)\n    \n    largest = 1\n   \
    \ for p in prime_factors\n        if p > largest\n            largest = p\n  \
    \  end\n    \n    return largest\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ largest_prime_factor(10^8)\n</cell>\n<text>\nProblem 3\nThe prime factors of\
    \ 13195 are 5, 7, 13 and 29.", "    if n==1 \n        return n\n    else if n==2\
    \ \n        return n\n    else if n%3==0 \n        return largest_prime_factor(n/3)\n\
    \    else \n        return largest_prime_factor(n/3)+1\nend\n</cell>\n<code language=julia-1.5>",
  "    if n < 2 \n        then return n\n    else if n % 2 == 0 \n        then return\
    \ largest_prime_factor(n/2) \n    else \n        largest_prime_factor(3*n+2)\n\
    end\n</cell>\n<code language=julia-1.1>\nlargest_prime_factor(13195)\n</cell>\n\
    <text>\nExercise: Write a function that returns the smallest prime factor of n.\
    \ Assume n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n   \
    \ 13\n    >>> smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n == 1\
    \ \n        1\n    else \n        largest_prime_factor(n-1) * prime_factor(n-1)\n\
    end\n</cell>\n<code language=julia-1.3>\n@time largest_prime_factor(10^8)\n</cell>\n\
    <code language=julia-1.3>\n@time largest_prime_factor(10^9)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the smallest prime factor of n. Assume\
    \ n > 1 and is not a prime.\nHint: Use a while loop to find the smallest prime\
    \ factor of n.", "    if n < 2 \n        then return 1\n    else if n == 2 \n\
    \        then return 2\n    else if n % 2 == 0 \n        then return largest_prime_factor(n\
    \ / 2)\n    else \n        largest_prime_factor(n / 2)\n    end\nend\n</cell>\n\
    <code language=julia-1.0>", "    if n < 2 || n % 2 == 0 \n        then return\
    \ n\n    else \n        p :: Int64 = 2 \n        while p * p <= n \n         \
    \   do if n % p == 0 \n                then return p\n                else p :=\
    \ p + 2\n        end\n    end\nend\n</cell>\n<code language=julia-1.4>", "   \
    \ if n<2 return 1\n    if n==2 return n\n    if n%2==0 return 2\n    \n    factors=[]\n\
    \    \n    for f in range(3,n+1,2):\n        if n%f==0: factors.append(f)\n  \
    \  \n    return factors[length(factors)-1]\nend\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(100_000_000)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(100_000_000)\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the nth Fibonacci number.", "    if n < 2 \n        then return\
    \ 2\n    else if n == 2 \n        then return 1\n    else if n % 2 == 0 \n   \
    \     then return 2\n    else if n % 3 == 0 \n        then return 3\n    else\
    \ if n % 5 == 0 \n        then return 5\n    else if n % 7 == 0 \n        then\
    \ return 7\n    else if n % 11 == 0 \n        then return 11\n    else if n %\
    \ 13 == 0 \n        then return 13\n    else if n % 17 == 0 \n        then return\
    \ 17\n    else if n % 19 == 0 \n        then return 19\n    else if n % 23 ==\
    \ 0 \n        then return 23\n    else if n % 29 == 0 \n        then return 29\n\
    \    else if n % 31 == 0 \n        then return 31\n    else if n % 37 == 0 \n\
    \        then return 37\n    else if n % 41 == 0 \n        then return 41\n  \
    \  else if n % 43 == 0 \n        then return 43\n    else if n % 47 == 0 \n  \
    \      then return 47\n    else if n % 53 == 0 \n        then return 53\n    else\
    \ if n % 59 == 0 \n        then return 59\n    else if n % 61 == 0 \n        then\
    \ return 61\n    else if n % 67 == 0 \n        then return 67\n    else if n %\
    \ 71 == 0 \n        then return 71\n    else if n % 73 == 0 \n        then return\
    \ 73\n    else if n % 79 == 0 \n        then return 79\n    else if n % 83 ==\
    \ 0 \n        then return 83\n    else if n % 89 == 0 \n        then return 89\n\
    \    else if n % 97 == 0 \n        then return 97\n    else if n % 101 == 0 \n\
    \        then return 101\n    else if n % 103 == 0 \n        then return 103\n\
    \    else if n % 107 == 0 \n        then return 107\n    else if n % 111 == 0\
    \ \n        then return 111\n    else if n % 117 == 0 \n        then return 117\n\
    \    else if n % 121 == 0 \n        then return 121\n    else if n % 123 == 0\
    \ \n        then return 123\n    else if n % 127 == 0 \n        then return 127\n\
    \    else if n % 131 == 0 \n        then return 131\n    else if n % 137 == 0\
    \ \n        then return 137\n    else if n % 141 == 0 \n        then return 141\n\
    \    else if n % 147 == 0 \n        then return 147\n    else if n % 151 == 0\
    \ \n        then ", "    if n == 1 \n        1\n    else\n        largest_prime_factor(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\nlargest_prime_factor(13195)\n\
    </cell>\n<code language=julia-1.4>\nlargest_prime_factor(2048)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the smallest prime factor of n. Assume\
    \ n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n    13\n  \
    \  >>> smallest_prime_factor(2048)\n    2\n    \"\"\"", "    if n == 1 \n    \
    \    1\n    else\n        largest_prime_factor(n-1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time largest_prime_factor(2000000)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the smallest prime factor of n. Assume\
    \ n > 1 and is not a prime.\nHint: Use a while loop and a prime number checker\
    \ function.", "    if n == 1 \n        1\n    else\n        largest_prime_factor(n-1)\
    \ * n\n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_prime_factor(100)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the smallest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n\
    \    13\n    >>> smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n <\
    \ 2 \n        then return n\n    else if n == 2 \n        then return 2\n    else\
    \ if n % 2 == 0 \n        then return largest_prime_factor(n / 2)\n    else \n\
    \        largest_prime_factor(3 * n + 1) / 2\nend\n</cell>\n<code language=julia-1.0>\n\
    largest_prime_factor(13195)\n</cell>\n<code language=julia-1.0>\nlargest_prime_factor(2048)\n\
    </cell>\n<text>\nExercise: Write a function that returns the smallest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n\
    \    13\n    >>> smallest_prime_factor(2048)\n    2\n    \"\"\"", "    if n <\
    \ 2 \n        then return n\n    else if n == 2 \n        then return 1\n    else\
    \ if n % 2 == 0 \n        then return 2\n    else if n % 3 == 0 \n        then\
    \ return 3\n    else if n % 5 == 0 \n        then return 5\n    else if n % 7\
    \ == 0 \n        then return 7\n    else if n % 11 == 0 \n        then return\
    \ 11\n    else if n % 13 == 0 \n        then return 13\n    else if n % 17 ==\
    \ 0 \n        then return 17\n    else if n % 19 == 0 \n        then return 19\n\
    \    else if n % 23 == 0 \n        then return 23\n    else if n % 29 == 0 \n\
    \        then return 29\n    else if n % 31 == 0 \n        then return 31\n  \
    \  else if n % 37 == 0 \n        then return 37\n    else if n % 41 == 0 \n  \
    \      then return 41\n    else if n % 43 == 0 \n        then return 43\n    else\
    \ if n % 47 == 0 \n        then return 47\n    else if n % 53 == 0 \n        then\
    \ return 53\n    else if n % 59 == 0 \n        then return 59\n    else if n %\
    \ 61 == 0 \n        then return 61\n    else if n % 67 == 0 \n        then return\
    \ 67\n    else if n % 71 == 0 \n        then return 71\n    else if n % 73 ==\
    \ 0 \n        then return 73\n    else if n % 79 == 0 \n        then return 79\n\
    \    else if n % 83 == 0 \n        then return 83\n    else if n % 89 == 0 \n\
    \        then return 89\n    else if n % 97 == 0 \n        then return 97\n  \
    \  else if n % 101 == 0 \n        then return 101\n    else if n % 103 == 0 \n\
    \        then return 103\n    else if n % 107 == 0 \n        then return 107\n\
    \    else if n % 111 == 0 \n        then return 111\n    else if n % 117 == 0\
    \ \n        then return 117\n    else if n % 121 == 0 \n        then return 121\n\
    \    else if n % 127 == 0 \n        then return 127\n    else if n % 131 == 0\
    \ \n        then return 131\n    else if n % 137 == 0 \n        then return 137\n\
    \    else if n % 141 == 0 \n        then return 141\n    else if n % 147 == 0\
    \ \n        then return 147\n    else if n % 151 == 0 \n        then return 151\n\
    \    else if n % 157 == 0 \n        ", "    if n == 1 \n        1 \n    else \n\
    \        largest_prime_factor(n / 2) \n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    @time largest_prime_factor(20000000)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the smallest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    >>> smallest_prime_factor(13195)\n    13\n    >>> smallest_prime_factor(2048)\n\
    \    3\n    \"\"\"", "    if n < 2 \n        then return n\n    else if n % 2\
    \ == 0 \n        then return 2\n    else if n % 3 == 0 \n        then return 3\n\
    \    else if n % 5 == 0 \n        then return 5\n    else if n % 7 == 0 \n   \
    \     then return 7\n    else if n % 11 == 0 \n        then return 11\n    else\
    \ if n % 13 == 0 \n        then return 13\n    else if n % 17 == 0 \n        then\
    \ return 17\n    else if n % 19 == 0 \n        then return 19\n    else if n %\
    \ 23 == 0 \n        then return 23\n    else if n % 29 == 0 \n        then return\
    \ 29\n    else if n % 31 == 0 \n        then return 31\n    else if n % 37 ==\
    \ 0 \n        then return 37\n    else if n % 41 == 0 \n        then return 41\n\
    \    else if n % 43 == 0 \n        then return 43\n    else if n % 47 == 0 \n\
    \        then return 47\n    else if n % 53 == 0 \n        then return 53\n  \
    \  else if n % 59 == 0 \n        then return 59\n    else if n % 61 == 0 \n  \
    \      then return 61\n    else if n % 67 == 0 \n        then return 67\n    else\
    \ if n % 71 == 0 \n        then return 71\n    else if n % 73 == 0 \n        then\
    \ return 73\n    else if n % 79 == 0 \n        then return 79\n    else if n %\
    \ 83 == 0 \n        then return 83\n    else if n % 89 == 0 \n        then return\
    \ 89\n    else if n % 97 == 0 \n        then return 97\n    else if n % 101 ==\
    \ 0 \n        then return 101\n    else if n % 103 == 0 \n        then return\
    \ 103\n    else if n % 107 == 0 \n        then return 107\n    else if n % 111\
    \ == 0 \n        then return 111\n    else if n % 117 == 0 \n        then return\
    \ 117\n    else if n % 121 == 0 \n        then return 121\n    else if n % 123\
    \ == 0 \n        then return 123\n    else if n % 127 == 0 \n        then return\
    \ 127\n    else if n % 131 == 0 \n        then return 131\n    else if n % 137\
    \ == 0 \n        then return 137\n    else if n % 141 == 0 \n        then return\
    \ 141\n    else if n % 147 == 0 \n        then return 147\n    else if n % 151\
    \ == 0 \n        then return 151\n    else if n % 157 == 0 ", "    if n==1 \n\
    \        1\n    else\n        largest_prime_factor(n-1)\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the greatest common divisor\
    \ (GCD) of two positive integers. Assume that both numbers are positive.\nHint:\
    \ use the gcd function from the math package.", "    if n < 2 \n        then return\
    \ n\n    else if n % 2 == 0 \n        then return largest_prime_factor(n / 2)\n\
    \    else \n        largest_prime_factor(3 * n + 1) \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(100_000_000)\n</cell>\n\
    <text>\nExercise: Write a function that returns the smallest prime factor of n.\
    \ Assume n > 1 and is not a prime.\nHint: Use a recursive function and base cases.\
    \ \nHint: Use a while loop. \nHint: Use a for loop. \nHint: Use a while loop.\
    \ \nHint: Use a for loop. \nHint: Use a while loop. \nHint: Use a for loop. \n\
    Hint: Use a while loop. \nHint: Use a for loop. \nHint: Use a while loop. \nHint:\
    \ Use a for loop. \nHint: Use a while loop. \nHint: Use a for loop. \nHint: Use\
    \ a while loop. \nHint: Use a for loop. \nHint: Use a while loop. \nHint: Use\
    \ a for loop. \nHint: Use a while loop. \nHint: Use a for loop. \nHint: Use a\
    \ while loop. \nHint: Use a for loop. \nHint: Use a while loop. \nHint: Use a\
    \ for loop. \nHint: Use a while loop. \nHint: Use a for loop. \nHint: Use a while\
    \ loop. \nHint: Use a for loop. \nHint: Use a while loop. \nHint: Use a for loop.\
    \ \nHint: Use a while loop. \nHint: Use a for loop. \nHint: Use a while loop.\
    \ \nHint: Use a for loop. \nHint: Use a while loop. \nHint: Use a for loop. \n\
    Hint: Use a while loop. \nHint: Use a for loop. \nHint: Use a while loop. \nHint:\
    \ Use a for loop. \nHint: Use a while loop. \nHint: Use a for loop. \nHint: Use\
    \ a while loop. \nHint: Use a for loop. \nHint: Use a while loop. \nHint: Use\
    \ a for loop. \nHint: Use a while loop. \nHint: Use a for loop. \nHint: Use a\
    \ while loop. \nHint: Use a for loop. \nHint: Use a while loop. \nHint: Use a\
    \ for loop. \nHint: Use a while loop", "    if n < 2 \n        then return n\n\
    \    else if n % 2 == 0 \n        then return largest_prime_factor(n / 2)\n  \
    \  else \n        largest = 2\n        for factor in prime_factors(n) \n     \
    \       if factor > largest \n                then largest = factor \n       \
    \ return largest\nend\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(2000000)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the smallest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n\
    \    13\n    >>> smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n ==\
    \ 1 \n        1\n    else\n        largest_prime_factor(n / 2)\n    end\nend\n\
    </cell>\n<code language=julia-1.3>\n@time largest_prime_factor(100_000_000)\n\
    </cell>\n<text>\nExercise: Write a function that returns the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\nHint: Use a recursive function.", " \
    \   if n < 2 \n        then return 1\n    else if n % 2 == 0 \n        then return\
    \ 2\n    else \n        p := 3\n        while p < n \n            do if n % p\
    \ == 0 \n                then return p\n                p := p + 2\n    return\
    \ n\nend\n</cell>\n<code language=julia-1.5>", "    if n == 1 \n        1\n  \
    \  else \n        largest_prime_factor(n-1) * n \nend\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(100_000_000)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the greatest common divisor of two numbers. Assume that\
    \ both numbers are positive.", "    if n == 1 \n        1\n    else\n        largest_prime_factor(n\
    \ / 2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(100_000_000)\n\
    </cell>\n<text>\nExercise: Write a function that returns the smallest prime factor\
    \ of n. Assume n > 1 and is not a prime.\nHint: Use a recursive function with\
    \ a base case that returns 1 if the input is 1.", "    if n == 1 \n        1\n\
    \    else\n        largest_prime_factor(n-1) * prime_factor(n-1)\nend\n</cell>\n\
    <code language=julia-1.3>\n@time largest_prime_factor(100_000_000)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the smallest prime factor of\
    \ n. Assume n > 1 and is not a prime.\nHint: use the function prime_factor(n)\
    \ defined above.", "    if n < 2 \n        then return n\n    else if n % 2 ==\
    \ 0 \n        then return 2\n    else if n % 3 == 0 \n        then return 3\n\
    \    else if n % 5 == 0 \n        then return 5\n    else if n % 7 == 0 \n   \
    \     then return 7\n    else if n % 11 == 0 \n        then return 11\n    else\
    \ if n % 13 == 0 \n        then return 13\n    else if n % 17 == 0 \n        then\
    \ return 17\n    else if n % 19 == 0 \n        then return 19\n    else if n %\
    \ 23 == 0 \n        then return 23\n    else if n % 29 == 0 \n        then return\
    \ 29\n    else if n % 31 == 0 \n        then return 31\n    else if n % 37 ==\
    \ 0 \n        then return 37\n    else if n % 41 == 0 \n        then return 41\n\
    \    else if n % 43 == 0 \n        then return 43\n    else if n % 47 == 0 \n\
    \        then return 47\n    else if n % 53 == 0 \n        then return 53\n  \
    \  else if n % 59 == 0 \n        then return 59\n    else if n % 61 == 0 \n  \
    \      then return 61\n    else if n % 67 == 0 \n        then return 67\n    else\
    \ if n % 71 == 0 \n        then return 71\n    else if n % 73 == 0 \n        then\
    \ return 73\n    else if n % 79 == 0 \n        then return 79\n    else if n %\
    \ 83 == 0 \n        then return 83\n    else if n % 89 == 0 \n        then return\
    \ 89\n    else if n % 97 == 0 \n        then return 97\n    else if n % 101 ==\
    \ 0 \n        then return 101\n    else if n % 103 == 0 \n        then return\
    \ 103\n    else if n % 107 == 0 \n        then return 107\n    else if n % 111\
    \ == 0 \n        then return 111\n    else if n % 117 == 0 \n        then return\
    \ 117\n    else if n % 121 == 0 \n        then return 121\n    else if n % 123\
    \ == 0 \n        then return 123\n    else if n % 127 == 0 \n        then return\
    \ 127\n    else if n % 131 == 0 \n        then return 131\n    else if n % 137\
    \ == 0 \n        then return 137\n    else if n % 141 == 0 \n        then return\
    \ 141\n    else if n % 147 == 0 \n        then return 147\n    else if n % 151\
    \ == 0 \n        then return 151\n    else if n % 157 == 0 ", "    if n==1 then\
    \ return 1\n    else if n==2 then return 2\n    else if n%2==0 then return largest_prime_factor(n/2)\n\
    \    else if n%3==0 then return largest_prime_factor(n/3)\n    else return largest_prime_factor(n/3)+1\n\
    end\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(2000000);\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(2000000);\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(2000000);\n</cell>\n<code\
    \ language=julia-1.5>\n@time largest_prime_factor(2000000);\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(2000000);\n</cell>\n<code language=julia-1.5>\n@time\
    \ largest_prime_factor(2000000);\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(2000000);\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(2000000);\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(2000000);\n</cell>\n<code\
    \ language=julia-1.5>\n@time largest_prime_factor(2000000);\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(2000000);\n</cell>\n<code language=julia-1.5>\n@time\
    \ largest_prime_factor(2000000);\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(2000000);\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(2000000);\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(2000000);\n</cell>\n<code\
    \ language=julia-1.5>\n@time largest_prime_factor(2000000);\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(2000000);\n</cell>\n<code language=julia-1.5>\n@time\
    \ largest_prime_factor(2000000);\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(2000000);\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(2000000);\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(2000000);\n</cell>\n<code\
    \ language=", "    if n < 2 \n        then return 2\n    else if n == 2 \n   \
    \     then return 1\n    else if n % 2 == 0 \n        then return 2\n    else\
    \ if n % 3 == 0 \n        then return 3\n    else if n % 5 == 0 \n        then\
    \ return 5\n    else if n % 7 == 0 \n        then return 7\n    else if n % 11\
    \ == 0 \n        then return 11\n    else if n % 13 == 0 \n        then return\
    \ 13\n    else if n % 17 == 0 \n        then return 17\n    else if n % 19 ==\
    \ 0 \n        then return 19\n    else if n % 23 == 0 \n        then return 23\n\
    \    else if n % 29 == 0 \n        then return 29\n    else if n % 31 == 0 \n\
    \        then return 31\n    else if n % 37 == 0 \n        then return 37\n  \
    \  else if n % 41 == 0 \n        then return 41\n    else if n % 43 == 0 \n  \
    \      then return 43\n    else if n % 47 == 0 \n        then return 47\n    else\
    \ if n % 53 == 0 \n        then return 53\n    else if n % 59 == 0 \n        then\
    \ return 59\n    else if n % 61 == 0 \n        then return 61\n    else if n %\
    \ 67 == 0 \n        then return 67\n    else if n % 71 == 0 \n        then return\
    \ 71\n    else if n % 73 == 0 \n        then return 73\n    else if n % 79 ==\
    \ 0 \n        then return 79\n    else if n % 83 == 0 \n        then return 83\n\
    \    else if n % 89 == 0 \n        then return 89\n    else if n % 97 == 0 \n\
    \        then return 97\n    else if n % 101 == 0 \n        then return 101\n\
    \    else if n % 103 == 0 \n        then return 103\n    else if n % 107 == 0\
    \ \n        then return 107\n    else if n % 111 == 0 \n        then return 111\n\
    \    else if n % 117 == 0 \n        then return 117\n    else if n % 121 == 0\
    \ \n        then return 121\n    else if n % 127 == 0 \n        then return 127\n\
    \    else if n % 131 == 0 \n        then return 131\n    else if n % 137 == 0\
    \ \n        then return 137\n    else if n % 141 == 0 \n        then return 141\n\
    \    else if n % 147 == 0 \n        then return 147\n    else if n % 151 == 0\
    \ \n        then return 151\n    else if n % 157 == 0 \n        ", "    if n ==\
    \ 1 \n        1\n    else\n        largest_prime_factor(n / 2)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>", "    if n < 2 \n        then return 1\n \
    \   else if n % 2 == 0 \n        then return 2\n    else if n % 3 == 0 \n    \
    \    then return 3\n    else if n % 5 == 0 \n        then return 5\n    else if\
    \ n % 7 == 0 \n        then return 7\n    else \n        largest_prime_factor(n//2)\n\
    end\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(100_000_000)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the smallest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n\
    \    3\n    >>> smallest_prime_factor(2048)\n    7\n    \"\"\"", "    if n ==\
    \ 1 \n        1\n    else\n        largest_prime_factor(n-1) * n\n    end\nend\n\
    </cell>\n<code language=julia-1.4>\n@time largest_prime_factor(10^6)\n</cell>\n\
    <code language=julia-1.4>\n@time largest_prime_factor(10^7)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the smallest prime factor of n. Assume\
    \ n > 1 and is not a prime.\nHint: Use a while loop and a prime number checker\
    \ function.", "    if n<2 return 1\n    else if n==2 return n\n    else if n%3==0\
    \ then return largest_prime_factor(n/3)\n    else return largest_prime_factor(n/3)+1\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_prime_factor(13195)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the smallest prime factor of\
    \ n. Assume n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n\
    \    3\n    >>> smallest_prime_factor(2048)\n    2\n    \"\"\"", "    if n < 2\
    \ \n        then return 1\n    else if n % 2 == 0 \n        then return 2\n  \
    \  else if n % 3 == 0 \n        then return 3\n    else if n % 5 == 0 \n     \
    \   then return 5\n    else if n % 7 == 0 \n        then return 7\n    else if\
    \ n % 11 == 0 \n        then return 11\n    else if n % 13 == 0 \n        then\
    \ return 13\n    else if n % 17 == 0 \n        then return 17\n    else if n %\
    \ 19 == 0 \n        then return 19\n    else if n % 23 == 0 \n        then return\
    \ 23\n    else if n % 29 == 0 \n        then return 29\n    else if n % 31 ==\
    \ 0 \n        then return 31\n    else if n % 37 == 0 \n        then return 37\n\
    \    else if n % 41 == 0 \n        then return 41\n    else if n % 43 == 0 \n\
    \        then return 43\n    else if n % 47 == 0 \n        then return 47\n  \
    \  else if n % 53 == 0 \n        then return 53\n    else if n % 59 == 0 \n  \
    \      then return 59\n    else if n % 61 == 0 \n        then return 61\n    else\
    \ if n % 67 == 0 \n        then return 67\n    else if n % 71 == 0 \n        then\
    \ return 71\n    else if n % 73 == 0 \n        then return 73\n    else if n %\
    \ 79 == 0 \n        then return 79\n    else if n % 83 == 0 \n        then return\
    \ 83\n    else if n % 89 == 0 \n        then return 89\n    else if n % 97 ==\
    \ 0 \n        then return 97\n    else if n % 101 == 0 \n        then return 101\n\
    \    else if n % 103 == 0 \n        then return 103\n    else if n % 107 == 0\
    \ \n        then return 107\n    else if n % 111 == 0 \n        then return 111\n\
    \    else if n % 117 == 0 \n        then return 117\n    else if n % 121 == 0\
    \ \n        then return 121\n    else if n % 123 == 0 \n        then return 123\n\
    \    else if n % 127 == 0 \n        then return 127\n    else if n % 131 == 0\
    \ \n        then return 131\n    else if n % 137 == 0 \n        then return 137\n\
    \    else if n % 141 == 0 \n        then return 141\n    else if n % 147 == 0\
    \ \n        then return 147\n    else if n % 151 == 0 \n        then return 151\n\
    \    else if n % 157 == 0 ", "    if n == 1 \n        1\n    else\n        largest_prime_factor(n\
    \ / 2)\n    end\nend\n</cell>\n<code language=julia-1.4>", "    if n<2 return\
    \ n\n    if n==2 return 1\n    if n%2==0 return 2\n    \n    factors=[]\n    \n\
    \    for f in factorize(n)\n        if f>n \n            factors.append(f)\n \
    \       else\n            break\n    \n    return max(factors)\nend\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(100_000_000)\n</cell>\n\
    <text>\nExercise: Write a function that returns the largest prime factor of n.\
    \ Assume n > 1 and is not a prime.\nHint: Use a while loop and a prime factorization\
    \ function.", "    if n < 2 \n        then return n\n    else if n == 2 \n   \
    \     then return 2\n    else if n % 2 == 0 \n        then return largest_prime_factor(n\
    \ / 2)\n    else \n        largest_prime_factor(3 * n + 1)\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\nlargest_prime_factor(13195)\n</cell>\n<code language=julia-1.3>\n\
    largest_prime_factor(2048)\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the smallest prime factor of n. Assume n > 1 and is not a prime.\nHint: Use\
    \ a while loop to keep dividing n by 2 until n is odd.", "    if n==1 \n     \
    \   1\n    else if n==2 \n        2\n    else if n%3==0 \n        largest_prime_factor(n/3)\n\
    \    else \n        largest_prime_factor(n/3)+1\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time largest_prime_factor(2000000)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the smallest prime factor of n. Assume\
    \ n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n    3\n   \
    \ >>> smallest_prime_factor(2048)\n    2\n    \"\"\"", "    if n==1 \n       \
    \ 1 \n    else \n        largest_prime_factor(n-1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert largest_prime_factor(10) == 2 \"This function should\
    \ return the largest prime factor of 10.\"\n@assert largest_prime_factor(13) ==\
    \ 2 \"This function should return the largest prime factor of 13.\"\n@assert largest_prime_factor(19)\
    \ == 3 \"This function should return the largest prime factor of 19.\"\n@assert\
    \ largest_prime_factor(25) == 5 \"This function should return the largest prime\
    \ factor of 25.\"\n@assert largest_prime_factor(29) == 2 \"This function should\
    \ return the largest prime factor of 29.\"\n@assert largest_prime_factor(31) ==\
    \ 3 \"This function should return the largest prime factor of 31.\"\n@assert largest_prime_factor(37)\
    \ == 5 \"This function should return the largest prime factor of 37.\"\n@assert\
    \ largest_prime_factor(41) == 3 \"This function should return the largest prime\
    \ factor of 41.\"\n@assert largest_prime_factor(47) == 7 \"This function should\
    \ return the largest prime factor of 47.\"\n@assert largest_prime_factor(53) ==\
    \ 5 \"This function should return the largest prime factor of 53.\"\n@assert largest_prime_factor(59)\
    \ == 3 \"This function should return the largest prime factor of 59.\"\n@assert\
    \ largest_prime_factor(61) == 7 \"This function should return the largest prime\
    \ factor of 61.\"\n@assert largest_prime_factor(67) == 3 \"This function should\
    \ return the largest prime factor of 67.\"\n@assert largest_prime_factor(71) ==\
    \ 7 \"This function should return the largest prime factor of 71.\"\n@assert largest_prime_factor(73)\
    \ == 3 \"This function should return the largest prime factor of 73.\"\n@assert\
    \ largest_prime_factor(79) == 3 \"This function should return the largest prime\
    \ factor of 79.\"\n@assert largest_prime_factor(83) == 7 \"This function should\
    \ return the largest prime factor of 83.\"\n@assert largest_prime_factor(89) ==\
    \ 3 \"This function should return the largest prime factor of 89.\"\n@assert largest_prime_factor(97)\
    \ == 3 \"This function should return the largest prime factor of 97.\"\n</cell>\n\
    <text>\nProblem 3\nA palindromic number reads the same both ways. The largest\
    \ palindrome made from the product of two 2-digit numbers is 9009 = 91 \xD7 99.",
  "    if n < 2 \n        then return 1\n    else if n % 2 == 0 \n        then return\
    \ 2\n    else \n        p := 3\n        while p < n \n            do if n % p\
    \ == 0 \n                then return p\n                p := p + 2\n         \
    \   end\n        end\n        return n\n    end\nend\n</cell>\n<code language=julia-1.3>",
  "    if n < 2 \n        then return 1\n    else if n % 2 == 0 \n        then return\
    \ 2\n    else if n % 3 == 0 \n        then return 3\n    else if n % 5 == 0 \n\
    \        then return 5\n    else if n % 7 == 0 \n        then return 7\n    else\
    \ if n % 11 == 0 \n        then return 11\n    else if n % 13 == 0 \n        then\
    \ return 13\n    else if n % 17 == 0 \n        then return 17\n    else if n %\
    \ 19 == 0 \n        then return 19\n    else if n % 23 == 0 \n        then return\
    \ 23\n    else if n % 29 == 0 \n        then return 29\n    else if n % 31 ==\
    \ 0 \n        then return 31\n    else if n % 37 == 0 \n        then return 37\n\
    \    else if n % 41 == 0 \n        then return 41\n    else if n % 43 == 0 \n\
    \        then return 43\n    else if n % 47 == 0 \n        then return 47\n  \
    \  else if n % 53 == 0 \n        then return 53\n    else if n % 59 == 0 \n  \
    \      then return 59\n    else if n % 61 == 0 \n        then return 61\n    else\
    \ if n % 67 == 0 \n        then return 67\n    else if n % 71 == 0 \n        then\
    \ return 71\n    else if n % 73 == 0 \n        then return 73\n    else if n %\
    \ 79 == 0 \n        then return 79\n    else if n % 83 == 0 \n        then return\
    \ 83\n    else if n % 89 == 0 \n        then return 89\n    else if n % 97 ==\
    \ 0 \n        then return 97\n    else if n % 101 == 0 \n        then return 101\n\
    \    else if n % 103 == 0 \n        then return 103\n    else if n % 107 == 0\
    \ \n        then return 107\n    else if n % 111 == 0 \n        then return 111\n\
    \    else if n % 117 == 0 \n        then return 117\n    else if n % 121 == 0\
    \ \n        then return 121\n    else if n % 123 == 0 \n        then return 123\n\
    \    else if n % 127 == 0 \n        then return 127\n    else if n % 131 == 0\
    \ \n        then return 131\n    else if n % 137 == 0 \n        then return 137\n\
    \    else if n % 141 == 0 \n        then return 141\n    else if n % 147 == 0\
    \ \n        then return 147\n    else if n % 151 == 0 \n        then return 151\n\
    \    else if n % 157 == 0 ", "    if n == 1 \n        1\n    else if n % 2 ==\
    \ 0 \n        largest_prime_factor(n / 2)\n    else \n        largest_prime_factor(3\
    \ * n + 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(2000000);\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the smallest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n\
    \    13\n    >>> smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n <\
    \ 2 \n        then return n\n    else if n == 2 \n        then return 1\n    else\
    \ \n        p := 2\n        while p < n \n            do if n % p == 0 \n    \
    \            then return p\n                p := p * 2\n            end\n    \
    \    end\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(13195)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(2048)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the greatest common divisor\
    \ of two numbers. Assume that both numbers are positive.", "    if n < 2 \n  \
    \      then return n\n    else if n % 2 == 0 \n        then return largest_prime_factor(n\
    \ / 2)\n    else \n        largest_prime_factor(3 * n + 1) \n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n == 1 \n        1\n    else\n        largest_prime_factor(n\
    \ / 2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(2000000)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the smallest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n\
    \    13\n    >>> smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n <\
    \ 2 \n        then return n\n    else if n == 2 \n        then return 2\n    else\
    \ if n % 2 == 0 \n        then return largest_prime_factor(n/2)\n    else \n \
    \       largest_prime_factor(3*n+2)\nend\n</cell>\n<code language=julia-1.3>\n\
    largest_prime_factor(13195)\n</cell>\n<code language=julia-1.3>\nlargest_prime_factor(2048)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the smallest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n\
    \    3\n    >>> smallest_prime_factor(2048)\n    7\n    \"\"\"", "    if n < 2\
    \ \n        then return 1\n    else if n == 2 \n        then return n\n    else\
    \ if n % 2 == 0 \n        then return largest_prime_factor(n / 2)\n    else \n\
    \        largest_prime_factor(3 * n + 1)\nend\n</cell>\n<code language=julia-1.3>\n\
    largest_prime_factor(13195)\n</cell>\n<code language=julia-1.3>\nlargest_prime_factor(2048)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the smallest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n\
    \    13\n    >>> smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n <\
    \ 2 \n        then return n\n    else if n % 2 == 0 \n        then return largest_prime_factor(n\
    \ / 2)\n    else \n        p := 3\n        while p < n \n            do if n %\
    \ p == 0 \n                then return p \n                else p := p + 2\n \
    \   return n", "    if n < 2 \n        then return 1\n    else if n == 2 \n  \
    \      then return n\n    else if n % 2 == 0 \n        then return largest_prime_factor(n/2)\n\
    \    else \n        largest_prime_factor(3*n+2)\nend\n</cell>\n<code language=julia-1.3>\n\
    largest_prime_factor(13195)\n</cell>\n<code language=julia-1.3>\nlargest_prime_factor(2048)\n\
    </cell>\n<text>\nExercise: Write a function that returns the smallest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n\
    \    13\n    >>> smallest_prime_factor(2048)\n    2\n    \"\"\"", "    if n ==\
    \ 1 \n        1\n    else\n        largest_prime_factor(n / 2)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(100_000_000)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the nth Fibonacci number.",
  "    if n < 2 \n        then return 1\n    else if n % 2 == 0 \n        then return\
    \ 2\n    else if n % 3 == 0 \n        then return 3\n    else if n % 5 == 0 \n\
    \        then return 5\n    else if n % 7 == 0 \n        then return 7\n    else\
    \ if n % 11 == 0 \n        then return 11\n    else if n % 13 == 0 \n        then\
    \ return 13\n    else if n % 17 == 0 \n        then return 17\n    else if n %\
    \ 19 == 0 \n        then return 19\n    else if n % 23 == 0 \n        then return\
    \ 23\n    else if n % 29 == 0 \n        then return 29\n    else if n % 31 ==\
    \ 0 \n        then return 31\n    else if n % 37 == 0 \n        then return 37\n\
    \    else if n % 41 == 0 \n        then return 41\n    else if n % 43 == 0 \n\
    \        then return 43\n    else if n % 47 == 0 \n        then return 47\n  \
    \  else if n % 53 == 0 \n        then return 53\n    else if n % 59 == 0 \n  \
    \      then return 59\n    else if n % 61 == 0 \n        then return 61\n    else\
    \ if n % 67 == 0 \n        then return 67\n    else if n % 71 == 0 \n        then\
    \ return 71\n    else if n % 73 == 0 \n        then return 73\n    else if n %\
    \ 79 == 0 \n        then return 79\n    else if n % 83 == 0 \n        then return\
    \ 83\n    else if n % 89 == 0 \n        then return 89\n    else if n % 97 ==\
    \ 0 \n        then return 97\n    else if n % 101 == 0 \n        then return 101\n\
    \    else if n % 103 == 0 \n        then return 103\n    else if n % 107 == 0\
    \ \n        then return 107\n    else if n % 111 == 0 \n        then return 111\n\
    \    else if n % 117 == 0 \n        then return 117\n    else if n % 121 == 0\
    \ \n        then return 121\n    else if n % 127 == 0 \n        then return 127\n\
    \    else if n % 131 == 0 \n        then return 131\n    else if n % 137 == 0\
    \ \n        then return 137\n    else if n % 141 == 0 \n        then return 141\n\
    \    else if n % 147 == 0 \n        then return 147\n    else if n % 151 == 0\
    \ \n        then return 151\n    else if n % 157 == 0 \n        then return 157\n\
    \    else if n % 163 == 0 ", "    if n < 2 \n        then return n\n    else if\
    \ n == 2 \n        then return 2\n    else if n % 2 == 0 \n        then return\
    \ largest_prime_factor(n/2)\n    else \n        largest_prime_factor(3*n+1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_prime_factor(13195)\n\
    </cell>\n<code language=julia-1.5>\nlargest_prime_factor(2048)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the smallest prime factor of n. Assume\
    \ n > 1 and is not a prime.\nHint: You may want to use the largest_prime_factor\
    \ function you defined earlier.", "    if n == 1 \n        1\n    else\n     \
    \   largest_prime_factor(n-1) * n\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    @time largest_prime_factor(10^6)\n</cell>\n<text>\nExercise\nWrite a function\
    \ that returns the greatest common divisor of two numbers. Assume that both numbers\
    \ are positive integers and that the greatest common divisor is positive.", " \
    \   if n < 2 \n        then return n\n    else if n % 2 == 0 \n        then return\
    \ largest_prime_factor(n/2)\n    else \n        p := 3\n        while p < n \n\
    \            do if n % p == 0 \n                then return p\n              \
    \  else p := p + 2\n    return n\n</code>\n<|/ a tags=primes,haskell,algorithm\
    \ |>\n<| c |>\nThis algorithm is very inefficient. Try it out on `largest_prime_factor(10^6)`.\n\
    <|/ c |>\n<| c |>\nI agree with you. However I believe that it is still a good\
    \ exercise to learn how to implement a more efficient algorithm. Also the algorithm\
    \ is very simple and easy to understand.\n<|/ c |>\n<| c |>\nI agree with you\
    \ that it is an interesting exercise, but I believe that it is also a very bad\
    \ one. Try it out on `largest_prime_factor(10^6)`.\n<|/ c |>\n<| c |>\nI agree\
    \ with you. However I believe that it is still a good exercise to learn how to\
    \ implement a more efficient algorithm. Also the algorithm is very simple and\
    \ easy to understand.\n<|/ c |>\n<| c |>\nI agree with you that it is an interesting\
    \ exercise, but I believe that it is also a very bad one. Try it out on `largest_prime_factor(10^6)`.\n\
    <|/ c |>\n<| a dscore=4 |>\nThe algorithm is called \"Sieve of Eratosthenes\"\n\
    <code>\nprimes :: [Int]\nprimes = sieve [2..]\n  where\n    sieve (p:xs)\n   \
    \   | p > 1000 = error \"too large\"\n      | p < 2     = error \"too small\"\n\
    \      | otherwise = p : sieve [x | x <- xs, x `mod` p /= 0]\n</code>\n<|/ a tags=primes,haskell,algorithm\
    \ |>\n<| c |>\nThis algorithm is very inefficient. Try it out on `primes [2..]`.\n\
    <|/ c |>\n<| c |>\nI agree with you. However I believe that it is still a good\
    \ exercise to learn how to implement a more efficient algorithm. Also the algorithm\
    \ is very simple and easy to understand.\n<|/ c |>\n<| c |>\nI agree with you\
    \ that it is an interesting exercise, but I believe that it is also a very bad\
    \ one. Try it ", "    if n==1 \n        1\n    else if n==2 \n        2\n    else\
    \ if n%2==0 \n        largest_prime_factor(n/2)\n    else \n        largest_prime_factor(n/3)\n\
    end\n</cell>\n<code language=julia-1.4>\nlargest_prime_factor(13195)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the smallest prime factor of\
    \ n. Assume n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n\
    \    13\n    >>> smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n ==\
    \ 1 \n        1\n    else\n        largest_prime_factor(n-1) * n\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(100_000_000)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the smallest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nHint: Use a sieve of Eratosthenes",
  "    if n == 1 \n        1\n    else\n        largest_prime_factor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n < 2 \n        then return\
    \ n\n    else if n % 2 == 0 \n        then return 2\n    else if n % 3 == 0 \n\
    \        then return 3\n    else if n % 5 == 0 \n        then return 5\n    else\
    \ if n % 7 == 0 \n        then return 7\n    else if n % 11 == 0 \n        then\
    \ return 11\n    else if n % 13 == 0 \n        then return 13\n    else if n %\
    \ 17 == 0 \n        then return 17\n    else if n % 19 == 0 \n        then return\
    \ 19\n    else if n % 23 == 0 \n        then return 23\n    else if n % 29 ==\
    \ 0 \n        then return 29\n    else if n % 31 == 0 \n        then return 31\n\
    \    else if n % 37 == 0 \n        then return 37\n    else if n % 41 == 0 \n\
    \        then return 41\n    else if n % 43 == 0 \n        then return 43\n  \
    \  else if n % 47 == 0 \n        then return 47\n    else if n % 53 == 0 \n  \
    \      then return 53\n    else if n % 59 == 0 \n        then return 59\n    else\
    \ if n % 61 == 0 \n        then return 61\n    else if n % 67 == 0 \n        then\
    \ return 67\n    else if n % 71 == 0 \n        then return 71\n    else if n %\
    \ 73 == 0 \n        then return 73\n    else if n % 79 == 0 \n        then return\
    \ 79\n    else if n % 83 == 0 \n        then return 83\n    else if n % 89 ==\
    \ 0 \n        then return 89\n    else if n % 97 == 0 \n        then return 97\n\
    \    else if n % 101 == 0 \n        then return 101\n    else if n % 103 == 0\
    \ \n        then return 103\n    else if n % 107 == 0 \n        then return 107\n\
    \    else if n % 111 == 0 \n        then return 111\n    else if n % 117 == 0\
    \ \n        then return 117\n    else if n % 121 == 0 \n        then return 121\n\
    \    else if n % 123 == 0 \n        then return 123\n    else if n % 127 == 0\
    \ \n        then return 127\n    else if n % 131 == 0 \n        then return 131\n\
    \    else if n % 137 == 0 \n        then return 137\n    else if n % 141 == 0\
    \ \n        then return 141\n    else if n % 147 == 0 \n        then return 147\n\
    \    else if n % 151 == 0 \n        then return 151\n    else if n % 157 == 0 ",
  "    if n == 1 \n        1\n    else\n        largest_prime_factor(n / 2)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(100_000_000)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the greatest common\
    \ divisor of two positive integers. Assume that both numbers are positive.", " \
    \   if n < 2 \n        then return 1\n    else if n == 2 \n        then return\
    \ 2\n    else if n % 2 == 0 \n        then return 2\n    else \n        largest_prime_factor(n\
    \ / 2)\n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_prime_factor(13195)\n\
    </cell>\n<code language=julia-1.5>\nlargest_prime_factor(2048)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the smallest prime factor of n. Assume\
    \ n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n    13\n  \
    \  >>> smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n < 2 \n     \
    \   then return 1\n    else if n == 2 \n        then return 2\n    else if n %\
    \ 2 == 0 \n        then return largest_prime_factor(n / 2)\n    else \n      \
    \  largest_prime_factor(n / 2)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n\
    \    2\n    \"\"\"", "    if n==1 \n        1\n    else if n==2 \n        2\n\
    \    else if n%2==0 \n        largest_prime_factor(n/2)\n    else \n        largest_prime_factor(n/3)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Return the smallest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n\
    \    13\n    >>> smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n ==\
    \ 1 \n        1\n    else\n        largest_prime_factor(n/2)\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\n@time largest_prime_factor(100_000_000)\n</cell>\n\
    <text>\nExercise: Write a function that returns the smallest prime factor of n.\
    \ Assume n > 1 and is not a prime.\nHint: Use a while loop and a prime number\
    \ sieve.", "    if n < 2 \n        then return 1 \n    else if n % 2 == 0 \n \
    \       then return n \n    else \n        largest_prime_factor(n / 2) \nend\n\
    </cell>\n<code language=julia-1.5>\n@assert largest_prime_factor(5) == 5\n@assert\
    \ largest_prime_factor(7) == 7\n@assert largest_prime_factor(12) == 3\n@assert\
    \ largest_prime_factor(17) == 5\n@assert largest_prime_factor(19) == 7\n@assert\
    \ largest_prime_factor(20) == 5\n@assert largest_prime_factor(24) == 7\n@assert\
    \ largest_prime_factor(29) == 3\n@assert largest_prime_factor(31) == 7\n@assert\
    \ largest_prime_factor(32) == 2\n@assert largest_prime_factor(33) == 3\n@assert\
    \ largest_prime_factor(35) == 5\n@assert largest_prime_factor(37) == 7\n@assert\
    \ largest_prime_factor(39) == 3\n@assert largest_prime_factor(41) == 7\n@assert\
    \ largest_prime_factor(43) == 5\n@assert largest_prime_factor(47) == 3\n@assert\
    \ largest_prime_factor(49) == 7\n@assert largest_prime_factor(50) == 5\n@assert\
    \ largest_prime_factor(51) == 7\n@assert largest_prime_factor(52) == 5\n@assert\
    \ largest_prime_factor(57) == 3\n@assert largest_prime_factor(59) == 7\n@assert\
    \ largest_prime_factor(61) == 5\n@assert largest_prime_factor(63) == 7\n@assert\
    \ largest_prime_factor(65) == 3\n@assert largest_prime_factor(67) == 7\n@assert\
    \ largest_prime_factor(69) == 3\n@assert largest_prime_factor(71) == 7\n@assert\
    \ largest_prime_factor(73) == 5\n@assert largest_prime_factor(75) == 7\n@assert\
    \ largest_prime_factor(79) == 3\n@assert largest_prime_factor(81) == 7\n@assert\
    \ largest_prime_factor(83) == 5\n@assert largest_prime_factor(87) == 7\n@assert\
    \ largest_prime_factor(89) == 3\n@assert largest_prime_factor(91) == 7\n@assert\
    \ largest_prime_factor(93) == 5\n@assert largest_prime_factor(97) == 3\n@assert\
    \ largest_prime_factor(99) == 7\n@assert largest_prime_factor(100) == 5\n@assert\
    \ largest_prime_factor(101) == 7\n@assert largest_prime", "    if n < 2 \n   \
    \     then return n\n    else if n == 2 \n        then return 2\n    else if n\
    \ % 2 == 0 \n        then return largest_prime_factor(n / 2)\n    else \n    \
    \    largest_prime_factor(n / 2)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    largest_prime_factor(13195)\n</cell>\n<code language=julia-1.3>\nlargest_prime_factor(2048)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the smallest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n\
    \    3\n    >>> smallest_prime_factor(2048)\n    7\n    \"\"\"", "    if n < 2\
    \ \n        then return n\n    else if n == 2 \n        then return 2\n    else\
    \ if n % 2 == 0 \n        then return largest_prime_factor(n / 2)\n    else \n\
    \        largest_prime_factor(n / 2)\n    end\nend\n</cell>\n<code language=julia-1.1>\n\
    largest_prime_factor(13195)\n</cell>\n<code language=julia-1.1>\nlargest_prime_factor(2048)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the greatest common\
    \ divisor of two numbers. Assume that both numbers are positive integers.\nHint:\
    \ use the gcd function", "    if n < 2 \n        then return 1\n    else if n\
    \ == 2 \n        then return 2\n    else if n % 2 == 0 \n        then return n\n\
    \    else \n        largest_prime_factor(n / 2)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if n == 1 \n        1\n    else\n        largest_prime_factor(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n@time largest_prime_factor(1000000000)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the smallest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nHint: use the function largest_prime_factor.",
  "    if n == 1 \n        1\n    else\n        largest_prime_factor(n-1) * n\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(100_000_000)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the smallest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nHint: use your largest_prime_factor\
    \ function.", "    if n < 2 \n        then return n\n    else if n % 2 == 0 \n\
    \        then return 2\n    else if n % 3 == 0 \n        then return 3\n    else\
    \ if n % 5 == 0 \n        then return 5\n    else if n % 7 == 0 \n        then\
    \ return 7\n    else if n % 11 == 0 \n        then return 11\n    else if n %\
    \ 13 == 0 \n        then return 13\n    else if n % 17 == 0 \n        then return\
    \ 17\n    else if n % 19 == 0 \n        then return 19\n    else if n % 23 ==\
    \ 0 \n        then return 23\n    else if n % 29 == 0 \n        then return 29\n\
    \    else if n % 31 == 0 \n        then return 31\n    else if n % 37 == 0 \n\
    \        then return 37\n    else if n % 41 == 0 \n        then return 41\n  \
    \  else if n % 43 == 0 \n        then return 43\n    else if n % 47 == 0 \n  \
    \      then return 47\n    else if n % 53 == 0 \n        then return 53\n    else\
    \ if n % 59 == 0 \n        then return 59\n    else if n % 61 == 0 \n        then\
    \ return 61\n    else if n % 67 == 0 \n        then return 67\n    else if n %\
    \ 71 == 0 \n        then return 71\n    else if n % 73 == 0 \n        then return\
    \ 73\n    else if n % 79 == 0 \n        then return 79\n    else if n % 83 ==\
    \ 0 \n        then return 83\n    else if n % 89 == 0 \n        then return 89\n\
    \    else if n % 97 == 0 \n        then return 97\n    else if n % 101 == 0 \n\
    \        then return 101\n    else if n % 103 == 0 \n        then return 103\n\
    \    else if n % 107 == 0 \n        then return 107\n    else if n % 111 == 0\
    \ \n        then return 111\n    else if n % 117 == 0 \n        then return 117\n\
    \    else if n % 121 == 0 \n        then return 121\n    else if n % 123 == 0\
    \ \n        then return 123\n    else if n % 127 == 0 \n        then return 127\n\
    \    else if n % 131 == 0 \n        then return 131\n    else if n % 137 == 0\
    \ \n        then return 137\n    else if n % 141 == 0 \n        then return 141\n\
    \    else if n % 147 == 0 \n        then return 147\n    else if n % 151 == 0\
    \ \n        then return 151\n    else if n % 157 == 0 ", "    if n == 1 \n   \
    \     1 \n    else if n % 2 == 0 \n        largest_prime_factor(n / 2) \n    else\
    \ \n        largest_prime_factor(3 * n + 1) \nend\n</cell>\n<code language=julia-1.5>\n\
    largest_prime_factor(13195)\n</cell>\n<code language=julia-1.5>\nlargest_prime_factor(2048)\n\
    </cell>\n<text>\nExercise: Write a function that returns the smallest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n\
    \    13\n    >>> smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n ==\
    \ 1 \n        1\n    else\n        largest_prime_factor(n-1)\n    end\nend\n</cell>\n\
    <code language=julia-1.1>\n\"\"\"Return the smallest prime factor of n. Assume\
    \ n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n    3\n   \
    \ >>> smallest_prime_factor(2048)\n    2\n    \"\"\"", "    if n < 2 \n      \
    \  then return n\n    else if n == 2 \n        then return 1\n    else if n %\
    \ 2 == 0 \n        then return largest_prime_factor(n / 2)\n    else \n      \
    \  largest_prime_factor(n / 2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_prime_factor(13195)\n</cell>\n<code language=julia-1.5>\nlargest_prime_factor(2048)\n\
    </cell>\n<text>\nExercise: Write a function that returns the smallest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n\
    \    13\n    >>> smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n==1\
    \ \n        1\n    else\n        largest_prime_factor(n-1)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n < 2 \n        then return 1\n    else if\
    \ n % 2 == 0 \n        then return 2\n    else if n % 3 == 0 \n        then return\
    \ 3\n    else if n % 5 == 0 \n        then return 5\n    else if n % 7 == 0 \n\
    \        then return 7\n    else if n % 11 == 0 \n        then return 11\n   \
    \ else if n % 13 == 0 \n        then return 13\n    else if n % 17 == 0 \n   \
    \     then return 17\n    else if n % 19 == 0 \n        then return 19\n    else\
    \ if n % 23 == 0 \n        then return 23\n    else if n % 29 == 0 \n        then\
    \ return 29\n    else if n % 31 == 0 \n        then return 31\n    else if n %\
    \ 37 == 0 \n        then return 37\n    else if n % 41 == 0 \n        then return\
    \ 41\n    else if n % 43 == 0 \n        then return 43\n    else if n % 47 ==\
    \ 0 \n        then return 47\n    else if n % 53 == 0 \n        then return 53\n\
    \    else if n % 59 == 0 \n        then return 59\n    else if n % 61 == 0 \n\
    \        then return 61\n    else if n % 67 == 0 \n        then return 67\n  \
    \  else if n % 71 == 0 \n        then return 71\n    else if n % 73 == 0 \n  \
    \      then return 73\n    else if n % 79 == 0 \n        then return 79\n    else\
    \ if n % 83 == 0 \n        then return 83\n    else if n % 89 == 0 \n        then\
    \ return 89\n    else if n % 97 == 0 \n        then return 97\n    else if n %\
    \ 101 == 0 \n        then return 101\n    else if n % 103 == 0 \n        then\
    \ return 103\n    else if n % 107 == 0 \n        then return 107\n    else if\
    \ n % 111 == 0 \n        then return 111\n    else if n % 117 == 0 \n        then\
    \ return 117\n    else if n % 121 == 0 \n        then return 121\n    else if\
    \ n % 123 == 0 \n        then return 123\n    else if n % 127 == 0 \n        then\
    \ return 127\n    else if n % 131 == 0 \n        then return 131\n    else if\
    \ n % 137 == 0 \n        then return 137\n    else if n % 141 == 0 \n        then\
    \ return 141\n    else if n % 147 == 0 \n        then return 147\n    else if\
    \ n % 151 == 0 \n        then return 151\n    else if n % 157 == 0 ", "    if\
    \ n==1 \n        1 \n    else \n        largest_prime_factor(n-1) * n \nend\n\
    </cell>\n<code language=julia-1.3>", "    if n == 1 \n        1 \n    else if\
    \ n % 2 == 0 \n        largest_prime_factor(n / 2) \n    else \n        largest_prime_factor(3\
    \ * n + 1)\nend\n</cell>\n<code language=julia-1.3>\n@time largest_prime_factor(100_000_000)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the greatest common\
    \ divisor of two positive integers. Assume that both integers are positive.",
  "    if n==1 \n        1\n    else \n        largest_prime_factor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>", "    if n < 2 \n        then return\
    \ n\n    else if n % 2 == 0 \n        then return largest_prime_factor(n/2)\n\
    \    else \n        largest_prime_factor(sqrt(n)) * 3\nend\n</cell>\n<code language=julia-1.1>\n\
    largest_prime_factor(13195)\n</cell>\n<text>\nExercise: Write a function that\
    \ returns the smallest prime factor of n. Assume n > 1 and is not a prime.\n \
    \   >>> smallest_prime_factor(13195)\n    13\n    >>> smallest_prime_factor(2048)\n\
    \    3\n    \"\"\"", "    if n < 2 \n        then return 1\n    else if n % 2\
    \ == 0 \n        then return 2\n    else if n % 3 == 0 \n        then return 3\n\
    \    else if n % 5 == 0 \n        then return 5\n    else if n % 7 == 0 \n   \
    \     then return 7\n    else if n % 11 == 0 \n        then return 11\n    else\
    \ if n % 13 == 0 \n        then return 13\n    else if n % 17 == 0 \n        then\
    \ return 17\n    else if n % 19 == 0 \n        then return 19\n    else if n %\
    \ 23 == 0 \n        then return 23\n    else if n % 29 == 0 \n        then return\
    \ 29\n    else if n % 31 == 0 \n        then return 31\n    else if n % 37 ==\
    \ 0 \n        then return 37\n    else if n % 41 == 0 \n        then return 41\n\
    \    else if n % 43 == 0 \n        then return 43\n    else if n % 47 == 0 \n\
    \        then return 47\n    else if n % 53 == 0 \n        then return 53\n  \
    \  else if n % 59 == 0 \n        then return 59\n    else if n % 61 == 0 \n  \
    \      then return 61\n    else if n % 67 == 0 \n        then return 67\n    else\
    \ if n % 71 == 0 \n        then return 71\n    else if n % 73 == 0 \n        then\
    \ return 73\n    else if n % 79 == 0 \n        then return 79\n    else if n %\
    \ 83 == 0 \n        then return 83\n    else if n % 89 == 0 \n        then return\
    \ 89\n    else if n % 97 == 0 \n        then return 97\n    else if n % 101 ==\
    \ 0 \n        then return 101\n    else if n % 103 == 0 \n        then return\
    \ 103\n    else if n % 107 == 0 \n        then return 107\n    else if n % 111\
    \ == 0 \n        then return 111\n    else if n % 117 == 0 \n        then return\
    \ 117\n    else if n % 121 == 0 \n        then return 121\n    else if n % 123\
    \ == 0 \n        then return 123\n    else if n % 127 == 0 \n        then return\
    \ 127\n    else if n % 131 == 0 \n        then return 131\n    else if n % 137\
    \ == 0 \n        then return 137\n    else if n % 141 == 0 \n        then return\
    \ 141\n    else if n % 147 == 0 \n        then return 147\n    else if n % 151\
    \ == 0 \n        then return 151\n    else if n % 157 == 0 ", "    if n == 1 \n\
    \        1\n    else if n % 2 == 0 \n        largest_prime_factor(n / 2)\n   \
    \ else \n        largest_prime_factor(3 * n + 1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nlargest_prime_factor(13195)\n</cell>\n<code language=julia-1.5>\n\
    largest_prime_factor(2048)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the smallest prime factor of n. Assume n > 1 and is not a prime.\n \
    \   >>> smallest_prime_factor(13195)\n    13\n    >>> smallest_prime_factor(2048)\n\
    \    3\n    \"\"\"", "    if n==1 \n        1\n    else\n        largest_prime_factor(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_prime_factor(100)\n\
    </cell>\n<text>\nExercise\nWrite a function prime_sum(n::Int64) that returns the\
    \ sum of the primes less than or equal to n.", "    if n == 1 \n        1\n  \
    \  else \n        largest_prime_factor(n-1) * prime_factor(n-1)\n    end\nend\n\
    </cell>\n<code language=julia-1.3>\n@time largest_prime_factor(20000)\n</cell>\n\
    <text>\nExercise: Write a function that returns the smallest prime factor of n.\
    \ Assume n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n   \
    \ 13\n    >>> smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n == 1\
    \ \n        1\n    else\n        largest_prime_factor(n-1)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n == 1 \n        1\n    else \n        largest_prime_factor(n\
    \ / 2)\n    end\nend\n</cell>\n<code language=julia-1.4>\n@time largest_prime_factor(100_000_000)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of prime\
    \ factors of n. Assume n > 1 and is not a prime.\nHint: Use a while loop and a\
    \ prime number sieve.", "    if n < 2 \n        then return n\n    else if n %\
    \ 2 == 0 \n        then return largest_prime_factor(n / 2)\n    else \n      \
    \  largest_prime_factor(3 * n + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(100_000_000)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the smallest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n    >>> smallest_prime_factor(13195)\n    3\n    >>> smallest_prime_factor(2048)\n\
    \    2\n    \"\"\"", "    if n == 1 \n        1\n    else\n        largest_prime_factor(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if n == 1 \n        1\n\
    \    else\n        largest_prime_factor(n-1) * n\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time largest_prime_factor(100_000)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the smallest prime factor of n. Assume\
    \ n > 1 and is not a prime.\nHint: use the sieve of Eratosthenes to find all the\
    \ prime factors of n.", "    if n < 2 \n        then return n\n    else if n %\
    \ 2 == 0 \n        then return 2\n    else \n        p := 3\n        while p <\
    \ n \n            do if n % p == 0 \n                then return p\n         \
    \       p := p + 2\n            end\n        end\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\nlargest_prime_factor(13195)\n</cell>\n<code language=julia-1.3>\n\
    largest_prime_factor(2048)\n</cell>\n<text>\nExercise 2\nWrite a function prime_factor\
    \ that takes an integer $n$ and returns the prime factors of $n$. Assume $n >\
    \ 1$ and $n$ is not a prime.", "    if n < 2 \n        then return n\n    else\
    \ if n == 2 \n        then return 1\n    else if n % 2 == 0 \n        then return\
    \ 2\n    else if n % 3 == 0 \n        then return 3\n    else if n % 5 == 0 \n\
    \        then return 5\n    else if n % 7 == 0 \n        then return 7\n    else\
    \ if n % 11 == 0 \n        then return 11\n    else if n % 13 == 0 \n        then\
    \ return 13\n    else if n % 17 == 0 \n        then return 17\n    else if n %\
    \ 19 == 0 \n        then return 19\n    else if n % 23 == 0 \n        then return\
    \ 23\n    else if n % 29 == 0 \n        then return 29\n    else if n % 31 ==\
    \ 0 \n        then return 31\n    else if n % 37 == 0 \n        then return 37\n\
    \    else if n % 41 == 0 \n        then return 41\n    else if n % 43 == 0 \n\
    \        then return 43\n    else if n % 47 == 0 \n        then return 47\n  \
    \  else if n % 53 == 0 \n        then return 53\n    else if n % 59 == 0 \n  \
    \      then return 59\n    else if n % 61 == 0 \n        then return 61\n    else\
    \ if n % 67 == 0 \n        then return 67\n    else if n % 71 == 0 \n        then\
    \ return 71\n    else if n % 73 == 0 \n        then return 73\n    else if n %\
    \ 79 == 0 \n        then return 79\n    else if n % 83 == 0 \n        then return\
    \ 83\n    else if n % 89 == 0 \n        then return 89\n    else if n % 97 ==\
    \ 0 \n        then return 97\n    else if n % 101 == 0 \n        then return 101\n\
    \    else if n % 103 == 0 \n        then return 103\n    else if n % 107 == 0\
    \ \n        then return 107\n    else if n % 111 == 0 \n        then return 111\n\
    \    else if n % 117 == 0 \n        then return 117\n    else if n % 121 == 0\
    \ \n        then return 121\n    else if n % 123 == 0 \n        then return 123\n\
    \    else if n % 127 == 0 \n        then return 127\n    else if n % 131 == 0\
    \ \n        then return 131\n    else if n % 137 == 0 \n        then return 137\n\
    \    else if n % 141 == 0 \n        then return 141\n    else if n % 147 == 0\
    \ \n        then return 147\n    else if n % 151 == 0 \n        then ", "    if\
    \ n < 2 \n        then return n\n    else if n == 2 \n        then return 2\n\
    \    else if n % 2 == 0 \n        then return largest_prime_factor(n/2)\n    else\
    \ \n        largest_prime_factor(3*n+2)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n\
    \    2\n    \"\"\"", "    if n == 1 \n        1\n    else \n        largest_prime_factor(n-1)\
    \ * n \nend\n</cell>\n<code language=julia-1.5>", "    if n < 2 \n        then\
    \ return n\n    else if n % 2 == 0 \n        then return largest_prime_factor(n\
    \ / 2)\n    else \n        largest = 2\n        for p in prime_factors(n) \n \
    \           if p > largest \n                then largest = p\n        return\
    \ largest\nend\n</cell>\n<code language=julia-1.1>\nlargest_prime_factor(13195)\n\
    </cell>\n<code language=julia-1.1>\nlargest_prime_factor(2048)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the smallest prime factor of n. Assume\
    \ n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n    13\n  \
    \  >>> smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n < 2 \n     \
    \   return n\n    \n    p :: Int64 = 1\n    \n    while p*p <= n \n        p +=\
    \ 1\n    \n    return p\nend\n</cell>\n<code language=julia-1.5>", "    if n ==\
    \ 1 \n        1\n    else\n        largest_prime_factor(n-1) * n\n    end\nend\n\
    </cell>\n<code language=julia-1.3>\nlargest_prime_factor(13195)\n</cell>\n<code\
    \ language=julia-1.3>\nlargest_prime_factor(2048)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the smallest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    >>> smallest_prime_factor(13195)\n    13\n    >>> smallest_prime_factor(2048)\n\
    \    2\n    \"\"\"", "    if n<2 return 1\n    \n    factor::Int64 = 1\n    \n\
    \    for d in prime_factors(n) do \n        if d*factor > n then \n          \
    \  factor = d\n        else \n            return factor\n    end\n    return factor\n\
    end\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(2000000)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(2000000)\n</cell>\n\
    <text>\nExercise: Write a function that returns the smallest prime factor of n.\
    \ Assume n > 1 and is not a prime.\nHint: Use a while loop and a prime factors\
    \ function.", "    if n < 2 \n        then return 1 \n    else if n % 2 == 0 \n\
    \        then return n \n    else \n        largest_prime_factor(n / 2) \n   \
    \ end\nend\n</cell>\n<code language=julia-1.5>", "    if n < 2 \n        then\
    \ return n\n    else if n % 2 == 0 \n        then return 2\n    else if n % 3\
    \ == 0 \n        then return 3\n    else if n % 5 == 0 \n        then return 5\n\
    \    else if n % 7 == 0 \n        then return 7\n    else if n % 11 == 0 \n  \
    \      then return 11\n    else if n % 13 == 0 \n        then return 13\n    else\
    \ if n % 17 == 0 \n        then return 17\n    else if n % 19 == 0 \n        then\
    \ return 19\n    else if n % 23 == 0 \n        then return 23\n    else if n %\
    \ 29 == 0 \n        then return 29\n    else if n % 31 == 0 \n        then return\
    \ 31\n    else if n % 37 == 0 \n        then return 37\n    else if n % 41 ==\
    \ 0 \n        then return 41\n    else if n % 43 == 0 \n        then return 43\n\
    \    else if n % 47 == 0 \n        then return 47\n    else if n % 53 == 0 \n\
    \        then return 53\n    else if n % 59 == 0 \n        then return 59\n  \
    \  else if n % 61 == 0 \n        then return 61\n    else if n % 67 == 0 \n  \
    \      then return 67\n    else if n % 71 == 0 \n        then return 71\n    else\
    \ if n % 73 == 0 \n        then return 73\n    else if n % 79 == 0 \n        then\
    \ return 79\n    else if n % 83 == 0 \n        then return 83\n    else if n %\
    \ 89 == 0 \n        then return 89\n    else if n % 97 == 0 \n        then return\
    \ 97\n    else if n % 101 == 0 \n        then return 101\n    else if n % 103\
    \ == 0 \n        then return 103\n    else if n % 107 == 0 \n        then return\
    \ 107\n    else if n % 111 == 0 \n        then return 111\n    else if n % 117\
    \ == 0 \n        then return 117\n    else if n % 121 == 0 \n        then return\
    \ 121\n    else if n % 123 == 0 \n        then return 123\n    else if n % 127\
    \ == 0 \n        then return 127\n    else if n % 131 == 0 \n        then return\
    \ 131\n    else if n % 137 == 0 \n        then return 137\n    else if n % 141\
    \ == 0 \n        then return 141\n    else if n % 147 == 0 \n        then return\
    \ 147\n    else if n % 151 == 0 \n        then return 151\n    else if n % 157\
    \ == 0 ", "    if n == 1 \n        1\n    else \n        largest_prime_factor(n\
    \ / 2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(100_000_000)\n\
    </cell>\n<text>\nExercise: Write a function that returns the greatest prime factor\
    \ of n. Assume n > 1 and is not a prime.\nHint: Use a recursive function.", " \
    \   if n < 2 \n        then return n\n    else if n % 2 == 0 \n        then return\
    \ largest_prime_factor(n/2) \n    else \n        largest_prime_factor(3*n+2)\n\
    end\n</cell>\n<code language=julia-1.3>\nlargest_prime_factor(13195)\n</cell>\n\
    <code language=julia-1.3>\nlargest_prime_factor(2048)\n</cell>\n<text>\nExercise\n\
    Write a function that returns the greatest common divisor of two numbers. Assume\
    \ that both numbers are positive and are not zero.", "    if n < 2 \n        then\
    \ return n\n    else if n == 2 \n        then return 2\n    else if n % 2 == 0\
    \ \n        then return largest_prime_factor(n / 2)\n    else \n        largest_prime_factor(n\
    \ / 2)\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if n<2\n     \
    \   error(\"n must be positive\")\n    end\n    \n    factor::Int64 = 1\n    \n\
    \    while true\n        factor::Int64 = n / factor\n        if factor==1\n  \
    \          break\n        end\n        if factor>1\n            break\n      \
    \  end\n    end\n    \n    return factor\nend\n</cell>\n<code language=julia-1.3>",
  "    if n < 2 \n        then return n\n    else if n == 2 \n        then return\
    \ 2\n    else if n % 2 == 0 \n        then return largest_prime_factor(n/2)\n\
    \    else if n % 3 == 0 \n        then return largest_prime_factor(n/3)\n    else\
    \ if n % 5 == 0 \n        then return largest_prime_factor(n/5)\n    else if n\
    \ % 7 == 0 \n        then return largest_prime_factor(n/7)\n    else if n % 11\
    \ == 0 \n        then return largest_prime_factor(n/11)\n    else if n % 13 ==\
    \ 0 \n        then return largest_prime_factor(n/13)\n    else if n % 17 == 0\
    \ \n        then return largest_prime_factor(n/17)\n    else if n % 19 == 0 \n\
    \        then return largest_prime_factor(n/19)\n    else if n % 23 == 0 \n  \
    \      then return largest_prime_factor(n/23)\n    else if n % 29 == 0 \n    \
    \    then return largest_prime_factor(n/29)\n    else if n % 31 == 0 \n      \
    \  then return largest_prime_factor(n/31)\n    else if n % 37 == 0 \n        then\
    \ return largest_prime_factor(n/37)\n    else if n % 41 == 0 \n        then return\
    \ largest_prime_factor(n/41)\n    else if n % 43 == 0 \n        then return largest_prime_factor(n/43)\n\
    \    else if n % 47 == 0 \n        then return largest_prime_factor(n/47)\n  \
    \  else if n % 53 == 0 \n        then return largest_prime_factor(n/53)\n    else\
    \ if n % 59 == 0 \n        then return largest_prime_factor(n/59)\n    else if\
    \ n % 61 == 0 \n        then return largest_prime_factor(n/61)\n    else if n\
    \ % 67 == 0 \n        then return largest_prime_factor(n/67)\n    else if n %\
    \ 71 == 0 \n        then return largest_prime_factor(n/71)\n    else if n % 73\
    \ == 0 \n        then return largest_prime_factor(n/73)\n    else if n % 79 ==\
    \ 0 \n        then return largest_prime_factor(n/79)\n    else if n % 83 == 0\
    \ \n        then return largest_prime_factor(n/83)\n    else if n % 89 == 0 \n\
    \        then return largest_prime_factor(n/89)\n    else if n % 97 == 0 \n  \
    \      then return largest_prime_factor(n/97)\n    else if n % 101 == ", "   \
    \ if n < 2 \n        then return n\n    else if n % 2 == 0 \n        then return\
    \ largest_prime_factor(n / 2)\n    else \n        largest_prime_factor(n / 2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_prime_factor(13195)\n\
    </cell>\n<code language=julia-1.5>\nlargest_prime_factor(2048)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the smallest prime factor of n. Assume\
    \ n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n    13\n  \
    \  >>> smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n < 2 \n     \
    \   then return n\n    else if n % 2 == 0 \n        then return largest_prime_factor(n/2)\n\
    \    else \n        largest_prime_factor(3*n+1)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(1000000000)\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the smallest prime factor of n. Assume n > 1 and is not a prime.\n\
    Hint: Use a while loop and a primality test.", "    if n < 2 \n        then return\
    \ n\n    else if n % 2 == 0 \n        then return 2\n    else if n % 3 == 0 \n\
    \        then return 3\n    else if n % 5 == 0 \n        then return 5\n    else\
    \ if n % 7 == 0 \n        then return 7\n    else \n        largest_prime_factor(n\
    \ / 2)\nend\n</cell>\n<code language=julia-1.5>\nlargest_prime_factor(13195)\n\
    </cell>\n<code language=julia-1.5>\nlargest_prime_factor(2048)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the smallest prime factor of n. Assume\
    \ n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n    7\n   \
    \ >>> smallest_prime_factor(2048)\n    2\n    \"\"\"", "    if n < 2 \n      \
    \  then return n\n    else if n % 2 == 0 \n        then return largest_prime_factor(n/2)\n\
    \    else \n        largest_prime_factor(3*n+1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.0>\n@assert largest_prime_factor(2) == 2 \"largest_prime_factor(2)\
    \ failed\"\n@assert largest_prime_factor(3) == 3 \"largest_prime_factor(3) failed\"\
    \n@assert largest_prime_factor(5) == 5 \"largest_prime_factor(5) failed\"\n@assert\
    \ largest_prime_factor(7) == 7 \"largest_prime_factor(7) failed\"\n@assert largest_prime_factor(11)\
    \ == 11 \"largest_prime_factor(11) failed\"\n@assert largest_prime_factor(13)\
    \ == 13 \"largest_prime_factor(13) failed\"\n@assert largest_prime_factor(17)\
    \ == 17 \"largest_prime_factor(17) failed\"\n@assert largest_prime_factor(19)\
    \ == 19 \"largest_prime_factor(19) failed\"\n@assert largest_prime_factor(23)\
    \ == 23 \"largest_prime_factor(23) failed\"\n@assert largest_prime_factor(29)\
    \ == 29 \"largest_prime_factor(29) failed\"\n@assert largest_prime_factor(31)\
    \ == 31 \"largest_prime_factor(31) failed\"\n@assert largest_prime_factor(37)\
    \ == 37 \"largest_prime_factor(37) failed\"\n@assert largest_prime_factor(41)\
    \ == 41 \"largest_prime_factor(41) failed\"\n@assert largest_prime_factor(43)\
    \ == 43 \"largest_prime_factor(43) failed\"\n@assert largest_prime_factor(47)\
    \ == 47 \"largest_prime_factor(47) failed\"\n@assert largest_prime_factor(53)\
    \ == 53 \"largest_prime_factor(53) failed\"\n@assert largest_prime_factor(59)\
    \ == 59 \"largest_prime_factor(59) failed\"\n@assert largest_prime_factor(61)\
    \ == 61 \"largest_prime_factor(61) failed\"\n@assert largest_prime_factor(67)\
    \ == 67 \"largest_prime_factor(67) failed\"\n@assert largest_prime_factor(71)\
    \ == 71 \"largest_prime_factor(71) failed\"\n@assert largest_prime_factor(73)\
    \ == 73 \"largest_prime_factor(73) failed\"\n@assert largest_prime_factor(79)\
    \ == 79 \"largest_prime_factor(79) ", "    if n < 2 \n        then return n\n\
    \    else if n % 2 == 0 \n        then return largest_prime_factor(n / 2)\n  \
    \  else \n        largest = 2\n        for i = 3 \n            in 2 .. n \n  \
    \          do \n                if n % i == 0 \n                    then largest\
    \ = i \n                    break\n        return largest\nend\n</cell>\n<code\
    \ language=julia-1.5>\nlargest_prime_factor(13195)\n</cell>\n<code language=julia-1.5>\n\
    largest_prime_factor(2048)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the smallest prime factor of n. Assume n > 1 and is not a prime.\n \
    \   >>> smallest_prime_factor(13195)\n    3\n    >>> smallest_prime_factor(2048)\n\
    \    2\n    \"\"\""]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
