name: HumanEval_100_make_a_pile
language: julia
prompt: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
  \ of stones.\n    The first level has n stones.\n    The number of stones in the\
  \ next level is:\n        - the next odd number if n is odd.\n        - the next\
  \ even number if n is even.\n    Return the number of stones in each level in a\
  \ list, where element at index\n    i represents the number of stones in the level\
  \ (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction\
  \ make_a_pile(n::Int64)::Vector{Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
  \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) ==\
  \ [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
  \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
completions: ["    if n == 1 \n        return [1]\n    \n    pile = make_a_pile(n\
    \ / 2)\n    pile = pile + [n mod 2 ? 1 : 0]\n    \n    return pile\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n==0 \n        Vector{Int64}() \n    else\
    \ \n        make_a_pile(n-1)\n        push!(make_a_pile(n-1), n%2 == 0 ? n+1 :\
    \ n) \n    end\nend\n</cell>\n<code language=julia-1.5>", "    if n % 2 == 0 \n\
    \        make_a_pile(n/2)\n    else\n        make_a_pile(n/2) + [(n+1)/2]\n  \
    \  end\nend\n</cell>\n<text>\nExercise\nWrite a function that takes an integer\
    \ n and returns the number of ways to make a pile of n levels of stones.", " \
    \   if n == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n / 2)\
    \ ++ [n % 2 == 0 ? n : n + 1]\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    make_a_pile(4)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a positive\
    \ integer n and returns the number of ways to arrange the n stones in a pile.",
  "    if n == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n - 1)\
    \ \n        push!(make_a_pile(n / 2), n % 2 == 0 ? n : n + 1)\n    end\nend",
  "    if n % 2 == 0 \n        make_a_pile(n / 2)\n    else \n        make_a_pile((3\
    \ * n) + 1)\nend\n</cell>\n<code language=julia-1.0>", "    if n == 0 \n     \
    \   Vector{Int64}() \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n\
    \ mod 2), n / 2) \n    end\nend\n</cell>\n<code language=julia-1.0>", "    if\
    \ n==0 \n        Vector{Int64}() \n    else \n        make_a_pile(ceil(n/2))\n\
    \        push!(make_a_pile(n-2),n%2==0?ceil(n/2):ceil(n/2+1))\n    end\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an integer n and returns\
    \ the number of ways to arrange the stones in a pile. For example, given n = 4,\
    \ there are 4 ways to arrange the stones in a pile:", "    if n == 0 \n      \
    \  return Vector{Int64}() \n    else \n        odd_or_even = if n % 2 == 0 \n\
    \            1 \n        else \n            0 \n        levels = make_a_pile(n\
    \ / 2) \n        levels[odd_or_even] += n \n        return levels \nend\n</cell>\n\
    <code language=julia-1.5>", "    if n % 2 == 0 \n        make_a_pile(n/2)\n  \
    \  else\n        make_a_pile(n/2) + make_a_pile(n/2) + make_a_pile(n/2)\n    end\n\
    end", "    if n==1 \n        return [1]\n    else \n        odd=make_a_pile(n-1)\n\
    \        even=make_a_pile(n-2)\n        odd=odd+[odd[n-1]]\n        even=even+[even[n-2]]\n\
    \        return odd+even\nend\n</cell>\n<code language=julia-1.5>", "    if n==1\
    \ \n        return [1]\n    else \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n\
    \        odd=odd+even\n        return odd\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n - 1)\
    \ \n    end\nend", "    if n == 0 \n        Vector{Int64}() \n    else \n    \
    \    make_a_pile(n - 1) \n        push!(make_a_pile(n div 2), n mod 2) \n    \
    \    push!(make_a_pile(n div 2), n mod 2) \n    end\nend\n</cell>\n<text>\nExercise\
    \ 1\nWrite a function that takes in a positive integer n and returns the number\
    \ of stones in the first level of the pile.", "    if n==0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n div 2) + [n mod 2]\n    end\nend\n</cell>\n\
    <code language=julia-1.0>", "    if n == 0 \n        Vector{Int64}() \n    else\
    \ \n        make_a_pile(n / 2) ++ [n % 2 == 0 ? n : 2 * n] \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert make_a_pile(3) == [3, 5, 7]\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes as input a positive integer n and returns\
    \ the number of ways to make a pile of n levels of stones.", "    if n==0 \n \
    \       return Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n\
    \    else \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n    \
    \    odd=odd+even\n        odd=odd[end-1]\n        even=even[end-1]\n        odd=odd+even\n\
    \        return odd\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ n == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n - 1) \n\
    \        push!(make_a_pile(n / 2), n % 2 == 0 ? 1 : 2) \n    end\nend\n</cell>\n\
    <text>\nExercise\nWrite a function that takes a positive integer n and returns\
    \ the number of ways to make a pile of n levels of stones.", "    if n == 0 \n\
    \        Vector{Int64}() \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n\
    \ / 2), n mod 2) \n        push!(make_a_pile(n / 2), n mod 2) \n    end\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer n\
    \ and returns the number of ways to arrange n stones in a pile.", "    if n ==\
    \ 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n - 1) \n     \
    \   push!(make_a_pile(n / 2), n % 2 == 0 ? n : n + 1)\n    end\nend\n</cell>\n\
    <text>\nExercise: Write a function that takes a positive integer n and returns\
    \ the number of levels in the pile. For example, make_a_pile(3) should return\
    \ [3, 5, 7].", "    if n == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n\
    \ - 1) \n        push!(make_a_pile(n / 2), n % 2 == 0 ? n : n + 1) \n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@time make_a_pile(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a positive integer n and returns the number\
    \ of ways to arrange the n stones in a pile.", "    if n == 0 \n        Vector{Int64}()\n\
    \    else\n        make_a_pile(n - 1) ++ [n % 2 == 0 ? n : n // 2]\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nmake_a_pile(4)\n</cell>\n<text>\nExercise\n\
    Write a function that takes a positive integer n and returns the number of levels\
    \ of stones needed to make n piles.", "    if n == 0 \n        return Vector{Int64}()\n\
    \    else if n == 1 \n        return Vector{Int64}(1)\n    else \n        odd\
    \ = n % 2 \n        even = n / 2 \n        pile = make_a_pile(even) + make_a_pile(odd)\
    \ \n        return pile \nend\n</cell>\n<code language=julia-1.5>", "    if n==1\
    \ \n        return [1]\n    else \n        odd_or_even = if n%2==0 then \"even\"\
    \ else \"odd\"\n        pile = make_a_pile(n-1)\n        push!(pile,n+1)\n   \
    \     push!(pile,odd_or_even)\n        return pile\nend\n</cell>\n<code language=julia-1.5>\n\
    make_a_pile(4)\n</cell>\n<text>\nExercise 2\nWrite a function called make_a_pile_from_list\
    \ that takes a list of integers and returns a pile of n levels of stones.", " \
    \   if n==0 \n        Vector{Int64}() \n    else \n        make_a_pile(n div 2)\
    \ ++ make_a_pile(n div 2) ++ make_a_pile(n div 2) \n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if n==0 \n        Vector{Int64}() \n    else \n \
    \       make_a_pile(n div 2) + [n mod 2] \n    end\nend\n</cell>\n<code language=julia-1.0>",
  "    if n == 0 \n        return Vector{Int64}()\n    else \n        if n % 2 ==\
    \ 1 \n            pile = make_a_pile(n / 2)\n            push!(pile, n / 2)\n\
    \            return pile\n        else \n            pile = make_a_pile(n / 2)\n\
    \            push!(pile, n / 2)\n            push!(pile, n / 2)\n            return\
    \ pile\nend\n</cell>\n<code language=julia-1.0>", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n mod 2),\
    \ n div 2) \n    end\nend\n</cell>\n<code language=julia-1.5>", "    if n==0 \n\
    \        Vector{Int64}() \n    else \n        make_a_pile(ceil(n/2))\n       \
    \ push!(make_a_pile(n%2), n%2)\n    end\nend\n</cell>\n<text>\nExercise\nWrite\
    \ a function that takes in a positive integer n and returns the number of levels\
    \ of stones needed to make n stones.", "    if n==1 \n        return [1]\n   \
    \ else \n        odds = make_a_pile(n-1)\n        evens = make_a_pile(n-2)\n \
    \       odds = [odds[i] + odds[i+1] for i in 1:length(odds)]\n        evens =\
    \ [evens[i] + evens[i+1] for i in 1:length(evens)]\n        return odds + evens\n\
    end\n</cell>\n<code language=julia-1.0>", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n / 2),\
    \ n % 2 == 0 ? n : n + 1)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    make_a_pile(3)\n</cell>\n<code language=julia-1.0>", "    if n == 0 \n       \
    \ Vector{Int64}() \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n\
    \ / 2), n mod 2) \n        push!(make_a_pile(n / 2), n mod 2) \n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes an integer n and returns\
    \ the number of ways to arrange the n stones in a pile.", "    if n==0 \n    \
    \    Vector{Int64}() \n    else \n        make_a_pile(n-1)\n        push!(make_a_pile(n-1),n%2==0\
    \ ? n+1 : n) \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a positive integer n and returns the number of ways to arrange n stones\
    \ in a pile.", "    if n==1 \n        return [1]\n    else \n        odd=make_a_pile(n-1)\n\
    \        even=make_a_pile(n-2)\n        odd=odd+even\n        odd=odd[end-1]\n\
    \        even=even[end-1]\n        odd=odd+even\n        return odd\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n==0 \n        Vector{Int64}()\n    else \n\
    \        make_a_pile(n-1)\n        push!(make_a_pile(n-1), n%2 == 0 ? n : n+1)\n\
    \    end\nend", "    if n==0 \n        return Vector{Int64}()\n    else if n==1\
    \ \n        return Vector{Int64}(1)\n    else \n        odd = make_a_pile(n-1)\n\
    \        even = make_a_pile(n-2)\n        odd_even = odd ++ even\n        odd_even.push(n%2)\n\
    \        return odd_even\nend\n</cell>\n<code language=julia-1.5>\nmake_a_pile(4)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a positive integer n\
    \ and returns the number of ways to arrange n stones in a pile.", "    if n==0\
    \ \n        Vector{Int64}() \n    else \n        make_a_pile(n div 2) + [n mod\
    \ 2] \n    end\nend\n</cell>\n<code language=julia-1.3>\nmake_a_pile(4)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a positive integer n and returns\
    \ the number of ways to arrange n stones in a pile.", "    if n == 0 \n      \
    \  Vector{Int64}() \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n\
    \ / 2), n mod 2) \n        push!(make_a_pile(n / 2), n mod 2) \n    end\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer n\
    \ and returns the number of ways to arrange the n stones in a pile. For example,\
    \ make_a_pile(3) should return [3, 5, 7].", "    if n == 0 \n        return Vector{Int64}()\
    \ \n    else \n        pile = make_a_pile(n div 2) \n        push!(pile, n mod\
    \ 2) \n        return pile \nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ n % 2 == 0 \n        odds = make_a_pile(n / 2)\n        evens = make_a_pile(n\
    \ / 2)\n        odds[end] = odds[end] + evens[end]\n        evens[end] = evens[end]\
    \ + odds[end]\n        return odds\n    else\n        evens = make_a_pile(n /\
    \ 2)\n        odds = make_a_pile(n / 2)\n        evens[end] = evens[end] + odds[end]\n\
    \        odds[end] = odds[end] + evens[end]\n        return evens\n    end\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer n\
    \ and returns the number of ways to arrange n stones in a pile.", "    if n==0\
    \ \n        Vector{Int64}()\n    else\n        make_a_pile(n div 2) + [n mod 2]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if n % 2 == 0 \n    \
    \    make_a_pile(n / 2)\n    else\n        make_a_pile(n / 2) + [n / 2]\n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n % 2 == 0 \n        make_a_pile(n/2)\n\
    \    else \n        make_a_pile(n/2) + [(n+1)/2]\nend\n</cell>\n<code language=julia-1.5>",
  "    if n==0 \n        return Vector{Int64}()\n    else if n==1 \n        return\
    \ Vector{Int64}(1)\n    else \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n\
    \        odd=odd+even\n        return odd\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n==0 \n        return Vector{Int64}()\n    else if n==1 \n        return\
    \ Vector{Int64}(1)\n    else \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n\
    \        odd=odd+even\n        return odd\nend", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n / 2) + [n mod 2 + 1]\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a positive integer n and returns\
    \ the number of ways to arrange the n stones in a pile of n levels. \nFor example,\
    \ given n = 4, there are 4 ways to arrange the 4 stones in a pile:", "    if n==0\
    \ \n        return Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n\
    \    else \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n    \
    \    odd=odd+even\n        odd=odd[end-1]\n        even=even[end-1]\n        return\
    \ odd+even\nend\n</cell>\n<code language=julia-1.5>", "    if n==0 \n        return\
    \ Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n    else\
    \ \n        odd::Int64 = if n%2 == 1 \n            n \n        else \n       \
    \     n / 2\n        even::Int64 = if n%2 == 0 \n            n \n        else\
    \ \n            n / 2\n        pile = make_a_pile(odd)\n        push!(pile, even)\n\
    \        return pile\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a positive integer n and returns the number of ways to arrange the stones\
    \ in a pile of n levels. \nFor example, for n=3, there are 3 ways to arrange the\
    \ stones in a pile of 3 levels:", "    if n == 0 \n        return Vector{Int64}()\n\
    \    else if n % 2 == 0 \n        make_a_pile(n/2)\n    else \n        make_a_pile(n/2)\
    \ + [(n+1)/2]\nend\n</cell>\n<code language=julia-1.5>\nmake_a_pile(5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes in a list of integers and returns\
    \ the number of unique elements in the list.", "    if n==1 \n        return [1]\n\
    \    else \n        odd_nums = make_a_pile(n-1)\n        even_nums = make_a_pile(n-2)\n\
    \        pile = odd_nums + even_nums\n        return pile\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmake_a_pile(5)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes an integer n and returns a list of n integers starting from 1 to\
    \ n.", "    if n == 1 \n        return [1]\n    else \n        odd = n % 2\n \
    \       even = n / 2\n        pile = make_a_pile(even) + make_a_pile(odd)\n  \
    \      return pile\nend", "    if n==0 \n        return Vector{Int64}()\n    else\
    \ if n==1 \n        return Vector{Int64}(1)\n    else \n        odd=make_a_pile(n-1)\n\
    \        even=make_a_pile(n-2)\n        odd=odd+even\n        odd=odd[end-1]\n\
    \        even=even[end-1]\n        odd=odd+even\n        return odd\n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n / 2),\
    \ n mod 2) \n        push!(make_a_pile(n / 2), n mod 2) \n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n==0 \n        Vector{Int64}() \n    else\
    \ \n        make_a_pile(ceil(n/2))+[(n%2==0)?n:n+1]\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time make_a_pile(10)\n</cell>\n<code language=julia-1.5>\n\
    @time make_a_pile(100)\n</cell>\n<text>\nExercise: Write a function that takes\
    \ a positive integer n and returns the number of levels of stones needed to make\
    \ n stones.", "    if n==0 \n        return Vector{Int64}()\n    else if n==1\
    \ \n        return Vector{Int64}(1)\n    else \n        odd::Int64 = if n%2 ==\
    \ 1 \n            n \n        else \n            n \n        even::Int64 = if\
    \ n%2 == 0 \n            n \n        else \n            n \n        pile = make_a_pile(odd)\n\
    \        push!(pile, even)\n        return pile\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if n==0 \n        return Vector{Int64}()\n    else\
    \ \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n        odd=odd+even\n\
    \        odd=odd[end-1:end]\n        even=even[end-1:end]\n        return odd+even\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n == 0 \n        Vector{Int64}()\n\
    \    else\n        make_a_pile(n - 1) |> push!(make_a_pile(n / 2))\n        make_a_pile(n\
    \ / 2) |> push!(make_a_pile(n / 2))\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n==1 \n        return [1]\n    else \n        odds = make_a_pile(n-1)\n\
    \        evens = make_a_pile(n-2)\n        odds[end] = odds[end] + evens[end]\n\
    \        evens[end] = evens[end] + odds[end]\n        return odds + evens\nend\n\
    </cell>\n<code language=julia-1.0>\nmake_a_pile(4)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a positive integer n and returns the number of\
    \ ways to arrange the n stones in a pile of n levels. \nThe first level has n\
    \ stones.\nThe number of stones in the next level is:\n        - the next odd\
    \ number if n is odd.\n        - the next even number if n is even.\n    \nExamples:\n\
    \    >>> count_ways(3)\n    3\n    >>> count_ways(4)\n    6\n    >>> count_ways(5)\n\
    \    15\n    >>> count_ways(6)\n    42\n    >>> count_ways(7)\n    64\n    >>>\
    \ count_ways(8)\n    125\n    >>> count_ways(9)\n    258\n    >>> count_ways(10)\n\
    \    620\n    >>> count_ways(11)\n    976\n    >>> count_ways(12)\n    1584\n\
    \    >>> count_ways(13)\n    2416\n    >>> count_ways(14)\n    3432\n    >>> count_ways(15)\n\
    \    4128\n    >>> count_ways(16)\n    5760\n    >>> count_ways(17)\n    8128\n\
    \    >>> count_ways(18)\n    11440\n    >>> count_ways(19)\n    16256\n    >>>\
    \ count_ways(20)\n    23648\n    >>> count_ways(21)\n    30720\n    >>> count_ways(22)\n\
    \    39104\n    >>> count_ways(23)\n    47296\n    >>> count_ways(24)\n    56592\n\
    \    >>> count_ways(25)\n    74048\n    >>> count_ways(26)\n    92784\n    >>>\
    \ count_ways(27)\n    111312\n    >>> count_ways(28)\n    136320\n    >>> count_ways(29)\n\
    \    161536\n    >>> count_ways(30)\n    196656\n    >>> count_ways(31)\n    243840\n\
    \    >>> count_ways(32)\n    296080\n    >>> count_ways(33)\n    358512\n    >>>\
    \ count_ways(34)\n    437184\n    >>> count_ways(35)\n    522304\n    >>> count_ways(36)\n\
    \    595296", "    if n==0 \n        Vector{Int64}() \n    else \n        make_a_pile(n\
    \ - 1) \n        push!(make_a_pile(n div 2), n mod 2) \n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a positive integer n and returns\
    \ the number of ways to arrange the n stones in a pile.", "    if n == 0 \n  \
    \      Vector{Int64}()\n    else\n        if n % 2 == 1\n            make_a_pile(n\
    \ / 2)\n        else\n            make_a_pile(n / 2) + make_a_pile(n / 2)\n  \
    \      end\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if n == 0\
    \ \n        Vector{Int64}()\n    elseif n % 2 == 1\n        make_a_pile(n / 2)\n\
    \    else\n        make_a_pile(n / 2) + [n mod 2]\n    end\nend\n</cell>\n<code\
    \ language=julia-1.0>", "    if n==0 \n        Vector{Int64}() \n    else \n \
    \       make_a_pile(n div 2) + [n mod 2]\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n - 1)\
    \ \n        push!(make_a_pile(n / 2), n % 2 == 0 ? n : n + 1)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n / 2),\
    \ n % 2 == 0 ? n : n + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n % 2 == 0 \n        make_a_pile(n / 2)\n    else \n        make_a_pile(n\
    \ / 2) + [n mod 2]\nend\n</cell>\n<code language=julia-1.0>", "    if n==0 \n\
    \        Vector{Int64}() \n    else \n        make_a_pile(ceil(n/2))\n       \
    \ push!(make_a_pile(n%2), n%2)\n    end\nend", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n / 2),\
    \ n % 2 == 0 ? n : n + 1) \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes as input a positive integer n and returns the number of\
    \ ways to make a pile of n levels of stones.", "    if n==1 \n        return [1]\n\
    \    else if n==2 \n        return [1, 2]\n    else if n==3 \n        return [1,\
    \ 3, 5]\n    else if n==4 \n        return [1, 3, 5]\n    else if n==5 \n    \
    \    return [1, 3, 5, 7]\n    else if n==6 \n        return [1, 3, 5, 7, 9]\n\
    \    else if n==7 \n        return [1, 3, 5, 7, 9, 11]\n    else if n==8 \n  \
    \      return [1, 3, 5, 7, 9, 11, 13]\n    else if n==9 \n        return [1, 3,\
    \ 5, 7, 9, 11, 13, 15]\n    else if n==10 \n        return [1, 3, 5, 7, 9, 11,\
    \ 13, 15, 17]\n    else if n==11 \n        return [1, 3, 5, 7, 9, 11, 13, 15,\
    \ 17, 19]\n    else if n==12 \n        return [1, 3, 5, 7, 9, 11, 13, 15, 17,\
    \ 19, 21]\n    else if n==13 \n        return [1, 3, 5, 7, 9, 11, 13, 15, 17,\
    \ 19, 21, 23]\n    else if n==14 \n        return [1, 3, 5, 7, 9, 11, 13, 15,\
    \ 17, 19, 21, 23, 25]\n    else if n==15 \n        return [1, 3, 5, 7, 9, 11,\
    \ 13, 15, 17, 19, 21, 23, 25, 27]\n    else if n==16 \n        return [1, 3, 5,\
    \ 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]\n    else if n==17 \n        return\
    \ [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]\n    else if n==18\
    \ \n        return [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31,\
    \ 33]\n    else if n==19 \n        return [1, 3, 5, 7, 9, 11, 13, 15, 17, 19,\
    \ 21, 23, 25, 27, 29, 31, 33, 35]\n    else if n==20 \n        return [1, 3, 5,\
    \ 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37]\n    else if n==21\
    \ \n        return [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31,\
    \ 33, 35, 37, 39]\n    else if n==22 \n        return [1, 3, 5, 7, 9, 11, 13,\
    \ 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41]\n    else if n==23 \n\
    \        return [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33,\
    \ 35, 37, 39, 41, 43]\n    else if n==24 \n        return [1, 3, 5, 7, 9, 11,\
    \ 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45]\n    else\
    \ if n==25 \n        return [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, ",
  "    if n==0 \n        Vector{Int64}()\n    elseif n==1 \n        Vector{Int64}(1)\n\
    \    elseif n==2 \n        Vector{Int64}(2, 3)\n    elseif n==3 \n        Vector{Int64}(3,\
    \ 5, 7)\n    elseif n==4 \n        Vector{Int64}(7, 11, 13)\n    elseif n==5 \n\
    \        Vector{Int64}(13, 17, 21)\n    elseif n==6 \n        Vector{Int64}(17,\
    \ 23, 29)\n    elseif n==7 \n        Vector{Int64}(23, 31, 37)\n    elseif n==8\
    \ \n        Vector{Int64}(31, 37, 43)\n    elseif n==9 \n        Vector{Int64}(37,\
    \ 47, 53)\n    elseif n==10 \n        Vector{Int64}(47, 55, 63)\n    elseif n==11\
    \ \n        Vector{Int64}(55, 63, 71)\n    elseif n==12 \n        Vector{Int64}(63,\
    \ 71, 79)\n    elseif n==13 \n        Vector{Int64}(71, 79, 87)\n    elseif n==14\
    \ \n        Vector{Int64}(79, 87, 95)\n    elseif n==15 \n        Vector{Int64}(87,\
    \ 95, 103)\n    elseif n==16 \n        Vector{Int64}(95, 103, 111)\n    elseif\
    \ n==17 \n        Vector{Int64}(103, 111, 127)\n    elseif n==18 \n        Vector{Int64}(111,\
    \ 127, 135)\n    elseif n==19 \n        Vector{Int64}(127, 135, 143)\n    elseif\
    \ n==20 \n        Vector{Int64}(135, 143, 151)\n    elseif n==21 \n        Vector{Int64}(143,\
    \ 151, 159)\n    elseif n==22 \n        Vector{Int64}(151, 159, 167)\n    elseif\
    \ n==23 \n        Vector{Int64}(159, 167, 175)\n    elseif n==24 \n        Vector{Int64}(167,\
    \ 175, 183)\n    elseif n==25 \n        Vector{Int64}(175, 183, 191)\n    elseif\
    \ n==26 \n        Vector{Int64}(183, 191, 199)\n    elseif n==27 \n        Vector{Int64}(191,\
    \ 199, 207)\n    elseif n==28 \n        Vector{Int64}(199, 207, ", "    if n==0\
    \ \n        return Vector{Int64}() \n    else \n        pile = make_a_pile(n-1)\n\
    \        if mod(n,2)==0 \n            push!(pile,n+1)\n        else \n       \
    \     push!(pile,n-1)\n        end\n        return pile\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n == 0 \n        return Vector{Int64}()\n\
    \    else if n % 2 == 1 \n        return make_a_pile(n / 2) + [n / 2]\n    else\
    \ \n        return make_a_pile(n / 2) + [n / 2]\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert make_a_pile(3) == [3, 5, 7]\n</cell>\n<text>\nExercise: Write a function\
    \ that takes a positive integer n and returns the number of ways to make n piles\
    \ of consecutive levels of stones.", "    if n % 2 == 0 \n        odds = make_a_pile(n\
    \ / 2)\n        evens = make_a_pile(n / 2)\n        odds[end] = odds[end] + evens[end]\n\
    \        evens[end] = evens[end] - odds[end]\n        return odds\n    else\n\
    \        evens = make_a_pile(n / 2)\n        odds = make_a_pile(n / 2)\n     \
    \   evens[end] = evens[end] - odds[end]\n        odds[end] = odds[end] + evens[end]\n\
    \        return evens\n    end\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  if n==0 \n        Vector{Int64}() \n    else \n        make_a_pile(n-1)\n \
    \       push!(make_a_pile(n-1),n%2==0?n+1:n+2)\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a positive integer n and returns the number\
    \ of ways to arrange n stones in a pile of n levels. \nFor example, given n =\
    \ 4, there are 4 ways to arrange 4 stones in a pile of 3 levels:", "    if n==0\
    \ \n        Vector{Int64}()\n    else\n        make_a_pile(n-1)\n        push!(make_a_pile(n-1),\
    \ n%2==0 ? n+1 : n+2)\n    end\nend", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n div 2),\
    \ n mod 2) \n    end\nend", "    if n==0 \n        Vector{Int64}()\n    elseif\
    \ n==1 \n        Vector{Int64}(1)\n    elseif n==2 \n        Vector{Int64}(1,2)\n\
    \    elseif n==3 \n        Vector{Int64}(1,3,5)\n    elseif n==4 \n        Vector{Int64}(1,3,5,7)\n\
    \    elseif n==5 \n        Vector{Int64}(1,3,5,7,9)\n    elseif n==6 \n      \
    \  Vector{Int64}(1,3,5,7,9,11)\n    elseif n==7 \n        Vector{Int64}(1,3,5,7,9,11,13)\n\
    \    elseif n==8 \n        Vector{Int64}(1,3,5,7,9,11,13,15)\n    elseif n==9\
    \ \n        Vector{Int64}(1,3,5,7,9,11,13,15,17)\n    elseif n==10 \n        Vector{Int64}(1,3,5,7,9,11,13,15,17,19)\n\
    \    elseif n==11 \n        Vector{Int64}(1,3,5,7,9,11,13,15,17,19,21)\n    elseif\
    \ n==12 \n        Vector{Int64}(1,3,5,7,9,11,13,15,17,19,21,23)\n    elseif n==13\
    \ \n        Vector{Int64}(1,3,5,7,9,11,13,15,17,19,21,23,25)\n    elseif n==14\
    \ \n        Vector{Int64}(1,3,5,7,9,11,13,15,17,19,21,23,25,27)\n    elseif n==15\
    \ \n        Vector{Int64}(1,3,5,7,9,11,13,15,17,19,21,23,25,27,29)\n    elseif\
    \ n==16 \n        Vector{Int64}(1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31)\n\
    \    elseif n==17 \n        Vector{Int64}(1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33)\n\
    \    elseif n==18 \n        Vector{Int64}(1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35)\n\
    \    elseif n==19 \n        Vector{Int64}(1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37)\n\
    \    elseif n==20 \n        Vector{Int64}(1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39)\n\
    \    elseif n==21 \n        Vector{Int64}(1,3,5,7,9,11,13,15,17,", "    if n %\
    \ 2 == 0 \n        odds = make_a_pile(n / 2)\n        evens = make_a_pile(n /\
    \ 2)\n        odds[end] = odds[end] + evens[end]\n        return odds\n    else\n\
    \        evens = make_a_pile(n / 2)\n        odds = make_a_pile(n / 2)\n     \
    \   evens[end] = evens[end] + odds[end]\n        return evens\n    end\nend\n\
    </cell>\n<code language=julia-1.0>", "    if n==0 \n        Vector{Int64}() \n\
    \    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n mod 2), n\
    \ div 2) \n    end\nend\n</cell>\n<code language=julia-1.5>\n@time make_a_pile(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer n\
    \ and returns the number of ways to write n as a sum of two positive integers.\
    \ \nFor example, given n = 5, you should return 3.", "    if n == 0 \n       \
    \ return Vector{Int64}()\n    \n    pile = make_a_pile(n / 2)\n    pile = pile\
    \ + [n mod 2 ? n : n - 1]\n    \n    return pile\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 \n        Vector{Int64}()\n    else\n        make_a_pile(n - 1) |>\
    \ push!(make_a_pile(n / 2)) |> push!(make_a_pile(n / 2))\n    end\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a positive integer n and returns\
    \ the number of ways to arrange the n stones in a pile of n levels of stones.",
  "    if n == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n / 2)\
    \ ++ [n mod 2] \n    end\nend\n</cell>\n<code language=julia-1.5>", "    if n==0\
    \ \n        return Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n\
    \    else if n%2==0 \n        return make_a_pile(n-1)+make_a_pile(n-2)\n    else\
    \ \n        return make_a_pile(n-1)+make_a_pile(n-2)+make_a_pile(n-3)\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n==0 \n        return Vector{Int64}()\n  \
    \  else if n==1 \n        return [1]\n    else \n        odd=make_a_pile(n-1)\n\
    \        even=make_a_pile(n-2)\n        odd=odd+even\n        odd=odd[end-1]\n\
    \        even=even[end-1]\n        odd=odd+even\n        odd=odd[end-1]\n    \
    \    even=even[end-1]\n        odd=odd+even\n        odd=odd[end-1]\n        even=even[end-1]\n\
    \        odd=odd+even\n        odd=odd[end-1]\n        even=even[end-1]\n    \
    \    odd=odd+even\n        odd=odd[end-1]\n        even=even[end-1]\n        odd=odd+even\n\
    \        odd=odd[end-1]\n        even=even[end-1]\n        odd=odd+even\n    \
    \    odd=odd[end-1]\n        even=even[end-1]\n        odd=odd+even\n        odd=odd[end-1]\n\
    \        even=even[end-1]\n        odd=odd+even\n        odd=odd[end-1]\n    \
    \    even=even[end-1]\n        odd=odd+even\n        odd=odd[end-1]\n        even=even[end-1]\n\
    \        odd=odd+even\n        odd=odd[end-1]\n        even=even[end-1]\n    \
    \    odd=odd+even\n        odd=odd[end-1]\n        even=even[end-1]\n        odd=odd+even\n\
    \        odd=odd[end-1]\n        even=even[end-1]\n        odd=odd+even\n    \
    \    odd=odd[end-1]\n        even=even[end-1]\n        odd=odd+even\n        odd=odd[end-1]\n\
    \        even=even[end-1]\n        odd=odd+even\n        odd=odd[end-1]\n    \
    \    even=even[end-1]\n        odd=odd+even\n        odd=odd[end-1]\n        even=even[end-1]\n\
    \        odd=odd+even\n        odd=odd[end-1]\n        even=even[end-1]\n    \
    \    odd=odd+even\n        odd=odd[end-1]\n        even=even[end-1]\n        odd=odd+even\n\
    \        odd=odd[end-1]\n        even=even[end-1]\n        odd=odd+", "    if\
    \ n == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n - 1) \n\
    \        push!(make_a_pile(n mod 2), n div 2) \n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a positive integer n and returns the number\
    \ of ways to arrange the stones in a pile of n levels. \nFor example, given n=3,\
    \ there are three ways to arrange the stones in a pile of 3 levels:", "    if\
    \ n==0 \n        return Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n\
    \    else \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n    \
    \    odd=odd+even\n        return odd\n    end\nend\n</cell>\n<code language=julia-1.0>",
  "    if n == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n - 1)\
    \ \n        push!(make_a_pile(n / 2), n % 2 == 0 ? n : n + 1) \n    end\nend\n\
    </cell>\n<code language=julia-1.0>", "    if n == 0 \n        return Vector{Int64}()\
    \ \n    else \n        pile = make_a_pile(n div 2) \n        push!(pile, n mod\
    \ 2) \n        return pile \nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ n == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n - 1) \n\
    \        push!(make_a_pile(n div 2), n mod 2) \n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a positive integer n and returns the number\
    \ of ways to arrange the n stones in a pile of n levels. \nFor example, given\
    \ n = 4, there are 4 ways to arrange the 4 stones in a pile:", "    if n == 0\
    \ \n        Vector{Int64}() \n    else \n        make_a_pile(n - 1) \n       \
    \ push!(make_a_pile(n / 2), n % 2 == 0 ? n : n + 1) \n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a positive integer n and returns\
    \ the number of levels of stones needed to make n stones.", "    if n==1 \n  \
    \      [1]\n    else\n        make_a_pile(n-1)+[(n%2==0)?(n-1):(n+1)]\n    end\n\
    end\n</cell>\n<code language=julia-1.0>", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n / 2),\
    \ n % 2 == 0 ? n : n + 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    make_a_pile(3)\n</cell>\n<text>\nExercise 2\nWrite a function make_a_pile(n::Int64)\
    \ which returns a list of n levels of piles.", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n mod 2),\
    \ n div 2) \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a positive integer n and returns the number of ways to arrange the stones\
    \ in a pile of n stones.", "    if n==0 \n        return Vector{Int64}()\n   \
    \ else if n==1 \n        return Vector{Int64}(1)\n    else \n        odd::Int64\
    \ = if n%2==1 \n            n \n        else \n            n-1\n        even::Int64\
    \ = if n%2==0 \n            n \n        else \n            n-1\n        \n   \
    \     pile = make_a_pile(odd)\n        push!(pile, even)\n        return pile\n\
    end\n</cell>\n<code language=julia-1.3>", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n / 2),\
    \ n % 2 == 0 ? n : n - 1) \n    end\nend\n</cell>\n<text>\nExercise\nWrite a function\
    \ that takes an integer n and returns the number of levels of stones needed to\
    \ make n stones.", "    if n==1 \n        return [1]\n    else \n        odd=make_a_pile(n-1)\n\
    \        even=make_a_pile(n-2)\n        odd=odd+even\n        odd=odd[end-1]\n\
    \        even=even[end-1]\n        return odd+even\nend\n</cell>\n<code language=julia-1.0>",
  "    if n % 2 == 1 \n        make_a_pile(n / 2)\n    else\n        make_a_pile((n\
    \ / 2) + 1)\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if n == 1\
    \ \n        return [1]\n    else \n        evens = make_a_pile(n / 2)\n      \
    \  odds = make_a_pile(n / 2)\n        evens = [x + y for x, y in zip(evens, odds)]\n\
    \        return evens + odds\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ make_a_pile(3) == [3, 5, 7]\n</cell>\n<text>\nExercise: Write a function that\
    \ takes a positive integer n and returns the number of ways to make a pile of\
    \ n levels of stones.", "    if n==0 \n        Vector{Int64}()\n    elseif n==1\
    \ \n        Vector{Int64}(1)\n    elseif n%2==0 \n        make_a_pile(n-1)\n \
    \   else\n        make_a_pile(n-1)+make_a_pile(n-2)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if n==1 \n        return [1]\n    else \n       \
    \ odd::Int64 = if n%2 == 1 \n            n \n        else \n            n / 2\n\
    \        even::Int64 = if n%2 == 0 \n            n \n        else \n         \
    \   n / 2\n        \n        pile = make_a_pile(odd)\n        push!(pile, even)\n\
    \        return pile\nend", "    if n % 2 == 0 \n        make_a_pile(n/2)\n  \
    \  else\n        make_a_pile(n/2) + [(n+1)/2]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time make_a_pile(100)\n</cell>\n<text>\nExercise: Write a function that takes\
    \ a positive integer n and returns the number of ways to make n piles of stones.",
  "    if n == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n - 1)\
    \ \n        push!(make_a_pile(n / 2), n % 2 == 0 ? n : n - 1) \n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nmake_a_pile(5)\n</cell>\n<text>\nExercise\n\
    Write a function that takes an integer n and returns the number of stones in the\
    \ pile of n levels of stones.", "    if n == 0 \n        Vector{Int64}() \n  \
    \  else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n / 2), n % 2\
    \ == 0 ? n : n + 1)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a positive integer n and returns the number of levels \nof stones\
    \ needed to make n stones.", "    if n == 0 \n        Vector{Int64}()\n    else\
    \ \n        if n % 2 == 0 \n            make_a_pile(n / 2)\n        else \n  \
    \          make_a_pile(n / 2) + make_a_pile(n / 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    make_a_pile(4)\n</cell>\n<code language=julia-1.5>", "    if n==0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(ceil(n/2))\n        push!(make_a_pile(n-2),n%2==0\
    \ ? n+1 : n) \n    end\nend\n</cell>\n<code language=julia-1.5>\nmake_a_pile(4)\n\
    </cell>\n<code language=julia-1.5>", "    if n==0 \n        Vector{Int64}() \n\
    \    else \n        make_a_pile(n div 2) + [n mod 2] \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmake_a_pile(10)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes in a positive integer n and returns the number of ways\
    \ to arrange the n stones in a pile.", "    if n % 2 == 0 \n        make_a_pile(n/2)\n\
    \    else\n        make_a_pile(n/2) + [(n+1)/2]\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if n % 2 == 0\n        odds = n\n        evens =\
    \ n - odds\n    else\n        odds = n - 1\n        evens = n\n    end\n    pile\
    \ = Vector{Int64}(undef, odds + evens)\n    pile[1] = odds\n    pile[evens] =\
    \ evens\n    return pile\nend\n</cell>\n<code language=julia-1.5>\nmake_a_pile(4)\n\
    </cell>\n<text>\nExercise 2\nWrite a function make_a_pile_from_list(l::Vector{Int64})::Vector{Int64}\
    \ that takes a list of integers and returns a pile of those integers.", "    if\
    \ n == 0 \n        Vector{Int64}()\n    else\n        make_a_pile(n - 1) |> push!(make_a_pile(n\
    \ % 2 == 0 ? n : n / 2)) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    make_a_pile(4)\n</cell>\n<text>\nExercise 2\nWrite a function that takes in a\
    \ positive integer n and returns the number of ways to make n piles of stones.",
  "    if n % 2 == 0 \n        odds = n\n        evens = n - odds\n    else \n   \
    \     odds = n - 1\n        evens = n\n    return odds + evens\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n==1 \n        return [1]\n    else \n   \
    \     odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n        odd=odd+[odd[n-1]]\n\
    \        even=even+[even[n-2]]\n        return odd+even\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n==1 \n        return [1]\n    else \n   \
    \     odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n        odd=odd+even\n\
    \        return odd\nend\n</cell>\n<code language=julia-1.5>", "    if n==0 \n\
    \        Vector{Int64}() \n    else \n        make_a_pile(ceil(n/2)) |> push!(make_a_pile(n-floor(n/2)))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmake_a_pile(4)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a positive integer n and returns the number\
    \ of ways to arrange the n stones in a pile.", "    if n == 0 \n        Vector{Int64}()\n\
    \    else\n        make_a_pile(n - 1) |> push!(make_a_pile(n / 2)) |> push!(make_a_pile(n\
    \ / 2)) |> push!(make_a_pile(n / 2))\n    end\nend", "    if n==0 \n        return\
    \ Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n    else\
    \ \n        odd::Int64 = if n%2 == 1 \n            n \n        else \n       \
    \     n \n        even::Int64 = if n%2 == 0 \n            n \n        else \n\
    \            n \n        pile = make_a_pile(odd) + make_a_pile(even)\n       \
    \ return pile\nend\n</cell>\n<code language=julia-1.5>", "    if n==0 \n     \
    \   Vector{Int64}() \n    else \n        make_a_pile(n div 2) + [n mod 2]\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\n@assert make_a_pile(3) == [3,\
    \ 5, 7]\n</cell>\n<code language=julia-1.5>\n@assert make_a_pile(4) == [3, 5]\n\
    </cell>\n<code language=julia-1.5>\n@assert make_a_pile(5) == [3, 5, 7]\n</cell>\n\
    <code language=julia-1.5>\n@assert make_a_pile(6) == [3, 5]\n</cell>\n<code language=julia-1.5>\n\
    @assert make_a_pile(7) == [3, 5, 7]\n</cell>\n<code language=julia-1.5>\n@assert\
    \ make_a_pile(8) == [3, 5]\n</cell>\n<code language=julia-1.5>\n@assert make_a_pile(9)\
    \ == [3, 5, 7]\n</cell>\n<code language=julia-1.5>\n@assert make_a_pile(10) ==\
    \ [3, 5]\n</cell>\n<code language=julia-1.5>\n@assert make_a_pile(11) == [3, 5,\
    \ 7]\n</cell>\n<code language=julia-1.5>\n@assert make_a_pile(12) == [3, 5]\n\
    </cell>\n<code language=julia-1.5>\n@assert make_a_pile(13) == [3, 5, 7]\n</cell>\n\
    <code language=julia-1.5>\n@assert make_a_pile(14) == [3, 5]\n</cell>\n<code language=julia-1.5>\n\
    @assert make_a_pile(15) == [3, 5, 7]\n</cell>\n<code language=julia-1.5>\n@assert\
    \ make_a_pile(16) == [3, 5]\n</cell>\n<code language=julia-1.5>\n@assert make_a_pile(17)\
    \ == [3, 5, 7]\n</cell>\n<code language=julia-1.5>\n@assert make_a_pile(18) ==\
    \ [3, 5]\n</cell>\n<code language=julia-1.5>\n@assert make_a_pile(19) == [3, 5,\
    \ 7]\n</cell>\n<code language=julia-1.5>\n@assert make_a_pile(20) == [3, 5]\n\
    </cell>\n<code language=julia-1.5>\n@assert make_a_pile(21) == [3, 5, 7]\n</cell>\n\
    <code language=julia-1.5>\n@assert make_a_pile(22) == [3, 5]\n</cell>\n<code language=julia-1.5>\n\
    @assert make_a_pile(23) == [3, 5, 7]\n</cell>\n<code language=julia-1.5>\n@assert\
    \ make_a_pile(24", "    if n == 0 \n        Vector{Int64}() \n    else \n    \
    \    make_a_pile(n - 1) \n        push!(make_a_pile(n / 2), n % 2 == 0 ? n : n\
    \ / 2) \n    end\nend\n</cell>\n<code language=julia-1.0>", "    if n==0 \n  \
    \      return Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n\
    \    else \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n    \
    \    odd=odd+even\n        return odd\nend", "    if n==0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(ceil(n/2)).+(ceil(n/2)).*(ceil(n/2))\n    end\n\
    end\n</cell>\n<code language=julia-1.3>", "    if n==1 \n        return [1]\n\
    \    else \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n    \
    \    odd=odd+even\n        odd=odd[end-1]\n        even=even[end-1]\n        odd=odd+even\n\
    \        odd=odd[end-1]\n        even=even[end-1]\n        odd=odd+even\n    \
    \    odd=odd[end-1]\n        even=even[end-1]\n        odd=odd+even\n        odd=odd[end-1]\n\
    \        even=even[end-1]\n        odd=odd+even\n        odd=odd[end-1]\n    \
    \    even=even[end-1]\n        odd=odd+even\n        odd=odd[end-1]\n        even=even[end-1]\n\
    \        odd=odd+even\n        odd=odd[end-1]\n        even=even[end-1]\n    \
    \    odd=odd+even\n        odd=odd[end-1]\n        even=even[end-1]\n        odd=odd+even\n\
    \        odd=odd[end-1]\n        even=even[end-1]\n        odd=odd+even\n    \
    \    odd=odd[end-1]\n        even=even[end-1]\n        odd=odd+even\n        odd=odd[end-1]\n\
    \        even=even[end-1]\n        odd=odd+even\n        odd=odd[end-1]\n    \
    \    even=even[end-1]\n        odd=odd+even\n        odd=odd[end-1]\n        even=even[end-1]\n\
    \        odd=odd+even\n        odd=odd[end-1]\n        even=even[end-1]\n    \
    \    odd=odd+even\n        odd=odd[end-1]\n        even=even[end-1]\n        odd=odd+even\n\
    \        odd=odd[end-1]\n        even=even[end-1]\n        odd=odd+even\n    \
    \    odd=odd[end-1]\n        even=even[end-1]\n        odd=odd+even\n        odd=odd[end-1]\n\
    \        even=even[end-1]\n        odd=odd+even\n        odd=odd[end-1]\n    \
    \    even=even[end-1]\n        odd=odd+even\n        odd=odd[end-1]\n        even=even[end-1]\n\
    \        odd=odd+even\n        odd=odd[end-1]\n        even=even[", "    if n==0\
    \ \n        Vector{Int64}()\n    else\n        make_a_pile(ceil(n/2)).+(n % 2\
    \ == 0 ? 1 : 0)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert make_a_pile(3)\
    \ == [3, 5, 7]\n@assert make_a_pile(5) == [5, 7, 9, 11, 13]\n@assert make_a_pile(10)\
    \ == [10, 15, 20, 25, 30]\n@assert make_a_pile(11) == [11, 13, 17, 21, 27, 33,\
    \ 37, 41, 45]\n@assert make_a_pile(12) == [12, 14, 16, 18, 22, 28, 34, 38, 42,\
    \ 46, 50]\n@assert make_a_pile(13) == [13, 15, 17, 19, 23, 29, 35, 39, 43, 45,\
    \ 51, 57]\n@assert make_a_pile(14) == [14, 16, 18, 20, 24, 30, 36, 40, 44, 48,\
    \ 52, 56, 60]\n@assert make_a_pile(15) == [15, 17, 19, 21, 25, 31, 37, 43, 47,\
    \ 53, 59, 63, 67]\n@assert make_a_pile(16) == [16, 18, 20, 22, 26, 32, 38, 44,\
    \ 48, 52, 56, 60, 64, 68]\n@assert make_a_pile(17) == [17, 19, 21, 24, 28, 34,\
    \ 40, 46, 52, 56, 60, 64, 68, 72]\n@assert make_a_pile(18) == [18, 20, 22, 26,\
    \ 30, 36, 42, 48, 56, 60, 64, 68, 72, 76]\n@assert make_a_pile(19) == [19, 21,\
    \ 24, 28, 32, 40, 44, 52, 56, 60, 64, 68, 72, 76, 80]\n@assert make_a_pile(20)\
    \ == [20, 22, 26, 30, 34, 42, 48, 56, 60, 64, 68, 72, 76, 80, 84]\n@assert make_a_pile(21)\
    \ == [21, 24, 28, 32, 36, 44, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88]\n@assert\
    \ make_a_pile(22) == [22, 26, 30, 34, 38, 46, 52, 56, 60, 64, 68, 72, 76, 80,\
    \ 84, 88, 92]\n@assert make_a_pile(23) == [23, 28, 32, 36, 42, 48, 56, 60, 64,\
    \ 68, 72, 76, 80, 84, 88, 92, 96]\n@assert make_a_pile(24) == [24, 28, 32, 36,\
    \ 44, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100]\n@assert make_a_pile(25)\
    \ == [25, 30, 34, 38, 46, 56, 60, 64, 68", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n / 2),\
    \ n % 2 == 0 ? 1 : 2) \n    end\nend\n</cell>\n<code language=julia-1.5>", " \
    \   if n == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n - 1)\
    \ \n        push!(make_a_pile(n / 2), n % 2 == 0 ? n : n - 1) \n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nmake_a_pile(4)\n</cell>\n<text>\nExercise\n\
    Write a function that takes an integer n and returns the number of stones in the\
    \ pile of n levels of stones.", "    if n == 0 \n        Vector{Int64}() \n  \
    \  else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n / 2), n % 2\
    \ == 0 ? n : n + 1) \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a positive integer n and returns the number of ways to arrange the\
    \ n stones in a pile.", "    if n==0 \n        Vector{Int64}() \n    else \n \
    \       make_a_pile(n div 2) + [n mod 2] \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert make_a_pile(3) == [3, 5, 7]\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a positive integer n and returns the number of ways to arrange the\
    \ n stones in a pile of n levels of stones.", "    if n==1 \n        return [1]\n\
    \    else \n        odd = n%2\n        even = n%2\n        pile = make_a_pile(odd)\n\
    \        push!(pile,odd)\n        push!(pile,even)\n        return pile\n    end\n\
    end\n</cell>\n<code language=julia-1.0>", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n - 1) \n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n==0 \n        Vector{Int64}()\n    else\n        make_a_pile(n-1)\n   \
    \     push!(make_a_pile(n-1),n%2==0 ? n+1 : n-1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmake_a_pile(4)\n</cell>\n<text>\nExercise\nWrite a function\
    \ that takes an integer n and returns the number of levels required to make a\
    \ pile of n levels of stones.", "    if n==0 \n        Vector{Int64}()\n    else\n\
    \        make_a_pile(n-1)\n        push!(make_a_pile(n-1), n%2==0 ? n+1 : n+2)\n\
    \    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes a positive\
    \ integer n and returns the number of ways to arrange the n stones in a pile.\
    \ For example, given n = 4, there are 4 ways to arrange the 4 stones in a pile:",
  "    if n == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n - 1)\
    \ \n        push!(make_a_pile(n / 2), n % 2 == 0 ? n : n + 1) \n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nmake_a_pile(3)\n</cell>\n<code language=julia-1.5>",
  "    if n==0 \n        Vector{Int64}() \n    else \n        make_a_pile(n div 2)\
    \ ++ make_a_pile(n div 2) ++ make_a_pile(n div 2) \n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a positive integer n and returns the number\
    \ of ways to arrange the n stones in a pile.", "    if n == 0 \n        Vector{Int64}()\n\
    \    else\n        if n % 2 == 0 \n            make_a_pile(n / 2)\n        else\n\
    \            make_a_pile(n / 2) + make_a_pile(n / 2)\n        end\n    end\nend\n\
    </cell>\n<code language=julia-1.5>", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n div 2),\
    \ n mod 2) \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a positive integer n and returns the number of levels of stones needed\
    \ to form a pile of n stones.", "    if n % 2 == 0 \n        odds = make_a_pile(n\
    \ / 2)\n        evens = make_a_pile(n / 2)\n        odds[end] = odds[end] + evens[end]\n\
    \        evens[end] = evens[end] + odds[end]\n        return odds\n    else\n\
    \        evens = make_a_pile(n / 2)\n        odds = make_a_pile(n / 2)\n     \
    \   evens[end] = evens[end] + odds[end]\n        odds[end] = odds[end] + evens[end]\n\
    \        return evens\n    end\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  if n==0 \n        Vector{Int64}() \n    else \n        make_a_pile(ceil(n/2))\n\
    \        push!(make_a_pile(n%2), n%2)\n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes an integer n and returns the number of ways to\
    \ make piles of n levels. \nFor example, make_piles(3) should return [3, 5, 7].",
  "    if n == 0 \n        Vector{Int64}()\n    elseif n % 2 == 1\n        make_a_pile(n\
    \ / 2)\n    else\n        make_a_pile(n / 2) + make_a_pile(n / 2)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>", "    if n==0 \n        Vector{Int64}() \n\
    \    else \n        make_a_pile(n div 2) + [n mod 2] \n    end\nend\n</cell>\n\
    <code language=julia-1.0>", "    if n % 2 == 1 \n        odds = make_a_pile(n\
    \ / 2)\n        evens = make_a_pile(n / 2)\n        odds[end] = odds[end] + evens[end]\n\
    \        evens[end] = evens[end] + odds[end]\n        return odds\n    else\n\
    \        evens = make_a_pile(n / 2)\n        odds = make_a_pile(n / 2)\n     \
    \   evens[end] = evens[end] + odds[end]\n        odds[end] = odds[end] + evens[end]\n\
    \        return evens\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ make_a_pile(3) == [3, 5, 7]\n@assert make_a_pile(5) == [3, 5, 7, 9, 11]\n@assert\
    \ make_a_pile(7) == [3, 5, 7, 9, 11, 13, 15]\n@assert make_a_pile(10) == [3, 5,\
    \ 7, 9, 11, 13, 15, 17, 19]\n@assert make_a_pile(11) == [3, 5, 7, 9, 11, 13, 15,\
    \ 17, 19, 21, 23]\n@assert make_a_pile(13) == [3, 5, 7, 9, 11, 13, 15, 17, 19,\
    \ 21, 23, 25, 27]\n@assert make_a_pile(15) == [3, 5, 7, 9, 11, 13, 15, 17, 19,\
    \ 21, 23, 25, 27, 29, 31]\n@assert make_a_pile(17) == [3, 5, 7, 9, 11, 13, 15,\
    \ 17, 19, 21, 23, 25, 27, 29, 31, 33, 35]\n@assert make_a_pile(19) == [3, 5, 7,\
    \ 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]\n@assert make_a_pile(21)\
    \ == [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39,\
    \ 41, 43]\n@assert make_a_pile(23) == [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23,\
    \ 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47]\n@assert make_a_pile(25) ==\
    \ [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41,\
    \ 43, 45, 47, 49, 51]\n@assert make_a_pile(27) == [3, 5, 7, 9, 11, 13, 15, 17,\
    \ 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55]\n\
    @assert make_a_pile(29) == [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29,\
    \ 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57]\n@assert make_a_pile(31)\
    \ == [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, ", "    if n == 0 \n        Vector{Int64}()\n\
    \    else\n        make_a_pile(n - 1) |> push!(make_a_pile(n / 2)) |> push!(make_a_pile(n\
    \ / 2)) \n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a positive integer n and returns the number of ways to make n piles.", "   \
    \ if n == 1 \n        return [1]\n    else \n        odd = n % 2 \n        even\
    \ = n / 2 \n        levels = make_a_pile(even)\n        levels[odd] = levels[odd]\
    \ + levels[even]\n        return levels\nend\n</cell>\n<code language=julia-1.5>\n\
    make_a_pile(4)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a positive\
    \ integer n and returns the number of ways to arrange the n stones in a pile.",
  "    if n==1 \n        return [1]\n    else \n        odd=make_a_pile(n-1)\n   \
    \     even=make_a_pile(n-2)\n        odd=odd+even\n        odd=odd[end-1]\n  \
    \      even=even[end-1]\n        odd=odd+even\n        return odd\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n==0 \n        Vector{Int64}() \n    else\
    \ \n        make_a_pile(ceil(n/2))\n        push!(make_a_pile(n-2), n%2 == 0 ?\
    \ ceil(n/2) : floor(n/2))\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n==0 \n        Vector{Int64}() \n    else \n        make_a_pile(n-1)\n \
    \       push!(make_a_pile(n-1), n%2==0 ? n : n+1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if n == 0 \n        Vector{Int64}() \n    else \n\
    \        make_a_pile(n - 1) \n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 \n        return Vector{Int64}()\n    \n    if n % 2 == 0 \n    \
    \    return make_a_pile(n / 2) + [n / 2]\n    else \n        return make_a_pile(n\
    \ / 2) + [n / 2 + 1]\nend", "    if n == 0 \n        Vector{Int64}() \n    else\
    \ \n        make_a_pile(n - 1) \n        push!(make_a_pile(n div 2), n mod 2)\
    \ \n    end\nend", "    if n == 0 \n        Vector{Int64}() \n    else \n    \
    \    make_a_pile(n - 1) \n        push!(make_a_pile(n / 2), n % 2 == 0 ? n : n\
    \ + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert make_a_pile(3)\
    \ == [3, 5, 7]\n</cell>\n<text>\nExercise 2\nWrite a function called make_a_pile_from_list\
    \ that takes a list of integers and returns a list of integers representing the\
    \ number of stones in each level of the pile.", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n mod 2),\
    \ n mod 2) \n        push!(make_a_pile(n div 2), n div 2) \n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n==0 \n        return Vector{Int64}()\n  \
    \  else if n==1 \n        return Vector{Int64}(1)\n    else if n%2==0 \n     \
    \   return make_a_pile(n/2)\n    else \n        return make_a_pile(n/2) + make_a_pile(n/2)\n\
    end", "    if n == 0 \n        Vector{Int64}()\n    elseif n % 2 == 0 \n     \
    \   make_a_pile(n / 2)\n    else\n        make_a_pile(n / 2) + make_a_pile((n\
    \ / 2) + 1)\n    end\nend\n</cell>\n<code language=julia-1.3>\nmake_a_pile(4)\n\
    </cell>\n<code language=julia-1.3>", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n / 2),\
    \ n % 2 == 0 ? n : n - 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert make_a_pile(3) == [3, 5, 7]\n</cell>\n<code language=julia-1.5>", "  \
    \  if n == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n - 1)\
    \ \n        push!(make_a_pile(n / 2), n mod 2) \n        push!(make_a_pile(n /\
    \ 2), n mod 2) \n    end\nend\n</cell>\n<text>\nExercise: Write a function that\
    \ takes an integer n and returns the number of ways to make n piles of stones.",
  "    if n==0 \n        Vector{Int64}() \n    else \n        make_a_pile(n-1)\n \
    \       push!(make_a_pile(n-1), n%2 == 0 ? n : n+1)\n    end\nend", "    if n\
    \ == 0 \n        return Vector{Int64}()\n    \n    pile = make_a_pile(n / 2)\n\
    \    pile = pile + [n mod 2]\n    \n    return pile\nend", "    if n==0 \n   \
    \     Vector{Int64}() \n    else \n        make_a_pile(n-1)\n        push!(make_a_pile(n-1),\
    \ n%2==0 ? n : n+1)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a positive integer n and returns the number of ways to arrange n\
    \ stones in a pile.", "    if n == 0 \n        Vector{Int64}()\n    elseif n %\
    \ 2 == 0 \n        make_a_pile(n / 2)\n    else\n        make_a_pile(n / 2) +\
    \ [n mod 2]\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if n == 0\
    \ \n        return Vector{Int64}()\n    else if n % 2 == 0 \n        return make_a_pile(n\
    \ / 2) + [n / 2]\n    else \n        return make_a_pile(n / 2) + [n / 2 + 1]\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n / 2),\
    \ n % 2 == 0 ? n : n + 1) \n    end\nend\n</cell>\n<text>\nExercise 4\nWrite a\
    \ function that takes in a positive integer n and returns the number of ways to\
    \ arrange n items in n piles.", "    if n == 0 \n        return Vector{Int64}()\n\
    \    else if n % 2 == 0 \n        return make_a_pile(n / 2) + [n / 2]\n    else\
    \ \n        return make_a_pile(n / 2) + [n / 2 + 1]\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n - 1)\
    \ \n        push!(make_a_pile(n / 2), n % 2 == 0 ? n : n + 1)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n / 2),\
    \ n % 2 == 0 ? n : n + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert make_a_pile(3) == [3, 5, 7]\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a positive integer n and returns the number of ways to arrange the\
    \ n stones in a pile.", "    if n == 0 \n        Vector{Int64}() \n    else \n\
    \        make_a_pile(n - 1) \n        push!(make_a_pile(n / 2), n % 2 == 0 ? n\
    \ : n + 1)\n    end\nend\n</cell>\n<code language=julia-1.4>", "    if n==0 \n\
    \        Vector{Int64}() \n    else \n        make_a_pile(ceil(n/2))+[ceil(n%2)]\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\n@time make_a_pile(100)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes in a positive integer n and returns\
    \ the number of ways to make n piles of consecutive stones.", "    if n==0 \n\
    \        return Vector{Int64}() \n    else \n        pile = make_a_pile(n-1) \n\
    \        if n%2 == 1 \n            push!(pile, n) \n        else \n          \
    \  push!(pile, 2*n) \n        end\n        return pile \n    end\nend\n</cell>\n\
    <code language=julia-1.0>", "    if n==0 \n        Vector{Int64}() \n    else\
    \ \n        make_a_pile(ceil(n/2)) |> push!(make_a_pile(n-floor(n/2))) \n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n - 1) \n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n - 1)\
    \ \n        push!(make_a_pile(n / 2), n % 2 == 0 ? n : n + 1) \n    end\nend\n\
    </cell>\n<code language=julia-1.5>", "    if n==0 \n        Vector{Int64}() \n\
    \    else \n        make_a_pile(n div 2) + [n mod 2] \n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n==1 \n        return [1]\n    else \n   \
    \     odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n        odd=odd+even\n\
    \        odd=odd[end-1]\n        even=even[end-1]\n        odd=odd+even\n    \
    \    return odd\nend", "    if n % 2 == 0 \n        make_a_pile(n/2)\n    else\n\
    \        make_a_pile(n/2) + [(n+1)/2]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert make_a_pile(3) == [3, 5, 7]\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a positive integer n and returns the number of ways to arrange the\
    \ n stones in a pile.", "    if n==1 \n        return [1]\n    else \n       \
    \ odd_nums = make_a_pile(n / 2)\n        even_nums = make_a_pile(n / 2)\n    \
    \    \n        if n % 2 == 0 \n            even_nums = [even_nums[end] + even_nums[end-1]\
    \ for end in 1:length(even_nums)]\n        else \n            odd_nums = [odd_nums[end]\
    \ + odd_nums[end-1] for end in 1:length(odd_nums)]\n            \n        return\
    \ odd_nums + even_nums\nend\n</cell>\n<code language=julia-1.5>\nmake_a_pile(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer n\
    \ and returns the number of ways to arrange the n stones in a pile.", "    if\
    \ n==0 \n        Vector{Int64}() \n    else \n        make_a_pile(n-1)\n     \
    \   push!(make_a_pile(n-1), n%2==0 ? n : n+1)\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes in a list of integers and returns the\
    \ number of unique elements in the list.", "    if n==0 \n        return Vector{Int64}()\n\
    \    else if n==1 \n        return Vector{Int64}(1)\n    else \n        odd=make_a_pile(n-1)\n\
    \        even=make_a_pile(n-2)\n        odd=odd+even\n        odd=odd[end-1]\n\
    \        even=even[end-1]\n        odd=odd+even\n        odd=odd[end-1]\n    \
    \    even=even[end-1]\n        odd=odd+even\n        odd=odd[end-1]\n        even=even[end-1]\n\
    \        odd=odd+even\n        odd=odd[end-1]\n        even=even[end-1]\n    \
    \    odd=odd+even\n        odd=odd[end-1]\n        even=even[end-1]\n        odd=odd+even\n\
    \        odd=odd[end-1]\n        even=even[end-1]\n        odd=odd+even\n    \
    \    odd=odd[end-1]\n        even=even[end-1]\n        odd=odd+even\n        odd=odd[end-1]\n\
    \        even=even[end-1]\n        odd=odd+even\n        odd=odd[end-1]\n    \
    \    even=even[end-1]\n        odd=odd+even\n        odd=odd[end-1]\n        even=even[end-1]\n\
    \        odd=odd+even\n        odd=odd[end-1]\n        even=even[end-1]\n    \
    \    odd=odd+even\n        odd=odd[end-1]\n        even=even[end-1]\n        odd=odd+even\n\
    \        odd=odd[end-1]\n        even=even[end-1]\n        odd=odd+even\n    \
    \    odd=odd[end-1]\n        even=even[end-1]\n        odd=odd+even\n        odd=odd[end-1]\n\
    \        even=even[end-1]\n        odd=odd+even\n        odd=odd[end-1]\n    \
    \    even=even[end-1]\n        odd=odd+even\n        odd=odd[end-1]\n        even=even[end-1]\n\
    \        odd=odd+even\n        odd=odd[end-1]\n        even=even[end-1]\n    \
    \    odd=odd+even\n        odd=odd[end-1]\n        even=even[end-1]\n        odd=odd+even\n\
    \        odd=odd[end-1]\n        even=even[end-1]\n", "    if n % 2 == 0 \n  \
    \      make_a_pile(n/2)\n    else \n        make_a_pile(n/2) + [(n+1)/2]\nend\n\
    </cell>\n<code language=julia-1.5>", "    if n==0 \n        Vector{Int64}()\n\
    \    elseif n==1 \n        Vector{Int64}(1)\n    elseif n==2 \n        Vector{Int64}(1,\
    \ 2)\n    elseif n==3 \n        Vector{Int64}(1, 3, 5)\n    elseif n==4 \n   \
    \     Vector{Int64}(1, 4, 6, 8)\n    elseif n==5 \n        Vector{Int64}(1, 5,\
    \ 10, 15, 20, 25)\n    elseif n==6 \n        Vector{Int64}(1, 6, 15, 25, 35, 50,\
    \ 75, 100)\n    elseif n==7 \n        Vector{Int64}(1, 7, 21, 35, 55, 85, 105,\
    \ 125, 150)\n    elseif n==8 \n        Vector{Int64}(1, 8, 28, 55, 120, 175, 220,\
    \ 275, 330)\n    elseif n==9 \n        Vector{Int64}(1, 9, 36, 84, 210, 340, 420,\
    \ 490, 570)\n    elseif n==10 \n        Vector{Int64}(1, 10, 45, 120, 240, 390,\
    \ 540, 690, 850)\n    elseif n==11 \n        Vector{Int64}(1, 11, 55, 180, 320,\
    \ 480, 640, 790, 1025)\n    elseif n==12 \n        Vector{Int64}(1, 12, 66, 220,\
    \ 360, 520, 720, 1050, 1250)\n    elseif n==13 \n        Vector{Int64}(1, 13,\
    \ 78, 300, 450, 625, 825, 1100, 1300)\n    elseif n==14 \n        Vector{Int64}(1,\
    \ 14, 98, 400, 625, 825, 1100, 1300, 1600)\n    elseif n==15 \n        Vector{Int64}(1,\
    \ 15, 119, 500, 825, 1100, 1300, 1600, 1900)\n    elseif n==16 \n        Vector{Int64}(1,\
    \ 16, 149, 600, 1100, 1300, 1600, 1900, 2200)\n    elseif n==17 \n        Vector{Int64}(1,\
    \ 17, 179, 800, 1400, 1900, 2200, 2700, 3300)\n    elseif n==18 \n        Vector{Int64}(1,\
    \ 18, 209, 1000, 1700, 2200, 2700, 3300, 3900)\n    elseif n==19 \n        Vector{Int64}(1,\
    \ 19, 231, 1500, 2200, 2700, 3300, 3900, 4500)\n    elseif n==20 \n        Vector{Int64}(1,\
    \ 20, 261, 2000, 2700, 3300, 3900, 4500, 5300)\n    elseif n==21 \n        Vector{",
  "    if n == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n - 1)\
    \ \n        push!(make_a_pile(n div 2), n mod 2) \n    end\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that takes an integer n and returns a list of all\
    \ possible combinations of n elements from a given set.", "    if n==0 \n    \
    \    return Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n\
    \    else \n        odd_or_even = if n%2==0 \n                        :+\n   \
    \                     :+\n                        :+\n                       \
    \ :+\n                        :+\n                        :+\n               \
    \         :+\n                        :+\n                        :+\n       \
    \                 :+\n                        :+\n                        :+\n\
    \                        :+\n                        :+\n                    \
    \    :+\n                        :+\n                        :+\n            \
    \            :+\n                        :+\n                        :+\n    \
    \                    :+\n                        :+\n                        :+\n\
    \                        :+\n                        :+\n                    \
    \    :+\n                        :+\n                        :+\n            \
    \            :+\n                        :+\n                        :+\n    \
    \                    :+\n                        :+\n                        :+\n\
    \                        :+\n                        :+\n                    \
    \    :+\n                        :+\n                        :+\n            \
    \            :+\n                        :+\n                        :+\n    \
    \                    :+\n                        :+\n                        :+\n\
    \                        :+\n                        :+\n                    \
    \    :+\n                        :+\n                        :+\n            \
    \            :+\n                        :+\n                        :+\n    \
    \                    :+\n                        :+\n                        :+\n\
    \                        :+\n                        :+\n                    \
    \    :+\n                        :+\n                        :+\n            \
    \            :+\n                        :+\n                        :+\n    \
    \                    :+\n                        :+\n                        :+\n\
    \                        :+\n                        :+\n                    \
    \    :+\n                        :+\n                        :+\n            \
    \            :+\n                        :+\n                        :+\n    \
    \                    :+\n                        :+\n                        :+\n\
    \                        :+\n                        :+\n                    \
    \    :+\n                        :+\n                        :+\n            \
    \            :+\n                        :+\n                        :+\n    \
    \                    :+\n                        :+\n                        :+\n\
    \                        :+\n                        :+\n                    \
    \    :+\n                        :+\n                        :+\n            \
    \            :+\n                        :+\n                        :+\n    \
    \                    :+\n                        :+\n                        :+\n\
    \                        :+\n                        :+\n                    \
    \    :+\n                        :+\n                        :+\n            \
    \            :+\n                        :+\n                        :+\n    \
    \                    :+\n                        :+\n                        :+\n\
    \                        :+\n                        :+\n                    \
    \    :+\n                        :+\n                        :+\n            \
    \            :+\n", "    if n == 0 \n        Vector{Int64}() \n    else \n   \
    \     make_a_pile(n - 1) \n    end\nend", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n / 2),\
    \ n % 2 == 0 ? n : n + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n % 2 == 0 \n        make_a_pile(n/2)\n    else \n        make_a_pile(n/2)\
    \ + [(n+1)/2]\nend\n</cell>\n<code language=julia-1.5>", "    if n == 0 \n   \
    \     Vector{Int64}() \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n\
    \ / 2), n % 2 == 0 ? n : n + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 \n        return Vector{Int64}()\n    \n    pile = make_a_pile(n\
    \ / 2)\n    pile = pile + [n mod 2]\n    \n    return pile\nend", "    if n==0\
    \ \n        return Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n\
    \    else \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n    \
    \    odd=odd+even\n        odd=odd[end-1]\n        even=even[end-1]\n        return\
    \ odd+even\nend\n</cell>\n<code language=julia-1.5>\n@assert make_a_pile(3) ==\
    \ [3, 5, 7]\n@assert make_a_pile(5) == [5, 7, 9, 11, 13]\n@assert make_a_pile(10)\
    \ == [10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]\n</cell>\n<text>\nProblem 3\n\
    Write a function that takes a positive integer n and returns the number of ways\
    \ to arrange the n stones in a pile. For example, given n = 4, there are 4 ways\
    \ to arrange the 4 stones in a pile:", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n mod 2),\
    \ n div 2) \n    end\nend\n</cell>\n<code language=julia-1.5>", "    if n == 0\
    \ \n        Vector{Int64}()\n    else\n        make_a_pile(n - 1) \n        push!(make_a_pile(n\
    \ / 2), n % 2 == 0 ? n : n + 1)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 \n        return Vector{Int64}()\n    \n    pile = make_a_pile(n\
    \ - 1)\n    \n    if n % 2 == 0 \n        pile = pile ++ [n / 2]\n    else \n\
    \        pile = pile ++ [n / 2 + 1]\n    \n    return pile\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if n==0 \n        Vector{Int64}() \n    else \n \
    \       make_a_pile(ceil(n/2)).+(n % 2 == 0 ? 1 : 0)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@time make_a_pile(10)\n</cell>\n<code language=julia-1.5>\n\
    @time make_a_pile(100)\n</cell>\n<code language=julia-1.5>\n@time make_a_pile(1000)\n\
    </cell>\n<code language=julia-1.5>\n@time make_a_pile(10000)\n</cell>\n<code language=julia-1.5>\n\
    @time make_a_pile(100000)\n</cell>\n<code language=julia-1.5>\n@time make_a_pile(1000000)\n\
    </cell>\n<code language=julia-1.5>\n@time make_a_pile(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time make_a_pile(100000000)\n</cell>\n<code language=julia-1.5>\n\
    @time make_a_pile(1000000000)\n</cell>\n<code language=julia-1.5>\n@time make_a_pile(10000000000)\n\
    </cell>\n<code language=julia-1.5>\n@time make_a_pile(100000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time make_a_pile(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time make_a_pile(1000000000001)\n</cell>\n<code language=julia-1.5>\n@time make_a_pile(1000000000002)\n\
    </cell>\n<code language=julia-1.5>\n@time make_a_pile(1000000000003)\n</cell>\n\
    <code language=julia-1.5>\n@time make_a_pile(1000000000004)\n</cell>\n<code language=julia-1.5>\n\
    @time make_a_pile(1000000000005)\n</cell>\n<code language=julia-1.5>\n@time make_a_pile(1000000000006)\n\
    </cell>\n<code language=julia-1.5>\n@time make_a_pile(1000000000007)\n</cell>\n\
    <code language=julia-1.5>\n@time make_a_pile(1000000000008)\n</cell>\n<code language=julia-1.5>\n\
    @time make_a_pile(1000000000009)\n</cell>\n<code language=julia-1.5>\n@time make_a_pile(1000000000010)\n\
    </cell>\n<code language=julia-1.5>\n@time make_a_pile(1000000000011)\n</cell>\n\
    <code language=julia-1.5>\n@time make_a_pile(", "    if n==0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(ceil(n/2)) \n        push!(make_a_pile(n-floor(n/2)),n%2)\
    \ \n    end\nend\n</cell>\n<code language=julia-1.0>\n@assert make_a_pile(3) ==\
    \ [3, 5, 7]\n@assert make_a_pile(5) == [5, 7, 9, 11]\n@assert make_a_pile(10)\
    \ == [10, 20, 30, 40, 50]\n</cell>\n<text>\nProblem 7\nWrite a function that takes\
    \ in a positive integer n and returns the number of ways to arrange the n stones\
    \ in a pile. \nThe piles consist of n stones.", "    if n==0 \n        Vector{Int64}()\n\
    \    elseif n==1 \n        Vector{Int64}(1)\n    elseif n==2 \n        Vector{Int64}(1,2)\n\
    \    elseif n==3 \n        Vector{Int64}(1,3,5)\n    elseif n==4 \n        Vector{Int64}(1,3,5,7)\n\
    \    elseif n==5 \n        Vector{Int64}(1,3,5,7,9)\n    elseif n==6 \n      \
    \  Vector{Int64}(1,3,5,7,9,11)\n    elseif n==7 \n        Vector{Int64}(1,3,5,7,9,11,13)\n\
    \    elseif n==8 \n        Vector{Int64}(1,3,5,7,9,11,13,15)\n    elseif n==9\
    \ \n        Vector{Int64}(1,3,5,7,9,11,13,15,17)\n    elseif n==10 \n        Vector{Int64}(1,3,5,7,9,11,13,15,17,19)\n\
    \    elseif n==11 \n        Vector{Int64}(1,3,5,7,9,11,13,15,17,19,21)\n    elseif\
    \ n==12 \n        Vector{Int64}(1,3,5,7,9,11,13,15,17,19,21,23)\n    elseif n==13\
    \ \n        Vector{Int64}(1,3,5,7,9,11,13,15,17,19,21,23,25)\n    elseif n==14\
    \ \n        Vector{Int64}(1,3,5,7,9,11,13,15,17,19,21,23,25,27)\n    elseif n==15\
    \ \n        Vector{Int64}(1,3,5,7,9,11,13,15,17,19,21,23,25,27,29)\n    elseif\
    \ n==16 \n        Vector{Int64}(1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31)\n\
    \    elseif n==17 \n        Vector{Int64}(1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33)\n\
    \    elseif n==18 \n        Vector{Int64}(1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35)\n\
    \    elseif n==19 \n        Vector{Int64}(1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37)\n\
    \    elseif n==20 \n        Vector{Int64}(1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39)\n\
    \    elseif n==21 \n        Vector{Int64}(1,3,5,7,9,11,13,15,17,", "    if n==0\
    \ \n        return Vector{Int64}()\n    else \n        make_a_pile(n-1)\n    \
    \    push!(make_a_pile(n-1), n%2 == 0 ? n : n+1)\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a positive integer n and returns the number\
    \ of ways to arrange n stones in a pile of n levels. \nFor example, given n =\
    \ 4, you should return [1, 1, 2, 2, 3, 3].", "    if n==0 \n        Vector{Int64}()\n\
    \    elseif n==1 \n        Vector{Int64}(1)\n    elseif n==2 \n        Vector{Int64}(1,\
    \ 2)\n    elseif n==3 \n        Vector{Int64}(1, 3, 5)\n    elseif n==4 \n   \
    \     Vector{Int64}(1, 4, 6, 8)\n    elseif n==5 \n        Vector{Int64}(1, 5,\
    \ 10, 15, 20)\n    elseif n==6 \n        Vector{Int64}(1, 6, 15, 30, 45, 60)\n\
    \    elseif n==7 \n        Vector{Int64}(1, 7, 21, 45, 75, 90, 110, 130)\n   \
    \ elseif n==8 \n        Vector{Int64}(1, 8, 28, 56, 120, 150, 180, 210, 240, 270,\
    \ 310, 330)\n    elseif n==9 \n        Vector{Int64}(1, 9, 36, 84, 165, 220, 275,\
    \ 330, 360, 420, 475)\n    elseif n==10 \n        Vector{Int64}(1, 10, 45, 105,\
    \ 215, 320, 425, 480, 525, 570, 610, 660)\n    elseif n==11 \n        Vector{Int64}(1,\
    \ 11, 55, 120, 235, 360, 455, 510, 565, 620, 670, 730)\n    elseif n==12 \n  \
    \      Vector{Int64}(1, 12, 66, 135, 260, 375, 420, 465, 515, 560, 625, 675, 730)\n\
    \    elseif n==13 \n        Vector{Int64}(1, 13, 76, 145, 270, 390, 450, 510,\
    \ 565, 620, 670, 730)\n    elseif n==14 \n        Vector{Int64}(1, 14, 84, 155,\
    \ 280, 400, 450, 510, 565, 620, 670, 730)\n    elseif n==15 \n        Vector{Int64}(1,\
    \ 15, 94, 165, 290, 410, 450, 510, 565, 620, 670, 730)\n    elseif n==16 \n  \
    \      Vector{Int64}(1, 16, 104, 175, 300, 420, 450, 510, 565, 620, 670, 730)\n\
    \    elseif n==17 \n        Vector{Int64}(1, 17, 114, 185, 310, 430, 450, 510,\
    \ 565, 620, 670, 730)\n    elseif n==18 \n        Vector{Int64}(1, 18, 124, 195,\
    \ 320, 440, 450, 510, 565, 620, 670, 730)\n    elseif n==", "    if n == 0 \n\
    \        Vector{Int64}() \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n\
    \ / 2), n % 2 == 0 ? n : n + 1)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes an integer n and returns a list of all possible permutations\
    \ of length n.", "    if n==0 \n        Vector{Int64}() \n    else \n        make_a_pile(n\
    \ - 1) \n        push!(make_a_pile(n div 2), n mod 2) \n    end\nend", "    if\
    \ n==0 \n        Vector{Int64}()\n    else\n        make_a_pile(ceil(n/2))+[(n%2==0)?n-1:n+1]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n / 2),\
    \ n % 2 == 0 ? n : n + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    make_a_pile(4)\n</cell>\n<text>\nExercise 3\nWrite a function that takes an integer\
    \ n and returns the number of ways to arrange the n stones in a pile.", "    if\
    \ n == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n - 1) \n\
    \    end\nend\n</cell>\n<code language=julia-1.0>", "    if n==0 \n        Vector{Int64}()\n\
    \    elseif n==1 \n        Vector{Int64}(1)\n    elseif n%2==0 \n        make_a_pile(n/2)\n\
    \    else\n        make_a_pile(n/2)+1\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes an integer n and returns the number of ways to\
    \ arrange the n stones in a pile.", "    if n==0 \n        Vector{Int64}()\n \
    \   else\n        make_a_pile(floor(n/2)+1) \n        push!(make_a_pile(n-floor(n/2)),floor(n/2))\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nmake_a_pile(5)\n</cell>\n<text>\n\
    Exercise: Write a function that takes a positive integer n and returns the number\
    \ of stones in the first level of the pile. \nThe function should work for any\
    \ positive integer n.", "    if n == 0 \n        return Vector{Int64}()\n    \n\
    \    pile = make_a_pile(n / 2)\n    pile = pile + [n mod 2]\n    \n    return\
    \ pile\nend", "    if n == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n\
    \ - 1) \n        push!(make_a_pile(n / 2), n % 2 == 0 ? n : n + 1)\n    end\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer\
    \ n and returns the number of ways to arrange the n stones in a pile.", "    if\
    \ n==0 \n        return Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n\
    \    else \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n    \
    \    odd=odd+even\n        odd=odd+odd\n        return odd\nend\n</cell>\n<code\
    \ language=julia-1.5>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
