name: HumanEval_25_factorize
language: julia
prompt: "\"\"\" Return list of prime factors of given integer in the order from smallest\
  \ to largest.\n    Each of the factors should be listed number of times corresponding\
  \ to how many times it appeares in factorization.\n    Input number should be equal\
  \ to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n\
  \    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
  \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
  \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
  @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3,\
  \ 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
completions: ["    factors = factor(n)\n    factors = sort(factors)\n    factors =\
    \ factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\n</cell>\n<code language=julia-1.3>", "    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend", "    factors = factor(n)\n    factors\
    \ = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = ", "    factors = factor(n)\n    factors = sort(factors)\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    return factors\nend\n</cell>\n\
    <code language=julia-1.5>", "    factors = factor(n)\n    factors = sort(factors)\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    return factors\n\
    end\n</cell>\n<code language=julia-1.3>", "    factors = factor(n)\n    factor_counts\
    \ = Dict{Int64, Int64}()\n    for factor in factors\n        factor_counts[factor]\
    \ = factor_counts[factor] + 1 if factor_counts[factor] > 0 else 1\n    end\n \
    \   factor_counts\nend\n</cell>\n<code language=julia-1.5>", "    factors = factor(n)\n\
    \    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n       \
    \ factor_counts[factor] = factor_counts[factor] + 1 if factor_counts[factor] ==\
    \ nil else factor_counts[factor]\n    end\n    factor_counts\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    factors = factor(n)\n    factors = sort(factors)\n\
    \    factors = unique(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\n</cell>\n<code language=julia-1.4>", "    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>",
  "    factorization = factors(n)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n", "    factorization = factors(n)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n", "    factors\
    \ = factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n   \
    \ factors = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.4>",
  "    factorization = factors(n)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n", "    factorization = factors(n)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n", "    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n",
  "    factors = factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    return factors\n\
    end\n</cell>\n<code language=julia-1.5>", "    factors = factor(n)\n    factor_counts\
    \ = Dict{Int64, Int64}()\n    for factor in factors\n        factor_counts[factor]\
    \ = factor_counts[factor] + 1\n    end\n    factor_counts = collect(factor_counts)\n\
    \    factor_counts = sort(factor_counts, by=x->x[1])\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    return factor_counts\nend\n</cell>\n\
    <code language=julia-1.5>", "    factors = factor(n)\n    factors = sort(factors)\n\
    \    factors = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>",
  "    factors = factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>",
  "    if n==1 \n        return [1]\n    factors = factorize(n/2)\n    factors = factors[2:end]\n\
    \    factors = [factors[i]*factors[i+1] for i in 1:length(factors)]\n    factors\
    \ = sort(factors)\n    factors = factors[2:end]\n    return factors\nend\n</cell>\n\
    <code language=julia-1.4>", "    factors = factor(n)\n    factors_count = zeros(Int,\
    \ length(factors))\n    for (i,factor) in enumerate(factors)\n        factors_count[i]\
    \ = factors[factor]\n    end\n    factors_count = sort(factors_count)\n    factors_count\
    \ = factors_count[end:-1:1]\n    return factors_count\nend\n</cell>\n<code language=julia-1.4>",
  "    factors = factor(n)\n    factor_count = zeros(Int, length(factors))\n    for\
    \ i = 1:length(factors)\n        factor_count[i] = factor_count[i] + factors[i]\n\
    \    end\n    factor_count\nend\n</cell>\n<code language=julia-1.3>", "    factors\
    \ = factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1\n    end\n    factor_counts\
    \ = collect(factor_counts)\n    factor_counts = sort(factor_counts, by=x->x[1])\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor",
  "    factorization = factors(n)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n", "    factorization = factorize(n-1)\n    factorization\
    \ = [n] + factorization\n    return factorization\nend\n</cell>\n<code language=julia-1.4>",
  "    factorization = factors(n)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n", "    factors = factor(n)\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    return factors\n\
    end\n</cell>\n<code language=julia-1.4>", "    factors = factor(n)\n    factors\
    \ = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n",
  "    factors = factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>",
  "    factorization = factors(n)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n", "    factors = factor(n)\n    factors = sort(factors)\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    return factors\n\
    end\n</cell>\n<code language=julia-1.5>", "    factors = factor(n)\n    factors\
    \ = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\n</cell>\n<code language=julia-1.4>", "    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>",
  "    factorization = factors(n)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n", "    factors = factor(n)\n    factor_counts = Dict{Int64,\
    \ Int64}()\n    for factor in factors\n        factor_counts[factor] = factor_counts[factor]\
    \ + 1 if factor_counts[factor] == nil else factor_counts[factor]\n    end\n  \
    \  factor_counts = collect(factor_counts)\n    factor_counts = sort(factor_counts,\
    \ by=x->x[1])\n    factor_counts = reverse(factor_counts)\n    return factor_counts\n\
    end", "    factors = factor(n)\n    factor_counts = Dict{Int64, Int64}()\n   \
    \ for factor in factors\n        factor_counts[factor] = factor_counts[factor]\
    \ + 1\n    end\n    factor_counts = collect(factor_counts)\n    factor_counts\
    \ = sort(factor_counts, by=x->x[1])\n    factor_counts = reverse(factor_counts)\n\
    \    return factor_counts\nend\n</cell>\n<code language=julia-1.5>", "    factors\
    \ = factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n  \
    \  factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\n</cell>\n<code language=julia-1.5>", "    if n==1\n\
    \        return [1]\n    factors=[]\n    factor=factorize(n-1)\n    for f in factor\n\
    \        push!(factors,f)\n    end\n    return factors\nend\n</cell>\n<code language=julia-1.3>",
  "    factorization = factors(n)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n", "    factors = factor(n)\n    factors = sort(factors)\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    return factors\n\
    end", "    factors = factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    return factors\nend", "    if n==1\n      \
    \  return [1]\n    factors = factorize(n/2)\n    factors = [f*factors[n] for f\
    \ in factors]\n    factors = sort(factors)\n    factors = [f for f in factors\
    \ if f>1]\n    return factors\nend", "    factorization = factors(n)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n", "    factors\
    \ = factor(n)\n    factors_count = zeros(Int, length(factors))\n    for i = 1:length(factors)\n\
    \        factors_count[i] = count(factors)\n    end\n    factors_count = sort(factors_count)\n\
    \    factors_count = factors_count[end:-1:1]\n    return factors_count\nend\n\
    </cell>\n<code language=julia-1.5>", "    factors = factor(n)\n    factor_counts\
    \ = Dict{Int64, Int64}()\n    for factor in factors\n        factor_counts[factor]\
    \ = factor_counts[factor] + 1 if factor_counts[factor] == 0 else 1\n    end\n\
    \    factor_counts\nend\n</cell>\n<code language=julia-1.5>", "    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n",
  "    factors = factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>",
  "    factors = factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n\
    \    factors = sort(factors)\n    factors = unique(factors)\n    factors = sort(factors)\n\
    \    factors = unique(factors)\n    factors = sort(factors)\n    factors = unique(factors)\n\
    \    factors = sort(factors)\n    factors = unique(factors)\n    factors = sort(factors)\n\
    \    factors = unique(factors)\n    factors = sort(factors)\n    factors = unique(factors)\n\
    \    factors = sort(factors)\n    factors = unique(factors)\n    factors = sort(factors)\n\
    \    factors = unique(factors)\n    factors = sort(factors)\n    factors = unique(factors)\n\
    \    factors = sort(factors)\n    factors = unique(factors)\n    factors = sort(factors)\n\
    \    factors = unique(factors)\n    factors = sort(factors)\n    factors = unique(factors)\n\
    \    factors = sort(factors)\n    factors = unique(factors)\n    factors = sort(factors)\n\
    \    factors = unique(factors)\n    factors = sort(factors)\n    factors = unique(factors)\n\
    \    factors = sort(factors)\n    factors = unique(factors)\n    factors = sort(factors)\n\
    \    factors = unique(factors)\n    factors = sort(factors)\n    factors = unique(factors)\n\
    \    factors = sort(factors)\n    factors = unique(factors)\n    factors = sort(factors)\n\
    \    factors = unique(factors)\n    factors = sort(factors)\n    factors = unique(factors)\n\
    \    factors = sort(factors)\n    factors = unique(factors)\n    factors = sort(factors)\n\
    \    factors = unique(factors)\n    factors = sort(factors)\n    factors = unique(factors)\n\
    \    factors = sort(factors)\n    factors = unique(factors)\n    factors = sort(factors)\n\
    \    factors = unique(factors)\n    factors = sort(factors)\n    factors = unique(factors)\n\
    \    factors = sort(factors)\n    factors = unique(factors)\n    factors = sort(factors)\n\
    \    factors = unique(factors)\n    factors = sort(factors)\n    factors = unique(factors)\n\
    \    factors = sort(factors)\n    factors = unique(factors)\n    factors = sort(factors)\n\
    \    factors = unique(factors)\n    factors = sort(factors)\n    factors = unique(factors)\n\
    \    factors = sort(factors)\n    factors = unique(factors)\n    factors = sort(factors)\n\
    \    factors = unique(factors)\n    factor", "    factors = factor(n)\n    factors\
    \ = sort(factors)\n    factors = unique(factors)\n    return factors\nend\n</cell>\n\
    <code language=julia-1.5>", "    factors = factor(n)\n    factors = sort(factors)\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    return factors\n\
    end\n</cell>\n<code language=julia-1.5>", "    factors = factor(n)\n    factors\
    \ = sort(factors)\n    factors = unique(factors)\n    return factors\nend\n</cell>\n\
    <code language=julia-1.5>", "    factorization = factors(n)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n", "    factors\
    \ = factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n   \
    \ factors = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>",
  "    factorization = factors(n)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n", "    factors = factor(n)\n    factor_counts = Dict{Int64,\
    \ Int64}()\n    for factor in factors\n        factor_counts[factor] = factor_counts[factor]\
    \ + 1\n    end\n    factor_counts = collect(factor_counts)\n    factor_counts\
    \ = sort(factor_counts, by = x -> x[1])\n    factor_counts = reverse(factor_counts)\n\
    \    return factor_counts\nend\n</cell>\n<code language=julia-1.5>\nfactorize(8)\n\
    </cell>\n<code language=julia-1.5>\nfactorize(25)\n</cell>\n<code language=julia-1.5>\n\
    factorize(70)\n</cell>\n<code language=julia-1.5>", "    factorization = factors(n)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n",
  "    factors = factor(n)\n    factors_count = zeros(Int, length(factors))\n    for\
    \ (i,f) in enumerate(factors)\n        factors_count[i] = factor_count[f]\n  \
    \  end\n    factors_count = sort(factors_count)\n    factors = factors[2:end]\n\
    \    factors_count = factors_count[2:end]\n    return factors\nend", "    factorization\
    \ = factor(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    ", "    factorization = factors(n)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n", "    factors = factor(n)\n    factor_counts\
    \ = Dict{Int64, Int64}()\n    for factor in factors\n        factor_counts[factor]\
    \ = factor_counts[factor] + 1 if factor_counts[factor] > 0 else 1\n    end\n \
    \   factor_counts\nend\n</cell>\n<code language=julia-1.4>", "    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n",
  "    factorization = factors(n)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n", "    factors = factor(n)\n    factors = sort(factors)\n\
    \    factors = unique(factors)\n    factors = factors[2:end]\n    return factors\n\
    end\n</cell>\n<code language=julia-1.5>", "    factors = factor(n)\n    factors\
    \ = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend", "    factorization = factorize(n)\n    factors = []\n\
    \    for factor in factorization\n        push!(factors, factor)\n    end\n  \
    \  return factors\nend\n</cell>\n<code language=julia-1.3>", "    factors = factor(n)\n\
    \    factors = sort(factors)\n    factors = unique(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    return factors\nend", "    if n==1 \n     \
    \   return [1]\n    factors = factorize(n/2)\n    factors = factors[2:end]\n \
    \   factors = factors + [1]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    ", "    factors = factor(n)\n    factor_count\
    \ = zeros(Int, length(factors))\n    for i = 1:length(factors)\n        factor_count[i]\
    \ = factor_count[i] + factors[i]\n    end\n    factor_count\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    factors = factor(n)\n    factors = sort(factors)\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    return factors\n\
    end\n</cell>\n<code language=julia-1.5>", "    factors = factor(n)\n    factors\
    \ = sort(factors)\n    factors = factors[2:end]\n    factors = sort(factors)\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = sort(factors)\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = sort(factors)\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = sort(factors)\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = sort(factors)\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = sort(factors)\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = sort(factors)\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = sort(factors)\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = sort(factors)\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = sort(factors)\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = sort(factors)\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factor", "    factors = factor(n)\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend", "    factors = factor(n)\n    factor_counts = Dict{Int64,\
    \ Int64}()\n    for factor in factors\n        factor_counts[factor] = factor_counts[factor]\
    \ + 1\n    end\n    factor_counts = collect(factor_counts)\n    factor_counts\
    \ = sort(factor_counts, by=x->x[1])\n    return factor_counts\nend\n</cell>\n\
    <code language=julia-1.5>", "    factors = factor(n)\n    factors = sort(factors)\n\
    \    factors = unique(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factor",
  "    factors = factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor\
    \ in factors\n        factor_counts[factor] = factor_counts[factor] + 1\n    end\n\
    \    factor_counts = collect(factor_counts)\n    factor_counts = sort(factor_counts)\n\
    \    return factor_counts\nend\n</cell>\n<code language=julia-1.5>\nfactorize(8)\n\
    </cell>\n<code language=julia-1.5>\nfactorize(25)\n</cell>\n<code language=julia-1.5>\n\
    factorize(70)\n</cell>\n<text>\nProblem 3\nWrite a function that returns all prime\
    \ factors of a given integer in the order from smallest to largest.\n    Input\
    \ number should be equal to the product of all factors\n    >>> prime_factors(8)\n\
    \    [2, 2, 2]\n    >>> prime_factors(25)\n    [5, 5]\n    >>> prime_factors(70)\n\
    \    [2, 5, 7]\n    \"\"\"", "    factors = factor(n)\n    factors = sort(factors)\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    return factors\n\
    end\n</cell>\n<code language=julia-1.5>", "    factors = factor(n)\n    factors\
    \ = sort(factors)\n    factors = unique(factors)\n    factors = factors[2:end]\n\
    \    return factors\nend\n</cell>\n<code language=julia-1.5>", "    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>",
  "    factors = factor(n)\n    factors = factors[2:end]\n    factors = sort(factors)\n\
    \    return factors\nend", "    if n==1 \n        return [1]\n    \n    factors=[]\n\
    \    \n    for f in factorize(n-1) do \n        if f==1 \n            push!(factors,f)\n\
    \        else \n            push!(factors,f*f)\n        end\n    end\n    \n \
    \   push!(factors,n)\n    \n    return factors\nend\n</cell>\n<code language=julia-1.5>",
  "    factors = factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor\
    \ in factors\n        factor_counts[factor] = factor_counts[factor] + 1 if factor_counts[factor]\
    \ > 0 else 1\n    end\n    factor_counts\nend\n</cell>\n<code language=julia-1.3>",
  "    factorization = factorize(n)\n    factors = []\n    for factor in factorization\n\
    \        factors.push(factorization[factor])\n    end\n    return factors\nend\n\
    </cell>\n<code language=julia-1.5>", "    factors = factor(n)\n    factors = sort(factors)\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    return factors\n\
    end\n</cell>\n<code language=julia-1.3>", "    factors = factor(n)\n    factors\
    \ = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    return factors\nend", "    factors = factor(n)\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\n</cell>\n<code language=julia-1.3>", "    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>",
  "    factors = factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    return factors\nend\n</cell>\n<code language=julia-1.5>", "    factorization\
    \ = factorize(n-1)\n    factorization = [factorization[i] | i in factorization]\n\
    \    return factorization\nend\n</cell>\n<code language=julia-1.5>", "    factors\
    \ = factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n   \
    \ return factors\nend\n</cell>\n<code language=julia-1.5>", "    factors = factor(n)\n\
    \    factors = sort(factors)\n    factors = unique(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>",
  "    factorization = factors(n)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n", "    factorization = factors(n)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n", "    factors\
    \ = factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n   \
    \ factors = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.4>",
  "    factors = factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>",
  "    factors = factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor\
    \ in factors\n        factor_counts[factor] = factor_counts[factor] + 1\n    end\n\
    \    factor_counts = sort(collect(factor_counts))\n    factor_counts = reverse(factor_counts)\n\
    \    return factor_counts\nend\n</cell>\n<code language=julia-1.5>", "    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n",
  "    factors = factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    return factors\n\
    end", "    factors = factor(n)\n    factor_counts = Dict{Int64, Int64}()\n   \
    \ for factor in factors\n        factor_counts[factor] = factor_counts[factor]\
    \ + 1 if factor_counts[factor] > 0 else 1\n    end\n    factor_counts\nend", " \
    \   factors = factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n\
    \    return factors\nend\n</cell>\n<code language=julia-1.5>", "    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.3>",
  "    factors = factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>",
  "    factors = factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n\
    \    return factors\nend\n</cell>\n<code language=julia-1.5>", "    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = reverse(factors)\n   \
    \ factors = unique(factors)\n    return factors\nend\n</cell>\n<code language=julia-1.5>",
  "    factors = factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n", "    factors = factor(n)\n    factors = sort(factors)\n\
    \    factors = reverse(factors)\n    factors = unique(factors)\n    return factors\n\
    end\n</cell>\n<code language=julia-1.5>", "    factorization = factors(n)\n  \
    \  factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n",
  "    factors = factor(n)\n    factors_count = zeros(Int, length(factors))\n    for\
    \ (i,factor) in enumerate(factors)\n        factors_count[i] = factors[factor]\n\
    \    end\n    return factors_count\nend\n</cell>\n<code language=julia-1.5>",
  "    factorization = factors(n)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n", "    factors = factor(n)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    return factors\nend", "    factors = factor(n)\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    return factors\n\
    end", "    factors = factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n\
    \    factors = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.3>",
  "    factors = factor(n)\n    factor_count = zeros(Int, length(factors))\n    for\
    \ i = 1:length(factors)\n        factor_count[i] = factor_count[i] + factors[i]\n\
    \    end\n    factor_count\nend\n</cell>\n<code language=julia-1.4>", "    factors\
    \ = factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n   \
    \ factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = ", "    factors = factor(n)\n   \
    \ factor_count = zeros(Int, length(factors))\n    for i = 1:length(factors)\n\
    \        factor_count[i] = count(factors)\n    end\n    return factor_count\n\
    end\n</cell>\n<code language=julia-1.5>", "    factors = factor(n)\n    factors\
    \ = sort(factors)\n    factors = unique(factors)\n    factors = sort(factors)\n\
    \    factors = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>",
  "    factors = factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    return factors\nend\n</cell>\n<code language=julia-1.5>", "    factorization\
    \ = factorize(n)\n    factorization = [factorization[i] | i in factorization]\n\
    \    return factorization\nend\n</cell>\n<code language=julia-1.5>", "    factors\
    \ = factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n   \
    \ factors = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>",
  "    factorization = factors(n)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n", "    factors = factor(n)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    return factors\nend", "    factorization =\
    \ factorize(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    return factorization\nend", "    factors = factor(n)\n    factors = sort(factors)\n\
    \    factors = unique(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\n</cell>\n<code language=julia-1.5>", "    factorization\
    \ = factor(n)\n    factors = []\n    for factor in factorization\n        factors\
    \ += factor\n    end\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    factorize(8)\n</cell>\n<code language=julia-1.5>\nfactorize(25)\n</cell>\n<code\
    \ language=julia-1.5>\nfactorize(70)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns all prime factors of given integer in the order from smallest to\
    \ largest.\n    Input number should be equal to the product of all factors\n \
    \   >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>>\
    \ factorize(70)\n    [2, 5, 7]\n    \"\"\"", "    factors = factor(n)\n    factors\
    \ = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n",
  "    factors = factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    return factors\n\
    end\n</cell>\n<code language=julia-1.5>", "    factors = factor(n)\n    factors\
    \ = sort(factors)\n    factors = unique(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>",
  "    factors = factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.4>",
  "    factors = factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    return factors\n\
    end\n</cell>\n<code language=julia-1.5>", "    factors = factor(n)\n    factors\
    \ = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>",
  "    factors = factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    return factors\n\
    end", "    if n==1\n        return [1]\n    factors=factor(n)\n    factors=sort(factors)\n\
    \    factors=unique(factors)\n    factors=sort(factors)\n    factors=unique(factors)\n\
    \    factors=sort(factors)\n    factors=unique(factors)\n    factors=sort(factors)\n\
    \    factors=unique(factors)\n    factors=sort(factors)\n    factors=unique(factors)\n\
    \    factors=sort(factors)\n    factors=unique(factors)\n    factors=sort(factors)\n\
    \    factors=unique(factors)\n    factors=sort(factors)\n    factors=unique(factors)\n\
    \    factors=sort(factors)\n    factors=unique(factors)\n    factors=sort(factors)\n\
    \    factors=unique(factors)\n    factors=sort(factors)\n    factors=unique(factors)\n\
    \    factors=sort(factors)\n    factors=unique(factors)\n    factors=sort(factors)\n\
    \    factors=unique(factors)\n    factors=sort(factors)\n    factors=unique(factors)\n\
    \    factors=sort(factors)\n    factors=unique(factors)\n    factors=sort(factors)\n\
    \    factors=unique(factors)\n    factors=sort(factors)\n    factors=unique(factors)\n\
    \    factors=sort(factors)\n    factors=unique(factors)\n    factors=sort(factors)\n\
    \    factors=unique(factors)\n    factors=sort(factors)\n    factors=unique(factors)\n\
    \    factors=sort(factors)\n    factors=unique(factors)\n    factors=sort(factors)\n\
    \    factors=unique(factors)\n    factors=sort(factors)\n    factors=unique(factors)\n\
    \    factors=sort(factors)\n    factors=unique(factors)\n    factors=sort(factors)\n\
    \    factors=unique(factors)\n    factors=sort(factors)\n    factors=unique(factors)\n\
    \    factors=sort(factors)\n    factors=unique(factors)\n    factors=sort(factors)\n\
    \    factors=unique(factors)\n    factors=sort(factors)\n    factors=unique(factors)\n\
    \    factors=sort(factors)\n    factors=unique(factors)\n    factors=sort(factors)\n\
    \    factors=unique(factors)\n    factors=sort(factors)\n    factors=unique(factors)\n\
    \    factors=sort(factors)\n    factors=unique(factors)\n    factors=sort(factors)\n\
    \    factors=unique(factors)\n    factors=sort(factors)\n    factors=unique(factors)\n\
    \    factors=sort(factors)\n    ", "    factors = factor(n)\n    factor_counts\
    \ = Dict{Int64, Int64}()\n    for factor in factors\n        factor_counts[factor]\
    \ = factor_counts[factor] + 1 if factor_counts[factor] == nil else factor_counts[factor]\n\
    \    end\n    factor_counts\nend\n</cell>\n<code language=julia-1.5>", "    factors\
    \ = factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n  \
    \  factors = factors[2:end]\n    factors = factors[2:end]\n    return factors\n\
    end\n</cell>\n<code language=julia-1.5>", "    factors = factor(n)\n    factors\
    \ = sort(factors)\n    factors = unique(factors)\n    factors = factors[2:end]\n\
    \    return factors\nend", "    factors = factor(n)\n    factors = sort(factors)\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    return factors\n\
    end", "    factors = factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>",
  "    factors = factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>",
  "    factorization = factors(n)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n", "    factors = factor(n)\n    factors = sort(factors)\n\
    \    factors = unique(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend", "    factorization = factors(n)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n", "    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n",
  "    factors = factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    return factors\n\
    end", "    factors = factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.4>",
  "    factors = factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n\
    \    return factors\nend", "    factorization = factors(n)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n", "    factors\
    \ = factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n   \
    \ return factors\nend\n</cell>\n<code language=julia-1.3>", "    factors = factor(n)\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\n</cell>\n<code language=julia-1.5>", "    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n",
  "    factorization = factors(n)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n", "    if n==1\n        return [1]\n    factors=factor(n)\n\
    \    factors=sort(factors)\n    factors=factors[2:end]\n    factors=sort(factors)\n\
    \    factors=factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>",
  "    factors = factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    return factors\n\
    end\n</cell>\n<code language=julia-1.5>", "    factors = factor(n)\n    factors\
    \ = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\n</cell>\n<code language=julia-1.5>", "    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1\n    end\n    factor_counts\
    \ = sort(collect(factor_counts))\n    factor_counts = reverse(factor_counts)\n\
    \    return factor_counts\nend\n</cell>\n<code language=julia-1.5>", "    factors\
    \ = factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n   \
    \ factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = ", "    factors = factor(n)\n   \
    \ factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\n</cell>\n<code language=julia-1.5>", "    factors =\
    \ factor(n)\n    factor_counts = Dict(factors)\n    factor_counts = sort(factor_counts,\
    \ by = last)\n    factor_counts = sort(factor_counts, by = first)\n    factor_counts\
    \ = sort(factor_counts, by = length)\n    factor_counts = sort(factor_counts,\
    \ by = first)\n    factor_counts = sort(factor_counts, by = last)\n    factor_counts\
    \ = sort(factor_counts, by = last)\n    factor_counts = sort(factor_counts, by\
    \ = last)\n    factor_counts = sort(factor_counts, by = last)\n    factor_counts\
    \ = sort(factor_counts, by = last)\n    factor_counts = sort(factor_counts, by\
    \ = last)\n    factor_counts = sort(factor_counts, by = last)\n    factor_counts\
    \ = sort(factor_counts, by = last)\n    factor_counts = sort(factor_counts, by\
    \ = last)\n    factor_counts = sort(factor_counts, by = last)\n    factor_counts\
    \ = sort(factor_counts, by = last)\n    factor_counts = sort(factor_counts, by\
    \ = last)\n    factor_counts = sort(factor_counts, by = last)\n    factor_counts\
    \ = sort(factor_counts, by = last)\n    factor_counts = sort(factor_counts, by\
    \ = last)\n    factor_counts = sort(factor_counts, by = last)\n    factor_counts\
    \ = sort(factor_counts, by = last)\n    factor_counts = sort(factor_counts, by\
    \ = last)\n    factor_counts = sort(factor_counts, by = last)\n    factor_counts\
    \ = sort(factor_counts, by = last)\n    factor_counts = sort(factor_counts, by\
    \ = last)\n    factor_counts = sort(factor_counts, by = last)\n    factor_counts\
    \ = sort(factor_counts, by = last)\n    factor_counts = sort(factor_counts, by\
    \ = last)\n    factor_counts = sort(factor_counts, by = last)\n    factor_counts\
    \ = sort(factor_counts, by = last)\n    factor_counts = sort(factor_counts, by\
    \ = last)\n    factor_counts = sort(factor_counts, by = last)\n    factor_counts\
    \ = sort(factor_counts, by = last)\n    factor_counts = sort(factor_counts, by\
    \ = last)\n    factor_counts = sort(factor_counts, by = last)\n    factor_counts\
    \ = sort(factor_counts, by = last)\n    factor_counts = sort(factor_counts, by\
    \ = last)\n    factor_counts = sort(factor_counts, by = last)\n    factor_counts\
    \ = sort(", "    factors = factor(n)\n    factors = sort(factors)\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    return factors\nend\n</cell>\n\
    <code language=julia-1.5>", "    factors = factor(n)\n    factor_counts = Dict{Int64,\
    \ Int64}()\n    for factor in factors\n        factor_counts[factor] = factor_counts[factor]\
    \ + 1\n    end\n    factor_counts = collect(factor_counts)\n    factor_counts\
    \ = sort(factor_counts, by=x->x[1])\n    factor_counts = reverse(factor_counts)\n\
    \    return factor_counts\nend\n</cell>\n<code language=julia-1.4>", "    factors\
    \ = factor(n)\n    factor_count = zeros(Int, length(factors))\n    for i = 1:length(factors)\n\
    \        factor_count[i] = factor_count[i] + factors[i]\n    end\n    factor_count\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns all prime factors\
    \ of given integer in the order from smallest to largest.\n    Input number should\
    \ be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n\
    \    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n   \
    \ \"\"\"", "    if n==1 \n        return [1]\n    factors = factorize(n-1)\n \
    \   factors = factors .+ [factors[n]]\n    return factors\nend", "    if n < 2\n\
    \        return Vector{Int64}()\n    factors = factorization(n)\n    factors =\
    \ sort(factors)\n    factors = Vector{Int64}()\n    for factor in factors\n  \
    \      push!(factors, factor * factors[end])\n    end\n    return factors\nend",
  "    if n == 1\n        return [1]\n    \n    factors = factorize(n/2)\n    \n \
    \   factors = factors .+ [factors[n]]\n    \n    return factors\nend\n</cell>\n\
    <code language=julia-1.5>\nfactorize(8)\n</cell>\n<code language=julia-1.5>\n\
    factorize(25)\n</cell>\n<code language=julia-1.5>\nfactorize(70)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the number of factors of given integer\
    \ in the order from smallest to largest.\n    Input number should be equal to\
    \ the product of all factors\n    >>> factorize(8)\n    1\n    >>> factorize(25)\n\
    \    3\n    >>> factorize(70)\n    6\n    \"\"\"", "    if n==1 \n        return\
    \ [1]\n    factors = factorize(n/2)\n    factors = [f*factors[1] for f in factors]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factor", "    factors = factor(n)\n    factors = sort(factors)\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    return factors\n\
    end\n</cell>\n<code language=julia-1.5>", "    factors = factor(n)\n    factor_counts\
    \ = Dict{Int64, Int64}()\n    for factor in factors\n        factor_counts[factor]\
    \ = factor_counts[factor] + 1 if factor_counts[factor] == 0 else factor_counts[factor]\n\
    \    end\n    factor_counts = sort(collect(factor_counts)) \n    factor_counts\
    \ = reverse(factor_counts)\n    return factor_counts\nend\n</cell>\n<code language=julia-1.5>",
  "    factors = factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor\
    \ in factors\n        factor_counts[factor] = factor_counts[factor] + 1\n    end\n\
    \    factor_counts\nend\n</cell>\n<code language=julia-1.5>", "    factors = factor(n)\n\
    \    factors = sort(factors)\n    factors = unique(factors)\n    factors = sort(factors)\n\
    \    return factors\nend\n</cell>\n<code language=julia-1.5>", "    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>",
  "    factors = factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    return factors\nend", "    factors = factor(n)\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\n</cell>\n<code language=julia-1.3>", "    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    return\
    \ factors\nend\n</cell>\n<code language=julia-1.5>", "    factors = factor(n)\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\n</cell>\n<code language=julia-1.5>", "    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    return\
    \ factors\nend\n</cell>\n<code language=julia-1.5>", "    factors = factor(n)\n\
    \    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n       \
    \ factor_counts[factor] = factor_counts[factor] + 1\n    end\n    factor_counts\
    \ = collect(factor_counts)\n    factor_counts = sort(factor_counts, by=x->x[1])\n\
    \    factor_counts = reverse(factor_counts)\n    return factor_counts\nend\n</cell>\n\
    <code language=julia-1.5>\nfactorize(8)\n</cell>\n<code language=julia-1.5>\n\
    factorize(25)\n</cell>\n<code language=julia-1.5>\nfactorize(70)\n</cell>\n<text>\n\
    Problem 4\nWrite a function that takes a positive integer $n$ and returns the\
    \ number of factors of $n$ that are also positive integers. \nFor example, for\
    \ $n = 8$, the function should return $3$ ($2$ and $4$).\nFor $n = 25$, the function\
    \ should return $3$ ($5$ and $7$).\nFor $n = 70$, the function should return $3$\
    \ ($2$ and $5$).", "    factors = factor(n)\n    factor_counts = Dict{Int64, Int64}()\n\
    \    for factor in factors\n        factor_counts[factor] = factor_counts[factor]\
    \ + 1 if factor_counts[factor] == 0 else 1\n    end\n    factor_counts = collect(factor_counts)\n\
    \    factor_counts = sort!(factor_counts, by=x->x[1])\n    factor_counts = reverse(factor_counts)\n\
    \    return factor_counts\nend", "    factors = factor(n)\n    factors = sort(factors)\n\
    \    factors = unique(factors)\n    factors = factors[2:end]\n    return factors\n\
    end", "    factors = factor(n)\n    factor_count = Dict{Int64, Int64}()\n    for\
    \ factor in factors\n        factor_count[factor] = get(factor_count, factor,\
    \ 0) + 1\n    end\n    factor_count\nend\n</cell>\n<code language=julia-1.4>",
  "    factors = factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor\
    \ in factors\n        factor_counts[factor] = factor_counts[factor] + 1 if factor_counts[factor]\
    \ == 0 else factor_counts[factor]\n    end\n    factor_counts = collect(factor_counts)\n\
    \    factor_counts = sort(factor_counts, by = x -> x[1])\n    factor_counts =\
    \ reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = ", "    factors = factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    return factors\nend", "    factors = factor(n)\n    factors = sort(factors)\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    return factors\n\
    end\n</cell>\n<code language=julia-1.4>", "    factors = factor(n)\n    factors\
    \ = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend", "    factorization = factor(n)\n    factorization =\
    \ sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    ", " \
    \   factors = factor(n)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factor", "    factors = factor(n)\n    factors\
    \ = sort(factors)\n    factors = unique(factors)\n    return factors\nend", " \
    \   factors = [1]\n    for f in factorization(n)\n        push!(factors, f)\n\
    \    end\n    return factors\nend", "    factors = factor(n)\n    factor_counts\
    \ = Dict{Int64, Int64}()\n    for factor in factors\n        factor_counts[factor]\
    \ = factor_counts[factor] + 1\n    end\n    factor_counts = collect(factor_counts)\n\
    \    factor_counts = sort(factor_counts, by=x->x[1])\n    factor_counts = reverse(factor_counts)\n\
    \    return factor_counts\nend\n</cell>\n<code language=julia-1.5>\nfactorize(8)\n\
    </cell>\n<code language=julia-1.5>\nfactorize(25)\n</cell>\n<code language=julia-1.5>\n\
    factorize(70)\n</cell>\n<text>\nExercise\nWrite a function that returns all prime\
    \ factors of given integer in the order from smallest to largest.\n    Each of\
    \ the factors should be listed number of times corresponding to how many times\
    \ it appeares in factorization.\n    Input number should be equal to the product\
    \ of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n\
    \    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"", "    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>",
  "    factors = factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    return factors\n\
    end\n</cell>\n<code language=julia-1.5>", "    factors = factor(n)\n    factors\
    \ = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\n</cell>\n<code language=julia-1.5>", "    if n==1\n\
    \        [1]\n    else\n        factors = factorize(n-1)\n        push!(factors,1)\n\
    \        factors\n    end\nend\n</cell>\n<code language=julia-1.5>", "    factors\
    \ = factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n   \
    \ factors = factors[2:end]\n    return factors\nend", "    factors = factor(n)\n\
    \    factors = sort(factors)\n    factors = unique(factors)\n    factors = factors[2:end]\n\
    \    return factors\nend", "    factorization = factors(n)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n", "    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n",
  "    factorization = factors(n)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = unique(factorization)\n", "    factors = factor(n)\n    factors = sort(factors)\n\
    \    factors = unique(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\n</cell>\n<code language=julia-1.5>", "    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = reverse(factors)\n   \
    \ return factors\nend", "    factorization = factors(n)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = unique(factorization)\n", "    factors = factor(n)\n    factors\
    \ = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\n</cell>\n<code language=julia-1.5>", "    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    factors = factors[factors != 1]\n    return factors\n\
    end\n</cell>\n<code language=julia-1.0>", "    factors = factor(n)\n    factors\
    \ = sort(factors)\n    factors = factors[2:end]\n    return factors\nend\n</cell>\n\
    <code language=julia-1.0>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
