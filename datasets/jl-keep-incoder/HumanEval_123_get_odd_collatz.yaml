name: HumanEval_123_get_odd_collatz
language: julia
prompt: "\"\"\"\n    Given a positive integer n, return a sorted list that has the\
  \ odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
  \ in mathematics that concerns a sequence defined\n    as follows: start with any\
  \ positive integer n. Then each term is obtained from the \n    previous term as\
  \ follows: if the previous term is even, the next term is one half of \n    the\
  \ previous term. If the previous term is odd, the next term is 3 times the previous\n\
  \    term plus 1. The conjecture is that no matter what value of n, the sequence\
  \ will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2.\
  \ returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5)\
  \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
  \ numbers are only 1, and 5.\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
  \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
  \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
completions: ["    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n    return odd_collatz\n\
    end", "    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz .+= [n * 3]\n        if n % 2 == 1 \n            odd_collatz\
    \ .+= [n + 1]\n        end\n        return odd_collatz\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n == 1 \n        return [1]\n    else \n \
    \       odd_collatz = get_odd_collatz(n / 2)\n        odd_collatz += [n * 2 if\
    \ n % 2 == 0 else n * 3]\n        return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\n\
    get_odd_collatz(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the factorial of a given positive integer n.", "    if n == 1 \n        return\
    \ [1]\n    else \n        odd_list = Vector{Int64}()\n        odd_list += get_odd_collatz(n/2)\n\
    \        odd_list += [n/2]\n        odd_list += [n*3+1]\n        return odd_list\n\
    end\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes in a positive integer n and returns the\
    \ nth Fibonacci number.", "    if n == 1 \n        return [1]\n    else \n   \
    \     odd_collatz = get_odd_collatz(n / 2)\n        odd_collatz += [n * 2 if n\
    \ % 2 == 0 else n * 3 + 1 ]\n        return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\n\
    @time odd_collatz = get_odd_collatz(100)\n</cell>\n<code language=julia-1.5>\n\
    @time odd_collatz = get_odd_collatz(100)\n</cell>\n<code language=julia-1.5>\n\
    @time odd_collatz = get_odd_collatz(100)\n</cell>\n<code language=julia-1.5>\n\
    @time odd_collatz = get_odd_collatz(100)\n</cell>\n<code language=julia-1.5>\n\
    @time odd_collatz = get_odd_collatz(100)\n</cell>\n<code language=julia-1.5>\n\
    @time odd_collatz = get_odd_collatz(100)\n</cell>\n<code language=julia-1.5>\n\
    @time odd_collatz = get_odd_collatz(100)\n</cell>\n<code language=julia-1.5>\n\
    @time odd_collatz = get_odd_collatz(100)\n</cell>\n<code language=julia-1.5>\n\
    @time odd_collatz = get_odd_collatz(100)\n</cell>\n<code language=julia-1.5>\n\
    @time odd_collatz = get_odd_collatz(100)\n</cell>\n<code language=julia-1.5>\n\
    @time odd_collatz = get_odd_collatz(100)\n</cell>\n<code language=julia-1.5>\n\
    @time odd_collatz = get_odd_collatz(100)\n</cell>\n<code language=julia-1.5>\n\
    @time odd_collatz = get_odd_collatz(100)\n</cell>\n<code language=julia-1.5>\n\
    @time odd_collatz = get_odd_collatz(100)\n</cell>\n<code language=julia-1.5>\n\
    @time odd_collatz = get_odd_collatz(100)\n</cell>\n<code language=julia-1.5>\n\
    @time odd_collatz = get_odd_collatz(100)\n</cell>\n<code language=julia-1.5>\n\
    @time odd_collatz = get_odd_collatz(100)\n</cell>\n<code language=julia-1.5>\n\
    @time odd_col", "    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    odd_collatz .+= n % 2 == 0 ? [n / 2] : [n / 2] * 3\n    odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes in a positive integer n and returns the\
    \ number of steps to reach 1 from n.", "    if n == 1 \n        return [1]\n \
    \   \n    odd_list = []\n    \n    odd_list += get_odd_collatz(n-1)\n    odd_list\
    \ += [n/2]\n    odd_list += [n*3]\n    \n    return odd_list\nend", "    odd_list\
    \ = []\n    odd_list = [1]\n    if n == 1\n        odd_list\n    else\n      \
    \  odd_list = odd_list + get_odd_collatz(n-1)\n        if n % 2 == 0\n       \
    \     odd_list = odd_list + [n / 2]\n        else\n            odd_list = odd_list\
    \ + [n / 2] * 3\n        end\n    end\n    odd_list\nend\n</cell>\n<code language=julia-1.5>\n\
    get_odd_collatz(10)\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ in a positive integer n and returns the Collatz conjecture sequence for n.",
  "    if n == 1 \n        return [1]\n    \n    odd_list = []\n    \n    for x in\
    \ get_odd_collatz(n-1) do \n        if x % 2 == 1 \n            odd_list.append(x)\n\
    \        else \n            odd_list.append(x/2)\n    end\n    \n    odd_list\n\
    end\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes an integer n and returns the number of\
    \ even numbers less than or equal to n.", "    if n == 1 \n        return [1]\n\
    \    odd_list = []\n    odd_list += get_odd_collatz(n-1)\n    odd_list += [n/2]\n\
    \    odd_list += [n*3+1]\n    return odd_list\nend", "    if n == 1 \n       \
    \ return [1]\n    odd_list = []\n    odd_list += get_odd_collatz(n-1)\n    odd_list\
    \ += [n/2]\n    odd_list += [n*3+1]\n    return odd_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\nget_odd_collatz(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an integer n and returns the number of steps it takes\
    \ to reach 1 from the starting number n.", "    if n == 1 \n        return [1]\n\
    \    odd_list = []\n    odd_list += get_odd_collatz(n / 2)\n    odd_list += [n\
    \ * 3]\n    odd_list += get_odd_collatz(n % 2)\n    return odd_list\nend", " \
    \   if n == 1 \n        return [1]\n    \n    odd_list = []\n    \n    odd_list\
    \ += get_odd_collatz(n-1)\n    odd_list += [n/2]\n    \n    odd_list += [n*3+1]\n\
    \    \n    return odd_list\nend", "    if n == 1 \n        return [1]\n    \n\
    \    odd_list = []\n    \n    for n in get_odd_collatz(n / 2)\n        if n %\
    \ 2 == 0 \n            odd_list += [n]\n        else\n            odd_list +=\
    \ [n * 3]\n    end\n    \n    return odd_list\nend\n</cell>\n<code language=julia-1.5>\n\
    get_odd_collatz(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the factorial of a given positive integer n.", "    if n == 1 \n        return\
    \ [1]\n    odd_list = []\n    odd_list += get_odd_collatz(n-1)\n    odd_list +=\
    \ [n/2]\n    odd_list += [n*3]\n    return odd_list\nend\n</cell>\n<code language=julia-1.5>\n\
    get_odd_collatz(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an\
    \ integer n and returns the nth Fibonacci number.", "    if n == 1 \n        return\
    \ [1]\n    \n    odd_list = []\n    \n    for i in get_odd_collatz(n-1) do \n\
    \        if i % 2 == 0 \n            odd_list.append(i)\n        else \n     \
    \       odd_list.append(3*i+1)\n    end\n    \n    return odd_list\nend", "  \
    \  if n == 1 \n        return [1]\n    \n    odd_list = []\n    \n    for x in\
    \ get_odd_collatz(n-1) do \n        if x % 2 == 1 \n            odd_list += [x/2]\n\
    \        else \n            odd_list += [x*3]\n    end\n    \n    odd_list +=\
    \ [1]\n    \n    return odd_list\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in a positive integer\
    \ n and returns the nth Fibonacci number.", "    if n == 1 \n        return [1]\n\
    \    odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz .+= n % 2 == 0 ? [n\
    \ / 2] : [3 * n + 1]\n    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\n\
    get_odd_collatz(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the factorial of a given positive integer n.", "    if n == 1 \n        return\
    \ [1]\n    odd_list = []\n    odd_list += get_odd_collatz(n-1)\n    odd_list +=\
    \ [n/2]\n    odd_list += [n*3+1]\n    return odd_list\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n-1)\n\
    \        odd_collatz .+= [n/2]\n        odd_collatz .+= [n/3]\n        odd_collatz\
    \ .+= [n/3]\n        return odd_collatz\nend", "    if n == 1 \n        return\
    \ [1]\n    else \n        odd_collatz = get_odd_collatz(n-1)\n        odd_collatz\
    \ = [odd_collatz[1]*2, odd_collatz[1]*3+1]\n        return odd_collatz\nend\n\
    </cell>\n<code language=julia-1.0>\nget_odd_collatz(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the factorial of a given positive integer n.\
    \ \nFor example, factorial(5) = 5 x 4 x 3 x 2 x 1 = 120.", "    if n == 1 \n \
    \       return [1]\n    else \n        odd_collatz = get_odd_collatz(n / 2)\n\
    \        odd_collatz .+= [n * 2]\n        odd_collatz .+= [n * 3]\n        odd_collatz\
    \ .+= [n * 2]\n        odd_collatz .+= [n * 3]\n        odd_collatz .+= [n * 2]\n\
    \        odd_collatz .+= [n * 3]\n        odd_collatz .+= [n * 2]\n        odd_collatz\
    \ .+= [n * 3]\n        odd_collatz .+= [n * 2]\n        odd_collatz .+= [n * 3]\n\
    \        odd_collatz .+= [n * 2]\n        odd_collatz .+= [n * 3]\n        odd_collatz\
    \ .+= [n * 2]\n        odd_collatz .+= [n * 3]\n        odd_collatz .+= [n * 2]\n\
    \        odd_collatz .+= [n * 3]\n        odd_collatz .+= [n * 2]\n        odd_collatz\
    \ .+= [n * 3]\n        odd_collatz .+= [n * 2]\n        odd_collatz .+= [n * 3]\n\
    \        odd_collatz .+= [n * 2]\n        odd_collatz .+= [n * 3]\n        odd_collatz\
    \ .+= [n * 2]\n        odd_collatz .+= [n * 3]\n        odd_collatz .+= [n * 2]\n\
    \        odd_collatz .+= [n * 3]\n        odd_collatz .+= [n * 2]\n        odd_collatz\
    \ .+= [n * 3]\n        odd_collatz .+= [n * 2]\n        odd_collatz .+= [n * 3]\n\
    \        odd_collatz .+= [n * 2]\n        odd_collatz .+= [n * 3]\n        odd_collatz\
    \ .+= [n * 2]\n        odd_collatz .+= [n * 3]\n        odd_collatz .+= [n * 2]\n\
    \        odd_collatz .+= [n * 3]\n        odd_collatz .+= [n * 2]\n        odd_collatz\
    \ .+= [n * 3]\n        odd_collatz .+= [n * 2]\n        odd_collatz .+= [n * 3]\n\
    \        odd_collat", "    if n == 1 \n        return [1]\n    \n    odd_collatz\
    \ = get_odd_collatz(n / 2)\n    \n    if n % 2 == 1 \n        odd_collatz = [odd_collatz[1],\
    \ odd_collatz[1] * 3] + odd_collatz[2:end]\n    else \n        odd_collatz = [odd_collatz[1],\
    \ odd_collatz[1] * 3] + odd_collatz[2:end]\n    \n    return odd_collatz\nend",
  "    if n == 1 \n        return [1]\n    odd_list = []\n    odd_list += get_odd_collatz(n\
    \ / 2)\n    odd_list += [n * 3]\n    odd_list += get_odd_collatz(n / 2)\n    return\
    \ odd_list\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n\
    <code language=julia-1.5>", "    if n == 1 \n        return [1]\n    odd_list\
    \ = []\n    odd_list += get_odd_collatz(n-1)\n    odd_list += [n/2]\n    odd_list\
    \ += [n*3]\n    odd_list += [n*3+1]\n    return odd_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes in a positive integer n and returns the nth term of the\
    \ Fibonacci sequence. \nThe Fibonacci sequence is defined by the recurrence relation:",
  "    if n == 1 \n        return [1]\n    \n    odd_list = []\n    \n    for x in\
    \ get_odd_collatz(n - 1)\n        if x % 2 == 0\n            odd_list.append(x)\n\
    \        else\n            odd_list.append(x * 2 + 1)\n    end\n    \n    return\
    \ odd_list\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n\
    <code language=julia-1.5>", "    if n == 1 \n        return [1]\n    odd_list\
    \ = []\n    odd_list += get_odd_collatz(n-1)\n    odd_list += [n/2]\n    odd_list\
    \ += [n*3]\n    odd_list += [n*3+1]\n    return odd_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes in a positive integer n and returns the nth Fibonacci\
    \ number.", "    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n-1)\n\
    \    odd_collatz .+= [n/2]\n    if n % 2 == 1 \n        odd_collatz .+= [n*3]\n\
    \    odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes in a positive integer\
    \ n and returns the Collatz sequence up to n.", "    if n == 1 \n        return\
    \ [1]\n    \n    odd_collatz = get_odd_collatz(n / 2)\n    \n    if n % 2 == 0\
    \ \n        odd_collatz = [odd_collatz[1], odd_collatz[1] * 3] + odd_collatz[end]\n\
    \    else \n        odd_collatz = [odd_collatz[1] * 3, odd_collatz[1] * 3] + odd_collatz[end]\n\
    \    \n    return odd_collatz\nend", "    if n == 1 \n        return [1]\n   \
    \ \n    odd_collatz = get_odd_collatz(n / 2)\n    \n    if n % 2 == 0 \n     \
    \   odd_collatz .+= [n]\n    else \n        odd_collatz .+= [n * 3]\n    end\n\
    \    \n    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ get_odd_collatz(100)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ an integer n and returns the nth Fibonacci number.", "    if n == 1 \n     \
    \   return [1]\n    else \n        odd_collatz = get_odd_collatz(n / 2)\n    \
    \    odd_collatz += [n / 2]\n        odd_collatz += [n / 2 * 3]\n        odd_collatz\
    \ += [n / 2 * 3 * 5]\n        odd_collatz += [n / 2 * 3 * 5 * 7]\n        odd_collatz\
    \ += [n / 2 * 3 * 5 * 7 * 9]\n        odd_collatz += [n / 2 * 3 * 5 * 7 * 9 *\
    \ 11]\n        odd_collatz += [n / 2 * 3 * 5 * 7 * 9 * 11 * 13]\n        odd_collatz\
    \ += [n / 2 * 3 * 5 * 7 * 9 * 11 * 13 * 15]\n        odd_collatz += [n / 2 * 3\
    \ * 5 * 7 * 9 * 11 * 13 * 15 * 17]\n        odd_collatz += [n / 2 * 3 * 5 * 7\
    \ * 9 * 11 * 13 * 15 * 17 * 19]\n        odd_collatz += [n / 2 * 3 * 5 * 7 * 9\
    \ * 11 * 13 * 15 * 17 * 19 * 21]\n        odd_collatz += [n / 2 * 3 * 5 * 7 *\
    \ 9 * 11 * 13 * 15 * 17 * 19 * 21 * 23]\n        odd_collatz += [n / 2 * 3 * 5\
    \ * 7 * 9 * 11 * 13 * 15 * 17 * 19 * 21 * 23 * 25]\n        odd_collatz += [n\
    \ / 2 * 3 * 5 * 7 * 9 * 11 * 13 * 15 * 17 * 19 * 21 * 23 * 25 * 27]\n        odd_collatz\
    \ += [n / 2 * 3 * 5 * 7 * 9 * 11 * 13 * 15 * 17 * 19 * 21 * 23 * 25 * 27 * 29]\n\
    \        odd_collatz += [n / 2 * 3 * 5 * 7 * 9 * 11 * 13 * 15 * 17 * 19 * 21 *\
    \ 23 * 25 * 27 * 29 * 31]\n        odd_collatz += [n / 2 * 3 * 5 * 7 * 9 * 11\
    \ * 13 * 15 * 17 * 19 * 21 * 23 * 25 * 27 * 29 * 31 * 33]\n        odd_collatz\
    \ += [n / 2 * 3 * 5 * 7 * 9 * 11 * 13 * 15 * 17 * 19 * 21 * 23 * 25 * 27 * 29\
    \ * 31 * 33 * 35", "    if n == 1 \n        return [1]\n    else \n        odd_collatz\
    \ = get_odd_collatz(n / 2)\n        odd_collatz .+= n % 2 == 0 ? [n / 2] : [n\
    \ / 2] * 3 + 1\n        return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\n\
    get_odd_collatz(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the factorial of a given positive integer. \nThe factorial of a positive integer\
    \ is defined as the product of all the positive integers less than or equal to\
    \ it. \nFor example, 5! = 5 x 4 x 3 x 2 x 1 = 120.", "    if n == 1 \n       \
    \ return [1]\n    else \n        odd_list = []\n        for i in get_odd_collatz(n-1)\
    \ do \n            if i % 2 == 1 \n                odd_list += [i]\n         \
    \   else \n                odd_list += [i*3]\n        end\n        odd_list +=\
    \ [n]\n        return odd_list\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    get_odd_collatz(5)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the factorial of a given positive integer n.", "    odd_list = []\n    if n\
    \ == 1 \n        odd_list = [n]\n    else\n        odd_list = [1]\n        for\
    \ i in 2:n\n            if i%2 == 0\n                odd_list[i] = odd_list[i-1]*2\n\
    \            else\n                odd_list[i] = odd_list[i-1]*3 + 1\n       \
    \ end\n    end\n    return odd_list\nend\n</cell>\n<code language=julia-1.5>\n\
    get_odd_collatz(10)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ an integer n and returns the nth Fibonacci number.", "    if n == 1 \n     \
    \   return [1]\n    else \n        odd_collatz = get_odd_collatz(n / 2)\n    \
    \    odd_collatz .= [n * 3 + (n % 2 == 0)]\n        return odd_collatz\nend\n\
    </cell>\n<code language=julia-1.5>", "    if n == 1 \n        return [1]\n   \
    \ \n    odd_list = []\n    \n    odd_list += get_odd_collatz(n-1)\n    odd_list\
    \ += [n/2]\n    \n    return odd_list\nend", "    if n == 1 \n        return [1]\n\
    \    odd_list = []\n    odd_list += get_odd_collatz(n-1)\n    odd_list += [n/2]\n\
    \    odd_list += [n*3]\n    odd_list += [n*3+1]\n    return odd_list\nend\n</cell>\n\
    <code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes an integer $n$ and returns the number of steps it\
    \ takes to reach 1 from the initial value of $n$. For example, if the initial\
    \ value is 10, then the number of steps is 10.", "    if n == 1 \n        return\
    \ [1]\n    else \n        odd_collatz = get_odd_collatz(n / 2)\n        odd_collatz\
    \ .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n        return odd_collatz\nend\n</cell>\n\
    <code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes in a positive integer n and returns the number of\
    \ steps it takes to reach 1 from n.", "    if n == 1 \n        return [1]\n  \
    \  \n    odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz .+= [n * 3 if n\
    \ % 2 == 0 else 1]\n    odd_collatz\nend\n</cell>\n<code language=julia-1.5>\n\
    get_odd_collatz(10)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ in a positive integer n and returns the nth Fibonacci number.", "    odd_list\
    \ = Vector{Int64}()\n    odd_list = [1]\n    if n == 1\n        odd_list\n   \
    \ else\n        odd_list = odd_list + get_odd_collatz(n-1)\n        odd_list =\
    \ odd_list + [n/2]\n    end\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in a positive integer\
    \ n and returns the nth Fibonacci number.", "    if n == 1 \n        return [1]\n\
    \    else \n        odd_collatz = get_odd_collatz(n / 2)\n        odd_collatz\
    \ .= [n * 2 if n % 2 == 0 else n * 3 + 1]\n        return odd_collatz\nend\n</cell>\n\
    <code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes an integer $n$ and returns the number of steps to\
    \ reach 1 from $n$. For example, get_steps(3) should return 3.", "    if n ==\
    \ 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n / 2)\n   \
    \ odd_collatz .= [n * 2 if n % 2 == 0 else n * 3 + 1 for i in odd_collatz]\n \
    \   \n    return odd_collatz\nend", "    if n == 1 \n        return [1]\n    else\
    \ \n        odd_collatz = get_odd_collatz(n / 2)\n        odd_collatz .= [n *\
    \ 2 if n % 2 == 0 else n * 3 + 1 for i in odd_collatz]\n        return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the nth Fibonacci number using recursion.",
  "    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz += [n % 2]\n    if n % 2 == 1 \n        odd_collatz += [n / 2]\n\
    \    odd_collatz\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a\
    \ positive integer n, return a sorted list that has the even numbers in collatz\
    \ sequence.", "    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    odd_collatz .+= n % 2 == 0 ? [n / 2] : [n / 2] * 3 + 1\n    odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a given positive integer\
    \ n.", "    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz += [n / 2]\n        odd_collatz += [n / 2 * 3]\n \
    \       odd_collatz += [n / 2 * 3 * 5]\n        odd_collatz += [n / 2 * 3 * 5\
    \ * 7]\n        odd_collatz += [n / 2 * 3 * 5 * 7 * 9]\n        odd_collatz +=\
    \ [n / 2 * 3 * 5 * 7 * 9 * 11]\n        odd_collatz += [n / 2 * 3 * 5 * 7 * 9\
    \ * 11 * 13]\n        odd_collatz += [n / 2 * 3 * 5 * 7 * 9 * 11 * 13 * 15]\n\
    \        odd_collatz += [n / 2 * 3 * 5 * 7 * 9 * 11 * 13 * 15 * 17]\n        odd_collatz\
    \ += [n / 2 * 3 * 5 * 7 * 9 * 11 * 13 * 15 * 17 * 19]\n        odd_collatz +=\
    \ [n / 2 * 3 * 5 * 7 * 9 * 11 * 13 * 15 * 17 * 19 * 21]\n        odd_collatz +=\
    \ [n / 2 * 3 * 5 * 7 * 9 * 11 * 13 * 15 * 17 * 19 * 21 * 23]\n        odd_collatz\
    \ += [n / 2 * 3 * 5 * 7 * 9 * 11 * 13 * 15 * 17 * 19 * 21 * 23 * 25]\n       \
    \ odd_collatz += [n / 2 * 3 * 5 * 7 * 9 * 11 * 13 * 15 * 17 * 19 * 21 * 23 * 25\
    \ * 27]\n        odd_collatz += [n / 2 * 3 * 5 * 7 * 9 * 11 * 13 * 15 * 17 * 19\
    \ * 21 * 23 * 25 * 27 * 29]\n        odd_collatz += [n / 2 * 3 * 5 * 7 * 9 * 11\
    \ * 13 * 15 * 17 * 19 * 21 * 23 * 25 * 27 * 29 * 31]\n        odd_collatz += [n\
    \ / 2 * 3 * 5 * 7 * 9 * 11 * 13 * 15 * 17 * 19 * 21 * 23 * 25 * 27 * 29 * 31 *\
    \ 33]\n        odd_collatz += [n / 2 * 3 * 5 * 7 * 9 * 11 * 13 * 15 * 17 * 19\
    \ * 21 * 23 * 25 * 27 * 29 * 31 * 33 * 35", "    if n == 1 \n        return [1]\n\
    \    \n    odd_list = []\n    odd_list += get_odd_collatz(n-1)\n    odd_list +=\
    \ [n/2]\n    odd_list += [n*3+1]\n    return odd_list\nend", "    if n == 1 \n\
    \        return [1]\n    else \n        odd_list = []\n        for n in get_odd_collatz(n-1)\
    \ do \n            if n % 2 == 0 \n                odd_list.append(n) \n     \
    \       else \n                odd_list.append(n*3 + 1)\n        end\n       \
    \ return odd_list\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz .+= [n * 3 if n % 2 == 0 else n * 2 + 1]\n       \
    \ return odd_collatz\nend\n</cell>\n<code language=julia-1.5>", "    if n == 1\
    \ \n        return [1]\n    odd_nums = Vector{Int64}()\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_", "    if n == 1 \n        return [1]\n    \n\
    \    odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz .+= [n * 3 if n % 2\
    \ == 0 else 1]\n    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\n\
    get_odd_collatz(10)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ an integer $n$ and returns the number of steps it takes to reach 1 from $n$.\
    \ For example, get_steps(10) should return 3.", "    if n == 1 \n        return\
    \ [1]\n    else \n        odd_collatz = get_odd_collatz(n / 2)\n        odd_collatz\
    \ .+= [n * 3]\n        if n % 2 == 1 \n            odd_collatz .+= [n * 3]\n \
    \       end\n        return odd_collatz\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    get_odd_collatz(10)\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a positive integer n and returns the nth Fibonacci number.", "    if n == 1\
    \ \n        return [1]\n    odd_list = []\n    odd_list += get_odd_collatz(n/2)\n\
    \    odd_list += [n/2]\n    odd_list += [n*3+1]\n    return odd_list\nend\n</cell>\n\
    <code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a given positive integer. \nThe\
    \ factorial of a positive integer is defined as the product of all the positive\
    \ integers less than or equal to it. \nFor example, 5! = 5 x 4 x 3 x 2 x 1 = 120.\
    \ \nWrite a function that returns the factorial of a given positive integer n.\
    \ \nThe factorial of a positive integer is defined as the product of all the positive\
    \ integers less than or equal to it. \nFor example, 5! = 5 x 4 x 3 x 2 x 1 = 120.\
    \ \nWrite a function that returns the factorial of a given positive integer n.\
    \ \nThe factorial of a positive integer is defined as the product of all the positive\
    \ integers less than or equal to it. \nFor example, 5! = 5 x 4 x 3 x 2 x 1 = 120.\
    \ \nWrite a function that returns the factorial of a given positive integer n.\
    \ \nThe factorial of a positive integer is defined as the product of all the positive\
    \ integers less than or equal to it. \nFor example, 5! = 5 x 4 x 3 x 2 x 1 = 120.\
    \ \nWrite a function that returns the factorial of a given positive integer n.\
    \ \nThe factorial of a positive integer is defined as the product of all the positive\
    \ integers less than or equal to it. \nFor example, 5! = 5 x 4 x 3 x 2 x 1 = 120.\
    \ \nWrite a function that returns the factorial of a given positive integer n.\
    \ \nThe factorial of a positive integer is defined as the product of all the positive\
    \ integers less than or equal to it. \nFor example, 5! = 5 x 4 x 3 x 2 x 1 = 120.\
    \ \nWrite a function that returns the factorial of a given positive integer n.\
    \ \nThe factorial of a positive integer is defined as the product of all the positive\
    \ integers less than or equal to it. \nFor example, 5! = 5 x 4 x 3 x 2 x 1 = 120.\
    \ \nWrite a function that returns the factorial of a given positive integer n.\
    \ \nThe factorial of a positive integer is defined as the product of all the positive\
    \ integers less than or equal to it. \nFor example, 5! = 5 x 4 x 3 x 2 x 1 = 120.\
    \ \nWrite a function that returns the factorial of a given positive integer n.\
    \ \nThe factorial of a positive integer is defined as the product of all the positive\
    \ integers less than or equal to it. \nFor example, 5! = 5 x 4 x 3 x 2 x 1 = 120.\
    \ \nWrite a function that returns the factorial of a given positive ", "    if\
    \ n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz .+= [n * 3 if n % 2 == 0 else n * 2 + 1]\n       \
    \ return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in a positive integer\
    \ n and returns the number of steps it takes to reach 1 from n.", "    if n ==\
    \ 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n-1)\n\
    \        odd_collatz .+= [n/2]\n        odd_collatz .+= [n/3]\n        odd_collatz\
    \ .+= [n/5]\n        odd_collatz .+= [n/7]\n        odd_collatz .+= [n/11]\n \
    \       odd_collatz .+= [n/13]\n        odd_collatz .+= [n/17]\n        odd_collatz\
    \ .+= [n/19]\n        odd_collatz .+= [n/23]\n        odd_collatz .+= [n/29]\n\
    \        odd_collatz .+= [n/37]\n        odd_collatz .+= [n/53]\n        odd_collatz\
    \ .+= [n/59]\n        odd_collatz .+= [n/67]\n        odd_collatz .+= [n/83]\n\
    \        odd_collatz .+= [n/99]\n        odd_collatz .+= [n/107]\n        odd_collatz\
    \ .+= [n/113]\n        odd_collatz .+= [n/129]\n        odd_collatz .+= [n/131]\n\
    \        odd_collatz .+= [n/137]\n        odd_collatz .+= [n/143]\n        odd_collatz\
    \ .+= [n/149]\n        odd_collatz .+= [n/153]\n        odd_collatz .+= [n/157]\n\
    \        odd_collatz .+= [n/163]\n        odd_collatz .+= [n/169]\n        odd_collatz\
    \ .+= [n/173]\n        odd_collatz .+= [n/177]\n        odd_collatz .+= [n/183]\n\
    \        odd_collatz .+= [n/189]\n        odd_collatz .+= [n/193]\n        odd_collatz\
    \ .+= [n/197]\n        odd_collatz .+= [n/203]\n        odd_collatz .+= [n/209]\n\
    \        odd_collatz .+= [n/213]\n        odd_collatz .+= [n/217]\n        odd_collatz\
    \ .+= [n/", "    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    odd_collatz += [n / 2] * (n % 2 == 1 ? 1 : 3)\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes in a list of numbers and returns the number\
    \ of even numbers in the list.", "    if n == 1 \n        return [1]\n    odd_list\
    \ = []\n    odd_list += get_odd_collatz(n-1)\n    odd_list += [n/2]\n    odd_list\
    \ += [n*3]\n    odd_list += [n*3+1]\n    return odd_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an integer n and returns the nth Fibonacci number.", " \
    \   if n == 1 \n        return [1]\n    odd_list = []\n    odd_list += get_odd_collatz(n-1)\n\
    \    odd_list += [n/2]\n    odd_list += [n*3+1]\n    return odd_list\nend\n</cell>\n\
    <code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the nth term of the Fibonacci sequence. \nThe Fibonacci\
    \ sequence is defined by the recurrence relation:", "    if n == 1 \n        return\
    \ [1]\n    odd_list = []\n    odd_list += get_odd_collatz(n-1)\n    odd_list +=\
    \ [n/2]\n    odd_list += [n*3]\n    return odd_list\nend\n</cell>\n<code language=julia-1.4>\n\
    get_odd_collatz(10)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ an integer $n$ and returns the number of steps it takes to reach 1 from $n$.\
    \ For example, get_steps(5) should return 3.", "    if n == 1 \n        return\
    \ [1]\n    \n    odd_list = []\n    \n    for n in get_odd_collatz(n-1)\n    \
    \    if n % 2 == 1\n            odd_list.append(n/2)\n        else\n         \
    \   odd_list.append(n*3+1)\n    end\n    \n    return odd_list\nend\n</cell>\n\
    <code language=julia-1.5>\nget_odd_collatz(5)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the factorial of a given positive integer n.", "   \
    \ if n == 1 \n        return [1]\n    \n    odd_list = []\n    \n    odd_list\
    \ += get_odd_collatz(n-1)\n    odd_list += [n/2]\n    \n    return odd_list\n\
    end\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a positive integer n and returns the number\
    \ of steps it takes to reach 1 from the first even number.", "    if n == 1 \n\
    \        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz\
    \ += [n / 2]\n    if n % 2 == 1 \n        odd_collatz += [n / 2]\n    end\n  \
    \  return odd_collatz\nend", "    if n == 1 \n        return [1]\n    odd_list\
    \ = []\n    odd_list += get_odd_collatz(n-1)\n    odd_list += [n/2]\n    odd_list\
    \ += [n*3+1]\n    return odd_list\nend\n</cell>\n<code language=julia-1.5>", " \
    \   if n == 1 \n        return [1]\n    else \n        odd_list = []\n       \
    \ for i in get_odd_collatz(n-1) do \n            if i % 2 == 1 \n            \
    \    odd_list.append(i)\n            else \n                odd_list.append(i*2)\n\
    \        end\n        odd_list\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    Given a positive integer n, return a sorted list that has the even\
    \ numbers in collatz sequence.", "    if n == 1 \n        return [1]\n    odd_list\
    \ = []\n    odd_list += get_odd_collatz(n-1)\n    odd_list += [n/2]\n    odd_list\
    \ += [n*3+1]\n    return odd_list\nend", "    if n == 1 \n        return [1]\n\
    \    \n    odd_list = []\n    \n    for i in get_odd_collatz(n - 1) do \n    \
    \    if i % 2 == 0 \n            odd_list.append(i)\n        else \n         \
    \   odd_list.append(i*2 + 1)\n    end\n    \n    return odd_list\nend\n</cell>\n\
    <code language=julia-1.5>\n@time odd_list = get_odd_collatz(100)\n</cell>\n<code\
    \ language=julia-1.5>\n@time odd_list = get_odd_collatz(100)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes in a positive integer n and returns the\
    \ n-th Fibonacci number.", "    if n == 1 \n        return [1]\n    odd_collatz\
    \ = get_odd_collatz(n / 2)\n    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n\
    \ + 1]\n    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the nth Fibonacci number.",
  "    if n == 1 \n        return [1]\n    odd_list = []\n    odd_list += get_odd_collatz(n-1)\n\
    \    odd_list += [n/2]\n    odd_list += [n*3+1]\n    return odd_list\nend\n</cell>\n\
    <code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a positive integer n and returns the number of steps\
    \ to reach 1 from the starting number n.", "    if n == 1 \n        return [1]\n\
    \    \n    odd_list = []\n    \n    for x in get_odd_collatz(n-1) do \n      \
    \  if x % 2 == 1 \n            odd_list.append(x)\n        else \n           \
    \ odd_list.append(x+1)\n    end\n    \n    return odd_list\nend\n</cell>\n<code\
    \ language=julia-1.3>\n@time get_odd_collatz(100)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the factorial of a given positive integer n.", " \
    \   if n == 1 \n        return [1]\n    else \n        collatz = get_odd_collatz(n\
    \ / 2)\n        push!(collatz, n % 2 == 0 ? n : 3 * n + 1) \n        return collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes an integer $n$ and returns the number\
    \ of steps it takes to reach 1 from $n$. For example, get_steps(5) should return\
    \ 3.", "    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz += [n * 3 if n % 2 == 0 else n * 2 + 1]\n        return\
    \ odd_collatz\nend", "    if n == 1 \n        return [1]\n    odd_list = []\n\
    \    for x in get_odd_collatz(n-1) \n        if x % 2 == 1 \n            odd_list\
    \ += [x/2]\n        else \n            odd_list += [x*3] + [1]\n    end\n    return\
    \ odd_list\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes in a positive integer n and returns\
    \ the nth term of the Fibonacci sequence. \nThe Fibonacci sequence is defined\
    \ by the recurrence relation:", "    if n == 1 \n        return [1]\n    \n  \
    \  odd_list = []\n    \n    for x in get_odd_collatz(n-1) do \n        if x %\
    \ 2 == 1 \n            odd_list.append(x)\n        else\n            odd_list.append(x/2)\n\
    \        end\n    end\n    \n    return odd_list\nend\n</cell>\n<code language=julia-1.5>\n\
    get_odd_collatz(10)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ in an integer n and returns the nth Fibonacci number.", "    if n == 1 \n  \
    \      return [1]\n    else \n        odd_collatz = get_odd_collatz(n / 2)\n \
    \       odd_collatz .+= [n * 3]\n        odd_collatz .+= [n * 3]\n        return\
    \ odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in a positive integer\
    \ n and returns the number of steps it takes to reach 1 from n.", "    if n ==\
    \ 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n /\
    \ 2)\n        odd_collatz .= [n * 3 + (n % 2 == 0)]\n        return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes in a positive integer n and returns the\
    \ nth Fibonacci number.", "    if n == 1 \n        return [1]\n    \n    odd_list\
    \ = []\n    \n    for x in get_odd_collatz(n-1) do \n        if x % 2 == 1 \n\
    \            odd_list.append(x)\n        else\n            odd_list.append(3*x\
    \ + 1)\n        end\n    end\n    \n    return odd_list\nend\n</cell>\n<code language=julia-1.5>\n\
    @time odd_list = get_odd_collatz(100)\n</cell>\n<code language=julia-1.5>\n@time\
    \ odd_list = get_odd_collatz(100)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes in a positive integer n and returns the nth Fibonacci number.", " \
    \   odd_list = []\n    odd_list.append(1)\n    odd_list.append(n)\n    while odd_list[2]\
    \ != 1\n        odd_list[1] = odd_list[2]\n        odd_list[2] = odd_list[1] /\
    \ 2\n        odd_list[1] = odd_list[1] % 2\n        odd_list.append(odd_list[2])\n\
    \    end\n    return odd_list\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes in a positive integer\
    \ n and returns the number of steps to reach 1 from the first even number. For\
    \ example, get_evens_steps(5) returns 3.", "    odd_list = []\n    odd_list =\
    \ [1]\n    \n    while n != 1\n        if n % 2 == 0\n            odd_list .=\
    \ odd_list .+ [n / 2]\n            n = n / 2\n        else\n            odd_list\
    \ .= odd_list .+ [3*n+1, 3*n+2]\n            n = (3*n+2)/2\n        end\n    end\n\
    \    return odd_list\nend", "    if n == 1 \n        return [1]\n    else \n \
    \       odd_nums = Vector{Int64}()\n        odd_nums.push(get_odd_collatz(n-1))\n\
    \        odd_nums.push(get_odd_collatz(n/2))\n        odd_nums.push(get_odd_collatz(n*3+1))\
    \ \n        return odd_nums\n    end\nend", "    odd_list = []\n    if n == 1\n\
    \        odd_list = [n]\n    else\n        odd_list = [1]\n        for i in 2:n\n\
    \            if isodd(i)\n                odd_list .= [i/2, 3*i+1]\n         \
    \   else\n                odd_list .= [i/2, 3*i+1]\n        end\n    end\n   \
    \ return odd_list\nend\n</cell>\n<code language=julia-1.5>", "    if n == 1 \n\
    \        return [1]\n    odd_list = []\n    odd_list += get_odd_collatz(n/2)\n\
    \    odd_list += [n/2]\n    odd_list += [n*3+1]\n    return odd_list\nend\n</cell>\n\
    <code language=julia-1.3>\nget_odd_collatz(10)\n</cell>\n<text>\nProblem 3\nWrite\
    \ a function that takes an integer n and returns the nth Fibonacci number.", " \
    \   if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz .+= [n * 2]\n        odd_collatz .+= [n * 3]\n   \
    \     odd_collatz .+= [n * 2]\n        return odd_collatz\nend\n</cell>\n<code\
    \ language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the first n positive integers greater than or equal\
    \ to n.", "    if n == 1 \n        return [1]\n    else \n        odd_collatz\
    \ = get_odd_collatz(n / 2)\n        odd_collatz .+= [n * 3]\n        odd_collatz\
    \ .+= [n * 3]\n        return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\n\
    get_odd_collatz(10)\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ in a positive integer n and returns the nth Fibonacci number.", "    if n ==\
    \ 1 \n        return [1]\n    odd_list = []\n    odd_list += get_odd_collatz(n-1)\n\
    \    odd_list += [n/2]\n    odd_list += [n*3]\n    odd_list += [n*3+1]\n    return\
    \ odd_list\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes in a positive integer n and returns\
    \ the number of steps it takes to reach 1 from n.", "    odd_list = []\n    if\
    \ n==1 \n        odd_list = [n]\n    else\n        odd_list = [1]\n        for\
    \ i in 2:n\n            if i%2==0 \n                odd_list.append(i/2)\n   \
    \         else \n                odd_list.append(3*i+1)\n    end\n    return odd_list\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n == 1 \n        return [1]\n\
    \    else \n        odd_collatz = get_odd_collatz(n / 2)\n        odd_collatz\
    \ .+= [n * 3 if n % 2 == 0 else 1]\n        return odd_collatz\nend\n</cell>\n\
    <code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the nth number in the Fibonacci sequence. \nThe\
    \ Fibonacci sequence is defined by the recurrence relation:", "    if n == 1 \n\
    \        return [1]\n    odd_list = []\n    odd_list += get_odd_collatz(n-1)\n\
    \    odd_list += [n/2]\n    odd_list += [n*3]\n    odd_list += [n*3+1]\n    return\
    \ odd_list\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes in a positive integer n and returns\
    \ the nth term of the Fibonacci sequence. \nThe Fibonacci sequence is defined\
    \ by the recurrence relation:", "    if n == 1 \n        return [1]\n    odd_collatz\
    \ = get_odd_collatz(n / 2)\n    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n\
    \ + 1]\n    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ given positive integer.", "    if n == 1 \n        return [1]\n    \n    odd_collatz\
    \ = get_odd_collatz(n / 2)\n    \n    if n % 2 == 0 \n        odd_collatz += [n\
    \ / 2]\n    else \n        odd_collatz += [n / 2] * 3 + 1\n    \n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.4>\nget_odd_collatz(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the nth Fibonacci number using recursion.",
  "    if n == 1 \n        return [1]\n    \n    odd_list = []\n    \n    odd_list\
    \ += get_odd_collatz(n-1)\n    odd_list += [n/2]\n    \n    return odd_list\n\
    end", "    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    \n    if n % 2 == 1 \n        odd_collatz = [odd_collatz[1], odd_collatz[1]\
    \ * 3] + odd_collatz[2:end]\n    else \n        odd_collatz = [odd_collatz[1],\
    \ odd_collatz[1] * 3] + odd_collatz[2:end]\n    \n    return odd_collatz\nend",
  "    if n == 1 \n        return [1]\n    else \n        collatz = get_odd_collatz(n\
    \ / 2)\n        push!(collatz, n % 2)\n        return collatz\nend", "    if n\
    \ == 1 \n        return [1]\n    else \n        odd_list = []\n        for i in\
    \ get_odd_collatz(n-1) do \n            if i % 2 == 0 \n                odd_list.append(i)\n\
    \            else \n                odd_list.append(i*3 + 1)\n        end\n  \
    \      return odd_list\n    end\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer n\
    \ and returns the number of steps it takes to reach 1 from n.", "    if n == 1\
    \ \n        return [1]\n    odd_list = []\n    odd_list += get_odd_collatz(n-1)\n\
    \    odd_list += [n/2]\n    odd_list += [n*3]\n    odd_list += [n*3+1]\n    return\
    \ odd_list\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes an integer n and returns the nth\
    \ Fibonacci number.", "    if n == 1 \n        return [1]\n    else \n       \
    \ odd_list = []\n        for i in get_odd_collatz(n-1) do \n            if i %\
    \ 2 == 1 \n                odd_list += [i]\n            else \n              \
    \  odd_list += [i*3]\n        end\n        return odd_list\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the nth term of the Fibonacci sequence. \nThe Fibonacci\
    \ sequence is defined by the recurrence relation:", "    if n == 1 \n        return\
    \ [1]\n    odd_list = []\n    odd_list += get_odd_collatz(n / 2)\n    odd_list\
    \ += [n * 3]\n    odd_list += get_odd_collatz(n / 2)\n    return odd_list\nend\n\
    </cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that takes in a positive integer n and returns the nth term\
    \ of the Fibonacci sequence. \nThe Fibonacci sequence is defined by the recurrence\
    \ relation:", "    if n == 1 \n        return [1]\n    else \n        odd_collatz\
    \ = get_odd_collatz(n / 2)\n        odd_collatz .+= [n * 2 % n]\n        odd_collatz\
    \ .+= [n * 3 % n]\n        return odd_collatz\nend", "    if n == 1 \n       \
    \ return [1]\n    odd_list = []\n    odd_list += get_odd_collatz(n-1)\n    odd_list\
    \ += [n/2]\n    odd_list += [n*3]\n    return odd_list\nend\n</cell>\n<code language=julia-1.5>\n\
    get_odd_collatz(5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes in\
    \ a positive integer n and returns the number of steps to reach 1 from n.", " \
    \   if n == 1 \n        return [1]\n    odd_list = []\n    odd_list += get_odd_collatz(n-1)\n\
    \    odd_list += [n/2]\n    odd_list += [n*3]\n    odd_list += [n*3+1]\n    return\
    \ odd_list\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes in a positive integer n and returns\
    \ the number of steps it takes to reach 1 from the first odd number in the Collatz\
    \ sequence. For example, get_odd_steps(5) should return 3 since it takes 3 steps\
    \ to reach 1 from the first odd number in the Collatz sequence starting with 5.",
  "    if n == 1 \n        return [1]\n    odd_list = []\n    for x in get_odd_collatz(n\
    \ - 1) \n        if x % 2 == 1 \n            odd_list.append(x)\n            odd_list.append(x/2)\n\
    \        else \n            odd_list.append(3*x + 1)\n    end\n    return odd_list\n\
    end\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a positive integer n and returns the nth\
    \ term of the Fibonacci sequence.", "    if n == 1 \n        return [1]\n    odd_list\
    \ = []\n    odd_list += get_odd_collatz(n-1)\n    odd_list += [n/2]\n    odd_list\
    \ += [n*3+1]\n    return odd_list\nend", "    if n == 1 \n        return [1]\n\
    \    odd_collatz = get_odd_collatz(n-1)\n    odd_collatz += [n/2]\n    if n %\
    \ 2 == 1 \n        odd_collatz += [n*3]\n    odd_collatz\nend\n</cell>\n<code\
    \ language=julia-1.4>\n\"\"\"\n    Given a positive integer n, return a sorted\
    \ list that has the even numbers in collatz sequence.", "    if n == 1 \n    \
    \    return [1]\n    else \n        odd_collatz = get_odd_collatz(n / 2)\n   \
    \     odd_collatz += [n / 2] * (n % 2 == 0 ? 1 : 3)\n        return odd_collatz\n\
    end", "    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz += [n * 3 if n % 2 == 0 else n * 2 + 1]\n        return\
    \ odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first n prime numbers.\
    \ \nThe function should take an input n and return the prime numbers in increasing\
    \ order.", "    if n == 1 \n        return [1]\n    \n    odd_list = []\n    \n\
    \    for x in get_odd_collatz(n-1) do \n        if x % 2 == 1 \n            odd_list.append(x)\n\
    \        else\n            odd_list.append(x * 2 + 1)\n    end\n    \n    return\
    \ odd_list\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a positive integer n and returns\
    \ the number of steps it takes to reach 1 from n.", "    if n == 1 \n        return\
    \ [1]\n    odd_list = []\n    odd_list += get_odd_collatz(n-1)\n    odd_list +=\
    \ [n/2]\n    odd_list += [n*3]\n    odd_list += [n*3+1]\n    return odd_list\n\
    end", "    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz .+= [n * 3 if n % 2 == 0 else n * 2 + 1]\n       \
    \ return odd_collatz\nend", "    if n == 1 \n        return [1]\n    \n    odd_collatz\
    \ = get_odd_collatz(n / 2)\n    odd_collatz .= [n * 3 + (n % 2 == 0)]\n    odd_collatz\
    \ .= odd_collatz .+ get_odd_collatz(n / 2)\n    return odd_collatz\nend\n</cell>\n\
    <code language=julia-1.5>\nget_odd_collatz(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the nth Fibonacci number.", "    if n == 1 \n      \
    \  return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz += [n\
    \ * 2 if n % 2 == 0 else n * 3]\n    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n-1)\n\
    \    \n    if n % 2 == 0 \n        odd_collatz .+= [n/2]\n    else \n        odd_collatz\
    \ .+= [n*3]\n    \n    return odd_collatz\nend", "    if n == 1 \n        return\
    \ [1]\n    else \n        odd_nums = get_odd_collatz(n/2)\n        odd_nums.push(3*n+1)\n\
    \        return odd_nums\n    end\nend\n</cell>\n<code language=julia-1.5>", " \
    \   if n == 1 \n        return [1]\n    \n    odd_list = []\n    \n    for i in\
    \ get_odd_collatz(n-1) do \n        if i % 2 == 1 \n            odd_list.append(i)\n\
    \        else \n            odd_list.append(i*2)\n            \n            odd_list.append(i*3+1)\n\
    \    end\n    \n    return odd_list\nend\n</cell>\n<code language=julia-1.5>\n\
    get_odd_collatz(10)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ an integer n and returns the nth Fibonacci number.", "    if n == 1 \n     \
    \   return [1]\n    else \n        odd_collatz = get_odd_collatz(n-1) + [n/2]\n\
    \        odd_collatz = [i for i in odd_collatz if i % 2 == 1]\n        return\
    \ odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an integer n and returns\
    \ the number of even numbers less than or equal to n.", "    if n == 1 \n    \
    \    return [1]\n    \n    odd_list = []\n    \n    for n in get_odd_collatz(n-1)\n\
    \        if n % 2 == 1\n            odd_list += [n/2]\n        else\n        \
    \    odd_list += [n*3] + [n/2]\n    end\n    \n    return odd_list\nend", "  \
    \  if n == 1 \n        return [1]\n    odd_list = []\n    odd_list += get_odd_collatz(n-1)\n\
    \    odd_list += [n/2]\n    odd_list += [n*3]\n    return odd_list\nend", "  \
    \  if n == 1 \n        return [1]\n    odd_list = []\n    odd_list += get_odd_collatz(n\
    \ / 2)\n    odd_list += [n * 3]\n    odd_list += get_odd_collatz(n / 2)\n    return\
    \ odd_list\nend\n</cell>\n<code language=julia-1.0>\nget_odd_collatz(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an integer $n$ and returns the\
    \ number of steps it takes to reach 1 from $n$. \nFor example, given $n = 10$,\
    \ the function should return $5$.", "    if n == 1 \n        return [1]\n    odd_list\
    \ = []\n    odd_list += get_odd_collatz(n-1)\n    odd_list += [n/2]\n    odd_list\
    \ += [n*3+1]\n    return odd_list\nend", "    if n == 1 \n        return [1]\n\
    \    else \n        odd_nums = get_odd_collatz(n-1)\n        odd_nums.push(3*n+1)\n\
    \        return odd_nums\nend", "    if n == 1 \n        return [1]\n    odd_list\
    \ = []\n    odd_list += get_odd_collatz(n-1)\n    odd_list += [n/2]\n    odd_list\
    \ += [n*3]\n    odd_list += [n*3+1]\n    return odd_list\nend", "    if n == 1\
    \ \n        return [1]\n    odd_list = []\n    odd_list += get_odd_collatz(n /\
    \ 2)\n    odd_list += [n * 3]\n    odd_list += get_odd_collatz(n / 2)\n    return\
    \ odd_list\nend\n</cell>\n<code language=julia-1.0>\nget_odd_collatz(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the factorial of a given number.\
    \ \nThe factorial of a number $n$ is defined as the product of all the positive\
    \ integers less than or equal to $n$. \nFor example, factorial(5) = 5 \xD7 4 \xD7\
    \ 3 \xD7 2 \xD7 1 = 120.", "    odd_list = []\n    odd_list = [1]\n    if n ==\
    \ 1 \n        odd_list = [1]\n        return odd_list\n    elseif n % 2 == 0 \n\
    \        odd_list = [n, 3*n+1]\n        return odd_list\n    else\n        odd_list\
    \ = [n, 3*n+1]\n        return odd_list\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    get_odd_collatz(10)\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a positive integer n and returns the nth Fibonacci number.", "    if n == 1\
    \ \n        return [1]\n    odd_list = []\n    odd_list += get_odd_collatz(n-1)\n\
    \    odd_list += [n/2]\n    odd_list += [n*3+1]\n    return odd_list\nend", " \
    \   if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz .= [n * 3 if n % 2 == 0 else n * 2 + 1]\n        return\
    \ odd_collatz\nend", "    if n == 1 \n        return [1]\n    odd_list = []\n\
    \    odd_list += get_odd_collatz(n-1)\n    odd_list += [n/2]\n    odd_list +=\
    \ [n*3]\n    return odd_list\nend", "    odd_list = Vector{Int64}()\n    if n\
    \ == 1\n        odd_list = [n]\n    else\n        odd_list = get_odd_collatz(n\
    \ / 2)\n        if n % 2 == 0\n            odd_list.append(n / 2)\n        else\n\
    \            odd_list.append(3 * odd_list[-1] + 1)\n        end\n    end\n   \
    \ return odd_list\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n\
    </cell>\n<text>\nProblem 3\nWrite a function that takes in a positive integer\
    \ n and returns the nth term of the Fibonacci sequence. \nThe Fibonacci sequence\
    \ is defined by the recurrence relation:", "    if n == 1 \n        return [1]\n\
    \    odd_list = []\n    odd_list += get_odd_collatz(n-1)\n    odd_list += [n/2]\n\
    \    odd_list += [n*3]\n    odd_list += [n*3+1]\n    return odd_list\nend\n</cell>\n\
    <code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<code language=julia-1.5>",
  "    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? [n / 2] : [n / 2] * 3\n    odd_collatz\nend\n\
    </cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes an integer n and returns the first n odd numbers\
    \ in Collatz sequence.", "    if n == 1 \n        return [1]\n    odd_list = []\n\
    \    odd_list += get_odd_collatz(n-1)\n    odd_list += [n/2]\n    odd_list +=\
    \ [n*3+1]\n    return odd_list\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ get_odd_collatz(5) == [1, 5]\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the Collatz conjecture for n \u2264 100. Your function should work\
    \ for any positive integer n.", "    if n == 1 \n        return [1]\n    odd_list\
    \ = []\n    for x in get_odd_collatz(n - 1) \n        if x % 2 == 1 \n       \
    \     odd_list += [x/2]\n        else \n            odd_list += [x * 3] + [1]\n\
    \    end\n    return odd_list\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given positive integer n.", "    if n == 1 \n        return [1]\n    \n    odd_list\
    \ = []\n    odd_list += get_odd_collatz(n-1)\n    odd_list += [n/2]\n    odd_list\
    \ += [n*3]\n    odd_list += [n*3+1]\n    odd_list += [n*3+1]\n    odd_list +=\
    \ [n*3+1]\n    odd_list += [n*3+1]\n    odd_list += [n*3+1]\n    odd_list += [n*3+1]\n\
    \    odd_list += [n*3+1]\n    odd_list += [n*3+1]\n    odd_list += [n*3+1]\n \
    \   odd_list += [n*3+1]\n    odd_list += [n*3+1]\n    odd_list += [n*3+1]\n  \
    \  odd_list += [n*3+1]\n    odd_list += [n*3+1]\n    odd_list += [n*3+1]\n   \
    \ odd_list += [n*3+1]\n    odd_list += [n*3+1]\n    odd_list += [n*3+1]\n    odd_list\
    \ += [n*3+1]\n    odd_list += [n*3+1]\n    odd_list += [n*3+1]\n    odd_list +=\
    \ [n*3+1]\n    odd_list += [n*3+1]\n    odd_list += [n*3+1]\n    odd_list += [n*3+1]\n\
    \    odd_list += [n*3+1]\n    odd_list += [n*3+1]\n    odd_list += [n*3+1]\n \
    \   odd_list += [n*3+1]\n    odd_list += [n*3+1]\n    odd_list += [n*3+1]\n  \
    \  odd_list += [n*3+1]\n    odd_list += [n*3+1]\n    odd_list += [n*3+1]\n   \
    \ odd_list += [n*3+1]\n    odd_list += [n*3+1]\n    odd_list += [n*3+1]\n    odd_list\
    \ += [n*3+1]\n    odd_list += [n*3+1]\n    odd_list += [n*3+1]\n    odd_list +=\
    \ [n*3+1]\n    odd_list += [n*3+1]\n    odd_list += [n*3+1]\n    odd_list += [n*3+1]\n\
    \    odd_list += [n*3+1]\n    odd_list += [n*3+1]\n    odd_list += [n", "    odd_list\
    \ = []\n    odd_list = [1]\n    odd_list = odd_list + [n / 2]\n    odd_list =\
    \ odd_list + [n / 2 * 3]\n    odd_list = odd_list + [n / 2 * 3 * 5]\n    odd_list\
    \ = odd_list + [n / 2 * 3 * 5 * 7]\n    odd_list = odd_list + [n / 2 * 3 * 5 *\
    \ 7 * 9]\n    odd_list = odd_list + [n / 2 * 3 * 5 * 7 * 9 * 11]\n    odd_list\
    \ = odd_list + [n / 2 * 3 * 5 * 7 * 9 * 11 * 13]\n    odd_list = odd_list + [n\
    \ / 2 * 3 * 5 * 7 * 9 * 11 * 13 * 15]\n    odd_list = odd_list + [n / 2 * 3 *\
    \ 5 * 7 * 9 * 11 * 13 * 15 * 17]\n    odd_list = odd_list + [n / 2 * 3 * 5 * 7\
    \ * 9 * 11 * 13 * 15 * 17 * 19]\n    odd_list = odd_list + [n / 2 * 3 * 5 * 7\
    \ * 9 * 11 * 13 * 15 * 17 * 19 * 21]\n    odd_list = odd_list + [n / 2 * 3 * 5\
    \ * 7 * 9 * 11 * 13 * 15 * 17 * 19 * 21 * 23]\n    odd_list = odd_list + [n /\
    \ 2 * 3 * 5 * 7 * 9 * 11 * 13 * 15 * 17 * 19 * 21 * 23 * 25]\n    odd_list = odd_list\
    \ + [n / 2 * 3 * 5 * 7 * 9 * 11 * 13 * 15 * 17 * 19 * 21 * 23 * 25 * 27]\n   \
    \ odd_list = odd_list + [n / 2 * 3 * 5 * 7 * 9 * 11 * 13 * 15 * 17 * 19 * 21 *\
    \ 23 * 25 * 27 * 29]\n    odd_list = odd_list + [n / 2 * 3 * 5 * 7 * 9 * 11 *\
    \ 13 * 15 * 17 * 19 * 21 * 23 * 25 * 27 * 29 * 31]\n    odd_list = odd_list +\
    \ [n / 2 * 3 * 5 * 7 * 9 * 11 * 13 * 15 * 17 * 19 * 21 * 23 * 25 * 27 * 29 * 31\
    \ * 33]\n    odd_list = odd_list + [n / 2 * 3 * 5 * 7 * 9 * 11 * 13 * 15 * 17\
    \ * 19 * 21 * 23 * 25 * 27 * 29 * 31 * 33", "    if n == 1 \n        return [1]\n\
    \    odd_list = []\n    odd_list += get_odd_collatz(n-1)\n    odd_list += [n/2]\n\
    \    odd_list += [n*3]\n    odd_list += [n*3+1]\n    return odd_list\nend", " \
    \   if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a positive integer n and returns the nth\
    \ Fibonacci number.", "    if n == 1 \n        return [1]\n    else \n       \
    \ odd_list = []\n        for i in get_odd_collatz(n-1) do \n            if i %\
    \ 2 == 1 \n                odd_list.append(i)\n            else \n           \
    \     odd_list.append(i*2)\n                odd_list.append(i*3+1)\n        end\n\
    \        return odd_list\n    end\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ given positive integer n.", "    if n == 1 \n        return [1]\n    \n    odd_collatz\
    \ = get_odd_collatz(n / 2)\n    \n    if n % 2 == 0 \n        odd_collatz .+=\
    \ [n]\n    else \n        odd_collatz .+= [n] * 3 + 1\n    \n    return odd_collatz\n\
    end", "    if n == 1 \n        return [1]\n    \n    odd_list = []\n    \n   \
    \ odd_list += get_odd_collatz(n-1)\n    \n    if n % 2 == 0 \n        odd_list\
    \ += [n/2]\n    else \n        odd_list += [n*3]\n    \n    return odd_list\n\
    end\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the factorial of a given positive integer\
    \ n.", "    if n == 1 \n        return [1]\n    odd_list = []\n    for i in get_odd_collatz(n\
    \ - 1) do \n        if i % 2 == 1 \n            odd_list += [i]\n        else\
    \ \n            odd_list += [i * 3]\n    end\n    return odd_list\nend\n</cell>\n\
    <code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the nth term of the Fibonacci sequence. \nThe Fibonacci\
    \ sequence is defined by the recurrence relation:", "    if n == 1 \n        return\
    \ [1]\n    \n    odd_list = []\n    \n    for x in get_odd_collatz(n-1) do \n\
    \        if x % 2 == 1 \n            odd_list.append(x)\n        else \n     \
    \       odd_list.append(x/2)\n    end\n    \n    odd_list += [x+1 for x in odd_list\
    \ if x % 2 != 1]\n    \n    return odd_list\nend\n</cell>\n<code language=julia-1.5>\n\
    get_odd_collatz(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ positive integer n and returns the nth Fibonacci number.", "    if n == 1 \n\
    \        return [1]\n    odd_list = []\n    for x in get_odd_collatz(n-1) do \n\
    \        if x % 2 == 1 \n            odd_list += [x/2]\n        else \n      \
    \      odd_list += [x*3]\n    end\n    odd_list += [1]\n    return odd_list\n\
    end\n</cell>\n<code language=julia-1.0>\nget_odd_collatz(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes in a positive integer n and returns the\
    \ n-th Fibonacci number.", "    if n == 1 \n        return [1]\n    else \n  \
    \      odd_collatz = get_odd_collatz(n / 2)\n        odd_collatz .+= [n * 3]\n\
    \        if n % 2 == 1 \n            odd_collatz .+= [n + 1]\n        end\n  \
    \      return odd_collatz\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    get_odd_collatz(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the factorial of a given positive integer. \nFor example, factorial(5) = 5 x\
    \ 4 x 3 x 2 x 1 = 120", "    if n == 1 \n        return [1]\n    odd_list = []\n\
    \    odd_list += get_odd_collatz(n-1)\n    odd_list += [n/2]\n    odd_list +=\
    \ [n*3]\n    odd_list += [n*3+1]\n    return odd_list\nend", "    if n == 1 \n\
    \        return [1]\n    odd_list = []\n    odd_list += get_odd_collatz(n-1)\n\
    \    odd_list += [n/2]\n    odd_list += [n*3+1]\n    return odd_list\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a positive integer n, return a sorted\
    \ list that has the even numbers in collatz sequence.", "    if n == 1 \n    \
    \    return [1]\n    \n    odd_list = []\n    \n    for i in 1:n\n        if isodd(i)\
    \ == true\n            odd_list += [i]\n        else\n            odd_list +=\
    \ [i/2]\n        end\n    end\n    \n    return odd_list\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if n == 1 \n        return [1]\n    odd_list = []\n\
    \    odd_list += get_odd_collatz(n-1)\n    odd_list += [n/2]\n    odd_list +=\
    \ [n*3]\n    odd_list += [n*3+1]\n    return odd_list\nend", "    if n == 1 \n\
    \        return [1]\n    odd_list = []\n    odd_list += get_odd_collatz(n-1)\n\
    \    odd_list += [n/2]\n    odd_list += [n*3+1]\n    return odd_list\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n == 1 \n        return [1]\n    \n    odd_collatz\
    \ = get_odd_collatz(n / 2)\n    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n\
    \ + 1]\n    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer n\
    \ and returns the number of steps it takes to reach 1 from n.", "    if n == 1\
    \ \n        return [1]\n    odd_list = []\n    odd_list += get_odd_collatz(n/2)\n\
    \    odd_list += [n/2]\n    odd_list += [n*3+1]\n    return odd_list\nend", " \
    \   if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz .+= [n * 3 if n % 2 == 0 else n * 2 + 1]\n       \
    \ return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer n\
    \ and returns the nth Fibonacci number.", "    if n == 1 \n        return [1]\n\
    \    odd_list = []\n    odd_list += get_odd_collatz(n/2)\n    odd_list += [n/2]\n\
    \    odd_list += [n*3+1]\n    return odd_list\nend\n</cell>\n<code language=julia-1.5>\n\
    @time odd_list = get_odd_collatz(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ odd_list = get_odd_collatz(10)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes in a positive integer n and returns the nth Fibonacci number.", " \
    \   if n == 1 \n        return [1]\n    odd_list = []\n    odd_list += get_odd_collatz(n/2)\n\
    \    odd_list += [n/2]\n    odd_list += [n*3+1]\n    return odd_list\nend\n</cell>\n\
    <code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes in a positive integer n and returns the nth term of\
    \ the Fibonacci sequence. \nThe Fibonacci sequence is defined by the recurrence\
    \ relation:", "    if n == 1 \n        return [1]\n    \n    odd_nums = Vector{Int64}()\n\
    \    \n    for x in get_odd_collatz(n - 1)\n        if x % 2 == 1\n          \
    \  odd_nums += [x]\n        else\n            odd_nums += [x * 3]\n        end\n\
    \    end\n    \n    odd_nums\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ given number. \nThe factorial of a number $n$ is defined as the product of all\
    \ positive integers less than or equal to $n$.", "    if n == 1 \n        return\
    \ [1]\n    odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz .+= n % 2 ==\
    \ 0 ? [n / 2] : [3 * n + 1]\n    return odd_collatz\nend", "    if n == 1 \n \
    \       return [1]\n    \n    odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz\
    \ .+= [n * 3 if n % 2 == 0 else 1]\n    odd_collatz\nend\n</cell>\n<code language=julia-1.5>\n\
    get_odd_collatz(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the nth number in the Fibonacci sequence. \nFor example, get_fibonacci(3) should\
    \ return 5.", "    if n == 1 \n        return [1]\n    else \n        odd_collatz\
    \ = get_odd_collatz(n-1)\n        odd_collatz .+= [n/2]\n        odd_collatz .+=\
    \ [n/3]\n        odd_collatz .+= [n/5]\n        odd_collatz .+= [n/7]\n      \
    \  odd_collatz .+= [n/11]\n        odd_collatz .+= [n/13]\n        odd_collatz\
    \ .+= [n/17]\n        odd_collatz .+= [n/19]\n        odd_collatz .+= [n/23]\n\
    \        odd_collatz .+= [n/29]\n        odd_collatz .+= [n/37]\n        odd_collatz\
    \ .+= [n/53]\n        odd_collatz .+= [n/63]\n        odd_collatz .+= [n/79]\n\
    \        odd_collatz .+= [n/91]\n        odd_collatz .+= [n/103]\n        odd_collatz\
    \ .+= [n/107]\n        odd_collatz .+= [n/111]\n        odd_collatz .+= [n/113]\n\
    \        odd_collatz .+= [n/115]\n        odd_collatz .+= [n/117]\n        odd_collatz\
    \ .+= [n/119]\n        odd_collatz .+= [n/121]\n        odd_collatz .+= [n/123]\n\
    \        odd_collatz .+= [n/125]\n        odd_collatz .+= [n/127]\n        odd_collatz\
    \ .+= [n/129]\n        odd_collatz .+= [n/131]\n        odd_collatz .+= [n/133]\n\
    \        odd_collatz .+= [n/135]\n        odd_collatz .+= [n/137]\n        odd_collatz\
    \ .+= [n/139]\n        odd_collatz .+= [n/141]\n        odd_collatz .+= [n/143]\n\
    \        odd_collatz .+= [n/145]\n        odd_collatz .+= [n/147]\n        odd_collatz\
    \ .+= [n/149]\n        odd_collatz .+= [n/", "    if n == 1 \n        return [1]\n\
    \    odd_list = []\n    odd_list += get_odd_collatz(n/2)\n    odd_list += [n/2]\n\
    \    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list\
    \ += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n\
    \    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list\
    \ += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n\
    \    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list\
    \ += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n\
    \    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list\
    \ += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n\
    \    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list\
    \ += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n\
    \    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list\
    \ += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n\
    \    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list\
    \ += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n\
    \    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list\
    \ += [n/3]\n", "    if n == 1 \n        return [1]\n    odd_list = []\n    odd_list\
    \ += get_odd_collatz(n-1)\n    odd_list += [n/2]\n    odd_list += [n*3]\n    odd_list\
    \ += [n*3+1]\n    return odd_list\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ given positive integer n.", "    if n == 1 \n        return [1]\n    \n    odd_collatz\
    \ = get_odd_collatz(n / 2)\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == ", "    if n == 1 \n  \
    \      return [1]\n    odd_list = []\n    odd_list += get_odd_collatz(n-1)\n \
    \   odd_list += [n/2]\n    odd_list += [n*3]\n    odd_list += [n*3+1]\n    return\
    \ odd_list\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes in a positive integer n and returns\
    \ the Collatz sequence for n.", "    if n == 1 \n        return [1]\n    else\
    \ \n        odd_collatz = get_odd_collatz(n-1)\n        odd_collatz = [odd_collatz[1],\
    \ odd_collatz[2]*odd_collatz[1]] \n        return odd_collatz\nend", "    if n\
    \ == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n-1)\n\
    \        odd_collatz .= [n/2]\n        if n % 2 == 1 \n            odd_collatz\
    \ .= [n*3]\n        end\n        return odd_collatz\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the nth term of the Fibonacci sequence. \nThe Fibonacci\
    \ sequence is defined by the recurrence relation:", "    if n == 1 \n        return\
    \ [1]\n    \n    odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz .+= n %\
    \ 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+=\
    \ n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == ", "    if n == 1 \n        return [1]\n    odd_list = []\n   \
    \ odd_list += get_odd_collatz(n-1)\n    odd_list += [n/2]\n    odd_list += [n*3]\n\
    \    odd_list += [n*3+1]\n    return odd_list\nend", "    if n == 1 \n       \
    \ return [1]\n    \n    odd_list = []\n    \n    for x in get_odd_collatz(n-1)\
    \ do \n        if x % 2 == 1 \n            odd_list.append(x)\n        else\n\
    \            odd_list.append(3*x + 1)\n        end\n    end\n    \n    return\
    \ odd_list\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the nth term of the Fibonacci\
    \ sequence. \nThe Fibonacci sequence is defined by the recurrence relation:",
  "    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n        return\
    \ odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes in a positive integer\
    \ n and returns the number of steps to reach 1 from n.", "    if n == 1 \n   \
    \     return [1]\n    else \n        odd_collatz = get_odd_collatz(n / 2)\n  \
    \      odd_collatz .+= [n * 3 if n % 2 == 0 else 1]\n        return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes an integer $n$ and returns the number\
    \ of steps it takes to reach 1 from $n$. For example, get_steps(5) should return\
    \ 3.", "    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    odd_collatz .= [n * 2 if n % 2 == 0 else n * 3 + 1 for i in odd_collatz]\n\
    \    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in a positive integer\
    \ n and returns the number of steps it takes to reach 1 from n.", "    if n ==\
    \ 1 \n        return [1]\n    \n    odd_list = []\n    \n    for x in get_odd_collatz(n-1)\
    \ do \n        if x % 2 == 1 \n            odd_list += [x/2]\n        else \n\
    \            odd_list += [x*3] + [1]\n    end\n    \n    return odd_list\nend\n\
    </cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the nth Fibonacci number.", "    if n == 1\
    \ \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n / 2)\n\
    \        odd_collatz .+= [n * 3 if n % 2 == 0 else 1]\n        return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes in a positive integer n and returns the\
    \ number of steps it takes to reach 1 from the starting number n.", "    if n\
    \ == 1 \n        return [1]\n    else \n        odd_list = []\n        for i in\
    \ get_odd_collatz(n-1) do \n            if i%2 == 1 \n                odd_list\
    \ += [i/2]\n            else \n                odd_list += [i*3]\n        end\n\
    \        return odd_list\n    end\nend\n</cell>\n<code language=julia-1.5>", " \
    \   if n == 1 \n        return [1]\n    odd_list = []\n    odd_list += get_odd_collatz(n/2)\n\
    \    odd_list += [n/2]\n    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list\
    \ += [n/3]\n    odd_list += [n/2]\n    odd_list += [n/2]\n    odd_list += [n/2]\n\
    \    odd_list += [n/2]\n    odd_list += [n/2]\n    odd_list += [n/2]\n    odd_list\
    \ += [n/2]\n    odd_list += [n/2]\n    odd_list += [n/2]\n    odd_list += [n/2]\n\
    \    odd_list += [n/2]\n    odd_list += [n/2]\n    odd_list += [n/2]\n    odd_list\
    \ += [n/2]\n    odd_list += [n/2]\n    odd_list += [n/2]\n    odd_list += [n/2]\n\
    \    odd_list += [n/2]\n    odd_list += [n/2]\n    odd_list += [n/2]\n    odd_list\
    \ += [n/2]\n    odd_list += [n/2]\n    odd_list += [n/2]\n    odd_list += [n/2]\n\
    \    odd_list += [n/2]\n    odd_list += [n/2]\n    odd_list += [n/2]\n    odd_list\
    \ += [n/2]\n    odd_list += [n/2]\n    odd_list += [n/2]\n    odd_list += [n/2]\n\
    \    odd_list += [n/2]\n    odd_list += [n/2]\n    odd_list += [n/2]\n    odd_list\
    \ += [n/2]\n    odd_list += [n/2]\n    odd_list += [n/2]\n    odd_list += [n/2]\n\
    \    odd_list += [n/2]\n    odd_list += [n/2]\n    odd_list += [n/2]\n    odd_list\
    \ += [n/2]\n    odd_list += [n/2]\n    odd_list += [n/2]\n    odd_list += [n/2]\n\
    \    odd_list += [n/2]\n    odd_list += [n/2]\n    odd_list += [n/2]\n    odd_list\
    \ += [n/2]\n    odd_list += [n/2]\n", "    if n == 1 \n        return [1]\n  \
    \  odd_list = []\n    odd_list += get_odd_collatz(n-1)\n    odd_list += [n/2]\n\
    \    odd_list += [n*3+1]\n    return odd_list\nend\n</cell>\n<code language=julia-1.5>\n\
    get_odd_collatz(10)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the factorial of a given positive integer n.", "    if n == 1 \n        return\
    \ [1]\n    \n    odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz .= [n *\
    \ 2 if n % 2 == 0 else n * 3 + 1 for i in odd_collatz]\n    odd_collatz\nend\n\
    </cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a positive integer n and returns the nth Fibonacci\
    \ number.", "    if n == 1 \n        return [1]\n    else \n        odd_collatz\
    \ = get_odd_collatz(n-1)\n        odd_collatz .= [n/2]\n        odd_collatz .=\
    \ odd_collatz .+ [n*3+1]\n        return odd_collatz\nend\n</cell>\n<code language=julia-1.4>",
  "    if n == 1 \n        return [1]\n    \n    odd_list = []\n    \n    for n in\
    \ get_odd_collatz(n-1)\n        if n % 2 == 0 \n            odd_list.append(n/2)\n\
    \        else\n            odd_list.append(3*n+1)\n    end\n    \n    return odd_list\n\
    end\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that takes an integer $n$ and returns the number\
    \ of steps it takes to reach 1 from $n$. For example, get_num_steps(5) should\
    \ return 3.", "    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    odd_collatz .+= [n * 3 if n % 2 == 0 else 1]\n    return odd_collatz\n\
    end", "    if n == 1 \n        return [1]\n    odd_list = []\n    odd_list +=\
    \ get_odd_collatz(n-1)\n    odd_list += [n/2]\n    odd_list += [n*3+1]\n    return\
    \ odd_list\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a positive integer n and returns\
    \ the nth term of the Collatz conjecture.", "    if n == 1 \n        return [1]\n\
    \    \n    odd_list = []\n    \n    for i in get_odd_collatz(n-1) do \n      \
    \  if i % 2 == 1 \n            odd_list += [i]\n        else \n            odd_list\
    \ += [i * 3]\n    end\n    \n    odd_list += [n]\n    \n    return odd_list\n\
    end\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(5)\n</cell>\n<text>\n\
    Problem 3\nWrite a function that takes an integer n and returns the nth Fibonacci\
    \ number.", "    if n == 1 \n        return [1]\n    \n    odd_list = []\n   \
    \ odd_list += get_odd_collatz(n-1)\n    odd_list += [n/2]\n    odd_list += [n*3+1]\n\
    \    odd_list += [n*3+1]\n    odd_list += [n*3+1]\n    odd_list += [n*3+1]\n \
    \   odd_list += [n*3+1]\n    odd_list += [n*3+1]\n    odd_list += [n*3+1]\n  \
    \  odd_list += [n*3+1]\n    odd_list += [n*3+1]\n    odd_list += [n*3+1]\n   \
    \ odd_list += [n*3+1]\n    odd_list += [n*3+1]\n    odd_list += [n*3+1]\n    odd_list\
    \ += [n*3+1]\n    odd_list += [n*3+1]\n    odd_list += [n*3+1]\n    odd_list +=\
    \ [n*3+1]\n    odd_list += [n*3+1]\n    odd_list += [n*3+1]\n    odd_list += [n*3+1]\n\
    \    odd_list += [n*3+1]\n    odd_list += [n*3+1]\n    odd_list += [n*3+1]\n \
    \   odd_list += [n*3+1]\n    odd_list += [n*3+1]\n    odd_list += [n*3+1]\n  \
    \  odd_list += [n*3+1]\n    odd_list += [n*3+1]\n    odd_list += [n*3+1]\n   \
    \ odd_list += [n*3+1]\n    odd_list += [n*3+1]\n    odd_list += [n*3+1]\n    odd_list\
    \ += [n*3+1]\n    odd_list += [n*3+1]\n    odd_list += [n*3+1]\n    odd_list +=\
    \ [n*3+1]\n    odd_list += [n*3+1]\n    odd_list += [n*3+1]\n    odd_list += [n*3+1]\n\
    \    odd_list += [n*3+1]\n    odd_list += [n*3+1]\n    odd_list += [n*3+1]\n \
    \   odd_list += [n*3+1]\n    odd_list += [n*3+1]\n    odd_list += [n*3+1]\n  \
    \  odd_list += [n*3+1]\n    odd_list += [n*3+1]\n    odd_list += ", "    if n\
    \ == 1 \n        return [1]\n    odd_list = []\n    odd_list += get_odd_collatz(n-1)\n\
    \    odd_list += [n/2]\n    odd_list += [n*3+1]\n    return odd_list\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n == 1 \n        return [1]\n    \n    odd_collatz\
    \ = get_odd_collatz(n / 2)\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == ", "    if n == 1 \n  \
    \      return [1]\n    odd_list = []\n    odd_list += get_odd_collatz(n/2)\n \
    \   odd_list += [n/2]\n    odd_list += [n*3+1]\n    return odd_list\nend\n</cell>\n\
    <code language=julia-1.5>\nget_odd_collatz(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an integer n and returns the number of positive integers\
    \ less than or equal to n that have the Collatz sequence starting from 1.", " \
    \   odd_list = []\n    if n == 1 \n        odd_list = [n]\n    else\n        odd_list\
    \ = [1]\n        for i in 2:n\n            if isodd(i) == true\n             \
    \   odd_list[i] = odd_list[i-1] * 2\n            else\n                odd_list[i]\
    \ = odd_list[i-1] * 3 + 1\n        end\n    end\n    return odd_list\nend\n</cell>\n\
    <code language=julia-1.4>", "    if n == 1 \n        return [1]\n    \n    odd_list\
    \ = []\n    \n    for n in get_odd_collatz(n-1)\n        if n % 2 == 0 \n    \
    \        odd_list.append(n/2)\n        else\n            odd_list.append(3*n+1)\n\
    \    end\n    \n    return odd_list\nend\n</cell>\n<code language=julia-1.5>\n\
    get_odd_collatz(10)\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ in a positive integer n and returns the nth Fibonacci number.", "    if n ==\
    \ 1 \n        return [1]\n    \n    odd_list = []\n    \n    for x in get_odd_collatz(n\
    \ - 1) do \n        if x % 2 == 1 \n            odd_list.append(x)\n        else\n\
    \            odd_list.append(x * 3 + 1)\n        end\n    end\n    \n    return\
    \ odd_list\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes in a positive integer n and returns\
    \ the number of steps it takes to reach 1 from n.", "    if n == 1 \n        return\
    \ [1]\n    odd_list = []\n    odd_list += get_odd_collatz(n/2)\n    odd_list +=\
    \ [n/2]\n    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n\
    \    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list\
    \ += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n\
    \    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list\
    \ += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n\
    \    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list\
    \ += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n\
    \    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list\
    \ += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n\
    \    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list\
    \ += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n\
    \    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list\
    \ += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n\
    \    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list\
    \ += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n\
    \    odd_list += [n/3]\n", "    if n == 1 \n        return [1]\n    odd_list =\
    \ []\n    for x in get_odd_collatz(n-1)\n        if x % 2 == 1\n            odd_list.append(x)\n\
    \        else\n            odd_list.append(x*2 + 1)\n    end\n    return odd_list\n\
    end\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<code language=julia-1.5>",
  "    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n-1)\n\
    \        odd_collatz .+= [n/2]\n        odd_collatz .+= [n/3]\n        odd_collatz\
    \ .+= [n/5]\n        odd_collatz .+= [n/7]\n        odd_collatz .+= [n/11]\n \
    \       odd_collatz .+= [n/13]\n        odd_collatz .+= [n/17]\n        odd_collatz\
    \ .+= [n/19]\n        odd_collatz .+= [n/23]\n        odd_collatz .+= [n/29]\n\
    \        odd_collatz .+= [n/37]\n        odd_collatz .+= [n/53]\n        odd_collatz\
    \ .+= [n/59]\n        odd_collatz .+= [n/67]\n        odd_collatz .+= [n/83]\n\
    \        odd_collatz .+= [n/99]\n        odd_collatz .+= [n/107]\n        odd_collatz\
    \ .+= [n/131]\n        odd_collatz .+= [n/163]\n        odd_collatz .+= [n/193]\n\
    \        odd_collatz .+= [n/225]\n        odd_collatz .+= [n/251]\n        odd_collatz\
    \ .+= [n/289]\n        odd_collatz .+= [n/361]\n        odd_collatz .+= [n/523]\n\
    \        odd_collatz .+= [n/597]\n        odd_collatz .+= [n/673]\n        odd_collatz\
    \ .+= [n/823]\n        odd_collatz .+= [n/997]\n        odd_collatz .+= [n/1037]\n\
    \        odd_collatz .+= [n/1319]\n        odd_collatz .+= [n/1637]\n        odd_collatz\
    \ .+= [n/1937]\n        odd_collatz .+= [n/2237]\n        odd_collatz .+= [n/2537]\n\
    \        odd_collatz .+= [n/2897]\n        odd_collatz .+= [n/3617]\n        odd_",
  "    odd_list = []\n    odd_list.append(1)\n    odd_list.append(n)\n    while odd_list[2]\
    \ != 1\n        odd_list[1] = odd_list[2]\n        odd_list[2] = odd_list[1] /\
    \ 2\n        odd_list[1] = odd_list[1] % 2\n    end\n    return odd_list\nend\n\
    </cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes in a positive integer n and returns the nth Fibonacci\
    \ number.", "    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\nend\n</cell>\n\
    <code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a given positive integer. \nFor\
    \ example, factorial(5) returns 120.", "    if n == 1 \n        return [1]\n \
    \   \n    odd_collatz = get_odd_collatz(n / 2)\n    \n    if n % 2 == 0 \n   \
    \     odd_collatz = [odd_collatz[1], odd_collatz[1] * 3] + odd_collatz[2:end]\n\
    \    else \n        odd_collatz = [odd_collatz[1], odd_collatz[1] * 3] + odd_collatz[2:end]\n\
    \    end\n    \n    return odd_collatz\nend", "    if n == 1 \n        return\
    \ [1]\n    odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz .= [n * 3 + (n\
    \ % 2 == 0)]\n    odd_collatz .= odd_collatz[end-1]\n    odd_collatz\nend", " \
    \   if n == 1 \n        return [1]\n    odd_nums = Vector{Int64}()\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_", "    if n == 1 \n        return [1]\n    \n\
    \    odd_list = []\n    \n    for x in get_odd_collatz(n - 1) \n        if x %\
    \ 2 == 1 \n            odd_list.append(x)\n        else \n            odd_list.append(x\
    \ * 2 + 1)\n    end\n    \n    return odd_list\nend\n</cell>\n<code language=julia-1.5>\n\
    get_odd_collatz(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the nth number in the Fibonacci sequence. \nThe Fibonacci sequence is defined\
    \ by the recurrence relation:", "    if n == 1 \n        return [1]\n    \n  \
    \  odd_list = []\n    \n    odd_list += get_odd_collatz(n-1)\n    \n    if n %\
    \ 2 == 1 \n        odd_list += [n/2]\n    \n    odd_list += [n*3+1]\n    \n  \
    \  return odd_list\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer n\
    \ and returns the nth term of the Fibonacci sequence. \nThe Fibonacci sequence\
    \ is defined by the recurrence relation:", "    if n == 1 \n        return [1]\n\
    \    else \n        odd_collatz = get_odd_collatz(n-1)\n        odd_collatz .+=\
    \ [n/2]\n        odd_collatz .+= [n*3+1]\n        return odd_collatz\nend\n</cell>\n\
    <code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes in a positive integer n and returns the nth term of\
    \ the Fibonacci sequence. \nThe Fibonacci sequence is defined by the recurrence\
    \ relation:", "    odd_list = []\n    odd_list.append(1)\n    odd_list.append(n)\n\
    \    while odd_list[2] != 1\n        odd_list[1] = odd_list[2]\n        odd_list[2]\
    \ = odd_list[1] / 2\n        odd_list[1] = odd_list[1] % 2\n        odd_list.append(odd_list[2])\n\
    \    end\n    return odd_list\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n-1)\n\
    \        odd_collatz .= [n/2]\n        odd_collatz .= odd_collatz .+ [n/3]\n \
    \       odd_collatz .= odd_collatz .+ [n/5]\n        odd_collatz .= odd_collatz\
    \ .+ [n/7]\n        odd_collatz .= odd_collatz .+ [n/11]\n        odd_collatz\
    \ .= odd_collatz .+ [n/13]\n        odd_collatz .= odd_collatz .+ [n/17]\n   \
    \     odd_collatz .= odd_collatz .+ [n/19]\n        odd_collatz .= odd_collatz\
    \ .+ [n/23]\n        odd_collatz .= odd_collatz .+ [n/29]\n        odd_collatz\
    \ .= odd_collatz .+ [n/31]\n        return odd_collatz\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 1 \n        return [1]\n    else \n        collatz = get_odd_collatz(n-1)\n\
    \        odd_collatz = collatz\n        for i in collatz \n            if i %\
    \ 2 == 1 \n                odd_collatz += [i / 2]\n            else \n       \
    \         odd_collatz += [i * 3]\n        end\n        return odd_collatz\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes in a positive integer n and returns\
    \ the number of positive integers less than or equal to n that are evenly divisible\
    \ by 3.", "    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    odd_collatz .+= [n * 3 if n % 2 == 0 else 1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\n@time odd_collatz = get_odd_collatz(10)\n\
    </cell>\n<code language=julia-1.5>\n@time odd_collatz = get_odd_collatz(100)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that computes the factorial of a\
    \ given positive integer. \nThe factorial of a non-negative integer is defined\
    \ as the product of all positive integers less than or equal to that integer.\
    \ \nFor example, 5! = 5 x 4 x 3 x 2 x 1 = 120.", "    if n == 1 \n        return\
    \ [1]\n    odd_list = []\n    odd_list += get_odd_collatz(n-1)\n    odd_list +=\
    \ [n/2]\n    odd_list += [n*3+1]\n    return odd_list\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
