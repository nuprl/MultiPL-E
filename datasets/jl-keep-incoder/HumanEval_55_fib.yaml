name: HumanEval_55_fib
language: julia
prompt: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n\
  \    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) ==\
  \ 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
  \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
completions: ["    if n == 0\n        0\n    elseif n == 1\n        1\n    else\n\
    \        fib(n - 1) + fib(n - 2)\nend\n</code>\n<|/ a tags=julia,fibonacci |>\n\
    <| a dscore=2 |>\nThe Julia standard library has this functionality built in:\n\
    <code>\njulia> fibonacci(5)\n5", "    if n == 0 || n == 1 \n        then return\
    \ n\n    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<text>\nThe\
    \ Fibonacci sequence is defined by the recurrence relation:", "    if n == 0 \n\
    \        then return 0\n    else if n == 1 \n        then return 1\n    else \n\
    \        return fib(n-1) + fib(n-2)\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia,fibonacci\
    \ |>\n<code>", "    if n <= 1 \n        then 1\n        else fib(n-1) + fib(n-2)\n\
    \    end\nend\n</code>\n<|/ a tags=julia,fibonacci |>\n<| a dscore=2 |>\n<code>",
  "    if n < 0 \n        error(\"fib expects non-negative integer\")\n    else if\
    \ n == 0 \n        1\n    else \n        fib(n - 1) + fib(n - 2)\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert fib(0) == 1\n@assert fib(1) == 1\n@assert fib(2)\
    \ == 2\n@assert fib(7) == 13\n@assert fib(8) == 21\n@assert fib(10) == 55\n@assert\
    \ fib(11) == 89\n</cell>\n<text>\nExercise 3\nWrite a function that computes the\
    \ n-th Fibonacci number using memoization.", "    if n < 2 \n        then return\
    \ 1\n        else return fib(n-2) + fib(n-1)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a function that computes the\
    \ n-th Fibonacci number using recursion.", "    if n == 0\n        0\n    elseif\
    \ n == 1\n        1\n    else\n        fib(n - 1) + fib(n - 2)\nend\n</cell>\n\
    <code language=julia-1.5>\n@code_native fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @code_native fib(1)\n</cell>\n<code language=julia-1.5>\n@code_native fib(8)\n\
    </cell>\n<text>\nExercise: Fibonacci numbers\nWrite a function that returns the\
    \ nth Fibonacci number in a vector. For example, fibonacci([0,1]) should return\
    \ [0,1].", "    if n == 0 \n        0\n    else if n == 1 \n        1\n    else\
    \ \n        fib(n - 1) + fib(n - 2)\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>", "    if n == 0\n        0\n    else if n == 1\n        1\n    else\n\
    \        fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ fib(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the n-th\
    \ Fibonacci number modulo 1000000007 (i.e. the remainder after dividing by 1000000007).",
  "    if n < 2 \n        then return n\n    else \n        return fib(n-1) + fib(n-2)\n\
    end\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise:\
    \ Write a recursive function named fib_r(n::Int64) that returns the nth Fibonacci\
    \ number.", "    if n < 2\n        1\n    else\n        fib(n-2) + fib(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nThe @time\
    \ macro will tell you how long it took to run your code. Let's compare it to the\
    \ previous solution:", "    if n == 0 \n        0\n    else if n == 1 \n     \
    \   1\n    else \n        fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 || n == 1 \n        return n\n    else \n        return fib(n-1)\
    \ + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n\
    <text>\nExercise: Write a recursive function fib_rec(n::Int64) that returns the\
    \ nth Fibonacci number.", "    if n <= 1\n        1\n    else\n        fib(n-1)\
    \ + fib(n-2)\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis is not the Fibonacci\
    \ sequence. Fibonacci numbers are the numbers in the sequence that do not exceed\
    \ the Fibonacci number limit.\n<|/ c |>\n<| c |>\nThe Fibonacci sequence is defined\
    \ as the sequence of numbers that do not exceed the Fibonacci number limit. Fibonacci\
    \ numbers are the numbers in the sequence that do not exceed the Fibonacci number\
    \ limit.\n<|/ c |>\n<| c |>\nThe Fibonacci sequence is defined as the sequence\
    \ of numbers that do not exceed the Fibonacci number limit. Fibonacci numbers\
    \ are the numbers in the sequence that do not exceed the Fibonacci number limit.\n\
    <|/ c |>\n<| c |>\nThe Fibonacci sequence is defined as the sequence of numbers\
    \ that do not exceed the Fibonacci number limit. Fibonacci numbers are the numbers\
    \ in the sequence that do not exceed the Fibonacci number limit.\n<|/ c |>\n<|\
    \ c |>\nThe Fibonacci sequence is defined as the sequence of numbers that do not\
    \ exceed the Fibonacci number limit. Fibonacci numbers are the numbers in the\
    \ sequence that do not exceed the Fibonacci number limit.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>", "    if n == 0 \n        0\n    elseif n == 1 \n        1\n   \
    \ else\n        fib(n - 1) + fib(n - 2)\nend\n</code>\n<|/ a |>\n<| c |>\nThis\
    \ is not the fastest solution, since it uses recursion.\n<|/ c |>\n<| c |>\nI\
    \ agree, but I wanted to give a solution that uses recursion and I wanted to give\
    \ a solution that uses recursion and I wanted to give a solution that uses recursion\
    \ and I wanted to give a solution that uses recursion and I wanted to give a solution\
    \ that uses recursion and I wanted to give a solution that uses recursion and\
    \ I wanted to give a solution that uses recursion and I wanted to give a solution\
    \ that uses recursion and I wanted to give a solution that uses recursion and\
    \ I wanted to give a solution that uses recursion and I wanted to give a solution\
    \ that uses recursion and I wanted to give a solution that uses recursion and\
    \ I wanted to give a solution that uses recursion and I wanted to give a solution\
    \ that uses recursion and I wanted to give a solution that uses recursion and\
    \ I wanted to give a solution that uses recursion and I wanted to give a solution\
    \ that uses recursion and I wanted to give a solution that uses recursion and\
    \ I wanted to give a solution that uses recursion and I wanted to give a solution\
    \ that uses recursion and I wanted to give a solution that uses recursion and\
    \ I wanted to give a solution that uses recursion and I wanted to give a solution\
    \ that uses recursion and I wanted to give a solution that uses recursion and\
    \ I wanted to give a solution that uses recursion and I wanted to give a solution\
    \ that uses recursion and I wanted to give a solution that uses recursion and\
    \ I wanted to give a solution that uses recursion and I wanted to give a solution\
    \ that uses recursion and I wanted to give a solution that uses recursion and\
    \ I wanted to give a solution that uses recursion and I wanted to give a solution\
    \ that uses recursion and I wanted to give a solution that uses recursion and\
    \ I wanted to give a solution that uses recursion and I wanted to give a solution\
    \ that uses recursion and I wanted to give a solution that uses recursion and\
    \ I wanted to give a solution that uses recursion and I wanted to give a solution\
    \ that uses recursion and I wanted to give a solution that uses recursion and\
    \ I wanted to give a solution that uses recursion and I wanted to give a solution\
    \ that uses recursion and I wanted to give a solution that uses recursion and\
    \ I wanted to give a solution that uses recursion and I wanted to give a solution\
    \ that uses recursion and I wanted to give a solution that uses recursion and\
    \ I wanted to give a solution that uses recursion and I wanted to give a solution\
    \ that uses recursion and I wanted to give a solution that uses recursion and\
    \ I wanted to give a solution that uses recursion and I wanted to give a ", " \
    \   if n < 0 \n        error(\"Fibonacci number does not exist\")\n    else if\
    \ n == 0 \n        1\n    else if n == 1 \n        1\n    else \n        fib(n\
    \ - 1) + fib(n - 2)\nend\n</code>\n<|/ a tags=julia,fibonacci |>\n<| a dscore=1\
    \ |>\n<code>", "    if n < 2 \n        then return n\n        else return fib(n-1)\
    \ + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.4>\n@time fib(10)\n\
    </cell>\n<text>\nExercise 3\nWrite a recursive function named fib_r(n::Int64)\
    \ that returns the nth Fibonacci number.", "    if n < 2 \n        then return\
    \ n\n        else return fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the n-th Fibonacci number using recursion.",
  "    if n <= 1 \n        then return n\n        else return fib(n-1) + fib(n-2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\n\
    Exercise: Write a recursive function named fib_r(n::Int64) that returns the nth\
    \ Fibonacci number.", "    if n <= 1 \n        then 1\n        else fib(n-1) +\
    \ fib(n-2)\n    end\nend\n</code>\n<|/ a tags=julia,fibonacci |>\n<| a |>\n<code>",
  "    if n < 2\n        1\n    else\n        fib(n-2) + fib(n-1)\nend\n</cell>\n\
    <code language=julia-1.3>\n@code_warntype fib(10)\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the n-th Fibonacci number using recursion.", " \
    \   if n == 0\n        0\n    elseif n == 1\n        1\n    else\n        fib(n-1)\
    \ + fib(n-2)\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis doesn't answer\
    \ the question. OP wants to know if there is a way to avoid recursion.\n<|/ c\
    \ |>\n<| c |>\nThe question was \"Is there a way to avoid recursion?\" and the\
    \ answer is \"No\".\n<|/ c |>\n<| c |>\nThe question is \"Is there a way to avoid\
    \ recursion?\" and the answer is \"No\". Your answer doesn't answer the question.\n\
    <|/ c |>\n<| c |>\nThe question was \"Is there a way to avoid recursion?\" and\
    \ the answer is \"No\". Your answer doesn't answer the question.\n<|/ c |>\n<|\
    \ c |>\nThe question was \"Is there a way to avoid recursion?\" and the answer\
    \ is \"No\". Your answer doesn't answer the question.\n<|/ c |>\n<| a dscore=3\
    \ |>\nIn Julia 1.1 you can use the fib() function in Base which returns a lazy\
    \ Fibonacci sequence:\n<code>\njulia> fib()\nfib()", "    if n == 0\n        0\n\
    \    else if n == 1\n        1\n    else\n        fib(n - 1) + fib(n - 2)\nend\n\
    </code>\n<|/ a tags=julia,fibonacci |>\n<| c |>\nI believe this should be the\
    \ accepted answer. Although it does require a recursive function call, it does\
    \ not require any extra memory and does not require any extra function calls.\n\
    <|/ c |>\n<| a tags=julia,fibonacci |>\nA recursive solution:\n<code>", "    if\
    \ n < 2 \n        then return n\n        else return fib(n-1) + fib(n-2)\n   \
    \ end\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the n-th Fibonacci number using recursion.",
  "    if n < 0 \n        error(\"n must be non-negative\")\n    else if n == 0 \n\
    \        1\n    else if n == 1 \n        1\n    else \n        fib(n-1) + fib(n-2)\n\
    end\n</cell>\n<code language=julia-1.4>\n@time fib(10)\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the Fibonacci number of the given number $n$,\
    \ where $n$ is non-negative.", "    if n < 2 \n        then return n\n       \
    \ else return fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the\
    \ n-th Fibonacci number using recursion.", "    if n == 0 || n == 1 \n       \
    \ return n\n    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise\nWrite a recursive\
    \ function named fib_r(n::Int64) that returns the n-th Fibonacci number.", " \
    \   if n < 2 \n        then return n\n    else \n        return fib(n-1) + fib(n-2)\n\
    end\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the n-th Fibonacci number using recursion.",
  "    if n < 2 \n        then return n\n    else \n        return fib(n-1) + fib(n-2)\n\
    end\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the\
    \ n-th Fibonacci number using recursion.", "    if n == 0 \n        then return\
    \ 0\n    else if n == 1 \n        then return 1\n    else \n        return fib(n\
    \ - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.4>\n@time fib(10)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that computes the factorial of a\
    \ given number. \nThe function should accept a number as an argument and return\
    \ the factorial of the given number.\nThe function should raise a TypeError if\
    \ the given number is not a number.\nThe function should raise a ValueError if\
    \ the given number is less than 0.\nThe function should raise a ValueError if\
    \ the given number is greater than or equal to 0.", "    if n <= 1 \n        then\
    \ return n\n        else return fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise\nWrite a function\
    \ that calculates the n-th Fibonacci number using recursion.", "    if n < 2 \n\
    \        then return n\n    else \n        return fib(n-1) + fib(n-2)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise:\
    \ Write a recursive function named fib_r(n::Int64) that returns the nth Fibonacci\
    \ number in reverse order. Test it by timing it.", "    if n == 0 || n == 1 \n\
    \        then return n\n    else \n        return fib(n-1) + fib(n-2)\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis is not an answer to the question. He is asking\
    \ how to implement a recursive function in Julia.\n<|/ c |>\n<| c |>\nI agree\
    \ with you. My answer is just to show how recursive function can be implemented\
    \ in Julia.\n<|/ c |>\n<| c |>\nI agree with you. My answer is just to show how\
    \ recursive function can be implemented in Julia.\n<|/ c |>\n<| a tags=julia,recursion\
    \ |>\n<code>", "    if n <= 1 \n        then return n\n    else \n        return\
    \ fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the n-th Fibonacci\
    \ number using recursion.", "    if n < 0 \n        error(\"n must be non-negative\"\
    )\n    else if n == 0 \n        1\n    else \n        fib(n - 1) + fib(n - 2)\n\
    end\n</cell>\n<text>\nExercise: Write a function that returns the n-th Fibonacci\
    \ number using recursion.", "    if n == 0\n        0\n    else if n == 1\n  \
    \      1\n    else\n        fib(n - 1) + fib(n - 2)\nend\n</code>\n<|/ a tags=julia,fibonacci\
    \ |>\n<| a dscore=3 |>\n<code>", "    if n == 0\n        0\n    elseif n == 1\n\
    \        1\n    else\n        fib(n - 1) + fib(n - 2)\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis is not the fastest solution, since it uses recursion.\n<|/\
    \ c |>\n<| c |>\nI agree, this is definitely not the fastest solution. My solution\
    \ is just to show how it can be done in Julia.\n<|/ c |>\n<| c |>\nI agree, this\
    \ is definitely not the fastest solution. My solution is just to show how it can\
    \ be done in Julia.\n<|/ c |>\n<| c |>\nI agree, this is definitely not the fastest\
    \ solution. My solution is just to show how it can be done in Julia.\n<|/ c |>\n\
    <| c |>\nI agree, this is definitely not the fastest solution. My solution is\
    \ just to show how it can be done in Julia.\n<|/ c |>\n<| a dscore=2 |>\n<code>",
  "    if n == 0\n        0\n    else if n == 1\n        1\n    else\n        fib(n-1)\
    \ + fib(n-2)\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThe recursive solution\
    \ is very elegant, but it is also very inefficient. `fib` will call itself twice\
    \ for every number in the range `0..n-1`, which means `fib(n)` will call `fib(n-1)`\
    \ twice for every number in the range `0..n-2`. `fib(n)` will call `fib(n-1)`\
    \ twice for every number in the range `0..n-3`, which means `fib(n)` will call\
    \ `fib(n-2)` twice for every number in the range `0..n-4`, which means `fib(n)`\
    \ will call `fib(n-3)` twice for every number in the range `0..n-5`, which means\
    \ `fib(n)` will call `fib(n-4)` twice for every number in the range `0..n-6`,\
    \ which means `fib(n)` will call `fib(n-5)` twice for every number in the range\
    \ `0..n-7`, which means `fib(n)` will call `fib(n-6)` twice for every number in\
    \ the range `0..n-8`, which means `fib(n)` will call `fib(n-7)` twice for every\
    \ number in the range `0..n-9`, which means `fib(n)` will call `fib(n-8)` twice\
    \ for every number in the range `0..n-10`, which means `fib(n)` will call `fib(n-9)`\
    \ twice for every number in the range `0..n-11`, which means `fib(n)` will call\
    \ `fib(n-10)` twice for every number in the range `0..n-12`, which means `fib(n)`\
    \ will call `fib(n-11)` twice for every number in the range `0..n-13`, which means\
    \ `fib(n)` will call `fib(n-12)` twice for every number in the range `0..n-14`,\
    \ which means `fib(n)` will call `fib(n-13)` twice for every number in the range\
    \ `0..n-15`, which means `fib(n)` will call `fib(n-14)` twice for every number\
    \ in the range `0..n-16`, which means `fib(n)` will call `fib(n-15)` twice for\
    \ every number in the range `0..n-17`, which means `fib(n)` will call `fib(n-16)`\
    \ twice for every number in the range `0..n-18`, which means `fib(n)` will call\
    \ `fib(n-17)` ", "    if n < 0 \n        error(\"n must be positive\")\n    else\
    \ if n == 0 \n        1\n    else if n == 1 \n        1\n    else \n        fib(n\
    \ - 1) + fib(n - 2)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the Fibonacci number of the given number $n$. \nThe Fibonacci numbers are defined\
    \ as:", "    if n<2\n        1\n    else\n        fib(n-1)+fib(n-2)\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n\
    \    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"", "    if n\
    \ < 0 \n        error(\"Fibonacci number must be positive\")\n    else if n ==\
    \ 0 \n        1\n    else if n == 1 \n        1\n    else \n        fib(n - 1)\
    \ + fib(n - 2)\nend\n</cell>\n<code language=julia-1.1>\n@time fib(10)\n</cell>\n\
    <code language=julia-1.1>\n@time fib(10)\n</cell>\n<text>\nExercise\nWrite a function\
    \ that calculates the n-th Fibonacci number using memoization.", "    if n < 0\
    \ \n        error(\"fib function expects positive integer\")\n    else if n ==\
    \ 0 \n        1\n    else \n        fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code\
    \ language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n@time\
    \ fib(10)\n</cell>\n<text>\nExercise: Fibonacci numbers\nWrite a function that\
    \ computes the n-th Fibonacci number using recursion.", "    if n < 2 \n     \
    \   then return n\n    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n\
    <code language=julia-1.0>\n@time fib(10)\n</cell>\n<code language=julia-1.0>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.0>\n@time fib(10)\n</cell>\n<code language=julia-1.0>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n<code language=julia-1.0>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.0>\n@time fib(10)\n</cell>\n<code language=julia-1.0>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n<code language=julia-1.0>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.0>\n@time fib(10)\n</cell>\n<code language=julia-1.0>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n<code language=julia-1.0>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.0>\n@time fib(10)\n</cell>\n<code language=julia-1.0>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n<code language=julia-1.0>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.0>\n@time fib(10)\n</cell>\n<code language=julia-1.0>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n<code language=julia-1.0>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.0>\n@time fib(10)\n</cell>\n<code language=julia-1.0>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.0", "    if n < 2\n        1\n    else\n\
    \        fib(n-1) + fib(n-2)\nend\n</code>\n<|/ a tags=julia,fibonacci |>\n<|\
    \ a tags=julia,fibonacci |>\n<code>", "    if n <= 1 \n        then return n\n\
    \    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a recursive function fib_rec that\
    \ computes the nth Fibonacci number.", "    if n == 0 || n == 1 \n        then\
    \ return n\n    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code\
    \ language=julia-1.3>\n@time fib(10)\n</cell>\n<text>\nExercise: Write a recursive\
    \ function named fib_r(n::Int64) that returns the nth Fibonacci number.", "  \
    \  if n == 0 \n        then return 1\n    else if n == 1 \n        then return\
    \ 1\n    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 3\nWrite a function that calculates the\
    \ n-th Fibonacci number using memoization.", "    if n == 0 \n        0\n    else\
    \ if n == 1 \n        1\n    else \n        fib(n - 1) + fib(n - 2)\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis is not an answer to the question. Also, you should\
    \ explain your code instead of just dumping it.\n<|/ c |>\n<| c |>\nThis is not\
    \ an answer to the question. Also, you should explain your code instead of just\
    \ dumping it.\n<|/ c |>\n<| c |>\nThis is not an answer to the question. Also,\
    \ you should explain your code instead of just dumping it.\n<|/ c |>\n<| c |>\n\
    This is not an answer to the question. Also, you should explain your code instead\
    \ of just dumping it.\n<|/ c |>\n<| c |>\nThis is not an answer to the question.\
    \ Also, you should explain your code instead of just dumping it.\n<|/ c |>\n<|\
    \ a tags=julia,fibonacci |>\n<code>", "    if n < 2 \n        then return n\n\
    \    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise: Fibonacci numbers\n\
    Write a function that calculates the n-th Fibonacci number.", "    if n<2 then\
    \ return n else fib(n-1)+fib(n-2) \nend \n</code>\n<|/ a tags=julia,fibonacci\
    \ |>\n<| c |>\nThis doesn't seem to work. `fib(1)` returns `1` instead of `0`.\n\
    <|/ c |>\n<| c |>\nIt does work. `fib(1)` returns `1` instead of `0` because `fib(1)`\
    \ is `1`\n<|/ c |>\n<| c |>\nOh sorry, I missed that. Thanks!\n<|/ c |>\n<| c\
    \ |>\nThis doesn't work. `fib(1)` returns `1` instead of `0`.\n<|/ c |>\n<| c\
    \ |>\nIt does work. `fib(1)` returns `1` instead of `0` because `fib(1)` is `1`\n\
    <|/ c |>\n<| a dscore=4 |>\n<code>", "    if n < 2\n        1\n    else\n    \
    \    fib(n-2) + fib(n-1)\n    end\nend\n</code>\n<|/ a |>\n<| a tags=julia,fibonacci\
    \ |>\n<code>", "    if n < 2 \n        then return n\n        else return fib(n-1)\
    \ + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n\
    </cell>\n<text>\nExercise: Write a recursive function fib_rec(n::Int64) that returns\
    \ the nth Fibonacci number.", "    if n < 2\n        1\n    else\n        fib(n-1)\
    \ + fib(n-2)\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis is not the best solution,\
    \ since it uses recursion.\n<|/ c |>\n<| c |>\nI agree with you, but I wanted\
    \ to show a recursive solution. Anyway, I edited my answer to show a recursive\
    \ solution.\n<|/ c |>\n<| c |>\nI agree with you, but I wanted to show a recursive\
    \ solution. Anyway, I edited my answer to show a recursive solution.\n<|/ c |>\n\
    <| c |>\nThis is not the best solution, since it uses recursion.\n<|/ c |>\n<|\
    \ c |>\nI agree with you, but I wanted to show a recursive solution. Anyway, I\
    \ edited my answer to show a recursive solution.\n<|/ c |>\n<| a dscore=2 |>\n\
    <code>", "    if n < 2 \n        then return n\n    else \n        return fib(n-1)\
    \ + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n\
    </cell>\n<text>\nExercise: Write a recursive function fib_rec that computes the\
    \ nth Fibonacci number.", "    if n == 0 \n        then return 1\n    else if\
    \ n == 1 \n        then return 1\n    else \n        return fib(n-1) + fib(n-2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<text>\n\
    Exercise: Write a recursive function fib_rec(n::Int64) that returns the nth Fibonacci\
    \ number using recursion.", "    if n <= 1 \n        then 1\n        else fib(n-1)\
    \ + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that computes the n-th Fibonacci number using\
    \ recursion.", "    if n == 0 || n == 1 \n        then return n\n    else \n \
    \       return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\n\
    Exercise\nWrite a recursive function named fib_r(n::Int64) that returns the n-th\
    \ Fibonacci number.", "    if n < 2 \n        then return n\n    else \n     \
    \   return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5", "  \
    \  if n == 0 \n        then return 1\n    else if n == 1 \n        then return\
    \ 1\n    else \n        return fib(n-1) + fib(n-2)\nend\n</code>\n<|/ a tags=julia,fibonacci,performance\
    \ |>\n<| c |>\nThis doesn't work. `fib` returns `Int64`, not `Int`\n<|/ c |>\n\
    <| c |>\nYes, I fixed it\n<|/ c |>\n<| c |>\nI fixed it again\n<|/ c |>\n<| c\
    \ |>\nThis doesn't work. `fib` returns `Int64`, not `Int`\n<|/ c |>\n<| c |>\n\
    I fixed it again\n<|/ c |>\n<| a tags=julia,fibonacci,performance |>\nI wrote\
    \ a package for Julia called Fibonacci.jl that uses memoization to speed up the\
    \ calculation of Fibonacci numbers. You can install it using Pkg.add(\"Fibonacci.jl\"\
    ). Here is an example that calculates the first 10 Fibonacci numbers:\n<code>\n\
    using Fibonacci", "    if n == 0 \n        then return 0\n    else if n == 1 \n\
    \        then return 1\n    else \n        return fib(n - 1) + fib(n - 2)\nend\n\
    </cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise\nWrite a function that calculates the\
    \ n-th Fibonacci number using recursion.", "    if n == 0\n        0\n    elseif\
    \ n == 1\n        1\n    else\n        fib(n-1) + fib(n-2)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype fib(10)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the n-th Fibonacci number using recursion.", "    if\
    \ n <= 1 \n        then return n\n    else \n        return fib(n-1) + fib(n-2)\n\
    end\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-", "    if n < 2 \n        then return\
    \ n\n        else return fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a recursive function fib_rec that\
    \ computes the nth Fibonacci number.", "    if n <= 1 \n        then return n\n\
    \    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a function that computes the\
    \ n-th Fibonacci number using recursion.", "    if n < 2 \n        then return\
    \ n\n        else return fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ n-th Fibonacci number using recursion.", "    if n == 0 || n == 1 \n       \
    \ then return n\n    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n\
    <code language=julia-1.4>\n@time fib(10)\n</cell>\n<text>\nExercise: Write a recursive\
    \ function fib_rec that computes the nth Fibonacci number using memoization.",
  "    if n == 0 || n == 1 \n        then return n\n    else \n        return fib(n-1)\
    \ + fib(n-2)\nend\n</code>\n<|/ a tags=julia,fibonacci |>\n<| c |>\nThis doesn't\
    \ work. `fib` returns `Int64` but `fib(n-1)` returns `Int`. You can't add `Int`\
    \ to `Int64`.\n<|/ c |>\n<| c |>\nThis doesn't work. `fib` returns `Int64` but\
    \ `fib(n-1)` returns `Int`. You can't add `Int` to `Int64`.\n<|/ c |>\n<| c |>\n\
    This doesn't work. `fib` returns `Int64` but `fib(n-1)` returns `Int`. You can't\
    \ add `Int` to `Int64`.\n<|/ c |>\n<| c |>\nThis doesn't work. `fib` returns `Int64`\
    \ but `fib(n-1)` returns `Int`. You can't add `Int` to `Int64`.\n<|/ c |>\n<|\
    \ a dscore=4 |>\n<code>", "    if n < 2\n        1\n    else\n        fib(n-1)\
    \ + fib(n-2)\n    end\nend\n</code>\n<|/ a |>\n<| c |>\nThis does not answer the\
    \ question. OP asked how to implement the Fibonacci function in Julia. Your answer\
    \ shows how to implement the Fibonacci function in Python.\n<|/ c |>\n<| c |>\n\
    The question was how to implement the Fibonacci function in Julia. My answer shows\
    \ how to implement the Fibonacci function in Python. OP asked how to implement\
    \ the Fibonacci function in Julia. My answer shows how to implement the Fibonacci\
    \ function in Python.\n<|/ c |>\n<| c |>\nThe question was how to implement the\
    \ Fibonacci function in Julia. My answer shows how to implement the Fibonacci\
    \ function in Python. OP asked how to implement the Fibonacci function in Julia.\
    \ My answer shows how to implement the Fibonacci function in Python.\n<|/ c |>\n\
    <| c |>\nThe question was how to implement the Fibonacci function in Julia. My\
    \ answer shows how to implement the Fibonacci function in Python. OP asked how\
    \ to implement the Fibonacci function in Julia. My answer shows how to implement\
    \ the Fibonacci function in Python.\n<|/ c |>\n<| c |>\nThe question was how to\
    \ implement the Fibonacci function in Julia. My answer shows how to implement\
    \ the Fibonacci function in Python. OP asked how to implement the Fibonacci function\
    \ in Julia. My answer shows how to implement the Fibonacci function in Python.\n\
    <|/ c |>\n<| a dscore=4 |>\nIn Julia 1.1 you can use the following code:\n<code>",
  "    if n<2 then return n\n    else return fib(n-1)+fib(n-2)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the n-th Fibonacci number modulo 1000000007 (the remainder after\
    \ dividing by 1000000007).", "    if n < 2 \n        then return n\n    else \n\
    \        return fib(n-2) + fib(n-1)\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the nth Fibonacci number using recursion.", "    if n\
    \ < 2\n    then return n\n    else return fib(n-1) + fib(n-2)\nend\n</cell>\n\
    <code language=julia-1.3>\n@time fib(10)\n</cell>\n<text>\nExercise: Write a recursive\
    \ function fib_rec that computes the n-th Fibonacci number recursively.\nHint:\
    \ You will need to use an accumulator to store the intermediate results. Hint:\
    \ You will need to use an if statement to determine when to stop the recursion.",
  "    if n == 0 || n == 1 \n        then return n\n    else \n        return fib(n-1)\
    \ + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n\
    </cell>\n<text>\nExercise: Write a recursive function fib_rec that computes the\
    \ nth Fibonacci number using recursion.", "    if n<2 \n        then return 1\n\
    \        else return fib(n-1)+fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n\
    \    1\n    >>> fib(8)\n    21\n    \"\"\"", "    if n == 0\n        0\n    elseif\
    \ n == 1\n        1\n    else\n        fib(n - 1) + fib(n - 2)\nend\n</code>\n\
    <|/ a tags=julia,fibonacci |>\n<| a tags=julia,fibonacci |>\n<code>", "    if\
    \ n < 2\n        1\n    else\n        fib(n-2) + fib(n-1)\nend\n</code>\n<|/ a\
    \ tags=julia,fibonacci |>\n<| a tags=julia,fibonacci |>\nI wrote a Julia package\
    \ to calculate Fibonacci numbers:\nhttps://github.com/jrm/Fibonacci.jl\n<code>\n\
    using Fibonacci", "    if n == 0 \n        0\n    elseif n == 1 \n        1\n\
    \    else\n        fib(n - 1) + fib(n - 2)\n    end\nend\n</code>\n<|/ a tags=julia,fibonacci\
    \ |>\n<| a dscore=2 |>\nI wrote a package for Julia that can do this:\nhttps://github.com/jrwls/Fibonacci.jl\n\
    <code>\nusing Fibonacci\nfib(10)\n</code>\n<|/ a tags=julia,fibonacci |>\n<| a\
    \ |>\n<code>", "    if n == 0 \n        then return 0\n    else if n == 1 \n \
    \       then return 1\n    else \n        return fib(n-1) + fib(n-2)\nend\n</code>\n\
    <|/ a tags=julia,fibonacci |>\n<| a tags=julia,fibonacci |>\n<code>", "    if\
    \ n == 0 || n == 1 \n        then return n\n    else \n        return fib(n-1)\
    \ + fib(n-2)\nend\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n\
    <code language=julia-1.0>\n@time fib(10)\n</cell>\n<text>\nExercise 1\nWrite a\
    \ recursive function named fib_r(n::Int64) which returns the nth Fibonacci number.",
  "    if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nThe @time macro tells Julia to execute the function\
    \ and time how long it takes to run. Julia will execute the function and time\
    \ how long it takes to run until it reaches the end of the function. The @time\
    \ macro will print out a message telling you how long it took to run the function.",
  "    if n == 0 \n        then return 1\n    else if n == 1 \n        then return\
    \ 1\n    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a recursive function fib_rec that\
    \ returns the nth Fibonacci number using recursion.", "    if n == 0\n       \
    \ 0\n    else\n        fib(n-1) + fib(n-2)\nend\n</code>\n<|/ a tags=julia,fibonacci\
    \ |>\n<| a dscore=2 |>\n<code>", "    if n <= 1 \n        then return n\n    else\
    \ \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 3\nWrite a recursive function named fib_r(n::Int64)\
    \ that returns the nth Fibonacci number using recursion.", "    if n < 2 \n  \
    \      then return n\n        else return fib(n-1) + fib(n-2)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise:\
    \ Write a recursive function fib_rec(n::Int64)::Int64 that returns the nth Fibonacci\
    \ number.", "    if n < 2 \n        then return n\n        else return fib(n-1)\
    \ + fib(n-2)\n    end\nend\n</code>\n<|/ a tags=julia,fibonacci,recursion |>\n\
    <| a tags=julia,fibonacci,recursion |>\n<code>", "    if n < 0 \n        error(\"\
    Fibonacci number must be positive\")\n    else if n == 0 \n        0\n    else\
    \ if n == 1 \n        1\n    else \n        fib(n-1) + fib(n-2)\nend\n</cell>\n\
    <code language=julia-1.1>\n@time fib(10)\n</cell>\n<text>\nExercise: Write a recursive\
    \ function fib_rec(n::Int64) that returns the nth Fibonacci number.", "    if\
    \ n == 0 || n == 1 \n        then return n\n    else \n        return fib(n-1)\
    \ + fib(n-2)\nend\n</code>\n<|/ a tags=julia,fibonacci |>\n<| a dscore=2 |>\n\
    I wanted to add another solution that is slightly more efficient than the others\
    \ posted here. It uses memoization to speed up the calculation of Fibonacci numbers.\
    \ \n<code>", "    if n == 0 \n        then return 0\n    else if n == 1 \n   \
    \     then return 1\n    else \n        return fib(n-1) + fib(n-2)\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\nThe recursive solution is very elegant and\
    \ very efficient. \n<code>", "    if n < 2\n        1\n    else\n        fib(n-1)\
    \ + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n\
    </cell>\n<text>\nExercise: Write a recursive function named fib_r(n::Int64) that\
    \ returns the nth Fibonacci number.", "    if n == 0 \n        then return 0\n\
    \    else if n == 1 \n        then return 1\n    else \n        return fib(n-1)\
    \ + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n\
    <text>\nExercise\nWrite a recursive function fib_r(n::Int64)::Int64 that returns\
    \ the n-th Fibonacci number.", "    if n == 0 \n        0\n    else if n == 1\
    \ \n        1\n    else \n        fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype fib(10)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the n-th Fibonacci number using recursion.", "    if\
    \ n < 2 \n        then return n\n    else \n        return fib(n-1) + fib(n-2)\n\
    end\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the n-th Fibonacci number in a given range.",
  "    if n <= 1 \n        then return n\n        else return fib(n-1) + fib(n-2)\n\
    \    end\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nI believe that `fib(n)`\
    \ should be `fib(n::Int64)` since `fib` does not take any arguments. Also, `fib(n)`\
    \ should be `fib(n::Int64)` since `fib` does not take any arguments.\n<|/ c |>\n\
    <| c |>\nI believe that `fib(n)` should be `fib(n::Int64)` since `fib` does not\
    \ take any arguments. Also, `fib(n)` should be `fib(n::Int64)` since `fib` does\
    \ not take any arguments.\n<|/ c |>\n<| c |>\nI believe that `fib(n)` should be\
    \ `fib(n::Int64)` since `fib` does not take any arguments. Also, `fib(n)` should\
    \ be `fib(n::Int64)` since `fib` does not take any arguments.\n<|/ c |>\n<| c\
    \ |>\nI believe that `fib(n)` should be `fib(n::Int64)` since `fib` does not take\
    \ any arguments. Also, `fib(n)` should be `fib(n::Int64)` since `fib` does not\
    \ take any arguments.\n<|/ c |>\n<| c |>\nI believe that `fib(n)` should be `fib(n::Int64)`\
    \ since `fib` does not take any arguments. Also, `fib(n)` should be `fib(n::Int64)`\
    \ since `fib` does not take any arguments.\n<|/ c |>\n<| a tags=julia |>\n<code>",
  "    if n < 2 \n        then return n\n    else \n        return fib(n-2) + fib(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the n-th Fibonacci number using recursion.",
  "    if n<2 then return n\n    else return fib(n-1)+fib(n-2)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that calculates the n-th Fibonacci number using memoization.", "    if n <=\
    \ 1 \n        then 1\n        else fib(n-1) + fib(n-2)\nend\n</code>\n<|/ a tags=julia,fibonacci\
    \ |>\n<| c |>\nThis is not the most efficient solution. `fib(n)` will call `fib(n-1)`\
    \ and `fib(n-2)` each time it is called. You can avoid this by memoizing the results\
    \ of `fib(n-1)` and `fib(n-2)`.\n<|/ c |>\n<| c |>\nI agree, memoization is the\
    \ way to go. I've added an example to my answer.\n<|/ c |>\n<| a tags=julia,fibonacci\
    \ |>\nA recursive solution:\n<code>", "    if n == 0\n        0\n    else\n  \
    \      fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n\
    </cell>\n<text>\nExercise: Write a function that calculates the n-th Fibonacci\
    \ number using recursion.", "    if n < 2 \n        then return n\n        else\
    \ return fib(n-1) + fib(n-2)\n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>", "    if n < 2\n        1\n    else\n        fib(n-2) + fib(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n@time fib(10)\n</cell>\n<text>\n\
    The @time macro tells Julia to run the function and time how long it takes to\
    \ run. In the above example, the function took about 1.4 seconds to run. Julia\
    \ is smart enough to know that fib(n-2) + fib(n-1) is a constant time operation,\
    \ and so it will not recalculate it each time fib(n) is called.", "    if n ==\
    \ 0 || n == 1 \n        return n\n    else \n        return fib(n-1) + fib(n-2)\n\
    end\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<text>\nThe @time\
    \ macro will tell you how long it took to run your code. On my laptop it took\
    \ about 0.3 seconds to run fib(10).", "    if n < 2 \n        then return n\n\
    \        else return fib(n-1) + fib(n-2)\n    end\nend\n</code>\n<|/ a tags=julia,fibonacci\
    \ |>\n<| c |>\nThis does not answer the question. OP asked for Julia code, not\
    \ Python code.\n<|/ c |>\n<| c |>\nI believe this does answer the question. OP\
    \ asked for Julia code, not Python code. Julia code can be easily translated to\
    \ Python code. Julia code can be easily translated to Python code. Julia code\
    \ can be easily translated to Python code. Julia code can be easily translated\
    \ to Python code. Julia code can be easily translated to Python code. Julia code\
    \ can be easily translated to Python code. Julia code can be easily translated\
    \ to Python code. Julia code can be easily translated to Python code. Julia code\
    \ can be easily translated to Python code. Julia code can be easily translated\
    \ to Python code. Julia code can be easily translated to Python code. Julia code\
    \ can be easily translated to Python code. Julia code can be easily translated\
    \ to Python code. Julia code can be easily translated to Python code. Julia code\
    \ can be easily translated to Python code. Julia code can be easily translated\
    \ to Python code. Julia code can be easily translated to Python code. Julia code\
    \ can be easily translated to Python code. Julia code can be easily translated\
    \ to Python code. Julia code can be easily translated to Python code. Julia code\
    \ can be easily translated to Python code. Julia code can be easily translated\
    \ to Python code. Julia code can be easily translated to Python code. Julia code\
    \ can be easily translated to Python code. Julia code can be easily translated\
    \ to Python code. Julia code can be easily translated to Python code. Julia code\
    \ can be easily translated to Python code. Julia code can be easily translated\
    \ to Python code. Julia code can be easily translated to Python code. Julia code\
    \ can be easily translated to Python code. Julia code can be easily translated\
    \ to Python code. Julia code can be easily translated to Python code. Julia code\
    \ can be easily translated to Python code. Julia code can be easily translated\
    \ to Python code. Julia code can be easily translated to Python code. Julia code\
    \ can be easily translated to Python code. Julia code can be easily translated\
    \ to Python code. Julia code can be easily translated to Python code. Julia code\
    \ can be easily translated to Python code. Julia code can be easily translated\
    \ to Python code. Julia code can be easily translated to Python code. Julia code\
    \ can be easily translated to Python code. ", "    if n < 2 \n        then return\
    \ n\n    else \n        return fib(n-2) + fib(n-1)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a recursive function fib_rec(n::Int64)\
    \ which returns the nth Fibonacci number using recursion.", "    if n < 2\n  \
    \      1\n    else\n        fib(n-2) + fib(n-1)\nend\n</cell>\n<code language=julia-1.5>",
  "    if n <= 1\n        1\n    else\n        fib(n-1) + fib(n-2)\n    end\nend\n\
    </cell>\n<text>\nExercise: Write a function that returns the nth Fibonacci number\
    \ using recursion.", "    if n <= 1 \n        then return n\n    else \n     \
    \   return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.3>\n@time\
    \ fib(10)\n</cell>\n<text>\nExercise 2\nWrite a recursive function named fib_r(n::Int64)\
    \ that returns the nth Fibonacci number using recursion.", "    if n <= 1\n  \
    \      1\n    else\n        fib(n-1) + fib(n-2)\nend\n</code>\n<|/ a tags=julia,fibonacci,recursion\
    \ |>\n<| c |>\nThis is not the most efficient solution. Recursion is slower than\
    \ looping.\n<|/ c |>\n<| c |>\nThe question was about recursion, not looping.\
    \ Looping can be done in O(1) time with tail recursion, but recursion is slower\
    \ than looping.\n<|/ c |>\n<| c |>\nI agree, however I wanted to point out that\
    \ looping can be done in O(1) time with tail recursion.\n<|/ c |>\n<| c |>\nI\
    \ agree, however I wanted to point out that looping can be done in O(1) time with\
    \ tail recursion.\n<|/ c |>\n<| c |>\nI agree, however I wanted to point out that\
    \ looping can be done in O(1) time with tail recursion.\n<|/ c |>\n<| a tags=julia,fibonacci,recursion\
    \ |>\nThe Julia implementation is very similar to the one in Haskell. Here is\
    \ a Julia implementation that uses tail recursion:\n<code>", "    if n == 0 ||\
    \ n == 1 \n        then return n\n    else \n        return fib(n-1) + fib(n-2)\n\
    end\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nThe Fibonacci\
    \ sequence is defined by the recurrence relation:", "    if n<2 then return n\n\
    \    else return fib(n-1)+fib(n-2)\nend\n</code>\n<|/ a |>\n<| c |>\nThe recursive\
    \ function can be written more efficiently as `fib(n) = fib(n-1) + fib(n-2)`\n\
    <|/ c |>\n<| c |>\nThanks for your suggestion, I have edited my answer.\n<|/ c\
    \ |>\n<| c |>\nThe recursive function can be written more efficiently as `fib(n)\
    \ = fib(n-1) + fib(n-2)`\n<|/ c |>\n<| c |>\nThanks for your suggestion, I have\
    \ edited my answer.\n<|/ c |>\n<| c |>\nThe recursive function can be written\
    \ more efficiently as `fib(n) = fib(n-1) + fib(n-2)`\n<|/ c |>\n<| a tags=julia,fibonacci\
    \ |>\n<code>", "    if n == 0 || n == 1 \n        then return n\n    else \n \
    \       return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<text>\nExercise\nWrite a recursive function named fib_r(n::Int64)\
    \ that returns the nth Fibonacci number.", "    if n < 2\n        1\n    else\n\
    \        fib(n-1) + fib(n-2)\nend\n</code>\n<|/ a tags=julia,fibonacci |>\n<|\
    \ a tags=julia,fibonacci |>\n<code>", "    if n == 0 || n == 1 \n        then\
    \ return n\n    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nThe Fibonacci sequence\
    \ is defined by the recurrence relation:", "    if n == 0 \n        0\n    else\
    \ if n == 1 \n        1\n    else \n        fib(n - 1) + fib(n - 2)\nend\n</cell>\n\
    <code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the n-th Fibonacci number modulo m.", "    if n < 0 \n\
    \        error(\"Fibonacci number must be non-negative\")\n    else if n == 0\
    \ \n        1\n    else if n == 1 \n        1\n    else \n        fib(n - 1) +\
    \ fib(n - 2)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the n-th Fibonacci number using recursion.", "    if n < 2 \n        then return\
    \ 1\n        else return fib(n-2) + fib(n-1)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ n-th Fibonacci number using recursion.", "    if n < 0 \n        error(\"Fibonacci\
    \ number must be positive\")\n    else if n == 0 \n        1\n    else if n ==\
    \ 1 \n        1\n    else \n        fib(n - 1) + fib(n - 2)\nend\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "    if n == 0 || n == 1 \n      \
    \  then return n\n    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n\
    <code language=julia-1.0>\n@time fib(10)\n</cell>\n<text>\nExercise: Write a recursive\
    \ function named fib_r(n::Int64) that returns the nth Fibonacci number.", "  \
    \  if n == 0 || n == 1 \n        then return n\n    else \n        return fib(n-1)\
    \ + fib(n-2)\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "  \
    \  if n == 0 || n == 1 \n        then return n\n    else \n        return fib(n-1)\
    \ + fib(n-2)\nend\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n\
    <code language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=juli", "    if n<2\
    \ \n        then return n\n        else return fib(n-1)+fib(n-2)\n    end\nend\n\
    </cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n<code language=julia-1.0>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the\
    \ n-th Fibonacci number using recursion.", "    if n == 0 \n        then return\
    \ 0\n    else if n == 1 \n        then return 1\n    else \n        return fib(n-1)\
    \ + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the n-th Fibonacci number using\
    \ recursion.", "    if n < 2\n        1\n    else\n        fib(n-2) + fib(n-1)\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia |>\n<code>", "    if n < 2 \n\
    \        then return n\n        else return fib(n-1) + fib(n-2)\n    end\nend\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nThis is not the most efficient solution.\
    \ Recursion is expensive. Using a while loop would be more efficient.\n<|/ c |>\n\
    <| c |>\nI agree, but I wanted to show how to implement a recursive function in\
    \ Julia. Of course the most efficient solution is to use a while loop, but I wanted\
    \ to show how to implement a recursive function in Julia.\n<|/ c |>\n<| a tags=julia,recursion\
    \ |>\nThe other answers here are great, but I wanted to add that you can also\
    \ use an anonymous function instead of a named function and get the same result:\n\
    <code>\nfib(n) = n < 2 ? n : fib(n-1) + fib(n-2)\n</code>\n<|/ a dscore=2 |>\n\
    <| a |>\nI wanted to add that you can also use an anonymous function instead of\
    \ a named function and get the same result:\n<code>\nfib(n) = n < 2 ? n : fib(n-1)\
    \ + fib(n-2)\n</code>\n<|/ a dscore=2 tags=julia,recursion |>\n<| a tags=julia,recursion\
    \ |>\n<code>", "    if n < 2 \n        then return n\n    else \n        return\
    \ fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.1>\n@time fib(10)\n\
    </cell>\n<code language=julia-1.1>\n@time fib(10)\n</cell>\n<code language=julia-1.1>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Fibonacci numbers\nWrite a function\
    \ that returns the nth Fibonacci number.", "    if n == 0 || n == 1 \n       \
    \ then return n\n    else \n        return fib(n-1) + fib(n-2)\n    end\nend\n\
    </cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<text>\nExercise 2\n\
    Write a recursive function named fib_r(n::Int64) that returns the nth Fibonacci\
    \ number.", "    if n == 0 \n        then return 0\n    else if n == 1 \n    \
    \    then return 1\n    else \n        return fib(n - 1) + fib(n - 2)\nend\n</code>\n\
    <|/ a tags=julia,fibonacci |>\n<| c |>\nThe `fib` function above is actually a\
    \ recursive function and should be defined as `fib(n::Int64)::Int64` instead of\
    \ `fib(n::Int64)::Int64 = ...`\n<|/ c |>\n<| a tags=julia,fibonacci |>\nThe other\
    \ answers here are great, but they don't take advantage of Julia's lazy evaluation\
    \ mechanism. Here's a version that does:\n<code>", "    if n < 2 \n        then\
    \ return n\n        else return fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the nth Fibonacci number in a given range.", "    if n <= 1 \n\
    \        then return n\n        else return fib(n-1) + fib(n-2)\n    end\nend\n\
    </cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<text>\nExercise\n\
    Write a function that computes the n-th Fibonacci number using memoization.",
  "    if n < 2\n        1\n    else\n        fib(n-1) + fib(n-2)\nend\n</code>\n\
    <|/ a tags=julia,fibonacci |>\n<| a tags=julia,fibonacci |>\n<code>", "    if\
    \ n == 0 \n        then return 1\n    else if n == 1 \n        then return 1\n\
    \    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a recursive function fib_rec that\
    \ computes the nth Fibonacci number.", "    if n == 0 || n == 1 \n        return\
    \ n\n    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a function that computes the n-th\
    \ Fibonacci number using memoization.", "    if n < 2\n    then 1\n    else fib(n-1)\
    \ + fib(n-2)\nend\n</code>\n<|/ a tags=julia,fibonacci |>\n<| a dscore=2 |>\n\
    <code>", "    if n < 2\n    then return n\n    else return fib(n-1) + fib(n-2)\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a recursive function named fib_iter that\
    \ returns the nth Fibonacci number. Test it by calling it with the argument 10.",
  "    if n <= 1 \n        then return n\n        else return fib(n-1) + fib(n-2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\n\
    The @time macro will measure the execution time of a block of code. Here we measure\
    \ the execution time of the function fib. Note that the function fib is recursive\
    \ and will take a long time to execute for large numbers. We will see how we can\
    \ optimize this later.", "    if n < 2\n        1\n    else\n        fib(n-1)\
    \ + fib(n-2)\n    end\nend\n</code>\n<|/ a tags=julia,fibonacci |>\n<| c |>\n\
    This is not the fastest solution, since it requires recursion. Also the code is\
    \ not very readable.\n<|/ c |>\n<| c |>\nThe code is not very readable because\
    \ it is written for Julia 0.6.\n<|/ c |>\n<| c |>\nI agree, it is very unreadable.\
    \ But the OP asked for Julia 0.6, so I posted it anyway. Also the code is not\
    \ very readable because it is written for Julia 0.6. Anyway, I added a solution\
    \ for Julia 0.6.\n<|/ c |>\n<| c |>\nI added a solution for Julia 0.6\n<|/ c |>\n\
    <| c |>\nI added a solution for Julia 0.6\n<|/ c |>\n<| a tags=julia,fibonacci\
    \ |>\nHere is a solution for Julia 0.6.\n<code>", "    if n == 0 || n == 1 \n\
    \        then return n\n    else \n        fib(n - 1) + fib(n - 2)\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a |>\n<code>", "    if n == 0 || n == 1 \n        then return\
    \ n\n    else \n        return fib(n-1) + fib(n-2)\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis doesn't answer the question, which is about how to implement\
    \ the Fibonacci sequence in Julia.\n<|/ c |>\n<| c |>\nI agree with you, my answer\
    \ was more about how to implement the Fibonacci sequence in Julia. My answer was\
    \ more about how to implement the Fibonacci sequence in Julia, and I thought it\
    \ would be helpful to others who are looking for how to implement the Fibonacci\
    \ sequence in Julia. My answer was more about how to implement the Fibonacci sequence\
    \ in Julia, and I thought it would be helpful to others who are looking for how\
    \ to implement the Fibonacci sequence in Julia. My answer was more about how to\
    \ implement the Fibonacci sequence in Julia, and I thought it would be helpful\
    \ to others who are looking for how to implement the Fibonacci sequence in Julia.\n\
    <|/ c |>\n<| a |>\n<code>", "    if n < 2 \n        then return n\n        else\
    \ return fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\n\
    Exercise: Write a recursive function fib_r(n::Int64) which returns the nth Fibonacci\
    \ number.", "    if n < 2 \n        then return n\n        else return fib(n-1)\
    \ + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n\
    </cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5", "  \
    \  if n < 2\n    then return 1\n    else return fib(n-1) + fib(n-2)\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis code doesn't work. `fib(1)` returns `1`, not\
    \ `1`.\n<|/ c |>\n<| c |>\nThis code does work. `fib(1)` returns `1`, not `1`.\n\
    <|/ c |>\n<| c |>\nI fixed the code so it now works. Thanks for pointing it out.\n\
    <|/ c |>\n<| a tags=julia,fibonacci |>\n<code>", "    if n == 0\n        0\n \
    \   else\n        fib(n - 1) + fib(n - 2)\nend\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a dscore=2 |>\n<code>", "    if n == 0 || n == 1 \n        then return n\n \
    \   else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the nth Fibonacci number modulo 1000000007\
    \ (i.e. the remainder after dividing by 1000000007).\nHint: Use a recursive function.",
  "    if n < 2 \n        then return n\n        else return fib(n-2) + fib(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<text>\n\
    Exercise 3\nWrite a Julia function called fib_iter that returns the nth Fibonacci\
    \ number using recursion.", "    if n < 0 \n        error(\"Fibonacci number must\
    \ be positive\")\n    else if n == 0 \n        1\n    else if n == 1 \n      \
    \  1\n    else \n        fib(n - 1) + fib(n - 2)\nend\n</code>\n<|/ a tags=julia,fibonacci\
    \ |>\n<| a dscore=2 |>\nIn Julia 1.3 you can use the Fibonacci function from the\
    \ Itertools package:\n<code>\njulia> using Itertools", "    if n < 0 \n      \
    \  error(\"Fibonacci number must be positive\")\n    else if n == 0 \n       \
    \ 0\n    else if n == 1 \n        1\n    else \n        fib(n-1) + fib(n-2)\n\
    end\n</cell>\n<text>\nExercise: Write a function that returns the nth Fibonacci\
    \ number modulo some modulus. For example, fib(10, 5) == 55 % 5 == 0.", "    if\
    \ n == 0 \n        then return 0\n    else if n == 1 \n        then return 1\n\
    \    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ n-th Fibonacci number using recursion.", "    if n < 2 \n        then return\
    \ n\n    else \n        return fib(n-2) + fib(n-1)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a recursive function fib_rec that\
    \ computes the n-th Fibonacci number recursively.\nHint: Use a base case to stop\
    \ recursion.", "    if n < 2 \n        then return n\n        else return fib(n-1)\
    \ + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a recursive function which returns the n-th\
    \ Fibonacci number using memoization.", "    if n <= 1\n        1\n    else\n\
    \        fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<text>\nExercise\nWrite a function that calculates the\
    \ n-th Fibonacci number using recursion.", "    if n < 2\n    then 1\n    else\
    \ fib(n-1) + fib(n-2)\nend\n</code>\n<|/ a tags=julia,fibonacci |>\n<| a tags=julia,fibonacci\
    \ |>\n<code>", "    if n == 0 \n        then return 1\n    else if n == 1 \n \
    \       then return 1\n    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n\
    <code language=julia-1.0>\n@time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ Julia function called fib_iter that computes the Fibonacci numbers using recursion.\
    \ Test it by timing it.", "    if n < 2\n        1\n    else\n        fib(n-1)\
    \ + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n\
    </cell>\n<text>\nThe Fibonacci sequence is defined by the recurrence relation:",
  "    if n < 2\n        1\n    else\n        fib(n-2) + fib(n-1)\nend\n</code>\n\
    <|/ a tags=julia,fibonacci,recursion |>\n<| a tags=julia,fibonacci,recursion |>\n\
    I wanted to add another answer that uses memoization. \n<code>", "    if n ==\
    \ 0 \n        then return 1\n    else if n == 1 \n        then return 1\n    else\
    \ \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the\
    \ n-th Fibonacci number using recursion.", "    if n == 0 || n == 1 \n       \
    \ then return n\n    else \n        return fib(n-1) + fib(n-2)\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis is not an answer to the question. OP asked for\
    \ recursive solution and this answer does not provide that.\n<|/ c |>\n<| c |>\n\
    This is not an answer to the question. OP asked for recursive solution and this\
    \ answer does not provide that.\n<|/ c |>\n<| a tags=julia,recursion |>\n<code>",
  "    if n == 0 || n == 1 \n        then return n\n    else \n        return fib(n-1)\
    \ + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n\
    <code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=juli", "    if n\
    \ < 2 \n        then return n\n    else \n        return fib(n-2) + fib(n-1)\n\
    end\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.3>", "    if n < 2 \n        then return\
    \ 1\n        else return fib(n-1) + fib(n-2)\n    end\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=julia,fibonacci,recursion |>\n<code>", "    if n == 0 \n     \
    \   then return 0\n    else if n == 1 \n        then return 1\n    else \n   \
    \     return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fi", "    if n < 2 \n        then return n\n    else\
    \ \n        return fib(n-2) + fib(n-1)\nend\n</cell>\n<code language=julia-1.4>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a recursive function fib_rec(n::Int64)\
    \ which returns the nth Fibonacci number.", "    if n < 2\n    then return n\n\
    \    else return fib(n-1) + fib(n-2)\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1\
    \ |>\n<code>", "    if n<2 then return n else fib(n-1)+fib(n-2) \nend \n</code>\n\
    <|/ a tags=julia,fibonacci |>\n<| a tags=julia,fibonacci |>\n<code>", "    if\
    \ n == 0 || n == 1 \n        then return n\n    else \n        fib(n - 1) + fib(n\
    \ - 2)\nend\n</code>\n<|/ a tags=julia,fibonacci |>\n<| c |>\nThis does not provide\
    \ an answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post. - [From Review](/review/low-quality-posts/27829007)\n\
    <|/ c |>\n<| c |>\nThis does provide an answer to the question. He asked how to\
    \ implement the Fibonacci sequence in Julia. He also asked how to implement it\
    \ recursively, which I did.\n<|/ c |>\n<| c |>\nThis does not provide an answer\
    \ to the question. To critique or request clarification from an author, leave\
    \ a comment below their post. - [From Review](/review/low-quality-posts/27829007)\n\
    <|/ c |>\n<| c |>\nThis does not provide an answer to the question. To critique\
    \ or request clarification from an author, leave a comment below their post. -\
    \ [From Review](/review/low-quality-posts/27829007)\n<|/ c |>\n<| c |>\nThis does\
    \ not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/27829007)\n\
    <|/ c |>\n<| a tags=julia,fibonacci |>\n<code>", "    if n < 2 \n        then\
    \ return n\n    else \n        return fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\n@time fib(10)\n</cell>\n<text>\nExercise\nWrite a recursive\
    \ function fib_rec(n::Int64)::Int64 that returns the n-th Fibonacci number.",
  "    if n < 2 \n        then return n\n        else return fib(n-1) + fib(n-2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\n\
    The Fibonacci sequence is defined by the recurrence relation:", "    if n == 0\
    \ || n == 1 \n        return n\n    else \n        return fib(n-1) + fib(n-2)\n\
    end\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise:\
    \ Write a recursive function fib_rec(n::Int64)::Int64 that returns the n-th Fibonacci\
    \ number.", "    if n == 0 || n == 1 \n        then return n\n    else \n    \
    \    return fib(n-1) + fib(n-2)\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>", "    if n == 0 || n == 1 \n        then return n\n    else \n \
    \       return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a recursive function fib_rec(n::Int64)::Int64\
    \ that returns the nth Fibonacci number.", "    if n < 2\n        1\n    else\n\
    \        fib(n-1) + fib(n-2)\nend\n</code>\n<|/ a tags=julia,fibonacci |>\n<|\
    \ c |>\nThis does not answer the question. OP asked for Julia, not Python.\n<|/\
    \ c |>\n<| c |>\nThe question was about Julia, not Python.\n<|/ c |>\n<| a dscore=3\
    \ |>\nA recursive solution in Julia is as follows:\n<code>", "    if n < 2 \n\
    \        then return n\n        else return fib(n-1) + fib(n-2)\n    end\nend\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=julia,fibonacci |>\n<code>", "    if n ==\
    \ 0 || n == 1 \n        then return n\n    else \n        return fib(n-1) + fib(n-2)\n\
    end\n</cell>\n<code language=julia-1.4>\n@time fib(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a recursive function named fib_r(n::Int64) that returns the nth Fibonacci\
    \ number.", "    if n == 0\n        0\n    else\n        fib(n-1) + fib(n-2)\n\
    end\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that calculates the n-th Fibonacci number using memoization.",
  "    if n < 2\n        1\n    else\n        fib(n-2) + fib(n-1)\nend\n</cell>\n\
    <code language=julia-1.0>", "    if n <= 1 \n        then return n\n        else\
    \ return fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a recursive function named fib_r(n::Int64)\
    \ that returns the nth Fibonacci number.", "    if n == 0\n        0\n    elseif\
    \ n == 1\n        1\n    else\n        fib(n - 1) + fib(n - 2)\nend\n</code>\n\
    <|/ a tags=julia,fibonacci |>\n<| c |>\nThe `fib` function can be simplified a\
    \ bit: `fib(n) = n < 2 ? n : fib(n-1) + fib(n-2)`\n<|/ c |>\n<| c |>\nThanks for\
    \ your comment. I just wanted to show that Julia has some nice features that can\
    \ make code more readable. Of course your solution is also fine.\n<|/ c |>\n<|\
    \ c |>\nI agree that your solution is more readable, but I find it less readable\
    \ than the `fib` function I posted. And I find it less readable because you used\
    \ `if` instead of `?:`. Also, `fib` does not return a `Int64` but a `Int` which\
    \ is not the same thing. Finally, I find it less readable because you used `fib`\
    \ instead of `fib2`.\n<|/ c |>\n<| c |>\nI agree with you that `fib` function\
    \ can be simplified a bit. But in my opinion it is more readable than `fib2` function.\
    \ And I agree that `fib` function does not return a `Int64` but a `Int` which\
    \ is not the same thing. Finally, I agree that `fib` function can be simplified\
    \ a bit. But in my opinion it is more readable than `fib2` function. And I agree\
    \ that `fib` function does not return a `Int64` but a `Int` which is not the same\
    \ thing. Finally, I agree that `fib` function can be simplified a bit. But in\
    \ my opinion it is more readable than `fib2` function.\n<|/ c |>\n<| c |>\nI agree\
    \ that `fib` function can be simplified a bit. But in my opinion it is more readable\
    \ than `fib2` function. And I agree that `fib` function does not return a `Int64`\
    \ but a `Int` which is not the same thing. Finally, I agree that `fib` function\
    \ can be simplified a bit. But in my opinion it is more readable than `fib2` function.\n\
    <|/ c |>\n<| a |>\n<code>", "    if n == 0 \n        0\n    else if n == 1 \n\
    \        1\n    else \n        fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ n-th Fibonacci number using recursion.", "    if n == 0\n        0\n    else\n\
    \        fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ fib(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the Fibonacci\
    \ number of the given integer $n$. \nThe Fibonacci numbers are defined as:", " \
    \   if n < 2 \n        then return n\n        else return fib(n-1) + fib(n-2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that computes the n-th Fibonacci number using recursion.",
  "    if n <= 1 \n        then 1\n        else fib(n-1) + fib(n-2)\n    end\nend\n\
    </code>\n<|/ a tags=julia,fibonacci |>\n<| a tags=julia,fibonacci |>\nThe other\
    \ answers are good, but I wanted to add that you can also use recursion to solve\
    \ this problem:\n<code>", "    if n < 2 \n        then return n\n        else\
    \ return fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the Fibonacci number of the given integer.",
  "    if n <= 2\n        1\n    else\n        fib(n-1) + fib(n-2)\nend\n</cell>\n\
    <code language=julia-1.3>\n@time fib(10)\n</cell>\n<text>\nExercise: Write a recursive\
    \ function fib_rec(n::Int64) that returns the n-th Fibonacci number.", "    if\
    \ n<2 then return n\n    else return fib(n-1)+fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a recursive function fib_rec that\
    \ computes the nth Fibonacci number.", "    if n < 2 \n        then return n\n\
    \    else \n        return fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a recursive function named fib_r(n::Int64)\
    \ that returns the nth Fibonacci number.", "    if n<2 \n        then return 1\n\
    \    else \n        return fib(n-1)+fib(n-2)\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a recursive function fib_rec that\
    \ computes the n-th Fibonacci number.", "    if n < 2 \n        then return n\n\
    \        else return fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<text>\nExercise\nWrite a function that returns the n-th\
    \ Fibonacci number in a given range.", "    if n==0 then return 0\n    if n==1\
    \ then return 1\n    return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\n\
    Exercise\nWrite a function that calculates the n-th Fibonacci number using recursion.",
  "    if n == 0 || n == 1 \n        return n\n    else \n        return fib(n-1)\
    \ + fib(n-2)\nend\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n\
    <text>\nExercise: Write a recursive function named fib_r(n::Int64) that returns\
    \ the nth Fibonacci number.", "    if n == 0 || n == 1 \n        then return n\n\
    \    else \n        fib(n - 1) + fib(n - 2)\nend\n</code>\n<|/ a tags=julia,fibonacci\
    \ |>\n<| a tags=julia,fibonacci |>\n<code>", "    if n == 0\n        0\n    elseif\
    \ n == 1\n        1\n    else\n        fib(n - 1) + fib(n - 2)\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>", "    if n == 0 \n        then return\
    \ 0\n    else if n == 1 \n        then return 1\n    else \n        return fib(n-1)\
    \ + fib(n-2)\nend\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n\
    <text>\nExercise\nWrite a recursive function named fib_r(n::Int64) that returns\
    \ the nth Fibonacci number.", "    if n == 0 \n        0\n    else if n == 1 \n\
    \        1\n    else \n        fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n\
    \    1\n    >>> fib(8)\n    21\n    \"\"\"", "    if n == 0 || n == 1 \n     \
    \   then return n\n    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n\
    <code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=juli", "    if n < 2 \n        then return\
    \ n\n        else return fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 3\nWrite a function that calculates the\
    \ n-th Fibonacci number using memoization.", "    if n < 2 \n        then return\
    \ n\n        else return fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5",
  "    if n <= 1\n        1\n    else\n        fib(n-1) + fib(n-2)\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=julia,fibonacci,recursion |>\n<code>", "    if n\
    \ <= 1 \n        then return n\n        else return fib(n-1) + fib(n-2)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<text>\nExercise\
    \ 1\nWrite a function that computes the n-th Fibonacci number using memoization.",
  "    if n <= 1 \n        then 1\n        else fib(n-1) + fib(n-2)\n    end\nend\n\
    </code>\n<|/ a tags=julia,fibonacci |>\n<| c |>\nThis doesn't work. `fib` returns\
    \ a `Int64` but `fib(n-1)` returns a `Int`.\n<|/ c |>\n<| c |>\nI fixed the return\
    \ type. Thanks!\n<|/ c |>\n<| a tags=julia,fibonacci |>\nThe accepted answer does\
    \ not work anymore in Julia 1.5.\nHere is a more recent solution:\n<code>", " \
    \   if n < 2\n        1\n    else\n        fib(n-1) + fib(n-2)\nend\n</cell>\n\
    <text>\nFibonacci numbers\nFibonacci numbers are the numbers in the Fibonacci\
    \ sequence which do not exceed four million. Fibonacci numbers are the numbers\
    \ in the Fibonacci sequence which do not exceed four million. Fibonacci numbers\
    \ are the numbers in the Fibonacci sequence which do not exceed four million.\
    \ Fibonacci numbers are the numbers in the Fibonacci sequence which do not exceed\
    \ four million. Fibonacci numbers are the numbers in the Fibonacci sequence which\
    \ do not exceed four million. Fibonacci numbers are the numbers in the Fibonacci\
    \ sequence which do not exceed four million.", "    if n == 0 then return 1\n\
    \    if n == 1 then return 1\n    return fib(n-1) + fib(n-2)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that calculates the n-th Fibonacci number using recursion.", "    if n < 2\n\
    \        1\n    else\n        fib(n-2) + fib(n-1)\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=julia,fibonacci |>\nIn Julia 1.1 you can use the Fibonacci function\
    \ from the Base package:\n<code>\njulia> Base.Fibonacci(10)\n55\n</code>\n<|/\
    \ a dscore=2 |>\n<| a dscore=1 |>\nIn Julia 1.1 you can use the Fibonacci function\
    \ from the Base package:\n<code>\njulia> Base.Fibonacci(10)\n55\n</code>\n<|/\
    \ a tags=julia,fibonacci |>\n<| a dscore=0 |>\n<code>", "    if n <= 1 \n    \
    \    then return n\n    else \n        return fib(n-1) + fib(n-2)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that computes the n-th Fibonacci number using recursion.", " \
    \   if n == 0\n        0\n    else\n        fib(n-1) + fib(n-2)\nend\n</cell>\n\
    <code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a recursive function fib_rec that\
    \ computes the nth Fibonacci number. Compare its performance with fib. How much\
    \ faster is it?"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
