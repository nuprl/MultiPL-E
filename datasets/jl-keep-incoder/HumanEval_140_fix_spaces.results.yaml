name: HumanEval_140_fix_spaces
language: julia
results:
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    fixed = replace(replace(replace(replace(text,\
    \ \" \", \"_\"), \"  \", \"_\"), \"  \", \"_\"), \"  \", \"_\")\n    \n    if\
    \ fixed.length < text.length\n        fixed = fixed + \"-\" * (text.length - fixed.length)\n\
    \    end\n    \n    return fixed\nend\n</cell>\n<code language=julia-1.5>\n\"\"\
    \"\n    remove_spaces(text::String)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty\
    \  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\"\
    ) == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpieofj_iq.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpieofj_iq.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    space_count = count_spaces(text)\n\
    \    \n    if space_count > 2\n        space_count = space_count - 1\n       \
    \ \n        space_string = \"\"\n        for i = 1:space_count\n            space_string\
    \ += \"-\"\n        end\n        \n        return replace(text, \" \", \"_\",\
    \ space_string)\n    else\n        return replace(text, \" \", \"_\")\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    count_spaces(text::String)\n\
    using Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpldqvp0ju.jl:28\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpldqvp0ju.jl:28\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    replaced = replace(text,\
    \ \"  \", \"_\")\n    replaced = replace(replaced, \"  \", \"_\")\n    replaced\
    \ = replace(replaced, \"  \", \"_\")\n    \n    if length(replaced) > 2 \n   \
    \     replaced = replace(replaced, \"  \", \"-\")\n    end\n    \n    return replaced\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that takes a string and returns\
    \ the string with all consecutive spaces replaced with -. \nFor example fix_spaces(\"\
    Example 1\") == \"Example-1\"\nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\
    \t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif\
    \ \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ) == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\") == \"\
    Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpikjfijkr.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpikjfijkr.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    fixed_text = text\n\
    \    \n    if text == \"\"\n        return text\n    \n    fixed_text = replace(fixed_text,\
    \ \" \", \"_\")\n    \n    if length(fixed_text) > 2\n        fixed_text = replace(fixed_text,\
    \ \" \", \"-\")\n    end\n    \n    return fixed_text\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string as input and returns the string\
    \ with all consecutive spaces replaced by a single dash. \nFor example fix_spaces(\"\
    Example 1\") should return \"Example-1\".\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty\
    \  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\"\
    ) == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3kf5cl2l.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3kf5cl2l.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    space_count = text.count('\
    \ ')\n    \n    if space_count > 2\n        \n        space_count = text.count('\
    \ ') + 1\n        \n        space_count = text.count(' ') - space_count\n    \
    \    \n        space_count = text.count(' ') - space_count\n        \n       \
    \ space_count = text.count(' ') - space_count\n        \n        space_count =\
    \ text.count(' ') - space_count\n        \n        space_count = text.count('\
    \ ') - space_count\n        \n        space_count = text.count(' ') - space_count\n\
    \        \n        space_count = text.count(' ') - space_count\n        \n   \
    \     space_count = text.count(' ') - space_count\n        \n        space_count\
    \ = text.count(' ') - space_count\n        \n        space_count = text.count('\
    \ ') - space_count\n        \n        space_count = text.count(' ') - space_count\n\
    \        \n        space_count = text.count(' ') - space_count\n        \n   \
    \     space_count = text.count(' ') - space_count\n        \n        space_count\
    \ = text.count(' ') - space_count\n        \n        space_count = text.count('\
    \ ') - space_count\n        \n        space_count = text.count(' ') - space_count\n\
    \        \n        space_count = text.count(' ') - space_count\n        \n   \
    \     space_count = text.count(' ') - space_count\n        \n        space_count\
    \ = text.count(' ') - space_count\n        \n        space_count = text.count('\
    \ ') - space_count\n        \n        space_count = text.count(' ') - space_count\n\
    \        \n        space_count = text.count(' ') - space_count\n        \n   \
    \     space_count = text.count(' ') - space_count\n        \n        space_count\
    \ = text.count(' ') - space_count\n        \n        space_count = text.count('\
    \ ') - space_count\n        \n        space_count = text.count(' ') - space_count\n\
    \        \n        space_count = text.count(' ') - space_count\n        \n   \
    \     space_count = text.count(' ') - space_count\n        \n        space_count\
    \ = text.count(' ') - space_count\n        \n        space_count = text.count('\
    \ ') - space_count\n        \n        space_count = text.count(' ') - space_count\n\
    \        \n        space_count = text.count(' ') - space_count\n        \n   \
    \     space_count = text.count(' ') - space_count\n        \n        space_count\
    \ = text.count(' ') - space_count\n        \n        space_count = text.count('\
    \ ') - space_count\n        \n        space_count = text.count(' ') - space_count\n\
    \        \n        space_count = text.count(' ') - space_count\n        \n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"Example\"\
    ) == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0qs5tlsb.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0qs5tlsb.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    # Replace all spaces\
    \ with underscores\n    text = replace(text, \"  \", \"_\")\n    \n    # Replace\
    \ consecutive spaces with -\n    spaces = findall(text, \" \")\n    if length(spaces)\
    \ > 1\n        spaces = replace(spaces, \"-\", \"_\")\n        text = join(spaces,\
    \ \" \")\n    end\n    \n    return text\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test fix_spaces\nfix_spaces(\"Example\")\n</cell>\n<code language=julia-1.5>\n\
    # Test fix_spaces\nfix_spaces(\"Example 1\")\n</cell>\n<code language=julia-1.5>\n\
    # Test fix_spaces\nfix_spaces(\" Example 2\")\n</cell>\n<code language=julia-1.5>\n\
    # Test fix_spaces\nfix_spaces(\" Example   3\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns a string where all \n    spaces\
    \ are replaced with underscores, and all consecutive \n    underscores are replaced\
    \ with dashes.\nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgxc5_ko6.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgxc5_ko6.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    fixed_text = text\n\
    \    \n    if text == \"\"\n        return fixed_text\n    \n    spaces = findall(\"\
    \ \", text)\n    \n    if length(spaces) > 1\n        \n        fixed_text = replace(fixed_text,\
    \ \"  \", \"_\")\n        \n    end\n    \n    return fixed_text\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a string text, replace all spaces\
    \ in it with underscores, \n    and if a string has more than 2 consecutive spaces,\
    \ \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\"\
    ) == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\
    \n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_ay61hwb.jl:28\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_ay61hwb.jl:28\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    replaced = replace(replace(replace(replace(text,\
    \ \" \", \"_\"), \"  \", \"_\"), \"  \", \" \"), \"  \", \"_\")\n    \n    if\
    \ length(text) > 2 \n        replaced = replace(replaced, \" \", \"-\")\n    end\n\
    \    \n    return replaced\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    remove_spaces(text::String)\nusing Test\n\n@testset begin\n\ncandidate =\
    \ fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty\
    \  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\"\
    ) == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpprg7irpv.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpprg7irpv.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    space_count = count_spaces(text)\n\
    \    \n    if space_count > 2\n        space_count = space_count - 2\n       \
    \ \n        space_replacement = \"-\" * space_count\n        \n        return\
    \ replace(text, \" \", space_replacement)\n    else\n        return text\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    count_spaces(text::String)\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"Example\"\
    ) == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwfqz8v6s.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwfqz8v6s.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    replaced = replace(text,\
    \ \"  \", \"_\")\n    replaced = replace(replaced, \"  \", \"-\")\n    \n    if\
    \ length(replaced) > 2 \n        replaced = replace(replaced, \"  \", \"-\")\n\
    \    end\n    \n    return replaced\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    remove_spaces(text::String)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty\
    \  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\"\
    ) == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6i62y2b7.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6i62y2b7.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    fixed_text = text\n\
    \    \n    if text == \"\"\n        return fixed_text\n    \n    spaces_count\
    \ = count_spaces(text)\n    \n    if spaces_count > 2\n        fixed_text = replace(text,\
    \ \"  \", \"_\")\n    end\n    \n    return fixed_text\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    count_spaces(text::String)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty\
    \  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\"\
    ) == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy0wc3kv8.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpy0wc3kv8.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    text_split = split(text,\
    \ \" \")\n    \n    text_split = [replace(text_split[i], \" \", \"_\") for i =\
    \ 1:length(text_split)]\n    \n    text_split = join(text_split, \" \")\n    \n\
    \    if length(text_split) > 2\n        text_split = replace(text_split, \" \"\
    , \"-\")\n    end\n    \n    return text_split\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    split_and_replace(text::String)::Array{String}\n    \n    Given a\
    \ string text, split it into an array of substrings \n    separated by spaces,\
    \ and replace all spaces with underscores \n    \n    split_and_replace(\"Example\"\
    ) == \"Example\"\n    split_and_replace(\"Example 1\") == \"Example_1\"\n    split_and_replace(\"\
    \ Example 2\") == \"_Example_2\"\n    split_and_replace(\" Example   3\") == \"\
    _Example-3\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\
    \t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif\
    \ \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ) == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\") == \"\
    Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp16k7z5gh.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp16k7z5gh.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    text_split = split(text,\
    \ \" \")\n    \n    text_split = [replace(text_split[i], \"_\") for i in 1:length(text_split)]\n\
    \    \n    text_split = join(text_split, \" \")\n    \n    if length(text_split)\
    \ > 2\n        text_split = replace(text_split, \"  \", \"_\")\n    end\n    \n\
    \    return text_split\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    remove_spaces(text::String)\n\
    using Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpw4i44y0a.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpw4i44y0a.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    fix_spaces_helper(text,\
    \ \"\", \"\")\nend\nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t\
    @test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif\
    \ \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ) == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\") == \"\
    Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpg4qt3fw3.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"Example\") == \"Example\"\n  UndefVarError: fix_spaces_helper\
    \ not defined\n  Stacktrace:\n   [1] fix_spaces(::String) at /tmp/tmpg4qt3fw3.jl:13\n\
    \   [2] top-level scope at /tmp/tmpg4qt3fw3.jl:20\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpg4qt3fw3.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpg4qt3fw3.jl:21\n  Test threw exception\n  Expression: candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\"\n  UndefVarError: fix_spaces_helper not\
    \ defined\n  Stacktrace:\n   [1] fix_spaces(::String) at /tmp/tmpg4qt3fw3.jl:13\n\
    \   [2] top-level scope at /tmp/tmpg4qt3fw3.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpg4qt3fw3.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpg4qt3fw3.jl:22\n  Test threw exception\n  Expression: candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\n  UndefVarError:\
    \ fix_spaces_helper not defined\n  Stacktrace:\n   [1] fix_spaces(::String) at\
    \ /tmp/tmpg4qt3fw3.jl:13\n   [2] top-level scope at /tmp/tmpg4qt3fw3.jl:22\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpg4qt3fw3.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpg4qt3fw3.jl:23\n  Test threw exception\n  Expression: candidate(\"\
    Exa   mple\") == \"Exa-mple\"\n  UndefVarError: fix_spaces_helper not defined\n\
    \  Stacktrace:\n   [1] fix_spaces(::String) at /tmp/tmpg4qt3fw3.jl:13\n   [2]\
    \ top-level scope at /tmp/tmpg4qt3fw3.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpg4qt3fw3.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpg4qt3fw3.jl:24\n  Test threw exception\n  Expression: candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\"\n  UndefVarError: fix_spaces_helper\
    \ not defined\n  Stacktrace:\n   [1] fix_spaces(::String) at /tmp/tmpg4qt3fw3.jl:13\n\
    \   [2] top-level scope at /tmp/tmpg4qt3fw3.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpg4qt3fw3.jl:19\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg4qt3fw3.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    # Replace all spaces\
    \ with underscores\n    text = replace(text, \" \", \"_\")\n    \n    # Replace\
    \ consecutive spaces with -\n    space_count = count_spaces(text)\n    if space_count\
    \ > 2\n        text = replace(text, \"  \", \"-\")\n    end\n    \n    return\
    \ text\nend\n</cell>\n<code language=julia-1.5>\n# Test your code\n@test fix_spaces(\"\
    Example\") == \n    \"Example\"\n@test fix_spaces(\"Example 1\") == \n    \"Example_1\"\
    \n@test fix_spaces(\" Example 2\") == \n    \"_Example_2\"\n@test fix_spaces(\"\
    \ Example   3\") == \n    \"_Example-3\"\n</cell>\n<text>\nImplement count_words\n\
    Given a text, return the number of words in it. Words are defined as a sequence\
    \ of alphanumeric characters.\nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\
    \t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif\
    \ \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ) == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\") == \"\
    Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfjpl09n4.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfjpl09n4.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    text_no_spaces = text\n\
    \    \n    if text == \"\"\n        return text\n    \n    if text == \" \" \n\
    \        return text\n    \n    if text == \" \"\n        return \"_\"\n    \n\
    \    if text == \" \"\n        return \"-\"\n    \n    if text == \" \"\n    \
    \    return \"_\"\n    \n    if text == \" \"\n        return \"-\"\n    \n  \
    \  if text == \" \"\n        return \"_\"\n    \n    if text == \" \"\n      \
    \  return \"-\"\n    \n    if text == \" \"\n        return \"_\"\n    \n    if\
    \ text == \" \"\n        return \"-\"\n    \n    if text == \" \"\n        return\
    \ \"_\"\n    \n    if text == \" \"\n        return \"-\"\n    \n    if text ==\
    \ \" \"\n        return \"_\"\n    \n    if text == \" \"\n        return \"-\"\
    \n    \n    if text == \" \"\n        return \"_\"\n    \n    if text == \" \"\
    \n        return \"-\"\n    \n    if text == \" \"\n        return \"_\"\n   \
    \ \n    if text == \" \"\n        return \"-\"\n    \n    if text == \" \"\n \
    \       return \"_\"\n    \n    if text == \" \"\n        return \"-\"\n    \n\
    \    if text == \" \"\n        return \"_\"\n    \n    if text == \" \"\n    \
    \    return \"-\"\n    \n    if text == \" \"\n        return \"_\"\n    \n  \
    \  if text == \" \"\n        return \"-\"\n    \n    if text == \" \"\n      \
    \  return \"_\"\n    \n    if text == \" \"\n        return \"-\"\n    \n    if\
    \ text == \" \"\n        return \"_\"\n    \n    if text == \" \"\n        return\
    \ \"-\"\n    \n    if text == \" \"\n        return \"_\"\n    \n    if text ==\
    \ \" \"\n        return \"-\"\n    \n    if text == \" \"\n        return \"_\"\
    \n    \n    if text == \" \"\n        return \"-\"\n    \n    if text == \" \"\
    \n        return \"_\"\n    \n    if text == \" \"\n        return \"-\"\n   \
    \ \n    if text == \" \"\n        return \"_\"\n    \n    if text == \" \"\n \
    \       return \"-\"\n    \n    if text == \" \"\n        return \"_\"\n    \n\
    \    if text == \" \"\n        return \"-\"\n    \n    if text == \" \"\n    \
    \    return \"_\"\n    \n    if text == \" \"\n        return \"-\"\n    \n  \
    \  if text == \" \"\n        return \"_\"\n    \n    if text == \" \"\n      \
    \  return \"-\"\n    \n    if text == \" \"\n        return \"_\"\n    \n    if\
    \ text == \" \"\n        return \"-\"\n    \n    if text == \" \"\n        return\
    \ \"_\"\n    \n    if text == \" \"\n        return \"-\"\n    \n    if text ==\
    \ \" \"\n        return \"_\"\n    \n    if text == \" \"\n        return \"-\"\
    \nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2fvev1no.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2fvev1no.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    str = text\n    str\
    \ = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str =\
    \ str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\"\
    \ \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \"\
    , \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"\
    _\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\"\
    )\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n\
    \    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n  \
    \  str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str\
    \ = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str =\
    \ str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\"\
    \ \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \"\
    , \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"\
    _\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\"\
    )\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n\
    \    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n  \
    \  str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str\
    \ = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str =\
    \ str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\"\
    \ \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \"\
    , \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"\
    _\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\"\
    )\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n\
    \    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n  \
    \  str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str\
    \ = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str =\
    \ str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\"\
    \ \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \"\
    , \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"\
    _\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\"\
    )\n    str = str.replace(\" \", \"_\")\n    str = \nusing Test\n\n@testset begin\n\
    \ncandidate = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t\
    @test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"\
    Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"\
    -Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppbpcud4z.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmppbpcud4z.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmppbpcud4z.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    fixed_text = text\n\
    \    \n    fixed_text = replace(fixed_text, \"  \", \"_\")\n    \n    if length(fixed_text)\
    \ > 2\n        fixed_text = replace(fixed_text, \" \", \"-\")\n    end\n    \n\
    \    return fixed_text\nend\n</cell>\n<code language=julia-1.1>\n\"\"\"\n    remove_special_chars(text::String)\n\
    using Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbse0_c5a.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbse0_c5a.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    \n    if text == \"\
    \"\n        return text\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty\
    \  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\"\
    ) == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcwrmtrrk.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcwrmtrrk.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    fixed_text = text\n\
    \    \n    if text == \"\"\n        fixed_text = text\n    elseif text == \" \"\
    \ \n        fixed_text = text\n    elseif text == \"  \"\n        fixed_text =\
    \ text\n    elseif text == \"  \"\n        fixed_text = text\n    elseif text\
    \ == \"  \"\n        fixed_text = text\n    elseif text == \"  \"\n        fixed_text\
    \ = text\n    elseif text == \"  \"\n        fixed_text = text\n    elseif text\
    \ == \"  \"\n        fixed_text = text\n    elseif text == \"  \"\n        fixed_text\
    \ = text\n    elseif text == \"  \"\n        fixed_text = text\n    elseif text\
    \ == \"  \"\n        fixed_text = text\n    elseif text == \"  \"\n        fixed_text\
    \ = text\n    elseif text == \"  \"\n        fixed_text = text\n    elseif text\
    \ == \"  \"\n        fixed_text = text\n    elseif text == \"  \"\n        fixed_text\
    \ = text\n    elseif text == \"  \"\n        fixed_text = text\n    elseif text\
    \ == \"  \"\n        fixed_text = text\n    elseif text == \"  \"\n        fixed_text\
    \ = text\n    elseif text == \"  \"\n        fixed_text = text\n    elseif text\
    \ == \"  \"\n        fixed_text = text\n    elseif text == \"  \"\n        fixed_text\
    \ = text\n    elseif text == \"  \"\n        fixed_text = text\n    elseif text\
    \ == \"  \"\n        fixed_text = text\n    elseif text == \"  \"\n        fixed_text\
    \ = text\n    elseif text == \"  \"\n        fixed_text = text\n    elseif text\
    \ == \"  \"\n        fixed_text = text\n    elseif text == \"  \"\n        fixed_text\
    \ = text\n    elseif text == \"  \"\n        fixed_text = text\n    elseif text\
    \ == \"  \"\n        fixed_text = text\n    elseif text == \"  \"\n        fixed_text\
    \ = text\n    elseif text == \"  \"\n        fixed_text = text\n    elseif text\
    \ == \"  \"\n        fixed_text = text\n    elseif text == \"  \"\n        fixed_text\
    \ = text\n    elseif text == \"  \"\n        fixed_text = text\n    elseif text\
    \ == \"  \"\n        fixed_text = text\n    elseif text == \"  \"\n        fixed_text\
    \ = text\n    elseif text == \"  \"\n        fixed_text = text\n    elseif text\
    \ == \"  \"\n        fixed_text = text\n    elseif text == \"  \"\n        fixed_text\
    \ = text\n    elseif text == \"  \"\n        fixed_text = text\n    elseif text\
    \ == \"  \"\n        fixed_text = text\n    elseif text == \"  \"\n        fixed_text\
    \ = text\n    elseif text == \"  \"\n        fixed_text = text\n    elseif text\
    \ == \"  \"\n        fixed_text = text\n    elseif text == \"  \"\n        fixed_text\
    \ = text\n    elseif text == \"  \"\n        fixed_\nusing Test\n\n@testset begin\n\
    \ncandidate = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t\
    @test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"\
    Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"\
    -Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmput_onp3t.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmput_onp3t.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    # replace all spaces\
    \ with underscores\n    text = replace(text, \" \", \"_\")\n    \n    # replace\
    \ consecutive spaces with -\n    words = split(text)\n    \n    i = 0\n    while\
    \ i < length(words) do\n        if i == length(words) - 2 then\n            words[i]\
    \ = words[i] + \"-\"\n        elseif i == length(words) - 1 then\n           \
    \ words[i] = words[i] + \"-\"\n        else\n            words[i] = words[i] +\
    \ \"-\"\n        end\n        i = i + 1\n    end\n    \n    return join(words)\n\
    end\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    remove_spaces(\"Example\"\
    ) == \"Example\"\n    remove_spaces(\"Example 1\") == \"Example1\"\n    remove_spaces(\"\
    Example  2\") == \"Example2\"\n    remove_spaces(\"Example   3\") == \"Example3\"\
    \n    remove_spaces(\"Example   4\") == \"Example4\"\n    remove_spaces(\"Example\
    \   5\") == \"Example5\"\n    remove_spaces(\"Example   6\") == \"Example6\"\n\
    \    remove_spaces(\"Example   7\") == \"Example7\"\n    remove_spaces(\"Example\
    \   8\") == \"Example8\"\n    remove_spaces(\"Example   9\") == \"Example9\"\n\
    \    remove_spaces(\"Example   10\") == \"Example10\"\n    remove_spaces(\"Example\
    \   11\") == \"Example11\"\n    remove_spaces(\"Example   12\") == \"Example12\"\
    \n    remove_spaces(\"Example   13\") == \"Example13\"\n    remove_spaces(\"Example\
    \   14\") == \"Example14\"\n    remove_spaces(\"Example   15\") == \"Example15\"\
    \n    remove_spaces(\"Example   16\") == \"Example16\"\n    remove_spaces(\"Example\
    \   17\") == \"Example17\"\n    remove_spaces(\"Example   18\") == \"Example18\"\
    \n    remove_spaces(\"Example   19\") == \"Example19\"\n    remove_spaces(\"Example\
    \   20\") == \"Example20\"\n    remove_spaces(\"Example   21\") == \"Example21\"\
    \n    remove_spaces(\"Example   22\") == \"Example22\"\n    remove_spaces(\"Example\
    \   23\") == \"Example23\"\n    remove_spaces(\"Example   24\") == \"Example24\"\
    \n    remove_spaces(\"Example   25\") == \"Example25\"\n    remove_spaces(\"Example\
    \   26\") == \"Example26\"\n    remove_spaces(\"Example   27\") == \"Example27\"\
    \n    remove_spaces(\"Example   28\") == \"Example28\"\n    remove_spaces(\"Example\
    \   29\") == \"Example29\"\n    remove_spaces(\"Example   30\") == \"Example30\"\
    \n    remove_spaces(\"Example   31\") == \"Example31\"\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\"\
    )\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"\
    Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"\
    -Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvcgt63n2.jl:33\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvcgt63n2.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\
    \t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif\
    \ \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ) == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\") == \"\
    Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcjrmlmgi.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpcjrmlmgi.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpcjrmlmgi.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    fixed_text = text\n\
    \    \n    if text == \"\"\n        return text\n    \n    fixed_text = replace(fixed_text,\
    \ \" \", \"_\")\n    \n    if length(fixed_text) > 2\n        fixed_text = replace(fixed_text,\
    \ \" \", \"_\")\n    end\n    \n    return fixed_text\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    remove_spaces()\nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\
    \t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif\
    \ \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ) == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\") == \"\
    Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm64lfywb.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm64lfywb.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    if text == \"\"\n\
    \        return text\n    \n    space_count = count_spaces(text)\n    \n    if\
    \ space_count == 1\n        return text\n    \n    if space_count > 2\n      \
    \  return text\n    \n    space_count = space_count - 1\n    \n    if space_count\
    \ > 0\n        return replace(text, \" \", \"_\")\n    \n    return replace(text,\
    \ \"  \", \"_\")\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    count_spaces(text::String)\n\
    using Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc3t7qr0t.jl:31\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpc3t7qr0t.jl:31\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\
    \t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif\
    \ \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ) == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\") == \"\
    Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp59s2iwin.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp59s2iwin.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp59s2iwin.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    text_no_spaces = replace(text,\
    \ \" \", \"_\")\n    \n    if length(text_no_spaces) > 2 \n        \n        text_no_spaces\
    \ = replace(text_no_spaces, \" \", \"-\")\n        \n    end\n    \n    return\
    \ text_no_spaces\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    remove_special_characters(text::String)\n\
    using Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfehdit4i.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfehdit4i.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    text_split = split(text,\
    \ \" \")\n    \n    text_split = [replace(text_split[i], \" \", \"_\") for i =\
    \ 1:length(text_split)]\n    \n    text_split = join(text_split, \"\")\n    \n\
    \    if length(text_split) > 2\n        text_split = replace(text_split, \" \"\
    , \"-\")\n    end\n    \n    return text_split\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    split_and_replace(text::String)::Array{String}\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\"\
    )\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"\
    Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"\
    -Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6om94p9b.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6om94p9b.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    text_no_spaces = replace(replace(replace(text,\
    \ \" \", \"_\"), \"  \", \"_\"), \"  \", \"_\")\n    \n    if length(text_no_spaces)\
    \ > length(text)\n        \n        text_no_spaces = replace(text_no_spaces, \"\
    \ \", \"_\")\n        \n    end\n    \n    return text_no_spaces\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    remove_extra_spaces(text::String)\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"Example\"\
    ) == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3beq5dum.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3beq5dum.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    text_split = split(text,\
    \ \" \")\n    \n    text_split = [replace(text_split[i], \" \", \"_\") for i =\
    \ 1:length(text_split)]\n    \n    text_split = join(text_split, \"\")\n    \n\
    \    if length(text_split) > 2\n        text_split = replace(text_split, \" \"\
    , \"-\")\n    end\n    \n    return text_split\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a string text, replace all non-alphanumeric characters with\
    \ an underscore, \n    and if a string has more than 2 consecutive underscores,\
    \ \n    then replace all consecutive underscores with - \n    \n    fix_non_alphanumeric(\"\
    Example\") == \"Example\"\n    fix_non_alphanumeric(\"Example 1\") == \"Example_1\"\
    \n    fix_non_alphanumeric(\" Example 2\") == \"Example_2\"\n    fix_non_alphanumeric(\"\
    \ Example   3\") == \"Example_3\"\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty\
    \  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\"\
    ) == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8dflktdo.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8dflktdo.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    text_split = split(text,\
    \ \" \")\n    \n    text_split = [replace(text_split[i], \" \", \"_\") for i =\
    \ 1:length(text_split)]\n    \n    text_split = join(text_split, \" \")\n    \n\
    \    if length(text_split) > 2\n        text_split = split(text_split, \" \")\n\
    \        text_split = [replace(text_split[i], \" \", \"-\") for i = 1:length(text_split)]\n\
    \        text_split = join(text_split, \" \")\n    end\n    \n    return text_split\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    remove_spaces(text::String)\n\
    using Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_2b_d21f.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_2b_d21f.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    text_no_spaces = replace(text,\
    \ \" \", \"_\")\n    \n    if length(text_no_spaces) > 2 \n        \n        text_no_spaces\
    \ = replace(text_no_spaces, \" \", \"_\")\n        \n    end\n    \n    return\
    \ text_no_spaces\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a\
    \ string text, replace all spaces in it with underscores, \n    and if a string\
    \ has more than 2 consecutive spaces, \n    then replace all consecutive spaces\
    \ with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"\
    Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"Example\") ==\
    \ \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\
    \t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz3e9_usq.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpz3e9_usq.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    fixed_text = \"\"\n\
    \    \n    for char in text\n        if char == \" \"\n            fixed_text\
    \ += \"_\"\n        else\n            fixed_text += char\n    end\n    \n    return\
    \ fixed_text\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    remove_spaces(text::String)\n\
    using Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl98fxq15.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpl98fxq15.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    text_split = split(text,\
    \ \" \")\n    \n    text_split = [replace(text_split[i], \"_\") for i = 1:length(text_split)]\n\
    \    \n    text_split = join(text_split, \" \")\n    \n    if length(text_split)\
    \ > 2\n        text_split = split(text_split, \" \")\n        text_split = [replace(text_split[i],\
    \ \"_\") for i = 1:length(text_split)]\n        text_split = join(text_split,\
    \ \" \")\n    end\n    \n    return text_split\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    split_and_replace(text::String)::Array{String}\n    \n    Given a\
    \ string text, replace all spaces in it with underscores, \n    and if a string\
    \ has more than 2 consecutive spaces, \n    then replace all consecutive spaces\
    \ with - \n    \n    split_and_replace(\"Example\") == \"Example\"\n    split_and_replace(\"\
    Example 1\") == \"Example_1\"\n    split_and_replace(\" Example 2\") == \"_Example_2\"\
    \n    split_and_replace(\" Example   3\") == \"_Example-3\"\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"Example\"\
    ) == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpaaws95vk.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpaaws95vk.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    text_no_spaces = replace(text,\
    \ \" \", \"_\")\n    \n    if length(text_no_spaces) > 2 \n        \n        text_no_spaces\
    \ = replace(text_no_spaces, \" \", \"-\")\n        \n    end\n    \n    return\
    \ text_no_spaces\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    remove_spaces(\"\
    Example\") == \"Example\"\n    remove_spaces(\"Example 1\") == \"Example1\"\n\
    \    remove_spaces(\" Example 2\") == \"Example2\"\n    remove_spaces(\" Example\
    \   3\") == \"Example3\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty\
    \  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\"\
    ) == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2mm7nhwm.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2mm7nhwm.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    \n    if text == \"\
    \"\n        return text\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty\
    \  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\"\
    ) == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfelh9mep.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfelh9mep.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    # Replace all spaces\
    \ with underscores\n    text = replace(text, \" \", \"_\")\n    \n    # Replace\
    \ consecutive spaces with -\n    words = split(text)\n    \n    i = 0\n    while\
    \ i < length(words)\n        if words[i] == \" \"\n            words[i] = \"-\"\
    \n            i += 1\n        else\n            i += 1\n        end\n    end\n\
    \    \n    return join(words)\nend\n</cell>\n<code language=julia-1.5>\n# TEST\
    \ Fix spaces (5b)\n@test fix_spaces(\"Example\") == \"Example\"\n@test fix_spaces(\"\
    Example 1\") == \"Example_1\"\n@test fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n@test fix_spaces(\" Example   3\") == \"_Example-3\"\n</cell>\n<text>\nExercise\
    \ 5 (2 points)\nWrite a function that takes a string text and returns the string\
    \ text with any leading or trailing whitespace removed.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\"\
    )\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"\
    Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"\
    -Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9_3sgvhf.jl:31\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9_3sgvhf.jl:31\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    text_split = split(text,\
    \ \" \")\n    \n    text_split = [replace(text_split[i], \" \", \"_\") for i =\
    \ 1:length(text_split)]\n    \n    text_split = join(text_split, \"\")\n    \n\
    \    if length(text_split) > 2\n        text_split = replace(text_split, \" \"\
    , \"-\")\n    end\n    \n    return text_split\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string text and returns the string text with\
    \ all the words capitalized. \nFor example fix_caps(\"Hello World\") == \"Hello\
    \ World\"\nFor this exercise you will need to use the function fix_caps.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"Example\"\
    ) == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3vwcmj92.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3vwcmj92.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    space_count = text.count('\
    \ ')\n    \n    if space_count > 2\n        \n        space_count = text.count('\
    \ ') + 1\n        \n        space_count = text.count(' ') + 1\n        \n    \
    \    space_count = text.count(' ') + 1\n        \n        space_count = text.count('\
    \ ') + 1\n        \n        space_count = text.count(' ') + 1\n        \n    \
    \    space_count = text.count(' ') + 1\n        \n        space_count = text.count('\
    \ ') + 1\n        \n        space_count = text.count(' ') + 1\n        \n    \
    \    space_count = text.count(' ') + 1\n        \n        space_count = text.count('\
    \ ') + 1\n        \n        space_count = text.count(' ') + 1\n        \n    \
    \    space_count = text.count(' ') + 1\n        \n        space_count = text.count('\
    \ ') + 1\n        \n        space_count = text.count(' ') + 1\n        \n    \
    \    space_count = text.count(' ') + 1\n        \n        space_count = text.count('\
    \ ') + 1\n        \n        space_count = text.count(' ') + 1\n        \n    \
    \    space_count = text.count(' ') + 1\n        \n        space_count = text.count('\
    \ ') + 1\n        \n        space_count = text.count(' ') + 1\n        \n    \
    \    space_count = text.count(' ') + 1\n        \n        space_count = text.count('\
    \ ') + 1\n        \n        space_count = text.count(' ') + 1\n        \n    \
    \    space_count = text.count(' ') + 1\n        \n        space_count = text.count('\
    \ ') + 1\n        \n        space_count = text.count(' ') + 1\n        \n    \
    \    space_count = text.count(' ') + 1\n        \n        space_count = text.count('\
    \ ') + 1\n        \n        space_count = text.count(' ') + 1\n        \n    \
    \    space_count = text.count(' ') + 1\n        \n        space_count = text.count('\
    \ ') + 1\n        \n        space_count = text.count(' ') + 1\n        \n    \
    \    space_count = text.count(' ') + 1\n        \n        space_count = text.count('\
    \ ') + 1\n        \n        space_count = text.count(' ') + 1\n        \n    \
    \    space_count = text.count(' ') + 1\n        \n        space_count = text.count('\
    \ ') + 1\n        \n        space_count = text.count(' ') + 1\n        \n    \
    \    space_count = text.count(' ') + 1\n        \n        space_count = text.count('\
    \ ') + 1\n        \n        space_count = text.count(' ') + 1\n        \n    \
    \    space_count = text.count(' ') + 1\n        \n        space_count = text.count('\
    \ ') + 1\n        \n        space_count = text.count(' ') + 1\n        \n    \
    \    space_count = text.count(' ') + 1\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty\
    \  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\"\
    ) == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_kl1l65c.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_kl1l65c.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    text_split = split(text,\
    \ \" \")\n    \n    text_split = [replace(text_split[i], \" \", \"_\") for i =\
    \ 1:length(text_split)]\n    \n    text_split = join(text_split, \"\")\n    \n\
    \    if length(text_split) > 2\n        text_split = replace(text_split, \" \"\
    , \"-\")\n    end\n    \n    return text_split\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    split_and_strip(text::String)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty\
    \  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\"\
    ) == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkdsmfabz.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkdsmfabz.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    text_split = split(text,\
    \ \" \")\n    \n    text_split = [replace(text_split[i], \" \", \"_\") for i in\
    \ 1:length(text_split)]\n    \n    text_split = join(text_split, \" \")\n    \n\
    \    text_split = replace(text_split, \" \", \"-\")\n    \n    return text_split\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    split_and_replace(text::String)::Array{String}\n\
    \    \n    Split text into words and replace spaces with underscores and \n  \
    \  remove all punctuation\n    \n    split_and_replace(\"Example\") == \"Example\"\
    \n    split_and_replace(\"Example 1\") == \"Example_1\"\n    split_and_replace(\"\
    \ Example 2\") == \"_Example_2\"\n    split_and_replace(\" Example   3\") == \"\
    _Example-3\"\n    split_and_replace(\"!@#$%^&*()_+=-`~[]{}|;:,.<>/?'\\\" \") ==\
    \ [\"Example\", \"1\", \"Example_2\", \"Example_3\"]\n    split_and_replace(\"\
    !@#$%^&*()_+=-`~[]{}|;:,.<>/?'\") == [\"Example\", \"1\", \"Example_2\", \"Example_3\"\
    ]\n    split_and_replace(\"!@#$%^&*()_+=-`~[]{}|;:,.<>/?'\\\" \") == [\"Example\"\
    , \"1\", \"Example_2\", \"Example_3\"]\n    split_and_replace(\"!@#$%^&*()_+=-`~[]{}|;:,.<>/?'\"\
    ) == [\"Example\", \"1\", \"Example_2\", \"Example_3\"]\n    split_and_replace(\"\
    !@#$%^&*()_+=-`~[]{}|;:,.<>/?'\\\" \") == [\"Example\", \"1\", \"Example_2\",\
    \ \"Example_3\"]\n    split_and_replace(\"!@#$%^&*()_+=-`~[]{}|;:,.<>/?'\") ==\
    \ [\"Example\", \"1\", \"Example_2\", \"Example_3\"]\n    split_and_replace(\"\
    !@#$%^&*()_+=-`~[]{}|;:,.<>/?'\\\" \") == [\"Example\", \"1\", \"Example_2\",\
    \ \"Example_3\"]\n    split_and_replace(\"!@#$%^&*()_+=-`~[]{}|;:,.<>/?'\") ==\
    \ [\"Example\", \"1\", \"Example_2\", \"Example_3\"]\n    split_and_replace(\"\
    !@#$%^&*()_+=-`~[]{}|;:,.<>/?'\\\" \") == [\"Example\", \"1\", \"Example_2\",\
    \ \"Example_3\"]\n    split_and_\nusing Test\n\n@testset begin\n\ncandidate =\
    \ fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty\
    \  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\"\
    ) == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj725yhxw.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj725yhxw.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    fixed_text = text\n\
    \    \n    if text == \"\"\n        return text\n    \n    if text == \" \" \n\
    \        return fixed_text\n    \n    if text == \"  \"\n        return fixed_text\n\
    \    \n    spaces = findall(text, \" \")\n    \n    if length(spaces) > 1\n  \
    \      fixed_text = replace(fixed_text, \"  \", \"_\")\n    end\n    \n    return\
    \ fixed_text\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    split_string(text::String)\n\
    using Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8i2fxl64.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8i2fxl64.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    # replace all spaces\
    \ with underscores\n    text = replace(text, \" \", \"_\")\n    \n    # replace\
    \ consecutive spaces with -\n    words = split(text)\n    \n    i = 0\n    while\
    \ i < length(words) do\n        if i == length(words) - 1 then\n            words[i]\
    \ = words[i] + \"-\"\n        elseif i == length(words) - 2 then\n           \
    \ words[i] = words[i] + \"-\"\n        else\n            words[i] = words[i] +\
    \ \"-\"\n        end\n        i = i + 1\n    end\n    \n    return join(words)\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    split_words(text::String)\n\
    using Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9_xpb037.jl:33\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9_xpb037.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    fixed_text = text\n\
    \    \n    if text == \"\"\n        return text\n    \n    if text == \" \" \n\
    \        fixed_text = fixed_text.replace(\" \", \"_\")\n        return fixed_text\n\
    \    \n    if text == \" \"\n        fixed_text = fixed_text.replace(\" \", \"\
    _\")\n        return fixed_text\n    \n    if text == \" \"\n        fixed_text\
    \ = fixed_text.replace(\" \", \"_\")\n        return fixed_text\n    \n    if\
    \ text == \" \"\n        fixed_text = fixed_text.replace(\" \", \"_\")\n     \
    \   return fixed_text\n    \n    if text == \" \"\n        fixed_text = fixed_text.replace(\"\
    \ \", \"_\")\n        return fixed_text\n    \n    if text == \" \"\n        fixed_text\
    \ = fixed_text.replace(\" \", \"_\")\n        return fixed_text\n    \n    if\
    \ text == \" \"\n        fixed_text = fixed_text.replace(\" \", \"_\")\n     \
    \   return fixed_text\n    \n    if text == \" \"\n        fixed_text = fixed_text.replace(\"\
    \ \", \"_\")\n        return fixed_text\n    \n    if text == \" \"\n        fixed_text\
    \ = fixed_text.replace(\" \", \"_\")\n        return fixed_text\n    \n    if\
    \ text == \" \"\n        fixed_text = fixed_text.replace(\" \", \"_\")\n     \
    \   return fixed_text\n    \n    if text == \" \"\n        fixed_text = fixed_text.replace(\"\
    \ \", \"_\")\n        return fixed_text\n    \n    if text == \" \"\n        fixed_text\
    \ = fixed_text.replace(\" \", \"_\")\n        return fixed_text\n    \n    if\
    \ text == \" \"\n        fixed_text = fixed_text.replace(\" \", \"_\")\n     \
    \   return fixed_text\n    \n    if text == \" \"\n        fixed_text = fixed_text.replace(\"\
    \ \", \"_\")\n        return fixed_text\n    \n    if text == \" \"\n        fixed_text\
    \ = fixed_text.replace(\" \", \"_\")\n        return fixed_text\n    \n    if\
    \ text == \" \"\n        fixed_text = fixed_text.replace(\" \", \"_\")\n     \
    \   return fixed_text\n    \n    if text == \" \"\n        fixed_text = fixed_text.replace(\"\
    \ \", \"_\")\n        return fixed_text\n    \n    if text == \" \"\n        fixed_text\
    \ = fixed_text.replace(\" \", \"_\")\n        return fixed_text\n    \n    if\
    \ text == \" \"\n        fixed_text = fixed_text.replace(\" \", \"_\")\n     \
    \   return fixed_text\n    \n    if text == \" \"\n        fixed_text = fixed_text.replace(\"\
    \ \", \"_\")\n        return fixed_text\n    \n    if text == \" \"\n        fixed_text\
    \ = fixed_text.replace(\" \", \"_\")\n        return fixed_text\n    \n    if\
    \ text == \" \"\n        fixed_text = fixed_text.replace(\" \", \"_\")\n     \
    \   return fixed_text\n    \n    if text == \" \"\n        fixed_text = fixed_text.replace(\"\
    \ \", \"_\")\n        return fixed_text\n    \n    if text == \" \"\n        fixed_text\
    \ = fixed_\nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkz2bz9ya.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkz2bz9ya.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    # Replace all spaces\
    \ with underscores\n    text = replace(text, \" \", \"_\")\n    \n    # Replace\
    \ consecutive spaces with -\n    words = split(text)\n    \n    i = 0\n    while\
    \ i < length(words) do\n        if i == length(words) - 2 then\n            words[i]\
    \ = words[i] + \"-\"\n        elseif i == length(words) - 1 then\n           \
    \ words[i] = words[i] + \"-\"\n        else\n            words[i] = words[i] +\
    \ \"-\"\n        end\n        i = i + 1\n    end\n    \n    return join(words)\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    remove_spaces(text::String)\n\
    using Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps5w2ye6d.jl:33\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmps5w2ye6d.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    text_no_spaces = text\n\
    \    \n    if text == \"\"\n        return \"\"\n    \n    if text == \" \"\n\
    \        return \"\"\n    \n    if text == \"  \"\n        return \"\"\n    \n\
    \    if text == \" \" \n        return \"_\"\n    \n    if text == \"  \"\n  \
    \      return \"_\"\n    \n    if text == \" \"\n        return \"-\"\n    \n\
    \    if text == \"  \"\n        return \"-\"\n    \n    if text == \" \"\n   \
    \     return \"-\"\n    \n    if text == \"  \"\n        return \"-\"\n    \n\
    \    if text == \" \"\n        return \"-\"\n    \n    if text == \"  \"\n   \
    \     return \"-\"\n    \n    if text == \" \"\n        return \"-\"\n    \n \
    \   if text == \"  \"\n        return \"-\"\n    \n    if text == \" \"\n    \
    \    return \"-\"\n    \n    if text == \"  \"\n        return \"-\"\n    \n \
    \   if text == \" \"\n        return \"-\"\n    \n    if text == \"  \"\n    \
    \    return \"-\"\n    \n    if text == \" \"\n        return \"-\"\n    \n  \
    \  if text == \"  \"\n        return \"-\"\n    \n    if text == \" \"\n     \
    \   return \"-\"\n    \n    if text == \"  \"\n        return \"-\"\n    \n  \
    \  if text == \" \"\n        return \"-\"\n    \n    if text == \"  \"\n     \
    \   return \"-\"\n    \n    if text == \" \"\n        return \"-\"\n    \n   \
    \ if text == \"  \"\n        return \"-\"\n    \n    if text == \" \"\n      \
    \  return \"-\"\n    \n    if text == \"  \"\n        return \"-\"\n    \n   \
    \ if text == \" \"\n        return \"-\"\n    \n    if text == \"  \"\n      \
    \  return \"-\"\n    \n    if text == \" \"\n        return \"-\"\n    \n    if\
    \ text == \"  \"\n        return \"-\"\n    \n    if text == \" \"\n        return\
    \ \"-\"\n    \n    if text == \"  \"\n        return \"-\"\n    \n    if text\
    \ == \" \"\n        return \"-\"\n    \n    if text == \"  \"\n        return\
    \ \"-\"\n    \n    if text == \" \"\n        return \"-\"\n    \n    if text ==\
    \ \"  \"\n        return \"-\"\n    \n    if text == \" \"\n        return \"\
    -\"\n    \n    if text == \"  \"\n        return \"-\"\n    \n    if text == \"\
    \ \"\n        return \"-\"\n    \n    if text == \"  \"\n        return \"-\"\n\
    \    \n    if text == \" \"\n        return \"-\"\n    \n    if text == \"  \"\
    \n        return \"-\"\n    \n    if text == \" \"\n        return \"-\"\n   \
    \ \n    if text == \"  \"\n        return \"-\"\n    \n    if text == \" \"\n\
    \        return \"-\"\n    \n    if text == \"  \"\n        return \"-\"\n   \
    \ \n    if text == \" \"\n        return \"-\"\n    \n    if text == \"  \"\n\
    \        return \"-\"\n    \n    if text == \" \"\n        return \"-\"\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"Example\"\
    ) == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp58ust2jd.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp58ust2jd.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\
    \t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif\
    \ \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ) == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\") == \"\
    Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpctqx57qw.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpctqx57qw.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpctqx57qw.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    if text == \"\"\n\
    \        return text\n    \n    words = split(text)\n    \n    words = [w for\
    \ w in words if w != \"\"]\n    \n    words = [w for w in words if w != \" \"\
    ]\n    \n    words = [w for w in words if w != \"_\"]\n    \n    words = [w for\
    \ w in words if w != \"-\"]\n    \n    words = [w for w in words if w != \"--\"\
    ]\n    \n    words = [w for w in words if w != \"---\"]\n    \n    words = [w\
    \ for w in words if w != \"----\"]\n    \n    words = [w for w in words if w !=\
    \ \"-----\"]\n    \n    words = [w for w in words if w != \"------\"]\n    \n\
    \    words = [w for w in words if w != \"--------\"]\n    \n    words = [w for\
    \ w in words if w != \"----------\"]\n    \n    words = [w for w in words if w\
    \ != \"-----------\"]\n    \n    words = [w for w in words if w != \"------------\"\
    ]\n    \n    words = [w for w in words if w != \"-------------\"]\n    \n    words\
    \ = [w for w in words if w != \"--------------\"]\n    \n    words = [w for w\
    \ in words if w != \"----------------\"]\n    \n    words = [w for w in words\
    \ if w != \"-----------------\"]\n    \n    words = [w for w in words if w !=\
    \ \"------------------\"]\n    \n    words = [w for w in words if w != \"-------------------\"\
    ]\n    \n    words = [w for w in words if w != \"--------------------\"]\n   \
    \ \n    words = [w for w in words if w != \"---------------------\"]\n    \n \
    \   words = [w for w in words if w != \"----------------------\"]\n    \n    words\
    \ = [w for w in words if w != \"---------------------\"]\n    \n    words = [w\
    \ for w in words if w != \"----------------------\"]\n    \n    words = [w for\
    \ w in words if w != \"---------------------\"]\n    \n    words = [w for w in\
    \ words if w != \"----------------------\"]\n    \n    words = [w for w in words\
    \ if w != \"---------------------\"]\n    \n    words = [w for w in words if w\
    \ != \"----------------------\"]\n    \n    words = [w for w in words if w !=\
    \ \"---------------------\"]\n    \n    words = [w for w in words if w != \"----------------------\"\
    ]\n    \n    words = [w for w in words if w != \"---------------------\"]\n  \
    \  \n    words = [w for w in words if w \nusing Test\n\n@testset begin\n\ncandidate\
    \ = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty\
    \  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\"\
    ) == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpas8opd2q.jl:81\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpas8opd2q.jl:81\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    space_count = text.count(\"\
    \ \")\n    \n    if space_count > 2\n        space_count = text.count(\" \", 1,\
    \ space_count - 2)\n    \n    space_count = space_count - 1\n    \n    space_text\
    \ = \"\"\n    \n    for i in text.split(\" \")\n        space_text += \"_\"\n\
    \    end\n    \n    return space_text + text\nend\n</cell>\n<code language=julia-1.4>\n\
    # Test fix_spaces\nfix_spaces(\"Example\")\n</cell>\n<code language=julia-1.4>\n\
    # Test fix_spaces\nfix_spaces(\"Example 1\")\n</cell>\n<code language=julia-1.4>\n\
    # Test fix_spaces\nfix_spaces(\" Example 2\")\n</cell>\n<code language=julia-1.4>\n\
    # Test fix_spaces\nfix_spaces(\" Example   3\")\n</cell>\n<text>\nExercise: Write\
    \ a function that takes a string and replaces any non-alphanumeric characters\
    \ with an underscore. For example,\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty\
    \  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\"\
    ) == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdp000670.jl:28\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdp000670.jl:28\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    space_count = text.count('\
    \ ')\n    \n    if space_count > 2\n        \n        space_count = text.count('\
    \ ', 2, space_count)\n        \n        space_count = text.count(' ', space_count\
    \ + 1)\n        \n        space_count = text.count(' ', space_count - 1)\n   \
    \     \n        space_count = text.count(' ', space_count + 1)\n        \n   \
    \     space_count = text.count(' ', space_count - 1)\n        \n        space_count\
    \ = text.count(' ', space_count + 1)\n        \n        space_count = text.count('\
    \ ', space_count - 1)\n        \n        space_count = text.count(' ', space_count\
    \ + 1)\n        \n        space_count = text.count(' ', space_count - 1)\n   \
    \     \n        space_count = text.count(' ', space_count + 1)\n        \n   \
    \     space_count = text.count(' ', space_count - 1)\n        \n        space_count\
    \ = text.count(' ', space_count + 1)\n        \n        space_count = text.count('\
    \ ', space_count - 1)\n        \n        space_count = text.count(' ', space_count\
    \ + 1)\n        \n        space_count = text.count(' ', space_count - 1)\n   \
    \     \n        space_count = text.count(' ', space_count + 1)\n        \n   \
    \     space_count = text.count(' ', space_count - 1)\n        \n        space_count\
    \ = text.count(' ', space_count + 1)\n        \n        space_count = text.count('\
    \ ', space_count - 1)\n        \n        space_count = text.count(' ', space_count\
    \ + 1)\n        \n        space_count = text.count(' ', space_count - 1)\n   \
    \     \n        space_count = text.count(' ', space_count + 1)\n        \n   \
    \     space_count = text.count(' ', space_count - 1)\n        \n        space_count\
    \ = text.count(' ', space_count + 1)\n        \n        space_count = text.count('\
    \ ', space_count - 1)\n        \n        space_count = text.count(' ', space_count\
    \ + 1)\n        \n        space_count = text.count(' ', space_count - 1)\n   \
    \     \n        space_count = text.count(' ', space_count + 1)\n        \n   \
    \     space_count = text.count(' ', space_count - 1)\n        \n        space_count\
    \ = text.count(' ', space_count + 1)\n        \n        space_count = text.count('\
    \ ', space_count - 1)\n        \n        space_count = text.count(' ', space_count\
    \ + 1)\n        \n        space_count = text.count(' ', space_count - 1)\n   \
    \     \n        space_count = text.count(' ', space_count + 1)\n        \n   \
    \     space_count = text.count(' ', space_count - 1)\n        \n        space_count\
    \ = text.count(' ', space_count + 1)\n        \n        space_count = text.count('\
    \ ', \nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp04hwlypi.jl:92\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp04hwlypi.jl:92\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    str = text\n    str\
    \ = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"\")\n    str = str.replace(\"\
    \  \", \"_\")\n    str = str.replace(\"  \", \"\")\n    return str\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    split_string(text::String)\nusing Test\n\
    \n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"Example\") ==\
    \ \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\
    \t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd4b8yekx.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpd4b8yekx.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    fixed = text\n   \
    \ \n    if fixed == \"\"\n        fixed = \"_\"\n    end\n    \n    fixed = replace(fixed,\"\
    \ \",\"_\")\n    \n    if length(fixed) > 2\n        fixed = replace(fixed,\"\
    \ \",\"_\")\n    end\n    \n    return fixed\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the string with all \n    non-alphanumeric\
    \ characters replaced by underscores. \n    \n    fix_non_alphanumeric(\"Example\"\
    ) == \"Example\"\n    fix_non_alphanumeric(\"Example 1\") == \"Example_1\"\n \
    \   fix_non_alphanumeric(\"Example 2\") == \"Example_2\"\n    fix_non_alphanumeric(\"\
    Example 3\") == \"Example_3\"\n    fix_non_alphanumeric(\"Example 4\") == \"Example_4\"\
    \n    fix_non_alphanumeric(\"Example 5\") == \"Example_5\"\n    fix_non_alphanumeric(\"\
    Example 6\") == \"Example_6\"\n    fix_non_alphanumeric(\"Example 7\") == \"Example_7\"\
    \n    fix_non_alphanumeric(\"Example 8\") == \"Example_8\"\n    fix_non_alphanumeric(\"\
    Example 9\") == \"Example_9\"\n    fix_non_alphanumeric(\"Example 10\") == \"\
    Example_10\"\n    fix_non_alphanumeric(\"Example 11\") == \"Example_11\"\n   \
    \ fix_non_alphanumeric(\"Example 12\") == \"Example_12\"\n    fix_non_alphanumeric(\"\
    Example 13\") == \"Example_13\"\n    fix_non_alphanumeric(\"Example 14\") == \"\
    Example_14\"\n    fix_non_alphanumeric(\"Example 15\") == \"Example_15\"\n   \
    \ fix_non_alphanumeric(\"Example 16\") == \"Example_16\"\n    fix_non_alphanumeric(\"\
    Example 17\") == \"Example_17\"\n    fix_non_alphanumeric(\"Example 18\") == \"\
    Example_18\"\n    fix_non_alphanumeric(\"Example 19\") == \"Example_19\"\n   \
    \ fix_non_alphanumeric(\"Example 20\") == \"Example_20\"\n    fix_non_alphanumeric(\"\
    Example 21\") == \"Example_21\"\n    fix_non_alphanumeric(\"Example 22\") == \"\
    Example_22\"\n    fix_non_alphanumeric(\"Example 23\") == \"Example_23\"\n   \
    \ fix_non_alphanumeric(\"Example 24\") == \"Example_24\"\n    fix_non_alphanumeric(\"\
    Example 25\") == \"Example_25\"\n    fix_non_alphanumeric(\"Example 26\") == \"\
    Example_26\"\n    \nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t\
    @test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif\
    \ \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ) == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\") == \"\
    Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwd3sa6ev.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwd3sa6ev.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    # Replace all spaces\
    \ with underscores\n    text = replace(text, \" \", \"_\")\n    \n    # Replace\
    \ all consecutive spaces with -\n    \n    # If the string has more than 2 consecutive\
    \ spaces\n    if length(text) > 2 \n        \n        # Replace all consecutive\
    \ spaces with -\n        text = replace(text, \" \", \"-\")\n    end\n    \n \
    \   return text\nend\n</cell>\n<code language=julia-1.5>\n# Test your code\n@test\
    \ fix_spaces(\"Example\") == \n    \"Example\"\n@test fix_spaces(\"Example 1\"\
    ) == \n    \"Example_1\"\n@test fix_spaces(\"  Example 2\") == \n    \"_Example_2\"\
    \n@test fix_spaces(\"  Example   3\") == \n    \"_Example-3\"\n</cell>\n<text>\n\
    Implement fix_capitals\nGiven a string text, return a capitalized version of this\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsktaamlv.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsktaamlv.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    if text == \"\"\n\
    \        return text\n    \n    space_count = count_spaces(text)\n    \n    if\
    \ space_count > 2\n        return replace_consecutive_spaces(text)\n    else\n\
    \        return replace_spaces(text)\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    count_spaces(text::String)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty\
    \  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\"\
    ) == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwzel0o46.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwzel0o46.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    replaced_text = text\n\
    \    \n    if text == \"\"\n        return replaced_text\n    \n    if text ==\
    \ \" \" \n        return replaced_text\n    \n    replaced_text = replaced_text.replace(\"\
    \ \", \"_\")\n    \n    if replaced_text == \"\"\n        return replaced_text\n\
    \    \n    if replaced_text == \" \" \n        return replaced_text\n    \n  \
    \  if replaced_text == \"  \"\n        return replaced_text\n    \n    if replaced_text\
    \ == \"  \"\n        return replaced_text\n    \n    if replaced_text == \"  \"\
    \n        return replaced_text\n    \n    if replaced_text == \"  \"\n       \
    \ return replaced_text\n    \n    if replaced_text == \"  \"\n        return replaced_text\n\
    \    \n    if replaced_text == \"  \"\n        return replaced_text\n    \n  \
    \  if replaced_text == \"  \"\n        return replaced_text\n    \n    if replaced_text\
    \ == \"  \"\n        return replaced_text\n    \n    if replaced_text == \"  \"\
    \n        return replaced_text\n    \n    if replaced_text == \"  \"\n       \
    \ return replaced_text\n    \n    if replaced_text == \"  \"\n        return replaced_text\n\
    \    \n    if replaced_text == \"  \"\n        return replaced_text\n    \n  \
    \  if replaced_text == \"  \"\n        return replaced_text\n    \n    if replaced_text\
    \ == \"  \"\n        return replaced_text\n    \n    if replaced_text == \"  \"\
    \n        return replaced_text\n    \n    if replaced_text == \"  \"\n       \
    \ return replaced_text\n    \n    if replaced_text == \"  \"\n        return replaced_text\n\
    \    \n    if replaced_text == \"  \"\n        return replaced_text\n    \n  \
    \  if replaced_text == \"  \"\n        return replaced_text\n    \n    if replaced_text\
    \ == \"  \"\n        return replaced_text\n    \n    if replaced_text == \"  \"\
    \n        return replaced_text\n    \n    if replaced_text == \"  \"\n       \
    \ return replaced_text\n    \n    if replaced_text == \"  \"\n        return replaced_text\n\
    \    \n    if replaced_text == \"  \"\n        return replaced_text\n    \n  \
    \  if replaced_text == \"  \"\n        return replaced_text\n    \n    if replaced_text\
    \ == \"  \"\n        return replaced_text\n    \n    if replaced_text == \"  \"\
    \n        return replaced_text\n    \n    if replaced_text == \"  \"\n       \
    \ return replaced_text\n    \n    if replaced_text == \"  \"\n        return replaced_text\n\
    \    \n    if replaced_text == \"  \"\n        return replaced_text\n    \n  \
    \  if replaced_text == \"  \"\n        return replaced_text\n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"Example\") ==\
    \ \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\
    \t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2hbw2tz_.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2hbw2tz_.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    space_count = count_spaces(text)\n\
    \    \n    if space_count > 1\n        \n        space_count_str = str(space_count)\n\
    \        \n        space_count_str = replace(space_count_str, \"-\", \"_\")\n\
    \        \n        text = replace(text, \" \", \"_\")\n        \n        text\
    \ = replace(text, space_count_str, \"_\")\n        \n    end\n    \n    return\
    \ text\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    count_spaces(text::String)\n\
    using Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2e1i1955.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2e1i1955.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    words = split(text)\n\
    \    \n    fixed_text = \"\"\n    \n    for word in words\n        fixed_text\
    \ += replace(word, \"_\", \" \")\n    end\n    \n    return fixed_text\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    split_words(text::String)::Array{String}\n\
    \    \n    Split text into words. \n    \n    split_words(\"Example\") == \"Example\"\
    \n    split_words(\"Example 1\") == \"Example\"\n    split_words(\" Example 2\"\
    ) == \"Example\"\n    split_words(\" Example   3\") == \"Example\"\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpykyjkizw.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpykyjkizw.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    fixed_text = text\n\
    \    \n    if text == \"\"\n        return fixed_text\n    \n    spaces_count\
    \ = count_spaces(text)\n    \n    if spaces_count > 1\n        \n        fixed_text\
    \ = replace(text, \"  \", \"_\")\n        \n    ends_with_spaces = ends_with?(text,\
    \ \" \")\n    \n    if ends_with_spaces\n        \n        fixed_text = replace(text,\
    \ \" \", \"_\")\n        \n    ends_with_newlines = ends_with?(text, \"\\n\")\n\
    \    \n    if ends_with_newlines\n        \n        fixed_text = replace(text,\
    \ \"\\n\", \"_\")\n        \n    ends_with_spaces = ends_with?(text, \" \")\n\
    \    \n    if ends_with_spaces\n        \n        fixed_text = replace(text, \"\
    \ \", \"_\")\n        \n    ends_with_newlines = ends_with?(text, \"\\n\")\n \
    \   \n    if ends_with_newlines\n        \n        fixed_text = replace(text,\
    \ \"\\n\", \"_\")\n        \n    ends_with_spaces = ends_with?(text, \" \")\n\
    \    \n    if ends_with_spaces\n        \n        fixed_text = replace(text, \"\
    \ \", \"_\")\n        \n    ends_with_newlines = ends_with?(text, \"\\n\")\n \
    \   \n    if ends_with_newlines\n        \n        fixed_text = replace(text,\
    \ \"\\n\", \"_\")\n        \n    ends_with_spaces = ends_with?(text, \" \")\n\
    \    \n    if ends_with_spaces\n        \n        fixed_text = replace(text, \"\
    \ \", \"_\")\n        \n    ends_with_newlines = ends_with?(text, \"\\n\")\n \
    \   \n    if ends_with_newlines\n        \n        fixed_text = replace(text,\
    \ \"\\n\", \"_\")\n        \n    ends_with_spaces = ends_with?(text, \" \")\n\
    \    \n    if ends_with_spaces\n        \n        fixed_text = replace(text, \"\
    \ \", \"_\")\n        \n    ends_with_newlines = ends_with?(text, \"\\n\")\n \
    \   \n    if ends_with_newlines\n        \n        fixed_text = replace(text,\
    \ \"\\n\", \"_\")\n        \n    ends_with_spaces = ends_with?(text, \" \")\n\
    \    \n    if ends_with_spaces\n        \n        fixed_text = replace(text, \"\
    \ \", \"_\")\n        \n    ends_with_newlines = ends_with?(text, \"\\n\")\n \
    \   \n    if ends_with_newlines\n        \n        fixed_text = replace(text,\
    \ \"\\n\", \"_\")\n        \n    ends_with_spaces = ends_with?(text, \" \")\n\
    \    \n    if ends_with_spaces\n        \n        fixed_text = replace(text, \"\
    \ \", \"_\")\n        \n    ends_with_newlines = ends_with?(text, \"\\n\")\n \
    \   \n    if ends_with_newlines\n        \n        fixed_text = \nusing Test\n\
    \n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"Example\") ==\
    \ \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\
    \t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space required before \"?\" operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg83y6l11.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg83y6l11.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    space_count = count_spaces(text)\n\
    \    \n    if space_count > 2\n        space_count = space_count - 1\n       \
    \ \n        space_text = \"\"\n        \n        for i in 1:space_count\n    \
    \        space_text += \"-\"\n        end\n        \n        return space_text\
    \ * space_count\n    else\n        return text\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    count_spaces(text::String)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty\
    \  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\"\
    ) == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqojcfw6t.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqojcfw6t.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    fixed_text = text\n\
    \    \n    if text == \"\"\n        return text\n    \n    if text == \" \"\n\
    \        return text\n    \n    if text == \"  \"\n        return text\n    \n\
    \    if text == \" _\"\n        return text\n    \n    if text == \"_ \"\n   \
    \     return text\n    \n    if text == \"_ \"\n        return text\n    \n  \
    \  if text == \"_ \"\n        return text\n    \n    if text == \"_ \"\n     \
    \   return text\n    \n    if text == \"_ \"\n        return text\n    \n    if\
    \ text == \"_ \"\n        return text\n    \n    if text == \"_ \"\n        return\
    \ text\n    \n    if text == \"_ \"\n        return text\n    \n    if text ==\
    \ \"_ \"\n        return text\n    \n    if text == \"_ \"\n        return text\n\
    \    \n    if text == \"_ \"\n        return text\n    \n    if text == \"_ \"\
    \n        return text\n    \n    if text == \"_ \"\n        return text\n    \n\
    \    if text == \"_ \"\n        return text\n    \n    if text == \"_ \"\n   \
    \     return text\n    \n    if text == \"_ \"\n        return text\n    \n  \
    \  if text == \"_ \"\n        return text\n    \n    if text == \"_ \"\n     \
    \   return text\n    \n    if text == \"_ \"\n        return text\n    \n    if\
    \ text == \"_ \"\n        return text\n    \n    if text == \"_ \"\n        return\
    \ text\n    \n    if text == \"_ \"\n        return text\n    \n    if text ==\
    \ \"_ \"\n        return text\n    \n    if text == \"_ \"\n        return text\n\
    \    \n    if text == \"_ \"\n        return text\n    \n    if text == \"_ \"\
    \n        return text\n    \n    if text == \"_ \"\n        return text\n    \n\
    \    if text == \"_ \"\n        return text\n    \n    if text == \"_ \"\n   \
    \     return text\n    \n    if text == \"_ \"\n        return text\n    \n  \
    \  if text == \"_ \"\n        return text\n    \n    if text == \"_ \"\n     \
    \   return text\n    \n    if text == \"_ \"\n        return text\n    \n    if\
    \ text == \"_ \"\n        return text\n    \n    if text == \"_ \"\n        return\
    \ text\n    \n    if text == \"_ \"\n        return text\n    \n    if text ==\
    \ \"_ \"\n        return text\n    \n    if text == \"_ \"\n        return text\n\
    \    \n    if text == \"_ \"\n        return text\n    \n    if text == \"_ \"\
    \n        return text\n    \n    if text == \"_ \"\n        return text\n    \n\
    \    if text == \"_ \"\n        return text\n    \nusing Test\n\n@testset begin\n\
    \ncandidate = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t\
    @test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"\
    Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"\
    -Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvmchf4e0.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvmchf4e0.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    fix_spaces_helper(text,\
    \ \"\", \"\")\nend\nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t\
    @test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif\
    \ \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ) == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\") == \"\
    Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpkpuphkr6.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"Example\") == \"Example\"\n  UndefVarError: fix_spaces_helper\
    \ not defined\n  Stacktrace:\n   [1] fix_spaces(::String) at /tmp/tmpkpuphkr6.jl:13\n\
    \   [2] top-level scope at /tmp/tmpkpuphkr6.jl:20\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkpuphkr6.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpkpuphkr6.jl:21\n  Test threw exception\n  Expression: candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\"\n  UndefVarError: fix_spaces_helper not\
    \ defined\n  Stacktrace:\n   [1] fix_spaces(::String) at /tmp/tmpkpuphkr6.jl:13\n\
    \   [2] top-level scope at /tmp/tmpkpuphkr6.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkpuphkr6.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpkpuphkr6.jl:22\n  Test threw exception\n  Expression: candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\n  UndefVarError:\
    \ fix_spaces_helper not defined\n  Stacktrace:\n   [1] fix_spaces(::String) at\
    \ /tmp/tmpkpuphkr6.jl:13\n   [2] top-level scope at /tmp/tmpkpuphkr6.jl:22\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkpuphkr6.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpkpuphkr6.jl:23\n  Test threw exception\n  Expression: candidate(\"\
    Exa   mple\") == \"Exa-mple\"\n  UndefVarError: fix_spaces_helper not defined\n\
    \  Stacktrace:\n   [1] fix_spaces(::String) at /tmp/tmpkpuphkr6.jl:13\n   [2]\
    \ top-level scope at /tmp/tmpkpuphkr6.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkpuphkr6.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpkpuphkr6.jl:24\n  Test threw exception\n  Expression: candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\"\n  UndefVarError: fix_spaces_helper\
    \ not defined\n  Stacktrace:\n   [1] fix_spaces(::String) at /tmp/tmpkpuphkr6.jl:13\n\
    \   [2] top-level scope at /tmp/tmpkpuphkr6.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkpuphkr6.jl:19\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkpuphkr6.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    words = split(text,\
    \ \" \")\n    \n    fixed_text = \"\"\n    \n    for word in words\n        fixed_text\
    \ += replace(word, \"_\") + \" \"\n    end\n    \n    fixed_text = replace(fixed_text,\
    \ \" \", \"-\")\n    \n    return fixed_text\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    split_words(text::String)::Vector{String}\n    \n    Split text into\
    \ words by splitting on spaces.\n    \n    split_words(\"Example\") == \"Example\"\
    \n    split_words(\"Example 1\") == \"Example\"\n    split_words(\" Example 2\"\
    ) == \"Example\"\n    split_words(\" Example   3\") == \"Example\"\n    \n   \
    \ split_words(\"Example 1 2 3\") == \"Example\", \"1\", \"2\", \"3\"\n    \n \
    \   split_words(\"Example   1 2 3\") == \"Example\", \"1\", \"2\", \"3\"\n   \
    \ \n    split_words(\"Example   1 2 3 4 5\") == \"Example\", \"1\", \"2\", \"\
    3\", \"4\", \"5\"\n    \n    split_words(\"Example   1 2 3 4 5 6\") == \"Example\"\
    , \"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\n    \n    split_words(\"Example  \
    \ 1 2 3 4 5 6 7\") == \"Example\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"\
    7\"\n    \n    split_words(\"Example   1 2 3 4 5 6 7 8\") == \"Example\", \"1\"\
    , \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"\n    \n    split_words(\"Example\
    \   1 2 3 4 5 6 7 8 9\") == \"Example\", \"1\", \"2\", \"3\", \"4\", \"5\", \"\
    6\", \"7\", \"8\", \"9\"\n    \n    split_words(\"Example   1 2 3 4 5 6 7 8 9\
    \ 0\") == \"Example\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"\
    , \"9\", \"0\"\n    \n    split_words(\"Example   1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1 \nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\
    \t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif\
    \ \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ) == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\") == \"\
    Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpar59wqfm.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpar59wqfm.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    text_no_spaces = text\n\
    \    \n    if text == \"\"\n        return \"\"\n    \n    if text == \" \"\n\
    \        return \"\"\n    \n    if text == \"  \"\n        return \"\"\n    \n\
    \    if text == \"  \"\n        return \"\"\n    \n    if text == \" \"  \n  \
    \      return \"\"\n    \n    if text == \"  \"\n        return \"\"\n    \n \
    \   if text == \"  \"\n        return \"\"\n    \n    if text == \" \"  \n   \
    \     return \"\"\n    \n    if text == \"  \"\n        return \"\"\n    \n  \
    \  if text == \"  \"\n        return \"\"\n    \n    if text == \" \"  \n    \
    \    return \"\"\n    \n    if text == \"  \"\n        return \"\"\n    \n   \
    \ if text == \"  \"\n        return \"\"\n    \n    if text == \" \"  \n     \
    \   return \"\"\n    \n    if text == \"  \"\n        return \"\"\n    \n    if\
    \ text == \"  \"\n        return \"\"\n    \n    if text == \" \"  \n        return\
    \ \"\"\n    \n    if text == \"  \"\n        return \"\"\n    \n    if text ==\
    \ \"  \"\n        return \"\"\n    \n    if text == \" \"  \n        return \"\
    \"\n    \n    if text == \"  \"\n        return \"\"\n    \n    if text == \"\
    \  \"\n        return \"\"\n    \n    if text == \" \"  \n        return \"\"\n\
    \    \n    if text == \"  \"\n        return \"\"\n    \n    if text == \"  \"\
    \n        return \"\"\n    \n    if text == \" \"  \n        return \"\"\n   \
    \ \n    if text == \"  \"\n        return \"\"\n    \n    if text == \"  \"\n\
    \        return \"\"\n    \n    if text == \" \"  \n        return \"\"\n    \n\
    \    if text == \"  \"\n        return \"\"\n    \n    if text == \"  \"\n   \
    \     return \"\"\n    \n    if text == \" \"  \n        return \"\"\n    \n \
    \   if text == \"  \"\n        return \"\"\n    \n    if text == \"  \"\n    \
    \    return \"\"\n    \n    if text == \" \"  \n        return \"\"\n    \n  \
    \  if text == \"  \"\n        return \"\"\n    \n    if text == \"  \"\n     \
    \   return \"\"\n    \n    if text == \" \"  \n        return \"\"\n    \n   \
    \ if text == \"  \"\n        return \"\"\n    \n    if text == \"  \"\n      \
    \  return \"\"\n    \n    if text == \" \"  \n        return \"\"\n    \n    if\
    \ text == \"  \"\n        return \"\"\n    \n    if text == \"  \"\n        return\
    \ \"\"\n    \n    if text == \" \"  \n        return \"\"\n    \n    if text ==\
    \ \"  \"\n        return \"\"\n    \n    if text == \"  \"\n        return \"\"\
    \n    \n    if text == \" \"  \n        return \"\"\n    \n    if text == \" \
    \ \"\n        return \"\"\n    \n    if text == \"  \"\n        return \nusing\
    \ Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"Example\"\
    ) == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp62kzr10i.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp62kzr10i.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\
    \t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif\
    \ \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ) == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\") == \"\
    Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpaej5z3e1.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpaej5z3e1.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpaej5z3e1.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    text_no_spaces = replace(text,\
    \ \" \", \"_\")\n    \n    if length(text_no_spaces) > 2 \n        \n        text_no_spaces\
    \ = replace(text_no_spaces, \" \", \"_\")\n        \n    end\n    \n    return\
    \ text_no_spaces\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    remove_spaces(\"\
    Example\") == \"Example\"\n    remove_spaces(\"Example 1\") == \"Example1\"\n\
    \    remove_spaces(\"Example  2\") == \"Example2\"\n    remove_spaces(\"Example\
    \ 3\") == \"Example3\"\n    remove_spaces(\"Example   4\") == \"Example4\"\n \
    \   remove_spaces(\"Example   5\") == \"Example5\"\n    remove_spaces(\"Example\
    \   6\") == \"Example6\"\n    remove_spaces(\"Example   7\") == \"Example7\"\n\
    \    remove_spaces(\"Example   8\") == \"Example8\"\n    remove_spaces(\"Example\
    \   9\") == \"Example9\"\n    remove_spaces(\"Example  10\") == \"Example10\"\n\
    \    remove_spaces(\"Example  11\") == \"Example11\"\n    remove_spaces(\"Example\
    \  12\") == \"Example12\"\n    remove_spaces(\"Example  13\") == \"Example13\"\
    \n    remove_spaces(\"Example  14\") == \"Example14\"\n    remove_spaces(\"Example\
    \  15\") == \"Example15\"\n    remove_spaces(\"Example  16\") == \"Example16\"\
    \n    remove_spaces(\"Example  17\") == \"Example17\"\n    remove_spaces(\"Example\
    \  18\") == \"Example18\"\n    remove_spaces(\"Example  19\") == \"Example19\"\
    \n    remove_spaces(\"Example  20\") == \"Example20\"\n    remove_spaces(\"Example\
    \  21\") == \"Example21\"\n    remove_spaces(\"Example  22\") == \"Example22\"\
    \n    remove_spaces(\"Example  23\") == \"Example23\"\n    remove_spaces(\"Example\
    \  24\") == \"Example24\"\n    remove_spaces(\"Example  25\") == \"Example25\"\
    \n    remove_spaces(\"Example  26\") == \"Example26\"\n    remove_spaces(\"Example\
    \  27\") == \"Example27\"\n    remove_spaces(\"Example  28\") == \"Example28\"\
    \n    remove_spaces(\"Example  29\") == \"Example29\"\n    remove_spaces(\"Example\
    \  30\") == \"Example30\"\n    remove_spaces(\"Example  31\") == \"Example31\"\
    \n    remove_spaces(\"Example  32\") == \"Example32\"\n    remove_spaces(\"Example\
    \  33\") == \"Example33\"\n    remove_spaces(\"Example  34\") == \"Example34\"\
    \n    remove_spaces(\"Example  35\") == \"Example35\"\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\"\
    )\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"\
    Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"\
    -Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm86vs2qt.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm86vs2qt.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    fixed_text = text\n\
    \    \n    if text == \"\"\n        return fixed_text\n    \n    if text == \"\
    \ \" \n        return fixed_text\n    \n    if text == \"  \"\n        return\
    \ fixed_text\n    \n    if text == \"  \"\n        return fixed_text\n    \n \
    \   if text == \" \" \n        return fixed_text\n    \n    if text == \"  \"\n\
    \        return fixed_text\n    \n    if text == \" \" \n        return fixed_text\n\
    \    \n    if text == \"  \"\n        return fixed_text\n    \n    if text ==\
    \ \" \" \n        return fixed_text\n    \n    if text == \"  \"\n        return\
    \ fixed_text\n    \n    if text == \" \" \n        return fixed_text\n    \n \
    \   if text == \"  \"\n        return fixed_text\n    \n    if text == \" \" \n\
    \        return fixed_text\n    \n    if text == \"  \"\n        return fixed_text\n\
    \    \n    if text == \" \" \n        return fixed_text\n    \n    if text ==\
    \ \"  \"\n        return fixed_text\n    \n    if text == \" \" \n        return\
    \ fixed_text\n    \n    if text == \"  \"\n        return fixed_text\n    \n \
    \   if text == \" \" \n        return fixed_text\n    \n    if text == \"  \"\n\
    \        return fixed_text\n    \n    if text == \" \" \n        return fixed_text\n\
    \    \n    if text == \"  \"\n        return fixed_text\n    \n    if text ==\
    \ \" \" \n        return fixed_text\n    \n    if text == \"  \"\n        return\
    \ fixed_text\n    \n    if text == \" \" \n        return fixed_text\n    \n \
    \   if text == \"  \"\n        return fixed_text\n    \n    if text == \" \" \n\
    \        return fixed_text\n    \n    if text == \"  \"\n        return fixed_text\n\
    \    \n    if text == \" \" \n        return fixed_text\n    \n    if text ==\
    \ \"  \"\n        return fixed_text\n    \n    if text == \" \" \n        return\
    \ fixed_text\n    \n    if text == \"  \"\n        return fixed_text\n    \n \
    \   if text == \" \" \n        return fixed_text\n    \n    if text == \"  \"\n\
    \        return fixed_text\n    \n    if text == \" \" \n        return fixed_text\n\
    \    \n    if text == \"  \"\n        return fixed_text\n    \n    if text ==\
    \ \" \" \n        return fixed_text\n    \n    if text == \"  \"\n        return\
    \ fixed_text\n    \n    if text == \" \" \n        return fixed_text\n    \n \
    \   if text == \"  \"\n        return fixed_text\n    \n    if text == \" \" \n\
    \        return fixed_text\n    \n    if text == \"  \"\n        return fixed_text\n\
    \    \n    if text == \" \" \n        return fixed_text\n    \n    if text ==\
    \ \"  \"\n        return fixed_text\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty\
    \  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\"\
    ) == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjgdqft7c.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjgdqft7c.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    # Replace all spaces\
    \ with underscores\n    text = replace(text, \"  \", \"_\")\n    \n    # Replace\
    \ all consecutive spaces with -\n    text_split = split(text, \" \")\n    text_split\
    \ = [replace(text_split[i], \" \", \"-\") for i in 1:length(text_split)]\n   \
    \ text = join(text_split, \" \")\n    \n    return text\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    split_words(text::String)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty\
    \  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\"\
    ) == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp84ovnpb_.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp84ovnpb_.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    fix_spaces_re = regex(r\"\
    \\s+\")\n    \n    fixed_text = fix_spaces_re.sub(\"-\", text)\n    \n    if fixed_text\
    \ == text\n        fixed_text\n    else\n        fixed_text\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    remove_special_chars(text::String)\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"Example\"\
    ) == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvfytd0pi.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvfytd0pi.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    fix_spaces_re = Regex(\"\
    \ {2,}\")\n    \n    fix_spaces_replaced = fix_spaces_re.replace_all(text)\n \
    \   \n    if fix_spaces_replaced != text\n        fix_spaces_replaced = fix_spaces_replaced.replace(\"\
    \  \",\"_\")\n    end\n    \n    return fix_spaces_replaced\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    remove_extra_spaces(text::String)\nusing Test\n\
    \n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"Example\") ==\
    \ \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\
    \t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzqxjlkxr.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzqxjlkxr.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\
    \t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif\
    \ \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ) == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\") == \"\
    Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplmhl9y35.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmplmhl9y35.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmplmhl9y35.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    text_no_spaces = replace(replace(replace(replace(text,\
    \ \" \", \"_\"), \"  \", \"_\"), \"  \", \"_\"), \"  \", \"_\")\n    \n    if\
    \ length(text_no_spaces) > length(text)\n        text_no_spaces = replace(text_no_spaces,\
    \ \" \", \"-\")\n    end\n    \n    return text_no_spaces\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    remove_spaces(text::String)\nusing Test\n\n\
    @testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"Example\") == \"\
    Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"\
    Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"\
    -Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3_rvzfij.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3_rvzfij.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    if text == \"\"\n\
    \        return text\n    \n    spaces = \" \"\n    \n    replaced = replace(text,\
    \ spaces, \"_\")\n    \n    if replaced == \"\"\n        return text\n    \n \
    \   spaces = \" \"\n    \n    replaced = replace(replaced, spaces, \"-\")\n  \
    \  \n    if replaced == \"\"\n        return text\n    \n    return replaced\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphiyqh1kn.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphiyqh1kn.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\
    \t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif\
    \ \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ) == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\") == \"\
    Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwzt8zph1.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpwzt8zph1.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpwzt8zph1.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    fixed_text = text\n\
    \    \n    if text == \"\"\n        return text\n    \n    fixed_text = replace(fixed_text,\
    \ \" \", \"_\")\n    \n    if length(fixed_text) > 2\n        fixed_text = replace(fixed_text,\
    \ \" \", \"-\")\n    end\n    \n    return fixed_text\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    remove_spaces(text::String)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty\
    \  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\"\
    ) == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmltisbx0.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmltisbx0.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    replaced_text = text\n\
    \    \n    if text == \"\"\n        return replaced_text\n    \n    replaced_text\
    \ = replaced_text.replace(\" \", \"_\")\n    \n    if replaced_text == \"\"\n\
    \        return replaced_text\n    \n    replaced_text = replaced_text.replace(\"\
    \ \", \"-\")\n    \n    if replaced_text == \"\"\n        return replaced_text\n\
    \    \n    replaced_text = replaced_text.replace(\" \", \"-\")\n    \n    if replaced_text\
    \ == \"\"\n        return replaced_text\n    \n    replaced_text = replaced_text.replace(\"\
    \ \", \"-\")\n    \n    if replaced_text == \"\"\n        return replaced_text\n\
    \    \n    replaced_text = replaced_text.replace(\" \", \"-\")\n    \n    if replaced_text\
    \ == \"\"\n        return replaced_text\n    \n    replaced_text = replaced_text.replace(\"\
    \ \", \"-\")\n    \n    if replaced_text == \"\"\n        return replaced_text\n\
    \    \n    replaced_text = replaced_text.replace(\" \", \"-\")\n    \n    if replaced_text\
    \ == \"\"\n        return replaced_text\n    \n    replaced_text = replaced_text.replace(\"\
    \ \", \"-\")\n    \n    if replaced_text == \"\"\n        return replaced_text\n\
    \    \n    replaced_text = replaced_text.replace(\" \", \"-\")\n    \n    if replaced_text\
    \ == \"\"\n        return replaced_text\n    \n    replaced_text = replaced_text.replace(\"\
    \ \", \"-\")\n    \n    if replaced_text == \"\"\n        return replaced_text\n\
    \    \n    replaced_text = replaced_text.replace(\" \", \"-\")\n    \n    if replaced_text\
    \ == \"\"\n        return replaced_text\n    \n    replaced_text = replaced_text.replace(\"\
    \ \", \"-\")\n    \n    if replaced_text == \"\"\n        return replaced_text\n\
    \    \n    replaced_text = replaced_text.replace(\" \", \"-\")\n    \n    if replaced_text\
    \ == \"\"\n        return replaced_text\n    \n    replaced_text = replaced_text.replace(\"\
    \ \", \"-\")\n    \n    if replaced_text == \"\"\n        return replaced_text\n\
    \    \n    replaced_text = replaced_text.replace(\" \", \"-\")\n    \n    if replaced_text\
    \ == \"\"\n        return replaced_text\n    \n    replaced_text = replaced_text.replace(\"\
    \ \", \"-\")\n    \n    if replaced_text == \"\"\n        return replaced_text\n\
    \    \n    replaced_text = replaced_text.replace(\" \", \"-\")\n    \n    if replaced_text\
    \ == \"\"\n        return replaced_text\n    \n    replaced_text = replaced_text.replace(\"\
    \ \", \"-\")\n    \n\nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\
    \t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif\
    \ \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ) == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\") == \"\
    Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz9jpa90t.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpz9jpa90t.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    fix_spaces_helper(text,\
    \ \"\", \"\")\nend\nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t\
    @test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif\
    \ \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ) == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\") == \"\
    Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpthde0sr4.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"Example\") == \"Example\"\n  UndefVarError: fix_spaces_helper\
    \ not defined\n  Stacktrace:\n   [1] fix_spaces(::String) at /tmp/tmpthde0sr4.jl:13\n\
    \   [2] top-level scope at /tmp/tmpthde0sr4.jl:20\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpthde0sr4.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpthde0sr4.jl:21\n  Test threw exception\n  Expression: candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\"\n  UndefVarError: fix_spaces_helper not\
    \ defined\n  Stacktrace:\n   [1] fix_spaces(::String) at /tmp/tmpthde0sr4.jl:13\n\
    \   [2] top-level scope at /tmp/tmpthde0sr4.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpthde0sr4.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpthde0sr4.jl:22\n  Test threw exception\n  Expression: candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\n  UndefVarError:\
    \ fix_spaces_helper not defined\n  Stacktrace:\n   [1] fix_spaces(::String) at\
    \ /tmp/tmpthde0sr4.jl:13\n   [2] top-level scope at /tmp/tmpthde0sr4.jl:22\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpthde0sr4.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpthde0sr4.jl:23\n  Test threw exception\n  Expression: candidate(\"\
    Exa   mple\") == \"Exa-mple\"\n  UndefVarError: fix_spaces_helper not defined\n\
    \  Stacktrace:\n   [1] fix_spaces(::String) at /tmp/tmpthde0sr4.jl:13\n   [2]\
    \ top-level scope at /tmp/tmpthde0sr4.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpthde0sr4.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpthde0sr4.jl:24\n  Test threw exception\n  Expression: candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\"\n  UndefVarError: fix_spaces_helper\
    \ not defined\n  Stacktrace:\n   [1] fix_spaces(::String) at /tmp/tmpthde0sr4.jl:13\n\
    \   [2] top-level scope at /tmp/tmpthde0sr4.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpthde0sr4.jl:19\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpthde0sr4.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    fixed_text = \"\"\n\
    \    \n    for c in text\n        if c == \" \"\n            fixed_text += \"\
    _\"\n        else\n            fixed_text += c\n    \n    return fixed_text\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    split_string(text::String)\n\
    using Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdemdtr1i.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdemdtr1i.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    fix_spaces_helper(text,\
    \ \"\", \"\")\nend\nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t\
    @test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif\
    \ \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ) == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\") == \"\
    Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp7y2w9yml.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"Example\") == \"Example\"\n  UndefVarError: fix_spaces_helper\
    \ not defined\n  Stacktrace:\n   [1] fix_spaces(::String) at /tmp/tmp7y2w9yml.jl:13\n\
    \   [2] top-level scope at /tmp/tmp7y2w9yml.jl:20\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7y2w9yml.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmp7y2w9yml.jl:21\n  Test threw exception\n  Expression: candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\"\n  UndefVarError: fix_spaces_helper not\
    \ defined\n  Stacktrace:\n   [1] fix_spaces(::String) at /tmp/tmp7y2w9yml.jl:13\n\
    \   [2] top-level scope at /tmp/tmp7y2w9yml.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7y2w9yml.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmp7y2w9yml.jl:22\n  Test threw exception\n  Expression: candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\n  UndefVarError:\
    \ fix_spaces_helper not defined\n  Stacktrace:\n   [1] fix_spaces(::String) at\
    \ /tmp/tmp7y2w9yml.jl:13\n   [2] top-level scope at /tmp/tmp7y2w9yml.jl:22\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7y2w9yml.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmp7y2w9yml.jl:23\n  Test threw exception\n  Expression: candidate(\"\
    Exa   mple\") == \"Exa-mple\"\n  UndefVarError: fix_spaces_helper not defined\n\
    \  Stacktrace:\n   [1] fix_spaces(::String) at /tmp/tmp7y2w9yml.jl:13\n   [2]\
    \ top-level scope at /tmp/tmp7y2w9yml.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7y2w9yml.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmp7y2w9yml.jl:24\n  Test threw exception\n  Expression: candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\"\n  UndefVarError: fix_spaces_helper\
    \ not defined\n  Stacktrace:\n   [1] fix_spaces(::String) at /tmp/tmp7y2w9yml.jl:13\n\
    \   [2] top-level scope at /tmp/tmp7y2w9yml.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7y2w9yml.jl:19\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7y2w9yml.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    fix_spaces_helper(text,\
    \ \"\", \"\")\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    fix_spaces_helper(text,\
    \ prefix, result)\n    \n    Recursive helper function for fix_spaces\n    \n\
    \    Replace all spaces in text with underscores, and \n    if text has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with -\n   \
    \ \n    text - text to fix spaces in\n    prefix - prefix to add to each substring\
    \ before underscore\n    result - result to append to\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"Example\") ==\
    \ \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\
    \t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0hbr1quz.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0hbr1quz.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    words = split(text,\
    \ \" \")\n    \n    fixed_text = \"\"\n    \n    for word in words\n        fixed_text\
    \ += replace(word, \"_\", \" \")\n    end\n    \n    return fixed_text\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    split_words(text::String)\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"Example\"\
    ) == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwoztzupb.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwoztzupb.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    text_no_spaces = text\n\
    \    \n    if text == \"\"\n        return text\n    \n    if text == \" \" \n\
    \        return text\n    \n    if text == \" \"\n        return \"_\"\n    \n\
    \    if text == \" \"\n        return \"-\"\n    \n    if text == \" \"\n    \
    \    return \"-\"\n    \n    if text == \" \"\n        return \"-\"\n    \n  \
    \  if text == \" \"\n        return \"-\"\n    \n    if text == \" \"\n      \
    \  return \"-\"\n    \n    if text == \" \"\n        return \"-\"\n    \n    if\
    \ text == \" \"\n        return \"-\"\n    \n    if text == \" \"\n        return\
    \ \"-\"\n    \n    if text == \" \"\n        return \"-\"\n    \n    if text ==\
    \ \" \"\n        return \"-\"\n    \n    if text == \" \"\n        return \"-\"\
    \n    \n    if text == \" \"\n        return \"-\"\n    \n    if text == \" \"\
    \n        return \"-\"\n    \n    if text == \" \"\n        return \"-\"\n   \
    \ \n    if text == \" \"\n        return \"-\"\n    \n    if text == \" \"\n \
    \       return \"-\"\n    \n    if text == \" \"\n        return \"-\"\n    \n\
    \    if text == \" \"\n        return \"-\"\n    \n    if text == \" \"\n    \
    \    return \"-\"\n    \n    if text == \" \"\n        return \"-\"\n    \n  \
    \  if text == \" \"\n        return \"-\"\n    \n    if text == \" \"\n      \
    \  return \"-\"\n    \n    if text == \" \"\n        return \"-\"\n    \n    if\
    \ text == \" \"\n        return \"-\"\n    \n    if text == \" \"\n        return\
    \ \"-\"\n    \n    if text == \" \"\n        return \"-\"\n    \n    if text ==\
    \ \" \"\n        return \"-\"\n    \n    if text == \" \"\n        return \"-\"\
    \n    \n    if text == \" \"\n        return \"-\"\n    \n    if text == \" \"\
    \n        return \"-\"\n    \n    if text == \" \"\n        return \"-\"\n   \
    \ \n    if text == \" \"\n        return \"-\"\n    \n    if text == \" \"\n \
    \       return \"-\"\n    \n    if text == \" \"\n        return \"-\"\n    \n\
    \    if text == \" \"\n        return \"-\"\n    \n    if text == \" \"\n    \
    \    return \"-\"\n    \n    if text == \" \"\n        return \"-\"\n    \n  \
    \  if text == \" \"\n        return \"-\"\n    \n    if text == \" \"\n      \
    \  return \"-\"\n    \n    if text == \" \"\n        return \"-\"\n    \n    if\
    \ text == \" \"\n        return \"-\"\n    \n    if text == \" \"\n        return\
    \ \"-\"\n    \n    if text == \" \"\n        return \"-\"\n    \n    if text ==\
    \ \" \"\n        return \"-\"\n    \n    if text == \" \"\n        return \"-\"\
    \n    \n    if text == \" \"\n        return \"-\"\n    \n    if text == \" \"\
    \n        return \"-\"\n    \nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\
    \t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif\
    \ \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ) == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\") == \"\
    Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9394w7l_.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9394w7l_.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    if text == \"\"\n\
    \        return text\n    \n    space_count = count_spaces(text)\n    \n    if\
    \ space_count > 1\n        return replace_spaces(text)\n    \n    return replace_spaces(text).replace(\"\
    \ \", \"-\")\nend\nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t\
    @test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif\
    \ \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ) == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\") == \"\
    Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpioddop7s.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpioddop7s.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    \n    if text == \"\
    \"\n        return text\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty\
    \  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\"\
    ) == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3kdp_f6s.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3kdp_f6s.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    fix_spaces_helper(text,\
    \ \"\", \"\")\nend\nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t\
    @test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif\
    \ \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ) == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\") == \"\
    Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpf7pmzlc0.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"Example\") == \"Example\"\n  UndefVarError: fix_spaces_helper\
    \ not defined\n  Stacktrace:\n   [1] fix_spaces(::String) at /tmp/tmpf7pmzlc0.jl:13\n\
    \   [2] top-level scope at /tmp/tmpf7pmzlc0.jl:20\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpf7pmzlc0.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpf7pmzlc0.jl:21\n  Test threw exception\n  Expression: candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\"\n  UndefVarError: fix_spaces_helper not\
    \ defined\n  Stacktrace:\n   [1] fix_spaces(::String) at /tmp/tmpf7pmzlc0.jl:13\n\
    \   [2] top-level scope at /tmp/tmpf7pmzlc0.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpf7pmzlc0.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpf7pmzlc0.jl:22\n  Test threw exception\n  Expression: candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\n  UndefVarError:\
    \ fix_spaces_helper not defined\n  Stacktrace:\n   [1] fix_spaces(::String) at\
    \ /tmp/tmpf7pmzlc0.jl:13\n   [2] top-level scope at /tmp/tmpf7pmzlc0.jl:22\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpf7pmzlc0.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpf7pmzlc0.jl:23\n  Test threw exception\n  Expression: candidate(\"\
    Exa   mple\") == \"Exa-mple\"\n  UndefVarError: fix_spaces_helper not defined\n\
    \  Stacktrace:\n   [1] fix_spaces(::String) at /tmp/tmpf7pmzlc0.jl:13\n   [2]\
    \ top-level scope at /tmp/tmpf7pmzlc0.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpf7pmzlc0.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpf7pmzlc0.jl:24\n  Test threw exception\n  Expression: candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\"\n  UndefVarError: fix_spaces_helper\
    \ not defined\n  Stacktrace:\n   [1] fix_spaces(::String) at /tmp/tmpf7pmzlc0.jl:13\n\
    \   [2] top-level scope at /tmp/tmpf7pmzlc0.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpf7pmzlc0.jl:19\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf7pmzlc0.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    text_no_spaces = text.replace(\"\
    \ \", \"_\")\n    \n    if length(text_no_spaces) > 2 \n        \n        text_no_spaces\
    \ = text_no_spaces.replace(\"  \", \"_\")\n        \n    end\n    \n    return\
    \ text_no_spaces\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    remove_special_chars(text::String)\n\
    using Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphzoqq2e1.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphzoqq2e1.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    text_no_spaces = replace(text,\
    \ \" \", \"_\")\n    \n    if length(text_no_spaces) > 2 \n        \n        text_no_spaces\
    \ = replace(text_no_spaces, \" \", \"-\")\n        \n    end\n    \n    return\
    \ text_no_spaces\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    remove_special_chars(text::String)\n\
    using Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5gyouqb8.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5gyouqb8.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    # Replace all spaces\
    \ with underscores\n    text = replace(text, \"  \", \"_\")\n    \n    # Replace\
    \ consecutive spaces with -\n    text = replace(text, \" \", \"-\")\n    \n  \
    \  return text\nend\n</cell>\n<code language=julia-1.5>\n# Test the function\n\
    fix_spaces(\"Example\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns a string where all \n    spaces are replaced with underscores,\
    \ and where consecutive \n    spaces are replaced with -. \n    \n    fix_spaces_2(\"\
    Example\") == \"Example\"\n    fix_spaces_2(\"Example 1\") == \"Example_1\"\n\
    \    fix_spaces_2(\" Example 2\") == \"_Example_2\"\n    fix_spaces_2(\" Example\
    \   3\") == \"_Example-3\"\n    \n    fix_spaces_2(\"Example 1\") == \"Example_1\"\
    \n    fix_spaces_2(\" Example 2\") == \"_Example_2\"\n    fix_spaces_2(\" Example\
    \   3\") == \"_Example-3\"\n    fix_spaces_2(\"Example\") == \"Example\"\n   \
    \ fix_spaces_2(\" Example\") == \"_Example\"\n    fix_spaces_2(\"Example  \")\
    \ == \"Example\"\n    fix_spaces_2(\" Example  \") == \"_Example\"\n    fix_spaces_2(\"\
    Example  \") == \"Example\"\n    fix_spaces_2(\" Example  \") == \"_Example\"\n\
    \    fix_spaces_2(\"Example  \") == \"Example\"\n    fix_spaces_2(\" Example \
    \ \") == \"_Example\"\n    fix_spaces_2(\"Example  \") == \"Example\"\n    fix_spaces_2(\"\
    \ Example  \") == \"_Example\"\n    fix_spaces_2(\"Example  \") == \"Example\"\
    \n    fix_spaces_2(\" Example  \") == \"_Example\"\n    fix_spaces_2(\"Example\
    \  \") == \"Example\"\n    fix_spaces_2(\" Example  \") == \"_Example\"\n    fix_spaces_2(\"\
    Example  \") == \"Example\"\n    fix_spaces_2(\" Example  \") == \"_Example\"\n\
    \    fix_spaces_2(\"Example  \") == \"Example\"\n    fix_spaces_2(\" Example \
    \ \") == \"_Example\"\n    fix_spaces_2(\"Example  \") == \"Example\"\n    fix_spaces_2(\"\
    \ Example  \") == \"_Example\"\n    fix_spaces_2(\"Example  \") == \"Example\"\
    \n    fix_spaces_2(\" Example  \") == \"_Example\"\n    fix_spaces_2(\"Example\
    \  \") == \"Example\"\n    fix_spaces_2(\" Example  \") == \"_Example\"\n    fix_spaces_2(\"\
    Example  \"\nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvhjz013c.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvhjz013c.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    if text == \"\"\n\
    \        return text\n    \n    spaces = findall(\" \", text)\n    \n    if length(spaces)\
    \ > 2\n        spaces = replace(spaces, \" \", \"_\")\n    end\n    \n    return\
    \ replace(text, spaces, \"_\")\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the string with all \n    non-alphanumeric characters\
    \ removed.\nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2pqx9_la.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2pqx9_la.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    space_count = count_spaces(text)\n\
    \    \n    if space_count == 1\n        return text\n    \n    if space_count\
    \ > 2\n        return replace(text, \" \", \"_\")\n    \n    return text\nend\n\
    using Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8znux65y.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8znux65y.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    str = text\n    str\
    \ = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str =\
    \ str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\"\
    \ \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \"\
    , \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"\
    _\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\"\
    )\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n\
    \    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n  \
    \  str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str\
    \ = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str =\
    \ str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\"\
    \ \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \"\
    , \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"\
    _\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\"\
    )\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n\
    \    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n  \
    \  str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str\
    \ = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str =\
    \ str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\"\
    \ \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \"\
    , \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"\
    _\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\"\
    )\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n\
    \    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n  \
    \  str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str\
    \ = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str =\
    \ str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\"\
    \ \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \"\
    , \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"\
    _\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\"\
    )\n    str = str.replace(\" \", \"_\")\n    str = \nusing Test\n\n@testset begin\n\
    \ncandidate = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t\
    @test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"\
    Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"\
    -Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_ad5dqu7.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp_ad5dqu7.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp_ad5dqu7.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    fixed_text = text\n\
    \    \n    if text == \"\"\n        return fixed_text\n    \n    space_count =\
    \ count_spaces(text)\n    \n    if space_count > 1\n        fixed_text = replace(fixed_text,\
    \ \" \", \"_\")\n    end\n    \n    return fixed_text\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    count_spaces(text::String)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty\
    \  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\"\
    ) == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7a246rc1.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7a246rc1.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    words = split(text,\
    \ \" \")\n    \n    fixed_text = \"\"\n    \n    for word in words\n        fixed_text\
    \ += replace(word, \" \", \"_\")\n        \n    if length(fixed_text) > 2\n  \
    \      fixed_text = replace(fixed_text, \" \", \"-\")\n    end\n    \n    return\
    \ fixed_text\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    split_words(text::String)\n\
    using Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy84qftav.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpy84qftav.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    space_count = count_spaces(text)\n\
    \    \n    if space_count > 2\n        \n        space_count = space_count - 1\n\
    \        \n        space_text = \"\"\n        \n        for i in 1:space_count\n\
    \            space_text += \"-\"\n        end\n        \n        return replace(text,\
    \ \" \", \"_\") + space_text\n    end\n    \n    return replace(text, \" \", \"\
    _\")\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    count_spaces(text::String)\n\
    using Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1fub2bkr.jl:30\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1fub2bkr.jl:30\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\
    \t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif\
    \ \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ) == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\") == \"\
    Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzo5jp_34.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpzo5jp_34.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpzo5jp_34.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    space_count = text.count('\
    \ ')\n    \n    if space_count == 1\n        return text\n    \n    if space_count\
    \ > 2\n        return text.replace(\" \", \"_\")\n    \n    return text\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    remove_spaces(text::String)\n\
    using Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm_5_p7ad.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm_5_p7ad.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    words = split(text)\n\
    \    \n    fixed_text = \"\"\n    \n    for word in words\n        fixed_text\
    \ += replace(word, \"_\", \" \")\n    end\n    \n    return fixed_text\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    split_text(text::String)\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"Example\"\
    ) == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppnsnybu2.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppnsnybu2.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    replaced_text = text\n\
    \    \n    if text == \"\"\n        return replaced_text\n    \n    if text ==\
    \ \" \" \n        return replaced_text\n    \n    if text == \"  \"\n        return\
    \ replaced_text\n    \n    if text == \"  \"\n        return replaced_text\n \
    \   \n    if text == \" \" \n        return replaced_text\n    \n    if text ==\
    \ \"  \"\n        return replaced_text\n    \n    if text == \" \" \n        return\
    \ replaced_text\n    \n    if text == \"  \"\n        return replaced_text\n \
    \   \n    if text == \" \" \n        return replaced_text\n    \n    if text ==\
    \ \"  \"\n        return replaced_text\n    \n    if text == \" \" \n        return\
    \ replaced_text\n    \n    if text == \"  \"\n        return replaced_text\n \
    \   \n    if text == \" \" \n        return replaced_text\n    \n    if text ==\
    \ \"  \"\n        return replaced_text\n    \n    if text == \" \" \n        return\
    \ replaced_text\n    \n    if text == \"  \"\n        return replaced_text\n \
    \   \n    if text == \" \" \n        return replaced_text\n    \n    if text ==\
    \ \"  \"\n        return replaced_text\n    \n    if text == \" \" \n        return\
    \ replaced_text\n    \n    if text == \"  \"\n        return replaced_text\n \
    \   \n    if text == \" \" \n        return replaced_text\n    \n    if text ==\
    \ \"  \"\n        return replaced_text\n    \n    if text == \" \" \n        return\
    \ replaced_text\n    \n    if text == \"  \"\n        return replaced_text\n \
    \   \n    if text == \" \" \n        return replaced_text\n    \n    if text ==\
    \ \"  \"\n        return replaced_text\n    \n    if text == \" \" \n        return\
    \ replaced_text\n    \n    if text == \"  \"\n        return replaced_text\n \
    \   \n    if text == \" \" \n        return replaced_text\n    \n    if text ==\
    \ \"  \"\n        return replaced_text\n    \n    if text == \" \" \n        return\
    \ replaced_text\n    \n    if text == \"  \"\n        return replaced_text\n \
    \   \n    if text == \" \" \n        return replaced_text\n    \n    if text ==\
    \ \"  \"\n        return replaced_text\n    \n    if text == \" \" \n        return\
    \ replaced_text\n    \n    if text == \"  \"\n        return replaced_text\n \
    \   \n    if text == \" \" \n        return replaced_text\n    \n    if text ==\
    \ \"  \"\n        return replaced_text\n    \n    if text == \" \" \n        return\
    \ replaced_text\n    \n    if text == \"  \"\n        return replaced_text\n \
    \   \n    if text == \nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\
    \t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif\
    \ \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ) == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\") == \"\
    Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu6la0k3l.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpu6la0k3l.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    fix_spaces_re = Regex(\"\
    [ ]+\")\n    \n    fixed_text = fix_spaces_re.sub(\" \", text)\n    \n    if fixed_text\
    \ == text\n        fixed_text\n    else\n        fixed_text\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    split_words(text::String)\nusing Test\n\
    \n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"Example\") ==\
    \ \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\
    \t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxvknr29v.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxvknr29v.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    text_no_spaces = text\n\
    \    \n    if length(text) > 2 \n        \n        text_no_spaces = replace(text_no_spaces,\
    \ \" \", \"_\")\n        \n        text_no_spaces = replace(text_no_spaces, \"\
    \ \", \"_\")\n        \n        text_no_spaces = replace(text_no_spaces, \" \"\
    , \"_\")\n        \n        text_no_spaces = replace(text_no_spaces, \" \", \"\
    _\")\n        \n        text_no_spaces = replace(text_no_spaces, \" \", \"_\"\
    )\n        \n        text_no_spaces = replace(text_no_spaces, \" \", \"_\")\n\
    \        \n        text_no_spaces = replace(text_no_spaces, \" \", \"_\")\n  \
    \      \n        text_no_spaces = replace(text_no_spaces, \" \", \"_\")\n    \
    \    \n        text_no_spaces = replace(text_no_spaces, \" \", \"_\")\n      \
    \  \n        text_no_spaces = replace(text_no_spaces, \" \", \"_\")\n        \n\
    \        text_no_spaces = replace(text_no_spaces, \" \", \"_\")\n        \n  \
    \      text_no_spaces = replace(text_no_spaces, \" \", \"_\")\n        \n    \
    \    text_no_spaces = replace(text_no_spaces, \" \", \"_\")\n        \n      \
    \  text_no_spaces = replace(text_no_spaces, \" \", \"_\")\n        \n        text_no_spaces\
    \ = replace(text_no_spaces, \" \", \"_\")\n        \n        text_no_spaces =\
    \ replace(text_no_spaces, \" \", \"_\")\n        \n        text_no_spaces = replace(text_no_spaces,\
    \ \" \", \"_\")\n        \n        text_no_spaces = replace(text_no_spaces, \"\
    \ \", \"_\")\n        \n        text_no_spaces = replace(text_no_spaces, \" \"\
    , \"_\")\n        \n        text_no_spaces = replace(text_no_spaces, \" \", \"\
    _\")\n        \n        text_no_spaces = replace(text_no_spaces, \" \", \"_\"\
    )\n        \n        text_no_spaces = replace(text_no_spaces, \" \", \"_\")\n\
    \        \n        text_no_spaces = replace(text_no_spaces, \" \", \"_\")\n  \
    \      \n        text_no_spaces = replace(text_no_spaces, \" \", \"_\")\n    \
    \    \n        text_no_spaces = replace(text_no_spaces, \" \", \"_\")\n      \
    \  \n        text_no_spaces = replace(text_no_spaces, \" \", \"_\")\n        \n\
    \        text_no_spaces = replace(text_no_spaces, \" \", \"_\")\n        \n  \
    \      text_no_spaces = replace(text_no_spaces, \" \", \"_\")\n        \n    \
    \    text_no_spaces = replace(text_no_spaces, \" \", \"_\")\n        \n      \
    \  text_no_spaces = replace(text_no_spaces, \" \", \"_\")\n        \n        text_no_spaces\
    \ = replace(text_no_spaces, \" \", \"_\")\n        \n        text_no_spaces =\
    \ replace(text_no_spaces, \" \", \"_\")\n        \n        text_no_spaces = replace(text_no_spaces,\
    \ \" \", \"_\")\n\nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t\
    @test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif\
    \ \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ) == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\") == \"\
    Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg260q4_2.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg260q4_2.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    text_split = split(text,\
    \ \" \")\n    \n    text_split = [replace(text_split[i], \" \", \"_\") for i =\
    \ 1:length(text_split)]\n    \n    text_split = join(text_split, \" \")\n    \n\
    \    if length(text_split) > 2\n        text_split = split(text_split, \" \")\n\
    \        text_split = [replace(text_split[i], \" \", \"-\") for i = 1:length(text_split)]\n\
    \        text_split = join(text_split, \" \")\n    end\n    \n    return text_split\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    split_and_replace(text, split_chars,\
    \ replace_chars)\nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t\
    @test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif\
    \ \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ) == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\") == \"\
    Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcwhosv13.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcwhosv13.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    fixed = text\n   \
    \ \n    if fixed == \"\"\n        return fixed\n    \n    fixed = replace(fixed,\
    \ \"  \", \"_\")\n    \n    if fixed == \"\"\n        return fixed\n    \n   \
    \ fixed = replace(fixed, \"  \", \"_\")\n    \n    if fixed == \"\"\n        return\
    \ fixed\n    \n    fixed = replace(fixed, \"  \", \"_\")\n    \n    if fixed ==\
    \ \"\"\n        return fixed\n    \n    fixed = replace(fixed, \"  \", \"_\")\n\
    \    \n    if fixed == \"\"\n        return fixed\n    \n    fixed = replace(fixed,\
    \ \"  \", \"_\")\n    \n    if fixed == \"\"\n        return fixed\n    \n   \
    \ fixed = replace(fixed, \"  \", \"_\")\n    \n    if fixed == \"\"\n        return\
    \ fixed\n    \n    fixed = replace(fixed, \"  \", \"_\")\n    \n    if fixed ==\
    \ \"\"\n        return fixed\n    \n    fixed = replace(fixed, \"  \", \"_\")\n\
    \    \n    if fixed == \"\"\n        return fixed\n    \n    fixed = replace(fixed,\
    \ \"  \", \"_\")\n    \n    if fixed == \"\"\n        return fixed\n    \n   \
    \ fixed = replace(fixed, \"  \", \"_\")\n    \n    if fixed == \"\"\n        return\
    \ fixed\n    \n    fixed = replace(fixed, \"  \", \"_\")\n    \n    if fixed ==\
    \ \"\"\n        return fixed\n    \n    fixed = replace(fixed, \"  \", \"_\")\n\
    \    \n    if fixed == \"\"\n        return fixed\n    \n    fixed = replace(fixed,\
    \ \"  \", \"_\")\n    \n    if fixed == \"\"\n        return fixed\n    \n   \
    \ fixed = replace(fixed, \"  \", \"_\")\n    \n    if fixed == \"\"\n        return\
    \ fixed\n    \n    fixed = replace(fixed, \"  \", \"_\")\n    \n    if fixed ==\
    \ \"\"\n        return fixed\n    \n    fixed = replace(fixed, \"  \", \"_\")\n\
    \    \n    if fixed == \"\"\n        return fixed\n    \n    fixed = replace(fixed,\
    \ \"  \", \"_\")\n    \n    if fixed == \"\"\n        return fixed\n    \n   \
    \ fixed = replace(fixed, \"  \", \"_\")\n    \n    if fixed == \"\"\n        return\
    \ fixed\n    \n    fixed = replace(fixed, \"  \", \"_\")\n    \n    if fixed ==\
    \ \"\"\n        return fixed\n    \n    fixed = replace(fixed, \"  \", \"_\")\n\
    \    \n    if fixed == \"\"\n        return fixed\n    \n    fixed = replace(fixed,\
    \ \"  \", \"_\")\n    \n    if fixed == \"\"\n        return fixed\n    \n   \
    \ fixed = replace(fixed, \"  \", \"_\")\n    \n    if fixed == \"\"\n        return\
    \ fixed\n    \n    fixed = replace(fixed, \"  \", \"_\")\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\"\
    )\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"\
    Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"\
    -Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvrqussgm.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvrqussgm.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    words = split(text,\
    \ \" \")\n    \n    fixed = join(words, \" \")\n    \n    if fixed == \"\"\n \
    \       return \"\"\n    \n    if fixed.length < 2\n        return fixed\n   \
    \ \n    if fixed.length == 2 and fixed.head == \" \"\n        return fixed.tail\n\
    \    \n    if fixed.head == \" \"\n        return fixed.tail.tail\n    \n    if\
    \ fixed.head == \" \"\n        return fixed.tail.tail.tail\n    \n    return fixed\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    split_words(text::String)::Vector{String}\n\
    \    \n    Given a string text, split it into words and return a vector of words\n\
    \    \n    split_words(\"Example\") == \"Example\"\n    split_words(\"Example\
    \ 1\") == \"Example\"\n    split_words(\" Example 2\") == \"Example\"\n    split_words(\"\
    \ Example   3\") == \"Example\"\n    split_words(\"Example   4\") == \"Example\"\
    \n    split_words(\"Example   5\") == \"Example\"\n    split_words(\"Example \
    \  6\") == \"Example\"\n    split_words(\"Example   7\") == \"Example\"\n    split_words(\"\
    Example   8\") == \"Example\"\n    split_words(\"Example   9\") == \"Example\"\
    \n    split_words(\"Example  10\") == \"Example\"\n    split_words(\"Example \
    \ 11\") == \"Example\"\n    split_words(\"Example  12\") == \"Example\"\n    split_words(\"\
    Example  13\") == \"Example\"\n    split_words(\"Example  14\") == \"Example\"\
    \n    split_words(\"Example  15\") == \"Example\"\n    split_words(\"Example \
    \ 16\") == \"Example\"\n    split_words(\"Example  17\") == \"Example\"\n    split_words(\"\
    Example  18\") == \"Example\"\n    split_words(\"Example  19\") == \"Example\"\
    \n    split_words(\"Example  20\") == \"Example\"\n    split_words(\"Example \
    \ 21\") == \"Example\"\n    split_words(\"Example  22\") == \"Example\"\n    split_words(\"\
    Example  23\") == \"Example\"\n    split_words(\"Example  24\") == \"Example\"\
    \n    split_words(\"Example  25\") == \"Example\"\n    split_words(\"Example \
    \ 26\") == \"Example\"\n    split_words(\"Example  27\") == \"Example\"\n    split_words(\"\
    Example  28\") == \"Example\"\n    split_words(\"Example  29\") == \"Example\"\
    \n    split_words(\"Example  30\") == \"Example\"\n    split_words(\"Example \
    \ 31\") == \"Example\"\nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\
    \t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif\
    \ \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ) == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\") == \"\
    Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"fixed\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp1kc791cc.jl:23\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp1kc791cc.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    text_split = split(text,\
    \ \" \")\n    \n    text_split = [replace(text_split[i], \"_\") for i = 1:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i = 1:length(text_split)]\n\
    \    \n    text_split = join(text_split, \" \")\n    \n    text_split = replace(text_split,\
    \ \"  \", \"-\")\n    \n    return text_split\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    remove_spaces(text::String)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty\
    \  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\"\
    ) == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp36afhgvq.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp36afhgvq.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    str = text\n    str\
    \ = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str =\
    \ str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\"\
    \ \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \"\
    , \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"\
    _\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\"\
    )\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n\
    \    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n  \
    \  str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str\
    \ = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str =\
    \ str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\"\
    \ \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \"\
    , \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"\
    _\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\"\
    )\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n\
    \    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n  \
    \  str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str\
    \ = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str =\
    \ str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\"\
    \ \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \"\
    , \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"\
    _\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\"\
    )\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n\
    \    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n  \
    \  str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str\
    \ = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str =\
    \ str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\"\
    \ \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \"\
    , \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"\
    _\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\"\
    )\n    str = str.replace(\" \", \"_\")\n    str = \nusing Test\n\n@testset begin\n\
    \ncandidate = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t\
    @test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"\
    Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"\
    -Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbq4aog17.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpbq4aog17.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpbq4aog17.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    words = split(text)\n\
    \    \n    fixed_text = \"\"\n    \n    for word in words\n        fixed_text\
    \ += replace(word, \"_\", \" \")\n    end\n    \n    return fixed_text\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    split_words(text::String)::Array{String,1}\n\
    \    \n    Split text into an array of words. \n    \n    split_words(\"Example\"\
    ) == \"Example\"\n    split_words(\"Example 1\") == \"Example\"\n    split_words(\"\
    \ Example 2\") == \"Example\"\n    split_words(\" Example   3\") == \"Example\"\
    \n    split_words(\"Example   4\") == \"Example\"\n    split_words(\"Example \
    \  5\") == \"Example\"\n    split_words(\"Example   6\") == \"Example\"\n    split_words(\"\
    Example   7\") == \"Example\"\n    split_words(\"Example   8\") == \"Example\"\
    \n    split_words(\"Example   9\") == \"Example\"\n    split_words(\"Example \
    \ 10\") == \"Example\"\n    split_words(\"Example  11\") == \"Example\"\n    split_words(\"\
    Example  12\") == \"Example\"\n    split_words(\"Example  13\") == \"Example\"\
    \n    split_words(\"Example  14\") == \"Example\"\n    split_words(\"Example \
    \ 15\") == \"Example\"\n    split_words(\"Example  16\") == \"Example\"\n    split_words(\"\
    Example  17\") == \"Example\"\n    split_words(\"Example  18\") == \"Example\"\
    \n    split_words(\"Example  19\") == \"Example\"\n    split_words(\"Example \
    \ 20\") == \"Example\"\n    split_words(\"Example  21\") == \"Example\"\n    split_words(\"\
    Example  22\") == \"Example\"\n    split_words(\"Example  23\") == \"Example\"\
    \n    split_words(\"Example  24\") == \"Example\"\n    split_words(\"Example \
    \ 25\") == \"Example\"\n    split_words(\"Example  26\") == \"Example\"\n    split_words(\"\
    Example  27\") == \"Example\"\n    split_words(\"Example  28\") == \"Example\"\
    \n    split_words(\"Example  29\") == \"Example\"\n    split_words(\"Example \
    \ 30\") == \"Example\"\n    split_words(\"Example  31\") == \"Example\"\n    split_words(\"\
    Example  32\") == \"Example\"\n    split_words(\"Example  33\") == \"Example\"\
    \n    split_words(\"Example  34\") == \"Example\"\n    split_words(\"Example \
    \ 35\") == \"Example\"\n    split_words(\"Example  36\") == \"Example\"\n    \n\
    using Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9o543k0o.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9o543k0o.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    text_split = split(text,\
    \ \" \")\n    \n    text_split = [replace(text_split[i], \" \", \"_\") for i =\
    \ 1:length(text_split)]\n    \n    text_split = join(text_split, \"\")\n    \n\
    \    if length(text_split) > 2\n        text_split = replace(text_split, \" \"\
    , \"-\")\n    end\n    \n    return text_split\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    split_words(text::String)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty\
    \  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\"\
    ) == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmv7p9_2k.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmv7p9_2k.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    str = text\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = \nusing Test\n\n@testset begin\n\ncandidate\
    \ = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty\
    \  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\"\
    ) == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqcn4thek.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpqcn4thek.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpqcn4thek.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    # replace all spaces\
    \ with underscores\n    text = replace(text, \"  \", \"_\")\n    \n    # replace\
    \ consecutive spaces with -\n    text = replace(text, \" \", \"-\")\n    \n  \
    \  return text\nend\n</cell>\n<code language=julia-1.5>\n# test fix_spaces\nfix_spaces(\"\
    Example\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ text and replaces all consecutive spaces with -, \nand all consecutive underscores\
    \ with spaces.\nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxwivdp0u.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxwivdp0u.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    words = split(text,\
    \ \" \")\n    \n    fixed_text = \"\"\n    \n    for word in words\n        fixed_text\
    \ += word + \"_\"\n    end\n    \n    fixed_text = fixed_text[0..-2]\n    \n \
    \   if length(fixed_text) > 2\n        fixed_text = fixed_text[0..-2]\n      \
    \  fixed_text += \"-\"\n    end\n    \n    return fixed_text\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    split_string(text::String)\nusing Test\n\n\
    @testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"Example\") == \"\
    Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"\
    Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"\
    -Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid operator \"..-\" near column 31\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqpv8p5ab.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqpv8p5ab.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    text_split = split(text,\
    \ \" \")\n    \n    text_split = [replace(text_split[i], \"_\") for i = 1:length(text_split)]\n\
    \    \n    text_split = join(text_split, \" \")\n    \n    text_split = replace(text_split,\
    \ \" \", \"-\")\n    \n    return text_split\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    split_and_replace(text::String)::Array{String}\n    \n    Split text\
    \ into words and replace all spaces with underscores\n    \n    split_and_replace(\"\
    Example\") == \"Example\"\n    split_and_replace(\"Example 1\") == \"Example_1\"\
    \n    split_and_replace(\" Example 2\") == \"_Example_2\"\n    split_and_replace(\"\
    \ Example   3\") == \"_Example-3\"\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t\
    @test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"\
    Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"\
    -Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyrigao5t.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyrigao5t.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    text_split = split(text,\
    \ \" \")\n    \n    text_split = [replace(text_split[i], \" \", \"_\") for i in\
    \ 1:length(text_split)]\n    \n    text_split = [replace(text_split[i], \"   \"\
    , \"-\") for i in 1:length(text_split)]\n    \n    return join(text_split, \"\
    \ \")\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    split_and_replace(text::String)::Array{String}\n\
    \    \n    Split text into words, and replace all spaces with underscores\n  \
    \  \n    split_and_replace(\"Example\") == \"Example\"\n    split_and_replace(\"\
    Example 1\") == \"Example_1\"\n    split_and_replace(\" Example 2\") == \"_Example_2\"\
    \n    split_and_replace(\" Example   3\") == \"_Example-3\"\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"Example\"\
    ) == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl5expesy.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpl5expesy.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    # Replace all spaces\
    \ with underscores\n    text = replace(text, \" \", \"_\")\n    \n    # Replace\
    \ consecutive spaces with -\n    space_count = length(text)\n    if space_count\
    \ > 1\n        space_count = space_count - 1\n        text = replace(text, \"\
    \ \", \"-\")\n    end\n    \n    return text\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test fix_spaces\nfix_spaces(\"Example\")\n</cell>\n<code language=julia-1.5>\n\
    # Test fix_spaces\nfix_spaces(\"Example 1\")\n</cell>\n<code language=julia-1.5>\n\
    # Test fix_spaces\nfix_spaces(\"  Example 2\")\n</cell>\n<code language=julia-1.5>\n\
    # Test fix_spaces\nfix_spaces(\"  Example   3\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string text and returns the string text with all\
    \ the words capitalized. \ncapitalize(\"Example\") == \"Example\"\ncapitalize(\"\
    Example 1\") == \"Example 1\"\ncapitalize(\"Example 2\") == \"Example 2\"\ncapitalize(\"\
    Example 3\") == \"Example 3\"\ncapitalize(\"Example 4\") == \"Example 4\"\ncapitalize(\"\
    Example 5\") == \"Example 5\"\ncapitalize(\"Example 6\") == \"Example 6\"\ncapitalize(\"\
    Example 7\") == \"Example 7\"\ncapitalize(\"Example 8\") == \"Example 8\"\ncapitalize(\"\
    Example 9\") == \"Example 9\"\ncapitalize(\"Example 10\") == \"Example 10\"\n\
    capitalize(\"Example 11\") == \"Example 11\"\ncapitalize(\"Example 12\") == \"\
    Example 12\"\ncapitalize(\"Example 13\") == \"Example 13\"\ncapitalize(\"Example\
    \ 14\") == \"Example 14\"\ncapitalize(\"Example 15\") == \"Example 15\"\ncapitalize(\"\
    Example 16\") == \"Example 16\"\ncapitalize(\"Example 17\") == \"Example 17\"\n\
    capitalize(\"Example 18\") == \"Example 18\"\ncapitalize(\"Example 19\") == \"\
    Example 19\"\ncapitalize(\"Example 20\") == \"Example 20\"\ncapitalize(\"Example\
    \ 21\") == \"Example 21\"\ncapitalize(\"Example 22\") == \"Example 22\"\ncapitalize(\"\
    Example 23\") == \"Example 23\"\ncapitalize(\"Example 24\") == \"Example 24\"\n\
    capitalize(\"Example 25\") == \"Example 25\"\ncapitalize(\"Example 26\") == \"\
    Example 26\"\ncapitalize(\"Example 27\") == \"Example 27\"\ncapitalize(\"Example\
    \ 28\") == \"Example 28\"\ncapitalize(\"Example 29\") == \"Example 29\"\ncapitalize(\"\
    Example 30\") == \"Example 30\"\ncapitalize(\"Example 31\") == \"Example 31\"\n\
    capitalize(\"Example 32\") == \"Example 32\"\ncapitalize(\"Example 33\") == \"\
    Example 33\"\ncapitalize(\"Example 34\") == \"Example 34\"\ncapitalize(\"Example\
    \ \nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp029cha1g.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp029cha1g.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    words = split(text)\n\
    \    \n    fixed_text = \"\"\n    \n    for word in words\n        fixed_text\
    \ += replace(word, \"_\", \" \")\n    end\n    \n    return fixed_text\nend\n\
    using Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpclohh6lg.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"Example\") == \"Example\"\n  MethodError: no method\
    \ matching replace(::SubString{String}, ::String, ::String)\n  Closest candidates\
    \ are:\n    replace(::AbstractString, !Matched::Pair; count) at strings/util.jl:494\n\
    \    replace(::AbstractString, !Matched::Pair, !Matched::Pair) at set.jl:583\n\
    \    replace(::Any, !Matched::Pair...; count) at set.jl:526\n    ...\n  Stacktrace:\n\
    \   [1] fix_spaces(::String) at /tmp/tmpclohh6lg.jl:18\n   [2] top-level scope\
    \ at /tmp/tmpclohh6lg.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpclohh6lg.jl:27\n  \ntest set: Error During\
    \ Test at /tmp/tmpclohh6lg.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\"\n  MethodError: no method matching replace(::SubString{String},\
    \ ::String, ::String)\n  Closest candidates are:\n    replace(::AbstractString,\
    \ !Matched::Pair; count) at strings/util.jl:494\n    replace(::AbstractString,\
    \ !Matched::Pair, !Matched::Pair) at set.jl:583\n    replace(::Any, !Matched::Pair...;\
    \ count) at set.jl:526\n    ...\n  Stacktrace:\n   [1] fix_spaces(::String) at\
    \ /tmp/tmpclohh6lg.jl:18\n   [2] top-level scope at /tmp/tmpclohh6lg.jl:29\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpclohh6lg.jl:27\n  \ntest set: Error During\
    \ Test at /tmp/tmpclohh6lg.jl:30\n  Test threw exception\n  Expression: candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\n  MethodError:\
    \ no method matching replace(::SubString{String}, ::String, ::String)\n  Closest\
    \ candidates are:\n    replace(::AbstractString, !Matched::Pair; count) at strings/util.jl:494\n\
    \    replace(::AbstractString, !Matched::Pair, !Matched::Pair) at set.jl:583\n\
    \    replace(::Any, !Matched::Pair...; count) at set.jl:526\n    ...\n  Stacktrace:\n\
    \   [1] fix_spaces(::String) at /tmp/tmpclohh6lg.jl:18\n   [2] top-level scope\
    \ at /tmp/tmpclohh6lg.jl:30\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpclohh6lg.jl:27\n  \ntest set: Error During\
    \ Test at /tmp/tmpclohh6lg.jl:31\n  Test threw exception\n  Expression: candidate(\"\
    Exa   mple\") == \"Exa-mple\"\n  MethodError: no method matching replace(::SubString{String},\
    \ ::String, ::String)\n  Closest candidates are:\n    replace(::AbstractString,\
    \ !Matched::Pair; count) at strings/util.jl:494\n    replace(::AbstractString,\
    \ !Matched::Pair, !Matched::Pair) at set.jl:583\n    replace(::Any, !Matched::Pair...;\
    \ count) at set.jl:526\n    ...\n  Stacktrace:\n   [1] fix_spaces(::String) at\
    \ /tmp/tmpclohh6lg.jl:18\n   [2] top-level scope at /tmp/tmpclohh6lg.jl:31\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpclohh6lg.jl:27\n  \ntest set: Error During\
    \ Test at /tmp/tmpclohh6lg.jl:32\n  Test threw exception\n  Expression: candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\"\n  MethodError: no method matching\
    \ replace(::SubString{String}, ::String, ::String)\n  Closest candidates are:\n\
    \    replace(::AbstractString, !Matched::Pair; count) at strings/util.jl:494\n\
    \    replace(::AbstractString, !Matched::Pair, !Matched::Pair) at set.jl:583\n\
    \    replace(::Any, !Matched::Pair...; count) at set.jl:526\n    ...\n  Stacktrace:\n\
    \   [1] fix_spaces(::String) at /tmp/tmpclohh6lg.jl:18\n   [2] top-level scope\
    \ at /tmp/tmpclohh6lg.jl:32\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpclohh6lg.jl:27\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpclohh6lg.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    str = text\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = replace(str, \" \", \"_\")\n    str\
    \ = replace(str, \" \", \"_\")\n    str = \nusing Test\n\n@testset begin\n\ncandidate\
    \ = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty\
    \  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\"\
    ) == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpevxyfntz.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpevxyfntz.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpevxyfntz.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\
    \t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif\
    \ \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ) == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\") == \"\
    Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjmqpvwg_.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpjmqpvwg_.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpjmqpvwg_.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    \n    if text == \"\
    \"\n        return text\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty\
    \  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\"\
    ) == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpblf9gogi.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpblf9gogi.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    space_count = text.count(\"\
    \ \")\n    \n    if space_count > 2\n        \n        space_count = text.count(\"\
    \ \", 1, space_count-1)\n        \n        space_count = text.count(\" \", space_count+1,\
    \ space_count+2)\n        \n        text = text.replace(\" \", \"_\")\n      \
    \  \n        text = text.replace(\" \", \"_\")\n        \n        text = text.replace(\"\
    \ \", \"_\")\n        \n    end\n    \n    return text\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    remove_special_chars(text::String)\nusing Test\n\n@testset begin\n\
    \ncandidate = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t\
    @test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"\
    Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"\
    -Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8vn3zpsf.jl:31\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8vn3zpsf.jl:31\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    words = split(text,\
    \ \" \")\n    \n    fixed_text = \"\"\n    \n    for word in words\n        fixed_text\
    \ += replace(word, \"_\", \" \")\n    end\n    \n    return fixed_text\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    split_text(text::String)\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"Example\"\
    ) == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm7cvxt72.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm7cvxt72.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    fixed_text = text\n\
    \    \n    fixed_text = replace(fixed_text, \"  \", \"_\")\n    \n    if length(fixed_text)\
    \ > 2\n        fixed_text = replace(fixed_text, \" \", \"-\")\n    end\n    \n\
    \    return fixed_text\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    split_words(text::String)\n\
    using Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4ciigg5p.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4ciigg5p.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    space_count = count_spaces(text)\n\
    \    \n    if space_count > 2\n        space_count = space_count - 1\n       \
    \ \n        space_text = \"\"\n        \n        for i in 1:space_count\n    \
    \        space_text += \"-\"\n        end\n        \n        return space_text\
    \ * space_count\n    else\n        return text\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n\
    \    and if a string has more than 2 consecutive spaces, \n    then replace all\
    \ consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptef0pjtw.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptef0pjtw.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    text_no_spaces = text\n\
    \    \n    if text == \"\"\n        return \"\"\n    \n    if text == \" \"\n\
    \        return \"_\"\n    \n    if text == \"  \"\n        return \"_\"\n   \
    \ \n    if text == \" \" \n        return \"_\"\n    \n    if text == \"  \"\n\
    \        return \"_\"\n    \n    if text == \" \" \n        return \"_\"\n   \
    \ \n    if text == \"  \"\n        return \"_\"\n    \n    if text == \" \" \n\
    \        return \"_\"\n    \n    if text == \"  \"\n        return \"_\"\n   \
    \ \n    if text == \" \" \n        return \"_\"\n    \n    if text == \"  \"\n\
    \        return \"_\"\n    \n    if text == \" \" \n        return \"_\"\n   \
    \ \n    if text == \"  \"\n        return \"_\"\n    \n    if text == \" \" \n\
    \        return \"_\"\n    \n    if text == \"  \"\n        return \"_\"\n   \
    \ \n    if text == \" \" \n        return \"_\"\n    \n    if text == \"  \"\n\
    \        return \"_\"\n    \n    if text == \" \" \n        return \"_\"\n   \
    \ \n    if text == \"  \"\n        return \"_\"\n    \n    if text == \" \" \n\
    \        return \"_\"\n    \n    if text == \"  \"\n        return \"_\"\n   \
    \ \n    if text == \" \" \n        return \"_\"\n    \n    if text == \"  \"\n\
    \        return \"_\"\n    \n    if text == \" \" \n        return \"_\"\n   \
    \ \n    if text == \"  \"\n        return \"_\"\n    \n    if text == \" \" \n\
    \        return \"_\"\n    \n    if text == \"  \"\n        return \"_\"\n   \
    \ \n    if text == \" \" \n        return \"_\"\n    \n    if text == \"  \"\n\
    \        return \"_\"\n    \n    if text == \" \" \n        return \"_\"\n   \
    \ \n    if text == \"  \"\n        return \"_\"\n    \n    if text == \" \" \n\
    \        return \"_\"\n    \n    if text == \"  \"\n        return \"_\"\n   \
    \ \n    if text == \" \" \n        return \"_\"\n    \n    if text == \"  \"\n\
    \        return \"_\"\n    \n    if text == \" \" \n        return \"_\"\n   \
    \ \n    if text == \"  \"\n        return \"_\"\n    \n    if text == \" \" \n\
    \        return \"_\"\n    \n    if text == \"  \"\n        return \"_\"\n   \
    \ \n    if text == \" \" \n        return \"_\"\n    \n    if text == \"  \"\n\
    \        return \"_\"\n    \n    if text == \" \" \n        return \"_\"\n   \
    \ \n    if text == \"  \"\n        return \"_\"\n    \n    if text == \" \" \n\
    \        return \"_\"\nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\
    \t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif\
    \ \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ) == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\") == \"\
    Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuzwvh6pu.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpuzwvh6pu.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    fixed_text = text\n\
    \    \n    fixed_text = replace(fixed_text, \" \", \"_\")\n    \n    if length(fixed_text)\
    \ > 2 \n        fixed_text = replace(fixed_text, \" \", \"-\")\n    end\n    \n\
    \    return fixed_text\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    remove_spaces(text::String)\n\
    using Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp87gc_leu.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp87gc_leu.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    fixed_text = text\n\
    \    \n    if text == \"\"\n        return fixed_text\n    \n    fixed_text =\
    \ replace(fixed_text, \" \", \"_\")\n    \n    if length(fixed_text) > length(text)\n\
    \        fixed_text = replace(fixed_text, \" \", \"-\")\n    end\n    \n    return\
    \ fixed_text\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    remove_spaces(text::String)::String\n\
    using Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpeb0jo09a.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpeb0jo09a.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    replaced_text = \"\
    \"\n    \n    for character in text\n        if character == \" \"\n         \
    \   replaced_text += \"_\"\n        else\n            replaced_text += character\n\
    \        end\n    end\n    \n    if replaced_text == \"\"\n        return text\n\
    \    else\n        return replaced_text\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    remove_spaces(text::String)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty\
    \  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\"\
    ) == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_6af89k7.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_6af89k7.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    text_split = split(text,\
    \ \" \")\n    \n    text_split = [replace(text_split[i], \" \", \"_\") for i =\
    \ 1:length(text_split)]\n    \n    text_split = join(text_split, \" \")\n    \n\
    \    text_split = replace(text_split, \" -\", \"_\")\n    \n    return text_split\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    split_and_replace(text::String)::Vector{String}\n\
    \    \n    Given a string text, replace all spaces in it with underscores, \n\
    \    and if a string has more than 2 consecutive spaces, \n    then replace all\
    \ consecutive spaces with - \n    \n    split_and_replace(\"Example\") == \"Example\"\
    \n    split_and_replace(\"Example 1\") == \"Example_1\"\n    split_and_replace(\"\
    \ Example 2\") == \"_Example_2\"\n    split_and_replace(\" Example   3\") == \"\
    _Example-3\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\
    \t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif\
    \ \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ) == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\") == \"\
    Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi7lyb6_p.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpi7lyb6_p.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    text_split = split(text,\
    \ \" \")\n    \n    text_split = [replace(text_split[i], \" \", \"_\") for i =\
    \ 1:length(text_split)]\n    \n    text_split = [replace(text_split[i], \" \"\
    , \"-\") for i = 2:length(text_split)]\n    \n    return join(text_split, \" \"\
    )\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    split_and_strip(text::String)\n\
    using Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_d35u8oj.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_d35u8oj.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    text_no_spaces = replace(text,\
    \ \" \", \"_\")\n    \n    if length(text_no_spaces) > 2 \n        \n        text_no_spaces\
    \ = replace(text_no_spaces, \" \", \"_\")\n        \n    end\n    \n    return\
    \ text_no_spaces\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    remove_spaces(text::String)\n\
    using Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpblc16683.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpblc16683.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    text_no_spaces = replace(text,\
    \ \" \", \"_\")\n    \n    if length(text_no_spaces) > 2 \n        \n        text_no_spaces\
    \ = replace(text_no_spaces, \" \", \"-\")\n        \n    end\n    \n    return\
    \ text_no_spaces\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a\
    \ string text, replace all punctuation characters with spaces, \n    and if a\
    \ string has more than 2 consecutive punctuation characters, \n    then replace\
    \ all consecutive punctuation characters with - \n    \n    fix_punctuation(\"\
    Example\") == \"Example\"\n    fix_punctuation(\"Example 1\") == \"Example_1\"\
    \n    fix_punctuation(\" Example 2\") == \"_Example_2\"\n    fix_punctuation(\"\
    \ Example   3\") == \"_Example-3\"\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t\
    @test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"\
    Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"\
    -Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphon6eb41.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphon6eb41.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    text_split = split(text,\
    \ \" \")\n    \n    text_split = [replace(text_split[i], \" \", \"_\") for i =\
    \ 1:length(text_split)]\n    \n    text_split = join(text_split, \"\")\n    \n\
    \    if length(text_split) > 2\n        text_split = replace(text_split, \" \"\
    , \"-\")\n    end\n    \n    return text_split\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n\
    \    and if a string has more than 2 consecutive spaces, \n    then replace all\
    \ consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnu4j_k0a.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnu4j_k0a.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    text_no_spaces = replace(text,\
    \ \" \", \"_\")\n    \n    if length(text_no_spaces) > 2 \n        \n        text_no_spaces\
    \ = replace(text_no_spaces, \" \", \"-\")\n        \n    end\n    \n    return\
    \ text_no_spaces\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    split_words(text::String)\n\
    using Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpotv_cfij.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpotv_cfij.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    fixed_text = text\n\
    \    \n    if text == \"\"\n        return text\n    \n    if text == \" \" \n\
    \        fixed_text = fixed_text.replace(\" \", \"_\")\n        return fixed_text\n\
    \    \n    if text == \" \"\n        fixed_text = fixed_text.replace(\" \", \"\
    -\")\n        return fixed_text\n    \n    if text == \" \"\n        fixed_text\
    \ = fixed_text.replace(\" \", \"-\")\n        return fixed_text\n    \n    if\
    \ text == \" \"\n        fixed_text = fixed_text.replace(\" \", \"-\")\n     \
    \   return fixed_text\n    \n    if text == \" \"\n        fixed_text = fixed_text.replace(\"\
    \ \", \"-\")\n        return fixed_text\n    \n    if text == \" \"\n        fixed_text\
    \ = fixed_text.replace(\" \", \"-\")\n        return fixed_text\n    \n    if\
    \ text == \" \"\n        fixed_text = fixed_text.replace(\" \", \"-\")\n     \
    \   return fixed_text\n    \n    if text == \" \"\n        fixed_text = fixed_text.replace(\"\
    \ \", \"-\")\n        return fixed_text\n    \n    if text == \" \"\n        fixed_text\
    \ = fixed_text.replace(\" \", \"-\")\n        return fixed_text\n    \n    if\
    \ text == \" \"\n        fixed_text = fixed_text.replace(\" \", \"-\")\n     \
    \   return fixed_text\n    \n    if text == \" \"\n        fixed_text = fixed_text.replace(\"\
    \ \", \"-\")\n        return fixed_text\n    \n    if text == \" \"\n        fixed_text\
    \ = fixed_text.replace(\" \", \"-\")\n        return fixed_text\n    \n    if\
    \ text == \" \"\n        fixed_text = fixed_text.replace(\" \", \"-\")\n     \
    \   return fixed_text\n    \n    if text == \" \"\n        fixed_text = fixed_text.replace(\"\
    \ \", \"-\")\n        return fixed_text\n    \n    if text == \" \"\n        fixed_text\
    \ = fixed_text.replace(\" \", \"-\")\n        return fixed_text\n    \n    if\
    \ text == \" \"\n        fixed_text = fixed_text.replace(\" \", \"-\")\n     \
    \   return fixed_text\n    \n    if text == \" \"\n        fixed_text = fixed_text.replace(\"\
    \ \", \"-\")\n        return fixed_text\n    \n    if text == \" \"\n        fixed_text\
    \ = fixed_text.replace(\" \", \"-\")\n        return fixed_text\n    \n    if\
    \ text == \" \"\n        fixed_text = fixed_text.replace(\" \", \"-\")\n     \
    \   return fixed_text\n    \n    if text == \" \"\n        fixed_text = fixed_text.replace(\"\
    \ \", \"-\")\n        return fixed_text\n    \n    if text == \" \"\n        fixed_text\
    \ = fixed_text.replace(\" \", \"-\")\n        return fixed_text\n    \n    if\
    \ text == \" \"\n        fixed_text = fixed_text.replace(\" \", \"-\")\n     \
    \   return fixed_text\n    \n    if text == \" \"\n        fixed_text = fixed_text.replace(\"\
    \ \", \"-\")\n        return fixed_text\n    \n    if text == \" \"\n        fixed_text\
    \ = fixed_\nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprcvh25rv.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprcvh25rv.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    fixed_text = text\n\
    \    \n    if text == \"\"\n        return fixed_text\n    \n    spaces_count\
    \ = count_spaces(text)\n    \n    if spaces_count > 2\n        fixed_text = replace_consecutive_spaces(fixed_text)\n\
    \    end\n    \n    return fixed_text\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty\
    \  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\"\
    ) == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptejqj3zq.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmptejqj3zq.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmptejqj3zq.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    words = split(text,\
    \ \" \")\n    \n    fixed = join(words, \" \")\n    \n    if fixed == text\n \
    \       return text\n    \n    if length(fixed) == length(text)\n        return\
    \ fixed\n    \n    if length(fixed) > length(text)\n        return fixed\n   \
    \ \n    fixed = replace(fixed, \" \", \"_\")\n    \n    if fixed == text\n   \
    \     return text\n    \n    if length(fixed) == length(text)\n        return\
    \ fixed\n    \n    if length(fixed) > length(text)\n        return fixed\n   \
    \ \n    return fixed\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    split_and_strip(text::String)\n\
    using Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp07pyd4q_.jl:39\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp07pyd4q_.jl:39\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    if text == \"\"\n\
    \        return text\n    \n    words = split(text)\n    \n    fixed_text = \"\
    \"\n    \n    for word in words\n        fixed_text += replace(word, \"_\", \"\
    \ \")\n        \n    return fixed_text\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n\
    \    and if a string has more than 2 consecutive spaces, \n    then replace all\
    \ consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkub3dx8t.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkub3dx8t.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    fixed_text = text\n\
    \    \n    if text == \"\"\n        return \"\"\n    \n    if text == \" \" \n\
    \        return fixed_text\n    \n    if text == \"  \"\n        return fixed_text\n\
    \    \n    if text == \"  \"\n        return fixed_text\n    \n    if text ==\
    \ \" \" \n        return fixed_text\n    \n    if text == \"  \"\n        return\
    \ fixed_text\n    \n    if text == \" \" \n        return fixed_text\n    \n \
    \   if text == \"  \"\n        return fixed_text\n    \n    if text == \" \" \n\
    \        return fixed_text\n    \n    if text == \"  \"\n        return fixed_text\n\
    \    \n    if text == \" \" \n        return fixed_text\n    \n    if text ==\
    \ \"  \"\n        return fixed_text\n    \n    if text == \" \" \n        return\
    \ fixed_text\n    \n    if text == \"  \"\n        return fixed_text\n    \n \
    \   if text == \" \" \n        return fixed_text\n    \n    if text == \"  \"\n\
    \        return fixed_text\n    \n    if text == \" \" \n        return fixed_text\n\
    \    \n    if text == \"  \"\n        return fixed_text\n    \n    if text ==\
    \ \" \" \n        return fixed_text\n    \n    if text == \"  \"\n        return\
    \ fixed_text\n    \n    if text == \" \" \n        return fixed_text\n    \n \
    \   if text == \"  \"\n        return fixed_text\n    \n    if text == \" \" \n\
    \        return fixed_text\n    \n    if text == \"  \"\n        return fixed_text\n\
    \    \n    if text == \" \" \n        return fixed_text\n    \n    if text ==\
    \ \"  \"\n        return fixed_text\n    \n    if text == \" \" \n        return\
    \ fixed_text\n    \n    if text == \"  \"\n        return fixed_text\n    \n \
    \   if text == \" \" \n        return fixed_text\n    \n    if text == \"  \"\n\
    \        return fixed_text\n    \n    if text == \" \" \n        return fixed_text\n\
    \    \n    if text == \"  \"\n        return fixed_text\n    \n    if text ==\
    \ \" \" \n        return fixed_text\n    \n    if text == \"  \"\n        return\
    \ fixed_text\n    \n    if text == \" \" \n        return fixed_text\n    \n \
    \   if text == \"  \"\n        return fixed_text\n    \n    if text == \" \" \n\
    \        return fixed_text\n    \n    if text == \"  \"\n        return fixed_text\n\
    \    \n    if text == \" \" \n        return fixed_text\n    \n    if text ==\
    \ \"  \"\n        return fixed_text\n    \n    if text == \" \" \n        return\
    \ fixed_text\n    \n    if text == \"  \"\n        return fixed_text\n    \n \
    \   if text == \" \" \n        return fixed_text\n    \n    if text == \"  \"\n\
    \        return fixed_text\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty\
    \  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\"\
    ) == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3f0ko4s4.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3f0ko4s4.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    space_count = text.count(\"\
    \  \")\n    \n    if space_count > 1\n        \n        space_count_2 = text.count(\"\
    \  \")\n        \n        if space_count_2 == 1\n            \n            text\
    \ = text.replace(\"  \",\"_\")\n            \n        else\n            \n   \
    \         text = text.replace(\"  \",\"-\")\n            \n    end\n    \n   \
    \ return text\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    remove_spaces(text::String)\n\
    using Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfy_89c2o.jl:31\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfy_89c2o.jl:31\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    text_no_spaces = replace(text,\
    \ \" \", \"_\")\n    \n    if length(text_no_spaces) > 2 \n        \n        text_no_spaces\
    \ = replace(text_no_spaces, \" \", \"-\")\n        \n    end\n    \n    return\
    \ text_no_spaces\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    remove_special_characters(text::String)::String\n\
    using Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpw3l85vpl.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpw3l85vpl.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    words = split(text,\
    \ \" \")\n    \n    fixed_text = \"\"\n    \n    for word in words\n        fixed_text\
    \ += replace(word, \"_\", \" \")\n    end\n    \n    return fixed_text\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string text, replace all\
    \ spaces in it with underscores, \n    and if a string has more than 2 consecutive\
    \ spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"\
    Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n  \
    \  fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\"\
    ) == \"_Example-3\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\
    \t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif\
    \ \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ) == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\") == \"\
    Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpemyd6koz.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpemyd6koz.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    # Replace all spaces\
    \ with underscores\n    text = replace(text, \" \", \"_\")\n    \n    # Replace\
    \ consecutive spaces with -\n    spaces = findall(text, \" \")\n    if length(spaces)\
    \ > 1\n        spaces = replace(spaces, \"-\", \"_\")\n        text = join(spaces,\
    \ \" \")\n    end\n    \n    return text\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    remove_special_chars(text::String)\nusing Test\n\n@testset begin\n\
    \ncandidate = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t\
    @test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"\
    Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"\
    -Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_rl8qq80.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_rl8qq80.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    space_count = text.count(\"\
    \ \")\n    if space_count > 2\n        space_count = text.count(\" \", 1, space_count\
    \ - 1)\n        \n        space_count = text.count(\" \", space_count + 1, space_count\
    \ + 1)\n        \n        text = text.replace(\" \", \"_\")\n        text = text.replace(\"\
    \ \", \"_\")\n        text = text.replace(\" \", \"_\")\n        text = text.replace(\"\
    \ \", \"_\")\n        text = text.replace(\" \", \"_\")\n        text = text.replace(\"\
    \ \", \"_\")\n        text = text.replace(\" \", \"_\")\n        text = text.replace(\"\
    \ \", \"_\")\n        text = text.replace(\" \", \"_\")\n        text = text.replace(\"\
    \ \", \"_\")\n        text = text.replace(\" \", \"_\")\n        text = text.replace(\"\
    \ \", \"_\")\n        text = text.replace(\" \", \"_\")\n        text = text.replace(\"\
    \ \", \"_\")\n        text = text.replace(\" \", \"_\")\n        text = text.replace(\"\
    \ \", \"_\")\n        text = text.replace(\" \", \"_\")\n        text = text.replace(\"\
    \ \", \"_\")\n        text = text.replace(\" \", \"_\")\n        text = text.replace(\"\
    \ \", \"_\")\n        text = text.replace(\" \", \"_\")\n        text = text.replace(\"\
    \ \", \"_\")\n        text = text.replace(\" \", \"_\")\n        text = text.replace(\"\
    \ \", \"_\")\n        text = text.replace(\" \", \"_\")\n        text = text.replace(\"\
    \ \", \"_\")\n        text = text.replace(\" \", \"_\")\n        text = text.replace(\"\
    \ \", \"_\")\n        text = text.replace(\" \", \"_\")\n        text = text.replace(\"\
    \ \", \"_\")\n        text = text.replace(\" \", \"_\")\n        text = text.replace(\"\
    \ \", \"_\")\n        text = text.replace(\" \", \"_\")\n        text = text.replace(\"\
    \ \", \"_\")\n        text = text.replace(\" \", \"_\")\n        text = text.replace(\"\
    \ \", \"_\")\n        text = text.replace(\" \", \"_\")\n        text = text.replace(\"\
    \ \", \"_\")\n        text = text.replace(\" \", \"_\")\n        text = text.replace(\"\
    \ \", \"_\")\n        text = text.replace(\" \", \"_\")\n        text = text.replace(\"\
    \ \", \"_\")\n        text = text.replace(\" \", \"_\")\n        text = text.replace(\"\
    \ \", \"_\")\n        text = text.replace(\" \", \"_\")\n        text = text.replace(\"\
    \ \", \"_\")\n        text = text.replace(\" \", \"_\")\n        text = text.replace(\"\
    \ \", \"_\")\n        text = text.replace(\" \", \"_\")\n        text = text.replace(\"\
    \ \", \"_\")\n        text = text.replace(\" \", \"_\")\n        text = text.replace(\"\
    \ \", \"_\")\n        text = text.replace(\" \", \"_\")\n        text = text.replace(\"\
    \ \", \"_\")\n        text = text.replace(\" \", \"_\")\n        text = text.replace(\"\
    \ \", \"_\")\n        text = text.replace(\" \", \"_\")\n        text = text.replace(\"\
    \ \", \"_\")\n        text = text.replace(\" \", \"_\")\n        text = text.replace(\"\
    \ \", \"_\")\n        text = text.replace(\" \", \"_\")\n        text = text.replace(\"\
    \ \", \"_\")\n        text = text.replace(\" \", \"_\")\n        text = text.replace(\"\
    \ \", \"_\")\n        text = text.replace(\" \", \"_\")\n        text = text.replace(\"\
    \ \", \"_\")\n        text = text.replace(\" \nusing Test\n\n@testset begin\n\n\
    candidate = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty\
    \  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\"\
    ) == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsgmh4z9f.jl:91\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsgmh4z9f.jl:91\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    text_no_spaces = text\n\
    \    \n    if text == \"\"\n        return text\n    \n    if text == \" \" \n\
    \        return \"_\"\n    \n    if text == \" \"\n        return \"-\"\n    \n\
    \    if text == \" \"\n        return \"-\"\n    \n    if text == \" \"\n    \
    \    return \"-\"\n    \n    if text == \" \"\n        return \"-\"\n    \n  \
    \  if text == \" \"\n        return \"-\"\n    \n    if text == \" \"\n      \
    \  return \"-\"\n    \n    if text == \" \"\n        return \"-\"\n    \n    if\
    \ text == \" \"\n        return \"-\"\n    \n    if text == \" \"\n        return\
    \ \"-\"\n    \n    if text == \" \"\n        return \"-\"\n    \n    if text ==\
    \ \" \"\n        return \"-\"\n    \n    if text == \" \"\n        return \"-\"\
    \n    \n    if text == \" \"\n        return \"-\"\n    \n    if text == \" \"\
    \n        return \"-\"\n    \n    if text == \" \"\n        return \"-\"\n   \
    \ \n    if text == \" \"\n        return \"-\"\n    \n    if text == \" \"\n \
    \       return \"-\"\n    \n    if text == \" \"\n        return \"-\"\n    \n\
    \    if text == \" \"\n        return \"-\"\n    \n    if text == \" \"\n    \
    \    return \"-\"\n    \n    if text == \" \"\n        return \"-\"\n    \n  \
    \  if text == \" \"\n        return \"-\"\n    \n    if text == \" \"\n      \
    \  return \"-\"\n    \n    if text == \" \"\n        return \"-\"\n    \n    if\
    \ text == \" \"\n        return \"-\"\n    \n    if text == \" \"\n        return\
    \ \"-\"\n    \n    if text == \" \"\n        return \"-\"\n    \n    if text ==\
    \ \" \"\n        return \"-\"\n    \n    if text == \" \"\n        return \"-\"\
    \n    \n    if text == \" \"\n        return \"-\"\n    \n    if text == \" \"\
    \n        return \"-\"\n    \n    if text == \" \"\n        return \"-\"\n   \
    \ \n    if text == \" \"\n        return \"-\"\n    \n    if text == \" \"\n \
    \       return \"-\"\n    \n    if text == \" \"\n        return \"-\"\n    \n\
    \    if text == \" \"\n        return \"-\"\n    \n    if text == \" \"\n    \
    \    return \"-\"\n    \n    if text == \" \"\n        return \"-\"\n    \n  \
    \  if text == \" \"\n        return \"-\"\n    \n    if text == \" \"\n      \
    \  return \"-\"\n    \n    if text == \" \"\n        return \"-\"\n    \n    if\
    \ text == \" \"\n        return \"-\"\n    \n    if text == \" \"\n        return\
    \ \"-\"\n    \n    if text == \" \"\n        return \"-\"\n    \n    if text ==\
    \ \" \"\n        return \"-\"\n    \n    if text == \" \"\n        return \"-\"\
    \n    \n    if text == \" \"\n        return \"-\"\n    \n    if text == \" \"\
    \n        return \"-\"\n    \nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\
    \t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif\
    \ \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ) == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\") == \"\
    Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdwf968zt.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdwf968zt.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    fixed_text = text\n\
    \    \n    if text == \"\"\n        return text\n    \n    spaces_count = count_spaces(text)\n\
    \    \n    if spaces_count > 2\n        fixed_text = replace_consecutive_spaces(fixed_text)\n\
    \    end\n    \n    return fixed_text\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty\
    \  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\"\
    ) == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprliqxf6f.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmprliqxf6f.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmprliqxf6f.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    fixed_text = text\n\
    \    \n    if text == \"\"\n        return text\n    \n    if text == \" \" \n\
    \        fixed_text = fixed_text.replace(\" \", \"_\")\n        return fixed_text\n\
    \    \n    if text == \" \" \n        fixed_text = fixed_text.replace(\" \", \"\
    _\")\n        return fixed_text\n    \n    if text == \" \" \n        fixed_text\
    \ = fixed_text.replace(\" \", \"_\")\n        return fixed_text\n    \n    if\
    \ text == \" \" \n        fixed_text = fixed_text.replace(\" \", \"_\")\n    \
    \    return fixed_text\n    \n    if text == \" \" \n        fixed_text = fixed_text.replace(\"\
    \ \", \"_\")\n        return fixed_text\n    \n    if text == \" \" \n       \
    \ fixed_text = fixed_text.replace(\" \", \"_\")\n        return fixed_text\n \
    \   \n    if text == \" \" \n        fixed_text = fixed_text.replace(\" \", \"\
    _\")\n        return fixed_text\n    \n    if text == \" \" \n        fixed_text\
    \ = fixed_text.replace(\" \", \"_\")\n        return fixed_text\n    \n    if\
    \ text == \" \" \n        fixed_text = fixed_text.replace(\" \", \"_\")\n    \
    \    return fixed_text\n    \n    if text == \" \" \n        fixed_text = fixed_text.replace(\"\
    \ \", \"_\")\n        return fixed_text\n    \n    if text == \" \" \n       \
    \ fixed_text = fixed_text.replace(\" \", \"_\")\n        return fixed_text\n \
    \   \n    if text == \" \" \n        fixed_text = fixed_text.replace(\" \", \"\
    _\")\n        return fixed_text\n    \n    if text == \" \" \n        fixed_text\
    \ = fixed_text.replace(\" \", \"_\")\n        return fixed_text\n    \n    if\
    \ text == \" \" \n        fixed_text = fixed_text.replace(\" \", \"_\")\n    \
    \    return fixed_text\n    \n    if text == \" \" \n        fixed_text = fixed_text.replace(\"\
    \ \", \"_\")\n        return fixed_text\n    \n    if text == \" \" \n       \
    \ fixed_text = fixed_text.replace(\" \", \"_\")\n        return fixed_text\n \
    \   \n    if text == \" \" \n        fixed_text = fixed_text.replace(\" \", \"\
    _\")\n        return fixed_text\n    \n    if text == \" \" \n        fixed_text\
    \ = fixed_text.replace(\" \", \"_\")\n        return fixed_text\n    \n    if\
    \ text == \" \" \n        fixed_text = fixed_text.replace(\" \", \"_\")\n    \
    \    return fixed_text\n    \n    if text == \" \" \n        fixed_text = fixed_text.replace(\"\
    \ \", \"_\")\n        return fixed_text\n    \n    if text == \" \" \n       \
    \ fixed_text = fixed_text.replace(\" \", \"_\")\n        return fixed_text\n \
    \   \n    if text == \" \" \n        fixed_text = fixed_text.replace(\" \", \"\
    _\")\n        return fixed_text\n    \n    if text == \" \" \n        fixed_text\
    \ = \nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbwe9y81p.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbwe9y81p.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    replaced_text = text\n\
    \    \n    if text == \"\"\n        return replaced_text\n    ends_with_space\
    \ = (text == \" \")\n    \n    if ends_with_space\n        replaced_text = replaced_text[1:end]\n\
    \    ends_with_space = (text == \" \")\n    \n    if ends_with_space\n       \
    \ replaced_text = replaced_text[1:end]\n    ends_with_space = (text == \" \")\n\
    \    \n    if ends_with_space\n        replaced_text = replaced_text[1:end]\n\
    \    ends_with_space = (text == \" \")\n    \n    if ends_with_space\n       \
    \ replaced_text = replaced_text[1:end]\n    ends_with_space = (text == \" \")\n\
    \    \n    if ends_with_space\n        replaced_text = replaced_text[1:end]\n\
    \    ends_with_space = (text == \" \")\n    \n    if ends_with_space\n       \
    \ replaced_text = replaced_text[1:end]\n    ends_with_space = (text == \" \")\n\
    \    \n    if ends_with_space\n        replaced_text = replaced_text[1:end]\n\
    \    ends_with_space = (text == \" \")\n    \n    if ends_with_space\n       \
    \ replaced_text = replaced_text[1:end]\n    ends_with_space = (text == \" \")\n\
    \    \n    if ends_with_space\n        replaced_text = replaced_text[1:end]\n\
    \    ends_with_space = (text == \" \")\n    \n    if ends_with_space\n       \
    \ replaced_text = replaced_text[1:end]\n    ends_with_space = (text == \" \")\n\
    \    \n    if ends_with_space\n        replaced_text = replaced_text[1:end]\n\
    \    ends_with_space = (text == \" \")\n    \n    if ends_with_space\n       \
    \ replaced_text = replaced_text[1:end]\n    ends_with_space = (text == \" \")\n\
    \    \n    if ends_with_space\n        replaced_text = replaced_text[1:end]\n\
    \    ends_with_space = (text == \" \")\n    \n    if ends_with_space\n       \
    \ replaced_text = replaced_text[1:end]\n    ends_with_space = (text == \" \")\n\
    \    \n    if ends_with_space\n        replaced_text = replaced_text[1:end]\n\
    \    ends_with_space = (text == \" \")\n    \n    if ends_with_space\n       \
    \ replaced_text = replaced_text[1:end]\n    ends_with_space = (text == \" \")\n\
    \    \n    if ends_with_space\n        replaced_text = replaced_text[1:end]\n\
    \    ends_with_space = (text == \" \")\n    \n    if ends_with_space\n       \
    \ replaced_text = replaced_text[1:end]\n    ends_with_space = (text == \" \")\n\
    \    \n    if ends_with_space\n        replaced_text = replaced_text[1:end]\n\
    \    ends_with_space = (text == \" \")\n    \n    if ends_with_space\n       \
    \ replace\nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpueodo104.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpueodo104.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    str = text\n    str\
    \ = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str =\
    \ str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\"\
    \ \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \"\
    , \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"\
    _\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\"\
    )\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n\
    \    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n  \
    \  str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str\
    \ = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str =\
    \ str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\"\
    \ \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \"\
    , \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"\
    _\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\"\
    )\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n\
    \    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n  \
    \  str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str\
    \ = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str =\
    \ str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\"\
    \ \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \"\
    , \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"\
    _\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\"\
    )\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n\
    \    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n  \
    \  str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str\
    \ = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str =\
    \ str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\"\
    \ \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \"\
    , \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"\
    _\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\"\
    )\n    str = str.replace(\" \", \"_\")\n    str = \nusing Test\n\n@testset begin\n\
    \ncandidate = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t\
    @test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"\
    Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"\
    -Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7ndzyxy.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpu7ndzyxy.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpu7ndzyxy.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    fixed_text = text\n\
    \    \n    if text == \"\"\n        return text\n    \n    space_count = count_spaces(text)\n\
    \    \n    if space_count > 1\n        fixed_text = replace_spaces(text)\n   \
    \ end\n    \n    return fixed_text\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty\
    \  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\"\
    ) == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzxemffbp.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpzxemffbp.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpzxemffbp.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    space_count = count_spaces(text)\n\
    \    \n    if space_count > 2\n        space_count = space_count - 1\n       \
    \ \n        space_count = space_count - 1\n        \n        space_count = space_count\
    \ - 1\n        \n        space_count = space_count - 1\n        \n        space_count\
    \ = space_count - 1\n        \n        space_count = space_count - 1\n       \
    \ \n        space_count = space_count - 1\n        \n        space_count = space_count\
    \ - 1\n        \n        space_count = space_count - 1\n        \n        space_count\
    \ = space_count - 1\n        \n        space_count = space_count - 1\n       \
    \ \n        space_count = space_count - 1\n        \n        space_count = space_count\
    \ - 1\n        \n        space_count = space_count - 1\n        \n        space_count\
    \ = space_count - 1\n        \n        space_count = space_count - 1\n       \
    \ \n        space_count = space_count - 1\n        \n        space_count = space_count\
    \ - 1\n        \n        space_count = space_count - 1\n        \n        space_count\
    \ = space_count - 1\n        \n        space_count = space_count - 1\n       \
    \ \n        space_count = space_count - 1\n        \n        space_count = space_count\
    \ - 1\n        \n        space_count = space_count - 1\n        \n        space_count\
    \ = space_count - 1\n        \n        space_count = space_count - 1\n       \
    \ \n        space_count = space_count - 1\n        \n        space_count = space_count\
    \ - 1\n        \n        space_count = space_count - 1\n        \n        space_count\
    \ = space_count - 1\n        \n        space_count = space_count - 1\n       \
    \ \n        space_count = space_count - 1\n        \n        space_count = space_count\
    \ - 1\n        \n        space_count = space_count - 1\n        \n        space_count\
    \ = space_count - 1\n        \n        space_count = space_count - 1\n       \
    \ \n        space_count = space_count - 1\n        \n        space_count = space_count\
    \ - 1\n        \n        space_count = space_count - 1\n        \n        space_count\
    \ = space_count - 1\n        \n        space_count = space_count - 1\n       \
    \ \n        space_count = space_count - 1\n        \n        space_count = space_count\
    \ - 1\n        \n        space_count = space_count - 1\n        \n        space_count\
    \ = space_count - 1\n        \n        space_count = space_count - 1\n       \
    \ \n        space_count = space_count - 1\n        \n        space_count = space_count\
    \ - 1\n        \n        space_count = space_count - 1\n        \n        space_count\
    \ = space_count - 1\n        \n        space_count = space_count - 1\n       \
    \ \n        space_count = space_count - 1\n        \n        space_count = space_count\
    \ - 1\n        \n        space_count = space_count - 1\n        \n        space_count\
    \ = space_count - 1\n        \nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\
    \t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif\
    \ \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ) == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\") == \"\
    Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2pw9y6bw.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2pw9y6bw.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    # Replace all spaces\
    \ with underscores\n    fixed_text = replace(text, \" \", \"_\")\n    \n    #\
    \ Replace consecutive spaces with -\n    fixed_text = replace(fixed_text, \" \
    \ \", \"-\")\n    \n    return fixed_text\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test your code\n@test fix_spaces(\"Example\") == fix_spaces(\"Example\")\n@test\
    \ fix_spaces(\"Example 1\") == fix_spaces(\"Example_1\")\n@test fix_spaces(\"\
    \  Example 2\") == fix_spaces(\"_Example_2\")\n@test fix_spaces(\"  Example  \
    \ 3\") == fix_spaces(\"_Example-3\")\n</cell>\n<text>\nImplement fix_punctuation\n\
    using Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpasuk5ldo.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpasuk5ldo.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    text_no_spaces = replace(replace(replace(text,\
    \ \" \", \"_\"), \"  \", \"_\"), \"  \", \"_\")\n    \n    if length(text_no_spaces)\
    \ > length(text)\n        \n        text_no_spaces = replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(\n\
    using Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa_3tgvwz.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpa_3tgvwz.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\
    \t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif\
    \ \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ) == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\") == \"\
    Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdv_megtp.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpdv_megtp.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpdv_megtp.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    str = text\n    \n\
    \    str = replace(str, \" \", \"_\")\n    \n    str = replace(str, \" \", \"\
    _\")\n    \n    str = replace(str, \" \", \"_\")\n    \n    str = replace(str,\
    \ \" \", \"_\")\n    \n    str = replace(str, \" \", \"_\")\n    \n    str = replace(str,\
    \ \" \", \"_\")\n    \n    str = replace(str, \" \", \"_\")\n    \n    str = replace(str,\
    \ \" \", \"_\")\n    \n    str = replace(str, \" \", \"_\")\n    \n    str = replace(str,\
    \ \" \", \"_\")\n    \n    str = replace(str, \" \", \"_\")\n    \n    str = replace(str,\
    \ \" \", \"_\")\n    \n    str = replace(str, \" \", \"_\")\n    \n    str = replace(str,\
    \ \" \", \"_\")\n    \n    str = replace(str, \" \", \"_\")\n    \n    str = replace(str,\
    \ \" \", \"_\")\n    \n    str = replace(str, \" \", \"_\")\n    \n    str = replace(str,\
    \ \" \", \"_\")\n    \n    str = replace(str, \" \", \"_\")\n    \n    str = replace(str,\
    \ \" \", \"_\")\n    \n    str = replace(str, \" \", \"_\")\n    \n    str = replace(str,\
    \ \" \", \"_\")\n    \n    str = replace(str, \" \", \"_\")\n    \n    str = replace(str,\
    \ \" \", \"_\")\n    \n    str = replace(str, \" \", \"_\")\n    \n    str = replace(str,\
    \ \" \", \"_\")\n    \n    str = replace(str, \" \", \"_\")\n    \n    str = replace(str,\
    \ \" \", \"_\")\n    \n    str = replace(str, \" \", \"_\")\n    \n    str = replace(str,\
    \ \" \", \"_\")\n    \n    str = replace(str, \" \", \"_\")\n    \n    str = replace(str,\
    \ \" \", \"_\")\n    \n    str = replace(str, \" \", \"_\")\n    \n    str = replace(str,\
    \ \" \", \"_\")\n    \n    str = replace(str, \" \", \"_\")\n    \n    str = replace(str,\
    \ \" \", \"_\")\n    \n    str = replace(str, \" \", \"_\")\n    \n    str = replace(str,\
    \ \" \", \"_\")\n    \n    str = replace(str, \" \", \"_\")\n    \n    str = replace(str,\
    \ \" \", \"_\")\n    \n    str = replace(str, \" \", \"_\")\n    \n    str = replace(str,\
    \ \" \", \"_\")\n    \n    str = replace(str, \" \", \"_\")\n    \n    str = replace(str,\
    \ \" \", \"_\")\n    \n    str = replace(str, \" \", \"_\")\n    \n    str = replace(str,\
    \ \" \", \"_\")\n    \n    str = replace(str, \" \", \"_\")\n    \n    str = replace(str,\
    \ \" \", \"_\")\n    \n    str = replace(str, \" \", \"_\")\n    \n    str = replace(str,\
    \ \" \", \"_\")\n    \n    str = replace(str, \nusing Test\n\n@testset begin\n\
    \ncandidate = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t\
    @test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"\
    Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"\
    -Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp04nw_psm.jl:118\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp04nw_psm.jl:118\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    text_no_spaces = text.replace(\"\
    \ \", \"_\")\n    \n    if length(text_no_spaces) > 2\n        text_no_spaces\
    \ = text_no_spaces.replace(\"  \", \"_\")\n    end\n    \n    return text_no_spaces\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    remove_special_chars(text::String)::String\n\
    \    \n    Remove all special characters from text\n    \n    remove_special_chars(\"\
    Example\") == \"Example\"\n    remove_special_chars(\"Example 1\") == \"Example1\"\
    \n    remove_special_chars(\"Example 2\") == \"Example2\"\n    remove_special_chars(\"\
    Example 3\") == \"Example3\"\n    remove_special_chars(\"Example 4\") == \"Example4\"\
    \n    remove_special_chars(\"Example 5\") == \"Example5\"\n    remove_special_chars(\"\
    Example 6\") == \"Example6\"\n    remove_special_chars(\"Example 7\") == \"Example7\"\
    \n    remove_special_chars(\"Example 8\") == \"Example8\"\n    remove_special_chars(\"\
    Example 9\") == \"Example9\"\n    remove_special_chars(\"Example 10\") == \"Example10\"\
    \n    remove_special_chars(\"Example 11\") == \"Example11\"\n    remove_special_chars(\"\
    Example 12\") == \"Example12\"\n    remove_special_chars(\"Example 13\") == \"\
    Example13\"\n    remove_special_chars(\"Example 14\") == \"Example14\"\n    remove_special_chars(\"\
    Example 15\") == \"Example15\"\n    remove_special_chars(\"Example 16\") == \"\
    Example16\"\n    remove_special_chars(\"Example 17\") == \"Example17\"\n    remove_special_chars(\"\
    Example 18\") == \"Example18\"\n    remove_special_chars(\"Example 19\") == \"\
    Example19\"\n    remove_special_chars(\"Example 20\") == \"Example20\"\n    remove_special_chars(\"\
    Example 21\") == \"Example21\"\n    remove_special_chars(\"Example 22\") == \"\
    Example22\"\n    remove_special_chars(\"Example 23\") == \"Example23\"\n    remove_special_chars(\"\
    Example 24\") == \"Example24\"\n    remove_special_chars(\"Example 25\") == \"\
    Example25\"\n    remove_special_chars(\"Example 26\") == \"Example26\"\n    remove_special_chars(\"\
    Example 27\") == \"Example27\"\n    remove_special_chars(\"Example 28\") == \"\
    Example28\"\n    remove_special_chars(\"Example 29\") == \"Example29\"\n    remove_special_chars(\"\
    Example 30\") == \"Example30\"\n    remove_special_chars(\"Example 31\") == \"\
    Example31\"\n    remove_special_chars(\"Example 32\") == \"Example32\"\n    remove_special_chars(\"\
    Example 33\") == \"Example33\"\n    remove_special_\nusing Test\n\n@testset begin\n\
    \ncandidate = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t\
    @test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"\
    Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"\
    -Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo5c5swel.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpo5c5swel.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    text_split = split(text,\
    \ \" \")\n    \n    text_split = [replace(text_split[i], \" \", \"_\") for i =\
    \ 1:length(text_split)]\n    \n    text_split = join(text_split, \" \")\n    \n\
    \    if length(text_split) > 2\n        text_split = replace(text_split, \" \"\
    , \"-\")\n    end\n    \n    return text_split\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    split_words(text::String)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty\
    \  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\"\
    ) == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7oe_iprz.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7oe_iprz.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    words = split(text)\n\
    \    \n    fixed_text = \"\"\n    \n    for word in words\n        fixed_text\
    \ += replace(word, \"_\", \" \")\n    end\n    \n    return fixed_text\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string text, replace all\
    \ spaces in it with underscores, \n    and if a string has more than 2 consecutive\
    \ spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"\
    Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n  \
    \  fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\"\
    ) == \"_Example-3\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\
    \t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif\
    \ \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ) == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\") == \"\
    Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbm0tiw5k.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbm0tiw5k.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    text_no_spaces = text\n\
    \    \n    if text == \"\"\n        return \"\"\n    \n    if text == \" \" \n\
    \        return \"_\"\n    \n    if text == \" \" \n        return \"_\"\n   \
    \ \n    if text == \" \" \n        return \"_\"\n    \n    if text == \" \" \n\
    \        return \"_\"\n    \n    if text == \" \" \n        return \"_\"\n   \
    \ \n    if text == \" \" \n        return \"_\"\n    \n    if text == \" \" \n\
    \        return \"_\"\n    \n    if text == \" \" \n        return \"_\"\n   \
    \ \n    if text == \" \" \n        return \"_\"\n    \n    if text == \" \" \n\
    \        return \"_\"\n    \n    if text == \" \" \n        return \"_\"\n   \
    \ \n    if text == \" \" \n        return \"_\"\n    \n    if text == \" \" \n\
    \        return \"_\"\n    \n    if text == \" \" \n        return \"_\"\n   \
    \ \n    if text == \" \" \n        return \"_\"\n    \n    if text == \" \" \n\
    \        return \"_\"\n    \n    if text == \" \" \n        return \"_\"\n   \
    \ \n    if text == \" \" \n        return \"_\"\n    \n    if text == \" \" \n\
    \        return \"_\"\n    \n    if text == \" \" \n        return \"_\"\n   \
    \ \n    if text == \" \" \n        return \"_\"\n    \n    if text == \" \" \n\
    \        return \"_\"\n    \n    if text == \" \" \n        return \"_\"\n   \
    \ \n    if text == \" \" \n        return \"_\"\n    \n    if text == \" \" \n\
    \        return \"_\"\n    \n    if text == \" \" \n        return \"_\"\n   \
    \ \n    if text == \" \" \n        return \"_\"\n    \n    if text == \" \" \n\
    \        return \"_\"\n    \n    if text == \" \" \n        return \"_\"\n   \
    \ \n    if text == \" \" \n        return \"_\"\n    \n    if text == \" \" \n\
    \        return \"_\"\n    \n    if text == \" \" \n        return \"_\"\n   \
    \ \n    if text == \" \" \n        return \"_\"\n    \n    if text == \" \" \n\
    \        return \"_\"\n    \n    if text == \" \" \n        return \"_\"\n   \
    \ \n    if text == \" \" \n        return \"_\"\n    \n    if text == \" \" \n\
    \        return \"_\"\n    \n    if text == \" \" \n        return \"_\"\n   \
    \ \n    if text == \" \" \n        return \"_\"\n    \n    if text == \" \" \n\
    \        return \"_\"\n    \n    if text == \" \" \n        return \"_\"\n   \
    \ \nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp07uo6lxu.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp07uo6lxu.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\
    \t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif\
    \ \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ) == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\") == \"\
    Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2p4lmnro.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp2p4lmnro.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp2p4lmnro.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    text_split = split(text,\
    \ \" \")\n    \n    text_split = [replace(text_split[i], \" \", \"_\") for i =\
    \ 1:length(text_split)]\n    \n    text_split = join(text_split, \"\")\n    \n\
    \    if length(text_split) > 2\n        text_split = replace(text_split, \" \"\
    , \"-\")\n    end\n    \n    return text_split\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    split_and_replace(text::String)::Vector{String}\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\"\
    )\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"\
    Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"\
    -Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpega0fdeo.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpega0fdeo.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    fixed_text = \"\"\n\
    \    \n    for c in text\n        if c == \" \"\n            fixed_text += \"\
    _\"\n        else\n            fixed_text += c\n    end\n    \n    return fixed_text\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string text, replace\
    \ all spaces in it with underscores, \n    and if a string has more than 2 consecutive\
    \ spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"\
    Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n  \
    \  fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\"\
    ) == \"_Example-3\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\
    \t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif\
    \ \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ) == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\") == \"\
    Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppde_zipn.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppde_zipn.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    text_split = split(text,\
    \ \" \")\n    \n    text_split = [replace(text_split[i], \"_\") for i = 1:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i = 2:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i = 2:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i = 2:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i = 2:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i = 2:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i = 2:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i = 2:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i = 2:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i = 2:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i = 2:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i = 2:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i = 2:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i = 2:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i = 2:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i = 2:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i = 2:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i = 2:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i = 2:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i = 2:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i = 2:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i = 2:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i = 2:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i = 2:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i = 2:length(text_split)]\n\
    \    \n    \nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpepjz8yhf.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpepjz8yhf.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpepjz8yhf.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    text_split = split(text,\
    \ \" \")\n    \n    text_split = [replace(text_split[i], \"_\") for i = 1:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i = 1:length(text_split)]\n\
    \    \n    text_split = join(text_split, \" \")\n    \n    return text_split\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    remove_spaces(text::String)::String\n\
    \    \n    Remove all spaces from text\n    \n    remove_spaces(\"Example\") ==\
    \ \"Example\"\n    remove_spaces(\"Example 1\") == \"Example1\"\n    remove_spaces(\"\
    Example 2\") == \"Example2\"\n    remove_spaces(\"Example 3\") == \"Example3\"\
    \n    remove_spaces(\"Example 4\") == \"Example4\"\n    remove_spaces(\"Example\
    \ 5\") == \"Example5\"\n    remove_spaces(\"Example 6\") == \"Example6\"\n   \
    \ remove_spaces(\"Example 7\") == \"Example7\"\n    remove_spaces(\"Example 8\"\
    ) == \"Example8\"\n    remove_spaces(\"Example 9\") == \"Example9\"\n    remove_spaces(\"\
    Example 10\") == \"Example10\"\n    remove_spaces(\"Example 11\") == \"Example11\"\
    \n    remove_spaces(\"Example 12\") == \"Example12\"\n    remove_spaces(\"Example\
    \ 13\") == \"Example13\"\n    remove_spaces(\"Example 14\") == \"Example14\"\n\
    \    remove_spaces(\"Example 15\") == \"Example15\"\n    remove_spaces(\"Example\
    \ 16\") == \"Example16\"\n    remove_spaces(\"Example 17\") == \"Example17\"\n\
    \    remove_spaces(\"Example 18\") == \"Example18\"\n    remove_spaces(\"Example\
    \ 19\") == \"Example19\"\n    remove_spaces(\"Example 20\") == \"Example20\"\n\
    \    remove_spaces(\"Example 21\") == \"Example21\"\n    remove_spaces(\"Example\
    \ 22\") == \"Example22\"\n    remove_spaces(\"Example 23\") == \"Example23\"\n\
    \    remove_spaces(\"Example 24\") == \"Example24\"\n    remove_spaces(\"Example\
    \ 25\") == \"Example25\"\n    remove_spaces(\"Example 26\") == \"Example26\"\n\
    \    remove_spaces(\"Example 27\") == \"Example27\"\n    remove_spaces(\"Example\
    \ 28\") == \"Example28\"\n    remove_spaces(\"Example 29\") == \"Example29\"\n\
    \    remove_spaces(\"Example 30\") == \"Example30\"\n    remove_spaces(\"Example\
    \ 31\") == \"Example31\"\n    remove_spaces(\"Example 32\") == \"Example32\"\n\
    \    remove_spaces(\"Example 33\") == \"Example33\"\n    remove_spaces(\"Example\
    \ 34\") == \"Example34\"\n    remove_spaces(\"Example 35\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\"\
    )\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"\
    Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"\
    -Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2oxq3bgs.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2oxq3bgs.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    fixed_text = text\n\
    \    \n    if text == \"\"\n        return fixed_text\n    \n    if text == \"\
    \ \" \n        return fixed_text\n    \n    if text == \" \" \n        return\
    \ fixed_text\n    \n    if text == \" \" \n        return fixed_text\n    \n \
    \   if text == \" \" \n        return fixed_text\n    \n    if text == \" \" \n\
    \        return fixed_text\n    \n    if text == \" \" \n        return fixed_text\n\
    \    \n    if text == \" \" \n        return fixed_text\n    \n    if text ==\
    \ \" \" \n        return fixed_text\n    \n    if text == \" \" \n        return\
    \ fixed_text\n    \n    if text == \" \" \n        return fixed_text\n    \n \
    \   if text == \" \" \n        return fixed_text\n    \n    if text == \" \" \n\
    \        return fixed_text\n    \n    if text == \" \" \n        return fixed_text\n\
    \    \n    if text == \" \" \n        return fixed_text\n    \n    if text ==\
    \ \" \" \n        return fixed_text\n    \n    if text == \" \" \n        return\
    \ fixed_text\n    \n    if text == \" \" \n        return fixed_text\n    \n \
    \   if text == \" \" \n        return fixed_text\n    \n    if text == \" \" \n\
    \        return fixed_text\n    \n    if text == \" \" \n        return fixed_text\n\
    \    \n    if text == \" \" \n        return fixed_text\n    \n    if text ==\
    \ \" \" \n        return fixed_text\n    \n    if text == \" \" \n        return\
    \ fixed_text\n    \n    if text == \" \" \n        return fixed_text\n    \n \
    \   if text == \" \" \n        return fixed_text\n    \n    if text == \" \" \n\
    \        return fixed_text\n    \n    if text == \" \" \n        return fixed_text\n\
    \    \n    if text == \" \" \n        return fixed_text\n    \n    if text ==\
    \ \" \" \n        return fixed_text\n    \n    if text == \" \" \n        return\
    \ fixed_text\n    \n    if text == \" \" \n        return fixed_text\n    \n \
    \   if text == \" \" \n        return fixed_text\n    \n    if text == \" \" \n\
    \        return fixed_text\n    \n    if text == \" \" \n        return fixed_text\n\
    \    \n    if text == \" \" \n        return fixed_text\n    \n    if text ==\
    \ \" \" \n        return fixed_text\n    \n    if text == \" \" \n        return\
    \ fixed_text\n    \n    if text == \" \" \n        return fixed_text\n    \n \
    \   if text == \" \" \n        return fixed_text\n    \n    if text == \" \" \n\
    \        return fixed_text\n    \n    if text == \" \" \n        return fixed_text\n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgjw44fq7.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgjw44fq7.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    text_split = split(text,\
    \ \" \")\n    \n    text_split = [replace(text_split[i], \"_\") for i in 1:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i in 2:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i in 3:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i in 4:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i in 5:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i in 6:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i in 7:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i in 8:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i in 9:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i in 10:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i in 11:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i in 12:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i in 13:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i in 14:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i in 15:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i in 16:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i in 17:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i in 18:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i in 19:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i in 20:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i in 21:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i in 22:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i in 23:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i in 24:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i in 25:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i in 26:length(text_split)]\n\
    \    \n    text_split = [\nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\
    \t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif\
    \ \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ) == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\") == \"\
    Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdp4gsdc9.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdp4gsdc9.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    fixed = replace(replace(replace(text,\
    \ \" \", \"_\"), \"  \", \"_\"), \"  \", \"_\")\n    \n    if fixed.length < text.length\n\
    \        fixed = fixed + \"-\" * (text.length - fixed.length)\n    end\n    \n\
    \    return fixed\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    remove_spaces(text::String)\n\
    using Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmhx1nzgd.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmhx1nzgd.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    text_split = split(text,\
    \ \" \")\n    \n    text_split = [replace(text_split[i], \" \", \"_\") for i =\
    \ 1:length(text_split)]\n    \n    text_split = join(text_split, \"\")\n    \n\
    \    if length(text_split) > 2\n        text_split = replace(text_split, \" \"\
    , \"-\")\n    end\n    \n    return text_split\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    split_and_replace(text, pattern)\nusing Test\n\n@testset begin\n\n\
    candidate = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty\
    \  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\"\
    ) == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0pdrwe25.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0pdrwe25.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\
    \t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif\
    \ \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ) == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\") == \"\
    Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5q3mukgf.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp5q3mukgf.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp5q3mukgf.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    fix_spaces_re = regex(r\"\
    \\s+\")\n    \n    fixed_text = fix_spaces_re.sub(\" \", text)\n    \n    if length(fixed_text)\
    \ > length(text)\n        fixed_text = fixed_text[0..(length(fixed_text) - length(text))]\n\
    \    end\n    \n    return fixed_text\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    remove_extra_spaces(text::String)\nusing Test\n\n@testset begin\n\n\
    candidate = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty\
    \  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\"\
    ) == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmtu92i2q.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmtu92i2q.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    words = split(text)\n\
    \    \n    fixed_text = \"\"\n    \n    for word in words\n        fixed_text\
    \ += replace(word, \"_\", \" \")\n    end\n    \n    return fixed_text\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    split_words(text::String)\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"Example\"\
    ) == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1bnu0asu.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1bnu0asu.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    # Replace all spaces\
    \ with underscores\n    text = replace(text, \"  \", \"_\")\n    \n    # Replace\
    \ all consecutive spaces with -\n    text = replace(text, \" \", \"-\")\n    \n\
    \    return text\nend\n</cell>\n<code language=julia-1.4>\n# Test fix_spaces\n\
    fix_spaces(\"Example\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns a new string with all the characters in lower case. \n\
    For example fix_case(\"example\") returns \"example\".\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\"\
    )\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"\
    Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"\
    -Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwd5_yssq.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwd5_yssq.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    space_count = text.count(\"\
    \  \")\n    \n    if space_count > 2\n        space_count = text.count(\"  \"\
    )\n        \n        fixed_text = text.replace(\"  \", \"_\")\n        \n    \
    \    fixed_text = fixed_text.replace(\"  \", \"_\")\n        \n        fixed_text\
    \ = fixed_text.replace(\"  \", \"_\")\n        \n        fixed_text = fixed_text.replace(\"\
    \  \", \"_\")\n        \n        return fixed_text\n    else\n        return text\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    remove_spaces(text::String)\n\
    using Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi8x2z6o7.jl:30\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpi8x2z6o7.jl:30\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    text_split = split(text,\
    \ \" \")\n    \n    text_split = [replace(text_split[i], \" \", \"_\") for i =\
    \ 1:length(text_split)]\n    \n    text_split = join(text_split, \" \")\n    \n\
    \    if length(text_split) > 2\n        text_split = split(text_split, \" \")\n\
    \        text_split = [replace(text_split[i], \" \", \"-\") for i = 1:length(text_split)]\n\
    \        text_split = join(text_split, \" \")\n    end\n    \n    return text_split\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    split_and_replace(text::String)::Array{String}\n\
    using Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0c7b6qgy.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0c7b6qgy.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    replaced = replace(text,\
    \ \" \", \"_\")\n    \n    if length(replaced) > 2 \n        replaced = replace(replaced,\
    \ \" \", \"-\")\n    end\n    \n    return replaced\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    split_words(text::String)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty\
    \  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\"\
    ) == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpurchhbq5.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpurchhbq5.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    text_split = split(text,\
    \ \" \")\n    \n    text_split = [replace(text_split[i], \" \", \"_\") for i =\
    \ 1:length(text_split)]\n    \n    text_split = join(text_split, \" \")\n    \n\
    \    if length(text_split) > 2\n        text_split = replace(text_split, \" \"\
    , \"-\")\n    end\n    \n    return text_split\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n\
    \    and if a string has more than 2 consecutive spaces, \n    then replace all\
    \ consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1rbowkzb.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1rbowkzb.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    str = text\n    str\
    \ = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str =\
    \ str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\"\
    \ \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \"\
    , \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"\
    _\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\"\
    )\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n\
    \    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n  \
    \  str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str\
    \ = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str =\
    \ str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\"\
    \ \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \"\
    , \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"\
    _\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\"\
    )\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n\
    \    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n  \
    \  str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str\
    \ = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str =\
    \ str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\"\
    \ \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \"\
    , \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"\
    _\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\"\
    )\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n\
    \    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n  \
    \  str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str\
    \ = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str =\
    \ str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\"\
    \ \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \"\
    , \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"\
    _\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\"\
    )\n    str = str.replace(\" \", \"_\")\n    str = \nusing Test\n\n@testset begin\n\
    \ncandidate = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t\
    @test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"\
    Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"\
    -Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp897z969j.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp897z969j.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp897z969j.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    # Replace all spaces\
    \ with underscores\n    text = replace(text, \"  \", \"_\")\n    \n    # Replace\
    \ all consecutive spaces with -\n    space_count = length(text)\n    if space_count\
    \ > 2\n        text = replace(text, \"  \", \"_\")\n    end\n    \n    return\
    \ text\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    split_words(text::String)::Vector{String}\n\
    \    \n    Split text into words by splitting on spaces. \n    \n    split_words(\"\
    Example\") == \"Example\"\n    split_words(\"Example 1\") == \"Example\"\n   \
    \ split_words(\" Example 2\") == \"Example\"\n    split_words(\" Example   3\"\
    ) == \"Example\"\n    split_words(\"Example   4\") == \"Example\"\n    split_words(\"\
    Example   5\") == \"Example\"\n    split_words(\"Example   6\") == \"Example\"\
    \n    split_words(\"Example   7\") == \"Example\"\n    split_words(\"Example \
    \  8\") == \"Example\"\n    split_words(\"Example   9\") == \"Example\"\n    split_words(\"\
    Example   10\") == \"Example\"\n    split_words(\"Example   11\") == \"Example\"\
    \n    split_words(\"Example   12\") == \"Example\"\n    split_words(\"Example\
    \   13\") == \"Example\"\n    split_words(\"Example   14\") == \"Example\"\n \
    \   split_words(\"Example   15\") == \"Example\"\n    split_words(\"Example  \
    \ 16\") == \"Example\"\n    split_words(\"Example   17\") == \"Example\"\n   \
    \ split_words(\"Example   18\") == \"Example\"\n    split_words(\"Example   19\"\
    ) == \"Example\"\n    split_words(\"Example   20\") == \"Example\"\n    split_words(\"\
    Example   21\") == \"Example\"\n    split_words(\"Example   22\") == \"Example\"\
    \n    split_words(\"Example   23\") == \"Example\"\n    split_words(\"Example\
    \   24\") == \"Example\"\n    split_words(\"Example   25\") == \"Example\"\n \
    \   split_words(\"Example   26\") == \"Example\"\n    split_words(\"Example  \
    \ 27\") == \"Example\"\n    split_words(\"Example   28\") == \"Example\"\n   \
    \ split_words(\"Example   29\") == \"Example\"\n    split_words(\"Example   30\"\
    ) == \"Example\"\n    split_words(\"Example   31\") == \"Example\"\n    split_words(\"\
    Example   32\") == \"Example\"\n    split_words(\"Example   33\") == \"Example\"\
    \n    split_words(\"Example   34\") == \"Example\"\n    split_words(\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"Example\"\
    ) == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1mzqrk36.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1mzqrk36.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    text_no_spaces = replace(text,\
    \ \" \", \"_\")\n    \n    if length(text_no_spaces) > 2 \n        \n        text_no_spaces\
    \ = replace(text_no_spaces, \" \", \"-\")\n        \n    end\n    \n    return\
    \ text_no_spaces\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a\
    \ string text, replace all spaces in it with underscores, \n    and if a string\
    \ has more than 2 consecutive spaces, \n    then replace all consecutive spaces\
    \ with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"\
    Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"Example\") ==\
    \ \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\
    \t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8rej2zz2.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8rej2zz2.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    text_no_spaces = text\n\
    \    \n    if text == \"\"\n        return \"\"\n    \n    if text == \" \" \n\
    \        return \"_\"\n    \n    if text == \" \" \n        return \"_\"\n   \
    \ \n    if text == \" \" \n        return \"_\"\n    \n    if text == \" \" \n\
    \        return \"_\"\n    \n    if text == \" \" \n        return \"_\"\n   \
    \ \n    if text == \" \" \n        return \"_\"\n    \n    if text == \" \" \n\
    \        return \"_\"\n    \n    if text == \" \" \n        return \"_\"\n   \
    \ \n    if text == \" \" \n        return \"_\"\n    \n    if text == \" \" \n\
    \        return \"_\"\n    \n    if text == \" \" \n        return \"_\"\n   \
    \ \n    if text == \" \" \n        return \"_\"\n    \n    if text == \" \" \n\
    \        return \"_\"\n    \n    if text == \" \" \n        return \"_\"\n   \
    \ \n    if text == \" \" \n        return \"_\"\n    \n    if text == \" \" \n\
    \        return \"_\"\n    \n    if text == \" \" \n        return \"_\"\n   \
    \ \n    if text == \" \" \n        return \"_\"\n    \n    if text == \" \" \n\
    \        return \"_\"\n    \n    if text == \" \" \n        return \"_\"\n   \
    \ \n    if text == \" \" \n        return \"_\"\n    \n    if text == \" \" \n\
    \        return \"_\"\n    \n    if text == \" \" \n        return \"_\"\n   \
    \ \n    if text == \" \" \n        return \"_\"\n    \n    if text == \" \" \n\
    \        return \"_\"\n    \n    if text == \" \" \n        return \"_\"\n   \
    \ \n    if text == \" \" \n        return \"_\"\n    \n    if text == \" \" \n\
    \        return \"_\"\n    \n    if text == \" \" \n        return \"_\"\n   \
    \ \n    if text == \" \" \n        return \"_\"\n    \n    if text == \" \" \n\
    \        return \"_\"\n    \n    if text == \" \" \n        return \"_\"\n   \
    \ \n    if text == \" \" \n        return \"_\"\n    \n    if text == \" \" \n\
    \        return \"_\"\n    \n    if text == \" \" \n        return \"_\"\n   \
    \ \n    if text == \" \" \n        return \"_\"\n    \n    if text == \" \" \n\
    \        return \"_\"\n    \n    if text == \" \" \n        return \"_\"\n   \
    \ \n    if text == \" \" \n        return \"_\"\n    \n    if text == \" \" \n\
    \        return \"_\"\n    \n    if text == \" \" \n        return \"_\"\n   \
    \ \nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg36o1nlw.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg36o1nlw.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    text_no_spaces = replace(replace(replace(text,\
    \ \" \", \"_\"), \"  \", \"_\"), \"  \", \"_\")\n    \n    if length(text_no_spaces)\
    \ > length(text)\n        text_no_spaces = replace(text_no_spaces, \" \", \"_\"\
    )\n    end\n    \n    return text_no_spaces\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    remove_special_chars(text::String)\nusing Test\n\n@testset begin\n\
    \ncandidate = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t\
    @test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"\
    Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"\
    -Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwo44qwe2.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwo44qwe2.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    text_split = split(text,\
    \ \" \")\n    \n    text_split = [replace(text_split[i], \" \", \"_\") for i =\
    \ 1:length(text_split)]\n    \n    text_split = join(text_split, \"\")\n    \n\
    \    if length(text_split) > 2\n        text_split = split(text_split, \" \")\n\
    \        text_split = [replace(text_split[i], \" \", \"-\") for i = 1:length(text_split)]\n\
    \        text_split = join(text_split, \"\")\n    end\n    \n    return text_split\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string text, replace\
    \ all spaces in it with underscores, \n    and if a string has more than 2 consecutive\
    \ spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"\
    Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n  \
    \  fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\"\
    ) == \"_Example-3\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\
    \t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif\
    \ \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ) == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\") == \"\
    Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp84tr0w8g.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp84tr0w8g.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    str = text\n    str\
    \ = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str =\
    \ str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\"\
    \ \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \"\
    , \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"\
    _\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\"\
    )\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n\
    \    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n  \
    \  str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str\
    \ = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str =\
    \ str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\"\
    \ \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \"\
    , \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"\
    _\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\"\
    )\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n\
    \    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n  \
    \  str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str\
    \ = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str =\
    \ str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\"\
    \ \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \"\
    , \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"\
    _\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\"\
    )\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n\
    \    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n  \
    \  str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str\
    \ = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str =\
    \ str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\"\
    \ \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \"\
    , \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"\
    _\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\"\
    )\n    str = str.replace(\" \", \"_\")\n    str = \nusing Test\n\n@testset begin\n\
    \ncandidate = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t\
    @test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"\
    Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"\
    -Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplrfxqcv8.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmplrfxqcv8.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmplrfxqcv8.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    words = split(text,\
    \ \" \")\n    \n    fixed_text = \"\"\n    \n    for word in words\n        fixed_text\
    \ += replace(word, \"_\", \" \")\n    end\n    \n    return fixed_text\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string text, replace all\
    \ spaces in it with underscores, \n    and if a string has more than 2 consecutive\
    \ spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"\
    Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n  \
    \  fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\"\
    ) == \"_Example-3\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\
    \t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif\
    \ \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ) == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\") == \"\
    Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9ileeer5.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9ileeer5.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    fixed_text = text\n\
    \    \n    if text == \"\"\n        return text\n    \n    if text == \" \" \n\
    \        fixed_text = fixed_text.replace(\" \", \"_\")\n        return fixed_text\n\
    \    \n    if text == \"  \"\n        fixed_text = fixed_text.replace(\" \", \"\
    _\")\n        return fixed_text\n    \n    if text == \" \" \n        fixed_text\
    \ = fixed_text.replace(\" \", \"_\")\n        return fixed_text\n    \n    if\
    \ text == \"  \"\n        fixed_text = fixed_text.replace(\" \", \"_\")\n    \
    \    return fixed_text\n    \n    if text == \" \" \n        fixed_text = fixed_text.replace(\"\
    \ \", \"_\")\n        return fixed_text\n    \n    if text == \"  \"\n       \
    \ fixed_text = fixed_text.replace(\" \", \"_\")\n        return fixed_text\n \
    \   \n    if text == \" \" \n        fixed_text = fixed_text.replace(\" \", \"\
    _\")\n        return fixed_text\n    \n    if text == \"  \"\n        fixed_text\
    \ = fixed_text.replace(\" \", \"_\")\n        return fixed_text\n    \n    if\
    \ text == \" \" \n        fixed_text = fixed_text.replace(\" \", \"_\")\n    \
    \    return fixed_text\n    \n    if text == \"  \"\n        fixed_text = fixed_text.replace(\"\
    \ \", \"_\")\n        return fixed_text\n    \n    if text == \" \" \n       \
    \ fixed_text = fixed_text.replace(\" \", \"_\")\n        return fixed_text\n \
    \   \n    if text == \"  \"\n        fixed_text = fixed_text.replace(\" \", \"\
    _\")\n        return fixed_text\n    \n    if text == \" \" \n        fixed_text\
    \ = fixed_text.replace(\" \", \"_\")\n        return fixed_text\n    \n    if\
    \ text == \"  \"\n        fixed_text = fixed_text.replace(\" \", \"_\")\n    \
    \    return fixed_text\n    \n    if text == \" \" \n        fixed_text = fixed_text.replace(\"\
    \ \", \"_\")\n        return fixed_text\n    \n    if text == \"  \"\n       \
    \ fixed_text = fixed_text.replace(\" \", \"_\")\n        return fixed_text\n \
    \   \n    if text == \" \" \n        fixed_text = fixed_text.replace(\" \", \"\
    _\")\n        return fixed_text\n    \n    if text == \"  \"\n        fixed_text\
    \ = fixed_text.replace(\" \", \"_\")\n        return fixed_text\n    \n    if\
    \ text == \" \" \n        fixed_text = fixed_text.replace(\" \", \"_\")\n    \
    \    return fixed_text\n    \n    if text == \"  \"\n        fixed_text = fixed_text.replace(\"\
    \ \", \"_\")\n        return fixed_text\n    \n    if text == \" \" \n       \
    \ fixed_text = fixed_text.replace(\" \", \"_\")\n        return fixed_text\n \
    \   \n    if text == \"  \"\n        fixed_text = fixed_text.replace(\" \", \"\
    _\")\n        return fixed_text\n    \n    if text == \" \" \n        fixed_text\
    \ = fixed_text.replace(\" \", \"_\")\n        return fixed_text\n\nusing Test\n\
    \n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"Example\") ==\
    \ \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\
    \t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0nt5xmyj.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0nt5xmyj.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    text_no_spaces = replace(text,\
    \ \" \", \"_\")\n    \n    if length(text_no_spaces) > 2 \n        \n        text_no_spaces\
    \ = replace(text_no_spaces, \" \", \"-\")\n        \n    end\n    \n    return\
    \ text_no_spaces\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    remove_spaces(text::String)\n\
    using Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkf6i5fmb.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkf6i5fmb.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    space_count = count_spaces(text)\n\
    \    \n    if space_count > 1\n        \n        space_count_str = string(space_count)\n\
    \        \n        space_count_str = replace(space_count_str, \"-\", \"_\")\n\
    \        \n        space_count_str = replace(space_count_str, \" \", \"_\")\n\
    \        \n        return space_count_str\n    \n    else\n        return text\n\
    \    \nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    count_spaces(text::String)\n\
    using Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfwspd4qa.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfwspd4qa.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    text_no_spaces = text.replace(\"\
    \ \", \"_\")\n    \n    if length(text_no_spaces) > 2 \n        \n        space_count\
    \ = text_no_spaces.count(\"_\")\n        \n        if space_count == 1 \n    \
    \        return text_no_spaces \n        else \n            return replace(text_no_spaces,\
    \ \"_\", \"-\")\n    else \n        return text_no_spaces\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    remove_spaces(text::String)\nusing Test\n\n\
    @testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"Example\") == \"\
    Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"\
    Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"\
    -Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmps7omkyoa.jl:19 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope at /tmp/tmps7omkyoa.jl:23\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmps7omkyoa.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    if text == \"\"\n\
    \        return \"\"\n    \n    space_count = text.count(' ')\n    \n    if space_count\
    \ == 0\n        return text\n    \n    if space_count == 1\n        return text.replace(\"\
    \ \", \"_\")\n    \n    if space_count > 2\n        return text.replace(\" \"\
    , \"_\")\n    \n    return text\nend\n</cell>\n<code language=julia-1.5>\n\"\"\
    \"\n    Given a string text, replace all spaces in it with underscores, \n   \
    \ and if a string has more than 2 consecutive spaces, \n    then replace all consecutive\
    \ spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"\
    Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"Example\") ==\
    \ \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\
    \t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph161m2j5.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmph161m2j5.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    fix_spaces_re = regex(\"\
    [ ]{2,}\")\n    \n    fixed_text = fix_spaces_re.replace_all(text, \"_\")\n  \
    \  \n    if fixed_text == \"\"\n        return text\n    else\n        return\
    \ fixed_text\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given\
    \ a string text, replace all spaces in it with underscores, \n    and if a string\
    \ has more than 2 consecutive spaces, \n    then replace all consecutive spaces\
    \ with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"\
    Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"Example\") ==\
    \ \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\
    \t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6wma1i9p.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6wma1i9p.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    fixed_text = text\n\
    \    \n    if text == \"\"\n        return fixed_text\n    \n    if text == \"\
    \ \" \n        return fixed_text\n    \n    if text == \"  \"\n        return\
    \ fixed_text\n    \n    if text == \"  \"\n        return fixed_text\n    \n \
    \   if text == \" \" \n        return fixed_text\n    \n    if text == \"  \"\n\
    \        return fixed_text\n    \n    if text == \" \" \n        return fixed_text\n\
    \    \n    if text == \"  \"\n        return fixed_text\n    \n    if text ==\
    \ \" \" \n        return fixed_text\n    \n    if text == \"  \"\n        return\
    \ fixed_text\n    \n    if text == \" \" \n        return fixed_text\n    \n \
    \   if text == \"  \"\n        return fixed_text\n    \n    if text == \" \" \n\
    \        return fixed_text\n    \n    if text == \"  \"\n        return fixed_text\n\
    \    \n    if text == \" \" \n        return fixed_text\n    \n    if text ==\
    \ \"  \"\n        return fixed_text\n    \n    if text == \" \" \n        return\
    \ fixed_text\n    \n    if text == \"  \"\n        return fixed_text\n    \n \
    \   if text == \" \" \n        return fixed_text\n    \n    if text == \"  \"\n\
    \        return fixed_text\n    \n    if text == \" \" \n        return fixed_text\n\
    \    \n    if text == \"  \"\n        return fixed_text\n    \n    if text ==\
    \ \" \" \n        return fixed_text\n    \n    if text == \"  \"\n        return\
    \ fixed_text\n    \n    if text == \" \" \n        return fixed_text\n    \n \
    \   if text == \"  \"\n        return fixed_text\n    \n    if text == \" \" \n\
    \        return fixed_text\n    \n    if text == \"  \"\n        return fixed_text\n\
    \    \n    if text == \" \" \n        return fixed_text\n    \n    if text ==\
    \ \"  \"\n        return fixed_text\n    \n    if text == \" \" \n        return\
    \ fixed_text\n    \n    if text == \"  \"\n        return fixed_text\n    \n \
    \   if text == \" \" \n        return fixed_text\n    \n    if text == \"  \"\n\
    \        return fixed_text\n    \n    if text == \" \" \n        return fixed_text\n\
    \    \n    if text == \"  \"\n        return fixed_text\n    \n    if text ==\
    \ \" \" \n        return fixed_text\n    \n    if text == \"  \"\n        return\
    \ fixed_text\n    \n    if text == \" \" \n        return fixed_text\n    \n \
    \   if text == \"  \"\n        return fixed_text\n    \n    if text == \" \" \n\
    \        return fixed_text\n    \n    if text == \"  \"\n        return fixed_text\n\
    \    \n    if text == \" \" \n        return fixed_text\n    \n    if text ==\
    \ \"  \"\n        return fixed_text\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty\
    \  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\"\
    ) == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph6f_c_cd.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmph6f_c_cd.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    replaced_text = text\n\
    \    \n    if text == \"\"\n        return replaced_text\n    \n    if text ==\
    \ \" \" \n        replaced_text = replaced_text.replace(\" \", \"_\")\n      \
    \  return replaced_text\n    \n    if text == \" \"\n        replaced_text = replaced_text.replace(\"\
    \ \", \"_\")\n        return replaced_text\n    \n    if text == \" \"\n     \
    \   replaced_text = replaced_text.replace(\" \", \"_\")\n        return replaced_text\n\
    \    \n    if text == \" \"\n        replaced_text = replaced_text.replace(\"\
    \ \", \"_\")\n        return replaced_text\n    \n    if text == \" \"\n     \
    \   replaced_text = replaced_text.replace(\" \", \"_\")\n        return replaced_text\n\
    \    \n    if text == \" \"\n        replaced_text = replaced_text.replace(\"\
    \ \", \"_\")\n        return replaced_text\n    \n    if text == \" \"\n     \
    \   replaced_text = replaced_text.replace(\" \", \"_\")\n        return replaced_text\n\
    \    \n    if text == \" \"\n        replaced_text = replaced_text.replace(\"\
    \ \", \"_\")\n        return replaced_text\n    \n    if text == \" \"\n     \
    \   replaced_text = replaced_text.replace(\" \", \"_\")\n        return replaced_text\n\
    \    \n    if text == \" \"\n        replaced_text = replaced_text.replace(\"\
    \ \", \"_\")\n        return replaced_text\n    \n    if text == \" \"\n     \
    \   replaced_text = replaced_text.replace(\" \", \"_\")\n        return replaced_text\n\
    \    \n    if text == \" \"\n        replaced_text = replaced_text.replace(\"\
    \ \", \"_\")\n        return replaced_text\n    \n    if text == \" \"\n     \
    \   replaced_text = replaced_text.replace(\" \", \"_\")\n        return replaced_text\n\
    \    \n    if text == \" \"\n        replaced_text = replaced_text.replace(\"\
    \ \", \"_\")\n        return replaced_text\n    \n    if text == \" \"\n     \
    \   replaced_text = replaced_text.replace(\" \", \"_\")\n        return replaced_text\n\
    \    \n    if text == \" \"\n        replaced_text = replaced_text.replace(\"\
    \ \", \"_\")\n        return replaced_text\n    \n    if text == \" \"\n     \
    \   replaced_text = replaced_text.replace(\" \", \"_\")\n        return replaced_text\n\
    \    \n    if text == \" \"\n        replaced_text = replaced_text.replace(\"\
    \ \", \"_\")\n        return replaced_text\n    \n    if text == \" \"\n     \
    \   replaced_text = replaced_text.replace(\" \", \"_\")\n        return replaced_text\n\
    \    \n    if text == \" \"\n        replaced_text = replaced_text.replace(\"\
    \ \", \"_\")\n        return replaced_text\n    \n    if text == \" \"\n     \
    \   replaced_text = \nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\
    \t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif\
    \ \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ) == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\") == \"\
    Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0tccie7u.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0tccie7u.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    if text == \"\"\n\
    \        return text\n    \n    spaces = findall(text, \" \")\n    \n    if length(spaces)\
    \ > 2\n        spaces = replace(spaces, \" \", \"_\")\n        spaces = replace(spaces,\
    \ \"_\", \"-\")\n    end\n    \n    return text\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    remove_spaces(text::String)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty\
    \  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\"\
    ) == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnuoa7df4.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnuoa7df4.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    str = text\n    \n\
    \    str = str.replace(\" \", \"_\")\n    \n    if str == \"\"\n        return\
    \ str\n    \n    if str == \" \"\n        return str\n    \n    if str == \" \"\
    \ \n        return \"_\"\n    \n    if str == \" \"\n        return \"-\"\n  \
    \  \n    return str\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given\
    \ a string text, replace all spaces in it with underscores, \n    and if a string\
    \ has more than 2 consecutive spaces, \n    then replace all consecutive spaces\
    \ with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"\
    Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"Example\") ==\
    \ \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\
    \t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbxpohuc0.jl:31\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbxpohuc0.jl:31\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    fixed_text = \"\"\n\
    \    \n    for c in text\n        if c == \" \"\n            fixed_text += \"\
    _\"\n        else\n            fixed_text += c\n    end\n    \n    return fixed_text\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpc7r0c0rx.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpc7r0c0rx.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpc7r0c0rx.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    space_count = text.count('\
    \ ')\n    \n    if space_count == 1\n        return text\n    \n    if space_count\
    \ > 2\n        return text\n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"Example\"\
    ) == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6ltanqv4.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6ltanqv4.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    str = text\n    str\
    \ = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str =\
    \ str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\"\
    \ \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \"\
    , \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"\
    _\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\"\
    )\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n\
    \    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n  \
    \  str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str\
    \ = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str =\
    \ str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\"\
    \ \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \"\
    , \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"\
    _\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\"\
    )\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n\
    \    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n  \
    \  str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str\
    \ = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str =\
    \ str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\"\
    \ \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \"\
    , \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"\
    _\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\"\
    )\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n\
    \    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n  \
    \  str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str\
    \ = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str =\
    \ str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\"\
    \ \", \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \"\
    , \"_\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"\
    _\")\n    str = str.replace(\" \", \"_\")\n    str = str.replace(\" \", \"_\"\
    )\n    str = str.replace(\" \", \"_\")\n    str = \nusing Test\n\n@testset begin\n\
    \ncandidate = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t\
    @test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"\
    Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"\
    -Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3svo2s5m.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp3svo2s5m.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp3svo2s5m.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    space_count = text.count('\
    \ ')\n    \n    if space_count > 2\n        \n        space_count = text.count('\
    \ ') - 2\n        \n        space_text = \"\"\n        \n        for i in text.chars\n\
    \            if i ~= ' '\n                space_text += \"_\"\n            else\n\
    \                space_text += i\n        end\n        \n        return space_text\n\
    \    else\n        return text\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    remove_spaces(text::String)::String\n    \n    Given a string text,\
    \ remove all spaces in it\n    \n    remove_spaces(\"Example\") == \"Example\"\
    \n    remove_spaces(\"Example 1\") == \"Example1\"\n    remove_spaces(\" Example\
    \ 2\") == \"Example2\"\n    remove_spaces(\" Example   3\") == \"Example3\"\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp3w996b22.jl:21 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope at /tmp/tmp3w996b22.jl:29\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp3w996b22.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    space_count = text.count('\
    \ ')\n    \n    if space_count > 2\n        \n        space_count = text.count('\
    \ ')\n        \n        space_count = text.count(' ')\n        \n        space_count\
    \ = text.count(' ')\n        \n        space_count = text.count(' ')\n       \
    \ \n        space_count = text.count(' ')\n        \n        space_count = text.count('\
    \ ')\n        \n        space_count = text.count(' ')\n        \n        space_count\
    \ = text.count(' ')\n        \n        space_count = text.count(' ')\n       \
    \ \n        space_count = text.count(' ')\n        \n        space_count = text.count('\
    \ ')\n        \n        space_count = text.count(' ')\n        \n        space_count\
    \ = text.count(' ')\n        \n        space_count = text.count(' ')\n       \
    \ \n        space_count = text.count(' ')\n        \n        space_count = text.count('\
    \ ')\n        \n        space_count = text.count(' ')\n        \n        space_count\
    \ = text.count(' ')\n        \n        space_count = text.count(' ')\n       \
    \ \n        space_count = text.count(' ')\n        \n        space_count = text.count('\
    \ ')\n        \n        space_count = text.count(' ')\n        \n        space_count\
    \ = text.count(' ')\n        \n        space_count = text.count(' ')\n       \
    \ \n        space_count = text.count(' ')\n        \n        space_count = text.count('\
    \ ')\n        \n        space_count = text.count(' ')\n        \n        space_count\
    \ = text.count(' ')\n        \n        space_count = text.count(' ')\n       \
    \ \n        space_count = text.count(' ')\n        \n        space_count = text.count('\
    \ ')\n        \n        space_count = text.count(' ')\n        \n        space_count\
    \ = text.count(' ')\n        \n        space_count = text.count(' ')\n       \
    \ \n        space_count = text.count(' ')\n        \n        space_count = text.count('\
    \ ')\n        \n        space_count = text.count(' ')\n        \n        space_count\
    \ = text.count(' ')\n        \n        space_count = text.count(' ')\n       \
    \ \n        space_count = text.count(' ')\n        \n        space_count = text.count('\
    \ ')\n        \n        space_count = text.count(' ')\n        \n        space_count\
    \ = text.count(' ')\n        \n        space_count = text.count(' ')\n       \
    \ \n        space_count = text.count(' ')\n        \n        space_count = text.count('\
    \ ')\n        \n        space_count = text.count(' ')\n        \n        space_count\
    \ = text.count(' ')\n        \n        space_count = text.count(' ')\n       \
    \ \n        space_\nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t\
    @test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif\
    \ \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ) == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\") == \"\
    Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprw0ur2m_.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprw0ur2m_.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    space_count = count_spaces(text)\n\
    \    \n    if space_count == 1\n        return text\n    \n    if space_count\
    \ > 2\n        return replace_spaces(text)\n    \n    return replace_spaces(text)\
    \ \nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    count_spaces(text::String)\n\
    using Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg860qfg_.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg860qfg_.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    words = split(text,\
    \ \" \")\n    \n    fixed_text = \"\"\n    \n    for word in words\n        fixed_text\
    \ += word\n        if fixed_text != \"\" && fixed_text != \" \" && fixed_text\
    \ != \"  \"\n            fixed_text += \"_\"\n        end\n    end\n    \n   \
    \ return fixed_text\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    split_words(text::String)\n\
    \    \n    Split text into words. \n    \n    split_words(\"Example\") == \"Example\"\
    \n    split_words(\"Example 1\") == \"Example\"\n    split_words(\" Example 2\"\
    ) == \"Example_2\"\n    split_words(\" Example   3\") == \"Example_3\"\n    split_words(\"\
    Example   4\") == \"Example_4\"\n    split_words(\"Example   5\") == \"Example_5\"\
    \n    split_words(\"Example   6\") == \"Example_6\"\n    split_words(\"Example\
    \   7\") == \"Example_7\"\n    split_words(\"Example   8\") == \"Example_8\"\n\
    \    split_words(\"Example   9\") == \"Example_9\"\n    split_words(\"Example\
    \   10\") == \"Example_10\"\n    split_words(\"Example   11\") == \"Example_11\"\
    \n    split_words(\"Example   12\") == \"Example_12\"\n    split_words(\"Example\
    \   13\") == \"Example_13\"\n    split_words(\"Example   14\") == \"Example_14\"\
    \n    split_words(\"Example   15\") == \"Example_15\"\n    split_words(\"Example\
    \   16\") == \"Example_16\"\n    split_words(\"Example   17\") == \"Example_17\"\
    \n    split_words(\"Example   18\") == \"Example_18\"\n    split_words(\"Example\
    \   19\") == \"Example_19\"\n    split_words(\"Example   20\") == \"Example_20\"\
    \n    split_words(\"Example   21\") == \"Example_21\"\n    split_words(\"Example\
    \   22\") == \"Example_22\"\n    split_words(\"Example   23\") == \"Example_23\"\
    \n    split_words(\"Example   24\") == \"Example_24\"\n    split_words(\"Example\
    \   25\") == \"Example_25\"\n    split_words(\"Example   26\") == \"Example_26\"\
    \n    split_words(\"Example   27\") == \"Example_27\"\n    split_words(\"Example\
    \   28\") == \"Example_28\"\n    split_words(\"Example   29\") == \"Example_29\"\
    \n    split_words(\"Example   30\") == \"Example_30\"\n    split_words(\"Example\
    \   \nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
    Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"  \
    \ Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjunhnckh.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjunhnckh.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    fix_spaces_helper(text,\
    \ \"\", \"\")\nend\nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t\
    @test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif\
    \ \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ) == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\") == \"\
    Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpku8wpmh7.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"Example\") == \"Example\"\n  UndefVarError: fix_spaces_helper\
    \ not defined\n  Stacktrace:\n   [1] fix_spaces(::String) at /tmp/tmpku8wpmh7.jl:13\n\
    \   [2] top-level scope at /tmp/tmpku8wpmh7.jl:20\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpku8wpmh7.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpku8wpmh7.jl:21\n  Test threw exception\n  Expression: candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\"\n  UndefVarError: fix_spaces_helper not\
    \ defined\n  Stacktrace:\n   [1] fix_spaces(::String) at /tmp/tmpku8wpmh7.jl:13\n\
    \   [2] top-level scope at /tmp/tmpku8wpmh7.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpku8wpmh7.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpku8wpmh7.jl:22\n  Test threw exception\n  Expression: candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\n  UndefVarError:\
    \ fix_spaces_helper not defined\n  Stacktrace:\n   [1] fix_spaces(::String) at\
    \ /tmp/tmpku8wpmh7.jl:13\n   [2] top-level scope at /tmp/tmpku8wpmh7.jl:22\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpku8wpmh7.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpku8wpmh7.jl:23\n  Test threw exception\n  Expression: candidate(\"\
    Exa   mple\") == \"Exa-mple\"\n  UndefVarError: fix_spaces_helper not defined\n\
    \  Stacktrace:\n   [1] fix_spaces(::String) at /tmp/tmpku8wpmh7.jl:13\n   [2]\
    \ top-level scope at /tmp/tmpku8wpmh7.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpku8wpmh7.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpku8wpmh7.jl:24\n  Test threw exception\n  Expression: candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\"\n  UndefVarError: fix_spaces_helper\
    \ not defined\n  Stacktrace:\n   [1] fix_spaces(::String) at /tmp/tmpku8wpmh7.jl:13\n\
    \   [2] top-level scope at /tmp/tmpku8wpmh7.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpku8wpmh7.jl:19\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpku8wpmh7.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    replaced_text = text\n\
    \    \n    if text == \"\"\n        return replaced_text\n    \n    if text ==\
    \ \" \" \n        return replaced_text\n    \n    if text == \"  \"\n        return\
    \ replaced_text\n    \n    if text == \"  \"\n        return replaced_text\n \
    \   \n    if text == \" \" \n        return replaced_text\n    \n    if text ==\
    \ \"  \"\n        return replaced_text\n    \n    if text == \" \" \n        return\
    \ replaced_text\n    \n    if text == \"  \"\n        return replaced_text\n \
    \   \n    if text == \" \" \n        return replaced_text\n    \n    if text ==\
    \ \"  \"\n        return replaced_text\n    \n    if text == \" \" \n        return\
    \ replaced_text\n    \n    if text == \"  \"\n        return replaced_text\n \
    \   \n    if text == \" \" \n        return replaced_text\n    \n    if text ==\
    \ \"  \"\n        return replaced_text\n    \n    if text == \" \" \n        return\
    \ replaced_text\n    \n    if text == \"  \"\n        return replaced_text\n \
    \   \n    if text == \" \" \n        return replaced_text\n    \n    if text ==\
    \ \"  \"\n        return replaced_text\n    \n    if text == \" \" \n        return\
    \ replaced_text\n    \n    if text == \"  \"\n        return replaced_text\n \
    \   \n    if text == \" \" \n        return replaced_text\n    \n    if text ==\
    \ \"  \"\n        return replaced_text\n    \n    if text == \" \" \n        return\
    \ replaced_text\n    \n    if text == \"  \"\n        return replaced_text\n \
    \   \n    if text == \" \" \n        return replaced_text\n    \n    if text ==\
    \ \"  \"\n        return replaced_text\n    \n    if text == \" \" \n        return\
    \ replaced_text\n    \n    if text == \"  \"\n        return replaced_text\n \
    \   \n    if text == \" \" \n        return replaced_text\n    \n    if text ==\
    \ \"  \"\n        return replaced_text\n    \n    if text == \" \" \n        return\
    \ replaced_text\n    \n    if text == \"  \"\n        return replaced_text\n \
    \   \n    if text == \" \" \n        return replaced_text\n    \n    if text ==\
    \ \"  \"\n        return replaced_text\n    \n    if text == \" \" \n        return\
    \ replaced_text\n    \n    if text == \"  \"\n        return replaced_text\n \
    \   \n    if text == \" \" \n        return replaced_text\n    \n    if text ==\
    \ \"  \"\n        return replaced_text\n    \n    if text == \" \" \n        return\
    \ replaced_text\n    \n    if text == \"  \"\n        return replaced_text\n \
    \   \n    if text == \nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\
    \t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif\
    \ \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ) == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\") == \"\
    Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpknvfk__9.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpknvfk__9.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    text_split = split(text,\
    \ \" \")\n    \n    text_split = [replace(text_split[i], \"_\") for i in 1:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i in 2:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i in 3:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i in 4:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i in 5:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i in 6:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i in 7:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i in 8:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i in 9:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i in 10:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i in 11:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i in 12:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i in 13:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i in 14:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i in 15:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i in 16:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i in 17:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i in 18:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i in 19:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i in 20:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i in 21:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i in 22:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i in 23:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i in 24:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i in 25:length(text_split)]\n\
    \    \n    text_split = [replace(text_split[i], \"_\") for i in 26:length(text_split)]\n\
    \    \n    text_split = [\nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\
    \t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif\
    \ \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ) == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\") == \"\
    Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_334db7l.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_334db7l.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\
    \n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\"\
    ) == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\
    \"\"\nfunction fix_spaces(text::String)::String \n    \n    fix_spaces_helper(text,\
    \ \"\", \"\")\nend\nusing Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t\
    @test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif\
    \ \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ) == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\") == \"\
    Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp4nsbo3_2.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"Example\") == \"Example\"\n  UndefVarError: fix_spaces_helper\
    \ not defined\n  Stacktrace:\n   [1] fix_spaces(::String) at /tmp/tmp4nsbo3_2.jl:13\n\
    \   [2] top-level scope at /tmp/tmp4nsbo3_2.jl:20\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp4nsbo3_2.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmp4nsbo3_2.jl:21\n  Test threw exception\n  Expression: candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\"\n  UndefVarError: fix_spaces_helper not\
    \ defined\n  Stacktrace:\n   [1] fix_spaces(::String) at /tmp/tmp4nsbo3_2.jl:13\n\
    \   [2] top-level scope at /tmp/tmp4nsbo3_2.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp4nsbo3_2.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmp4nsbo3_2.jl:22\n  Test threw exception\n  Expression: candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\n  UndefVarError:\
    \ fix_spaces_helper not defined\n  Stacktrace:\n   [1] fix_spaces(::String) at\
    \ /tmp/tmp4nsbo3_2.jl:13\n   [2] top-level scope at /tmp/tmp4nsbo3_2.jl:22\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp4nsbo3_2.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmp4nsbo3_2.jl:23\n  Test threw exception\n  Expression: candidate(\"\
    Exa   mple\") == \"Exa-mple\"\n  UndefVarError: fix_spaces_helper not defined\n\
    \  Stacktrace:\n   [1] fix_spaces(::String) at /tmp/tmp4nsbo3_2.jl:13\n   [2]\
    \ top-level scope at /tmp/tmp4nsbo3_2.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp4nsbo3_2.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmp4nsbo3_2.jl:24\n  Test threw exception\n  Expression: candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\"\n  UndefVarError: fix_spaces_helper\
    \ not defined\n  Stacktrace:\n   [1] fix_spaces(::String) at /tmp/tmp4nsbo3_2.jl:13\n\
    \   [2] top-level scope at /tmp/tmp4nsbo3_2.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp4nsbo3_2.jl:19\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4nsbo3_2.jl:17\n"
  exit_code: 1
  status: Exception
