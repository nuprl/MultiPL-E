name: HumanEval_21_rescale_to_unit
language: julia
results:
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = Vector{Float64}(undef, length(numbers))\n    for number\
    \ in numbers\n        rescaled_numbers[number] = number/maximum(numbers)\n   \
    \ end\n    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmjgfvxs3.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmjgfvxs3.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</code>\n<|/ a |>\n<| a dscore=2 |>\nThis answer is a bit late, but I thought\
    \ I'd share my solution to this problem in case anyone else comes across this\
    \ question. \nThe function below takes in a vector of numbers and returns a vector\
    \ of numbers that have been rescaled to the range [0,1]. \n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppmteo9zy.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppmteo9zy.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = Vector{Float64}(undef, length(numbers))\n    for n\
    \ in numbers\n        rescaled_numbers[findall(n .< rescaled_numbers)] = 0.0\n\
    \        rescaled_numbers[findall(n .> rescaled_numbers)] = 1.0\n    end\n   \
    \ return rescaled_numbers\nend\n</cell>\n<text>\nLet's test our rescale_to_unit\
    \ function by applying it to the numbers we generated earlier:\nusing Test\n\n\
    @testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpao7byxtl.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpao7byxtl.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (maximum - minimum) / length(rescaled_numbers)\n\
    \    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpom7533al.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpom7533al.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpioesz95h.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpioesz95h.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (maximum - minimum) / (maximum(rescaled_numbers)\
    \ + minimum(rescaled_numbers))\n    return rescaled_numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4gb_gooe.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4gb_gooe.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<text>\nNow let's try it out!\nusing Test\n\n@testset begin\n\n\
    candidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t\
    @test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0,\
    \ 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0,\
    \ 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpomunearr.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpomunearr.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers ./=\
    \ maximum(rescaled_numbers)\n    return rescaled_numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzmmrneqo.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzmmrneqo.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwj_y8gt2.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwj_y8gt2.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers ./=\
    \ maximum(rescaled_numbers)\n    return rescaled_numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>\n# Let's try it out\nrescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n</cell>\n<text>\nThe function above is called a rescaling function, and\
    \ it rescales a vector from its original range to its new range. Let's see how\
    \ it works:\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t\
    @test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmyeui5k1.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmyeui5k1.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (maximum - minimum) / (maximum\
    \ - minimum)\n    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy8wg3ob8.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpy8wg3ob8.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers ./=\
    \ maximum(rescaled_numbers)\n    return rescaled_numbers\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = Vector{Float64}(undef, length(numbers))\n    for number\
    \ in numbers\n        rescaled_numbers[findall(rescaled_numbers .== number) ==\
    \ 1] = number\n    end\n    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprge8ijjp.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprge8ijjp.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled = minimum\
    \ + maximum * (numbers - minimum) / (maximum - minimum)\n    return rescaled\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1a3xbt3i.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1a3xbt3i.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp06_uov4.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpp06_uov4.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers ./=\
    \ maximum(rescaled_numbers)\n    return rescaled_numbers\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpw4hq2k4g.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpw4hq2k4g.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers ./=\
    \ maximum(rescaled_numbers)\n    return rescaled_numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz8ctvhqh.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpz8ctvhqh.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers.map(x -> x / minimum(numbers))\n    return\
    \ rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6gegsk_r.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6gegsk_r.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (maximum - minimum) / length(rescaled_numbers)\n\
    \    return rescaled_numbers\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia\
    \ |>\nI wrote a package for this:\nhttps://github.com/jrwlk/LinearAlgebra.jl\n\
    <code>\nusing LinearAlgebra\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgd0heu6j.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgd0heu6j.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = Vector{Float64}(undef, length(numbers))\n    smallest\
    \ = minimum(numbers)\n    largest = maximum(numbers)\n    rescaled_numbers[1]\
    \ = smallest / largest\n    for i = 2:length(numbers)\n        rescaled_numbers[i]\
    \ = rescaled_numbers[i-1] * numbers[i] / largest\n    end\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcu3q_74h.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcu3q_74h.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (rescaled_numbers .- minimum)\
    \ / (maximum - minimum)\n    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm8fj9jvw.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm8fj9jvw.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers ./= maximum - minimum\n    return\
    \ rescaled_numbers\nend\n</cell>\n<text>\nExercise 3: Write a function that will\
    \ take a vector of numbers and return a vector of numbers that have been scaled\
    \ to be between 0 and 1.\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg1ek3po0.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg1ek3po0.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdc3pskkc.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdc3pskkc.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (maximum - minimum) / length(rescaled_numbers)\n\
    \    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfmeynayl.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfmeynayl.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0sjoyv9p.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0sjoyv9p.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (maximum - minimum) / length(rescaled_numbers)\n\
    \    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyp994u18.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyp994u18.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n    rescaled\
    \ = minimum + maximum * (numbers - minimum) / (maximum - minimum)\n    return\
    \ rescaled\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi9c1imaz.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpi9c1imaz.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (maximum - minimum) / (maximum(rescaled_numbers)\
    \ + minimum(rescaled_numbers))\n    return rescaled_numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>\n# test the function\nrescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n</cell>\n<text>\nThe function above is called rescale_to_unit. Now let's\
    \ apply it to our data.\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbzfep9f9.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbzfep9f9.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (maximum - minimum) / maximum\n\
    \    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpe5dgo9f1.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpe5dgo9f1.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (maximum - minimum) / length(rescaled_numbers)\n\
    \    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n# Test\
    \ the rescale_to_unit function\nrescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n</cell>\n\
    <text>\nExercise: Write a function that takes a list of numbers and returns a\
    \ list of numbers that have been scaled to the unit interval (0, 1).\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu_zldzdp.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpu_zldzdp.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (rescaled_numbers .- minimum)\
    \ / (maximum - minimum)\n    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkqdfee8a.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkqdfee8a.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (rescaled_numbers .- minimum)\
    \ / (maximum - minimum)\n    return rescaled_numbers\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkq8hc1ac.jl:18\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  MethodError: no method\
    \ matching min(::Array{Float64,1})\n  Closest candidates are:\n    min(::Any,\
    \ !Matched::Missing) at missing.jl:126\n    min(::Any, !Matched::Any) at operators.jl:422\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(::Array{Float64,1}) at /tmp/tmpkq8hc1ac.jl:7\n\
    \   [2] top-level scope at /tmp/tmpkq8hc1ac.jl:18\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkq8hc1ac.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpkq8hc1ac.jl:19\n  Test threw exception\n  Expression: candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n  MethodError: no method matching min(::Array{Float64,1})\n\
    \  Closest candidates are:\n    min(::Any, !Matched::Missing) at missing.jl:126\n\
    \    min(::Any, !Matched::Any) at operators.jl:422\n    min(::Any, !Matched::Any,\
    \ !Matched::Any, !Matched::Any...) at operators.jl:529\n    ...\n  Stacktrace:\n\
    \   [1] rescale_to_unit(::Array{Float64,1}) at /tmp/tmpkq8hc1ac.jl:7\n   [2] top-level\
    \ scope at /tmp/tmpkq8hc1ac.jl:19\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkq8hc1ac.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpkq8hc1ac.jl:20\n  Test threw exception\n  Expression: candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n  MethodError: no method\
    \ matching min(::Array{Float64,1})\n  Closest candidates are:\n    min(::Any,\
    \ !Matched::Missing) at missing.jl:126\n    min(::Any, !Matched::Any) at operators.jl:422\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(::Array{Float64,1}) at /tmp/tmpkq8hc1ac.jl:7\n\
    \   [2] top-level scope at /tmp/tmpkq8hc1ac.jl:20\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkq8hc1ac.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpkq8hc1ac.jl:21\n  Test threw exception\n  Expression: candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n  MethodError: no method\
    \ matching min(::Array{Float64,1})\n  Closest candidates are:\n    min(::Any,\
    \ !Matched::Missing) at missing.jl:126\n    min(::Any, !Matched::Any) at operators.jl:422\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(::Array{Float64,1}) at /tmp/tmpkq8hc1ac.jl:7\n\
    \   [2] top-level scope at /tmp/tmpkq8hc1ac.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkq8hc1ac.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpkq8hc1ac.jl:22\n  Test threw exception\n  Expression: candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n  MethodError: no method\
    \ matching min(::Array{Float64,1})\n  Closest candidates are:\n    min(::Any,\
    \ !Matched::Missing) at missing.jl:126\n    min(::Any, !Matched::Any) at operators.jl:422\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(::Array{Float64,1}) at /tmp/tmpkq8hc1ac.jl:7\n\
    \   [2] top-level scope at /tmp/tmpkq8hc1ac.jl:22\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkq8hc1ac.jl:17\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkq8hc1ac.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (rescaled_numbers .- minimum)\
    \ / (maximum - minimum)\n    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpaptomrs5.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpaptomrs5.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test the function\nrescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nThe function rescale_to_unit takes a\
    \ list of numbers and returns a list of numbers rescaled to have minimum 0 and\
    \ maximum 1.\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t\
    @test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdoce1saf.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdoce1saf.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = Vector{Float64}(undef, length(numbers))\n    for number\
    \ in numbers\n        rescaled_numbers[minimum(numbers)] = numbers[minimum(numbers)]\n\
    \        rescaled_numbers[maximum(numbers)] = numbers[maximum(numbers)]\n    end\n\
    \    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph3kye181.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmph3kye181.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (maximum - minimum) / maximum\n\
    \    return rescaled_numbers\nend\n</cell>\n<text>\nNow let's try it out on some\
    \ random numbers:\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0j7w4n7l.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0j7w4n7l.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (rescaled_numbers ./ maximum -\
    \ 1.0) .* maximum\n    return rescaled_numbers\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdvcpy50k.jl:18\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  UndefVarError: minimum\
    \ not defined\n  Stacktrace:\n   [1] rescale_to_unit(::Array{Float64,1}) at /tmp/tmpdvcpy50k.jl:7\n\
    \   [2] top-level scope at /tmp/tmpdvcpy50k.jl:18\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpdvcpy50k.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpdvcpy50k.jl:19\n  Test threw exception\n  Expression: candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n  UndefVarError: minimum not defined\n  Stacktrace:\n\
    \   [1] rescale_to_unit(::Array{Float64,1}) at /tmp/tmpdvcpy50k.jl:7\n   [2] top-level\
    \ scope at /tmp/tmpdvcpy50k.jl:19\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpdvcpy50k.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpdvcpy50k.jl:20\n  Test threw exception\n  Expression: candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n  UndefVarError: minimum\
    \ not defined\n  Stacktrace:\n   [1] rescale_to_unit(::Array{Float64,1}) at /tmp/tmpdvcpy50k.jl:7\n\
    \   [2] top-level scope at /tmp/tmpdvcpy50k.jl:20\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpdvcpy50k.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpdvcpy50k.jl:21\n  Test threw exception\n  Expression: candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n  UndefVarError: minimum\
    \ not defined\n  Stacktrace:\n   [1] rescale_to_unit(::Array{Float64,1}) at /tmp/tmpdvcpy50k.jl:7\n\
    \   [2] top-level scope at /tmp/tmpdvcpy50k.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpdvcpy50k.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpdvcpy50k.jl:22\n  Test threw exception\n  Expression: candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n  UndefVarError: minimum\
    \ not defined\n  Stacktrace:\n   [1] rescale_to_unit(::Array{Float64,1}) at /tmp/tmpdvcpy50k.jl:7\n\
    \   [2] top-level scope at /tmp/tmpdvcpy50k.jl:22\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpdvcpy50k.jl:17\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdvcpy50k.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ (rescaled_numbers .- minimum(rescaled_numbers)) ./ maximum(rescaled_numbers)\n\
    \    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.3>\n# Let's\
    \ test our rescale_to_unit function\nrescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    </cell>\n<text>\nExercise: Write a function that takes a list of numbers and returns\
    \ the same list but with each number multiplied by a constant factor.\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0c1p5yjk.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0c1p5yjk.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled = minimum\
    \ + maximum * (numbers - minimum) / (maximum - minimum)\n    return rescaled\n\
    end\n</cell>\n<text>\nNow let's try it out on some numbers:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9mm13xh4.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9mm13xh4.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7o66jvsl.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7o66jvsl.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers ./=\
    \ maximum(rescaled_numbers)\n    return rescaled_numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk85m7pby.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk85m7pby.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers ./=\
    \ maximum(rescaled_numbers)\n    return rescaled_numbers\nend\n</cell>\n<text>\n\
    Let's try it out!\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa5stjb6u.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpa5stjb6u.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers ./=\
    \ maximum(rescaled_numbers)\n    return rescaled_numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>\n# Test the rescale_to_unit function\n@test rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n</cell>\n<text>\nExercise\
    \ 2: Rescale the numbers to unit interval\nWrite a function that rescales the\
    \ numbers to unit interval (0 to 1)\nThe function should take a list of numbers\
    \ as input, and output a list of numbers as output\nThe function should rescale\
    \ the numbers to unit interval (0 to 1)\nThe function should return an error if\
    \ the input list contains less than two elements\nThe function should return an\
    \ error if the input list contains elements that are not numbers (i.e. strings\
    \ or booleans)\nThe function should return an error if the input list contains\
    \ elements that are not numbers (i.e. strings or booleans)\nThe function should\
    \ return an error if the input list contains elements that are not numbers (i.e.\
    \ strings or booleans)\nThe function should return an error if the input list\
    \ contains elements that are not numbers (i.e. strings or booleans)\nThe function\
    \ should return an error if the input list contains elements that are not numbers\
    \ (i.e. strings or booleans)\nThe function should return an error if the input\
    \ list contains elements that are not numbers (i.e. strings or booleans)\nThe\
    \ function should return an error if the input list contains elements that are\
    \ not numbers (i.e. strings or booleans)\nThe function should return an error\
    \ if the input list contains elements that are not numbers (i.e. strings or booleans)\n\
    The function should return an error if the input list contains elements that are\
    \ not numbers (i.e. strings or booleans)\nThe function should return an error\
    \ if the input list contains elements that are not numbers (i.e. strings or booleans)\n\
    The function should return an error if the input list contains elements that are\
    \ not numbers (i.e. strings or booleans)\nThe function should return an error\
    \ if the input list contains elements that are not numbers (i.e. strings or booleans)\n\
    The function should return an error if the input list contains elements that are\
    \ not numbers (i.e. strings or booleans)\nThe function should return an error\
    \ if the input list contains elements that are not numbers (i.e. strings or booleans)\n\
    The function should return an error if the input list contains elements that are\
    \ not numbers (i.e. strings or booleans)\nThe function should return an error\
    \ if the input list contains elements that are not numbers (i.e. strings or booleans)\n\
    The function should return an error if the input list contains elements that are\
    \ not numbers (i.e. strings or booleans)\nThe function should return an error\
    \ if the input list contains elements that are not numbers (i.e. strings or booleans)\n\
    The function should return an error if the input \nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn39dvgqx.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpn39dvgqx.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmperyp0q79.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmperyp0q79.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</code>\n<|/ a tags=julia,arrays |>\n<| c |>\nThis does not work for me.\
    \ `minimum(numbers)` returns `0.0` for all elements. `maximum(numbers)` returns\
    \ `1.0` for all elements. `rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)`\
    \ returns `NaN` for all elements. `rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)`\
    \ returns `NaN` for all elements. `rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)`\
    \ returns `NaN` for all elements. `rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)`\
    \ returns `NaN` for all elements. `rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)`\
    \ returns `NaN` for all elements. `rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)`\
    \ returns `NaN` for all elements. `rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)`\
    \ returns `NaN` for all elements. `rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)`\
    \ returns `NaN` for all elements. `rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)`\
    \ returns `NaN` for all elements. `rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)`\
    \ returns `NaN` for all elements. `rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)`\
    \ returns `NaN` for all elements. `rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)`\
    \ returns `NaN` for all elements. `rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)`\
    \ returns `NaN` for all elements. `rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)`\
    \ returns `NaN` for all elements. `rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)`\
    \ returns `NaN` for all elements. `rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)`\
    \ returns `NaN` for all elements. `rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)`\
    \ returns `NaN` for all elements. `rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)`\
    \ returns `NaN` \nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9h1ehfnt.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9h1ehfnt.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = Vector{Float64}(undef, length(numbers))\n    for number\
    \ in numbers\n        rescaled_numbers[number] = number\n    end\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.0>\n# Test the function\nrescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nExercise 3: Implement a function that\
    \ takes a list of numbers and returns a list of numbers that is linearly transformed\
    \ to have minimum 0 and maximum 1.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbacavli5.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbacavli5.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.3>\n# Test the function\nrescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ a list of numbers and returns the same list but with each number multiplied\
    \ by a constant factor.\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf1owpbf8.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpf1owpbf8.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    \n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (rescaled_numbers ./ maximum)\
    \ .* maximum\n    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3sfzk_gw.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3sfzk_gw.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (rescaled_numbers .- minimum)\
    \ / (maximum - minimum)\n    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprmrs23xz.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprmrs23xz.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (maximum - minimum) / (maximum\
    \ - minimum)\n    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcx2iiaen.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcx2iiaen.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (rescaled_numbers .- minimum)\
    \ / (maximum - minimum)\n    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptjq5byvw.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptjq5byvw.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (maximum - minimum) / length(rescaled_numbers)\n\
    \    return rescaled_numbers\nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work\
    \ for `[1.0, 2.0, 3.0, 4.0, 5.0]`\n<|/ c |>\n<| c |>\nI didn't downvote you, but\
    \ this doesn't work for `[1.0, 2.0, 3.0, 4.0, 5.0]` because `minimum` and `maximum`\
    \ will be `1.0` and `5.0` respectively, which means `rescaled_numbers` will be\
    \ `[0.0, 0.25, 0.5, 0.75, 1.0]`.\n<|/ c |>\n<| c |>\nI didn't downvote you, but\
    \ this doesn't work for `[1.0, 2.0, 3.0, 4.0, 5.0]` because `minimum` and `maximum`\
    \ will be `1.0` and `5.0` respectively, which means `rescaled_numbers` will be\
    \ `[0.0, 0.25, 0.5, 0.75, 1.0]`.\n<|/ c |>\n<| c |>\nI didn't downvote you, but\
    \ this doesn't work for `[1.0, 2.0, 3.0, 4.0, 5.0]` because `minimum` and `maximum`\
    \ will be `1.0` and `5.0` respectively, which means `rescaled_numbers` will be\
    \ `[0.0, 0.25, 0.5, 0.75, 1.0]`.\n<|/ c |>\n<| c |>\nI didn't downvote you, but\
    \ this doesn't work for `[1.0, 2.0, 3.0, 4.0, 5.0]` because `minimum` and `maximum`\
    \ will be `1.0` and `5.0` respectively, which means `rescaled_numbers` will be\
    \ `[0.0, 0.25, 0.5, 0.75, 1.0]`.\n<|/ c |>\n<| a tags=julia |>\nI believe that\
    \ you can do this with broadcasting and the min and max functions:\n<code>\njulia>\
    \ [1.0, 2.0, 3.0, 4.0, 5.0] .- minimum([1.0, 2.0, 3.0, 4.0, 5.0])\n4-element Vector{Float64}:\n\
    \ 0.0\n 0.25\n 0.5\n 0.75\n 1.0\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis doesn't\
    \ work for `[1.0, 2.0, 3.0, 4.0, 5.0]`\n<|/ c |>\n<| c |>\nI didn't downvote you,\
    \ but this doesn't work for `[1.0, 2.0, 3.0, 4.0, 5.0]` because `minimum` and\
    \ `maximum` will be `1.0` and `5.0` respectively, which means `rescaled_numbers`\
    \ will be `[0.0, 0.25, 0.5, 0.75, 1.0]`.\n<|/ c |>\n<| c |>\nI didn't downvote\
    \ you, but this doesn't work for `[1.0, 2.0, 3.0, 4.\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi1cw9_dv.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpi1cw9_dv.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    minimum == 0 ?\
    \ minimum : error(\"minimum must be non-zero\")\n    maximum == 0 ? maximum :\
    \ error(\"maximum must be non-zero\")\n    minimum == maximum == 0 ? minimum :\
    \ error(\"minimum must be non-zero\")\n    minimum == 0 ? minimum : error(\"maximum\
    \ must be non-zero\")\n    maximum == 1 ? maximum : error(\"maximum must be non-zero\"\
    )\n    minimum == 0 ? minimum : error(\"minimum must be non-zero\")\n    maximum\
    \ == 1 ? maximum : error(\"maximum must be non-zero\")\n    minimum == 0 ? minimum\
    \ : error(\"minimum must be non-zero\")\n    maximum == 1 ? maximum : error(\"\
    maximum must be non-zero\")\n    minimum == 0 ? minimum : error(\"minimum must\
    \ be non-zero\")\n    maximum == 1 ? maximum : error(\"maximum must be non-zero\"\
    )\n    minimum == 0 ? minimum : error(\"minimum must be non-zero\")\n    maximum\
    \ == 1 ? maximum : error(\"maximum must be non-zero\")\n    minimum == 0 ? minimum\
    \ : error(\"minimum must be non-zero\")\n    maximum == 1 ? maximum : error(\"\
    maximum must be non-zero\")\n    minimum == 0 ? minimum : error(\"minimum must\
    \ be non-zero\")\n    maximum == 1 ? maximum : error(\"maximum must be non-zero\"\
    )\n    minimum == 0 ? minimum : error(\"minimum must be non-zero\")\n    maximum\
    \ == 1 ? maximum : error(\"maximum must be non-zero\")\n    minimum == 0 ? minimum\
    \ : error(\"minimum must be non-zero\")\n    maximum == 1 ? maximum : error(\"\
    maximum must be non-zero\")\n    minimum == 0 ? minimum : error(\"minimum must\
    \ be non-zero\")\n    maximum == 1 ? maximum : error(\"maximum must be non-zero\"\
    )\n    minimum == 0 ? minimum : error(\"minimum must be non-zero\")\n    maximum\
    \ == 1 ? maximum : error(\"maximum must be non-zero\")\n    minimum == 0 ? minimum\
    \ : error(\"minimum must be non-zero\")\n    maximum == 1 ? maximum : error(\"\
    maximum must be non-zero\")\n    minimum == 0 ? minimum : error(\"minimum must\
    \ be non-zero\")\n    maximum == 1 ? maximum : error(\"maximum must be non-zero\"\
    )\n    minimum == 0 ? minimum : error(\"minimum must be non-zero\")\n    maximum\
    \ == 1 ? maximum : error(\"maximum must be non-zero\")\n    minimum == 0 ? minimum\
    \ : error(\"minimum must be non-zero\")\n    maximum == 1 ? maximum : error(\"\
    maximum must be non-zero\")\n    minimum == 0 ? minimum : error(\"minimum must\
    \ be non-zero\")\n    maximum == 1 ? maximum : error(\"maximum must be non-zero\"\
    )\n    minimum == 0 ? minimum : error(\"minimum must be non-zero\")\n    maximum\
    \ == 1 ? maximum : error(\"maximum must be non-zero\")\n    minimum == 0 ? minimum\
    \ : error(\"minimum must be non-zero\")\n    maximum == 1 ? \nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: colon expected in \"?\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp132iz4so.jl:49\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp132iz4so.jl:49\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    minimum == 0 ?\
    \ minimum = 1e-10 : minimum\n    maximum == 0 ? maximum = 1 : maximum\n    numbers\
    \ = (numbers - minimum) / (maximum - minimum)\n    return numbers\nend\n</cell>\n\
    <code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2n6u5b0x.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2n6u5b0x.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    \n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (rescaled_numbers .- minimum)\
    \ / (maximum - minimum)\n    \n    return rescaled_numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>\n# Test the function\nrescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n</cell>\n<text>\nExercise 4\nWrite a function that takes a list of numbers\
    \ and returns the same list but with the smallest number set to zero, and the\
    \ largest set to one.\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxx3v0viv.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxx3v0viv.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled = numbers .- minimum(numbers)\n    rescaled ./= maximum(rescaled)\n\
    \    return rescaled\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz95o0sqj.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpz95o0sqj.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (maximum - minimum) / maximum\n\
    \    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm4bfzw_9.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm4bfzw_9.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    minimum == maximum\
    \ == 0 ? minimum : (minimum + maximum)/2\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkfmru1cg.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkfmru1cg.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled = minimum\
    \ + maximum * (numbers - minimum) / (maximum - minimum)\n    return rescaled\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpassksw22.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpassksw22.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (rescaled_numbers .- minimum)\
    \ / (maximum - minimum)\n    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7ukb4cv5.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7ukb4cv5.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled = minimum\
    \ + maximum * (numbers - minimum) / (maximum - minimum)\n    return rescaled\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7n0yi6qj.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7n0yi6qj.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\n# TEST rescale_to_unit\n@test rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n</cell>\n<text>\nExercise\
    \ 3: Rescale a vector to range [0.0, 1.0]\nWrite a function that takes as input\
    \ a vector of numbers and returns a vector of the same length\n    in which each\
    \ element is the result of applying a linear transform to the input vector\n \
    \   such that the smallest number will become 0 and the largest will become 1\n\
    \    >>> rescale_to_unit_vector([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5,\
    \ 0.75, 1.0]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj0ml85t2.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj0ml85t2.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers.map(x -> x/minimum(numbers))\n    return rescaled_numbers\n\
    end\n</code>\n<|/ a |>\n<| a dscore=2 |>\nI believe that using map and min is\
    \ the most efficient way to do this. \n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t\
    @test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0,\
    \ 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0,\
    \ 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpns7hsjly.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpns7hsjly.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (maximum - minimum) / maximum\n\
    \    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp99jn1vrh.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp99jn1vrh.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (rescaled_numbers .- minimum)\
    \ / (maximum - minimum)\n    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8yr63z0f.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8yr63z0f.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test the function\nrescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nExercise: Write a function that will\
    \ take a list of numbers and return a list with each number multiplied by a constant\
    \ factor.\n    For example, if the constant factor is 2, then the function should\
    \ return [2.0, 4.0, 6.0, 8.0, 10.0].\n    Make sure you understand what happens\
    \ when you multiply a number by 0.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1xpa0e23.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1xpa0e23.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (rescaled_numbers ./ maximum -\
    \ 1.0) .* maximum\n    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test the rescale_to_unit function\nrescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    </cell>\n<text>\nThe function rescale_to_unit takes a list of numbers and returns\
    \ a list of numbers that have been rescaled so that they have unit variance.\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvpg5j8m8.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvpg5j8m8.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    numbers = (numbers\
    \ - minimum) / (maximum - minimum)\n    return numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpycpwq6qe.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpycpwq6qe.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n    rescaled\
    \ = numbers .- minimum\n    rescaled = (rescaled ./ maximum - minimum) .* maximum\n\
    \    return rescaled\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbdzobiow.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbdzobiow.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    numbers = (numbers\
    \ - minimum) / (maximum - minimum)\n    return numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn6khopgs.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpn6khopgs.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    \n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (rescaled_numbers .- minimum)\
    \ / (maximum - minimum)\n    \n    return rescaled_numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_6jr5v_n.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_6jr5v_n.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    \n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (rescaled_numbers .- minimum)\
    \ / (maximum - minimum)\n    rescaled_numbers .= maximum - rescaled_numbers\n\
    \    \n    return rescaled_numbers\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp69xk51ty.jl:21\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  MethodError: no method\
    \ matching min(::Array{Float64,1})\n  Closest candidates are:\n    min(::Any,\
    \ !Matched::Missing) at missing.jl:126\n    min(::Any, !Matched::Any) at operators.jl:422\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(::Array{Float64,1}) at /tmp/tmp69xk51ty.jl:7\n\
    \   [2] top-level scope at /tmp/tmp69xk51ty.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp69xk51ty.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmp69xk51ty.jl:22\n  Test threw exception\n  Expression: candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n  MethodError: no method matching min(::Array{Float64,1})\n\
    \  Closest candidates are:\n    min(::Any, !Matched::Missing) at missing.jl:126\n\
    \    min(::Any, !Matched::Any) at operators.jl:422\n    min(::Any, !Matched::Any,\
    \ !Matched::Any, !Matched::Any...) at operators.jl:529\n    ...\n  Stacktrace:\n\
    \   [1] rescale_to_unit(::Array{Float64,1}) at /tmp/tmp69xk51ty.jl:7\n   [2] top-level\
    \ scope at /tmp/tmp69xk51ty.jl:22\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp69xk51ty.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmp69xk51ty.jl:23\n  Test threw exception\n  Expression: candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n  MethodError: no method\
    \ matching min(::Array{Float64,1})\n  Closest candidates are:\n    min(::Any,\
    \ !Matched::Missing) at missing.jl:126\n    min(::Any, !Matched::Any) at operators.jl:422\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(::Array{Float64,1}) at /tmp/tmp69xk51ty.jl:7\n\
    \   [2] top-level scope at /tmp/tmp69xk51ty.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp69xk51ty.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmp69xk51ty.jl:24\n  Test threw exception\n  Expression: candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n  MethodError: no method\
    \ matching min(::Array{Float64,1})\n  Closest candidates are:\n    min(::Any,\
    \ !Matched::Missing) at missing.jl:126\n    min(::Any, !Matched::Any) at operators.jl:422\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(::Array{Float64,1}) at /tmp/tmp69xk51ty.jl:7\n\
    \   [2] top-level scope at /tmp/tmp69xk51ty.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp69xk51ty.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmp69xk51ty.jl:25\n  Test threw exception\n  Expression: candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n  MethodError: no method\
    \ matching min(::Array{Float64,1})\n  Closest candidates are:\n    min(::Any,\
    \ !Matched::Missing) at missing.jl:126\n    min(::Any, !Matched::Any) at operators.jl:422\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(::Array{Float64,1}) at /tmp/tmp69xk51ty.jl:7\n\
    \   [2] top-level scope at /tmp/tmp69xk51ty.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp69xk51ty.jl:20\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp69xk51ty.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (rescaled_numbers .- minimum)\
    \ / (maximum - minimum)\n    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq94hxv89.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq94hxv89.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (maximum - minimum) / length(rescaled_numbers)\n\
    \    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n# Test\
    \ the function\nrescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\n\
    The function rescale_to_unit takes a list of numbers and returns a list of numbers\
    \ rescaled to the range [0, 1].\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppbh0r9aa.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppbh0r9aa.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<text>\nNow let's try it out on some random numbers:\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp4ba53n1.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpp4ba53n1.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers ./=\
    \ maximum(rescaled_numbers)\n    return rescaled_numbers\nend\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a tags=julia |>\nThe solution from is very elegant, but I think\
    \ it can be simplified a bit:\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcsikx0kr.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcsikx0kr.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp99beogrm.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp99beogrm.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (rescaled_numbers ./ maximum -\
    \ 1.0) .* maximum\n    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test the function\nrescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a list of numbers and returns the same\
    \ list but with the smallest number becoming 0 and the largest becoming 1.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpw91yp6og.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpw91yp6og.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test the rescale_to_unit function\n\
    rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nThe function rescale_to_unit\
    \ takes a list of numbers and returns a list of numbers that have been rescaled\
    \ to a range of 0 to 1.\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7sb8zij0.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7sb8zij0.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (rescaled_numbers .- minimum)\
    \ / (maximum - minimum)\n    return rescaled_numbers\nend\n</cell>\n<text>\nNow\
    \ let's try it out on some random numbers:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpaphd6egl.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpaphd6egl.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (rescaled_numbers .- minimum)\
    \ / (maximum - minimum)\n    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3gpj25x9.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3gpj25x9.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled = minimum\
    \ + maximum*(numbers - minimum)/(maximum - minimum)\n    return rescaled\nend\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't seem to work. `rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])` returns `[0.0, 0.25, 0.5, 0.75, 1.0]` instead of `[0.0,\
    \ 0.5, 1.0, 1.5, 2.0]`\n<|/ c |>\n<| c |>\nI tested it and it works. I used Julia\
    \ 0.6.2\n<|/ c |>\n<| c |>\nAh, I see. I was using 0.6.1 which didn't have `Vector{Float64}`\
    \ so I assumed it didn't work. Thanks!\n<|/ c |>\n<| c |>\nI added a version that\
    \ works with Julia 0.6.1\n<|/ c |>\n<| a dscore=2 |>\nI wrote a package for this:\n\
    https://github.com/jrwlk/ArrayOps\n<code>\nusing ArrayOps\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2hf6codq.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2hf6codq.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (rescaled_numbers .- minimum)\
    \ / (maximum - minimum)\n    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqvrzs6i9.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqvrzs6i9.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    \n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (maximum - minimum) / (maximum(rescaled_numbers)\
    \ + minimum(rescaled_numbers))\n    \n    return rescaled_numbers\nend\n</cell>\n\
    <code language=julia-1.5>\n# Test\nrescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    </cell>\n<text>\nThe function rescale_to_unit takes a list of numbers and returns\
    \ a list of numbers that have been rescaled so that they have unit variance.\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmpe24do_.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmpe24do_.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (rescaled_numbers .- minimum)\
    \ / (maximum - minimum)\n    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp15ei0u5r.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp15ei0u5r.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers ./=\
    \ maximum(rescaled_numbers)\n    return rescaled_numbers\nend\n</cell>\n<text>\n\
    The function rescale_to_unit takes a list of numbers and returns a list of numbers\
    \ in which each number has been rescaled so that its smallest value is 0 and its\
    \ largest value is 1.\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpldq1_ua_.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpldq1_ua_.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppd34z2wb.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppd34z2wb.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = Vector{Float64}(length(numbers))\n    rescaled_numbers[1]\
    \ = numbers[1]\n    for i = 2:length(numbers)\n        rescaled_numbers[i] = numbers[i]\
    \ - rescaled_numbers[i-1]\n    end\n    return rescaled_numbers\nend\n</cell>\n\
    <text>\nNow let's try it out!\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv2ohdv4h.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpv2ohdv4h.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled = minimum\
    \ + maximum * (numbers - minimum) / (maximum - minimum)\n    return rescaled\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpohr1vwqz.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpohr1vwqz.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled = minimum\
    \ + maximum * (numbers - minimum) / (maximum - minimum)\n    return rescaled\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test the function\nrescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nExercise: Write a function that takes\
    \ a vector of numbers and returns a vector of numbers that have been scaled to\
    \ the range [0, 1].\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5edujdfb.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5edujdfb.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis does not answer the question.\
    \ OP asked for a function that will rescale a list of numbers to [0,1]\n<|/ c\
    \ |>\n<| c |>\nThe question was \"Given a list of numbers, how do I rescale them\
    \ to [0,1]?\" The answer was \"Use `rescale_to_unit`\". And I provided a function\
    \ that does exactly that. Why do you think it doesn't?\n<|/ c |>\n<| c |>\nI see\
    \ your point, but your answer does not answer the question. OP asked for a function\
    \ that will rescale a list of numbers to [0,1]. Your answer does that, but does\
    \ not answer the question. Your answer does not rescale a list of numbers to [0,1].\
    \ Your answer rescales a list of numbers to [0,1]. Your answer does not rescale\
    \ a list of numbers to [0,1]. Your answer rescales a list of numbers to [0,1].\
    \ Your answer does not rescale a list of numbers to [0,1]. Your answer rescales\
    \ a list of numbers to [0,1]. Your answer does not rescale a list of numbers to\
    \ [0,1]. Your answer rescales a list of numbers to [0,1]. Your answer does not\
    \ rescale a list of numbers to [0,1]. Your answer rescales a list of numbers to\
    \ [0,1]. Your answer does not rescale a list of numbers to [0,1]. Your answer\
    \ rescales a list of numbers to [0,1]. Your answer does not rescale a list of\
    \ numbers to [0,1]. Your answer rescales a list of numbers to [0,1]. Your answer\
    \ does not rescale a list of numbers to [0,1]. Your answer rescales a list of\
    \ numbers to [0,1]. Your answer does not rescale a list of numbers to [0,1]. Your\
    \ answer rescales a list of numbers to [0,1]. Your answer does not rescale a list\
    \ of numbers to [0,1]. Your answer rescales a list of numbers to [0,1]. Your answer\
    \ does not rescale a list of numbers to [0,1]. Your answer rescales a list of\
    \ numbers to [0,1]. Your answer does not rescale a list of numbers to [0,1]. Your\
    \ answer rescales a list of numbers to [0,1]. Your answer does not rescale a list\
    \ of numbers to [0,1]. Your answer rescales a list of numbers to [0,1]. Your answer\
    \ does not rescale a list of numbers to [0,1]. Your answer rescales a list of\
    \ numbers to [0,1]. Your answer does not rescale a list of numbers to [0,1]. Your\
    \ answer rescales a list of numbers to [0,1]. Your answer does not rescale a list\
    \ of numbers to [0,1]. Your answer rescales a list of numbers to [0,1]. \nusing\
    \ Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2vefejff.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2vefejff.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled = minimum\
    \ + maximum*(numbers - minimum)/(maximum - minimum)\n    return rescaled\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbyy49lsz.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbyy49lsz.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (rescaled_numbers .- minimum)\
    \ / (maximum - minimum)\n    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test the rescale_to_unit function\nrescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    </cell>\n<text>\nExercise 3: Implement the function rescale_from_unit, which will\
    \ rescale a list of numbers from 0 to 1 to the range of the original numbers.\
    \ \n    For example, if the original numbers are [1.0, 2.0, 3.0, 4.0, 5.0], the\
    \ rescaled numbers will be [0.0, 0.25, 0.5, 0.75, 1.0].\n    \n    Make sure you\
    \ understand what this function does before you implement it.\n    \n    You can\
    \ use the rescale_to_unit function you defined earlier.\n    \n    >>> rescale_from_unit([0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n    [1.0, 2.0, 3.0, 4.0, 5.0]\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcl1kssyi.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcl1kssyi.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (rescaled_numbers .- minimum)\
    \ / (maximum - minimum)\n    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    # TEST rescale_to_unit\n@test rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a list of numbers and returns a list of numbers that have been scaled so that\
    \ each number in the original list has been in the range [0, 1].\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3js674xx.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3js674xx.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (maximum - minimum) / maximum(rescaled_numbers)\n\
    \    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1b0ezbsp.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1b0ezbsp.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</code>\n<|/ a tags=julia,arrays |>\n<| a tags=julia,arrays |>\nThe other\
    \ answers here are great, but I thought I'd add my own solution, since I needed\
    \ it for something else.\n<code>\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpke505wdi.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpke505wdi.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (maximum - minimum) / length(rescaled_numbers)\n\
    \    return rescaled_numbers\nend\n</code>\n<|/ a tags=julia,arrays |>\n<| c |>\n\
    This doesn't work for me. `minimum(numbers)` returns `1.0` instead of `0.0`.\n\
    <|/ c |>\n<| c |>\nThis doesn't work for me either. `minimum(numbers)` returns\
    \ `1.0` instead of `0.0`.\n<|/ c |>\n<| c |>\nThis doesn't work for me either.\
    \ `minimum(numbers)` returns `1.0` instead of `0.0`.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work for me either. `minimum(numbers)` returns `1.0` instead of `0.0`.\n\
    <|/ c |>\n<| a tags=julia,arrays |>\nThis can be done with broadcasting by subtracting\
    \ the minimum and dividing by the maximum:\n<code>\njulia> numbers = [1.0, 2.0,\
    \ 3.0, 4.0, 5.0]\njulia> minimum(numbers) - maximum.(numbers)\n0.0\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnkzb6p0u.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnkzb6p0u.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n    numbers\
    \ = numbers - minimum\n    numbers = numbers / maximum\n    return numbers\nend\n\
    </cell>\n<code language=julia-1.5>\n# Test the function\nrescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nThe function rescale_to_unit takes a\
    \ list of numbers and returns a list of numbers that have been rescaled so that\
    \ they have unit variance.\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuce3m231.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpuce3m231.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled = numbers .- minimum(numbers)\n    rescaled ./= maximum(rescaled)\n\
    \    return rescaled\nend\n</cell>\n<code language=julia-1.5>\n# Test the rescale_to_unit\
    \ function\nrescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of numbers and returns a vector of numbers\
    \ that is 1 divided by the maximum absolute value of each number. For example,\
    \ if the input vector is [1.0, 2.0, 3.0, 4.0, 5.0], the output vector should be\
    \ [0.0, 0.25, 0.5, 0.75, 1.0].\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpang8ovtw.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpang8ovtw.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers ./=\
    \ maximum(rescaled_numbers)\n    return rescaled_numbers\nend\n</cell>\n<text>\n\
    Exercise 3: Write a function that takes a list of numbers and returns a list of\
    \ numbers that is scaled to the unit interval\n    (i.e. the smallest number will\
    \ become 0 and the largest will become 1)\n    >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9uu91vjx.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9uu91vjx.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprcmn7em7.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprcmn7em7.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled = minimum\
    \ + maximum * (numbers - minimum) / (maximum - minimum)\n    return rescaled\n\
    end\n</cell>\n<code language=julia-1.5>\n# test the function\nrescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nNow let's apply the function to the test\
    \ data we created earlier\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjgvo818z.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjgvo818z.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers.map(x -> x / min(numbers))\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplt1nnxr2.jl:15\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  type Array has no field\
    \ map\n  Stacktrace:\n   [1] getproperty(::Array{Float64,1}, ::Symbol) at ./Base.jl:33\n\
    \   [2] rescale_to_unit(::Array{Float64,1}) at /tmp/tmplt1nnxr2.jl:7\n   [3] top-level\
    \ scope at /tmp/tmplt1nnxr2.jl:15\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmplt1nnxr2.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmplt1nnxr2.jl:16\n  Test threw exception\n  Expression: candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n  type Array has no field map\n  Stacktrace:\n   [1] getproperty(::Array{Float64,1},\
    \ ::Symbol) at ./Base.jl:33\n   [2] rescale_to_unit(::Array{Float64,1}) at /tmp/tmplt1nnxr2.jl:7\n\
    \   [3] top-level scope at /tmp/tmplt1nnxr2.jl:16\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmplt1nnxr2.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmplt1nnxr2.jl:17\n  Test threw exception\n  Expression: candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n  type Array has no field\
    \ map\n  Stacktrace:\n   [1] getproperty(::Array{Float64,1}, ::Symbol) at ./Base.jl:33\n\
    \   [2] rescale_to_unit(::Array{Float64,1}) at /tmp/tmplt1nnxr2.jl:7\n   [3] top-level\
    \ scope at /tmp/tmplt1nnxr2.jl:17\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmplt1nnxr2.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmplt1nnxr2.jl:18\n  Test threw exception\n  Expression: candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n  type Array has no field\
    \ map\n  Stacktrace:\n   [1] getproperty(::Array{Float64,1}, ::Symbol) at ./Base.jl:33\n\
    \   [2] rescale_to_unit(::Array{Float64,1}) at /tmp/tmplt1nnxr2.jl:7\n   [3] top-level\
    \ scope at /tmp/tmplt1nnxr2.jl:18\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmplt1nnxr2.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmplt1nnxr2.jl:19\n  Test threw exception\n  Expression: candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n  type Array has no\
    \ field map\n  Stacktrace:\n   [1] getproperty(::Array{Float64,1}, ::Symbol) at\
    \ ./Base.jl:33\n   [2] rescale_to_unit(::Array{Float64,1}) at /tmp/tmplt1nnxr2.jl:7\n\
    \   [3] top-level scope at /tmp/tmplt1nnxr2.jl:19\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmplt1nnxr2.jl:14\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplt1nnxr2.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (maximum - minimum) / length(rescaled_numbers)\n\
    \    return rescaled_numbers\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n\
    I believe that your question can be answered with a simple application of linear\
    \ interpolation.\n<code>\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvw1ad1rh.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvw1ad1rh.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (rescaled_numbers .- minimum)\
    \ / (maximum - minimum)\n    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test\nrescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nThe function\
    \ rescale_to_unit takes a list of numbers and returns a list of numbers that have\
    \ been rescaled so that they have unit length.\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplnwhfapa.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplnwhfapa.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled = map(x -> x/minimum(numbers), numbers)\n    return rescaled\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test the function\nrescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nThe function rescale_to_unit takes a\
    \ list of numbers and returns a list of numbers that have been rescaled so that\
    \ they lie between 0 and 1.\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqma2yl2u.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqma2yl2u.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers.map(x -> x / minimum(numbers))\n    return\
    \ rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyofmkrml.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyofmkrml.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    \n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (rescaled_numbers .- minimum)\
    \ / (maximum - minimum)\n    \n    return rescaled_numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>\n# Test\nrescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that will apply a linear transform to a list\
    \ of numbers, such that the smallest number will become 0 and the largest will\
    \ become 1\nWrite a function that will apply a linear transform to a list of numbers,\
    \ such that the smallest number will become 0 and the largest will become 1\n\
    Write a function that will apply a linear transform to a list of numbers, such\
    \ that the smallest number will become 0 and the largest will become 1\nWrite\
    \ a function that will apply a linear transform to a list of numbers, such that\
    \ the smallest number will become 0 and the largest will become 1\nWrite a function\
    \ that will apply a linear transform to a list of numbers, such that the smallest\
    \ number will become 0 and the largest will become 1\nWrite a function that will\
    \ apply a linear transform to a list of numbers, such that the smallest number\
    \ will become 0 and the largest will become 1\nWrite a function that will apply\
    \ a linear transform to a list of numbers, such that the smallest number will\
    \ become 0 and the largest will become 1\nWrite a function that will apply a linear\
    \ transform to a list of numbers, such that the smallest number will become 0\
    \ and the largest will become 1\nWrite a function that will apply a linear transform\
    \ to a list of numbers, such that the smallest number will become 0 and the largest\
    \ will become 1\nWrite a function that will apply a linear transform to a list\
    \ of numbers, such that the smallest number will become 0 and the largest will\
    \ become 1\nWrite a function that will apply a linear transform to a list of numbers,\
    \ such that the smallest number will become 0 and the largest will become 1\n\
    Write a function that will apply a linear transform to a list of numbers, such\
    \ that the smallest number will become 0 and the largest will become 1\nWrite\
    \ a function that will apply a linear transform to a list of numbers, such that\
    \ the smallest number will become 0 and the largest will become 1\nWrite a function\
    \ that will apply a linear transform to a list of numbers, such that the smallest\
    \ number will become 0 and the largest will become 1\nWrite a function that will\
    \ apply a linear transform to a list of numbers, such that the smallest number\
    \ will become 0 and the largest will become 1\nWrite a function that will apply\
    \ a linear transform to a list of numbers, such that the smallest number will\
    \ become 0 and the largest will become 1\nWrite a function that will apply a linear\
    \ transform to a list of numbers, such that the smallest number will become 0\
    \ and the largest will become 1\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprvbbexmt.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprvbbexmt.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers ./=\
    \ maximum(rescaled_numbers)\n    return rescaled_numbers\nend\n</cell>\n<text>\n\
    Let's try it out!\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqy_4l84_.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqy_4l84_.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (maximum - minimum) / length(rescaled_numbers)\n\
    \    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf9ucfwyb.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpf9ucfwyb.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n    numbers\
    \ = numbers - minimum\n    numbers = numbers / maximum\n    return numbers\nend\n\
    </cell>\n<code language=julia-1.5>\n# Test the function\nrescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nThe function above is called rescale_to_unit.\
    \ Let's see how it works.\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmxqhlrhs.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmxqhlrhs.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled = minimum\
    \ + maximum * (numbers - minimum) / (maximum - minimum)\n    return rescaled\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that will take a vector of\
    \ numbers and return a vector of numbers that have been scaled to the unit interval\
    \ (0, 1).\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppv4zirlw.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppv4zirlw.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia |>\nThe answer by is great, but\
    \ I wanted to add that you can also use broadcasting to do this in one line:\n\
    <code>\njulia> numbers = [1.0, 2.0, 3.0, 4.0, 5.0]\njulia> rescaled_numbers =\
    \ numbers .- minimum(numbers)\njulia> rescaled_numbers .= rescaled_numbers ./\
    \ maximum(rescaled_numbers)\njulia> rescaled_numbers\n5-element Vector{Float64}:\n\
    \ 0.0\n 0.25\n 0.5\n 0.75\n 1.0\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n\
    I wanted to add that you can also use broadcasting to do this in one line:\n<code>\n\
    julia> numbers = [1.0, 2.0, 3.0, 4.0, 5.0]\njulia> rescaled_numbers = numbers\
    \ .- minimum(numbers)\njulia> rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)\n\
    julia> rescaled_numbers\n5-element Vector{Float64}:\n 0.0\n 0.25\n 0.5\n 0.75\n\
    \ 1.0\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\nI wanted to add that\
    \ you can also use broadcasting to do this in one line:\n<code>\njulia> numbers\
    \ = [1.0, 2.0, 3.0, 4.0, 5.0]\njulia> rescaled_numbers = numbers .- minimum(numbers)\n\
    julia> rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)\njulia>\
    \ rescaled_numbers\n5-element Vector{Float64}:\n 0.0\n 0.25\n 0.5\n 0.75\n 1.0\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\njulia> numbers = [1.0, 2.0,\
    \ 3.0, 4.0, 5.0]\njulia> rescaled_numbers = numbers .- minimum(numbers)\njulia>\
    \ rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)\njulia> rescaled_numbers\n\
    5-element Vector{Float64}:\n 0.0\n 0.25\n 0.5\n 0.75\n 1.0\n</code>\n<|/ a tags=julia\
    \ |>\n<| c |>\nWelcome to Stack Overflow! While this code may answer the question,\
    \ providing additional context regarding why and/or how this code answer\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpw572ts01.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpw572ts01.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled = minimum\
    \ + maximum * (numbers - minimum) / (maximum - minimum)\n    return rescaled\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp53fyxtrm.jl:17\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  MethodError: no method\
    \ matching min(::Array{Float64,1})\n  Closest candidates are:\n    min(::Any,\
    \ !Matched::Missing) at missing.jl:126\n    min(::Any, !Matched::Any) at operators.jl:422\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(::Array{Float64,1}) at /tmp/tmp53fyxtrm.jl:7\n\
    \   [2] top-level scope at /tmp/tmp53fyxtrm.jl:17\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp53fyxtrm.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmp53fyxtrm.jl:18\n  Test threw exception\n  Expression: candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n  MethodError: no method matching min(::Array{Float64,1})\n\
    \  Closest candidates are:\n    min(::Any, !Matched::Missing) at missing.jl:126\n\
    \    min(::Any, !Matched::Any) at operators.jl:422\n    min(::Any, !Matched::Any,\
    \ !Matched::Any, !Matched::Any...) at operators.jl:529\n    ...\n  Stacktrace:\n\
    \   [1] rescale_to_unit(::Array{Float64,1}) at /tmp/tmp53fyxtrm.jl:7\n   [2] top-level\
    \ scope at /tmp/tmp53fyxtrm.jl:18\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp53fyxtrm.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmp53fyxtrm.jl:19\n  Test threw exception\n  Expression: candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n  MethodError: no method\
    \ matching min(::Array{Float64,1})\n  Closest candidates are:\n    min(::Any,\
    \ !Matched::Missing) at missing.jl:126\n    min(::Any, !Matched::Any) at operators.jl:422\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(::Array{Float64,1}) at /tmp/tmp53fyxtrm.jl:7\n\
    \   [2] top-level scope at /tmp/tmp53fyxtrm.jl:19\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp53fyxtrm.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmp53fyxtrm.jl:20\n  Test threw exception\n  Expression: candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n  MethodError: no method\
    \ matching min(::Array{Float64,1})\n  Closest candidates are:\n    min(::Any,\
    \ !Matched::Missing) at missing.jl:126\n    min(::Any, !Matched::Any) at operators.jl:422\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(::Array{Float64,1}) at /tmp/tmp53fyxtrm.jl:7\n\
    \   [2] top-level scope at /tmp/tmp53fyxtrm.jl:20\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp53fyxtrm.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmp53fyxtrm.jl:21\n  Test threw exception\n  Expression: candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n  MethodError: no method\
    \ matching min(::Array{Float64,1})\n  Closest candidates are:\n    min(::Any,\
    \ !Matched::Missing) at missing.jl:126\n    min(::Any, !Matched::Any) at operators.jl:422\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(::Array{Float64,1}) at /tmp/tmp53fyxtrm.jl:7\n\
    \   [2] top-level scope at /tmp/tmp53fyxtrm.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp53fyxtrm.jl:16\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp53fyxtrm.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = Vector{Float64}(undef, length(numbers))\n    for number\
    \ in numbers\n        rescaled_numbers[number] = number/maximum(numbers)\n   \
    \ end\n    return rescaled_numbers\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes a list of numbers and returns the same list but with the\
    \ smallest number set to 0 and the largest set to 1.\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5bg_c979.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5bg_c979.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers.map(x -> x / minimum(numbers))\n    return\
    \ rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n# Let's test it\n\
    rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nNow let's try it\
    \ on our test data\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfnhtil39.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfnhtil39.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled = minimum\
    \ + maximum * (numbers - minimum) / (maximum - minimum)\n    return rescaled\n\
    end\n</cell>\n<code language=julia-1.5>\n# Let's try it out\nrescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nNow let's apply this function to our\
    \ dataset:\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjsbwst9n.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjsbwst9n.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    \n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (rescaled_numbers ./ maximum -\
    \ 1.0) .* maximum\n    return rescaled_numbers\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpj4wtvjat.jl:19\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  MethodError: no method\
    \ matching min(::Array{Float64,1})\n  Closest candidates are:\n    min(::Any,\
    \ !Matched::Missing) at missing.jl:126\n    min(::Any, !Matched::Any) at operators.jl:422\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(::Array{Float64,1}) at /tmp/tmpj4wtvjat.jl:7\n\
    \   [2] top-level scope at /tmp/tmpj4wtvjat.jl:19\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpj4wtvjat.jl:18\n  \ntest set: Error During\
    \ Test at /tmp/tmpj4wtvjat.jl:20\n  Test threw exception\n  Expression: candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n  MethodError: no method matching min(::Array{Float64,1})\n\
    \  Closest candidates are:\n    min(::Any, !Matched::Missing) at missing.jl:126\n\
    \    min(::Any, !Matched::Any) at operators.jl:422\n    min(::Any, !Matched::Any,\
    \ !Matched::Any, !Matched::Any...) at operators.jl:529\n    ...\n  Stacktrace:\n\
    \   [1] rescale_to_unit(::Array{Float64,1}) at /tmp/tmpj4wtvjat.jl:7\n   [2] top-level\
    \ scope at /tmp/tmpj4wtvjat.jl:20\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpj4wtvjat.jl:18\n  \ntest set: Error During\
    \ Test at /tmp/tmpj4wtvjat.jl:21\n  Test threw exception\n  Expression: candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n  MethodError: no method\
    \ matching min(::Array{Float64,1})\n  Closest candidates are:\n    min(::Any,\
    \ !Matched::Missing) at missing.jl:126\n    min(::Any, !Matched::Any) at operators.jl:422\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(::Array{Float64,1}) at /tmp/tmpj4wtvjat.jl:7\n\
    \   [2] top-level scope at /tmp/tmpj4wtvjat.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpj4wtvjat.jl:18\n  \ntest set: Error During\
    \ Test at /tmp/tmpj4wtvjat.jl:22\n  Test threw exception\n  Expression: candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n  MethodError: no method\
    \ matching min(::Array{Float64,1})\n  Closest candidates are:\n    min(::Any,\
    \ !Matched::Missing) at missing.jl:126\n    min(::Any, !Matched::Any) at operators.jl:422\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(::Array{Float64,1}) at /tmp/tmpj4wtvjat.jl:7\n\
    \   [2] top-level scope at /tmp/tmpj4wtvjat.jl:22\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpj4wtvjat.jl:18\n  \ntest set: Error During\
    \ Test at /tmp/tmpj4wtvjat.jl:23\n  Test threw exception\n  Expression: candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n  MethodError: no method\
    \ matching min(::Array{Float64,1})\n  Closest candidates are:\n    min(::Any,\
    \ !Matched::Missing) at missing.jl:126\n    min(::Any, !Matched::Any) at operators.jl:422\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(::Array{Float64,1}) at /tmp/tmpj4wtvjat.jl:7\n\
    \   [2] top-level scope at /tmp/tmpj4wtvjat.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpj4wtvjat.jl:18\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj4wtvjat.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = Vector{Float64}(undef, length(numbers))\n    for number\
    \ in numbers\n        rescaled_numbers[number] = number / maximum(numbers)\n \
    \   end\n    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8q7u_uax.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8q7u_uax.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj8qmkie3.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj8qmkie3.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test the function\nrescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nThe function rescale_to_unit takes a\
    \ list of numbers and returns a list of numbers rescaled to the range $[0, 1]$\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm80ztmyd.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm80ztmyd.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    \n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (rescaled_numbers ./ maximum)\n\
    \    rescaled_numbers .= minimum\n    return rescaled_numbers\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx4_ievzg.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpx4_ievzg.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn4ebp3uz.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpn4ebp3uz.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n    rescaled\
    \ = map(x -> (x - minimum) / (maximum - minimum), numbers)\n    return rescaled\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpo7j2qsxj.jl:17\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  UndefVarError: minimum\
    \ not defined\n  Stacktrace:\n   [1] rescale_to_unit(::Array{Float64,1}) at /tmp/tmpo7j2qsxj.jl:7\n\
    \   [2] top-level scope at /tmp/tmpo7j2qsxj.jl:17\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpo7j2qsxj.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpo7j2qsxj.jl:18\n  Test threw exception\n  Expression: candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n  UndefVarError: minimum not defined\n  Stacktrace:\n\
    \   [1] rescale_to_unit(::Array{Float64,1}) at /tmp/tmpo7j2qsxj.jl:7\n   [2] top-level\
    \ scope at /tmp/tmpo7j2qsxj.jl:18\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpo7j2qsxj.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpo7j2qsxj.jl:19\n  Test threw exception\n  Expression: candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n  UndefVarError: minimum\
    \ not defined\n  Stacktrace:\n   [1] rescale_to_unit(::Array{Float64,1}) at /tmp/tmpo7j2qsxj.jl:7\n\
    \   [2] top-level scope at /tmp/tmpo7j2qsxj.jl:19\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpo7j2qsxj.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpo7j2qsxj.jl:20\n  Test threw exception\n  Expression: candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n  UndefVarError: minimum\
    \ not defined\n  Stacktrace:\n   [1] rescale_to_unit(::Array{Float64,1}) at /tmp/tmpo7j2qsxj.jl:7\n\
    \   [2] top-level scope at /tmp/tmpo7j2qsxj.jl:20\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpo7j2qsxj.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpo7j2qsxj.jl:21\n  Test threw exception\n  Expression: candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n  UndefVarError: minimum\
    \ not defined\n  Stacktrace:\n   [1] rescale_to_unit(::Array{Float64,1}) at /tmp/tmpo7j2qsxj.jl:7\n\
    \   [2] top-level scope at /tmp/tmpo7j2qsxj.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpo7j2qsxj.jl:16\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo7j2qsxj.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (maximum - minimum) / length(rescaled_numbers)\n\
    \    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxtjo0g8l.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxtjo0g8l.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (rescaled_numbers ./ maximum)\n\
    \    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm1stqn6x.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm1stqn6x.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (maximum - minimum) / length(rescaled_numbers)\n\
    \    return rescaled_numbers\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,arrays\
    \ |>\nI like using StatsBase.jl for these kinds of things:\n<code>\nusing StatsBase\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf98289ar.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpf98289ar.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers ./=\
    \ maximum(rescaled_numbers)\n    return rescaled_numbers\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n    numbers\
    \ = numbers - minimum\n    numbers = numbers / maximum\n    return numbers\nend\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpaiguq692.jl:18\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  UndefVarError: minimum\
    \ not defined\n  Stacktrace:\n   [1] rescale_to_unit(::Array{Float64,1}) at /tmp/tmpaiguq692.jl:7\n\
    \   [2] top-level scope at /tmp/tmpaiguq692.jl:18\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpaiguq692.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpaiguq692.jl:19\n  Test threw exception\n  Expression: candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n  UndefVarError: minimum not defined\n  Stacktrace:\n\
    \   [1] rescale_to_unit(::Array{Float64,1}) at /tmp/tmpaiguq692.jl:7\n   [2] top-level\
    \ scope at /tmp/tmpaiguq692.jl:19\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpaiguq692.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpaiguq692.jl:20\n  Test threw exception\n  Expression: candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n  UndefVarError: minimum\
    \ not defined\n  Stacktrace:\n   [1] rescale_to_unit(::Array{Float64,1}) at /tmp/tmpaiguq692.jl:7\n\
    \   [2] top-level scope at /tmp/tmpaiguq692.jl:20\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpaiguq692.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpaiguq692.jl:21\n  Test threw exception\n  Expression: candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n  UndefVarError: minimum\
    \ not defined\n  Stacktrace:\n   [1] rescale_to_unit(::Array{Float64,1}) at /tmp/tmpaiguq692.jl:7\n\
    \   [2] top-level scope at /tmp/tmpaiguq692.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpaiguq692.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpaiguq692.jl:22\n  Test threw exception\n  Expression: candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n  UndefVarError: minimum\
    \ not defined\n  Stacktrace:\n   [1] rescale_to_unit(::Array{Float64,1}) at /tmp/tmpaiguq692.jl:7\n\
    \   [2] top-level scope at /tmp/tmpaiguq692.jl:22\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpaiguq692.jl:17\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaiguq692.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled = minimum\
    \ + maximum * (numbers - minimum) / (maximum - minimum)\n    return rescaled\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| a |>\nI came up with a simple solution that\
    \ doesn't require any external packages.\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8h4mwh3w.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8h4mwh3w.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n    numbers\
    \ = numbers - minimum\n    numbers = numbers / maximum\n    return numbers\nend\n\
    </cell>\n<code language=julia-1.5>\n# Test the function\nrescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nThe function rescale_to_unit takes a\
    \ list of numbers and returns a list of numbers that have been rescaled so that\
    \ they lie between 0 and 1.\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgx2krbgc.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgx2krbgc.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    \n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (rescaled_numbers .- minimum)\
    \ / (maximum - minimum)\n    \n    return rescaled_numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>\n# Test the function\nrescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n</cell>\n<text>\nThe function rescale_to_unit takes a list of numbers\
    \ and returns a list of numbers that have been rescaled to be between 0 and 1.\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdpu3l090.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdpu3l090.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (rescaled_numbers .- minimum)\
    \ / (maximum - minimum)\n    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf92u3shs.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpf92u3shs.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.0>\n# test the function\nrescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nExercise 2: Rescale a vector to unit\
    \ variance\nWrite a function that takes as input a vector of numbers and outputs\
    \ a new vector with each number becoming its unit variance.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgelq9pa4.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgelq9pa4.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (rescaled_numbers .- minimum)\
    \ / (maximum - minimum)\n    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoldqdwzu.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpoldqdwzu.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    \n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (rescaled_numbers .- minimum)\
    \ / (maximum - minimum)\n    \n    return rescaled_numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpapfz08x0.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpapfz08x0.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled = numbers .- minimum(numbers)\n    rescaled ./= maximum(rescaled)\n\
    \    return rescaled\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxonablyg.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxonablyg.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled = minimum\
    \ + maximum * (numbers - minimum) / (maximum - minimum)\n    return rescaled\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test the rescale_to_unit function\n\
    rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes in a list of numbers and returns a list of numbers that\
    \ have been rescaled to be between 0 and 1.\nFor example, rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) should return [0.0, 0.25, 0.5, 0.75, 1.0].\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp766oxir5.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp766oxir5.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = Vector{Float64}(undef, length(numbers))\n    for i\
    \ in 1:length(numbers)\n        rescaled_numbers[i] = numbers[i] / maximum(numbers)\n\
    \    end\n    return rescaled_numbers\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a list of numbers and returns a list of numbers that have\
    \ been scaled to the unit interval (0, 1).\nFor example, given [1.0, 2.0, 3.0,\
    \ 4.0, 5.0], the function should return [0.0, 0.25, 0.5, 0.75, 1.0].\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyywaohqt.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyywaohqt.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (maximum - minimum) / length(rescaled_numbers)\n\
    \    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnkcr64xc.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnkcr64xc.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled = minimum\
    \ + maximum * (numbers - minimum) / (maximum - minimum)\n    return rescaled\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpiy9zs4j3.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpiy9zs4j3.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n    rescaled\
    \ = minimum + maximum * (numbers - minimum) / (maximum - minimum)\n    return\
    \ rescaled\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfu4aonf4.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfu4aonf4.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = Vector{Float64}(undef, length(numbers))\n    smallest_number\
    \ = minimum(numbers)\n    largest = maximum(numbers)\n    smallest_number = smallest_number\
    \ / largest\n    largest = largest / smallest_number\n    for number in numbers\n\
    \        rescaled_numbers[number] = number\n    end\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxchvgs07.jl:22\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  ArgumentError: invalid\
    \ index: 2.0 of type Float64\n  Stacktrace:\n   [1] to_index(::Float64) at ./indices.jl:297\n\
    \   [2] to_index(::Array{Float64,1}, ::Float64) at ./indices.jl:274\n   [3] to_indices\
    \ at ./indices.jl:325 [inlined]\n   [4] to_indices at ./indices.jl:322 [inlined]\n\
    \   [5] setindex! at ./abstractarray.jl:1073 [inlined]\n   [6] rescale_to_unit(::Array{Float64,1})\
    \ at /tmp/tmpxchvgs07.jl:13\n   [7] top-level scope at /tmp/tmpxchvgs07.jl:22\n\
    \   [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmpxchvgs07.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpxchvgs07.jl:23\n  Test threw exception\n  Expression: candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n  ArgumentError: invalid index: 100.0 of type Float64\n\
    \  Stacktrace:\n   [1] to_index(::Float64) at ./indices.jl:297\n   [2] to_index(::Array{Float64,1},\
    \ ::Float64) at ./indices.jl:274\n   [3] to_indices at ./indices.jl:325 [inlined]\n\
    \   [4] to_indices at ./indices.jl:322 [inlined]\n   [5] setindex! at ./abstractarray.jl:1073\
    \ [inlined]\n   [6] rescale_to_unit(::Array{Float64,1}) at /tmp/tmpxchvgs07.jl:13\n\
    \   [7] top-level scope at /tmp/tmpxchvgs07.jl:23\n   [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmpxchvgs07.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpxchvgs07.jl:24\n  Test threw exception\n  Expression: candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n  ArgumentError: invalid\
    \ index: 1.0 of type Float64\n  Stacktrace:\n   [1] to_index(::Float64) at ./indices.jl:297\n\
    \   [2] to_index(::Array{Float64,1}, ::Float64) at ./indices.jl:274\n   [3] to_indices\
    \ at ./indices.jl:325 [inlined]\n   [4] to_indices at ./indices.jl:322 [inlined]\n\
    \   [5] setindex! at ./abstractarray.jl:1073 [inlined]\n   [6] rescale_to_unit(::Array{Float64,1})\
    \ at /tmp/tmpxchvgs07.jl:13\n   [7] top-level scope at /tmp/tmpxchvgs07.jl:24\n\
    \   [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmpxchvgs07.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpxchvgs07.jl:25\n  Test threw exception\n  Expression: candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n  ArgumentError: invalid\
    \ index: 2.0 of type Float64\n  Stacktrace:\n   [1] to_index(::Float64) at ./indices.jl:297\n\
    \   [2] to_index(::Array{Float64,1}, ::Float64) at ./indices.jl:274\n   [3] to_indices\
    \ at ./indices.jl:325 [inlined]\n   [4] to_indices at ./indices.jl:322 [inlined]\n\
    \   [5] setindex! at ./abstractarray.jl:1073 [inlined]\n   [6] rescale_to_unit(::Array{Float64,1})\
    \ at /tmp/tmpxchvgs07.jl:13\n   [7] top-level scope at /tmp/tmpxchvgs07.jl:25\n\
    \   [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmpxchvgs07.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpxchvgs07.jl:26\n  Test threw exception\n  Expression: candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n  ArgumentError: invalid\
    \ index: 12.0 of type Float64\n  Stacktrace:\n   [1] to_index(::Float64) at ./indices.jl:297\n\
    \   [2] to_index(::Array{Float64,1}, ::Float64) at ./indices.jl:274\n   [3] to_indices\
    \ at ./indices.jl:325 [inlined]\n   [4] to_indices at ./indices.jl:322 [inlined]\n\
    \   [5] setindex! at ./abstractarray.jl:1073 [inlined]\n   [6] rescale_to_unit(::Array{Float64,1})\
    \ at /tmp/tmpxchvgs07.jl:13\n   [7] top-level scope at /tmp/tmpxchvgs07.jl:26\n\
    \   [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmpxchvgs07.jl:21\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxchvgs07.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    \n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (rescaled_numbers ./ maximum)\
    \ .* maximum\n    \n    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplnoily9q.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplnoily9q.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test the function\nrescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ a vector of numbers and returns a vector of numbers that is scaled to the unit\
    \ interval. Test it on some examples. What happens if you pass in an array of\
    \ zeros or ones?\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt_a7_72z.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpt_a7_72z.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers ./= maximum - minimum\n    return\
    \ rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2fuz0fks.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2fuz0fks.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (rescaled_numbers .- minimum)\
    \ / (maximum - minimum)\n    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test the rescale_to_unit function\nrescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    </cell>\n<text>\nThe function rescale_to_unit takes a list of numbers and returns\
    \ a list of numbers in the same range but rescaled so that they sum to 1.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy31fva9w.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpy31fva9w.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (rescaled_numbers .- minimum)\
    \ / (maximum - minimum)\n    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpe32w7no5.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpe32w7no5.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    \n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (rescaled_numbers ./ maximum)\n\
    \    \n    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    # test the function\nrescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\n\
    Exercise: Write a function that will take a vector of numbers and return a vector\
    \ of numbers that have been rescaled to be between 0 and 1.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl9wonpzm.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpl9wonpzm.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (maximum - minimum) / maximum\n\
    \    return rescaled_numbers\nend\n</cell>\n<text>\nExercise 3: Implement the\
    \ function rescale_linear_to_unit, which will apply a linear transform to numbers,\
    \ such that the smallest number will become 0 and the largest will become 1.\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxx4sk033.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxx4sk033.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test the rescale_to_unit function\n\
    rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nThe function should take in a vector of numbers and return\
    \ a vector of numbers. \nThe function should return an error if the input vector\
    \ is empty or has less than two elements.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzc145d4f.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzc145d4f.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test\nrescale_to_unit([1.0, 2.0, 3.0,\
    \ 4.0, 5.0])\n</cell>\n<text>\nExercise: Write a function that takes a list of\
    \ numbers and returns the same list but with each number multiplied by a constant\
    \ factor.\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpiyvslel5.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpiyvslel5.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    \n    rescaled_numbers\
    \ = Vector{Float64}(undef, length(numbers))\n    for number in numbers\n     \
    \   rescaled_numbers[number] = number-minimum\n    end\n    \n    rescaled_numbers[minimum]\
    \ = 0.0\n    rescaled_numbers[maximum] = 1.0\n    return rescaled_numbers\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnv1mun9d.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnv1mun9d.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled = map(x -> x / minimum(numbers), numbers)\n    rescaled = map(x\
    \ -> x - minimum(numbers), rescaled)\n    rescaled = map(x -> x / maximum(numbers),\
    \ rescaled)\n    rescaled = map(x -> x - maximum(numbers), rescaled)\n    return\
    \ rescaled\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfmsg7a7z.jl:18\n  Expression: candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n   Evaluated: [-49.92004008016032, -49.44008016032064]\
    \ == [0.0, 1.0]\nStacktrace:\n [1] top-level scope at /tmp/tmpfmsg7a7z.jl:18\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfmsg7a7z.jl:17\ntest set: Test Failed at /tmp/tmpfmsg7a7z.jl:19\n\
    \  Expression: candidate([100.0, 49.9]) == [1.0, 0.0]\n   Evaluated: [-100.47895991983968,\
    \ -100.489] == [1.0, 0.0]\nStacktrace:\n [1] top-level scope at /tmp/tmpfmsg7a7z.jl:19\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfmsg7a7z.jl:17\ntest set: Test Failed at /tmp/tmpfmsg7a7z.jl:20\n\
    \  Expression: candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75,\
    \ 1.0]\n   Evaluated: [-5.0, -4.8, -4.6, -4.4, -4.2] == [0.0, 0.25, 0.5, 0.75,\
    \ 1.0]\nStacktrace:\n [1] top-level scope at /tmp/tmpfmsg7a7z.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfmsg7a7z.jl:17\ntest set: Test Failed at /tmp/tmpfmsg7a7z.jl:21\n\
    \  Expression: candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\
    \   Evaluated: [-4.8, -5.0, -4.2, -4.6, -4.4] == [0.25, 0.0, 1.0, 0.5, 0.75]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpfmsg7a7z.jl:21\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfmsg7a7z.jl:17\ntest set: Test Failed at /tmp/tmpfmsg7a7z.jl:22\n\
    \  Expression: candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]\n   Evaluated: [-15.66060606060606, -15.666666666666666, -15.642424242424243,\
    \ -15.654545454545454, -15.648484848484848] == [0.25, 0.0, 1.0, 0.5, 0.75]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfmsg7a7z.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfmsg7a7z.jl:17\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfmsg7a7z.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers ./=\
    \ maximum(rescaled_numbers)\n    return rescaled_numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr6hb_lie.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpr6hb_lie.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = Vector{Float64}(undef, length(numbers))\n    for number\
    \ in numbers\n        rescaled_numbers[number] = number/maximum(numbers)\n   \
    \ end\n    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjc9tx7r9.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjc9tx7r9.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3oi_dozt.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3oi_dozt.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    numbers = (numbers\
    \ - minimum) / (maximum - minimum)\n    return numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpey4dkc4q.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpey4dkc4q.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</code>\n<|/ a tags=julia |>\n<| a dscore=2 |>\nIn Julia 1.5 you can use\
    \ the function clamp:\n<code>\njulia> clamp(2.5, 0, 1)\n1\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj11gg_h9.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj11gg_h9.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled = map(x -> x/min(numbers), numbers)\n    return rescaled\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpiq00jcmz.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpiq00jcmz.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled = minimum\
    \ + maximum * (numbers - minimum) / (maximum - minimum)\n    return rescaled\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvyv5w0hb.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvyv5w0hb.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (maximum - minimum) / length(rescaled_numbers)\n\
    \    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n# Test\
    \ the rescale_to_unit function\nrescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n</cell>\n\
    <text>\nThe function rescale_to_unit takes a list of numbers and returns a list\
    \ of numbers that have been rescaled so that they have unit length. For example,\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) returns [0.0, 0.25, 0.5, 0.75, 1.0].\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf83s1a8s.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpf83s1a8s.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</code>\n<|/ a tags=julia |>\n<| a dscore=2 |>\nThe answer by is very good,\
    \ but I wanted to add that you can also use broadcasting instead of looping through\
    \ the array:\n<code>\njulia> function rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n           rescaled_numbers = numbers .- minimum(numbers)\n           rescaled_numbers\
    \ .= rescaled_numbers ./ maximum(rescaled_numbers)\n           return rescaled_numbers\n\
    \       end\nrescale_to_unit (generic function with 1 method)\nusing Test\n\n\
    @testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxngrvkp2.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxngrvkp2.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled = minimum\
    \ + maximum * (numbers - minimum) / (maximum - minimum)\n    return rescaled\n\
    end\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis does not work if the numbers\
    \ are negative.\n<|/ c |>\n<| c |>\nIt works just fine for me. `minimum([-5, -4,\
    \ -3, -2, -1, 0, 1, 2, 3, 4, 5])` returns `-5`, `maximum([-5, -4, -3, -2, -1,\
    \ 0, 1, 2, 3, 4, 5])` returns `5`.\n<|/ c |>\n<| c |>\nIt does not work if you\
    \ have a vector of negative numbers. Try `minimum([-5, -4, -3, -2, -1, 0, 1, 2,\
    \ 3, 4, 5])`\n<|/ c |>\n<| c |>\nI see what you mean. I've updated my answer to\
    \ account for negative numbers.\n<|/ c |>\n<| a tags=julia |>\nThe function below\
    \ will do what you want:\n<code>\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9nx341m_.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9nx341m_.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (maximum - minimum) / length(rescaled_numbers)\n\
    \    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1gi1roy3.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1gi1roy3.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers.map(x -> x / minimum(numbers))\n    rescaled_numbers\
    \ = rescaled_numbers.map(x -> 1.0 / (maximum(x) + 1.0))\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzhzibg13.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzhzibg13.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8o1n8to1.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8o1n8to1.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg_wlhb2q.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg_wlhb2q.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    numbers = (numbers\
    \ - minimum) / (maximum - minimum)\n    return numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwgix0iaa.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwgix0iaa.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\n# Let's test our rescale_to_unit function\n\
    rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nThe function rescale_to_unit\
    \ takes a list of numbers and returns a list of numbers that have been rescaled\
    \ to be between 0 and 1.\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbg_c9u9d.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbg_c9u9d.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    \n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (rescaled_numbers .- minimum)\
    \ / (maximum - minimum)\n    \n    return rescaled_numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9_1kes0u.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9_1kes0u.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</code>\n<|/ a |>\n<| c |>\nThis doesn't seem to work. `minimum(numbers)`\
    \ returns `0.0` for all numbers. `maximum(numbers)` returns `1.0` for all numbers.\
    \ `maximum(numbers)-minimum(numbers)` returns `0.0` for every number.\n<|/ c |>\n\
    <| c |>\nI tested it and it works fine for me. `minimum(numbers)` returns `0.0`\
    \ for all numbers. `maximum(numbers)` returns `1.0` for all numbers. `maximum(numbers)-minimum(numbers)`\
    \ returns `0.0` for every number.\n<|/ c |>\n<| c |>\nI tested it again and it\
    \ works fine for me. `minimum(numbers)` returns `0.0` for all numbers. `maximum(numbers)`\
    \ returns `1.0` for all numbers. `maximum(numbers)-minimum(numbers)` returns `0.0`\
    \ for every number.\n<|/ c |>\n<| c |>\nI tested it again and it works fine for\
    \ me. `minimum(numbers)` returns `0.0` for all numbers. `maximum(numbers)` returns\
    \ `1.0` for all numbers. `maximum(numbers)-minimum(numbers)` returns `0.0` for\
    \ every number.\n<|/ c |>\n<| c |>\nI tested it again and it works fine for me.\
    \ `minimum(numbers)` returns `0.0` for all numbers. `maximum(numbers)` returns\
    \ `1.0` for all numbers. `maximum(numbers)-minimum(numbers)` returns `0.0` for\
    \ every number.\n<|/ c |>\n<| a dscore=5 |>\nThe answer by is correct, but I thought\
    \ I'd add an explanation as to why it works.\nThe function minimum and maximum\
    \ return the minimum and maximum values of an array. Since you have a vector of\
    \ numbers, these functions return a single number. \nThe function min and max\
    \ return the minimum and maximum values of an array. Since you have a vector of\
    \ numbers, these functions return a single number. \nThe function min and max\
    \ return the minimum and maximum values of an array. Since you have a vector of\
    \ numbers, these functions return a single number. \nThe function min and max\
    \ return the minimum and maximum values of an array. Since you have a vector of\
    \ numbers, these functions return a single number. \nThe function min and max\
    \ return the minimum and maximum values of an array. Since you have a vector of\
    \ numbers, these functions return a single number. \nThe function min and max\
    \ return the minimum\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpe3dlag4d.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpe3dlag4d.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n    rescaled\
    \ = numbers .- minimum\n    rescaled ./= maximum - minimum\n    return rescaled\n\
    end\n</cell>\n<text>\nThe function rescale_to_unit takes a list of numbers and\
    \ returns a list of numbers that have been rescaled to be between 0 and 1.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb2gg93u2.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpb2gg93u2.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers ./=\
    \ maximum(rescaled_numbers)\n    return rescaled_numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>\n# Let's test our function\nrescale_to_unit([1.0, 2.0, 3.0,\
    \ 4.0, 5.0])\n</cell>\n<text>\nNow let's try it on our test data\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprsac51ae.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprsac51ae.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (rescaled_numbers .- minimum)\
    \ / (maximum - minimum)\n    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo7alpocv.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpo7alpocv.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc4hxxiup.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpc4hxxiup.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.3>\n# Test the rescale_to_unit function\n\
    rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a list of numbers and returns the same list but with the\
    \ smallest number set to 0 and the largest set to 1.\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv6avp9dg.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpv6avp9dg.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpe3am3lp0.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpe3am3lp0.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsepqld93.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsepqld93.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    \n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (rescaled_numbers .- minimum)\
    \ / (maximum - minimum)\n    \n    return rescaled_numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>\n# Test the function\nrescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n</cell>\n<text>\nThe function rescale_to_unit takes a list of numbers\
    \ and returns a list of numbers that have been rescaled so that they lie between\
    \ 0 and 1.\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmp98t6xx.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmp98t6xx.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers.map(x -> x / min(numbers))\n    return rescaled_numbers\n\
    end\n</cell>\n<text>\nNow let's try it out!\nusing Test\n\n@testset begin\n\n\
    candidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t\
    @test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0,\
    \ 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0,\
    \ 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnzdi5v_4.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnzdi5v_4.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4r25n7n7.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4r25n7n7.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers ./=\
    \ maximum(rescaled_numbers)\n    return rescaled_numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnn691b7n.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnn691b7n.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (maximum - minimum) / length(rescaled_numbers)\n\
    \    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc22j36fi.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpc22j36fi.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    \n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (rescaled_numbers .- minimum)\
    \ / (maximum - minimum)\n    rescaled_numbers .= maximum - rescaled_numbers\n\
    \    return rescaled_numbers\nend\n</cell>\n<text>\nLet's try it out on some random\
    \ numbers:\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd9c6re4_.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpd9c6re4_.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled = minimum\
    \ + maximum * (numbers - minimum) / (maximum - minimum)\n    return rescaled\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpun94lsgd.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpun94lsgd.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = Vector{Float64}(undef, length(numbers))\n    for n\
    \ in numbers\n        rescaled_numbers[minimum(n)] = 0.0\n        rescaled_numbers[maximum(n)]\
    \ = 1.0\n    end\n    return rescaled_numbers\nend\n</cell>\n<text>\nThe function\
    \ rescale_to_unit takes a list of numbers and returns a list of numbers that have\
    \ been rescaled to be between 0 and 1.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc7f12z_9.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpc7f12z_9.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers ./=\
    \ maximum(rescaled_numbers)\n    return rescaled_numbers\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = Vector{Float64}(undef, length(numbers))\n    for number\
    \ in numbers\n        rescaled_numbers[number] = number / maximum(numbers)\n \
    \   end\n    return rescaled_numbers\nend\n</code>\n<|/ a tags=julia |>\n<| a\
    \ dscore=2 |>\nI like using mapslices for these kinds of things:\n<code>\njulia>\
    \ mapslices(x -> x/maximum(abs.(x)), rand(10), dims=2)\n2\xD710 Array{Float64,2}:\n\
    \ 0.594888  0.507676  0.577676  0.594888  0.507676  0.577676  0.594888  0.507676\n\
    \ 0.594888  0.507676  0.577676  0.594888  0.507676  0.577676  0.594888  0.507676\n\
    </code>\n<|/ a tags=julia |>\n<| a dscore=2 |>\nHere's a solution using broadcasting:\n\
    <code>\njulia> x = rand(10)\n10-element Vector{Float64}:\n 0.594888\n 0.507676\n\
    \ 0.577676\n 0.594888\n 0.507676\n 0.577676\n 0.594888\n 0.507676\n 0.577676\n\
    \ 0.594888\n 0.507676\n 0.577676\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp69gbq59b.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp69gbq59b.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers ./=\
    \ maximum(rescaled_numbers)\n    return rescaled_numbers\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of numbers and returns a list of\
    \ numbers that is scaled to the range [0, 1]\n    >>> rescale_to_unit_vector([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.50, 0.75, 1.0]\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdkb0xtsf.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdkb0xtsf.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled = map(x -> x/min(numbers), numbers)\n    return rescaled\nend\n\
    </cell>\n<code language=julia-1.5>\n# Let's test it\nrescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n</cell>\n<text>\nExercise 2: Implement a function that takes\
    \ a list of numbers and returns the same list but with each number multiplied\
    \ by 2\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [2.0, 4.0, 6.0,\
    \ 8.0, 10.0]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbtfi4nws.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbtfi4nws.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers ./=\
    \ maximum(rescaled_numbers)\n    return rescaled_numbers\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  stderr: ''
  exit_code: 0
  status: OK
