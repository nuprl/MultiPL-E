name: HumanEval_9_rolling_max
language: julia
prompt: "\"\"\" From a given list of integers, generate a list of rolling maximum\
  \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
  \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
  \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4,\
  \ 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3,\
  \ 100, 100])\nend\n"
completions: ["    \n    rolling_max_list = Vector{Int64}()\n    \n    rolling_max_list\
    \ = rolling_max_list .+ numbers\n    \n    rolling_max_list = rolling_max_list[rolling_max_list.>numbers[1]]\n\
    \    \n    rolling_max_list = rolling_max_list[rolling_max_list.>numbers[2]]\n\
    \    \n    rolling_max_list = rolling_max_list[rolling_max_list.>numbers[3]]\n\
    \    \n    rolling_max_list = rolling_max_list[rolling_max_list.>numbers[4]]\n\
    \    \n    rolling_max_list = rolling_max_list[rolling_max_list.>numbers[5]]\n\
    \    \n    rolling_max_list = rolling_max_list[rolling_max_list.>numbers[6]]\n\
    \    \n    rolling_max_list = rolling_max_list[rolling_max_list.>numbers[7]]\n\
    \    \n    rolling_max_list = rolling_max_list[rolling_max_list.>numbers[8]]\n\
    \    \n    rolling_max_list = rolling_max_list[rolling_max_list.>numbers[9]]\n\
    \    \n    rolling_max_list = rolling_max_list[rolling_max_list.>numbers[10]]\n\
    \    \n    rolling_max_list = rolling_max_list[rolling_max_list.>numbers[11]]\n\
    \    \n    rolling_max_list = rolling_max_list[rolling_max_list.>numbers[12]]\n\
    \    \n    rolling_max_list = rolling_max_list[rolling_max_list.>numbers[13]]\n\
    \    \n    rolling_max_list = rolling_max_list[rolling_max_list.>numbers[14]]\n\
    \    \n    rolling_max_list = rolling_max_list[rolling_max_list.>numbers[15]]\n\
    \    \n    rolling_max_list = rolling_max_list[rolling_max_list.>numbers[16]]\n\
    \    \n    rolling_max_list = rolling_max_list[rolling_max_list.>numbers[17]]\n\
    \    \n    rolling_max_list = rolling_max_list[rolling_max_list.>numbers[18]]\n\
    \    \n    rolling_max_list = rolling_max_list[rolling_max_list.>numbers[19]]\n\
    \    \n    rolling_max_list = rolling_max_list[rolling_max_list.>numbers[20]]\n\
    \    \n    rolling_max_list = rolling_max_list[rolling_max_list.>numbers[21]]\n\
    \    \n    rolling_max_list = rolling_max_list[rolling_max_list.>numbers[22]]\n\
    \    \n    rolling_max_list = rolling_max_list[rolling_max_list.>numbers[23]]\n\
    \    \n", "    \n    rolling_max_list = Vector{Int64}()\n    \n    for n in numbers\n\
    \        if rolling_max_list == Vector{Int64}()\n            rolling_max_list\
    \ << n\n        else\n            if rolling_max_list[end] == n\n            \
    \    rolling_max_list[end] = n\n            else\n                rolling_max_list\
    \ << n\n            end\n        end\n    end\n    \n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>", "    rolling_max_list = Vector{Int64}()\n\
    \    rolling_max_list.append(numbers[1])\n    for n in numbers[2:end]\n      \
    \  if n > rolling_max_list[1]\n            rolling_max_list.append(n)\n      \
    \  end\n    end\n    return rolling_max_list\nend", "    rolling_max = numbers[end]\n\
    \    for n in numbers[2:end]\n        rolling_max = max(rolling_max, n)\n    end\n\
    \    return rolling_max\nend\n</cell>\n<code language=julia-1.3>", "    \n   \
    \ rolling_max_list = Vector{Int64}()\n    \n    for n in numbers\n        rolling_max_list\
    \ = push!(rolling_max_list, maximum(rolling_max_list, n))\n    end\n    \n   \
    \ return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>", "    rolling_max\
    \ = numbers[end]\n    for n in numbers[2:end]\n        rolling_max = max(rolling_max,\
    \ n)\n    end\n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max_list = Vector{Int64}(undef, 0)\n    rolling_max_list[1] = numbers[1]\n\
    \    for i = 2:length(numbers)\n        if numbers[i] > rolling_max_list[i-1]\n\
    \            rolling_max_list[i] = numbers[i]\n        else\n            rolling_max_list[i]\
    \ = rolling_max_list[i-1]\n        end\n    end\n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    rolling_max_array = zeros(length(numbers))\n\
    \    \n    for i = 1:length(numbers)\n        rolling_max_array[i] = maximum(rolling_max_array[i-1:i+1])\n\
    \    end\n    \n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list = rolling_max_list\
    \ .+ numbers\n    \n    rolling_max_list = rolling_max_list[rolling_max_list .!=\
    \ rolling_max_list]\n    \n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list]\n    \n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list]\n    \n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list]\n    \n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list]\n    \n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list]\n    \n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list]\n    \n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list]\n    \n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list]\n    \n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list]\n    \n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list]\n    \n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list]\n    \n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list]\n    \n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list]\n    \n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list]\n    \n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list]\n    \n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list]\n    \n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list]\n    \n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list]\n    \n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list]\n    \n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list]\n    \n", "    rolling_max = numbers[1]\n    for n in\
    \ numbers[2:end]\n        if n > rolling_max\n            rolling_max = n\n  \
    \      end\n    end\n    return rolling_max\nend", "    \n    maximum = numbers[1]\n\
    \    for number in numbers[2:end]\n        if number > maximum\n            maximum\
    \ = number\n        end\n    end\n    maximum\nend\n</cell>\n<text>\nrolling_max\n\
    The rolling_max function takes in a list of integers and returns a list of rolling\
    \ maximum element found until given moment in the sequence.", "    rolling_max_list\
    \ = Vector{Int64}()\n    rolling_max_list = rolling_max_list .+ numbers\n    rolling_max_list\
    \ = rolling_max_list .+ rolling_max(numbers[2:end])\n    return rolling_max_list\n\
    end", "    rolling_max_list = Vector{Int64}()\n    rolling_max_list[1] = numbers[1]\n\
    \    for i = 2:length(numbers)\n        if numbers[i] > rolling_max_list[i-1]\n\
    \            rolling_max_list[i] = numbers[i]\n        else\n            rolling_max_list[i]\
    \ = rolling_max_list[i-1]\n        end\n    end\n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.4>", "    rolling_max_list = Vector{Int64}(undef,\
    \ 0)\n    for number in numbers\n        rolling_max_list = append!(rolling_max_list,\
    \ maximum(rolling_max_list, number))\n    end\n    return rolling_max_list\nend",
  "    \n    rolling_max_list = Vector{Int64}()\n    \n    for n in numbers\n    \
    \    rolling_max_list = rolling_max_list + [rolling_max(rolling_max_list)]\n \
    \   end\n    \n    return rolling_max_list\nend", "    \n    local max_rolling_numbers\
    \ = Vector{Int64}()\n    local max_rolling_numbers_index = 0\n    local max_rolling_numbers_value\
    \ = numbers[1]\n    local max_rolling_numbers_count = 0\n    \n    for i = 2:length(numbers)\n\
    \        if numbers[i] > max_rolling_numbers_value\n            then\n       \
    \         max_rolling_numbers_value = numbers[i]\n                max_rolling_numbers_index\
    \ = i\n                max_rolling_numbers_count = max_rolling_numbers_count +\
    \ 1\n            else\n                max_rolling_numbers_count = max_rolling_numbers_count\
    \ + 1\n            end\n        end\n    end\n    \n    max_rolling_numbers[max_rolling_numbers_index]\
    \ = max_rolling_numbers_value\n    max_rolling_numbers[max_rolling_numbers_index]\
    \ = max_rolling_numbers_count\n    \n    return max_rolling_numbers\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    maximum = numbers[1]\n    \n    for n in\
    \ numbers[2:end]\n        if n > maximum\n            maximum = n\n        end\n\
    \    end\n    \n    return maximum\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a vector and returns the sum of the squares of the elements\
    \ in the vector.\n>>> sum_square([1, 2, 3])\n25\n>>> sum_square([-1, 2, -3])\n\
    9\n>>> sum_square([-1, 2, -3, 4, 5])\n25\n>>> sum_square([-1, 1, -2, 3, 4])\n\
    25\n>>> sum_square([-1, 1, -2, 3, 4])\n25\n>>> sum_square([-1, 1, -2, 3, 4])\n\
    25\n>>> sum_square([-1, 1, -2, 3, 4])\n25\n>>> sum_square([-1, 1, -2, 3, 4])\n\
    25\n>>> sum_square([-1, 1, -2, 3, 4])\n25\n>>> sum_square([-1, 1, -2, 3, 4])\n\
    25\n>>> sum_square([-1, 1, -2, 3, 4])\n25\n>>> sum_square([-1, 1, -2, 3, 4])\n\
    25\n>>> sum_square([-1, 1, -2, 3, 4])\n25\n>>> sum_square([-1, 1, -2, 3, 4])\n\
    25\n>>> sum_square([-1, 1, -2, 3, 4])\n25\n>>> sum_square([-1, 1, -2, 3, 4])\n\
    25\n>>> sum_square([-1, 1, -2, 3, 4])\n25\n>>> sum_square([-1, 1, -2, 3, 4])\n\
    25\n>>> sum_square([-1, 1, -2, 3, 4])\n25\n>>> sum_square([-1, 1, -2, 3, 4])\n\
    25\n>>> sum_square([-1, 1, -2, 3, 4])\n25\n>>> sum_square([-1, 1, -2, 3, 4])\n\
    25\n>>> sum_square([-1, 1, -2, 3, 4])\n25\n>>> sum_square([-1, 1, -2, 3, 4])\n\
    25\n>>> sum_square([-1, 1, -2, 3, 4])\n25\n>>> sum_square([-1, 1, -2, 3, 4])\n\
    25\n>>> sum_square([-1, 1, -2, 3, 4])\n25\n>>> sum_square([-1, 1, -2, 3, 4])\n\
    25\n>>> sum_square([-1, 1, -2, 3, 4])\n25\n>>> sum_square([-1, 1, -2, 3, 4])\n\
    25\n>>> sum_square([-1, 1, -2, 3, 4])\n25\n>>> sum_square([-1, 1, -2, 3, 4])\n\
    25\n>>> sum_square([-1, 1, -2, 3, 4])\n25\n>>> sum_square([-1, 1, -2, 3, 4])\n\
    25\n>>> sum_square([-1, 1, -2, 3, 4])\n25\n>>> sum_square([-1, 1, -2, 3, 4])\n\
    25\n>>> sum_square([-1, 1, -2, 3, 4])\n25\n>>> sum_square([-1, 1, -2, 3, 4])\n\
    25\n", "    rolling_max_list = Vector{Int64}()\n    rolling_max_list.append(numbers[1])\n\
    \    for i in 2:length(numbers)\n        if numbers[i] > rolling_max_list[1]\n\
    \            rolling_max_list.append(numbers[i])\n        end\n    end\n    return\
    \ rolling_max_list\nend\n</cell>\n<code language=julia-1.5>", "    \n    rolling_max_list\
    \ = Vector{Int64}()\n    \n    for n in numbers\n        rolling_max_list = rolling_max_list\
    \ + [rolling_max(rolling_max_list + [n])]\n    end\n    \n    return rolling_max_list\n\
    end", "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    rolling_max\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a list of integers and returns the sum of the\
    \ squares of the first n integers in the list.\n>>> sum_squares_first_n(numbers::Vector{Int64},\
    \ n::Int64)::Float64\n>>> sum_squares_first_n([1,2,3,4,5], 2)\n25.0\n>>> sum_squares_first_n([1,2,3,4,5],\
    \ 3)\n49.0\n>>> sum_squares_first_n([1,2,3,4,5], 4)\n925.0\n>>> sum_squares_first_n([1,2,3,4,5],\
    \ 5)\n1849.0\n>>> sum_squares_first_n([1,2,3,4,5], 6)\n276425.0\n>>> sum_squares_first_n([1,2,3,4,5],\
    \ 7)\n4556425.0\n>>> sum_squares_first_n([1,2,3,4,5], 8)\n7296425.0\n>>> sum_squares_first_n([1,2,3,4,5],\
    \ 9)\n10946425.0\n>>> sum_squares_first_n([1,2,3,4,5], 10)\n15946425.0\n>>> sum_squares_first_n([1,2,3,4,5],\
    \ 11)\n25946425.0\n>>> sum_squares_first_n([1,2,3,4,5], 12)\n4996425.0\n>>> sum_squares_first_n([1,2,3,4,5],\
    \ 13)\n9496425.0\n>>> sum_squares_first_n([1,2,3,4,5], 14)\n14496425.0\n>>> sum_squares_first_n([1,2,3,4,5],\
    \ 15)\n24996425.0\n>>> sum_squares_first_n([1,2,3,4,5], 16)\n49496425.0\n>>> sum_squares_first_n([1,2,3,4,5],\
    \ 17)\n92496425.0\n>>> sum_squares_first_n([1,2,3,4,5], 18)\n142496425.0\n>>>\
    \ sum_squares_first_n([1,2,3,4,5], 19)\n242496425.0\n>>> sum_squares_first_n([1,2,3,4,5],\
    \ 20)\n492496425.0\n>>> sum_squares_first_n([1,2,3,4,5], 21)\n92496425.0\n>>>\
    \ sum_squares_first_n([1,2,3,4,5], 22)\n142496425.0\n>>> sum_squares_first_n([1,2,3,4,5],\
    \ 23)\n242496425.0\n>>> sum_squares_first_n([1,2,3,4,5], 24)\n492496425.0\n>>>\
    \ sum_squares_first_n([1,2,3,4,5], 25)\n92496425.0\n>>> sum_squares_first_", " \
    \   rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    rolling_max\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rolling_max_result = Vector{Int64}(undef, 0)\n    rolling_max_result[1]\
    \ = numbers[1]\n    \n    for i = 2:length(numbers)\n        if numbers[i] > rolling_max_result[1]\n\
    \            rolling_max_result[1] = numbers[i]\n        end\n    end\n    \n\
    \    return rolling_max_result\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    rolling_max\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a vector of integers and returns the sum of the\
    \ squares of the elements in the vector.\n>>> sum_square([1, 2, 3])\n9\n>>> sum_square([-1,\
    \ -2, -3])\n25\n>>> sum_square([0, 0])\n0\n>>> sum_square([0, 1])\n1\n>>> sum_square([0,\
    \ 2])\n4\n>>> sum_square([0, 3])\n9\n>>> sum_square([0, 4])\n16\n>>> sum_square([0,\
    \ 5])\n25\n>>> sum_square([0, 6])\n36\n>>> sum_square([0, 7])\n49\n>>> sum_square([0,\
    \ 8])\n64\n>>> sum_square([0, 9])\n81\n>>> sum_square([0, 10])\n100\n>>> sum_square([0,\
    \ 11])\n121\n>>> sum_square([0, 12])\n144\n>>> sum_square([0, 13])\n169\n>>> sum_square([0,\
    \ 14])\n196\n>>> sum_square([0, 15])\n225\n>>> sum_square([0, 16])\n248\n>>> sum_square([0,\
    \ 17])\n271\n>>> sum_square([0, 18])\n294\n>>> sum_square([0, 19])\n317\n>>> sum_square([0,\
    \ 20])\n344\n>>> sum_square([0, 21])\n369\n>>> sum_square([0, 22])\n392\n>>> sum_square([0,\
    \ 23])\n415\n>>> sum_square([0, 24])\n438\n>>> sum_square([0, 25])\n460\n>>> sum_square([0,\
    \ 26])\n484\n>>> sum_square([0, 27])\n507\n>>> sum_square([0, 28])\n530\n>>> sum_square([0,\
    \ 29])\n554\n>>> sum_square([0, 30])\n577\n>>> sum_square([0, 31])\n600\n>>> sum_square([0,\
    \ 32])\n623\n>>> sum_square([0, 33])\n646\n>>> sum_square([0, 34])\n670\n>>> sum_square([0,\
    \ 35])\n693\n>>> sum_square([0, 36])\n718\n>>> sum_square([0, 37])\n740\n>>> sum_square([0,\
    \ 38])\n763\n>>> sum_square([0, 39])\n788\n>>> sum_square([0, 40])\n811\n>>> sum_square([0,\
    \ 41])\n835\n>>> sum_square", "    rolling_max_list = Vector{Int64}()\n    rolling_max_list\
    \ = rolling_max_list + numbers\n    rolling_max_list = rolling_max_list[length(rolling_max_list):end]\n\
    \    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>", "    \n\
    \    rolling_max = numbers[end]\n    for i in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, i)\n    end\n    \n    return rolling_max\nend\n</cell>\n\
    <code language=julia-1.5>\nrolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that generates a list of rolling minimum element\
    \ found until given moment in the sequence.\n    >>> rolling_min([1, 2, 3, 2,\
    \ 3, 4, 2])\n    [1, 2, 2, 2, 2, 2, 2]\n    \"\"\"", "    \n    rolling_max_list\
    \ = []\n    \n    for number in numbers\n        rolling_max_list.append(maximum(rolling_max_list,\
    \ number))\n    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rolling_max_list = Vector{Int64}(undef, 0)\n    \n    for number in numbers\n\
    \        \n        if number > rolling_max_list[1]\n            rolling_max_list[1]\
    \ = number\n        else\n            rolling_max_list[1] = rolling_max_list[1]\n\
    \        end\n        \n        push!(rolling_max_list, rolling_max_list[1])\n\
    \    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rolling_max_list = Vector{Int64}()\n    \n    for i in numbers:\n   \
    \     if i == rolling_max_list[-1]\n            rolling_max_list[i] = i\n    \
    \    else\n            rolling_max_list[i] = rolling_max_list[-1]\n        end\n\
    \    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rolling_max_array = zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n\
    \        rolling_max_array[i] = maximum(rolling_max_array[i-1], numbers[i])\n\
    \    end\n    \n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    local max_rolling = 0\n    local max_rolling_number = 0\n    local max_rolling_number_index\
    \ = 0\n    local max_rolling_number_indexes = []\n    \n    for i = 1:length(numbers)\n\
    \        if numbers[i] > max_rolling then\n            max_rolling = numbers[i]\n\
    \            max_rolling_number = numbers[i]\n            max_rolling_number_index\
    \ = i\n            max_rolling_number_indexes = []\n        elseif numbers[i]\
    \ == max_rolling then\n            max_rolling_number_indexes = [max_rolling_number_indexes,\
    \ i]\n        end\n    end\n    \n    return max_rolling_number_indexes\nend\n\
    </cell>\n<code language=julia-1.5>", "    rolling_max_list = Vector{Int64}()\n\
    \    rolling_max_list = rolling_max_list .+ numbers\n    rolling_max_list = rolling_max_list\
    \ .+ rolling_max_list\n    rolling_max_list = rolling_max_list .+ rolling_max_list\n\
    \    rolling_max_list = rolling_max_list .+ rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list .+ rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ .+ rolling_max_list\n    rolling_max_list = rolling_max_list .+ rolling_max_list\n\
    \    rolling_max_list = rolling_max_list .+ rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list .+ rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ .+ rolling_max_list\n    rolling_max_list = rolling_max_list .+ rolling_max_list\n\
    \    rolling_max_list = rolling_max_list .+ rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list .+ rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ .+ rolling_max_list\n    rolling_max_list = rolling_max_list .+ rolling_max_list\n\
    \    rolling_max_list = rolling_max_list .+ rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list .+ rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ .+ rolling_max_list\n    rolling_max_list = rolling_max_list .+ rolling_max_list\n\
    \    rolling_max_list = rolling_max_list .+ rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list .+ rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ .+ rolling_max_list\n    rolling_max_list = rolling_max_list .+ rolling_max_list\n\
    \    rolling_max_list = rolling_max_list .+ rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list .+ rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ .+ rolling_max_list\n    rolling_max_list = rolling_max_list .+ rolling_max_list\n\
    \    rolling_max_list = rolling_max_list .+ rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list .+ rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ .+ rolling_max_list\n    rolling_max_list = rolling_max_list .+ rolling_max_list\n\
    \    rolling_max_list = rolling_", "    \n    rolling_max_list = Vector{Int64}()\n\
    \    \n    for n in numbers\n        if n == rolling_max_list[1]\n           \
    \ rolling_max_list[1] = n\n        else\n            push!(rolling_max_list, n)\n\
    \        end\n    end\n    \n    return rolling_max_list\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    rolling_max_list = Vector{Int64}()\n    \n\
    \    for n in numbers\n        rolling_max_list = rolling_max_list + [rolling_max(rolling_max_list)]\n\
    \    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max_list = Vector{Int64}()\n    rolling_max_list[1] = numbers[1]\n\
    \    for i = 2:length(numbers)\n        if numbers[i] > rolling_max_list[i-1]\n\
    \            rolling_max_list[i] = numbers[i]\n        else\n            rolling_max_list[i]\
    \ = rolling_max_list[i-1]\n        end\n    end\n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>", "    rolling_max = numbers[1]\n    for\
    \ n in numbers[2:end]\n        rolling_max = max(rolling_max, n)\n    end\n  \
    \  return rolling_max\nend\n</cell>\n<code language=julia-1.5>", "    \n    rolling_max\
    \ = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n        rolling_max[length(rolling_max)\
    \ + 1] = n\n    end\n    \n    return rolling_max\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns the sum of the\
    \ squares of the integers in the vector.", "    rolling_max_list <- Vector{Int64}(undef,\
    \ 0)\n    rolling_max_list <- rolling_max_list ++ numbers\n    rolling_max_list\
    \ <- rolling_max_list[rolling_max_list .!= rolling_max_list[1]]\n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    rolling_max_list = Vector{Int64}()\n\
    \    \n    for n in numbers\n        rolling_max_list = push!(rolling_max_list,\
    \ maximum(rolling_max_list, n))\n    end\n    \n    return rolling_max_list\n\
    end", "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.4>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    rolling_max_list = Vector{Int64}()\n    \n    for number in numbers\n\
    \        rolling_max_list = append!(rolling_max_list, maximum(rolling_max_list,\
    \ number))\n    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\n\
    rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that generates a list of rolling minimum element found until given moment in\
    \ the sequence.\n    >>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 2, 2,\
    \ 2, 2]\n    \"\"\"", "    \n    rolling_max_list = Vector{Int64}(undef, 0)\n\
    \    \n    for number in numbers\n        if number > rolling_max_list[1]\n  \
    \          rolling_max_list[1] = number\n        else\n            rolling_max_list[1]\
    \ = max(rolling_max_list[1], number)\n        end\n    end\n    \n    return rolling_max_list\n\
    end\n</cell>\n<text>\nExercise 9\nWrite a function that takes a vector of integers\
    \ and a window size and returns a vector with the rolling mean of the given vector.\
    \ \nThe window size should be at least 1.", "    \n    rolling_max_list = Vector{Int64}()\n\
    \    \n    for n in numbers\n        rolling_max_list = rolling_max_list + [rolling_max(rolling_max_list)]\n\
    \    end\n    \n    return rolling_max_list\nend", "    rolling_max_array = zeros(length(numbers))\n\
    \    rolling_max_array[1] = numbers[1]\n    for i = 2:length(numbers)\n      \
    \  rolling_max_array[i] = maximum(rolling_max_array[i-1:i+1], numbers[i])\n  \
    \  end\n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max_list = Vector{Int64}()\n    rolling_max_list = rolling_max_list\
    \ + numbers\n    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[1]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[2]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[3]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[4]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[5]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[6]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[7]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[8]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[9]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[10]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[11]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[12]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[13]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[14]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[15]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[16]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[17]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[18]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[19]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[20]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[21]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[22]]\n\
    \    rolling_max_", "    rolling_max_array = zeros(length(numbers))\n    for i\
    \ = 1:length(numbers)\n        rolling_max_array[i] = maximum(rolling_max_array[i-1],\
    \ numbers[i])\n    end\n    return rolling_max_array\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that generates a rolling mean of a given list of integers,\
    \ starting from a given moment.\n    >>> rolling_mean([1, 2, 3, 2, 3, 4, 2])\n\
    \    [1.5, 2.5, 3.5, 4.5, 5.5, 6.5]\n    \"\"\"", "    rolling_max_list = Vector{Int64}()\n\
    \    rolling_max_list = rolling_max_list + numbers\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list[1]]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list[2]]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list[3]]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list[4]]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list[5]]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list[6]]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list[7]]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list[8]]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list[9]]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list[10]]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list[11]]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list[12]]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list[13]]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list[14]]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list[15]]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list[16]]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list[17]]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list[18]]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list[19]]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list[20]]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list[21]]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list[22]]\n    rolling_max_", "    rolling_max = numbers[end]\n\
    \    for n in numbers[2:end]\n        if n > rolling_max\n            rolling_max\
    \ = n\n        end\n    end\n    rolling_max\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that generates a random permutation of a given vector. \nHint:\
    \ use the function randperm()", "    rolling_max_list = Vector{Int64}(undef, 0)\n\
    \    rolling_max_list[1] = numbers[1]\n    for i = 2:length(numbers)\n       \
    \ if numbers[i] > rolling_max_list[i-1]\n            rolling_max_list[i] = numbers[i]\n\
    \        else\n            rolling_max_list[i] = rolling_max_list[i-1]\n     \
    \   end\n    end\n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list.append(numbers[1])\n\
    \    \n    for n in numbers[2:end]\n        if n > rolling_max_list[1]\n     \
    \       rolling_max_list.append(n)\n        end\n    end\n    \n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>", "    rolling_max_list = Vector{Int64}()\n\
    \    rolling_max_list.append(numbers[1])\n    for n in numbers[2:end]\n      \
    \  rolling_max_list.append(max(rolling_max_list[-1], numbers[n]))\n    end\n \
    \   rolling_max_list\nend\n</cell>\n<code language=julia-1.5>", "    rolling_max\
    \ = numbers[end]\n    for n in numbers[2:end]\n        rolling_max = max(rolling_max,\
    \ n)\n    end\n    return rolling_max\nend\n</cell>\n<code language=julia-1.4>",
  "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n\
    \        rolling_max = max(rolling_max, n)\n    end\n    rolling_max\nend\n</cell>\n\
    <text>\nThe rolling_max function above is very similar to the built-in max function,\
    \ but with some important differences:", "    \n    maximum = numbers[1]\n   \
    \ \n    for n in numbers[2:end]\n        if n > maximum\n            maximum =\
    \ n\n        end\n    end\n    \n    return maximum\nend\n</cell>\n<text>\nrolling_max()\
    \ function", "    rolling_max_list = Vector{Int64}()\n    rolling_max_list.append(numbers[1])\n\
    \    for n in numbers[2:end]\n        if n > rolling_max_list[1]\n           \
    \ rolling_max_list = Vector{Int64}([n, rolling_max_list[1]])\n        else\n \
    \           rolling_max_list = Vector{Int64}([rolling_max_list[1], n])\n     \
    \   end\n    end\n    return rolling_max_list\nend", "    rolling_max_array =\
    \ zeros(length(numbers))\n    rolling_max_array[1] = numbers[1]\n    for i = 2:length(numbers)\n\
    \        rolling_max_array[i] = max(numbers[i-1], numbers[i])\n    end\n    return\
    \ rolling_max_array\nend\n</cell>\n<code language=julia-1.4>", "    rolling_max_list\
    \ = Vector{Int64}()\n    rolling_max_list = copy(numbers)\n    rolling_max_list\
    \ = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]", "    \n    rolling_max_list\
    \ = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n        rolling_max_list\
    \ = rolling_max_list + [rolling_max(rolling_max_list)]\n    end\n    \n    return\
    \ rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\nrolling_max([1, 2,\
    \ 3, 2, 3, 4, 2])\n</cell>\n<text>\nExercise 2\nWrite a function that generates\
    \ a list of rolling minimum element found until given moment in the sequence.\n\
    >>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3, 3, 4, 4]\n</text>\n<code\
    \ language=julia-1.5>", "    rolling_max_list = Vector{Int64}(undef, 0)\n    rolling_max_list[1]\
    \ = numbers[1]\n    for i = 2:length(numbers)\n        if numbers[i] > rolling_max_list[i-1]\n\
    \            rolling_max_list[i] = numbers[i]\n        else\n            rolling_max_list[i]\
    \ = rolling_max_list[i-1]\n        end\n    end\n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    rolling_max = numbers[end]\n\
    \    for n in numbers[2:end]\n        if n > rolling_max\n            rolling_max\
    \ = n\n        end\n    end\n    \n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    rolling_max_list = Vector{Int64}()\n    rolling_max_list\
    \ = rolling_max_list + numbers\n    rolling_max_list = rolling_max_list[length(rolling_max_list):end]\n\
    \    return rolling_max_list\nend\n</cell>\n<code language=julia-1.3>", "    \n\
    \    rolling_max_list = []\n    \n    for number in numbers\n        rolling_max_list.append(number)\n\
    \    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    rolling_max_list = Vector{Int64}()\n    \n\
    \    for n in numbers\n        rolling_max_list = push!(rolling_max_list, maximum(n))\n\
    \    end\n    \n    return rolling_max_list\nend", "    \n    rolling_max = numbers[1]\n\
    \    for number in numbers[2:end]\n        if number > rolling_max\n         \
    \   rolling_max = number\n        end\n    end\n    \n    return rolling_max\n\
    end\n</cell>\n<code language=julia-1.4>", "    \n    rolling_max = Vector{Int64}(undef,\
    \ 0)\n    \n    for n in numbers\n        if rolling_max == Vector{Int64}(undef,\
    \ 0)\n            rolling_max = [n]\n        else\n            if n > rolling_max[1]\n\
    \                rolling_max = rolling_max[1:end-1] + [rolling_max[1] + 1]\n \
    \           end\n        end\n    end\n    \n    return rolling_max\nend\n</cell>\n\
    <code language=julia-1.5>", "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n\
    \        rolling_max = max(rolling_max, n)\n    end\n    return rolling_max\n\
    end\n</cell>\n<code language=julia-1.5>", "    rolling_max = numbers[end]\n  \
    \  for n in numbers[2:end]\n        rolling_max = max(rolling_max, n)\n    end\n\
    \    rolling_max\nend\n</cell>\n<code language=julia-1.5>", "    \n    rolling_max_list\
    \ = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n        rolling_max_list\
    \ = rolling_max_list + [rolling_max(n)]\n    end\n    \n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    maximums = Vector{Int64}()\n\
    \    maximums.push(numbers[1])\n    for n in numbers[2:end]\n        if maximums[end-1]\
    \ < n\n            maximums[end] = n\n        end\n    end\n    maximums\nend\n\
    </cell>\n<code language=julia-1.4>", "    rolling_max = numbers[end]\n    for\
    \ n in numbers[2:end]\n        rolling_max = max(rolling_max, n)\n    end\n  \
    \  rolling_max\nend\n</cell>\n<code language=julia-1.5>", "    rolling_max = numbers[end]\n\
    \    for n in numbers[2:end]\n        rolling_max = max(rolling_max, n)\n    end\n\
    \    rolling_max\nend\n</cell>\n<code language=julia-1.5>", "    \n    rolling_max\
    \ = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n        push!(rolling_max,\
    \ maximum(n))\n    end\n    \n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max_list = Vector{Int64}()\n    rolling_max_list[1] = numbers[1]\n\
    \    for i = 2:length(numbers)\n        rolling_max_list[i] = maximum(rolling_max_list[i-2],\
    \ numbers[i])\n    end\n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.4>", "    \n    rolling_max_list = Vector{Int64}()\n    \n\
    \    for n in numbers\n        rolling_max_list = append!(rolling_max_list, rolling_max(n))\n\
    \    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\n\
    rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that generates all the possible combinations of k elements from a given list\
    \ of n elements.", "    \n    rolling_max = Vector{Int64}(undef, 0)\n    \n  \
    \  for n in numbers\n        rolling_max = rolling_max .+ n\n    end\n    \n \
    \   return rolling_max\nend\n</cell>\n<code language=julia-1.5>", "    rolling_max_list\
    \ = Vector{Int64}()\n    rolling_max_list = rolling_max_list .+ numbers\n    rolling_max_list\
    \ = rolling_max_list .+ rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ .+ rolling_max_list\n    rolling_max_list = rolling_max_list .+ rolling_max_list\n\
    \    rolling_max_list = rolling_max_list .+ rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list .+ rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ .+ rolling_max_list\n    rolling_max_list = rolling_max_list .+ rolling_max_list\n\
    \    rolling_max_list = rolling_max_list .+ rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list .+ rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ .+ rolling_max_list\n    rolling_max_list = rolling_max_list .+ rolling_max_list\n\
    \    rolling_max_list = rolling_max_list .+ rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list .+ rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ .+ rolling_max_list\n    rolling_max_list = rolling_max_list .+ rolling_max_list\n\
    \    rolling_max_list = rolling_max_list .+ rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list .+ rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ .+ rolling_max_list\n    rolling_max_list = rolling_max_list .+ rolling_max_list\n\
    \    rolling_max_list = rolling_max_list .+ rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list .+ rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ .+ rolling_max_list\n    rolling_max_list = rolling_max_list .+ rolling_max_list\n\
    \    rolling_max_list = rolling_max_list .+ rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list .+ rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ .+ rolling_max_list\n    rolling_max_list = rolling_max_list .+ rolling_max_list\n\
    \    rolling_max_list = rolling_max_list .+ rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list .+ rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ .+ rolling_max_list\n    rolling_max_list = rolling_", "    \n    maximum =\
    \ numbers[1]\n    for i in numbers[2:end]\n        if i > maximum\n          \
    \  maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that generates a random integer between 1 and a given\
    \ number $n$, inclusive.", "    rolling_max_list = Vector{Int64}()\n    rolling_max_list[1]\
    \ = numbers[1]\n    for i = 2:length(numbers)\n        if numbers[i] > rolling_max_list[i-1]\n\
    \            rolling_max_list[i] = numbers[i]\n        else\n            rolling_max_list[i]\
    \ = rolling_max_list[i-1]\n        end\n    end\n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    local max_so_far = numbers[1]\n\
    \    local max_so_far_index = 1\n    local max_so_far_rolling_sum = 0\n    local\
    \ max_so_far_rolling_sum_index = 1\n    \n    for i = 2:length(numbers)\n    \
    \    if numbers[i] > max_so_far\n            max_so_far = numbers[i]\n       \
    \     max_so_far_index = i\n            max_so_far_rolling_sum = max_so_far\n\
    \            max_so_far_rolling_sum_index = i\n        else\n            max_so_far_rolling_sum\
    \ = max_so_far_rolling_sum + numbers[i]\n            max_so_far_rolling_sum_index\
    \ = i\n        end\n    end\n    \n    return numbers[max_so_far_index:max_so_far_index+1]\n\
    end\n</cell>\n<text>\nRolling sum", "    rolling_max_result = Vector{Int64}()\n\
    \    rolling_max_result[1] = numbers[1]\n    for i = 2:length(numbers)\n     \
    \   if numbers[i] > rolling_max_result[i-1]\n            rolling_max_result[i]\
    \ = numbers[i]\n        else\n            rolling_max_result[i] = rolling_max_result[i-1]\n\
    \        end\n    end\n    return rolling_max_result\nend\n</code>\n<|/ a tags=julia,arrays,performance\
    \ |>\n<| a dscore=2 |>\nHere is a solution that uses no loops and is about twice\
    \ as fast as the other solutions:\n<code>", "    rolling_max = numbers[1]\n  \
    \  for n in numbers[2:end]\n        rolling_max = max(rolling_max, n)\n    end\n\
    \    return rolling_max\nend\n</cell>\n<code language=julia-1.5>", "    \n   \
    \ rolling_max_list = Vector{Int64}(undef, 0)\n    \n    for number in numbers\n\
    \        rolling_max_list = push!(rolling_max_list, maximum(rolling_max_list))\n\
    \    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\n\
    rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and a window size as arguments and returns a\
    \ vector of rolling mean of the given window size.", "    rolling_max = numbers[end]\n\
    \    for n in numbers[2:end]\n        rolling_max = max(rolling_max, n)\n    end\n\
    \    return rolling_max\nend\n</cell>\n<code language=julia-1.5>", "    rolling_max_list\
    \ = Vector{Int64}(undef, 0)\n    rolling_max_list = rolling_max_list + numbers\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>", "    rolling_max = numbers[end]\n  \
    \  for n in numbers[2:end]\n        rolling_max = max(rolling_max, n)\n    end\n\
    \    rolling_max\nend\n</cell>\n<code language=julia-1.5>", "    \n    rolling_max_list\
    \ = Vector{Int64}()\n    \n    for number in numbers\n        if number > rolling_max_list[1]\n\
    \            rolling_max_list[1] = number\n        else\n            rolling_max_list[1]\
    \ = rolling_max_list[1]\n        end\n    end\n    \n    return rolling_max_list\n\
    end", "    \n    rolling_max = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n\
    \        rolling_max = [rolling_max[i] | rolling_max[i+1] | rolling_max[i+2] |\
    \ rolling_max[i+3] | rolling_max[i+4] | rolling_max[i+5] | rolling_max[i+6] |\
    \ rolling_max[i+7] | rolling_max[i+8] | rolling_max[i+9] | rolling_max[i+10] |\
    \ rolling_max[i+11] | rolling_max[i+12] | rolling_max[i+13] | rolling_max[i+14]\
    \ | rolling_max[i+15] | rolling_max[i+16] | rolling_max[i+17] | rolling_max[i+18]\
    \ | rolling_max[i+19] | rolling_max[i+20] | rolling_max[i+21] | rolling_max[i+22]\
    \ | rolling_max[i+23] | rolling_max[i+24] | rolling_max[i+25] | rolling_max[i+26]\
    \ | rolling_max[i+27] | rolling_max[i+28] | rolling_max[i+29] | rolling_max[i+30]\
    \ | rolling_max[i+31] | rolling_max[i+32] | rolling_max[i+33] | rolling_max[i+34]\
    \ | rolling_max[i+35] | rolling_max[i+36] | rolling_max[i+37] | rolling_max[i+38]\
    \ | rolling_max[i+39] | rolling_max[i+40] | rolling_max[i+41] | rolling_max[i+42]\
    \ | rolling_max[i+43] | rolling_max[i+44] | rolling_max[i+45] | rolling_max[i+46]\
    \ | rolling_max[i+47] | rolling_max[i+48] | rolling_max[i+49] | rolling_max[i+50]\
    \ | rolling_max[i+51] | rolling_max[i+52] | rolling_max[i+53] | rolling_max[i+54]\
    \ | rolling_max[i+55] | rolling_max[i+56] | rolling_max[i+57] | rolling_max[i+58]\
    \ | rolling_max[i+59] | rolling_max[i+60] | rolling_max[i+61] | rolling_max[i+62]\
    \ | rolling_max[i+63] | rolling_max[i+64] | rolling_max[i+65] | rolling_max[i+66]\
    \ | rolling_max[i+67] | rolling_max[i+68] | rolling_max[i+69] | rolling_", " \
    \   \n    rolling_max_list <- Vector{Int64}(undef, 0)\n    \n    for number in\
    \ numbers\n        rolling_max_list <- push!(rolling_max_list, maximum(rolling_max_list,\
    \ number))\n    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max_list = Vector{Int64}()\n    rolling_max_list[1] = numbers[1]\n\
    \    for i = 2:length(numbers)\n        if numbers[i] > rolling_max_list[i-1]\n\
    \            rolling_max_list[i] = numbers[i]\n        else\n            rolling_max_list[i]\
    \ = rolling_max_list[i-1]\n        end\n    end\n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>", "    rolling_max_list = Vector{Int64}()\n\
    \    rolling_max_list.append(numbers[1])\n    for n in numbers[2:end]\n      \
    \  if n > rolling_max_list[1]\n            rolling_max_list.append(n)\n      \
    \  end\n    end\n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rolling_max_list = Vector{Int64}()\n    \n    for number in numbers\n\
    \        rolling_max_list = push!(rolling_max_list, maximum(rolling_max_list,\
    \ number))\n    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<text>\nExercise\nWrite a function\
    \ that generates the rolling mean of a given list of integers, given an initial\
    \ window size.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    rolling_max_array\
    \ = zeros(length(numbers))\n    rolling_max_array[1] = numbers[1]\n    for i =\
    \ 2:length(numbers)\n        rolling_max_array[i] = max(numbers[i-1], numbers[i])\n\
    \    end\n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max_list = Vector{Int64}()\n    rolling_max_list[1] = numbers[1]\n\
    \    for i = 2:length(numbers)\n        rolling_max_list[i] = maximum(rolling_max_list[i-1],\
    \ numbers[i])\n    end\n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max_list = Vector{Int64}()\n    rolling_max_list.append(numbers[1])\n\
    \    for n in numbers[2:end]\n        if n > rolling_max_list[1]\n           \
    \ rolling_max_list = Vector{Int64}([rolling_max_list[1], n])\n        else\n \
    \           rolling_max_list = Vector{Int64}([n, rolling_max_list[1]])\n     \
    \   end\n    end\n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    rolling_max = numbers[1]\n    for n in numbers[2:end]\n\
    \        if n > rolling_max\n            rolling_max = n\n        end\n    end\n\
    \    return rolling_max\nend\n</cell>\n<code language=julia-1.5>", "    rolling_max_list\
    \ = Vector{Int64}()\n    rolling_max_list[1] = numbers[1]\n    for i = 2:length(numbers)\n\
    \        if numbers[i] > rolling_max_list[i-1]\n            rolling_max_list[i]\
    \ = numbers[i]\n        else\n            rolling_max_list[i] = rolling_max_list[i-1]\n\
    \        end\n    end\n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max_list = Vector{Int64}()\n    rolling_max_list = rolling_max_list\
    \ + numbers\n    rolling_max_list = rolling_max_list[2:end]\n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>", "    rolling_max_list = Vector{Int64}(undef,\
    \ 0)\n    rolling_max_list[1] = numbers[1]\n    for i = 2:length(numbers)\n  \
    \      rolling_max_list[i] = max(numbers[i-1], rolling_max_list[i-1])\n    end\n\
    \    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>", "    rolling_max_list\
    \ = Vector{Int64}()\n    rolling_max_list = numbers[:]\n    rolling_max_list.sort()\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    rolling_max = Vector{Int64}(undef,\
    \ 0)\n    \n    for n in numbers\n        rolling_max = max(rolling_max, n)\n\
    \    end\n    \n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rolling_max_list = Vector{Int64}()\n    \n    for n in numbers\n    \
    \    rolling_max_list = push!(rolling_max_list, maximum(n))\n    end\n    \n \
    \   return rolling_max_list\nend\n</cell>\n<code language=julia-1.4>\nrolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n</cell>\n<text>\nExercise 2\nWrite a function that generates\
    \ a rolling average of a given list of integers, given an window size.\nThe function\
    \ should return a list of floats.\nThe function should take as input a list of\
    \ integers and an integer $k$, and return a list of floats.\nThe function should\
    \ return a list of floats.\nThe function should return a list of floats.\nThe\
    \ function should return a list of floats.\nThe function should return a list\
    \ of floats.\nThe function should return a list of floats.\nThe function should\
    \ return a list of floats.\nThe function should return a list of floats.\nThe\
    \ function should return a list of floats.\nThe function should return a list\
    \ of floats.\nThe function should return a list of floats.\nThe function should\
    \ return a list of floats.\nThe function should return a list of floats.\nThe\
    \ function should return a list of floats.\nThe function should return a list\
    \ of floats.\nThe function should return a list of floats.\nThe function should\
    \ return a list of floats.\nThe function should return a list of floats.\nThe\
    \ function should return a list of floats.\nThe function should return a list\
    \ of floats.\nThe function should return a list of floats.\nThe function should\
    \ return a list of floats.\nThe function should return a list of floats.\nThe\
    \ function should return a list of floats.\nThe function should return a list\
    \ of floats.\nThe function should return a list of floats.\nThe function should\
    \ return a list of floats.\nThe function should return a list of floats.\nThe\
    \ function should return a list of floats.\nThe function should return a list\
    \ of floats.\nThe function should return a list of floats.\nThe function should\
    \ return a list of floats.\nThe function should return a list of floats.\nThe\
    \ function should return a list of floats.\nThe function should return a list\
    \ of floats.\nThe function should return a list of floats.\nThe function should\
    \ return a list of floats.\nThe function should return a list of floats.\nThe\
    \ function should return a list of floats.\nThe function should return a list\
    \ of floats.\nThe function should return a list of floats.\nThe function should\
    \ return a list of floats.\nThe function should return a list of floats.\nThe\
    \ function should return a list of floats.\nThe function should return a list\
    \ of floats.\nThe function should return a list of floats.\nThe function should\
    \ return a list of floats.\nThe function should return a list of floats.\nThe\
    \ function should return a list of floats.\nThe function should return a list\
    \ of floats.\n", "    rolling_max = numbers[1]\n    for n in numbers[2:end]\n\
    \        if n > rolling_max\n            rolling_max = n\n        end\n    end\n\
    \    return rolling_max\nend\n</cell>\n<code language=julia-1.5>", "    rolling_max_list\
    \ = Vector{Int64}()\n    rolling_max_list[1] = numbers[1]\n    for i = 2:length(numbers)\n\
    \        if numbers[i] > rolling_max_list[i-1]\n            rolling_max_list[i]\
    \ = numbers[i]\n        else\n            rolling_max_list[i] = rolling_max_list[i-1]\n\
    \        end\n    end\n    return rolling_max_list\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\nThis can be done with one line using Julia 1.5.0:\n<code>\n\
    julia> using Statistics", "    rolling_max_list = Vector{Int64}()\n    rolling_max_list\
    \ = rolling_max_list + numbers\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>", "    \n\
    \    rolling_max_list = Vector{Int64}()\n    \n    for number in numbers\n   \
    \     \n        if number > rolling_max_list[end]\n            rolling_max_list\
    \ += number\n        end\n    end\n    \n    return rolling_max_list\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that generates a list of rolling minimum\
    \ element found until given moment in the sequence.\n>>> rolling_min([1, 2, 3,\
    \ 2, 3, 4, 2])\n[1, 2, 3, 3, 3, 4, 2]\n</text>", "    \n    rolling_max_list =\
    \ Vector{Int64}(undef, 0)\n    \n    for n in numbers\n        push!(rolling_max_list,\
    \ maximum(rolling_max_list, n))\n    end\n    \n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    rolling_max_list = Vector{Int64}(undef,\
    \ 0)\n    \n    for number in numbers\n        rolling_max_list = push!(rolling_max_list,\
    \ maximum(rolling_max_list, number))\n    end\n    \n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>\nrolling_max([1, 2, 3, 2, 3, 4, 2])\n\
    </cell>\n<code language=julia-1.5>", "    rolling_max_list = Vector{Int64}()\n\
    \    rolling_max_list = rolling_max_list + numbers\n    rolling_max_list = rolling_max_list[length(rolling_max_list):end]\n\
    \    return rolling_max_list\nend\n</cell>\n<code language=julia-1.3>", "    \n\
    \    rolling_max = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n     \
    \   rolling_max = [max(rolling_max[i], n) for i in 1:length(rolling_max)]\n  \
    \  end\n    \n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max_list = Vector{Int64}()\n    rolling_max_list = copy(numbers)\n\
    \    for i = 1:length(numbers)\n        rolling_max_list[i] = maximum(rolling_max_list[i-1:i+1])\n\
    \    end\n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rolling_max_list <- Vector{Int64}(undef, 0)\n    \n    for number in\
    \ numbers\n        rolling_max_list <- append(rolling_max_list, maximum(rolling_max_list,\
    \ number))\n    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rolling_max_list = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n\
    \        rolling_max_list = push!(rolling_max_list, maximum(rolling_max_list,\
    \ n))\n    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\n\
    rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and a window size and returns a vector of rolling\
    \ means.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    rolling_max_list = Vector{Int64}()\n    \n    for number in numbers\n   \
    \     rolling_max_list = append(rolling_max_list, maximum(rolling_max_list, number))\n\
    \    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.4>\n\
    rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that generates a vector with all the prime numbers less than a given number\
    \ $n$. \nThe function should return $n$ if $n$ is not a prime number.", "    \n\
    \    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        if n > rolling_max\n\
    \            rolling_max = n\n        end\n    end\n    \n    return rolling_max\n\
    end\n</cell>\n<code language=julia-1.5>", "    rolling_max_list = Vector{Int64}()\n\
    \    rolling_max_list = rolling_max_list + numbers\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    return rolling_max_list\nend", "    \n    rolling_max = Vector{Int64}(undef,\
    \ 0)\n    \n    for n in numbers\n        push!(rolling_max, maximum(rolling_max))\n\
    \    end\n    \n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max_list = Vector{Int64}()\n    rolling_max_list = rolling_max_list\
    \ + numbers\n    rolling_max_list = rolling_max_list + rolling_max(numbers[2:end])\n\
    \    return rolling_max_list\nend", "    rolling_max_list = Vector{Int64}()\n\
    \    rolling_max_list.append(numbers[1])\n    for n in numbers[2:end]\n      \
    \  if n > rolling_max_list[1]\n            rolling_max_list.append(n)\n      \
    \  end\n    end\n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    rolling_max\nend\n</cell>\n<text>\nThe function\
    \ rolling_max is defined above. Let's see how it works:", "    rolling_max_array\
    \ = Array{Int64}(length(numbers), length(numbers))\n    for i = 1:length(numbers)\n\
    \        rolling_max_array[i, :] = maximum(numbers[i:i+length(numbers)])\n   \
    \ end\n    return rolling_max_array\nend\n</code>\n<|/ a tags=julia,arrays,performance\
    \ |>\n<| a dscore=1 |>\nA bit late to the party, but here's a solution using broadcasting\
    \ and the built-in maximum:\n<code>", "    rolling_max_list <- Vector{Int64}()\n\
    \    rolling_max_list <- numbers[end]\n    for number in numbers[2:end]\n    \
    \    rolling_max_list <- max(rolling_max_list, number)\n    end\n    rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    rolling_max_list = Vector{Int64}()\n\
    \    \n    for n in numbers\n        rolling_max_list = push!(rolling_max_list,\
    \ maximum(rolling_max_list, n))\n    end\n    \n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>", "    rolling_max_list = Vector{Int64}()\n\
    \    rolling_max_list.append(numbers[1])\n    for n in numbers[2:end]\n      \
    \  rolling_max_list.append(max(rolling_max_list[-1], rolling_max_list[n-1]))\n\
    \    end\n    rolling_max_list\nend\n</cell>\n<code language=julia-1.4>", "  \
    \  rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n\
    \        rolling_max = max(rolling_max, n)\n    end\n    return rolling_max\n\
    end\n</cell>\n<code language=julia-1.5>", "    rolling_max = numbers[end]\n  \
    \  for n in numbers[2:end]\n        rolling_max = max(rolling_max, n)\n    end\n\
    \    return rolling_max\nend\n</cell>\n<code language=julia-1.5>", "    \n   \
    \ rolling_max_list = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n   \
    \     rolling_max_list = rolling_max_list + [rolling_max(rolling_max_list)]\n\
    \    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max_list = Vector{Int64}()\n    rolling_max_list.append(numbers[1])\n\
    \    for n in numbers[2:end]\n        if n > rolling_max_list[1]\n           \
    \ rolling_max_list = Vector{Int64}([n, rolling_max_list[1]])\n        end\n  \
    \  end\n    rolling_max_list\nend\n</cell>\n<code language=julia-1.5>", "    rolling_max_list\
    \ = Vector{Int64}(undef, 0)\n    rolling_max_list[1] = numbers[1]\n    for i =\
    \ 2:length(numbers)\n        if numbers[i] > rolling_max_list[i-1]\n         \
    \   rolling_max_list[i] = numbers[i]\n        else\n            rolling_max_list[i]\
    \ = rolling_max_list[i-1]\n        end\n    end\n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>", "    rolling_max_rolling_window(numbers,\
    \ length(numbers), 1)\nend\n</cell>\n<code language=julia-1.5>", "    \n    rolling_max_list\
    \ = Vector{Int64}()\n    \n    for number in numbers\n        rolling_max_list\
    \ = rolling_max_list + [number]\n    end\n    \n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>", "    rolling_max_list = Vector{Int64}()\n\
    \    rolling_max_list = rolling_max_list + numbers\n    rolling_max_list = rolling_max_list\
    \ + rolling_max_list\n    rolling_max_list = rolling_max_list + rolling_max_list\n\
    \    rolling_max_list = rolling_max_list + rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list + rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ + rolling_max_list\n    rolling_max_list = rolling_max_list + rolling_max_list\n\
    \    rolling_max_list = rolling_max_list + rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list + rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ + rolling_max_list\n    rolling_max_list = rolling_max_list + rolling_max_list\n\
    \    rolling_max_list = rolling_max_list + rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list + rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ + rolling_max_list\n    rolling_max_list = rolling_max_list + rolling_max_list\n\
    \    rolling_max_list = rolling_max_list + rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list + rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ + rolling_max_list\n    rolling_max_list = rolling_max_list + rolling_max_list\n\
    \    rolling_max_list = rolling_max_list + rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list + rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ + rolling_max_list\n    rolling_max_list = rolling_max_list + rolling_max_list\n\
    \    rolling_max_list = rolling_max_list + rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list + rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ + rolling_max_list\n    rolling_max_list = rolling_max_list + rolling_max_list\n\
    \    rolling_max_list = rolling_max_list + rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list + rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ + rolling_max_list\n    rolling_max_list = rolling_max_list + rolling_max_list\n\
    \    rolling_max_list = rolling_max_list + rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list + rolling_max_list\n    rolling_max_list = rolling_max_",
  "    \n    rolling_max_list = Vector{Int64}()\n    \n    for i in numbers:\n   \
    \     if rolling_max_list.length == 0 \n            rolling_max_list << i\n  \
    \      elseif rolling_max_list.length > 0\n            if i > rolling_max_list[end]\n\
    \                rolling_max_list << i\n            else\n                rolling_max_list[end]\
    \ = i\n            end\n        end\n    end\n    \n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    rolling_max_array = zeros(Int,\
    \ length(numbers))\n    \n    for i = 1:length(numbers)\n        rolling_max_array[i]\
    \ = maximum(numbers[i:i+1])\n    end\n    \n    return rolling_max_array\nend\n\
    </cell>\n<text>\nrolling_max", "    \n    rolling_max = numbers[end]\n    for\
    \ n in numbers[2:end]\n        if n > rolling_max\n            rolling_max = n\n\
    \        end\n    end\n    \n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max_list = Vector{Int64}()\n    rolling_max_list = rolling_max_list\
    \ + numbers\n    rolling_max_list = rolling_max_list[rolling_max_list!=numbers]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list!=numbers]\n    rolling_max_list\
    \ = rolling_max_list[rolling_max_list!=numbers]\n    rolling_max_list = rolling_max_list[rolling_max_list!=numbers]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list!=numbers]\n    rolling_max_list\
    \ = rolling_max_list[rolling_max_list!=numbers]\n    rolling_max_list = rolling_max_list[rolling_max_list!=numbers]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list!=numbers]\n    rolling_max_list\
    \ = rolling_max_list[rolling_max_list!=numbers]\n    rolling_max_list = rolling_max_list[rolling_max_list!=numbers]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list!=numbers]\n    rolling_max_list\
    \ = rolling_max_list[rolling_max_list!=numbers]\n    rolling_max_list = rolling_max_list[rolling_max_list!=numbers]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list!=numbers]\n    rolling_max_list\
    \ = rolling_max_list[rolling_max_list!=numbers]\n    rolling_max_list = rolling_max_list[rolling_max_list!=numbers]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list!=numbers]\n    rolling_max_list\
    \ = rolling_max_list[rolling_max_list!=numbers]\n    rolling_max_list = rolling_max_list[rolling_max_list!=numbers]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list!=numbers]\n    rolling_max_list\
    \ = rolling_max_list[rolling_max_list!=numbers]\n    rolling_max_list = rolling_max_list[rolling_max_list!=numbers]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list!=numbers]\n    rolling_max_list\
    \ = rolling_max_list[rolling_max_list!=numbers]\n    rolling_max_list = rolling_max_list[rolling_max_list!=numbers]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list!=numbers]\n    rolling_max_list\
    \ = rolling_max_list[rolling_max_list!=numbers]\n    rolling_max_list = rolling_max_list[rolling_max_list!=numbers]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_", "    \n    rolling_max_list\
    \ <- []\n    \n    for n in numbers\n        \n        if rolling_max_list.length\
    \ == 0\n            rolling_max_list <- n\n        else\n            if n > rolling_max_list\n\
    \                rolling_max_list <- n\n            end\n        end\n    end\n\
    \    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rolling_max = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n \
    \       rolling_max = max(n, rolling_max)\n    end\n    \n    return rolling_max\n\
    end\n</cell>\n<code language=julia-1.5>", "    rolling_max = numbers[end]\n  \
    \  for n in numbers[2:end]\n        rolling_max = max(rolling_max, n)\n    end\n\
    \    return rolling_max\nend\n</cell>\n<code language=julia-1.5>", "    \n   \
    \ rolling_max = numbers[1]\n    for n in numbers[2:end]\n        if n > rolling_max\n\
    \            rolling_max = n\n        end\n    end\n    \n    return rolling_max\n\
    end\n</cell>\n<text>\nRolling average\nThe rolling average is calculated using\
    \ the following formula:", "    \n    rolling_max_list = Vector{Int64}()\n   \
    \ rolling_max_list = rolling_max_list + numbers\n    \n    rolling_max_list =\
    \ rolling_max_list[2:end]\n    \n    return rolling_max_list\nend", "    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    rolling_max_list = Vector{Int64}()\n\
    \    rolling_max_list[1] = numbers[1]\n    for i = 2:length(numbers)\n       \
    \ rolling_max_list[i] = max(numbers[i], rolling_max_list[i-1])\n    end\n    return\
    \ rolling_max_list\nend\n</cell>\n<code language=julia-1.5>", "    \n    rolling_max_list\
    \ = Vector{Int64}()\n    \n    for number in numbers\n        rolling_max_list\
    \ = append!(rolling_max_list, maximum(rolling_max_list, number))\n    end\n  \
    \  \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>", " \
    \   rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    rolling_max_list = Vector{Int64}()\n    rolling_max_list\
    \ = copy(numbers)\n    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list\
    \ = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]",
  "    \n    maximum = numbers[1]\n    \n    for n in numbers[2:end]\n        if n\
    \ > maximum\n            maximum = n\n        end\n    end\n    \n    return maximum\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    rolling_max = Vector{Int64}(undef,\
    \ 0)\n    \n    for n in numbers\n        if rolling_max == Vector{Int64}(undef,\
    \ 0)\n            rolling_max = n\n        else\n            if n > rolling_max\n\
    \                rolling_max = n\n            end\n        end\n    end\n    \n\
    \    return rolling_max\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of integers and returns the sum of the squares of the first n\
    \ elements of the vector.\nFor example, given [1,2,3,4,5], the function should\
    \ return 25.", "    rolling_max_idx = 1\n    rolling_max_value = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number > rolling_max_value\n\
    \            rolling_max_value = number\n            rolling_max_idx = 1\n   \
    \     else\n            rolling_max_idx += 1\n        end\n    end\n    \n   \
    \ rolling_max_idx = rolling_max_idx + 1\n    \n    rolling_max_value = rolling_max_value\
    \ + numbers[end]\n    \n    rolling_max_idx = rolling_max_idx + 1\n    \n    return\
    \ numbers[rolling_max_idx:end]\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  rolling_max_list = Vector{Int64}(undef, 0)\n    rolling_max_list[1] = numbers[1]\n\
    \    for i = 2:length(numbers)\n        if numbers[i] > rolling_max_list[i-1]\n\
    \            rolling_max_list[i] = numbers[i]\n        end\n    end\n    return\
    \ rolling_max_list\nend\n</cell>\n<code language=julia-1.5>", "    \n    rolling_max_array\
    \ = zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n        rolling_max_array[i]\
    \ = maximum(numbers[i:i+length(numbers)])\n    end\n    \n    return rolling_max_array\n\
    end\n</cell>\n<code language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4,\
    \ 2])\n</cell>\n<code language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4,\
    \ 2])\n</cell>\n<code language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4,\
    \ 2])\n</cell>\n<code language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4,\
    \ 2])\n</cell>\n<code language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4,\
    \ 2])\n</cell>\n<code language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4,\
    \ 2])\n</cell>\n<code language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4,\
    \ 2])\n</cell>\n<code language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4,\
    \ 2])\n</cell>\n<code language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4,\
    \ 2])\n</cell>\n<code language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4,\
    \ 2])\n</cell>\n<code language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4,\
    \ 2])\n</cell>\n<code language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4,\
    \ 2])\n</cell>\n<code language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4,\
    \ 2])\n</cell>\n<code language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4,\
    \ 2])\n</cell>\n<code language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4,\
    \ 2])\n</cell>\n<code language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4,\
    \ 2])\n</cell>\n<code language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4,\
    \ 2])\n</cell>\n<code language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4,\
    \ 2])\n</cell>\n<code language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4,\
    \ 2])\n</cell>\n<code language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4,\
    \ 2])\n</cell>\n<code language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4,\
    \ 2])\n</cell>\n<code language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4,\
    \ 2])\n</cell>\n<code language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4,\
    \ 2])\n</cell>\n", "    rolling_max_list = Vector{Int64}()\n    rolling_max_list.append(numbers[1])\n\
    \    for n in numbers[2:end]\n        if rolling_max_list[-1] < n\n          \
    \  rolling_max_list.append(n)\n        end\n    end\n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>", "    rolling_max_array = zeros(Int,\
    \ length(numbers))\n    rolling_max_array[1] = numbers[1]\n    for i = 2:length(numbers)\n\
    \        rolling_max_array[i] = max(rolling_max_array[i-1], numbers[i])\n    end\n\
    \    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    rolling_max_list = Vector{Int64}()\n    rolling_max_list = rolling_max_list\
    \ + numbers\n    rolling_max_list = rolling_max_list[rolling_max_list!=numbers]\n\
    \    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>", "    \n\
    \    local max_element = 0\n    local max_index = 0\n    local max_count = 0\n\
    \    local max_rolling_count = 0\n    local max_rolling_sum = 0\n    \n    for\
    \ i = 1:length(numbers)\n        if numbers[i] > max_element\n            then\n\
    \                max_element = numbers[i]\n                max_index = i\n   \
    \             max_count = 1\n                max_rolling_count = 0\n         \
    \       max_rolling_sum = 0\n            else\n                max_count = max_count\
    \ + 1\n                max_rolling_count = max_rolling_count + 1\n           \
    \     max_rolling_sum = max_rolling_sum + numbers[i]\n            end\n      \
    \  end\n    end\n    \n    if max_count > max_rolling_count\n        then\n  \
    \          max_rolling_count = max_count\n            max_rolling_sum = max_rolling_sum\n\
    \        end\n    \n    return max_rolling_sum\nend\n</cell>\n<text>\nrolling_sum",
  "    rolling_max_list = Vector{Int64}(undef, 0)\n    rolling_max_list[1] = numbers[1]\n\
    \    for i = 2:length(numbers)\n        rolling_max_list[i] = max(numbers[i-1],\
    \ rolling_max_list[i-1])\n    end\n    return rolling_max_list\nend\n</cell>\n\
    <text>\nrolling_max_index\nThe function rolling_max_index returns the index of\
    \ the rolling maximum element found until a given moment in the sequence.", " \
    \   \n    rolling_max_list = Vector{Int64}(undef, 0)\n    \n    for number in\
    \ numbers\n        rolling_max_list = push!(rolling_max_list, maximum(rolling_max_list,\
    \ number))\n    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max_result = Vector{Int64}()\n    rolling_max_result[1] = numbers[1]\n\
    \    for i = 2:length(numbers)\n        if numbers[i] > rolling_max_result[i-1]\n\
    \            rolling_max_result[i] = numbers[i]\n        else\n            rolling_max_result[i]\
    \ = rolling_max_result[i-1]\n        end\n    end\n    return rolling_max_result\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    local max_rolling = 0\n \
    \   local max_rolling_pos = 0\n    local max_rolling_neg = 0\n    local max_rolling_neg_inc\
    \ = 0\n    local max_rolling_neg_inc_pos = 0\n    local max_rolling_neg_inc_neg\
    \ = 0\n    local max_rolling_neg_inc_neg_inc = 0\n    local max_rolling_neg_inc_neg_inc_pos\
    \ = 0\n    local max_rolling_neg_inc_neg_inc_neg = 0\n    local max_rolling_neg_inc_neg_inc_neg_inc\
    \ = 0\n    local max_rolling_neg_inc_neg_inc_neg_inc_pos = 0\n    local max_rolling_neg_inc_neg_inc_neg_inc_neg\
    \ = 0\n    local max_rolling_neg_inc_neg_inc_neg_inc_neg_inc = 0\n    local max_rolling_neg_inc_neg_inc_neg_inc_neg_inc_pos\
    \ = 0\n    local max_rolling_neg_inc_neg_inc_neg_inc_neg_inc_neg = 0\n    local\
    \ max_rolling_neg_inc_neg_inc_neg_inc_neg_inc_neg_inc = 0\n    local max_rolling_neg_inc_neg_inc_neg_inc_neg_inc_neg_inc_pos\
    \ = 0\n    local max_rolling_neg_inc_neg_inc_neg_inc_neg_inc_neg_inc_neg = 0\n\
    \    local max_rolling_neg_inc_neg_inc_neg_inc_neg_inc_neg_inc_neg_inc = 0\n \
    \   local max_rolling_neg_inc_neg_inc_neg_inc_neg_inc_neg_inc_neg_inc_pos = 0\n\
    \    local max_rolling_neg_inc_neg_inc_neg_inc_neg_inc_neg_inc_neg_inc_neg = 0\n\
    \    local max_rolling_neg_inc_neg_inc_neg_inc_neg_inc_neg_inc_neg_inc_neg_inc\
    \ = 0\n    local max_rolling_neg_inc_neg_inc_neg_inc_neg_inc_neg_inc_neg_inc_neg_inc_pos\
    \ = 0\n    local max_rolling_neg_inc_neg_inc_neg_inc_neg_inc_neg_inc_neg_inc_neg_inc_neg\
    \ = 0\n    local max_rolling_neg_inc_neg_inc_neg_inc_neg_inc_neg_inc_neg_inc_neg_inc_neg_inc\
    \ = 0\n    local max_rolling_neg_inc_neg_inc_neg_inc_neg_inc_neg_inc_neg_inc_neg_inc_neg_inc_pos\
    \ = 0\n    local max_rolling_neg_inc_neg_inc_", "    \n    rolling_max_list =\
    \ Vector{Int64}(undef, 0)\n    \n    for n in numbers\n        rolling_max_list\
    \ = append!(rolling_max_list, rolling_max(n))\n    end\n    \n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>\nrolling_max([1, 2, 3, 2, 3, 4, 2])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that generates the cumulative sum\
    \ of a given vector.", "    rolling_max_list = Vector{Int64}(undef, 0)\n    rolling_max_list[1]\
    \ = numbers[1]\n    for i = 2:length(numbers)\n        if numbers[i] > rolling_max_list[i-1]\n\
    \            rolling_max_list[i] = numbers[i]\n        else\n            rolling_max_list[i]\
    \ = rolling_max_list[i-1]\n        end\n    end\n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.4>", "    \n    rolling_max = numbers[end]\n\
    \    for n in numbers[2:end]\n        rolling_max = max(rolling_max, n)\n    end\n\
    \    return rolling_max\nend\n</cell>\n<code language=julia-1.5>", "    rolling_max_list\
    \ = Vector{Int64}(undef, 0)\n    rolling_max_list = rolling_max_list + numbers\n\
    \    rolling_max_list = rolling_max_list[length(rolling_max_list):end]\n    return\
    \ rolling_max_list\nend\n</cell>\n<code language=julia-1.5>", "    rolling_max_list\
    \ = Vector{Int64}()\n    rolling_max_list = copy(numbers)\n    rolling_max_list\
    \ = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]", "    rolling_max_list = Vector{Int64}()\n\
    \    rolling_max_list.append(numbers[1])\n    for i in 2:length(numbers)\n   \
    \     if numbers[i] > rolling_max_list[i-1]\n            rolling_max_list.append(numbers[i])\n\
    \        end\n    end\n    return rolling_max_list\nend\n</code>\n<|/ a tags=julia,arrays\
    \ |>\n<| c |>\nI believe this should be the accepted answer. Although it uses\
    \ `@view`, it also uses `@view` which should be avoided when possible. Also, `@view`\
    \ should be avoided when possible, since it can lead to unexpected behavior. For\
    \ example, `@view a = [1,2,3]; a[1] = 2; a` will result in `a = [1,2,3]`, but\
    \ `a[1] = 2; a` will result in `a = [1,2]`.\n<|/ c |>\n<| a tags=julia,arrays\
    \ |>\nA simple and efficient solution is to use an accumulator to keep track of\
    \ the largest element seen so far:\n<code>", "    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    rolling_max = Vector{Int64}(undef, 0)\n    rolling_max = numbers[end]\n\
    \    for n in numbers[2:end]\n        if n > rolling_max\n            rolling_max\
    \ = n\n        end\n    end\n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    rolling_max_list = Vector{Int64}()\n    rolling_max_list\
    \ = rolling_max_list + numbers\n    rolling_max_list = rolling_max_list + rolling_max(numbers[2:end])\n\
    \    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>", "    rolling_max_array\
    \ = zeros(length(numbers))\n    rolling_max_array[1] = numbers[1]\n    for i =\
    \ 2:length(numbers)\n        rolling_max_array[i] = maximum(rolling_max_array[i-1:i+1],\
    \ numbers[i])\n    end\n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that generates a random permutation of integers from 1 to n (inclusive).\n\
    Hint: Use randperm()", "    \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n\
    \        if n > rolling_max\n            rolling_max = n\n        end\n    end\n\
    \    \n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ rolling_max_array = zeros(Int, length(numbers))\n    for i = 1:length(numbers)\n\
    \        rolling_max_array[i] = maximum(rolling_max_array[i-1:i+1])\n    end\n\
    \    return rolling_max_array\nend", "    \n    maximum = numbers[1]\n    \n \
    \   for n in numbers[2:end]\n        if n > maximum\n            maximum = n\n\
    \        end\n    end\n    \n    return maximum\nend\n</cell>\n<text>\nrolling_max",
  "    \n    rolling_max = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n \
    \       if n == rolling_max[1]\n            rolling_max[1] = n\n        else\n\
    \            if n > rolling_max[1]\n                rolling_max = Vector{Int64}(undef,\
    \ 0)\n                rolling_max[1] = n\n            end\n        end\n    end\n\
    \    \n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ rolling_max_list = Vector{Int64}()\n    rolling_max_list = rolling_max_list\
    \ + numbers\n    rolling_max_list = rolling_max_list[length(rolling_max_list):end]\n\
    \    return rolling_max_list\nend", "    rolling_max = numbers[end]\n    for n\
    \ in numbers[2:end]\n        rolling_max = max(rolling_max, n)\n    end\n    return\
    \ rolling_max\nend\n</cell>\n<code language=julia-1.5>", "    \n    rolling_max\
    \ = numbers[end]\n    for n in numbers[2:end]\n        if n > rolling_max\n  \
    \          rolling_max = n\n        end\n    end\n    \n    return rolling_max\n\
    end\n</cell>\n<text>\nrolling_max([1, 2, 3, 2, 3, 4, 2])", "    rolling_max =\
    \ numbers[end]\n    for n in numbers[2:end]\n        rolling_max = max(rolling_max,\
    \ n)\n    end\n    rolling_max\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that generates a vector of rolling mean element found until a given moment in\
    \ the sequence.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    rolling_max = numbers[end]\n\
    \    for n in numbers[2:end]\n        rolling_max = max(rolling_max, n)\n    end\n\
    \    return rolling_max\nend\n</cell>\n<code language=julia-1.5>", "    \n   \
    \ rolling_max_list = Vector{Int64}()\n    rolling_max_list = rolling_max_list\
    \ + numbers\n    \n    rolling_max_list = rolling_max_list[2:end]\n    \n    return\
    \ rolling_max_list\nend", "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n\
    \        rolling_max = max(rolling_max, n)\n    end\n    rolling_max\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a list of integers and returns\
    \ the sum of the squares of the first $n$ elements.\n>>> sum_squares_first_n(numbers::Vector{Int64},\
    \ n::Int64)::Float64\nsum_squares_first_n(numbers, n) = sum((numbers[1:n]).^2)\n\
    end\nTest your function with $n = 2$ and $numbers = [1, 2, 3, 4, 5]$.\n>>> sum_squares_first_n(numbers,\
    \ 2)\n25.0\nTest your function with $n = 5$ and $numbers = [1, 2, 3, 4, 5]$.\n\
    >>> sum_squares_first_n(numbers, 5)\n1225.0\nTest your function with $n = 10$\
    \ and $numbers = [1, 2, 3, 4, 5]$.\n>>> sum_squares_first_n(numbers, 10)\n1225.0\n\
    Test your function with $n = 20$ and $numbers = [1, 2, 3, 4, 5]$.\n>>> sum_squares_first_n(numbers,\
    \ 20)\n1225.0\nTest your function with $n = 100$ and $numbers = [1, 2, 3, 4, 5]$.\n\
    >>> sum_squares_first_n(numbers, 100)\n1225.0\nTest your function with $n = 1000$\
    \ and $numbers = [1, 2, 3, 4, 5]$.\n>>> sum_squares_first_n(numbers, 1000)\n1225.0\n\
    Test your function with $n = 10000$ and $numbers = [1, 2, 3, 4, 5]$.\n>>> sum_squares_first_n(numbers,\
    \ 10000)\n1225.0\nTest your function with $n = 100000$ and $numbers = [1, 2, 3,\
    \ 4, 5]$.\n>>> sum_squares_first_n(numbers, 100000)\n1225.0\nTest your function\
    \ with $n = 1000000$ and $numbers = [1, 2, 3, 4, 5]$.\n>>> sum_squares_first_n(numbers,\
    \ 1000000)\n1225.0\nTest your function with $n = 10000000$ and $numbers = [1,\
    \ 2, 3, 4, 5]$.\n>>> sum_squares_first_n(numbers, 10000000)\n1225.0\nTest your\
    \ function with $n = 100000000$ and $numbers = [1, 2, 3, 4, 5]$.\n>>> sum_squares_first_n(numbers,\
    \ 100000000)\n1225.0\nTest your function with $n = 1000000000$ and $numbers =\
    \ [1, 2, 3, 4, 5]$.\n>>> sum_squares_first_n(numbers, 1000000000)\n1225.0\nTest\
    \ your function with $n = 10000000000$ and $numbers = [1, 2, 3, 4, 5]$.\n>>> sum_squares_first_n(numbers, ",
  "    \n    rolling_max_list = []\n    \n    for number in numbers\n        rolling_max_list.append(number)\n\
    \    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    rolling_max = Vector{Int64}(undef, 0)\n   \
    \ \n    for n in numbers\n        if n > 0\n            push!(rolling_max, maximum(rolling_max[1:n]))\n\
    \        end\n    end\n    \n    return rolling_max\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that generates a random permutation of a given vector.\n\
    The function should take as input a vector of integers and output a vector of\
    \ integers containing the same elements but in a random order.\nThe function should\
    \ return nothing but a vector of integers containing the same elements but in\
    \ a random order.", "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n\
    \        rolling_max = max(rolling_max, n)\n    end\n    return rolling_max\n\
    end", "    rolling_max = numbers[1]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    rolling_max\nend\n</cell>\n<code language=julia-1.3>",
  "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n\
    \        rolling_max = max(rolling_max, n)\n    end\n    rolling_max\nend\n</cell>\n\
    <code language=julia-1.5>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
