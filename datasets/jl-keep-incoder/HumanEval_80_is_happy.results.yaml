name: HumanEval_80_is_happy
language: julia
results:
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0)\n    else false\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") ==\
    \ false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\") ==\
    \ true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\") ==\
    \ true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2dcveuvv.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp2dcveuvv.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp2dcveuvv.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0)\n    then return true\n   \
    \ else return false\n    end\nend\n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\
    \t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t\
    @test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"\
    xyy\") == false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"\
    iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp9f2h_6wk.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp9f2h_6wk.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0)\n        true\n    else\n \
    \       false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t\
    @test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppb67022d.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmppb67022d.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmppb67022d.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true\n        return true\n\
    \    else if length(s) < 3\n        return false\n    else if is_unique(s[1..end-1])\
    \ == true\n        return is_happy(s[2..end])\n    else\n        return is_happy(s[1..end-1])\
    \ || is_happy(s[2..end])\nend\n</cell>\n<code language=julia-1.5>\nis_happy(\"\
    a\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"aa\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"abcd\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"aabb\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"adb\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"xyy\")\n</cell>\n<text>\nExercise 3\nWrite a function that checks if\
    \ a number is prime or not. \nA number is prime if its only prime factors are\
    \ 2 and itself.\nFor example:\nis_prime(2) => true\nis_prime(5) => false\nis_prime(7)\
    \ => true\nis_prime(11) => true\nis_prime(12) => false\nHint: Use a for loop to\
    \ check all prime factors.\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbo1dbss4.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbo1dbss4.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    \n    if is_empty(s) == true\n        return\
    \ true\n    \n    if is_empty(s) == false\n        return false\n    \n    if\
    \ is_happy(s.tail) == true\n        return true\n    \n    if is_happy(s.tail)\
    \ == false\n        return false\n    \n    if is_happy(s.tail.tail) == true\n\
    \        return true\n    \n    if is_happy(s.tail.tail) == false\n        return\
    \ false\n    \n    if is_happy(s.tail.tail.tail) == true\n        return true\n\
    \    \n    if is_happy(s.tail.tail.tail) == false\n        return false\n    \n\
    \    if is_happy(s.tail.tail.tail.tail) == true\n        return true\n    \n \
    \   if is_happy(s.tail.tail.tail.tail) == false\n        return false\n    \n\
    \    if is_happy(s.tail.tail.tail.tail.tail) == true\n        return true\n  \
    \  \n    if is_happy(s.tail.tail.tail.tail.tail) == false\n        return false\n\
    \    \n    if is_happy(s.tail.tail.tail.tail.tail.tail) == true\n        return\
    \ true\n    \n    if is_happy(s.tail.tail.tail.tail.tail.tail) == false\n    \
    \    return false\n    \n    if is_happy(s.tail.tail.tail.tail.tail.tail.tail)\
    \ == true\n        return true\n    \n    if is_happy(s.tail.tail.tail.tail.tail.tail.tail)\
    \ == false\n        return false\n    \n    if is_happy(s.tail.tail.tail.tail.tail.tail.tail.tail)\
    \ == true\n        return true\n    \n    if is_happy(s.tail.tail.tail.tail.tail.tail.tail.tail)\
    \ == false\n        return false\n    \n    if is_happy(s.tail.tail.tail.tail.tail.tail.tail.tail.tail)\
    \ == true\n        return true\n    \n    if is_happy(s.tail.tail.tail.tail.tail.tail.tail.tail.tail)\
    \ == false\n        return false\n    \n    if is_happy(s.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail)\
    \ == true\n        return true\n    \n    if is_happy(s.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail)\
    \ == false\n        return false\n    \n    if is_happy(s.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail)\
    \ == true\n        return true\n    \n    if is_happy(s.tail.tail.tail.tail.tail.tail.tail.tail\n\
    using Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\"\
    ) == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\")\
    \ == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpod43zvfa.jl:84\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpod43zvfa.jl:84\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true\n        return true\n\
    \    else if length(s) == 3\n        return is_distinct(s[1..3])\n    else\n \
    \       return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp__0opxbh.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp__0opxbh.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpulq5xbzn.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpulq5xbzn.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpulq5xbzn.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true\n        return true\n\
    \    else if length(s) < 3\n        return false\n    else\n        \n       \
    \ for i in s\n            if i == s[i-1]\n                continue \n        \
    \    else if i == s[i-2]\n                continue \n            else if i ==\
    \ s[i-3]\n                continue \n            else if i == s[i-4]\n       \
    \         continue \n            else if i == s[i-5]\n                continue\
    \ \n            else if i == s[i-6]\n                continue \n            else\
    \ if i == s[i-7]\n                continue \n            else if i == s[i-8]\n\
    \                continue \n            else if i == s[i-9]\n                continue\
    \ \n            else if i == s[i-10]\n                continue \n            else\
    \ if i == s[i-11]\n                continue \n            else if i == s[i-12]\n\
    \                continue \n            else if i == s[i-13]\n               \
    \ continue \n            else if i == s[i-14]\n                continue \n   \
    \         else if i == s[i-15]\n                continue \n            else if\
    \ i == s[i-16]\n                continue \n            else if i == s[i-17]\n\
    \                continue \n            else if i == s[i-18]\n               \
    \ continue \n            else if i == s[i-19]\n                continue \n   \
    \         else if i == s[i-20]\n                continue \n            else if\
    \ i == s[i-21]\n                continue \n            else if i == s[i-22]\n\
    \                continue \n            else if i == s[i-23]\n               \
    \ continue \n            else if i == s[i-24]\n                continue \n   \
    \         else if i == s[i-25]\n                continue \n            else if\
    \ i == s[i-26]\n                continue \n            else if i == s[i-27]\n\
    \                continue \n            else if i == s[i-28]\n               \
    \ continue \n            else if i == s[i-29]\n                continue \n   \
    \         else if i == s[i-30]\n                continue \n            else if\
    \ i == s[i-31]\n                continue \n            else if i == s[i-32]\n\
    \                continue \n            else if i == s[i-33]\n               \
    \ continue \n            else if i == s[i-34]\n                continue \n   \
    \         else if i == s[i-35]\n                continue \n            else if\
    \ i == s[i-36]\n                continue \n            else if i == s[i-37]\n\
    \                continue \n            else if i == s[i-38]\n               \
    \ continue \n            else if i == s[i-39]\n                continue \n   \
    \         else if i == s[i-40]\n                continue \n            else if\
    \ i == s[i-41]\n                continue \n            else if i == s[i-42]\n\
    \                continue \n            else if i == s[i-43]\n               \
    \ continue \n            else if i == s[i-44]\n                continue \n   \
    \         else if i == s[i-45]\n                continue \n            else if\
    \ i == s[i-46]\n                continue \n            else if i == s[i-47]\n\
    \                continue \nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7q4sv8rt.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7q4sv8rt.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true then return true\n  \
    \  if length(s) < 3 then return false\n    \n    \n    for i in 0 .. length(s)\
    \ -1 do\n        if s[i] == s[i+1] then return false\n    end\n    \n    for i\
    \ in 0 .. length(s) -1 do\n        if s[i] == s[i+2] then return false\n    end\n\
    \    \n    for i in 0 .. length(s) -1 do\n        if s[i] == s[i+3] then return\
    \ false\n    end\n    \n    for i in 0 .. length(s) -1 do\n        if s[i] ==\
    \ s[i+4] then return false\n    end\n    \n    for i in 0 .. length(s) -1 do\n\
    \        if s[i] == s[i+5] then return false\n    end\n    \n    for i in 0 ..\
    \ length(s) -1 do\n        if s[i] == s[i+6] then return false\n    end\n    \n\
    \    for i in 0 .. length(s) -1 do\n        if s[i] == s[i+7] then return false\n\
    \    end\n    \n    for i in 0 .. length(s) -1 do\n        if s[i] == s[i+8] then\
    \ return false\n    end\n    \n    for i in 0 .. length(s) -1 do\n        if s[i]\
    \ == s[i+9] then return false\n    end\n    \n    for i in 0 .. length(s) -1 do\n\
    \        if s[i] == s[i+10] then return false\n    end\n    \n    for i in 0 ..\
    \ length(s) -1 do\n        if s[i] == s[i+11] then return false\n    end\n   \
    \ \n    for i in 0 .. length(s) -1 do\n        if s[i] == s[i+12] then return\
    \ false\n    end\n    \n    for i in 0 .. length(s) -1 do\n        if s[i] ==\
    \ s[i+13] then return false\n    end\n    \n    for i in 0 .. length(s) -1 do\n\
    \        if s[i] == s[i+14] then return false\n    end\n    \n    for i in 0 ..\
    \ length(s) -1 do\n        if s[i] == s[i+15] then return false\n    end\n   \
    \ \n    for i in 0 .. length(s) -1 do\n        if s[i] == s[i+16] then return\
    \ false\n    end\n    \n    for i in 0 .. length(s) -1 do\n        if s[i] ==\
    \ s[i+17] then return false\n    end\n    \n    for i in 0 .. length(s) -1 do\n\
    \        if s[i] == s[i+18] then return false\n    end\n    \n    for i in 0 ..\
    \ length(s) -1 do\n        if s[i] == s[i+19] then return false\n    end\n   \
    \ \n    for i in 0 .. length(s) -1 do\n        if s[i] == s[i+20] then return\
    \ false\n    end\n    \n    for i in 0 .. length(s) -1 do\n        if s[i] ==\
    \ s[i+21] then return false\n    end\n    \n    for i in 0 .. length(s) -1 do\n\
    \        if s[i] == s[i\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpqozqo36p.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpqozqo36p.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true then return true\n  \
    \  else if length(s) < 3 then return false\n    else if is_distinct(s[1..3]) ==\
    \ true && is_distinct(s[2..4]) == true && is_distinct(s[3..5]) == true then return\
    \ true\n    else return false\nend\n</cell>\n<code language=julia-1.5>\nis_happy(\"\
    a\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"aa\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"abcd\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"aabb\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"adb\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"xyy\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string and returns the number of vowels present in the string.\nThe vowels are\
    \ defined as a,e,i,o,u\nFor example:\ncount_vowels(\"a\") => 1\ncount_vowels(\"\
    aeiou\") => 5\ncount_vowels(\"abracadabra\") => 2\ncount_vowels(\"abracadabra\"\
    ) => 2\ncount_vowels(\"abracadabra\") => 2\ncount_vowels(\"abracadabra\") => 2\n\
    count_vowels(\"abracadabra\") => 2\ncount_vowels(\"abracadabra\") => 2\ncount_vowels(\"\
    abracadabra\") => 2\ncount_vowels(\"abracadabra\") => 2\ncount_vowels(\"abracadabra\"\
    ) => 2\ncount_vowels(\"abracadabra\") => 2\ncount_vowels(\"abracadabra\") => 2\n\
    count_vowels(\"abracadabra\") => 2\ncount_vowels(\"abracadabra\") => 2\ncount_vowels(\"\
    abracadabra\") => 2\ncount_vowels(\"abracadabra\") => 2\ncount_vowels(\"abracadabra\"\
    ) => 2\ncount_vowels(\"abracadabra\") => 2\ncount_vowels(\"abracadabra\") => 2\n\
    count_vowels(\"abracadabra\") => 2\ncount_vowels(\"abracadabra\") => 2\ncount_vowels(\"\
    abracadabra\") => 2\ncount_vowels(\"abracadabra\") => 2\ncount_vowels(\"abracadabra\"\
    ) => 2\ncount_vowels(\"abracadabra\") => 2\ncount_vowels(\"abracadabra\") => 2\n\
    count_vowel\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpm52rbtvv.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpm52rbtvv.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0)\n    else \n        false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphcsc9pdt.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"a\") == false\n  MethodError: no method matching is_happy(::String,\
    \ ::Int64)\n  Closest candidates are:\n    is_happy(::String) at /tmp/tmphcsc9pdt.jl:13\n\
    \  Stacktrace:\n   [1] is_happy(::String) at /tmp/tmphcsc9pdt.jl:13\n   [2] top-level\
    \ scope at /tmp/tmphcsc9pdt.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmphcsc9pdt.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmphcsc9pdt.jl:24\n  Test threw exception\n  Expression: candidate(\"\
    aa\") == false\n  MethodError: no method matching is_happy(::String, ::Int64)\n\
    \  Closest candidates are:\n    is_happy(::String) at /tmp/tmphcsc9pdt.jl:13\n\
    \  Stacktrace:\n   [1] is_happy(::String) at /tmp/tmphcsc9pdt.jl:13\n   [2] top-level\
    \ scope at /tmp/tmphcsc9pdt.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmphcsc9pdt.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmphcsc9pdt.jl:25\n  Test threw exception\n  Expression: candidate(\"\
    abcd\") == true\n  MethodError: no method matching is_happy(::String, ::Int64)\n\
    \  Closest candidates are:\n    is_happy(::String) at /tmp/tmphcsc9pdt.jl:13\n\
    \  Stacktrace:\n   [1] is_happy(::String) at /tmp/tmphcsc9pdt.jl:13\n   [2] top-level\
    \ scope at /tmp/tmphcsc9pdt.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmphcsc9pdt.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmphcsc9pdt.jl:26\n  Test threw exception\n  Expression: candidate(\"\
    aabb\") == false\n  MethodError: no method matching is_happy(::String, ::Int64)\n\
    \  Closest candidates are:\n    is_happy(::String) at /tmp/tmphcsc9pdt.jl:13\n\
    \  Stacktrace:\n   [1] is_happy(::String) at /tmp/tmphcsc9pdt.jl:13\n   [2] top-level\
    \ scope at /tmp/tmphcsc9pdt.jl:26\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmphcsc9pdt.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmphcsc9pdt.jl:27\n  Test threw exception\n  Expression: candidate(\"\
    adb\") == true\n  MethodError: no method matching is_happy(::String, ::Int64)\n\
    \  Closest candidates are:\n    is_happy(::String) at /tmp/tmphcsc9pdt.jl:13\n\
    \  Stacktrace:\n   [1] is_happy(::String) at /tmp/tmphcsc9pdt.jl:13\n   [2] top-level\
    \ scope at /tmp/tmphcsc9pdt.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmphcsc9pdt.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmphcsc9pdt.jl:28\n  Test threw exception\n  Expression: candidate(\"\
    xyy\") == false\n  MethodError: no method matching is_happy(::String, ::Int64)\n\
    \  Closest candidates are:\n    is_happy(::String) at /tmp/tmphcsc9pdt.jl:13\n\
    \  Stacktrace:\n   [1] is_happy(::String) at /tmp/tmphcsc9pdt.jl:13\n   [2] top-level\
    \ scope at /tmp/tmphcsc9pdt.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmphcsc9pdt.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmphcsc9pdt.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    iopaxpoi\") == true\n  MethodError: no method matching is_happy(::String, ::Int64)\n\
    \  Closest candidates are:\n    is_happy(::String) at /tmp/tmphcsc9pdt.jl:13\n\
    \  Stacktrace:\n   [1] is_happy(::String) at /tmp/tmphcsc9pdt.jl:13\n   [2] top-level\
    \ scope at /tmp/tmphcsc9pdt.jl:29\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmphcsc9pdt.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmphcsc9pdt.jl:30\n  Test threw exception\n  Expression: candidate(\"\
    iopaxioi\") == false\n  MethodError: no method matching is_happy(::String, ::Int64)\n\
    \  Closest candidates are:\n    is_happy(::String) at /tmp/tmphcsc9pdt.jl:13\n\
    \  Stacktrace:\n   [1] is_happy(::String) at /tmp/tmphcsc9pdt.jl:13\n   [2] top-level\
    \ scope at /tmp/tmphcsc9pdt.jl:30\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmphcsc9pdt.jl:22\n  \nTest Summary: | Error \
    \ Total\ntest set      |     8      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphcsc9pdt.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true \n    then return true\n\
    \    else \n        local happy = false\n        for i = 1 to s.length - 1 do\n\
    \            if s[i] == s[i+1] \n            then happy = false\n            else\
    \ happy = true\n            end\n        end\n        return happy\n    end\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp4f87i_zf.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp4f87i_zf.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpa2qjbpq3.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpa2qjbpq3.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpa2qjbpq3.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s) == true\n    then return true\n\
    \    else return false\n    end \nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpsf7rbc4j.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpsf7rbc4j.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpquq5af5t.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpquq5af5t.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpquq5af5t.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0)\n    then true\n    else false\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpdl9qx3vm.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpdl9qx3vm.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true\n        return true\n\
    \    else if length(s) < 3\n        return false\n    else if is_distinct(s[1..3])\n\
    \        return is_happy(s[2..])\n    else\n        return is_happy(s[2..])\n\
    end\n</code>\n<|/ a tags=string,julia |>\n<| c |>\nThis code does not work. `is_happy(\"\
    aa\")` returns `true` while it should return `false`.\n<|/ c |>\n<| c |>\nI fixed\
    \ the bug, thanks for pointing it out. Now it works.\n<|/ c |>\n<| a tags=string,julia\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2cuyexj3.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2cuyexj3.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == True\n    else if length(s)>=3\
    \ && all(is_distinct(s[0..k-1]) for k in strides(s,3))\n    else False\nend\n\
    </cell>\n<code language=julia-1.5>\nis_happy(\"a\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"aa\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"abcd\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"aabb\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"adb\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"xyy\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a number is even or odd.\n\
    using Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\"\
    ) == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\")\
    \ == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp140a8yjy.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp140a8yjy.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true\n        return true\n\
    \    else if length(s) < 3\n        return false\n    else if length(s) == 3\n\
    \        return is_distinct(s[1..2])\n    else\n        return is_happy(s[2..3])\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThe question was about a recursive solution,\
    \ not a tail recursive solution.\n<|/ c |>\n<| c |>\nI didn't see that in the\
    \ question, thanks for pointing it out. I edited my answer to include a tail recursive\
    \ solution.\n<|/ c |>\n<| a tags=string,recursion,haskell |>\n<code>\nis_happy\
    \ :: String -> Bool\nis_happy \"\" = True\nis_happy \"a\" = True\nis_happy \"\
    ab\" = True\nis_happy \"abc\" = True\nis_happy \"abcd\" = True\nis_happy \"abce\"\
    \ = True\nis_happy \"abcf\" = True\nis_happy \"abdg\" = True\nis_happy \"abde\"\
    \ = True\nis_happy \"abdf\" = True\nis_happy \"abef\" = True\nis_happy \"abfg\"\
    \ = True\nis_happy \"abgh\" = True\nis_happy \"abhi\" = True\nis_happy \"abij\"\
    \ = True\nis_happy \"abj\" = True\nis_happy \"abk\" = True\nis_happy \"abl\" =\
    \ True\nis_happy \"abm\" = True\nis_happy \"abn\" = True\nis_happy \"abo\" = True\n\
    is_happy \"abp\" = True\nis_happy \"abq\" = True\nis_happy \"abr\" = True\nis_happy\
    \ \"abs\" = True\nis_happy \"abt\" = True\nis_happy \"abu\" = True\nis_happy \"\
    abv\" = True\nis_happy \"abw\" = True\nis_happy \"abx\" = True\nis_happy \"aby\"\
    \ = True\nis_happy \"abz\" = True\nis_happy \"ac\" = True\nis_happy \"acb\" =\
    \ True\nis_happy \"acd\" = True\nis_happy \"ace\" = True\nis_happy \"acf\" = True\n\
    is_happy \"acg\" = True\nis_happy \"ach\" = True\nis_happy \"ack\" = True\nis_happy\
    \ \"acl\" = True\nis_happy \"acm\" = True\nis_happy \"acn\" = True\nis_happy \"\
    aco\" = True\nis_happ\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj2ca04wp.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj2ca04wp.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true \n        return true\n\
    \    else \n        \n        \n        \n        \n        \n        \n     \
    \   \n        \n        \n        \n        \n        \n        \n        \n \
    \       \n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \nusing Test\n\
    \n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\
    \t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t\
    @test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"\
    xyy\") == false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"\
    iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpiexkhkhx.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpiexkhkhx.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpiexkhkhx.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true\n        return true\n\
    \    else if length(s) < 3\n        return false\n    else\n        local i =\
    \ 0\n        local j = 1\n        local k = 1\n        while i <= length(s) do\n\
    \            if s[i] == s[j] then\n                k = k + 1\n            else\n\
    \                if k == 3 then\n                    return true\n           \
    \     else\n                    k = 1\n                end\n            end\n\
    \            i = i + 1\n            j = j + 1\n        end\n        return false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time is_happy(\"a\")\n@time\
    \ is_happy(\"aa\")\n@time is_happy(\"abcd\")\n@time is_happy(\"aabb\")\n@time\
    \ is_happy(\"adb\")\n@time is_happy(\"xyy\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that checks if a number is even or odd.\nusing Test\n\n@testset begin\n\
    \ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptqpgw63o.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptqpgw63o.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true \n        then return\
    \ true\n        else return false\n    else \n        local i::Int = 0\n     \
    \   local j::Int = 0\n        local k::Int = 0\n        local l::Int = 0\n   \
    \     local m::Int = 0\n        local n::Int = 0\n        local o::Int = 0\n \
    \       local p::Int = 0\n        local q::Int = 0\n        local r::Int = 0\n\
    \        local s::String = \"\"\n        local t::String = \"\"\n        local\
    \ u::String = \"\"\n        local v::String = \"\"\n        local w::String =\
    \ \"\"\n        local x::String = \"\"\n        local y::String = \"\"\n     \
    \   local z::String = \"\"\n        local a::String = \"\"\n        local b::String\
    \ = \"\"\n        local c::String = \"\"\n        local d::String = \"\"\n   \
    \     local e::String = \"\"\n        local f::String = \"\"\n        local g::String\
    \ = \"\"\n        local h::String = \"\"\n        local i::String = \"\"\n   \
    \     local j::String = \"\"\n        local k::String = \"\"\n        local l::String\
    \ = \"\"\n        local m::String = \"\"\n        local n::String = \"\"\n   \
    \     local o::String = \"\"\n        local p::String = \"\"\n        local q::String\
    \ = \"\"\n        local r::String = \"\"\n        local s::String = \"\"\n   \
    \     local t::String = \"\"\n        local u::String = \"\"\n        local v::String\
    \ = \"\"\n        local w::String = \"\"\n        local x::String = \"\"\n   \
    \     local y::String = \"\"\n        local z::String = \"\"\n        local a::String\
    \ = \"\"\n        local b::String = \"\"\n        local c::String = \"\"\n   \
    \     local d::String = \"\"\n        local e::String = \"\"\n        local f::String\
    \ = \"\"\n        local g::String = \"\"\n        local h::String = \"\"\n   \
    \     local i::String = \"\"\n        local j::String = \"\"\n        local k::String\
    \ = \"\"\n        local l::String = \"\"\n        local m::String = \"\"\n   \
    \     local n::String = \"\"\n        local o::String = \"\"\n        local p::String\
    \ = \"\"\n        local q::String = \"\"\n        local r::String = \"\"\n   \
    \     local s::String = \"\"\n        local t::String = \"\"\n        local u::String\
    \ = \"\"\n        local v::String = \"\"\n        local w::String = \"\"\n   \
    \     local x::String = \"\"\n        local y::String = \"\"\n        local z::String\
    \ = \"\"\n        local a::String = \"\"\n        local b\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpgp2hg_lp.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpgp2hg_lp.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0)\n    then return true\n   \
    \ else return false\n    end\nend\n\"\"\"\nis_happy(s,i) => True if s[i..i+3]\
    \ is a happy string.\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpfwkio_2u.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpfwkio_2u.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true\n        return true\n\
    \    else if length(s) < 3\n        return false\n    else\n        forall i in\
    \ 1..(length(s)-2)\n            if s[i] == s[i+1] && s[i+1] == s[i+2] && s[i]\
    \ != s[i+1]\n                return false\n        return true\nend\n</cell>\n\
    <code language=julia-1.0>\nis_happy(\"a\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"aa\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"abcd\")\n</cell>\n\
    <code language=julia-1.0>\nis_happy(\"aabb\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"adb\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"xyy\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of vowels contained in the string.\nThe vowels are \"a\", \"e\", \"i\", \"o\"\
    , and \"u\". \nThe function should return -1 if the string does not contain any\
    \ vowels.\nThe function should return 0 if the string contains only \"a\".\nThe\
    \ function should return 1 if the string contains \"e\".\nThe function should\
    \ return 2 if the string contains \"i\".\nThe function should return 3 if the\
    \ string contains \"o\".\nThe function should return 4 if the string contains\
    \ \"u\".\nThe function should return 5 if the string contains \"aeiou\".\nThe\
    \ function should return 6 if the string contains \"aeiouy\".\nThe function should\
    \ return 7 if the string contains \"aeiouyx\".\nThe function should return 8 if\
    \ the string contains \"aeiouyxb\".\nThe function should return 9 if the string\
    \ contains \"aeiouyxbc\".\nThe function should return 10 if the string contains\
    \ \"aeiouyxbcd\".\nThe function should return 11 if the string contains \"aeiouyxbcdfe\"\
    .\nThe function should return 12 if the string contains \"aeiouyxbcdfeg\".\nThe\
    \ function should return 13 if the string contains \"aeiouyxbcdfegh\".\nThe function\
    \ should return 14 if the string contains \"aeiouyxbcdfeghi\".\nThe function should\
    \ return 15 if the string contains \"aeiouyxbcdfeghij\".\nThe function should\
    \ return 16 if the string contains \"aeiouyxbcdfeghijk\".\nThe function should\
    \ return 17 if the string contains \"aeiouyxbcdfeghijkl\".\nThe function should\
    \ return 18 if the string contains \"aeiouyxbcdfe\nusing Test\n\n@testset begin\n\
    \ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpw1hjce88.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpw1hjce88.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true then return true\n  \
    \  if s.length < 3 then return false\n    \n    let mut chars = String[]()\n \
    \   for i in 0..length(s)-1 do\n        if s[i] == s[i+1] then\n            chars.push(s[i])\n\
    \        else\n            chars.push(s[i])\n            chars.push(s[i+1])\n\
    \            chars.push(s[i+2])\n            chars.push(s[i+3])\n            chars.push(s[i+4])\n\
    \            chars.push(s[i+5])\n            chars.push(s[i+6])\n            chars.push(s[i+7])\n\
    \            chars.push(s[i+8])\n            chars.push(s[i+9])\n            chars.push(s[i+10])\n\
    \            chars.push(s[i+11])\n            chars.push(s[i+12])\n          \
    \  chars.push(s[i+13])\n            chars.push(s[i+14])\n            chars.push(s[i+15])\n\
    \            chars.push(s[i+16])\n            chars.push(s[i+17])\n          \
    \  chars.push(s[i+18])\n            chars.push(s[i+19])\n            chars.push(s[i+20])\n\
    \            chars.push(s[i+21])\n            chars.push(s[i+22])\n          \
    \  chars.push(s[i+23])\n            chars.push(s[i+24])\n            chars.push(s[i+25])\n\
    \            chars.push(s[i+26])\n            chars.push(s[i+27])\n          \
    \  chars.push(s[i+28])\n            chars.push(s[i+29])\n            chars.push(s[i+30])\n\
    \            chars.push(s[i+31])\n            chars.push(s[i+32])\n          \
    \  chars.push(s[i+33])\n            chars.push(s[i+34])\n            chars.push(s[i+35])\n\
    \            chars.push(s[i+36])\n            chars.push(s[i+37])\n          \
    \  chars.push(s[i+38])\n            chars.push(s[i+39])\n            chars.push(s[i+40])\n\
    \            chars.push(s[i+41])\n            chars.push(s[i+42])\n          \
    \  chars.push(s[i+43])\n            chars.push(s[i+44])\n            chars.push(s[i+45])\n\
    \            chars.push(s[i+46])\n            chars.push(s[i+47])\n          \
    \  chars.push(s[i+48])\n            chars.push(s[i+49])\n            chars.push(s[i+50])\n\
    \            chars.push(s[i+51])\n            chars.push(s[i+52])\n          \
    \  chars.push(s[i+53])\n            chars.push(s[i+54])\n            chars.push(s[i+55])\n\
    \            chars.push(s[i+56])\n            chars.push(s[i+57])\n          \
    \  chars.push(s[i+58])\n            char\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp7oje0ukj.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp7oje0ukj.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true\n        return true\n\
    \    else if length(s)<3\n        return false\n    else\n        forall i in\
    \ 1..length(s)-1 \n            if s[i] == s[i+1] && s[i] != s[i+2]\n         \
    \       return false\n        return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"a\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"aa\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"abcd\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"aabb\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"adb\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"xyy\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that checks if a number is divisible by 3.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdwp3uws9.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdwp3uws9.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0,3)\n    then true\n    else\
    \ false\n    end\nend\n</cell>\n<code language=julia-1.3>\nis_happy(\"a\")\n</cell>\n\
    <code language=julia-1.3>\nis_happy(\"aa\")\n</cell>\n<code language=julia-1.3>\n\
    is_happy(\"abcd\")\n</cell>\n<code language=julia-1.3>\nis_happy(\"aabb\")\n</cell>\n\
    <code language=julia-1.3>\nis_happy(\"adb\")\n</cell>\n<code language=julia-1.3>\n\
    is_happy(\"xyy\")\n</cell>\n<code language=julia-1.3>\nis_happy(\"xyyxyy\")\n\
    </cell>\n<code language=julia-1.3>\nis_happy(\"xyyxyyxyy\")\n</cell>\n<code language=julia-1.3>\n\
    is_happy(\"xyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyyxyy\n\
    using Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\"\
    ) == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\")\
    \ == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpps2zmns5.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpps2zmns5.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true\n        return true\n\
    \    else if length(s) < 3\n        return false\n    else\n        local i =\
    \ 0\n        local j = 0\n        local k = 0\n        while i < length(s) do\n\
    \            if s[i] == s[j] then\n                k = k + 1\n            else\n\
    \                if k == 3 then\n                    return true\n           \
    \     else\n                    k = 0\n                end\n            end\n\
    \            i = i + 1\n            j = j + 1\n        end\n        return false\n\
    \    end\nend\n</code>\n<|/ a tags=string,haskell,functional-programming |>\n\
    <| a dscore=0 |>\n<code>\nis_happy :: String -> Bool\nis_happy s = length s >=\
    \ 3 && all (\\c -> c /= s[length s - 1]) $ tail s\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| c |>\nThis doesn't work. `is_happy(\"ab\")` returns `False`, while it\
    \ should return `True`.\n<|/ c |>\n<| c |>\nIt does work. `is_happy(\"ab\")` returns\
    \ `True`.\n<|/ c |>\n<| c |>\nIt returns `False` because `tail s` is `[\"b\"]`,\
    \ not `[\"a\", \"b\"]`.\n<|/ c |>\n<| c |>\n`tail` doesn't drop the last element,\
    \ it just returns the rest of the list. `tail \"ab\"` is `[\"b\"]`.\n<|/ c |>\n\
    <| c |>\nOh, I see. Thanks for the clarification.\n<|/ c |>\n<| a tags=string,haskell,functional-programming\
    \ |>\n<code>\nis_happy :: String -> Bool\nis_happy s = length s >= 3 && all (\\\
    c -> c /= s[length s - 1]) $ tail s\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile\
    \ this code may answer the question, providing additional context regarding why\
    \ and/or how this code answers the question improves its long-term value.\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\nis_happy :: String -> Bool\nis_happy s = length\
    \ s >= 3 && all (\\c -> c /= s[length s - 1]) $ tail s\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves its long-term\
    \ value.\n<|/ c |>\n\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t\
    @test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvvm_1fmy.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvvm_1fmy.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) then return true\n    else if\
    \ length(s)<3 then return false\n    else if all((is_distinct(s[0..-2]),is_distinct(s[-2..-1])))\
    \ then return true\n    else return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_happy(\"aa\") == false\n@assert is_happy(\"abcd\") == true\n@assert\
    \ is_happy(\"aabb\") == false\n@assert is_happy(\"adb\") == true\n@assert is_happy(\"\
    xyy\") == false\n</cell>\n<text>\nExercise 2\nWrite a function that checks if\
    \ a number is positive.\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp8dkvgjmd.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp8dkvgjmd.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true\n        return true\n\
    \    else if length(s) < 3\n        return false\n    else\n        forall i in\
    \ 1..(length(s)-2)\n            if  s[i] == s[i+1] && s[i+1] == s[i+2] && s[i]\
    \ != s[i+1]\n                return false\n        return true\n    end\nend\n\
    </cell>\n<code language=julia-1.4>\nis_happy(\"a\")\n</cell>\n<code language=julia-1.4>\n\
    is_happy(\"aa\")\n</cell>\n<code language=julia-1.4>\nis_happy(\"abcd\")\n</cell>\n\
    <code language=julia-1.4>\nis_happy(\"aabb\")\n</cell>\n<code language=julia-1.4>\n\
    is_happy(\"adb\")\n</cell>\n<code language=julia-1.4>\nis_happy(\"xyy\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that checks if a number is prime. \nA prime\
    \ number is a natural number greater than 1 that has no positive divisors other\
    \ than 1 and itself.\nFor example 5 is prime because there is no positive divisor\
    \ other than 1 and itself.\nFor example 6 is prime because there is no positive\
    \ divisor other than 1 and itself.\nFor example 7 is prime because there is no\
    \ positive divisor other than 1 and itself.\nFor example 8 is prime because there\
    \ is no positive divisor other than 1 and itself.\nFor example 9 is not prime\
    \ because there is one positive divisor other than 1 and itself.\nFor example\
    \ 10 is not prime because there is one positive divisor other than 1 and itself.\n\
    For example 11 is not prime because there is one positive divisor other than 1\
    \ and itself.\nFor example 12 is not prime because there is one positive divisor\
    \ other than 1 and itself.\nFor example 13 is not prime because there is one positive\
    \ divisor other than 1 and itself.\nFor example 14 is not prime because there\
    \ is one positive divisor other than 1 and itself.\nFor example 15 is not prime\
    \ because there is one positive divisor other than 1 and itself.\nFor example\
    \ 16 is not prime because there is one positive divisor other than 1 and itself.\n\
    For example 17 is not prime because there is one positive divisor other than 1\
    \ and itself.\nFor example 18 is not prime because there is one positive divisor\
    \ other than 1 and itself.\nFor example 19 is not prime because there is one positive\
    \ divisor other than 1 and itself.\nFor example 20 is not prime because there\
    \ is one positive divisor other than 1 and itself.\nFor example 21 is not prime\
    \ because there is one positive divisor other than 1 and itself.\nFor example\
    \ 22 is not prime because there is one positive divisor other than 1 and itself.\n\
    For example 23 is not prime because there is one positive divisor other than 1\
    \ and itself.\nFor example 24 is not prime because there is one positive divisor\
    \ other than 1 and itself.\nFor example 25 is not prime because there is one positive\
    \ divisor other than 1 and itself.\nFor example 26 is not prime because \nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") ==\
    \ false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\") ==\
    \ true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\") ==\
    \ true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1g_wdf2n.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1g_wdf2n.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true then return true\n  \
    \  if s.length < 3 then return false\n    \n    let rec aux i j k l =\n      \
    \  if i == s.length then true\n        else if j == s.length then false\n    \
    \    else if s[i] != s[j] then false\n        else if s[i] != s[k] then false\n\
    \        else if s[i] != l[k] then false\n        else aux(i+1, j+1, k+1, l+1,\
    \ s)\n    \n    aux 0 1 0 1 s\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ is_happy(\"a\") == false\n@assert is_happy(\"aa\") == false\n@assert is_happy(\"\
    abcd\") == true\n@assert is_happy(\"aabb\") == false\n@assert is_happy(\"adb\"\
    ) == true\n@assert is_happy(\"xyy\") == false\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that checks if a number is prime or not. \nA number is prime if its\
    \ only prime factor (other than 1) is 1. \nA number is prime if its only prime\
    \ factor (other than 1) is greater than 1.\nA number is prime if its only prime\
    \ factor (other than 1) is greater than 1 and less than or equal to 3.\nA number\
    \ is prime if its only prime factor (other than 1) is greater than 1 and less\
    \ than or equal to 3.\nA number is prime if its only prime factor (other than\
    \ 1) is greater than 1 and less than or equal to 3.\nA number is prime if its\
    \ only prime factor (other than 1) is greater than 1 and less than or equal to\
    \ 3.\nA number is prime if its only prime factor (other than 1) is greater than\
    \ 1 and less than or equal to 3.\nA number is prime if its only prime factor (other\
    \ than 1) is greater than 1 and less than or equal to 3.\nA number is prime if\
    \ its only prime factor (other than 1) is greater than 1 and less than or equal\
    \ to 3.\nA number is prime if its only prime factor (other than 1) is greater\
    \ than 1 and less than or equal to 3.\nA number is prime if its only prime factor\
    \ (other than 1) is greater than 1 and less than or equal to 3.\nA number is prime\
    \ if its only prime factor (other than 1) is greater than 1 and less than or equal\
    \ to 3.\nA number is prime if its only prime factor (other than 1) is greater\
    \ than 1 and less than or equal to 3.\nA number is prime if its only prime factor\
    \ (other than 1) is greater than 1 and less than or equal to 3.\nA number is prime\
    \ if its only prime factor (other than 1) is greater than 1 and less than or equal\
    \ to 3.\nA number is prime if its only prime factor (other than 1) is greater\
    \ than 1 and less than or equal to 3.\nA number is prime if its only prime factor\
    \ (other than 1) is greater than 1 and less than or equal to 3.\nA number is prime\
    \ if its only prime factor (other than 1) is \nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpa7u_tk90.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpa7u_tk90.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == True\n    else if length(s)\
    \ < 3\n    else if length(s) == 3\n    else if is_distinct(s[1..2]) == True\n\
    \    else if is_distinct(s[2..3]) == True\n    else if is_distinct(s[3..4]) ==\
    \ True\n    else if is_distinct(s[4..5]) == True\n    else if is_distinct(s[5..6])\
    \ == True\n    else if is_distinct(s[6..7]) == True\n    else if is_distinct(s[7..8])\
    \ == True\n    else if is_distinct(s[8..9]) == True\n    else if is_distinct(s[9..10])\
    \ == True\n    else if is_distinct(s[10..11]) == True\n    else if is_distinct(s[11..12])\
    \ == True\n    else if is_distinct(s[12..13]) == True\n    else if is_distinct(s[13..14])\
    \ == True\n    else if is_distinct(s[14..15]) == True\n    else if is_distinct(s[15..16])\
    \ == True\n    else if is_distinct(s[16..17]) == True\n    else if is_distinct(s[17..18])\
    \ == True\n    else if is_distinct(s[18..19]) == True\n    else if is_distinct(s[19..20])\
    \ == True\n    else if is_distinct(s[20..21]) == True\n    else if is_distinct(s[21]..s[22])\
    \ == True\n    else if is_distinct(s[22]..s[23]) == True\n    else if is_distinct(s[23]..s[24])\
    \ == True\n    else if is_distinct(s[24]..s[25]) == True\n    else if is_distinct(s[25]..s[26])\
    \ == True\n    else if is_distinct(s[26]..s[27]) == True\n    else if is_distinct(s[27]..s[28])\
    \ == True\n    else if is_distinct(s[28]..s[29]) == True\n    else if is_distinct(s[29]..s[30])\
    \ == True\n    else if is_distinct(s[30]..s[31]) == True\n    else if is_distinct(s[31]..s[32])\
    \ == True\n    else if is_distinct(s[32]..s[33]) == True\n    else if is_distinct(s[33]..s[34])\
    \ == True\n    else if is_distinct(s[34]..s[35]) == True\n    else if \nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") ==\
    \ false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\") ==\
    \ true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\") ==\
    \ true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3w3v6o6i.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3w3v6o6i.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6udeahf3.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp6udeahf3.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp6udeahf3.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0,0) == True then return True\
    \ else return False\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp1zeh9wby.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp1zeh9wby.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_yhp31we.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp_yhp31we.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp_yhp31we.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0)\n    then true\n    else false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmptdp_pqc3.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmptdp_pqc3.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0)\n        true\n    else\n \
    \       false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t\
    @test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq2b9a_wq.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpq2b9a_wq.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpq2b9a_wq.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0)\n    then true\n    else false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nis_happy(\"a\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"aa\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"abcd\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"aabb\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"adb\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"xyy\")\n</cell>\n<text>\nExercise\nWrite a function that checks if\
    \ a number is divisible by 3\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpze0fnl0a.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpze0fnl0a.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true\n        return true\n\
    \    else if length(s) == 3\n        return is_distinct(s[1..2])\n    else if\
    \ length(s) >= 3\n        return is_distinct(s[1..(length(s)-2)])\n    else\n\
    \        return false\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,julia\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqwsomy32.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqwsomy32.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    \n    if is_empty(s) == True\n    \n    else\
    \ \n        \n        \n        if is_happy(s[1..-1]) == True\n        \n    \
    \    else \n            \n            if is_happy(s[1..-2]) == True\n        \
    \    \n            else \n                \n                if is_happy(s[1..-3])\
    \ == True\n                \n                else \n                    \n   \
    \                 if is_happy(s[1..-4]) == True\n                    \n      \
    \              else \n                        \n                        if is_happy(s[1..-5])\
    \ == True\n                        \n                        else \n         \
    \                   \n                            if is_happy(s[1..-6]) == True\n\
    \                            \n                            else \n           \
    \                     \n                                if is_happy(s[1..-7])\
    \ == True\n                                \n                                else\
    \ \n                                    \n                                   \
    \ if is_happy(s[1..-8]) == True\n                                    \n      \
    \                              else \n                                       \
    \ \n                                        if is_happy(s[1..-9]) == True\n  \
    \                                      \n                                    \
    \    else \n                                            \n                   \
    \                         if is_happy(s[1..-10]) == True\n                   \
    \                         \n                                            else \n\
    \                                                \n                          \
    \                      if is_happy(s[1..-11]) == True\n                      \
    \                          \n                                                else\
    \ \n                                                    \n                   \
    \                                 if is_happy(s[1..-12]) == True\n           \
    \                                         \n                                 \
    \                   else \n                                                  \
    \      \n                                                        if is_happy(s[1..-13])\
    \ == True\n                                                        \n        \
    \                                                else \n                     \
    \                                       \n                                   \
    \                         if is_happy(s[1..-14]) == True\n                   \
    \                                         \n                                 \
    \                           else \n                                          \
    \                      \n                                                    \
    \            if is_happy(s[1..-15]) == True\n                                \
    \                                \n                                          \
    \                      else \n                                               \
    \                     \n                                                     \
    \               if is_happy(s[1..-16]) == True\n                             \
    \                                       \n                                   \
    \                                 else \n                                    \
    \                                    \n                                      \
    \  if is_happy(s[1..-17]) == True\n                                          \
    \                              \n                                            \
    \                        else \n                                             \
    \                           \n                                        if is_happy(s[1..-18])\
    \ == True\n                                                                  \
    \      \n                                                                    else\
    \ \n                                                                        \n\
    \                                        if is_happy(s[1..-19]) == True\n    \
    \                                                                    \n      \
    \                                                              else \n       \
    \                                                                 \n         \
    \                               if is_happy(s[1..-20]) == True\n             \
    \                                                           \n               \
    \                                                     else \n                \
    \                                                        \n                  \
    \                      if is_happy(s[1..-21]) == True\n                      \
    \                                                  \n                        \
    \                                            else \n                         \
    \                                               \n                           \
    \             if is_happy(s[1..-22]) == True\n                               \
    \                                         \n                                 \
    \                                   else \n                                  \
    \                                      \n                                    \
    \    if is_happy(s[1..-23]) == True\n                                        \
    \                                \n                                          \
    \                          else \n                                           \
    \                             \n                                        if is_happy(s[1..-24])\
    \ == True\n                                                                  \
    \      \n                                                                    else\
    \ \n                                                                        \n\
    \                                        if is_happy(s[1..-\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid operator \"..-\" near column 25\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp958f7ub6.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp958f7ub6.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true \n        return true\n\
    \    else \n        \n        \n        \n        \n        \n        \n     \
    \   \n        \n        \n        \n        \n        \n        \n        \n \
    \       \n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \nusing Test\n\
    \n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\
    \t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t\
    @test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"\
    xyy\") == false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"\
    iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp4l__xbm7.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp4l__xbm7.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp4l__xbm7.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true then return true\n  \
    \  else if length(s) < 3 then return false\n    else if is_distinct(s[1..3]) ==\
    \ true and is_distinct(s[2..4]) == true and is_distinct(s[3..5]) == true then\
    \ return true\n    else return false\nend\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"a\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"aa\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"abcd\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"aabb\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"adb\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"xyy\")\n</cell>\n<text>\nProblem 3\nWrite\
    \ a function that returns the number of characters in a string that are 'a' or\
    \ 'b'.\nFor example:\ncount_a_b(\"abbb\") => 2\ncount_a_b(\"ab\") => 1\ncount_a_b(\"\
    a\") => 0\ncount_a_b(\"aa\") => 0\ncount_a_b(\"aba\") => 1\ncount_a_b(\"abca\"\
    ) => 2\ncount_a_b(\"abcaa\") => 3\ncount_a_b(\"abcaaa\") => 4\ncount_a_b(\"abcaaaa\"\
    ) => 5\ncount_a_b(\"abcaaaaa\") => 6\ncount_a_b(\"abcaaaaaa\") => 7\ncount_a_b(\"\
    abcaaaaaaa\") => 8\ncount_a_b(\"abcaaaaaaaa\") => 9\ncount_a_b(\"abcaaaaaaaab\"\
    ) => 10\ncount_a_b(\"abcaaaaaaaabb\") => 11\ncount_a_b(\"abcaaaaaaaabbb\") =>\
    \ 12\ncount_a_b(\"abcaaaaaaaabbbc\") => 13\ncount_a_b(\"abcaaaaaaaabbbbc\") =>\
    \ 14\ncount_a_b(\"abcaaaaaaaabbbbca\") => 15\ncount_a_b(\"abcaaaaaaaabbbbcaa\"\
    ) => 16\ncount_a_b(\"abcaaaaaaaabbbbcaaa\") => 17\ncount_a_b(\"abcaaaaaaaabbbbcaaaa\"\
    ) => 18\ncount_a_b(\"abcaaaaaaaabbbbcaaaaa\") => 19\ncount_a_b(\"abcaaaaaaaabbbbcaaaaaa\"\
    ) => 20\ncount_a_b(\"abcaaaaaaaabbbbcaaaaaaa\") => 21\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpv37q6mr_.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpv37q6mr_.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0)\n    else false\nend\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"a\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"aa\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"abcd\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"aabb\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"adb\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"xyy\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of vowels contained in the string.\nThe vowels are \"a\", \"e\", \"i\", \"o\"\
    , and \"u\".\nFor example:\ncount_vowels(\"a\") => 1\ncount_vowels(\"aeiou\")\
    \ => 5\ncount_vowels(\"ab\") => 2\ncount_vowels(\"abe\") => 1\ncount_vowels(\"\
    abced\") => 3\nHint: Use a for loop to iterate over the string.\nusing Test\n\n\
    @testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t\
    @test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"\
    aabb\") == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\"\
    ) == false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk0pn8mrv.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk0pn8mrv.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true then return true\n  \
    \  else if length(s) < 3 then return false\n    else if length(s) == 3 then \n\
    \        \n        if s[2] != s[2] then return false\n        if s[1] != s[1]\
    \ then return false\n        if s[0] != s[0] then return false\n        else return\
    \ true\n    else if length(s) > 3 then return false\n    else if length(s) ==\
    \ 2 then \n        if s[1] != s[1] then return false\n        else return true\n\
    \    else if length(s) == 1 then \n        if s[0] != s[0] then return false\n\
    \        else return true\n    else return false\nend\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"a\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"aa\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"abcd\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"aabb\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"adb\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"xyy\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"xyyx\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"xyyxx\")\n\
    </cell>\n<code language=julia-1.5>\nis_happy(\"xyyxxy\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"xyyxxyy\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"xyyxxyyy\"\
    )\n</cell>\n<code language=julia-1.5>\nis_happy(\"xyyxxyyyy\")\n</cell>\n<code\
    \ language=julia-1.5>\nis_happy(\"xyyxxyyyyy\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"xyyxxyyyyyy\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"xyyxxyyyyyyy\"\
    )\n</cell>\n<code language=julia-1.5>\nis_happy(\"xyyxxyyyyyyyy\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"xyyxxyyyyyyyyy\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"xyyxxyyyyyyyyyy\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"\
    xyyxxyyyyyyyyyyy\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"xyyxxyyyyyyyyyyyy\"\
    )\n</cell>\n<code language=julia-1.5>\nis_happy(\"xyyxxyyyyyyyyyyyyy\")\n</cell>\n\
    using Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\"\
    ) == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\")\
    \ == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp62w2zrf1.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp62w2zrf1.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == True \n    then return True\
    \ \n    else \n        if is_happy(tail(s))\n        then return True \n     \
    \   else return False \nend\n</cell>\n<code language=julia-1.5>\nis_happy(\"a\"\
    )\n</cell>\n<code language=julia-1.5>\nis_happy(\"aa\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"abcd\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"aabb\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"adb\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"xyy\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string as input and returns the number of vowels present in the string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") ==\
    \ false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\") ==\
    \ true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\") ==\
    \ true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmposgekbay.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmposgekbay.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) then return true\n    else if\
    \ length(s)<3 then return false\n    else if length(s)==3 && is_distinct(s[1..2])\
    \ && is_distinct(s[2..3]) && is_distinct(s[3..4]) then return true\n    else return\
    \ false\nend\n</cell>\n<code language=julia-1.3>\nis_happy(\"a\")\n</cell>\n<code\
    \ language=julia-1.3>\nis_happy(\"aa\")\n</cell>\n<code language=julia-1.3>\n\
    is_happy(\"abcd\")\n</cell>\n<code language=julia-1.3>\nis_happy(\"aabb\")\n</cell>\n\
    <code language=julia-1.3>\nis_happy(\"adb\")\n</cell>\n<code language=julia-1.3>\n\
    is_happy(\"xyy\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of vowels contained in the string.\nThe vowels\
    \ are \"a\", \"e\", \"i\", \"o\", and \"u\"\nFor example:\ncount_vowels(\"a\"\
    ) => 1\ncount_vowels(\"ab\") => 2\ncount_vowels(\"abc\") => 3\ncount_vowels(\"\
    abac\") => 4\ncount_vowels(\"abacab\") => 5\ncount_vowels(\"abacaba\") => 6\n\
    count_vowels(\"abacabac\") => 7\ncount_vowels(\"abacabacab\") => 8\ncount_vowels(\"\
    abacabacaba\") => 9\ncount_vowels(\"abacabacabac\") => 10\ncount_vowels(\"abacabacabacab\"\
    ) => 11\ncount_vowels(\"abacabacabacaba\") => 12\ncount_vowels(\"abacabacabacabac\"\
    ) => 13\ncount_vowels(\"abacabacabacabacab\") => 14\ncount_vowels(\"abacabacabacabacaba\"\
    ) => 15\ncount_vowels(\"abacabacabacabacabac\") => 16\ncount_vowels(\"abacabacabacabacabacab\"\
    ) => 17\ncount_vowels(\"abacabacabacabacabacaba\") => 18\ncount_vowels(\"abacabacabacabacabacabac\"\
    ) => 19\ncount_vowels(\"abacabacabacabacabacabacab\") => 20\ncount_vowels(\"abacabacabacabacabacabacaba\"\
    ) => 21\ncount_vowels(\"abacabacabacabacabacabacabac\") => 22\ncount_\nusing Test\n\
    \n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\
    \t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t\
    @test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"\
    xyy\") == false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"\
    iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpvguhmsv_.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpvguhmsv_.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0)\n    then true\n    else false\n\
    end\n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpoy6kqe2k.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpoy6kqe2k.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true \n        return true\n\
    \    else \n        \n        \n        \n        \n        \n        \n     \
    \   \n        \n        \n        \n        \n        \n        \n        \n \
    \       \n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \nusing Test\n\
    \n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\
    \t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t\
    @test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"\
    xyy\") == false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"\
    iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp6jj8p5g6.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp6jj8p5g6.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp6jj8p5g6.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true\n        return true\n\
    \    else if length(s) < 3\n        return false\n    else\n        local i::Int\
    \ = 0\n        local j::Int = 0\n        local k::Int = 0\n        local l::Int\
    \ = 0\n        local m::Int = 0\n        local n::Int = 0\n        local o::Int\
    \ = 0\n        local p::Int = 0\n        local q::Int = 0\n        local r::Int\
    \ = 0\n        local s::String = \"\"\n        local t::String = \"\"\n      \
    \  local u::String = \"\"\n        local v::String = \"\"\n        local w::String\
    \ = \"\"\n        local x::String = \"\"\n        local y::String = \"\"\n   \
    \     local z::String = \"\"\n        local a::String = \"\"\n        local b::String\
    \ = \"\"\n        local c::String = \"\"\n        local d::String = \"\"\n   \
    \     local e::String = \"\"\n        local f::String = \"\"\n        local g::String\
    \ = \"\"\n        local h::String = \"\"\n        local i::String = \"\"\n   \
    \     local j::String = \"\"\n        local k::String = \"\"\n        local l::String\
    \ = \"\"\n        local m::String = \"\"\n        local n::String = \"\"\n   \
    \     local o::String = \"\"\n        local p::String = \"\"\n        local q::String\
    \ = \"\"\n        local r::String = \"\"\n        local s::String = \"\"\n   \
    \     local t::String = \"\"\n        local u::String = \"\"\n        local v::String\
    \ = \"\"\n        local w::String = \"\"\n        local x::String = \"\"\n   \
    \     local y::String = \"\"\n        local z::String = \"\"\n        local a::String\
    \ = \"\"\n        local b::String = \"\"\n        local c::String = \"\"\n   \
    \     local d::String = \"\"\n        local e::String = \"\"\n        local f::String\
    \ = \"\"\n        local g::String = \"\"\n        local h::String = \"\"\n   \
    \     local i::String = \"\"\n        local j::String = \"\"\n        local k::String\
    \ = \"\"\n        local l::String = \"\"\n        local m::String = \"\"\n   \
    \     local n::String = \"\"\n        local o::String = \"\"\n        local p::String\
    \ = \"\"\n        local q::String = \"\"\n        local r::String = \"\"\n   \
    \     local s::String = \"\"\n        local t::String = \"\"\n        local u::String\
    \ = \"\"\n        local v::String = \"\"\n        local w::String = \"\"\n   \
    \     local x::String = \"\"\n        local y::String = \"\"\n        local z::String\
    \ = \"\"\n        local a::String = \"\"\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphqoty4pc.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphqoty4pc.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true\n        return true\n\
    \    else if length(s) < 3\n        return false\n    else if length(s) == 3\n\
    \        return is_distinct(s[1..2])\n    else if length(s) == 4\n        return\
    \ is_distinct(s[1..3])\n    else if length(s) == 5\n        return is_distinct(s[1..4])\n\
    \    else if length(s) == 6\n        return is_distinct(s[1..5])\n    else if\
    \ length(s) == 7\n        return is_distinct(s[1..6])\n    else if length(s) ==\
    \ 8\n        return is_distinct(s[1..7])\n    else if length(s) == 9\n       \
    \ return is_distinct(s[1..8])\n    else if length(s) == 10\n        return is_distinct(s[1..9])\n\
    \    else if length(s) == 11\n        return is_distinct(s[1..10])\n    else if\
    \ length(s) == 12\n        return is_distinct(s[1..11])\n    else if length(s)\
    \ == 13\n        return is_distinct(s[1..12])\n    else if length(s) == 14\n \
    \       return is_distinct(s[1..13])\n    else if length(s) == 15\n        return\
    \ is_distinct(s[1..14])\n    else if length(s) == 16\n        return is_distinct(s[1..15])\n\
    \    else if length(s) == 17\n        return is_distinct(s[1..16])\n    else if\
    \ length(s) == 18\n        return is_distinct(s[1..17])\n    else if length(s)\
    \ == 19\n        return is_distinct(s[1..18])\n    else if length(s) == 20\n \
    \       return is_distinct(s[1..19])\n    else if length(s) == 21\n        return\
    \ is_distinct(s[1..20])\n    else if length(s) == 22\n        return is_distinct(s[1..21])\n\
    \    else if length(s) == 23\n        return is_distinct(s[1..22])\n    else if\
    \ length(s) == 24\n        return is_distinct(s[1..23])\n    else if length(s)\
    \ == 25\n        return is_distinct(s[1..24])\n    else if length(s) == 26\n \
    \       return is_distinct(s[1..25])\n    else if length(s) == 27\n        return\
    \ is_distinct(s[1..26])\n    else if length(s) == 28\n        return is_distinct(s[1..27])\n\
    \    else if length(s) == 29\n        return is_distinct(s[1..28])\n    else if\
    \ length(s) == 30\n        return is_distinct(s[1..29])\n    else if length(s)\
    \ == 31\n        return is_distinct(s[1..30])\n    else if length(s) == 32\n \
    \       return \nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpw22_rxdt.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpw22_rxdt.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    \n    if is_empty(s) == True\n    \n    else\n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp36tpkuun.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp36tpkuun.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp36tpkuun.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnemma1vy.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpnemma1vy.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpnemma1vy.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0)\n    then return true\n   \
    \ else return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp8co6x4o4.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp8co6x4o4.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    \n    if is_happy(s,0,0) == True then return\
    \ True else return False\n    \n    else if length(s) < 3 then return False\n\
    \    else if length(s) == 3 then return True\n    else if length(s) == 2 then\
    \ return True\n    else if length(s) == 1 then return True\n    else return False\n\
    \    \nend\n</cell>\n<code language=julia-1.5>\nis_happy(\"a\")\n</cell>\n<code\
    \ language=julia-1.5>\nis_happy(\"aa\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"abcd\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"aabb\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"adb\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"xyy\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of vowels in it.\nusing Test\n\n@testset begin\n\
    \ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpq7_esgoy.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpq7_esgoy.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0)\n    else \n        true\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmjdn6gu_.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"a\") == false\n  MethodError: no method matching is_happy(::String,\
    \ ::Int64)\n  Closest candidates are:\n    is_happy(::String) at /tmp/tmpmjdn6gu_.jl:13\n\
    \  Stacktrace:\n   [1] is_happy(::String) at /tmp/tmpmjdn6gu_.jl:13\n   [2] top-level\
    \ scope at /tmp/tmpmjdn6gu_.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpmjdn6gu_.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpmjdn6gu_.jl:24\n  Test threw exception\n  Expression: candidate(\"\
    aa\") == false\n  MethodError: no method matching is_happy(::String, ::Int64)\n\
    \  Closest candidates are:\n    is_happy(::String) at /tmp/tmpmjdn6gu_.jl:13\n\
    \  Stacktrace:\n   [1] is_happy(::String) at /tmp/tmpmjdn6gu_.jl:13\n   [2] top-level\
    \ scope at /tmp/tmpmjdn6gu_.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpmjdn6gu_.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpmjdn6gu_.jl:25\n  Test threw exception\n  Expression: candidate(\"\
    abcd\") == true\n  MethodError: no method matching is_happy(::String, ::Int64)\n\
    \  Closest candidates are:\n    is_happy(::String) at /tmp/tmpmjdn6gu_.jl:13\n\
    \  Stacktrace:\n   [1] is_happy(::String) at /tmp/tmpmjdn6gu_.jl:13\n   [2] top-level\
    \ scope at /tmp/tmpmjdn6gu_.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpmjdn6gu_.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpmjdn6gu_.jl:26\n  Test threw exception\n  Expression: candidate(\"\
    aabb\") == false\n  MethodError: no method matching is_happy(::String, ::Int64)\n\
    \  Closest candidates are:\n    is_happy(::String) at /tmp/tmpmjdn6gu_.jl:13\n\
    \  Stacktrace:\n   [1] is_happy(::String) at /tmp/tmpmjdn6gu_.jl:13\n   [2] top-level\
    \ scope at /tmp/tmpmjdn6gu_.jl:26\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpmjdn6gu_.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpmjdn6gu_.jl:27\n  Test threw exception\n  Expression: candidate(\"\
    adb\") == true\n  MethodError: no method matching is_happy(::String, ::Int64)\n\
    \  Closest candidates are:\n    is_happy(::String) at /tmp/tmpmjdn6gu_.jl:13\n\
    \  Stacktrace:\n   [1] is_happy(::String) at /tmp/tmpmjdn6gu_.jl:13\n   [2] top-level\
    \ scope at /tmp/tmpmjdn6gu_.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpmjdn6gu_.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpmjdn6gu_.jl:28\n  Test threw exception\n  Expression: candidate(\"\
    xyy\") == false\n  MethodError: no method matching is_happy(::String, ::Int64)\n\
    \  Closest candidates are:\n    is_happy(::String) at /tmp/tmpmjdn6gu_.jl:13\n\
    \  Stacktrace:\n   [1] is_happy(::String) at /tmp/tmpmjdn6gu_.jl:13\n   [2] top-level\
    \ scope at /tmp/tmpmjdn6gu_.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpmjdn6gu_.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpmjdn6gu_.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    iopaxpoi\") == true\n  MethodError: no method matching is_happy(::String, ::Int64)\n\
    \  Closest candidates are:\n    is_happy(::String) at /tmp/tmpmjdn6gu_.jl:13\n\
    \  Stacktrace:\n   [1] is_happy(::String) at /tmp/tmpmjdn6gu_.jl:13\n   [2] top-level\
    \ scope at /tmp/tmpmjdn6gu_.jl:29\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpmjdn6gu_.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpmjdn6gu_.jl:30\n  Test threw exception\n  Expression: candidate(\"\
    iopaxioi\") == false\n  MethodError: no method matching is_happy(::String, ::Int64)\n\
    \  Closest candidates are:\n    is_happy(::String) at /tmp/tmpmjdn6gu_.jl:13\n\
    \  Stacktrace:\n   [1] is_happy(::String) at /tmp/tmpmjdn6gu_.jl:13\n   [2] top-level\
    \ scope at /tmp/tmpmjdn6gu_.jl:30\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpmjdn6gu_.jl:22\n  \nTest Summary: | Error \
    \ Total\ntest set      |     8      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmjdn6gu_.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true\n        return true\n\
    \    else if length(s) < 3\n        return false\n    else\n        local i::Int\
    \ = 0\n        local j::Int = 0\n        local k::Int = 0\n        while i < length(s)\
    \ do\n            if s[i] != s[i+1] then\n                j = i\n            \
    \    while j < length(s) do\n                    if s[j] == s[i+j] then\n    \
    \                    k = j\n                        break\n                  \
    \  else\n                        j += 1\n                end\n               \
    \ if k == i then\n                    i = j\n                    break\n     \
    \           else\n                    i = k\n                    break\n     \
    \           end\n            else\n                i += 1\n            end\n \
    \       end\n        if i == length(s) then\n            return true\n       \
    \ else\n            return false\n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    count_unique_chars(s::String)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4hgye2l_.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4hgye2l_.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_3ojn8rd.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp_3ojn8rd.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp_3ojn8rd.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true\n        return true\n\
    \    else if length(s)<3\n        return false\n    else\n        local i::Int=0\n\
    \        local j::Int=0\n        local k::Int=0\n        local l::Int=0\n    \
    \    local m::Int=0\n        local n::Int=0\n        local o::Int=0\n        local\
    \ p::Int=0\n        local q::Int=0\n        local r::Int=0\n        local s::String\n\
    \        for i=0,length(s) do\n            if s[i]==s[i+1] then\n            \
    \    j=j+1\n            else\n                j=0\n            end\n         \
    \   if j==3 then\n                k=k+1\n                j=0\n            else\n\
    \                j=0\n            end\n            if k==3 then\n            \
    \    l=l+1\n                k=0\n            else\n                k=0\n     \
    \       end\n            if l==3 then\n                m=m+1\n               \
    \ l=0\n            else\n                l=0\n            end\n            if\
    \ m==3 then\n                n=n+1\n                m=0\n            else\n  \
    \              m=0\n            end\n            if n==3 then\n              \
    \  o=o+1\n                n=0\n            else\n                n=0\n       \
    \     end\n            if o==3 then\n                p=p+1\n                o=0\n\
    \            else\n                o=0\n            end\n            if p==3 then\n\
    \                q=q+1\n                p=0\n            else\n              \
    \  p=0\n            end\n            if q==3 then\n                r=r+1\n   \
    \             q=0\n            else\n                q=0\n            end\n  \
    \          if r==3 then\n                s=s+s[i+2]\n                r=0\n   \
    \         else\n                r=0\n            end\n        end\n        if\
    \ length(s)<3\n            return false\n        else\n            if s==s[2]\
    \ or s==s[3] or s==s[4] or s==s[5] or s==s[6] or s==s[7] or s==s[8] or s==s[9]\
    \ or s==s[10] or s==s[11] or s==s[12] or s==s[13] or s==s[14] or s==s[15] or s==s[16]\
    \ or s==s[17] or s==s[18] or s==s[19] or s==s[20] or s==s[21] or s==s[22] or s==s[23]\
    \ or s==s[24] or s==s[25] or s==s[26] or s==s[27] or \nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpir5ya6a8.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpir5ya6a8.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true \n        return true\
    \ \n    else \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \nusing Test\n\
    \n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\
    \t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t\
    @test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"\
    xyy\") == false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"\
    iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpnf99jo7d.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpnf99jo7d.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpnf99jo7d.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true\n        return true\n\
    \    else if length(s) == 3\n        if is_distinct(s[1..2]) == true && is_distinct(s[2..3])\
    \ == true\n            return true\n        else \n            return false\n\
    \    else \n        return false\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks\
    \ for your answer. Your code works perfectly for me. I am just wondering why my\
    \ code doesn't work. Could you please explain it to me?\n<|/ c |>\n<| c |>\nI\
    \ edited my answer, I hope it helps you.\n<|/ c |>\n<| c |>\nThanks for your answer.\
    \ I understand your code. But the problem is that I cannot use any built-in functions.\
    \ I cannot use any built-in functions. I cannot use any built-in functions. I\
    \ cannot use any built-in functions. I cannot use any built-in functions. I cannot\
    \ use any built-in functions. I cannot use any built-in functions. I cannot use\
    \ any built-in functions. I cannot use any built-in functions. I cannot use any\
    \ built-in functions. I cannot use any built-in functions. I cannot use any built-in\
    \ functions. I cannot use any built-in functions. I cannot use any built-in functions.\
    \ I cannot use any built-in functions. I cannot use any built-in functions. I\
    \ cannot use any built-in functions. I cannot use any built-in functions. I cannot\
    \ use any built-in functions. I cannot use any built-in functions. I cannot use\
    \ any built-in functions. I cannot use any built-in functions. I cannot use any\
    \ built-in functions. I cannot use any built-in functions. I cannot use any built-in\
    \ functions. I cannot use any built-in functions. I cannot use any built-in functions.\
    \ I cannot use any built-in functions. I cannot use any built-in functions. I\
    \ cannot use any built-in functions. I cannot use any built-in functions. I cannot\
    \ use any built-in functions. I cannot use any built-in functions. I cannot use\
    \ any built-in functions. I cannot use any built-in functions. I cannot use any\
    \ built-in functions. I cannot use any built-in functions. I cannot use any built-in\
    \ functions. I cannot use any built-in functions. I cannot use any built-in functions.\
    \ I cannot use any built-in functions. I cannot use any built-in functions. I\
    \ cannot use any built-in functions. I cannot use any built-in functions. I cannot\
    \ use any built-in functions. I cannot use any built-in functions. I cannot use\
    \ any built-in functions. I cannot use any built-in functions. I cannot use any\
    \ built-in functions. I cannot use any built-in functions. I cannot use any built-in\
    \ functions. I cannot use any built-in functions. I cannot use any \nusing Test\n\
    \n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\
    \t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t\
    @test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"\
    xyy\") == false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"\
    iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcpn6e1o6.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcpn6e1o6.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    \n    if is_empty(s) == True\n    \n    else\
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n\nusing Test\n\n@testset begin\n\
    \ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpc2wu3znq.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpc2wu3znq.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpc2wu3znq.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0)\n    else return False\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\"\
    ) == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\")\
    \ == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpv7frmj8s.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpv7frmj8s.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpv7frmj8s.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true then return true\n  \
    \  else if length(s) < 3 then return false\n    else if is_distinct(s[1..3]) ==\
    \ true and is_distinct(s[2..4]) == true and is_distinct(s[3..5]) == true then\
    \ return true\n    else return false\nend\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"a\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"aa\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"abcd\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"aabb\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"adb\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"xyy\")\n</cell>\n<text>\nExercise 2\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") ==\
    \ false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\") ==\
    \ true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\") ==\
    \ true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp2qoso8ep.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp2qoso8ep.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true \n        return true\n\
    \    else \n        \n        \n        \n        \n        \n        \n     \
    \   \n        \n        \n        \n        \n        \n        \n        \n \
    \       \n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \nusing Test\n\
    \n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\
    \t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t\
    @test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"\
    xyy\") == false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"\
    iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpxqtxcc7r.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpxqtxcc7r.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpxqtxcc7r.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0,0)==true\n        return true\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmps4mfrrds.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"a\") == false\n  MethodError: no method matching is_happy(::String,\
    \ ::Int64, ::Int64)\n  Closest candidates are:\n    is_happy(::String) at /tmp/tmps4mfrrds.jl:13\n\
    \  Stacktrace:\n   [1] is_happy(::String) at /tmp/tmps4mfrrds.jl:13\n   [2] top-level\
    \ scope at /tmp/tmps4mfrrds.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmps4mfrrds.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmps4mfrrds.jl:25\n  Test threw exception\n  Expression: candidate(\"\
    aa\") == false\n  MethodError: no method matching is_happy(::String, ::Int64,\
    \ ::Int64)\n  Closest candidates are:\n    is_happy(::String) at /tmp/tmps4mfrrds.jl:13\n\
    \  Stacktrace:\n   [1] is_happy(::String) at /tmp/tmps4mfrrds.jl:13\n   [2] top-level\
    \ scope at /tmp/tmps4mfrrds.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmps4mfrrds.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmps4mfrrds.jl:26\n  Test threw exception\n  Expression: candidate(\"\
    abcd\") == true\n  MethodError: no method matching is_happy(::String, ::Int64,\
    \ ::Int64)\n  Closest candidates are:\n    is_happy(::String) at /tmp/tmps4mfrrds.jl:13\n\
    \  Stacktrace:\n   [1] is_happy(::String) at /tmp/tmps4mfrrds.jl:13\n   [2] top-level\
    \ scope at /tmp/tmps4mfrrds.jl:26\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmps4mfrrds.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmps4mfrrds.jl:27\n  Test threw exception\n  Expression: candidate(\"\
    aabb\") == false\n  MethodError: no method matching is_happy(::String, ::Int64,\
    \ ::Int64)\n  Closest candidates are:\n    is_happy(::String) at /tmp/tmps4mfrrds.jl:13\n\
    \  Stacktrace:\n   [1] is_happy(::String) at /tmp/tmps4mfrrds.jl:13\n   [2] top-level\
    \ scope at /tmp/tmps4mfrrds.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmps4mfrrds.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmps4mfrrds.jl:28\n  Test threw exception\n  Expression: candidate(\"\
    adb\") == true\n  MethodError: no method matching is_happy(::String, ::Int64,\
    \ ::Int64)\n  Closest candidates are:\n    is_happy(::String) at /tmp/tmps4mfrrds.jl:13\n\
    \  Stacktrace:\n   [1] is_happy(::String) at /tmp/tmps4mfrrds.jl:13\n   [2] top-level\
    \ scope at /tmp/tmps4mfrrds.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmps4mfrrds.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmps4mfrrds.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    xyy\") == false\n  MethodError: no method matching is_happy(::String, ::Int64,\
    \ ::Int64)\n  Closest candidates are:\n    is_happy(::String) at /tmp/tmps4mfrrds.jl:13\n\
    \  Stacktrace:\n   [1] is_happy(::String) at /tmp/tmps4mfrrds.jl:13\n   [2] top-level\
    \ scope at /tmp/tmps4mfrrds.jl:29\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmps4mfrrds.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmps4mfrrds.jl:30\n  Test threw exception\n  Expression: candidate(\"\
    iopaxpoi\") == true\n  MethodError: no method matching is_happy(::String, ::Int64,\
    \ ::Int64)\n  Closest candidates are:\n    is_happy(::String) at /tmp/tmps4mfrrds.jl:13\n\
    \  Stacktrace:\n   [1] is_happy(::String) at /tmp/tmps4mfrrds.jl:13\n   [2] top-level\
    \ scope at /tmp/tmps4mfrrds.jl:30\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmps4mfrrds.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmps4mfrrds.jl:31\n  Test threw exception\n  Expression: candidate(\"\
    iopaxioi\") == false\n  MethodError: no method matching is_happy(::String, ::Int64,\
    \ ::Int64)\n  Closest candidates are:\n    is_happy(::String) at /tmp/tmps4mfrrds.jl:13\n\
    \  Stacktrace:\n   [1] is_happy(::String) at /tmp/tmps4mfrrds.jl:13\n   [2] top-level\
    \ scope at /tmp/tmps4mfrrds.jl:31\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmps4mfrrds.jl:23\n  \nTest Summary: | Error \
    \ Total\ntest set      |     8      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps4mfrrds.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0)\n    then true\n    else false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpuenarrge.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpuenarrge.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == True \n    then return True\
    \ \n    else \n        let  \n            len = length(s) \n            \n   \
    \         if len < 3 \n            then return False \n            else \n   \
    \             let \n                    a = head s \n                    b = tail\
    \ s \n                    \n                    let \n                       \
    \ c = head b \n                        d = tail b \n                        \n\
    \                        let \n                            e = head d \n     \
    \                       f = tail d \n                            \n          \
    \                  let \n                                g = head f \n       \
    \                         h = tail f \n                                \n    \
    \                            let \n                                    i = head\
    \ h \n                                    j = tail h \n                      \
    \              \n                                    let \n                  \
    \                      k = head j \n                                        l\
    \ = tail j \n                                        \n                      \
    \                  let \n                                            m = head\
    \ l \n                                            n = tail l \n              \
    \                              \n                                            let\
    \ \n                                                o = head n \n            \
    \                                    p = tail n \n                           \
    \                     \n                                                let \n\
    \                                                    q = head p \n           \
    \                                         r = tail p \n                      \
    \                              \n                                            \
    \        let \n                                                        s = head\
    \ r \n                                                        t = tail r \n  \
    \                                                      \n                    \
    \                                    let \n                                  \
    \                          u = head t \n                                     \
    \                       v = tail t \n                                        \
    \                    \n                                                      \
    \      let \n                                                                w\
    \ = head v \n                                                                x\
    \ = tail v \n                                                                \n\
    \                                                                let \n      \
    \                                                              y = head x \n \
    \                                                                   z = tail x\
    \ \n                                                                    \n   \
    \                                                                 let \n     \
    \                                                                   aa = head\
    \ z \n                                                                       \
    \ ab = tail z \n                                                             \
    \           \n                                                               \
    \         let \n                                                             \
    \               ba = head ab \n                                              \
    \                              bb = tail ab \n                               \
    \                                             \n                             \
    \                                               let  \n                      \
    \                                                          ca = head bb \n   \
    \                                                                            \
    \ db = tail bb \n                                                            \
    \                    \n                                                      \
    \                          let \n                                            \
    \                                        ea = head db \n                     \
    \                                                               fb = tail db \n\
    \                                                                            \
    \        \n                                                                  \
    \                  let \n                                                    \
    \                                    ga = head fb \n                         \
    \                                                               gb = tail fb \n\
    \                                                                            \
    \            \n                                                              \
    \                          let \n                                            \
    \                                                ha = head gb \n             \
    \                                                                            \
    \   ib = tail gb \n                                                          \
    \                                  \n                                        \
    \                                                    let \n                  \
    \                                                                            \
    \  ja = head ib \n                                                           \
    \                                     jb = tail ib \n                        \
    \                                                                        \n  \
    \                                                                            \
    \                  let \n                                                    \
    \                                                ka = head jb \n             \
    \                                                                            \
    \           lb = tail jb \n                                                  \
    \                                                  \n                        \
    \                                                                            let\
    \ \n                                                                         \
    \                               ma = head lb \n                              \
    \                                                                          mb\
    \ = tail lb \n                                                               \
    \                                         \n                                 \
    \                                                                       let \n\
    \                                                                            \
    \                                na = head mb \n                             \
    \                                                                            \
    \   nb = tail mb \n                                                          \
    \                                                  \n                        \
    \                                                                            \
    \        let  \n                                                             \
    \                                                   oa = head na \n          \
    \                                                                            \
    \                          pa = tail na \n                                   \
    \                                                                            \
    \ \n                                                                         \
    \                                       let \n                               \
    \                                                                            \
    \         q\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp7xls9j1l.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp7xls9j1l.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true \n        return true\n\
    \    else \n        \n        \n        \n        \n        \n        \n     \
    \   \n        \n        \n        \n        \n        \n        \n        \n \
    \       \n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \nusing Test\n\
    \n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\
    \t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t\
    @test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"\
    xyy\") == false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"\
    iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpi_xyat6l.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpi_xyat6l.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpi_xyat6l.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0)\n    then true\n    else false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nis_happy(\"a\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"aa\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"abcd\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"aabb\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"adb\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"xyy\")\n</cell>\n<text>\nExercise\nWrite a function that checks if\
    \ a number is even.\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t\
    @test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmps5pmghps.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmps5pmghps.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true \n    then return true\n\
    \    else \n        local i::Int = 0\n        local j::Int = 0\n        local\
    \ k::Int = 0\n        local l::Int = 0\n        local m::Int = 0\n        local\
    \ n::Int = 0\n        local o::Int = 0\n        local p::Int = 0\n        local\
    \ q::Int = 0\n        local r::Int = 0\n        local s::Int = 0\n        local\
    \ t::Int = 0\n        local u::Int = 0\n        local v::Int = 0\n        local\
    \ w::Int = 0\n        local x::Int = 0\n        local y::Int = 0\n        local\
    \ z::Int = 0\n        local a::Int = 0\n        local b::Int = 0\n        local\
    \ c::Int = 0\n        local d::Int = 0\n        local e::Int = 0\n        local\
    \ f::Int = 0\n        local g::Int = 0\n        local h::Int = 0\n        local\
    \ i::Int = 0\n        local j::Int = 0\n        local k::Int = 0\n        local\
    \ l::Int = 0\n        local m::Int = 0\n        local n::Int = 0\n        local\
    \ o::Int = 0\n        local p::Int = 0\n        local q::Int = 0\n        local\
    \ r::Int = 0\n        local s::Int = 0\n        local t::Int = 0\n        local\
    \ u::Int = 0\n        local v::Int = 0\n        local w::Int = 0\n        local\
    \ x::Int = 0\n        local y::Int = 0\n        local z::Int = 0\n        local\
    \ a::Int = 0\n        local b::Int = 0\n        local c::Int = 0\n        local\
    \ d::Int = 0\n        local e::Int = 0\n        local f::Int = 0\n        local\
    \ g::Int = 0\n        local h::Int = 0\n        local i::Int = 0\n        local\
    \ j::Int = 0\n        local k::Int = 0\n        local l::Int = 0\n        local\
    \ m::Int = 0\n        local n::Int = 0\n        local o::Int = 0\n        local\
    \ p::Int = 0\n        local q::Int = 0\n        local r::Int = 0\n        local\
    \ s::Int = 0\n        local t::Int = 0\n        local u::Int = 0\n        local\
    \ v::Int = 0\n        local w::Int = 0\n        local x::Int = 0\n        local\
    \ y::Int = 0\n        local z::Int = 0\n        local a::Int = 0\n        local\
    \ b::Int = 0\n\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpnk9eogwz.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpnk9eogwz.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0)\n    else \n        true\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp58ud5l1m.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"a\") == false\n  MethodError: no method matching is_happy(::String,\
    \ ::Int64)\n  Closest candidates are:\n    is_happy(::String) at /tmp/tmp58ud5l1m.jl:13\n\
    \  Stacktrace:\n   [1] is_happy(::String) at /tmp/tmp58ud5l1m.jl:13\n   [2] top-level\
    \ scope at /tmp/tmp58ud5l1m.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp58ud5l1m.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmp58ud5l1m.jl:24\n  Test threw exception\n  Expression: candidate(\"\
    aa\") == false\n  MethodError: no method matching is_happy(::String, ::Int64)\n\
    \  Closest candidates are:\n    is_happy(::String) at /tmp/tmp58ud5l1m.jl:13\n\
    \  Stacktrace:\n   [1] is_happy(::String) at /tmp/tmp58ud5l1m.jl:13\n   [2] top-level\
    \ scope at /tmp/tmp58ud5l1m.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp58ud5l1m.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmp58ud5l1m.jl:25\n  Test threw exception\n  Expression: candidate(\"\
    abcd\") == true\n  MethodError: no method matching is_happy(::String, ::Int64)\n\
    \  Closest candidates are:\n    is_happy(::String) at /tmp/tmp58ud5l1m.jl:13\n\
    \  Stacktrace:\n   [1] is_happy(::String) at /tmp/tmp58ud5l1m.jl:13\n   [2] top-level\
    \ scope at /tmp/tmp58ud5l1m.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp58ud5l1m.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmp58ud5l1m.jl:26\n  Test threw exception\n  Expression: candidate(\"\
    aabb\") == false\n  MethodError: no method matching is_happy(::String, ::Int64)\n\
    \  Closest candidates are:\n    is_happy(::String) at /tmp/tmp58ud5l1m.jl:13\n\
    \  Stacktrace:\n   [1] is_happy(::String) at /tmp/tmp58ud5l1m.jl:13\n   [2] top-level\
    \ scope at /tmp/tmp58ud5l1m.jl:26\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp58ud5l1m.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmp58ud5l1m.jl:27\n  Test threw exception\n  Expression: candidate(\"\
    adb\") == true\n  MethodError: no method matching is_happy(::String, ::Int64)\n\
    \  Closest candidates are:\n    is_happy(::String) at /tmp/tmp58ud5l1m.jl:13\n\
    \  Stacktrace:\n   [1] is_happy(::String) at /tmp/tmp58ud5l1m.jl:13\n   [2] top-level\
    \ scope at /tmp/tmp58ud5l1m.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp58ud5l1m.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmp58ud5l1m.jl:28\n  Test threw exception\n  Expression: candidate(\"\
    xyy\") == false\n  MethodError: no method matching is_happy(::String, ::Int64)\n\
    \  Closest candidates are:\n    is_happy(::String) at /tmp/tmp58ud5l1m.jl:13\n\
    \  Stacktrace:\n   [1] is_happy(::String) at /tmp/tmp58ud5l1m.jl:13\n   [2] top-level\
    \ scope at /tmp/tmp58ud5l1m.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp58ud5l1m.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmp58ud5l1m.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    iopaxpoi\") == true\n  MethodError: no method matching is_happy(::String, ::Int64)\n\
    \  Closest candidates are:\n    is_happy(::String) at /tmp/tmp58ud5l1m.jl:13\n\
    \  Stacktrace:\n   [1] is_happy(::String) at /tmp/tmp58ud5l1m.jl:13\n   [2] top-level\
    \ scope at /tmp/tmp58ud5l1m.jl:29\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp58ud5l1m.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmp58ud5l1m.jl:30\n  Test threw exception\n  Expression: candidate(\"\
    iopaxioi\") == false\n  MethodError: no method matching is_happy(::String, ::Int64)\n\
    \  Closest candidates are:\n    is_happy(::String) at /tmp/tmp58ud5l1m.jl:13\n\
    \  Stacktrace:\n   [1] is_happy(::String) at /tmp/tmp58ud5l1m.jl:13\n   [2] top-level\
    \ scope at /tmp/tmp58ud5l1m.jl:30\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp58ud5l1m.jl:22\n  \nTest Summary: | Error \
    \ Total\ntest set      |     8      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp58ud5l1m.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true then return true\n  \
    \  if s.length < 3 then return false\n    let mut count = 0\n    for i in 0..length(s)-1\
    \ do\n        if s[i] == s[i+1] then count += 1\n        else if count == 3 then\
    \ return false\n    else if count == 3 then return true\n    else return false\n\
    end\n</cell>\n<code language=julia-1.0>\nis_happy(\"a\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"aa\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"abcd\")\n</cell>\n\
    <code language=julia-1.0>\nis_happy(\"aabb\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"adb\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"xyy\")\n</cell>\n\
    <code language=julia-1.0>\nis_happy(\"xyyx\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"xyyxxy\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"xyyxxyx\"\
    )\n</cell>\n<code language=julia-1.0>\nis_happy(\"xyyxxyxx\")\n</cell>\n<code\
    \ language=julia-1.0>\nis_happy(\"xyyxxyxxxy\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"xyyxxyxxxyx\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"xyyxxyxxxyxx\"\
    )\n</cell>\n<code language=julia-1.0>\nis_happy(\"xyyxxyxxxyxxxy\")\n</cell>\n\
    <code language=julia-1.0>\nis_happy(\"xyyxxyxxxyxxxyx\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"xyyxxyxxxyxxxyxx\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"\
    xyyxxyxxxyxxxyxxxy\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"xyyxxyxxxyxxxyxxxyx\"\
    )\n</cell>\n<code language=julia-1.0>\nis_happy(\"xyyxxyxxxyxxxyxxxyxx\")\n</cell>\n\
    <code language=julia-1.0>\nis_happy(\"xyyxxyxxxyxxxyxxxyxxxy\")\n</cell>\n<code\
    \ language=julia-1.0>\nis_happy(\"xyyxxyxxxyxxxyxxxyxxxyx\")\n</cell>\n<code language=julia-1.0>\n\
    \nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp_00132z1.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp_00132z1.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0)\n    else false\nend\n</cell>\n\
    <code language=julia-1.3>\nis_happy(\"a\")\n</cell>\n<code language=julia-1.3>\n\
    is_happy(\"aa\")\n</cell>\n<code language=julia-1.3>\nis_happy(\"abcd\")\n</cell>\n\
    <code language=julia-1.3>\nis_happy(\"aabb\")\n</cell>\n<code language=julia-1.3>\n\
    is_happy(\"adb\")\n</cell>\n<code language=julia-1.3>\nis_happy(\"xyy\")\n</cell>\n\
    <text>\nExercise\nWrite a function that checks if a number is even or odd.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") ==\
    \ false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\") ==\
    \ true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\") ==\
    \ true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfvu9taxg.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfvu9taxg.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true\n        return true\n\
    \    else if length(s) < 3\n        return false\n    else\n        local i::Int\
    \ = 0\n        local j::Int = 0\n        local k::Int = 0\n        local l::Int\
    \ = 0\n        local m::Int = 0\n        local n::Int = 0\n        local o::Int\
    \ = 0\n        local p::Int = 0\n        local q::Int = 0\n        local r::Int\
    \ = 0\n        local s::String = \"\"\n        local t::String = \"\"\n      \
    \  local u::String = \"\"\n        local v::String = \"\"\n        local w::String\
    \ = \"\"\n        local x::String = \"\"\n        local y::String = \"\"\n   \
    \     local z::String = \"\"\n        local a::String = \"\"\n        local b::String\
    \ = \"\"\n        local c::String = \"\"\n        local d::String = \"\"\n   \
    \     local e::String = \"\"\n        local f::String = \"\"\n        local g::String\
    \ = \"\"\n        local h::String = \"\"\n        local i::String = \"\"\n   \
    \     local j::String = \"\"\n        local k::String = \"\"\n        local l::String\
    \ = \"\"\n        local m::String = \"\"\n        local n::String = \"\"\n   \
    \     local o::String = \"\"\n        local p::String = \"\"\n        local q::String\
    \ = \"\"\n        local r::String = \"\"\n        local s::String = \"\"\n   \
    \     local t::String = \"\"\n        local u::String = \"\"\n        local v::String\
    \ = \"\"\n        local w::String = \"\"\n        local x::String = \"\"\n   \
    \     local y::String = \"\"\n        local z::String = \"\"\n        local a::String\
    \ = \"\"\n        local b::String = \"\"\n        local c::String = \"\"\n   \
    \     local d::String = \"\"\n        local e::String = \"\"\n        local f::String\
    \ = \"\"\n        local g::String = \"\"\n        local h::String = \"\"\n   \
    \     local i::String = \"\"\n        local j::String = \"\"\n        local k::String\
    \ = \"\"\n        local l::String = \"\"\n        local m::String = \"\"\n   \
    \     local n::String = \"\"\n        local o::String = \"\"\n        local p::String\
    \ = \"\"\n        local q::String = \"\"\n        local r::String = \"\"\n   \
    \     local s::String = \"\"\n        local t::String = \"\"\n        local u::String\
    \ = \"\"\n        local v::String = \"\"\n        local w::String = \"\"\n   \
    \     local x::String = \"\"\n        local y::String = \"\"\n        local z::String\
    \ = \"\"\n        local a::String = \"\"\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpihx_vwwv.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpihx_vwwv.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true\n        true\n    else\n\
    \        if length(s)>3\n            false\n        else\n            if length(intersect(take(s,3),drop(s,3)))\
    \ == length(take(s,3))\n                true\n            else\n             \
    \   false\n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ is_happy(\"abc\") == false\n@assert is_happy(\"aa\") == false\n@assert is_happy(\"\
    abcd\") == true\n@assert is_happy(\"aabb\") == false\n@assert is_happy(\"adb\"\
    ) == true\n@assert is_happy(\"xyy\") == false\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that checks if a number is prime.\nA number is prime if all its factors\
    \ are smaller than the given number.\nFor example:\nis_prime(11) => true\nis_prime(12)\
    \ => false\nis_prime(13) => true\nis_prime(14) => false\nis_prime(15) => true\n\
    is_prime(16) => true\nis_prime(17) => false\nis_prime(19) => true\nis_prime(20)\
    \ => false\nis_prime(21) => true\nis_prime(23) => true\nis_prime(24) => false\n\
    is_prime(25) => true\nis_prime(26) => false\nis_prime(27) => true\nis_prime(28)\
    \ => false\nis_prime(29) => true\nis_prime(30) => false\nis_prime(31) => true\n\
    is_prime(32) => false\nis_prime(33) => true\nis_prime(34) => false\nis_prime(35)\
    \ => true\nis_prime(36) => false\nis_prime(37) => true\nis_prime(38) => false\n\
    is_prime(39) => true\nis_prime(40) => false\nis_prime(41) => true\nis_prime(42)\
    \ => false\nis_prime(43) => true\nis_prime(44) => false\nis_prime(45) => true\n\
    is_prime(46) => false\nis_prime(47) => true\nis_prime(48) => false\nis_prime(49)\
    \ => true\nis_prime(50) => false\nis_prime(51) => true\nis_prime(52) => false\n\
    is_prime(53) => true\nis_prime(54) => false\nis_prime(55) => true\nis_prime(56)\
    \ => false\nis_prime(57) => true\nis_prime(58) => false\nis_prime(59) => true\n\
    is_prime(60) => false\nis_prime(61) => true\nis_prime(62) => \nusing Test\n\n\
    @testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t\
    @test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"\
    aabb\") == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\"\
    ) == false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps0j71ii7.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmps0j71ii7.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) then return true\n    if length(s)<3\
    \ then return false\n    \n    let chars = split(s,\"\")\n    let charsSorted\
    \ = sort(chars)\n    let charsSortedLength = length(charsSorted)\n    \n    for\
    \ i in 0..charsSortedLength-1 do\n        if charsSorted[i]==charsSorted[i+1]\
    \ then return false\n    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"a\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"aa\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"abcd\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"aabb\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"adb\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"xyy\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that checks if a number is prime or not. \nA prime number is a natural\
    \ number greater than 1 that has no positive divisors other than 1 and itself.\n\
    For example 5 is a prime number, but 6 is not.\nusing Test\n\n@testset begin\n\
    \ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpm57dbtqp.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpm57dbtqp.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpz9tdt9yd.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpz9tdt9yd.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpz9tdt9yd.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true then return true\n  \
    \  else if length(s) < 3 then return false\n    else if length(s) == 3 then \n\
    \        if isdistinct(s[1..2]) == true and isdistinct(s[2..3]) == true and isdistinct(s[3..4])\
    \ == true then return true\n        else return false\n    else if length(s) ==\
    \ 4 then \n        if isdistinct(s[1..2]) == true and isdistinct(s[2..3]) == true\
    \ and isdistinct(s[3..4]) == true and isdistinct(s[4..5]) == true then return\
    \ true\n        else return false\n    else if length(s) == 5 then \n        if\
    \ isdistinct(s[1..2]) == true and isdistinct(s[2..3]) == true and isdistinct(s[3..4])\
    \ == true and isdistinct(s[4..5]) == true and isdistinct(s[5..6]) == true then\
    \ return true\n        else return false\n    else if length(s) == 6 then \n \
    \       if isdistinct(s[1..2]) == true and isdistinct(s[2..3]) == true and isdistinct(s[3..4])\
    \ == true and isdistinct(s[4..5]) == true and isdistinct(s[5..6]) == true and\
    \ isdistinct(s[6..7]) == true then return true\n        else return false\n  \
    \  else if length(s) == 7 then \n        if isdistinct(s[1..2]) == true and isdistinct(s[2..3])\
    \ == true and isdistinct(s[3..4]) == true and isdistinct(s[4..5]) == true and\
    \ isdistinct(s[5..6]) == true and isdistinct(s[6..7]) == true and isdistinct(s[7..8])\
    \ == true then return true\n        else return false\n    else if length(s) ==\
    \ 8 then \n        if isdistinct(s[1..2]) == true and isdistinct(s[2..3]) == true\
    \ and isdistinct(s[3..4]) == true and isdistinct(s[4..5]) == true and isdistinct(s[5..6])\
    \ == true and isdistinct(s[6..7]) == true and isdistinct(s[7..8]) == true and\
    \ isdistinct(s[8..9]) == true then return true\n        else return false\n  \
    \  else if length(s) == 9 then \n        if isdistinct(s[1..2]) == true and isdistinct(s[2..3])\
    \ == true and isdistinct(s[3..4]) == true and isdistinct(s[4..5]) == true and\
    \ isdistinct(s[5..6]) == true and isdistinct(s[6..7]) == true and isdistinct(s[7..\n\
    using Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\"\
    ) == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\")\
    \ == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpzitc9aqf.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpzitc9aqf.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    \n    length(s)>3 && all(is_distinct(s[0..2]),\
    \ is_distinct(s[2..4]))\nend\n</cell>\n<code language=julia-1.4>\nis_happy(\"\
    a\")\n</cell>\n<code language=julia-1.4>\nis_happy(\"aa\")\n</cell>\n<code language=julia-1.4>\n\
    is_happy(\"abcd\")\n</cell>\n<code language=julia-1.4>\nis_happy(\"aabb\")\n</cell>\n\
    <code language=julia-1.4>\nis_happy(\"adb\")\n</cell>\n<code language=julia-1.4>\n\
    is_happy(\"xyy\")\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ and returns the number of characters that are not vowels.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn_8ggrwj.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpn_8ggrwj.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true\n        return true\n\
    \    else if length(s) < 3\n        return false\n    else\n        forall i in\
    \ 1..(length(s)-2)\n            if  s[i] == s[i+1] && s[i+1] == s[i+2]\n     \
    \           && s[i] != s[i+1] && s[i] != s[i+2]\n            then return false\n\
    \            else return true\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"a\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"aa\")\n</cell>\n\
    <code language=julia-1.0>\nis_happy(\"abcd\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"aabb\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"adb\")\n</cell>\n\
    <code language=julia-1.0>\nis_happy(\"xyy\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that checks if a number is prime or not. \nA prime number is a natural\
    \ number greater than 1 that has no positive divisors other than 1 and itself.\n\
    For example 5 is a prime number, but 2 is not because 2 has only 1 divisor.\n\
    Write a function that checks if a number is prime or not. \nA prime number is\
    \ a natural number greater than 1 that has no positive divisors other than 1 and\
    \ itself.\nFor example 5 is a prime number, but 2 is not because 2 has only 1\
    \ divisor.\nWrite a function that checks if a number is prime or not. \nA prime\
    \ number is a natural number greater than 1 that has no positive divisors other\
    \ than 1 and itself.\nFor example 5 is a prime number, but 2 is not because 2\
    \ has only 1 divisor.\nWrite a function that checks if a number is prime or not.\
    \ \nA prime number is a natural number greater than 1 that has no positive divisors\
    \ other than 1 and itself.\nFor example 5 is a prime number, but 2 is not because\
    \ 2 has only 1 divisor.\nWrite a function that checks if a number is prime or\
    \ not. \nA prime number is a natural number greater than 1 that has no positive\
    \ divisors other than 1 and itself.\nFor example 5 is a prime number, but 2 is\
    \ not because 2 has only 1 divisor.\nWrite a function that checks if a number\
    \ is prime or not. \nA prime number is a natural number greater than 1 that has\
    \ no positive divisors other than 1 and itself.\nFor example 5 is a prime number,\
    \ but 2 is not because 2 has only 1 divisor.\nWrite a function that checks if\
    \ a number is prime or not. \nA prime number is a natural number greater than\
    \ 1 that has no positive divisors other than 1 and itself.\nFor example 5 is a\
    \ prime number, but 2 is not because 2 has only 1 divisor.\nWrite a function that\
    \ checks if a number is prime or not. \nA prime number is a natural number greater\
    \ than \nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5optcba1.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5optcba1.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true\n        return true\n\
    \    else if length(s) < 3\n        return false\n    else\n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n\nusing Test\n\
    \n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\
    \t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t\
    @test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"\
    xyy\") == false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"\
    iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2qvva_09.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2qvva_09.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2wb7nosq.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp2wb7nosq.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp2wb7nosq.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp54r7irt_.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp54r7irt_.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp54r7irt_.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true then return true\n  \
    \  else if length(s) < 3 then return false\n    else if length(s) mod 3 != 0 then\
    \ return false\n    else if length(s) == 3 then \n        let  a = s[0]\n    \
    \    let  b = s[1]\n        let  c = s[2]\n        if a != b and a != c and b\
    \ != c then return true\n        else return false\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\nis_happy(\"a\")\n</cell>\n<code language=julia-1.3>\nis_happy(\"\
    aa\")\n</cell>\n<code language=julia-1.3>\nis_happy(\"abcd\")\n</cell>\n<code\
    \ language=julia-1.3>\nis_happy(\"aabb\")\n</cell>\n<code language=julia-1.3>\n\
    is_happy(\"adb\")\n</cell>\n<code language=julia-1.3>\nis_happy(\"xyy\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of vowels in it.\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t\
    @test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpegj4skx1.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpegj4skx1.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1c3c0bnd.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp1c3c0bnd.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp1c3c0bnd.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0)\n    else \n        false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpummn6trs.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"a\") == false\n  MethodError: no method matching is_happy(::String,\
    \ ::Int64)\n  Closest candidates are:\n    is_happy(::String) at /tmp/tmpummn6trs.jl:13\n\
    \  Stacktrace:\n   [1] is_happy(::String) at /tmp/tmpummn6trs.jl:13\n   [2] top-level\
    \ scope at /tmp/tmpummn6trs.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpummn6trs.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpummn6trs.jl:24\n  Test threw exception\n  Expression: candidate(\"\
    aa\") == false\n  MethodError: no method matching is_happy(::String, ::Int64)\n\
    \  Closest candidates are:\n    is_happy(::String) at /tmp/tmpummn6trs.jl:13\n\
    \  Stacktrace:\n   [1] is_happy(::String) at /tmp/tmpummn6trs.jl:13\n   [2] top-level\
    \ scope at /tmp/tmpummn6trs.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpummn6trs.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpummn6trs.jl:25\n  Test threw exception\n  Expression: candidate(\"\
    abcd\") == true\n  MethodError: no method matching is_happy(::String, ::Int64)\n\
    \  Closest candidates are:\n    is_happy(::String) at /tmp/tmpummn6trs.jl:13\n\
    \  Stacktrace:\n   [1] is_happy(::String) at /tmp/tmpummn6trs.jl:13\n   [2] top-level\
    \ scope at /tmp/tmpummn6trs.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpummn6trs.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpummn6trs.jl:26\n  Test threw exception\n  Expression: candidate(\"\
    aabb\") == false\n  MethodError: no method matching is_happy(::String, ::Int64)\n\
    \  Closest candidates are:\n    is_happy(::String) at /tmp/tmpummn6trs.jl:13\n\
    \  Stacktrace:\n   [1] is_happy(::String) at /tmp/tmpummn6trs.jl:13\n   [2] top-level\
    \ scope at /tmp/tmpummn6trs.jl:26\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpummn6trs.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpummn6trs.jl:27\n  Test threw exception\n  Expression: candidate(\"\
    adb\") == true\n  MethodError: no method matching is_happy(::String, ::Int64)\n\
    \  Closest candidates are:\n    is_happy(::String) at /tmp/tmpummn6trs.jl:13\n\
    \  Stacktrace:\n   [1] is_happy(::String) at /tmp/tmpummn6trs.jl:13\n   [2] top-level\
    \ scope at /tmp/tmpummn6trs.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpummn6trs.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpummn6trs.jl:28\n  Test threw exception\n  Expression: candidate(\"\
    xyy\") == false\n  MethodError: no method matching is_happy(::String, ::Int64)\n\
    \  Closest candidates are:\n    is_happy(::String) at /tmp/tmpummn6trs.jl:13\n\
    \  Stacktrace:\n   [1] is_happy(::String) at /tmp/tmpummn6trs.jl:13\n   [2] top-level\
    \ scope at /tmp/tmpummn6trs.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpummn6trs.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpummn6trs.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    iopaxpoi\") == true\n  MethodError: no method matching is_happy(::String, ::Int64)\n\
    \  Closest candidates are:\n    is_happy(::String) at /tmp/tmpummn6trs.jl:13\n\
    \  Stacktrace:\n   [1] is_happy(::String) at /tmp/tmpummn6trs.jl:13\n   [2] top-level\
    \ scope at /tmp/tmpummn6trs.jl:29\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpummn6trs.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpummn6trs.jl:30\n  Test threw exception\n  Expression: candidate(\"\
    iopaxioi\") == false\n  MethodError: no method matching is_happy(::String, ::Int64)\n\
    \  Closest candidates are:\n    is_happy(::String) at /tmp/tmpummn6trs.jl:13\n\
    \  Stacktrace:\n   [1] is_happy(::String) at /tmp/tmpummn6trs.jl:13\n   [2] top-level\
    \ scope at /tmp/tmpummn6trs.jl:30\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpummn6trs.jl:22\n  \nTest Summary: | Error \
    \ Total\ntest set      |     8      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpummn6trs.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvn3j_60u.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpvn3j_60u.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpvn3j_60u.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzjdmmas7.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpzjdmmas7.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpzjdmmas7.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    \n    if is_empty(s) == True\n    \n    else\
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n\nusing Test\n\n@testset begin\n\
    \ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpcqaw7ch_.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpcqaw7ch_.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpcqaw7ch_.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0)\n    then true\n    else false\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp8zjcmhyh.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp8zjcmhyh.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    \n    if is_empty(s) == True\n    else if length(s)\
    \ < 3\n    then False\n    else if length(s) == 3\n    then is_distinct(s[1..2])\n\
    \    else if length(s) == 2\n    then is_distinct(s[1..1])\n    else if length(s)\
    \ == 1\n    then is_distinct(s)\n    else is_happy(s[1..])\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_happy(\"a\") == false\n@assert is_happy(\"\
    aa\") == false\n@assert is_happy(\"abcd\") == true\n@assert is_happy(\"aabb\"\
    ) == false\n@assert is_happy(\"adb\") == true\n@assert is_happy(\"xyy\") == false\n\
    </cell>\n<text>\nExercise 3\nWrite a function that checks if a number is prime\
    \ or not. \nA number is prime if its only prime factors are 2 and itself. \nFor\
    \ example:\nis_prime(12) => True\nis_prime(13) => False\nis_prime(14) => True\n\
    is_prime(15) => False\nis_prime(16) => True\nis_prime(17) => False\nis_prime(19)\
    \ => True\nis_prime(20) => False\nis_prime(21) => True\nis_prime(23) => False\n\
    is_prime(24) => True\nis_prime(25) => False\nis_prime(27) => True\nis_prime(28)\
    \ => False\nis_prime(29) => True\nis_prime(30) => False\nis_prime(31) => True\n\
    is_prime(32) => False\nis_prime(33) => True\nis_prime(34) => False\nis_prime(35)\
    \ => True\nis_prime(36) => False\nis_prime(37) => True\nis_prime(38) => False\n\
    is_prime(39) => True\nis_prime(40) => False\nis_prime(42) => True\nis_prime(43)\
    \ => False\nis_prime(44) => True\nis_prime(45) => False\nis_prime(46) => True\n\
    is_prime(47) => False\nis_prime(48) => True\nis_prime(49) => False\nis_prime(50)\
    \ => True\nis_prime(51) => False\nis_prime(52) => True\nis_prime(53) => False\n\
    is_prime(54) => True\nis_prime(55) => False\nis_prime(56) => True\nis_prime(57)\
    \ => False\nis_prime(58) => True\nis_prime(59) => False\nis_prime(60) => True\n\
    is_prime(61) => False\nis_prime(62\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8fg5sd37.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8fg5sd37.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == True\n    else if length(s)\
    \ < 3\n    else if all(is_distinct(s[i:i+3]) for i in 1:length(s))\n    else False\n\
    \    end\nend\n</code>\n<|/ a tags=string,julia,arrays |>\n<| a tags=string,julia,arrays\
    \ |>\nI wrote a function that checks if a string is happy or not. \n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") ==\
    \ false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\") ==\
    \ true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\") ==\
    \ true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp90w9dbri.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp90w9dbri.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true\n        true\n    else\n\
    \        if length(s)>3 && all(is_distinct(s[i..i+3]) | i in [0..s-1] for i in\
    \ [0..s-2])\n            true\n        else\n            false\n    end\nend\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpap8y6ntu.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpap8y6ntu.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s) == true then return true else\
    \ return false\nend\n</cell>\n<code language=julia-1.5>\nis_happy(\"a\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"aa\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"abcd\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"aabb\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"adb\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"xyy\")\n</cell>\n<text>\nExercise 2\nusing Test\n\n@testset begin\n\
    \ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp8kwuw69o.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp8kwuw69o.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true\n        true\n    else\n\
    \        length(s) >= 3 && all(is_distinct(s[0..k], s[k+1..k+3]) for k in 0..3)\n\
    \    end\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\
    \t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t\
    @test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"\
    xyy\") == false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"\
    iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2u7mv7x_.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2u7mv7x_.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == True\n    else if length(s)\
    \ < 3\n    else if is_distinct(s[1..3])\n    else if is_distinct(s[2..4])\n  \
    \  else if is_distinct(s[3..5])\n    else if is_distinct(s[4..6])\n    else if\
    \ is_distinct(s[5..7])\n    else if is_distinct(s[6..8])\n    else if is_distinct(s[7..9])\n\
    \    else if is_distinct(s[8..10])\n    else if is_distinct(s[9..11])\n    else\
    \ if is_distinct(s[10..12])\n    else if is_distinct(s[11..13])\n    else if is_distinct(s[12..14])\n\
    \    else if is_distinct(s[13..15])\n    else if is_distinct(s[14..16])\n    else\
    \ if is_distinct(s[15..17])\n    else if is_distinct(s[16..18])\n    else if is_distinct(s[17..19])\n\
    \    else if is_distinct(s[18..20])\n    else if is_distinct(s[19..21])\n    else\
    \ if is_distinct(s[20..22])\n    else if is_distinct(s[2..23])\n    else if is_distinct(s[23..24])\n\
    \    else if is_distinct(s[24..25])\n    else if is_distinct(s[25..26])\n    else\
    \ if is_distinct(s[26..27])\n    else if is_distinct(s[27..28])\n    else if is_distinct(s[28..29])\n\
    \    else if is_distinct(s[29..30])\n    else if is_distinct(s[30..31])\n    else\
    \ if is_distinct(s[31..30])\n    else if is_distinct(s[29..31])\n    else if is_distinct(s[32..33])\n\
    \    else if is_distinct(s[33..34])\n    else if is_distinct(s[34..35])\n    else\
    \ if is_distinct(s[35..36])\n    else if is_distinct(s[36..37])\n    else if is_distinct(s[37..38])\n\
    \    else if is_distinct(s[38..39])\n    else if is_distinct(s[39..40])\n    else\
    \ if is_distinct(s[40..41])\n    else if is_distinct(s[41..40])\n    else if is_distinct(s[39..41])\n\
    \    else if is_distin\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgo0_lv_3.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgo0_lv_3.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true \n        return true\n\
    \    else if length(s) < 3 \n        return false\n    else if length(s) == 3\
    \ \n        return is_distinct(s[1..3])\n    else \n        return is_happy(s[1..(length(s)-2)])\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like your solution, but I think it\
    \ would be better to use a `while` loop to avoid the recursion.\n<|/ c |>\n<|\
    \ c |>\nI agree with you, however I wanted to keep it simple and avoid the use\
    \ of loops.\n<|/ c |>\n<| c |>\nI agree with you, however I wanted to keep it\
    \ simple and avoid the use of loops.\n<|/ c |>\n<| c |>\nI agree with you, however\
    \ I wanted to keep it simple and avoid the use of loops.\n<|/ c |>\n<| c |>\n\
    I agree with you, however I wanted to keep it simple and avoid the use of loops.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpprxr9kzo.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpprxr9kzo.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true then return true\n  \
    \  else if length(s) < 3 then return false\n    else if length(s) == 3 then \n\
    \        let  a = s[0]\n        let  b = s[1]\n        let  c = s[2]\n       \
    \ if a == b and b == c then return true\n        else return false\n    else return\
    \ is_happy(substring(s,1,3))\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp3odl7yom.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp3odl7yom.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0)\n    then return true\n   \
    \ else return false\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_happy(\"\
    a\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"aa\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"abcd\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"aabb\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"adb\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"xyy\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of vowels contained in the string.\nVowels are\
    \ defined as a, e, i, o, u\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpo7n__u8y.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpo7n__u8y.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true\n        return true\n\
    \    else if length(s) < 3\n        return false\n    else if length(s) == 3\n\
    \        return is_distinct(s[1..2])\n    else if length(s) == 4\n        return\
    \ is_distinct(s[1..3])\n    else if length(s) == 5\n        return is_distinct(s[1..4])\n\
    \    else if length(s) == 6\n        return is_distinct(s[1..5])\n    else if\
    \ length(s) == 7\n        return is_distinct(s[1..6])\n    else if length(s) ==\
    \ 8\n        return is_distinct(s[1..7])\n    else if length(s) == 9\n       \
    \ return is_distinct(s[1..8])\n    else if length(s) == 10\n        return is_distinct(s[1..9])\n\
    \    else if length(s) == 11\n        return is_distinct(s[1..10])\n    else if\
    \ length(s) == 12\n        return is_distinct(s[1..11])\n    else if length(s)\
    \ == 13\n        return is_distinct(s[1..12])\n    else if length(s) == 14\n \
    \       return is_distinct(s[1..13])\n    else if length(s) == 15\n        return\
    \ is_distinct(s[1..14])\n    else if length(s) == 16\n        return is_distinct(s[1..15])\n\
    \    else if length(s) == 17\n        return is_distinct(s[1..16])\n    else if\
    \ length(s) == 18\n        return is_distinct(s[1..17])\n    else if length(s)\
    \ == 19\n        return is_distinct(s[1..18])\n    else if length(s) == 20\n \
    \       return is_distinct(s[1..19])\n    else if length(s) == 21\n        return\
    \ is_distinct(s[1..20])\n    else if length(s) == 22\n        return is_distinct(s[1..21])\n\
    \    else if length(s) == 23\n        return is_distinct(s[1..22])\n    else if\
    \ length(s) == 24\n        return is_distinct(s[1..23])\n    else if length(s)\
    \ == 25\n        return is_distinct(s[1..24])\n    else if length(s) == 26\n \
    \       return is_distinct(s[1..25])\n    else if length(s) == 27\n        return\
    \ is_distinct(s[1..26])\n    else if length(s) == 28\n        return is_distinct(s[1..27])\n\
    \    else if length(s) == 29\n        return is_distinct(s[1..28])\n    else if\
    \ length(s) == 30\n        return is_distinct(s[1..29])\n    else if length(s)\
    \ == 31\n        return is_distinct(s[1..30])\n    else if length(s) == 32\n \
    \       return \nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpymwxxvym.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpymwxxvym.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0)\n    then true\n    else false\n\
    end\n</code>\n<|/ a tags=recursion,string,julia |>\n<| c |>\nI like the idea of\
    \ using an accumulator to keep track of the current position in the string. Thanks!\n\
    <|/ c |>\n<| c |>\nI like the idea of using an accumulator to keep track of the\
    \ current position in the string. Thanks!\n<|/ c |>\n<| c |>\nI like the idea\
    \ of using an accumulator to keep track of the current position in the string.\
    \ Thanks!\n<|/ c |>\n<| c |>\nI like the idea of using an accumulator to keep\
    \ track of the current position in the string. Thanks!\n<|/ c |>\n<| a dscore=2\
    \ |>\nHere's a solution using recursion:\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpaxpb0i_n.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpaxpb0i_n.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s) == true\n    then return true\n\
    \    else return false\n    end\nend\n</cell>\n<code language=julia-1.0>\nis_happy(\"\
    a\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"aa\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"abcd\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"aabb\")\n</cell>\n\
    <code language=julia-1.0>\nis_happy(\"adb\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"xyy\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string and returns the number of vowels in it.\nusing Test\n\n@testset begin\n\
    \ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpso2y648d.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpso2y648d.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true\n        return true\n\
    \    else if length(s) < 3\n        return false\n    else\n        local count\
    \ = 0\n        for c in s\n            if c ~= s[count]\n                count\
    \ = count + 1\n            else\n                count = count + 1\n         \
    \   end\n        end\n        if count == length(s)\n            return true\n\
    \        else\n            return false\n        end\n    end\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpskofyanr.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpskofyanr.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    \n    if is_empty(s) == true\n        return\
    \ true\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7wk_khd7.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7wk_khd7.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true\n        return true\n\
    \    else if length(s) >= 3\n        true\n    else\n        false\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nis_happy(\"a\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"aa\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"abcd\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"aabb\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"adb\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"xyy\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a number is even or odd.\n\
    using Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\"\
    ) == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\")\
    \ == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr62u2fgk.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpr62u2fgk.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true\n        return true\n\
    \    else if length(s) < 3\n        return false\n    else\n        forall i in\
    \ 1..(length(s)-2)\n            if s[i] == s[i+1] && s[i+1] == s[i+2]\n      \
    \          return false\n        return true\nend\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"a\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"aa\")\n</cell>\n\
    <code language=julia-1.0>\nis_happy(\"abcd\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"aabb\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"adb\")\n</cell>\n\
    <code language=julia-1.0>\nis_happy(\"xyy\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the number of vowels in it.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") ==\
    \ false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\") ==\
    \ true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\") ==\
    \ true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi_eax1u_.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpi_eax1u_.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == True then return True else\
    \ return False \n    else \n        local i::Int = 0 \n        local j::Int =\
    \ 0 \n        local k::Int = 0 \n        local l::Int = 0 \n        local m::Int\
    \ = 0 \n        local n::Int = 0 \n        local o::Int = 0 \n        local p::Int\
    \ = 0 \n        local q::Int = 0 \n        local r::Int = 0 \n        local s::String\
    \ = \"\" \n        local t::String = \"\" \n        local u::String = \"\" \n\
    \        local v::String = \"\" \n        local w::String = \"\" \n        local\
    \ x::String = \"\" \n        local y::String = \"\" \n        local z::String\
    \ = \"\" \n        local A::String = \"\" \n        local B::String = \"\" \n\
    \        local C::String = \"\" \n        local D::String = \"\" \n        local\
    \ E::String = \"\" \n        local F::String = \"\" \n        local G::String\
    \ = \"\" \n        local H::String = \"\" \n        local I::String = \"\" \n\
    \        local J::String = \"\" \n        local K::String = \"\" \n        local\
    \ L::String = \"\" \n        local M::String = \"\" \n        local N::String\
    \ = \"\" \n        local O::String = \"\" \n        local P::String = \"\" \n\
    \        local Q::String = \"\" \n        local R::String = \"\" \n        local\
    \ S::String = \"\" \n        local T::String = \"\" \n        local U::String\
    \ = \"\" \n        local V::String = \"\" \n        local W::String = \"\" \n\
    \        local X::String = \"\" \n        local Y::String = \"\" \n        local\
    \ Z::String = \"\" \n        local AA::String = \"\" \n        local AB::String\
    \ = \"\" \n        local AC::String = \"\" \n        local AD::String = \"\" \n\
    \        local AE::String = \"\" \n        local AF::String = \"\" \n        local\
    \ AG::String = \"\" \n        local AH::String = \"\" \n        local AI::String\
    \ = \"\" \n        local AJ::String = \"\" \n        local AK::String = \"\" \n\
    \        local AL::String = \"\" \n        local AM::String = \"\" \n        local\
    \ AN::String = \"\" \n        local AO::String = \"\" \n        local AP::String\
    \ = \"\" \n        local AQ::String = \"\" \n        local AR::String = \"\" \n\
    \        local AS::String = \"\" \n        local AT::\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp1b26fe52.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp1b26fe52.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == True\n    else if length(s)\
    \ < 3\n    else if is_distinct(s[1..3]) == False\n    else if is_distinct(s[2..4])\
    \ == False\n    else if is_distinct(s[3..5]) == False\n    else if is_distinct(s[4..6])\
    \ == False\n    else if is_distinct(s[5..7]) == False\n    else if is_distinct(s[6..8])\
    \ == False\n    else if is_distinct(s[7..9]) == False\n    else if is_distinct(s[8..10])\
    \ == False\n    else if is_distinct(s[9..11]) == False\n    else if is_distinct(s[10..12])\
    \ == False\n    else if is_distinct(s[11..13]) == False\n    else if is_distinct(s[12..14])\
    \ == False\n    else if is_distinct(s[13..15]) == False\n    else if is_distinct(s[14..16])\
    \ == False\n    else if is_distinct(s[15..17]) == False\n    else if is_distinct(s[16..18])\
    \ == False\n    else if is_distinct(s[17..19]) == False\n    else if is_distinct(s[18..20])\
    \ == False\n    else if is_distinct(s[19..21]) == False\n    else if is_distinct(s[20..22])\
    \ == False\n    else if is_distinct(s[21..23]) == False\n    else if is_distinct(s[22..24])\
    \ == False\n    else if is_distinct(s[23..25]) == False\n    else if is_distinct(s[24..26])\
    \ == False\n    else if is_distinct(s[25..27]) == False\n    else if is_distinct(s[26..28])\
    \ == False\n    else if is_distinct(s[27..29]) == False\n    else if is_distinct(s[28..30])\
    \ == False\n    else if is_distinct(s[29..31]) == False\n    else if is_distinct(s[30..32])\
    \ == False\n    else if is_distinct(s[31..33]) == False\n    else if is_distinct(s[32..34])\
    \ == False\n    else if is_distinct(s[33..35]) == False\n    else if is_distinct(s[34..36])\
    \ == False\n    else if is_distinct(s[35..37]) == False\n    else if is_distinct(s[36..38])\
    \ == False\n    else if is_distin\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq1e5sekd.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq1e5sekd.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0)\n    then true\n    else false\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nis_happy(\"a\")\n</cell>\n\
    <code language=julia-1.3>\nis_happy(\"aa\")\n</cell>\n<code language=julia-1.3>\n\
    is_happy(\"abcd\")\n</cell>\n<code language=julia-1.3>\nis_happy(\"aabb\")\n</cell>\n\
    <code language=julia-1.3>\nis_happy(\"adb\")\n</cell>\n<code language=julia-1.3>\n\
    is_happy(\"xyy\")\n</cell>\n<text>\nExercise 2\nWrite a function that checks if\
    \ a number is prime or not. \nA number is prime if its only prime factors are\
    \ 2, 3 or 5.\nFor example:\nis_prime(2) => true\nis_prime(5) => true\nis_prime(7)\
    \ => false\nis_prime(11) => false\nis_prime(13) => true\nis_prime(17) => true\n\
    is_prime(19) => false\nis_prime(23) => true\nis_prime(29) => false\nis_prime(31)\
    \ => true\nis_prime(37) => true\nis_prime(43) => false\nis_prime(47) => true\n\
    is_prime(53) => true\nis_prime(59) => true\nis_prime(61) => false\nis_prime(67)\
    \ => true\nis_prime(71) => true\nis_prime(73) => false\nis_prime(79) => true\n\
    is_prime(81) => false\nis_prime(89) => true\nis_prime(97) => true\nis_prime(101)\
    \ => true\nis_prime(103) => false\nis_prime(109) => true\nis_prime(113) => true\n\
    is_prime(127) => true\nis_prime(131) => false\nis_prime(137) => true\nis_prime(139)\
    \ => false\nis_prime(141) => true\nis_prime(147) => true\nis_prime(151) => true\n\
    is_prime(157) => true\nis_prime(159) => true\nis_prime(163) => true\nis_prime(167)\
    \ => true\nis_prime(173) => true\nis_prime(179) => true\nis_prime(181) => true\n\
    is_prime(191) => true\nis_prime(193) => true\nis_prime(197) => true\nis_prime(199)\
    \ => true\nis_prime(203) => true\nis_prime(209) => true\nis_prime(211) => true\n\
    is_prime(213) => true\nis_prime(\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpddgwj_hy.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpddgwj_hy.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    \n    if is_happy(s,0)\n    \n    else \n  \
    \      \n        if is_happy(s,1)\n        \n        else \n            \n   \
    \         if is_happy(s,2)\n            \n            else \n                \n\
    \                if is_happy(s,3)\n                \n                else \n \
    \                   \n                    if is_happy(s,4)\n                 \
    \   \n                    else \n                        \n                  \
    \      if is_happy(s,5)\n                        \n                        else\
    \ \n                            \n                            if is_happy(s,6)\n\
    \                            \n                            else \n           \
    \                     \n                                if is_happy(s,7)\n   \
    \                             \n                                else \n      \
    \                              \n                                    if is_happy(s,8)\n\
    \                                    \n                                    else\
    \ \n                                        \n                               \
    \         if is_happy(s,9)\n                                        \n       \
    \                                 else \n                                    \
    \        \n                                            if is_happy(s,10)\n   \
    \                                         \n                                 \
    \           else \n                                                \n        \
    \                                        if is_happy(s,11)\n                 \
    \                               \n                                           \
    \     else \n                                                    \n          \
    \                                          if is_happy(s,12)\n               \
    \                                     \n                                     \
    \               else \n                                                      \
    \  \n                                                        if is_happy(s,13)\n\
    \                                                        \n                  \
    \                                      else \n                               \
    \                             \n                                             \
    \               if is_happy(s,14)\n                                          \
    \                  \n                                                        \
    \    else \n                                                                \n\
    \                                                                if is_happy(s,15)\n\
    \                                                                \n          \
    \                                                      else \n               \
    \                                                     \n                     \
    \                                               if is_happy(s,16)\n          \
    \                                                          \n                \
    \                                                    else \n                 \
    \                                                       \n                   \
    \                                                         if is_happy(s,17)\n\
    \                                                                            \n\
    \                                                                            else\
    \ \n                                                                         \
    \       \n                                                                   \
    \             if is_happy(s,18)\n                                            \
    \                                    \n                                      \
    \                                          else \n                           \
    \                                                         \n                 \
    \                                                                   if is_happy(s,19)\n\
    \                                                                            \
    \        \n                                                                  \
    \                  else \n                                                   \
    \                                     \n                                     \
    \                                                   if is_happy(s,20)\n      \
    \                                                                            \
    \      \n                                                                    \
    \                    else \n                                                 \
    \                                           \n                               \
    \                                                             if is_happy(s,21)\n\
    \                                                                            \
    \                \n                                                          \
    \                                  else \n                                   \
    \                                                             \n             \
    \                                                                            \
    \       if is_happy(s,22)\n                                                  \
    \                                              \n                            \
    \                                                                    else \n \
    \                                                                            \
    \                       \n                                                   \
    \                                                     if is_happy(s,23)\n    \
    \                                                                            \
    \                        \n                                                  \
    \                                                      else \n               \
    \                                                                            \
    \                 \n                                                         \
    \                                                   if is_happy(s,24)\n      \
    \                                                                            \
    \                          \n                                                \
    \                                                            else \n         \
    \                                                                            \
    \                           \n                                               \
    \                                                                 if is_happy(s,25)\n\
    \                                                                            \
    \                                    \n                                      \
    \                                                                          else\
    \ \n                                                                         \
    \                                           \n                               \
    \                                                                            \
    \         if is_happy(s,26)\n                                                \
    \                                                                    \n      \
    \                                                                            \
    \                                  else \n                                   \
    \                                                                            \
    \         \n                                                                 \
    \                                                       if is_happy(s,27)\n  \
    \                                                                            \
    \                                          \n                                \
    \                                                                            \
    \            else \n                                                         \
    \                                                                   \n       \
    \                                                                            \
    \                                                         if is_happy(s,28)\n\
    \                                                                            \
    \                                                \n                          \
    \                                                                            \
    \                      else \n                                               \
    \                                                                            \
    \                     \n                                                     \
    \                                                                            \
    \               if is_happy(s,29)\n                                          \
    \                                                                            \
    \                          \n                                                \
    \                                                                            \
    \                    else \n                                                 \
    \                                                                            \
    \       \n                                                                   \
    \                                                                 if is_happy(s,30)\n\
    \                                                                            \
    \                                                        \n                  \
    \                                                                            \
    \                                      else \n                               \
    \                                                                            \
    \                             \n\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpp50wgf8d.jl:134\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpp50wgf8d.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpp50wgf8d.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true\n        return true\n\
    \    else if length(s) < 3\n        return false\n    else\n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n\nusing Test\n\
    \n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\
    \t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t\
    @test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"\
    xyy\") == false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"\
    iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnj6gvwdf.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnj6gvwdf.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true then return true\n  \
    \  else if length(s) < 3 then return false\n    else if is_unique(s[1..3]) ==\
    \ true then return true\n    else return false\nend\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"a\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"aa\")\n</cell>\n\
    <code language=julia-1.0>\nis_happy(\"abcd\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"aabb\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"adb\")\n</cell>\n\
    <code language=julia-1.0>\nis_happy(\"xyy\")\n</cell>\n<text>\nExercise 2\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") ==\
    \ false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\") ==\
    \ true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\") ==\
    \ true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp3fibqdmv.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp3fibqdmv.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == True then return True else\
    \ return False\n    else if length(s) < 3 then return False else if length(s)\
    \ == 3 then \n        \n        \n        for i in 1:3 \n            if s[i] ==\
    \ s[i+1] then return False \n            else return True \n        \n       \
    \ else return False \n    else return False \nend\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"a\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"aa\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"abcd\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"aabb\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"adb\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"xyy\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"xyyx\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"xyyxxy\")\n\
    </cell>\n<code language=julia-1.5>\nis_happy(\"xyyxxyx\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"xyyxxyxx\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"xyyxxyxxxy\"\
    )\n</cell>\n<code language=julia-1.5>\nis_happy(\"xyyxxyxxxyx\")\n</cell>\n<code\
    \ language=julia-1.5>\nis_happy(\"xyyxxyxxxyxx\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"xyyxxyxxxyxxxy\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"\
    xyyxxyxxxyxxxyx\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"xyyxxyxxxyxxxyxx\"\
    )\n</cell>\n<code language=julia-1.5>\nis_happy(\"xyyxxyxxxyxxxyxxxy\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"xyyxxyxxxyxxxyxxxyx\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"xyyxxyxxxyxxxyxxxyxx\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"\
    xyyxxyxxxyxxxyxxxyxxxy\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"xyyxxyxxxyxxxyxxxyxxxyx\"\
    )\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp8yy6fgyh.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp8yy6fgyh.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == True\n    else if length(s)\
    \ < 3\n    then False\n    else if is_distinct(s[1..2]) == True && is_distinct(s[2..3])\
    \ == True && is_distinct(s[3..4]) == True\n    then True\n    else False\n   \
    \ end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    count_distinct(s::String)\n\
    using Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\"\
    ) == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\")\
    \ == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq7fnujt4.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq7fnujt4.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0)\n    then true\n    else false\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\nis_happy(\"a\")\n</cell>\n\
    <code language=julia-1.4>\nis_happy(\"aa\")\n</cell>\n<code language=julia-1.4>\n\
    is_happy(\"abcd\")\n</cell>\n<code language=julia-1.4>\nis_happy(\"aabb\")\n</cell>\n\
    <code language=julia-1.4>\nis_happy(\"adb\")\n</cell>\n<code language=julia-1.4>\n\
    is_happy(\"xyy\")\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of times a given character appears in a string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp9j16ajes.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp9j16ajes.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0)\n    then true\n    else false\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp4d6qdayl.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp4d6qdayl.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true\n        return true\n\
    \    else if length(s) < 3\n        return false\n    else\n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n\nusing Test\n\
    \n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\
    \t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t\
    @test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"\
    xyy\") == false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"\
    iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc3m9lg3_.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpc3m9lg3_.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0)\n    else \n        false\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsx79hhls.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpsx79hhls.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpsx79hhls.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpv6gbnz4o.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpv6gbnz4o.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpv6gbnz4o.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true then return true\n  \
    \  else if length(s) < 3 then return false\n    else if length(s) == 3 then \n\
    \        if all(is_distinct(s[1..2]) == true) then return true\n        else return\
    \ false\n    else if length(s) == 4 then \n        if all(is_distinct(s[1..3])\
    \ == true) then return true\n        else return false\n    else if length(s)\
    \ == 5 then \n        if all(is_distinct(s[1..4]) == true) then return true\n\
    \        else return false\n    else if length(s) == 6 then \n        if all(is_distinct(s[1..5])\
    \ == true) then return true\n        else return false\n    else if length(s)\
    \ == 7 then \n        if all(is_distinct(s[1..6]) == true) then return true\n\
    \        else return false\n    else if length(s) == 8 then \n        if all(is_distinct(s[1..7])\
    \ == true) then return true\n        else return false\n    else if length(s)\
    \ == 9 then \n        if all(is_distinct(s[1..8]) == true) then return true\n\
    \        else return false\n    else if length(s) == 10 then \n        if all(is_distinct(s[1..9])\
    \ == true) then return true\n        else return false\n    else if length(s)\
    \ == 11 then \n        if all(is_distinct(s[1..10]) == true) then return true\n\
    \        else return false\n    else if length(s) == 12 then \n        if all(is_distinct(s[1..11])\
    \ == true) then return true\n        else return false\n    else if length(s)\
    \ == 13 then \n        if all(is_distinct(s[1..12]) == true) then return true\n\
    \        else return false\n    else if length(s) == 14 then \n        if all(is_distinct(s[1..13])\
    \ == true) then return true\n        else return false\n    else if length(s)\
    \ == 15 then \n        if all(is_distinct(s[1..14]) == true) then return true\n\
    \        else return false\n    else if length(s) == 16 then \n        if all(is_distinct(s[1..15])\
    \ == true) then return true\n        else return false\n    else if length(s)\
    \ == 17 then \n        if all(is_distinct(s[1..16]) == true) then return true\n\
    \        else return false\n    else if length(s) == 18 then \n        if all(is_distinct(s[1..17])\
    \ == true) then return true\n        else return false\n    else if length(s)\
    \ == 19 then \n        if all(is_distinct(s[1..18]) == true) then return true\n\
    \        else return false\n    else if length(s) == 20 then \n        if all(\n\
    using Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\"\
    ) == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\")\
    \ == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpnthxmymj.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpnthxmymj.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == True then return True else\
    \ return False\n    else if length(s) < 3 then return False else if length(s)\
    \ == 3 then \n        \n        \n        for i in 1:length(s) do \n         \
    \   if s[i] == s[i+1] then return False else return True\n        end\n    else\
    \ \n        for i in 1:length(s) do \n            if s[i] == s[i+1] then return\
    \ False else return True\n        end\n        for i in 2:length(s) do \n    \
    \        if s[i] == s[i-1] then return False else return True\n        end\n \
    \       for i in 3:length(s) do \n            if s[i] == s[i-2] then return False\
    \ else return True\n        end\n        for i in 4:length(s) do \n          \
    \  if s[i] == s[i-3] then return False else return True\n        end\n       \
    \ for i in 5:length(s) do \n            if s[i] == s[i-4] then return False else\
    \ return True\n        end\n        for i in 6:length(s) do \n            if s[i]\
    \ == s[i-5] then return False else return True\n        end\n        for i in\
    \ 7:length(s) do \n            if s[i] == s[i-6] then return False else return\
    \ True\n        end\n        for i in 8:length(s) do \n            if s[i] ==\
    \ s[i-7] then return False else return True\n        end\n        for i in 9:length(s)\
    \ do \n            if s[i] == s[i-8] then return False else return True\n    \
    \    end\n        for i in 10:length(s) do \n            if s[i] == s[i-9] then\
    \ return False else return True\n        end\n        for i in 11:length(s) do\
    \ \n            if s[i] == s[i-10] then return False else return True\n      \
    \  end\n        for i in 12:length(s) do \n            if s[i] == s[i-11] then\
    \ return False else return True\n        end\n        for i in 13:length(s) do\
    \ \n            if s[i] == s[i-12] then return False else return True\n      \
    \  end\n        for i in 14:length(s) do \n            if s[i] == s[i-13] then\
    \ return False else return True\n        end\n        for i in 15:length(s) do\
    \ \n            if s[i] == s[i-14] then return False else return True\n      \
    \  end\n        for i in 16:length(s) do \n            if s[i] == s[i-15] then\
    \ return False else return True\n        end\n        for i in 17:length(s) do\
    \ \n            if s[i] == s[i-16] then return False else return True\n      \
    \  end\n        for i in 18:length(s) do \n            if s[i] == s[i-17] then\
    \ return False else return True\n        end\n        for i in 19:length(s) do\
    \ \n            if s[i] == s[i-18] then return False else return True\n      \
    \  end\n        for i in 20:length(s) do \n            if s[i] == s[i-19] then\
    \ return False else return True\n        end\n        for i in 21:length(s) do\
    \ \n            if s[i] == s[i-20] then return False else return True\n      \
    \  end\n        for i in 22:length(s) do \n            if s[i] == s[i-21] then\
    \ return False else \nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t\
    @test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpml873h_s.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpml873h_s.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true then return true\n  \
    \  if s.length < 3 then return false\n    let mut flag = true\n    for i in 0..length(s)-2\
    \ do\n        if s[i] == s[i+1] then flag = false\n    return flag\nend\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"a\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"aa\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"abcd\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"aabb\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"adb\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"xyy\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a number is even or odd.\n\
    using Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\"\
    ) == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\")\
    \ == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpd3d48bs9.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpd3d48bs9.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0)\n    else \n        false\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa29n4bkq.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpa29n4bkq.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0)\n    else \n        false\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3_12cmd7.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp3_12cmd7.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp3_12cmd7.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == True\n    else if length(s)\
    \ < 3\n    then False\n    else if all(is_distinct(s[1..i-1]) for i in 2:length(s))\n\
    \    then True\n    else False\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"a\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"aa\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"abcd\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"aabb\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"adb\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"xyy\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of vowels in it.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") ==\
    \ false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\") ==\
    \ true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\") ==\
    \ true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjd3d7rtd.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjd3d7rtd.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    \n    if is_empty(s) == true\n        return\
    \ true\n    \n    if is_empty(s) == false\n        return false\n    \n    if\
    \ is_happy(s.tail) == true\n        return true\n    \n    if is_happy(s.tail)\
    \ == false\n        return false\n    \n    if is_happy(s.tail.tail) == true\n\
    \        return true\n    \n    if is_happy(s.tail.tail) == false\n        return\
    \ false\n    \n    if is_happy(s.tail.tail.tail) == true\n        return true\n\
    \    \n    if is_happy(s.tail.tail.tail) == false\n        return false\n    \n\
    \    if is_happy(s.tail.tail.tail.tail) == true\n        return true\n    \n \
    \   if is_happy(s.tail.tail.tail.tail) == false\n        return false\n    \n\
    \    if is_happy(s.tail.tail.tail.tail.tail) == true\n        return true\n  \
    \  \n    if is_happy(s.tail.tail.tail.tail.tail) == false\n        return false\n\
    \    \n    if is_happy(s.tail.tail.tail.tail.tail.tail) == true\n        return\
    \ true\n    \n    if is_happy(s.tail.tail.tail.tail.tail.tail) == false\n    \
    \    return false\n    \n    if is_happy(s.tail.tail.tail.tail.tail.tail.tail)\
    \ == true\n        return true\n    \n    if is_happy(s.tail.tail.tail.tail.tail.tail.tail)\
    \ == false\n        return false\n    \n    if is_happy(s.tail.tail.tail.tail.tail.tail.tail.tail)\
    \ == true\n        return true\n    \n    if is_happy(s.tail.tail.tail.tail.tail.tail.tail.tail)\
    \ == false\n        return false\n    \n    if is_happy(s.tail.tail.tail.tail.tail.tail.tail.tail.tail)\
    \ == true\n        return true\n    \n    if is_happy(s.tail.tail.tail.tail.tail.tail.tail.tail.tail)\
    \ == false\n        return false\n    \n    if is_happy(s.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail)\
    \ == true\n        return true\n    \n    if is_happy(s.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail)\
    \ == false\n        return false\n    \n    if is_happy(s.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail)\
    \ == true\n        return true\n    \n    if is_happy(s.tail.tail.tail.tail.tail.tail.tail.tail\n\
    using Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\"\
    ) == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\")\
    \ == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3qi0an76.jl:84\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3qi0an76.jl:84\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true \n        then true\n\
    \        else false\n    else \n        length(s) >= 3 && all(is_distinct(s[0..-2]),\
    \ is_distinct(s[-2..-1]))\nend\n</cell>\n<code language=julia-1.5>\nis_happy(\"\
    a\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"aa\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"abcd\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"aabb\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"adb\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"xyy\")\n</cell>\n<text>\nExercise 2\nusing Test\n\n@testset begin\n\
    \ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpa38y0w5o.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpa38y0w5o.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == True then return True else\
    \ return False\n    else if length(s) < 3 then return False else if length(s)\
    \ == 3 then return True else return False\n    else if length(s) == 3 then return\
    \ True else return False\n    else if length(s) == 2 then return True else return\
    \ False\n    else if length(s) == 1 then return True else return False\n    else\
    \ if length(s) == 0 then return True else return False\n    else if length(s)\
    \ == 2 then return True else return False\n    else if length(s) == 3 then return\
    \ True else return False\n    else if length(s) == 4 then return True else return\
    \ False\n    else if length(s) == 5 then return True else return False\n    else\
    \ if length(s) == 6 then return True else return False\n    else if length(s)\
    \ == 7 then return True else return False\n    else if length(s) == 8 then return\
    \ True else return False\n    else if length(s) == 9 then return True else return\
    \ False\n    else if length(s) == 10 then return True else return False\n    else\
    \ if length(s) == 11 then return True else return False\n    else if length(s)\
    \ == 12 then return True else return False\n    else if length(s) == 13 then return\
    \ True else return False\n    else if length(s) == 14 then return True else return\
    \ False\n    else if length(s) == 15 then return True else return False\n    else\
    \ if length(s) == 16 then return True else return False\n    else if length(s)\
    \ == 17 then return True else return False\n    else if length(s) == 18 then return\
    \ True else return False\n    else if length(s) == 19 then return True else return\
    \ False\n    else if length(s) == 20 then return True else return False\n    else\
    \ if length(s) == 21 then return True else return False\n    else if length(s)\
    \ == 22 then return True else return False\n    else if length(s) == 23 then return\
    \ True else return False\n    else if length(s) == 24 then return True else return\
    \ False\n    else if length(s) == 25 then return True else return False\n    else\
    \ if length(s) == 26 then return True else return False\n    else if length(s)\
    \ == 27 then return True else return False\n    else if length(s) == 28 then return\
    \ True else return False\n    else if length(s) == 29 then return True else return\
    \ False\n    else if length(s) == 30 then return True else return False\n    else\
    \ if length(s) == 31 then return True else return False\n    else if length(s)\
    \ == 32 then return True else return False\n    else if length(s) == 33 then return\
    \ True else return False\n    else if length(s) == 34 then return True else return\
    \ \nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpo8jj8gwe.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpo8jj8gwe.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true then return true\n  \
    \  else if length(s) < 3 then return false\n    else if length(s) mod 3 != 0 then\
    \ return false\n    else if length(s) == 3 then \n        if count(s, letters(s))\
    \ == 3 then return true\n        else return false\n    else \n        if count(s,\
    \ letters(s)) == 2 then return true\n        else return false\nend\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"a\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"aa\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"abcd\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"aabb\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"adb\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"xyy\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a string is palindrome or\
    \ not.\nA palindrome is a string that reads the same backward as forward.\nFor\
    \ example:\nis_palindrome(\"abba\") => True\nis_palindrome(\"abbaa\") => False\n\
    is_palindrome(\"abba\") => False\nis_palindrome(\"abbaab\") => True\nis_palindrome(\"\
    abbaaba\") => False\nis_palindrome(\"abbaabaa\") => True\nis_palindrome(\"abbaabaaa\"\
    ) => False\nis_palindrome(\"abbaabaaab\") => True\nis_palindrome(\"abbaabaaaba\"\
    ) => False\nis_palindrome(\"abbaabaaabaa\") => True\nis_palindrome(\"abbaabaaabaaa\"\
    ) => False\nis_palindrome(\"abbaabaaabaaab\") => True\nis_palindrome(\"abbaabaaabaaaba\"\
    ) => False\nis_palindrome(\"abbaabaaabaaabaa\") => True\nis_palindrome(\"abbaabaaabaaabaaa\"\
    ) => False\nis_palindrome(\"abbaabaaabaaabaaab\") => True\nis_palindrome(\"abbaabaaabaaabaaaba\"\
    ) => False\nis_palindrome(\"abbaabaaabaaabaaabaa\") => True\nis_palindrome(\"\
    abbaabaaabaa\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpn80xr85m.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpn80xr85m.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0,0)==true\n    then true\n  \
    \  else false\n    end\nend\n</code>\n<|/ a tags=recursion,string,julia |>\n<|\
    \ a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpm2e4hear.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpm2e4hear.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    \n    length(s)>3 && all(is_distinct(s[i..i+3])\
    \ | i in [1..length(s) - 3])\nend\n</cell>\n<code language=julia-1.5>\nis_happy(\"\
    a\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"aa\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"abcd\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"aabb\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"adb\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"xyy\")\n</cell>\n<text>\nExercise 2\nWrite a function that checks if\
    \ a number is even.\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t\
    @test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzz3tub58.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzz3tub58.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true\n        return true\n\
    \    else if length(s) < 3\n        return false\n    else\n        forall i in\
    \ 1..(length(s)-2)\n            if  s[i] != s[i+1] && s[i] != s[i+2]\n       \
    \         return false\n        return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"a\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"aa\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"abcd\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"aabb\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"adb\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"xyy\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of vowels contained in\
    \ the string.\nA vowel is a consonant or a letter in the string that is not a\
    \ vowel.\nFor example:\ncount_vowels(\"a\") => 1\ncount_vowels(\"ab\") => 2\n\
    count_vowels(\"abc\") => 3\ncount_vowels(\"abe\") => 1\ncount_vowels(\"abf\")\
    \ => 0\ncount_vowels(\"abg\") => 1\ncount_vowels(\"abh\") => 0\ncount_vowels(\"\
    abj\") => 1\ncount_vowels(\"abk\") => 1\ncount_vowels(\"abl\") => 2\ncount_vowels(\"\
    abm\") => 1\ncount_vowels(\"abn\") => 1\ncount_vowels(\"abo\") => 1\ncount_vowels(\"\
    abp\") => 1\ncount_vowels(\"abq\") => 1\ncount_vowels(\"abr\") => 1\ncount_vowels(\"\
    abs\") => 1\ncount_vowels(\"abt\") => 1\ncount_vowels(\"abu\") => 1\ncount_vowels(\"\
    abv\") => 1\ncount_vowels(\"abw\") => 1\ncount_vowels(\"abx\") => 1\ncount_vowels(\"\
    aby\") => 1\ncount_vowels(\"abz\") => 1\ncount_vowels(\"ac\") => 1\ncount_vowels(\"\
    aca\") => 1\ncount_vowels(\"acb\") => 1\ncount_vowels(\"acc\") => 1\ncount_vowels(\"\
    acd\") => 1\ncount_vowels(\"ace\") => 1\ncount_vowels(\"acf\") => 1\ncount_vowels(\"\
    acg\") => 1\ncount_vowels(\"ach\") => 1\ncount_vowels(\"ack\") => 1\ncount_vowels(\"\
    acl\") => 1\ncount_vowels(\"acm\") => 1\ncount_vowels(\"acn\") => 1\ncount_vowel\n\
    using Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\"\
    ) == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\")\
    \ == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8waummbm.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8waummbm.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0)\n    else false\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") ==\
    \ false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\") ==\
    \ true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\") ==\
    \ true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk8r4505c.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpk8r4505c.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpk8r4505c.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == True\n    else if length(s)\
    \ < 3\n    else if is_distinct(s[1..3])\n    else if is_distinct(s[2..4])\n  \
    \  else if is_distinct(s[3..5])\n    else if is_distinct(s[4..6])\n    else if\
    \ is_distinct(s[5..7])\n    else if is_distinct(s[6..8])\n    else if is_distinct(s[7..9])\n\
    \    else if is_distinct(s[8..10])\n    else if is_distinct(s[9..11])\n    else\
    \ if is_distinct(s[10..12])\n    else if is_distinct(s[11..13])\n    else if is_distinct(s[12..14])\n\
    \    else if is_distinct(s[13..15])\n    else if is_distinct(s[14..16])\n    else\
    \ if is_distinct(s[15..17])\n    else if is_distinct(s[16..18])\n    else if is_distinct(s[17..19])\n\
    \    else if is_distinct(s[18..20])\n    else if is_distinct(s[19..21])\n    else\
    \ if is_distinct(s[20..22])\n    else if is_distinct(s[21..23])\n    else if is_distinct(s[22..24])\n\
    \    else if is_distinct(s[23..25])\n    else if is_distinct(s[24..26])\n    else\
    \ if is_distinct(s[25..27])\n    else if is_distinct(s[26..28])\n    else if is_distinct(s[27..29])\n\
    \    else if is_distinct(s[28..30])\n    else if is_distinct(s[29..31])\n    else\
    \ if is_distinct(s[30..32])\n    else if is_distinct(s[31..33])\n    else if is_distinct(s[32..34])\n\
    \    else if is_distinct(s[33..35])\n    else if is_distinct(s[34..36])\n    else\
    \ if is_distinct(s[35..37])\n    else if is_distinct(s[36..38])\n    else if is_distinct(s[37..39])\n\
    \    else if is_distinct(s[38..40])\n    else if is_distinct(s[39..41])\n    else\
    \ if is_distinct(s[40..42])\n    else if is_distinct(s[41..43])\n    else if is_distinct(s[42..44])\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpki0bq_dw.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpki0bq_dw.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true then return true\n  \
    \  else if length(s) < 3 then return false\n    else if is_unique(s[1..3]) ==\
    \ true && is_unique(s[2..3]) == true && is_unique(s[3..3]) == true then return\
    \ true\n    else return false\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,julia\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp08k542o2.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp08k542o2.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0)\n    then true\n    else false\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpdufczbjj.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpdufczbjj.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    \n    if is_empty(s) == true\n        return\
    \ true\n    \n    if length(s) < 3\n        return false\n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp98k11q2n.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp98k11q2n.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true\n        return true\n\
    \    else if length(s) < 3\n        return false\n    else\n        forall i in\
    \ 1..(length(s)-2)\n            if  s[i] != s[i+1] && s[i] != s[i+2]\n       \
    \         return false\n        return true\nend\n</code>\n<|/ a tags=string,julia\
    \ |>\n<| a dscore=2 |>\nA simple and fast solution:\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn03vpa3q.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpn03vpa3q.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0)\n    else \n        false\n\
    end\n</cell>\n<code language=julia-1.0>\nis_happy(\"a\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"aa\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"abcd\")\n</cell>\n\
    <code language=julia-1.0>\nis_happy(\"aabb\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"adb\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"xyy\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a number is prime. \nA number\
    \ is prime if its only divisors are 2 and itself.\nA number is prime if its only\
    \ divisors are 2 and itself.\nA number is prime if its only divisors are 2 and\
    \ itself.\nA number is prime if its only divisors are 2 and itself.\nA number\
    \ is prime if its only divisors are 2 and itself.\nA number is prime if its only\
    \ divisors are 2 and itself.\nA number is prime if its only divisors are 2 and\
    \ itself.\nA number is prime if its only divisors are 2 and itself.\nA number\
    \ is prime if its only divisors are 2 and itself.\nA number is prime if its only\
    \ divisors are 2 and itself.\nA number is prime if its only divisors are 2 and\
    \ itself.\nA number is prime if its only divisors are 2 and itself.\nA number\
    \ is prime if its only divisors are 2 and itself.\nA number is prime if its only\
    \ divisors are 2 and itself.\nA number is prime if its only divisors are 2 and\
    \ itself.\nA number is prime if its only divisors are 2 and itself.\nA number\
    \ is prime if its only divisors are 2 and itself.\nA number is prime if its only\
    \ divisors are 2 and itself.\nA number is prime if its only divisors are 2 and\
    \ itself.\nA number is prime if its only divisors are 2 and itself.\nA number\
    \ is prime if its only divisors are 2 and itself.\nA number is prime if its only\
    \ divisors are 2 and itself.\nA number is prime if its only divisors are 2 and\
    \ itself.\nA number is prime if its only divisors are 2 and itself.\nA number\
    \ is prime if its only divisors are 2 and itself.\nA number is prime if its only\
    \ divisors are 2 and itself.\nA number is prime if its only divisors are 2 and\
    \ itself.\nA number is prime if its only divisors are 2 and itself.\nA number\
    \ is prime if its only divisors are 2 and itself.\nA number is prime if its only\
    \ divisors are 2 and itself.\nA number is prime if its only divisors are 2 and\
    \ itself.\nA number is prime if its only divisors are 2 and itself.\nA number\
    \ is prime if its only divisors are 2 and itself.\nA number is prime if its only\
    \ divisors are 2 and itself.\nA number is prime if its only divisors are \nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") ==\
    \ false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\") ==\
    \ true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\") ==\
    \ true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqy8goix4.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqy8goix4.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true\n        return true\n\
    \    else if length(s) >= 3\n        true\n    else\n        false\n    end\n\
    end\n</code>\n<|/ a tags=string,julia |>\n<| a tags=string,julia |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\"\
    ) == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\")\
    \ == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgqv1bw_5.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgqv1bw_5.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0,0) == true then return true\n\
    \    else return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpnmwlotd1.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpnmwlotd1.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) then return true\n    else if\
    \ length(s)==1 then return true\n    else if length(s)==2 then return true\n \
    \   else if length(s)==3 && is_distinct(s[1..2]) && is_distinct(s[2..3]) && is_distinct(s[3..4])\
    \ then return true\n    else return false\nend\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"a\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"aa\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"abcd\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"aabb\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"adb\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"xyy\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"xyyx\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"xyyxyy\")\n\
    </cell>\n<code language=julia-1.5>\nis_happy(\"xyyxyyx\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"xyyxyyxyy\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"xyyxyyxyyx\"\
    )\n</cell>\n<code language=julia-1.5>\nis_happy(\"xyyxyyxyyxyy\")\n</cell>\n<code\
    \ language=julia-1.5>\nis_happy(\"xyyxyyxyyxyyx\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"xyyxyyxyyxyyxyy\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"\
    xyyxyyxyyxyyxyyx\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"xyyxyyxyyxyyxyyxyy\"\
    )\n</cell>\n<code language=julia-1.5>\nis_happy(\"xyyxyyxyyxyyxyyxyyx\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"xyyxyyxyyxyyxyyxyyxyy\")\n</cell>\n<code\
    \ language=julia-1.5>\nis_happy(\"xyyxyyxyyxyyxyyxyyxyyx\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"xyyxyyxyyxyyxyyxyyxyyxyy\")\n</cell\nusing Test\n\n@testset begin\n\
    \ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpun772u32.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpun772u32.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true\n        return true\n\
    \    else if length(s) == 3\n        return is_distinct(s[1..2])\n    else if\
    \ length(s) >= 3\n        return is_distinct(s[1..3])\n    end\n    return false\n\
    end\n</cell>\n<code language=julia-1.5>\nis_happy(\"a\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"aa\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"abcd\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"aabb\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"adb\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"xyy\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of characters in the string.\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz89bhqnk.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpz89bhqnk.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0)\n    then true\n    else false\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\nis_happy(\"a\")\n</cell>\n\
    <code language=julia-1.4>\nis_happy(\"aa\")\n</cell>\n<code language=julia-1.4>\n\
    is_happy(\"abcd\")\n</cell>\n<code language=julia-1.4>\nis_happy(\"aabb\")\n</cell>\n\
    <code language=julia-1.4>\nis_happy(\"adb\")\n</cell>\n<code language=julia-1.4>\n\
    is_happy(\"xyy\")\n</cell>\n<text>\nExercise 3\nWrite a function that checks if\
    \ a string is palindrome or not.\nA palindrome is a string that reads the same\
    \ backward as forward.\nFor example:\nis_palindrome(\"abba\") => True\nis_palindrome(\"\
    abbaa\") => False\nis_palindrome(\"abba\") => False\nis_palindrome(\"abbaab\"\
    ) => True\nis_palindrome(\"abbaaba\") => False\nis_palindrome(\"abbaabaa\") =>\
    \ True\nis_palindrome(\"abbaabaaa\") => False\nis_palindrome(\"abbaabaaab\") =>\
    \ True\nis_palindrome(\"abbaabaaaba\") => False\nis_palindrome(\"abbaabaaabaa\"\
    ) => True\nis_palindrome(\"abbaabaaabaaa\") => False\nis_palindrome(\"abbaabaaabaaab\"\
    ) => True\nis_palindrome(\"abbaabaaabaaaba\") => False\nis_palindrome(\"abbaabaaabaaabaa\"\
    ) => True\nis_palindrome(\"abbaabaaabaaabaaa\") => False\nis_palindrome(\"abbaabaaabaaabaaab\"\
    ) => True\nis_palindrome(\"abbaabaaabaaabaaaba\") => False\nis_palindrome(\"abbaabaaabaaabaaabaa\"\
    ) => True\nis_palindrome(\"abbaabaaabaaabaaabaa\") => False\nis_palindrome(\"\
    abbaabaaabaaabaaabaaa\") => True\nis_palindrome(\"abbaabaaabaaabaaabaaab\") =>\
    \ False\nis_palindrome(\"abba\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp01o5v1d8.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp01o5v1d8.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true then return true\n  \
    \  else if length(s) < 3 then return false\n    else if is_unique(s[1..3]) ==\
    \ false then return false\n    else if is_unique(s[2..4]) == false then return\
    \ false\n    else if is_unique(s[3..5]) == false then return false\n    else if\
    \ is_unique(s[6..7]) == false then return false\n    else if is_unique(s[8..9])\
    \ == false then return false\n    else if is_unique(s[10..11]) == false then return\
    \ false\n    else if is_unique(s[12..13]) == false then return false\n    else\
    \ if is_unique(s[14..15]) == false then return false\n    else if is_unique(s[16..17])\
    \ == false then return false\n    else if is_unique(s[18..19]) == false then return\
    \ false\n    else if is_unique(s[20..21]) == false then return false\n    else\
    \ if is_unique(s[22..23]) == false then return false\n    else if is_unique(s[24..25])\
    \ == false then return false\n    else if is_unique(s[26..27]) == false then return\
    \ false\n    else if is_unique(s[28..29]) == false then return false\n    else\
    \ if is_unique(s[30..31]) == false then return false\n    else if is_unique(s[32..33])\
    \ == false then return false\n    else if is_unique(s[34..35]) == false then return\
    \ false\n    else if is_unique(s[36..37]) == false then return false\n    else\
    \ if is_unique(s[38..39]) == false then return false\n    else if is_unique(s[40..41])\
    \ == false then return false\n    else if is_unique(s[42..43]) == false then return\
    \ false\n    else if is_unique(s[44..45]) == false then return false\n    else\
    \ if is_unique(s[46..47]) == false then return false\n    else if is_unique(s[48..49])\
    \ == false then return false\n    else if is_unique(s[50..51]) == false then return\
    \ false\n    else if is_unique(s[52..53]) == false then return false\n    else\
    \ if is_unique(s[54..55]) == false then return false\n    else if is_unique(s[56..57])\
    \ == false then return false\n    else if is_unique(s[58..59]) == false then return\
    \ false\n    else if is_unique(s[60..61]) == false then return false\n    else\
    \ if is_\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpvxuemfnf.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpvxuemfnf.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0,0) == True \n    then return\
    \ True \n    else return False \nend \n</cell>\n<code language=julia-1.3>\nis_happy(\"\
    a\")\n</cell>\n<code language=julia-1.3>\nis_happy(\"aa\")\n</cell>\n<code language=julia-1.3>\n\
    is_happy(\"abcd\")\n</cell>\n<code language=julia-1.3>\nis_happy(\"aabb\")\n</cell>\n\
    <code language=julia-1.3>\nis_happy(\"adb\")\n</cell>\n<code language=julia-1.3>\n\
    is_happy(\"xyy\")\n</cell>\n<text>\nExercise 2\nWrite a function that checks if\
    \ a number is prime. \nA prime number is a natural number greater than 1 that\
    \ has no positive divisors other than 1 and itself.\nFor example:\nis_prime(5)\
    \ => True\nis_prime(7) => False\nis_prime(11) => True\nis_prime(12) => False\n\
    is_prime(13) => False\nis_prime(14) => False\nis_prime(15) => False\nis_prime(16)\
    \ => True\nis_prime(17) => False\nis_prime(18) => False\nis_prime(19) => False\n\
    is_prime(20) => True\nis_prime(21) => False\nis_prime(22) => False\nis_prime(23)\
    \ => False\nis_prime(24) => False\nis_prime(25) => False\nis_prime(26) => False\n\
    is_prime(27) => False\nis_prime(28) => False\nis_prime(29) => False\nis_prime(30)\
    \ => False\nis_prime(31) => False\nis_prime(32) => False\nis_prime(33) => False\n\
    is_prime(34) => False\nis_prime(35) => False\nis_prime(36) => False\nis_prime(37)\
    \ => False\nis_prime(38) => False\nis_prime(39) => False\nis_prime(40) => False\n\
    is_prime(41) => False\nis_prime(42) => False\nis_prime(43) => False\nis_prime(44)\
    \ => False\nis_prime(45) => False\nis_prime(46) => False\nis_prime(47) => False\n\
    is_prime(48) => False\nis_prime(49) => False\nis_prime(50) => False\nis_prime(51)\
    \ => False\nis_prime(52) => False\nis_prime(53) => False\nis_prime(54) => False\n\
    is_prime(55) => False\nis_prime(56) => False\nis_prime(57) => False\nis_prime(58)\
    \ => False\nis_prime(59\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpy1xrt7_6.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpy1xrt7_6.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0)\n    else \n        false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9t_poai5.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"a\") == false\n  MethodError: no method matching is_happy(::String,\
    \ ::Int64)\n  Closest candidates are:\n    is_happy(::String) at /tmp/tmp9t_poai5.jl:13\n\
    \  Stacktrace:\n   [1] is_happy(::String) at /tmp/tmp9t_poai5.jl:13\n   [2] top-level\
    \ scope at /tmp/tmp9t_poai5.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9t_poai5.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmp9t_poai5.jl:24\n  Test threw exception\n  Expression: candidate(\"\
    aa\") == false\n  MethodError: no method matching is_happy(::String, ::Int64)\n\
    \  Closest candidates are:\n    is_happy(::String) at /tmp/tmp9t_poai5.jl:13\n\
    \  Stacktrace:\n   [1] is_happy(::String) at /tmp/tmp9t_poai5.jl:13\n   [2] top-level\
    \ scope at /tmp/tmp9t_poai5.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9t_poai5.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmp9t_poai5.jl:25\n  Test threw exception\n  Expression: candidate(\"\
    abcd\") == true\n  MethodError: no method matching is_happy(::String, ::Int64)\n\
    \  Closest candidates are:\n    is_happy(::String) at /tmp/tmp9t_poai5.jl:13\n\
    \  Stacktrace:\n   [1] is_happy(::String) at /tmp/tmp9t_poai5.jl:13\n   [2] top-level\
    \ scope at /tmp/tmp9t_poai5.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9t_poai5.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmp9t_poai5.jl:26\n  Test threw exception\n  Expression: candidate(\"\
    aabb\") == false\n  MethodError: no method matching is_happy(::String, ::Int64)\n\
    \  Closest candidates are:\n    is_happy(::String) at /tmp/tmp9t_poai5.jl:13\n\
    \  Stacktrace:\n   [1] is_happy(::String) at /tmp/tmp9t_poai5.jl:13\n   [2] top-level\
    \ scope at /tmp/tmp9t_poai5.jl:26\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9t_poai5.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmp9t_poai5.jl:27\n  Test threw exception\n  Expression: candidate(\"\
    adb\") == true\n  MethodError: no method matching is_happy(::String, ::Int64)\n\
    \  Closest candidates are:\n    is_happy(::String) at /tmp/tmp9t_poai5.jl:13\n\
    \  Stacktrace:\n   [1] is_happy(::String) at /tmp/tmp9t_poai5.jl:13\n   [2] top-level\
    \ scope at /tmp/tmp9t_poai5.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9t_poai5.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmp9t_poai5.jl:28\n  Test threw exception\n  Expression: candidate(\"\
    xyy\") == false\n  MethodError: no method matching is_happy(::String, ::Int64)\n\
    \  Closest candidates are:\n    is_happy(::String) at /tmp/tmp9t_poai5.jl:13\n\
    \  Stacktrace:\n   [1] is_happy(::String) at /tmp/tmp9t_poai5.jl:13\n   [2] top-level\
    \ scope at /tmp/tmp9t_poai5.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9t_poai5.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmp9t_poai5.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    iopaxpoi\") == true\n  MethodError: no method matching is_happy(::String, ::Int64)\n\
    \  Closest candidates are:\n    is_happy(::String) at /tmp/tmp9t_poai5.jl:13\n\
    \  Stacktrace:\n   [1] is_happy(::String) at /tmp/tmp9t_poai5.jl:13\n   [2] top-level\
    \ scope at /tmp/tmp9t_poai5.jl:29\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9t_poai5.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmp9t_poai5.jl:30\n  Test threw exception\n  Expression: candidate(\"\
    iopaxioi\") == false\n  MethodError: no method matching is_happy(::String, ::Int64)\n\
    \  Closest candidates are:\n    is_happy(::String) at /tmp/tmp9t_poai5.jl:13\n\
    \  Stacktrace:\n   [1] is_happy(::String) at /tmp/tmp9t_poai5.jl:13\n   [2] top-level\
    \ scope at /tmp/tmp9t_poai5.jl:30\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9t_poai5.jl:22\n  \nTest Summary: | Error \
    \ Total\ntest set      |     8      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9t_poai5.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true\n        return true\n\
    \    else if length(s) < 3\n        return false\n    else if length(s) == 3\n\
    \        return is_distinct(s[1..2])\n    else if length(s) == 2\n        return\
    \ is_distinct(s[1])\n    else if length(s) == 1\n        return is_distinct(s[0])\n\
    \    else\n        return is_happy(s[1..])\nend\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"a\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"aa\")\n</cell>\n\
    <code language=julia-1.0>\nis_happy(\"abcd\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"aabb\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"adb\")\n</cell>\n\
    <code language=julia-1.0>\nis_happy(\"xyy\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"xyyx\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"xyyxyy\")\n\
    </cell>\n<code language=julia-1.0>\nis_happy(\"xyyxyyx\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"xyyxyyxyy\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"xyyxyyxyyx\"\
    )\n</cell>\n<code language=julia-1.0>\nis_happy(\"xyyxyyxyyxyy\")\n</cell>\n<code\
    \ language=julia-1.0>\nis_happy(\"xyyxyyxyyxyyx\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"xyyxyyxyyxyyxyy\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"\
    xyyxyyxyyxyyxyyx\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"xyyxyyxyyxyyxyyxyy\"\
    )\n</cell>\n<code language=julia-1.0>\nis_happy(\"xyyxyyxyyxyyxyyxyyx\")\n</cell>\n\
    <code language=julia-1.0>\nis_happy(\"xyyxyyxyyxyyxyyxyyxyy\")\n</cell>\n<code\
    \ language=julia-1.0>\nis_happy(\"xyyxyyxyyxyyxyyxyyxyyx\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"xyyxyyxyyxyyxyyxyyxyyxyy\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpeuah4xmy.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpeuah4xmy.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0)\n        true\n    else\n \
    \       false\nend\n</cell>\n<code language=julia-1.3>\nis_happy(\"a\")\n</cell>\n\
    <code language=julia-1.3>\nis_happy(\"aa\")\n</cell>\n<code language=julia-1.3>\n\
    is_happy(\"abcd\")\n</cell>\n<code language=julia-1.3>\nis_happy(\"aabb\")\n</cell>\n\
    <code language=julia-1.3>\nis_happy(\"adb\")\n</cell>\n<code language=julia-1.3>\n\
    is_happy(\"xyy\")\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ and returns the number of vowels contained in the string.\nThe vowels are \"\
    a\", \"e\", \"i\", \"o\", \"u\"\nThe function should return -1 if the string does\
    \ not contain any vowels.\nThe function should return 0 if the string contains\
    \ only lowercase letters.\nThe function should return 1 if the string contains\
    \ only uppercase letters.\nThe function should return 2 if the string contains\
    \ both lowercase and uppercase letters.\nThe function should return 3 if the string\
    \ contains both lowercase and uppercase letters.\nThe function should return 4\
    \ if the string contains both lowercase and uppercase letters.\nThe function should\
    \ return 5 if the string contains both lowercase and uppercase letters.\nThe function\
    \ should return 6 if the string contains both lowercase and uppercase letters.\n\
    The function should return 7 if the string contains both lowercase and uppercase\
    \ letters.\nThe function should return 8 if the string contains both lowercase\
    \ and uppercase letters.\nThe function should return 9 if the string contains\
    \ both lowercase and uppercase letters.\nThe function should return 10 if the\
    \ string contains both lowercase and uppercase letters.\nThe function should return\
    \ 11 if the string contains both lowercase and uppercase letters.\nThe function\
    \ should return 12 if the string contains both lowercase and uppercase letters.\n\
    The function should return 13 if the string contains both lowercase and uppercase\
    \ letters.\nThe function should return 14 if the string contains both lowercase\
    \ and uppercase letters.\nThe function should return 15 if the string contains\
    \ both lowercase and uppercase letters.\nThe function should return 16 if the\
    \ string contains both lowercase and uppercase letters.\nThe function should return\
    \ 17 if the string contains both lowercase and uppercase letters.\nThe function\
    \ should return 18 if the string contains both lowercase and uppercase letters.\n\
    The function should return 19 if the string contains both lowercase and uppercase\
    \ letters.\nThe function should return 20 if the string contains both lowercase\
    \ and uppercase letters.\n\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph4db0alg.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmph4db0alg.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true\n        return true\n\
    \    else if length(s) < 3\n        return false\n    else if is_unique(s[1..3])\
    \ == true\n        return is_happy(s[2..length(s)])\n    else\n        return\
    \ is_happy(s[2..length(s)])\nend\n</cell>\n<code language=julia-1.3>\nis_happy(\"\
    a\")\n</cell>\n<code language=julia-1.3>\nis_happy(\"aa\")\n</cell>\n<code language=julia-1.3>\n\
    is_happy(\"abcd\")\n</cell>\n<code language=julia-1.3>\nis_happy(\"aabb\")\n</cell>\n\
    <code language=julia-1.3>\nis_happy(\"adb\")\n</cell>\n<code language=julia-1.3>\n\
    is_happy(\"xyy\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of vowels in it.\nusing Test\n\n@testset begin\n\
    \ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7_qzkdmf.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7_qzkdmf.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true \n    then return true\n\
    \    else \n        if is_happy(tail(s))\n        then return true\n        else\
    \ return false\n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\"\
    ) == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\")\
    \ == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp9emt9aew.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp9emt9aew.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true\n        return true\n\
    \    else if length(s) < 3\n        return false\n    else\n        local i =\
    \ 1\n        local j = 1\n        local k = 1\n        while i <= length(s) do\n\
    \            if s[i] != s[j] then\n                k = k + 1\n            else\n\
    \                j = j + 1\n            end\n            i = i + 1\n        end\n\
    \        return k == 3\n    end\nend\n</code>\n<|/ a tags=string,julia,arrays\
    \ |>\n<| c |>\nThis code does not work if you try it on `is_happy(\"aba\")`. You\
    \ will get `ERROR: LoadError: UndefVarError: is_happy not defined`.\n<|/ c |>\n\
    <| c |>\nThanks for pointing that out. I've fixed the code now.\n<|/ c |>\n<|\
    \ a dscore=1 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnnqf2sbw.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnnqf2sbw.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    \n    if is_empty(s) == true\n        return\
    \ true\n    \n    if length(s) < 3\n        return false\n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfhjmx8qs.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfhjmx8qs.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == True \n    then return True\
    \ \n    else \n        if is_happy(tail(s))\n        then return True \n     \
    \   else return False \nend\n</cell>\n<code language=julia-1.5>\nis_happy(\"a\"\
    )\n</cell>\n<code language=julia-1.5>\nis_happy(\"aa\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"abcd\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"aabb\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"adb\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"xyy\")\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ and returns the number of vowels contained in the string.\nThe vowels are \"\
    a\", \"e\", \"i\", \"o\", and \"u\".\nThe function should return -1 if the string\
    \ does not contain any vowels.\nThe function should return 0 if the string contains\
    \ only lowercase letters.\nThe function should return 1 if the string contains\
    \ only uppercase letters.\nThe function should return 2 if the string contains\
    \ both lowercase and uppercase letters.\nThe function should return 3 if the string\
    \ contains only letters other than \"a\", \"e\", \"i\", \"o\", and \"u\".\nThe\
    \ function should return 4 if the string contains only letters other than \"a\"\
    , \"e\", \"i\", \"o\", and \"u\".\nThe function should return 5 if the string\
    \ contains only letters other than \"a\", \"e\", \"i\", \"o\", and \"u\".\nThe\
    \ function should return 6 if the string contains only letters other than \"a\"\
    , \"e\", \"i\", \"o\", and \"u\".\nThe function should return 7 if the string\
    \ contains only letters other than \"a\", \"e\", \"i\", \"o\", and \"u\".\nThe\
    \ function should return 8 if the string contains only letters other than \"a\"\
    , \"e\", \"i\", \"o\", and \"u\".\nThe function should return 9 if the string\
    \ contains only letters other than \"a\", \"e\", \"i\", \"o\", and \"u\".\nThe\
    \ function should return 10 if the string contains only letters other than \"\
    a\", \"e\", \"i\", \"o\", and \"u\".\nThe function should return 11 if the string\
    \ contains only letters other than \"a\", \"e\", \"i\", \"o\", and \"u\".\nThe\
    \ function should return 12 if the string contains only letters other than \"\
    a\", \"e\", \"i\", \"o\", and \"u\".\nThe function should return 13 if the string\
    \ contains only letters other than \"a\", \"e\", \"i\", \"o\", and \"u\".\nThe\
    \ function should return 14 if the string contains only letters other than \"\
    a\", \"e\", \"i\", \"o\", and \"u\".\nThe \nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpj2hjgsgi.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpj2hjgsgi.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0)\n    then return true\n   \
    \ else return false\n    end\nend\n</cell>\n<code language=julia-1.4>\nis_happy(\"\
    a\")\n</cell>\n<code language=julia-1.4>\nis_happy(\"aa\")\n</cell>\n<code language=julia-1.4>\n\
    is_happy(\"abcd\")\n</cell>\n<code language=julia-1.4>\nis_happy(\"aabb\")\n</cell>\n\
    <code language=julia-1.4>\nis_happy(\"adb\")\n</cell>\n<code language=julia-1.4>\n\
    is_happy(\"xyy\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of vowels contained in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\
    \t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t\
    @test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"\
    xyy\") == false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"\
    iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpsmaxko5r.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpsmaxko5r.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0)\n    else return true\nend\n\
    \"\"\"\n    \n\"\"\"\n    \n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph4bm_q8x.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmph4bm_q8x.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    \n    if is_empty(s) == true\n        return\
    \ true\n    \n    \n    if is_happy(s.substring(0,3)) == true\n        return\
    \ true\n    \n    if is_happy(s.substring(0,4)) == true\n        return true\n\
    \    \n    if is_happy(s.substring(0,5)) == true\n        return true\n    \n\
    \    if is_happy(s.substring(0,6)) == true\n        return true\n    \n    if\
    \ is_happy(s.substring(0,7)) == true\n        return true\n    \n    if is_happy(s.substring(0,8))\
    \ == true\n        return true\n    \n    if is_happy(s.substring(0,9)) == true\n\
    \        return true\n    \n    if is_happy(s.substring(0,10)) == true\n     \
    \   return true\n    \n    if is_happy(s.substring(0,11)) == true\n        return\
    \ true\n    \n    if is_happy(s.substring(0,12)) == true\n        return true\n\
    \    \n    if is_happy(s.substring(0,13)) == true\n        return true\n    \n\
    \    if is_happy(s.substring(0,14)) == true\n        return true\n    \n    if\
    \ is_happy(s.substring(0,15)) == true\n        return true\n    \n    if is_happy(s.substring(0,16))\
    \ == true\n        return true\n    \n    if is_happy(s.substring(0,17)) == true\n\
    \        return true\n    \n    if is_happy(s.substring(0,18)) == true\n     \
    \   return true\n    \n    if is_happy(s.substring(0,19)) == true\n        return\
    \ true\n    \n    if is_happy(s.substring(0,20)) == true\n        return true\n\
    \    \n    if is_happy(s.substring(0,21)) == true\n        return true\n    \n\
    \    if is_happy(s.substring(0,22)) == true\n        return true\n    \n    if\
    \ is_happy(s.substring(0,23)) == true\n        return true\n    \n    if is_happy(s.substring(0,24))\
    \ == true\n        return true\n    \n    if is_happy(s.substring(0,25)) == true\n\
    \        return true\n    \n    if is_happy(s.substring(0,26)) == true\n     \
    \   return true\n    \n    if is_happy(s.substring(0,27)) == true\n        return\
    \ true\n    \n    if is_happy(s.substring(0,28)) == true\n        return true\n\
    \    \n    if is_happy(s.substring(0,29)) == true\n        return true\n    \n\
    \    if is_happy(s.substring(0,30)) == true\n        return true\n    \n    if\
    \ is_happy(s.substring(0,31)) == true\n        return true\n    \n    if is_happy(s.substring(0,32))\
    \ == true\n        return true\n    \n    if is_happy(s.substring(0,33)) == true\n\
    \        return true\n    \n    if is_happy(s.substring(0,34)) == true\n     \
    \   return true\n    \n    if is_happy(s.substring(0,35)) == \nusing Test\n\n\
    @testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t\
    @test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"\
    aabb\") == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\"\
    ) == false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplyl_s2h8.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplyl_s2h8.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true\n        return true\n\
    \    else if length(s) < 3\n        return false\n    else\n        true\n   \
    \ end\nend\n</code>\n<|/ a tags=string,julia |>\n<| a tags=string,julia |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\"\
    ) == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\")\
    \ == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpedn1fgw8.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpedn1fgw8.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0)==True then return True else\
    \ return False\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t\
    @test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpzo2og1m8.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpzo2og1m8.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0)\n    then true\n    else false\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\n@assert is_happy(\"a\") ==\
    \ false\n@assert is_happy(\"aa\") == false\n@assert is_happy(\"abcd\") == true\n\
    @assert is_happy(\"aabb\") == false\n@assert is_happy(\"adb\") == true\n@assert\
    \ is_happy(\"xyy\") == false\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a number is prime. \nA prime number is a natural number greater than\
    \ 1 that has no positive divisors other than 1 and itself.\nFor example 5 is a\
    \ prime number, because no positive divisors other than 1 and 5 are present.\n\
    For example 6 is not a prime number, because 2 has only 1 positive divisor other\
    \ than itself.\nFor example 7 is a prime number, because no positive divisors\
    \ other than 1 and 7 are present.\nFor example 8 is not a prime number, because\
    \ 3 has only 1 positive divisor other than itself.\nFor example 9 is not a prime\
    \ number, because 5 has only 1 positive divisor other than itself.\nFor example\
    \ 10 is not a prime number, because 7 has only 1 positive divisor other than itself.\n\
    For example 11 is a prime number, because no positive divisors other than 1 and\
    \ 7 are present.\nFor example 12 is not a prime number, because 2 has only 1 positive\
    \ divisor other than itself.\nFor example 13 is not a prime number, because 3\
    \ has only 1 positive divisor other than itself.\nFor example 14 is not a prime\
    \ number, because 5 has only 1 positive divisor other than itself.\nFor example\
    \ 15 is a prime number, because no positive divisors other than 1 and 15 are present.\n\
    For example 16 is not a prime number, because 2 has only 1 positive divisor other\
    \ than itself.\nFor example 17 is not a prime number, because 3 has only 1 positive\
    \ divisor other than itself.\nFor example 18 is not a prime number, because 5\
    \ has only 1 positive divisor other than itself.\nFor example 19 is not a prime\
    \ number, because 7 has only 1 positive divisor other than itself.\nFor example\
    \ 20 is a prime number, because no positive divisors other than 1 and 20 are present.\n\
    For example 21 is a prime number, because no positive divisors other than 1 and\
    \ 21 are present.\nFor example 22 is not a prime number, because 2 has only 1\
    \ positive divisor other than itself.\nFor example 23 is not a prime number, because\
    \ 3 has only 1 positive divisor other than itself.\nFor example 24 is not a prime\
    \ number, because 5 has only 1 positive divisor other than itself.\nFor example\
    \ 25 is a prime number, because no positive divisors other than 1 and 25 are present.\n\
    For example 26 is not a prime number, because 2 has only 1 positive divisor other\
    \ than itself.\nFor \nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t\
    @test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpyqvjctzm.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpyqvjctzm.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0)==true then return true\n  \
    \  else return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpvmxq_j20.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpvmxq_j20.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true then return true\n  \
    \  else if length(s) < 3 then return false\n    else if length(s) == 3 then \n\
    \        let  a = substring(s, 1, 2)\n        let  b = substring(s, 3, 3)\n  \
    \      let  c = substring(s, 5, 5)\n        let  d = substring(s, 7, 7)\n    \
    \    let  e = substring(s, 9, 9)\n        let  f = substring(s, 11, 11)\n    \
    \    let  g = substring(s, 13, 13)\n        let  h = substring(s, 15, 15)\n  \
    \      let  i = substring(s, 17, 17)\n        let  j = substring(s, 19, 19)\n\
    \        let  k = substring(s, 21, 21)\n        let  l = substring(s, 23, 23)\n\
    \        let  m = substring(s, 25, 25)\n        let  n = substring(s, 27, 27)\n\
    \        let  o = substring(s, 29, 29)\n        let  p = substring(s, 31, 31)\n\
    \        let  q = substring(s, 33, 33)\n        let  r = substring(s, 35, 35)\n\
    \        let  s = substring(s, 37, 37)\n        let  t = substring(s, 39, 39)\n\
    \        let  u = substring(s, 41, 41)\n        let  v = substring(s, 43, 43)\n\
    \        let  w = substring(s, 45, 45)\n        let  x = substring(s, 47, 47)\n\
    \        let  y = substring(s, 49, 49)\n        let  z = substring(s, 51, 51)\n\
    \        let  A = substring(s, 53, 53)\n        let  B = substring(s, 55, 55)\n\
    \        let  C = substring(s, 57, 57)\n        let  D = substring(s, 59, 59)\n\
    \        let  E = substring(s, 61, 61)\n        let  F = substring(s, 63, 63)\n\
    \        let  G = substring(s, 65, 65)\n        let  H = substring(s, 67, 67)\n\
    \        let  I = substring(s, 69, 69)\n        let  J = substring(s, 71, 71)\n\
    \        let  K = substring(s, 73, 73)\n        let  L = substring(s, 75, 75)\n\
    \        let  M = substring(s, 77, 77)\n        let  N = substring(s, 79, 79)\n\
    \        let  O = substring(s, 81, 81)\n        let  P = substring(s, 83, 83)\n\
    \        let  Q = substring(s, 85, 85)\n        let  R = substring(s, 87, 87)\n\
    \        let  S = substring(s, 89, 89)\n        let  T = substring(s, 91, 91)\n\
    \        let  U = substring(s, 93, 93)\n        let  V = substring(s, 9\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") ==\
    \ false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\") ==\
    \ true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\") ==\
    \ true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpm4cea_t3.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpm4cea_t3.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppim8_06n.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmppim8_06n.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmppim8_06n.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true \n    then return true\n\
    \    else \n        if is_happy(tail(s))\n        then return true\n        else\
    \ return false\n    end\nend\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") ==\
    \ false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\") ==\
    \ true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\") ==\
    \ true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpopxtmdop.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpopxtmdop.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) then return True\n    else if\
    \ length(s) < 3 then return False\n    else if is_distinct(s[1..3]) == False then\
    \ return False\n    else if is_distinct(s[2..4]) == False then return False\n\
    \    else if is_distinct(s[3..5]) == False then return False\n    else if is_distinct(s[4..6])\
    \ == False then return False\n    else if is_distinct(s[5..7]) == False then return\
    \ False\n    else if is_distinct(s[6..8]) == False then return False\n    else\
    \ if is_distinct(s[7..9]) == False then return False\n    else if is_distinct(s[8..10])\
    \ == False then return False\n    else if is_distinct(s[9..11]) == False then\
    \ return False\n    else if is_distinct(s[10..12]) == False then return False\n\
    \    else if is_distinct(s[11..13]) == False then return False\n    else if is_distinct(s[12..14])\
    \ == False then return False\n    else if is_distinct(s[13..15]) == False then\
    \ return False\n    else if is_distinct(s[14..16]) == False then return False\n\
    \    else if is_distinct(s[15..17]) == False then return False\n    else if is_distinct(s[16..18])\
    \ == False then return False\n    else if is_distinct(s[17..19]) == False then\
    \ return False\n    else if is_distinct(s[18..20]) == False then return False\n\
    \    else if is_distinct(s[19..21]) == False then return False\n    else if is_distinct(s[20..22])\
    \ == False then return False\n    else if is_distinct(s[21..23]) == False then\
    \ return False\n    else if is_distinct(s[22..24]) == False then return False\n\
    \    else if is_distinct(s[23..25]) == False then return False\n    else if is_distinct(s[24..26])\
    \ == False then return False\n    else if is_distinct(s[25..27]) == False then\
    \ return False\n    else if is_distinct(s[26..28]) == False then return False\n\
    \    else if is_distinct(s[27..29]) == False then return False\n    else if is_distinct(s[28..30])\
    \ == False then return False\n    else if is_distinct(s[29..31]) == False then\
    \ return False\n    else if is_distinct(s[30..32]\nusing Test\n\n@testset begin\n\
    \ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp2tpp9jhc.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp2tpp9jhc.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true \n        return true\n\
    \    else \n        \n        \n        \n        \n        \n        \n     \
    \   \n        \n        \n        \n        \n        \n        \n        \n \
    \       \n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \nusing Test\n\
    \n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\
    \t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t\
    @test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"\
    xyy\") == false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"\
    iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpn8jsjvno.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpn8jsjvno.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpn8jsjvno.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    \n    \n    if is_happy(s,0,1) == True\n   \
    \ \n    else \n        \n        if is_happy(s,0,2) == True\n        \n      \
    \  else \n            \n            if is_happy(s,0,3) == True\n            \n\
    \            else \n                \n                if is_happy(s,0,4) == True\n\
    \                \n                else \n                    \n             \
    \       if is_happy(s,0,5) == True\n                    \n                   \
    \ else \n                        \n                        if is_happy(s,0,6)\
    \ == True\n                        \n                        else \n         \
    \                   \n                            if is_happy(s,0,7) == True\n\
    \                            \n                            else \n           \
    \                     \n                                if is_happy(s,0,8) ==\
    \ True\n                                \n                                else\
    \ \n                                    \n                                   \
    \ if is_happy(s,0,9) == True\n                                    \n         \
    \                           else \n                                        \n\
    \                                        if is_happy(s,0,10) == True\n       \
    \                                 \n                                        else\
    \ \n                                            \n                           \
    \                 if is_happy(s,0,11) == True\n                              \
    \              \n                                            else \n         \
    \                                       \n                                   \
    \             if is_happy(s,0,12) == True\n                                  \
    \              \n                                                else \n     \
    \                                               \n                           \
    \                         if is_happy(s,0,13) == True\n                      \
    \                              \n                                            \
    \        else \n                                                        \n   \
    \                                                     if is_happy(s,0,14) == True\n\
    \                                                        \n                  \
    \                                      else \n                               \
    \                             \n                                             \
    \               if is_happy(s,0,15) == True\n                                \
    \                            \n                                              \
    \              else \n                                                       \
    \         \n                                                                if\
    \ is_happy(s,0,16) == True\n                                                 \
    \               \n                                                           \
    \     else \n                                                                \
    \    \n                                                                    if\
    \ is_happy(s,0,17) == True\n                                                 \
    \                   \n                                                       \
    \             else \n                                                        \
    \                \n                                                          \
    \              if is_happy(s,0,18) == True\n                                 \
    \                                       \n                                   \
    \                                     else \n                                \
    \                                            if is_happy(s,0,19) == True\n   \
    \                                                                         \n \
    \                                                                           else\
    \ \n                                                                         \
    \       if is_happy(s,0,20) == True\n                                        \
    \                                        \n                                  \
    \                                              else \n                       \
    \                                                             if is_happy(s,0,21)\
    \ == True\n                                                                  \
    \                  \n                                                        \
    \                            else \n                                         \
    \                                               if is_happy(s,0,22) == True\n\
    \                                                                            \
    \            \n                                                              \
    \                          else \n                                           \
    \                                                 if is_happy(s,0,23) == True\n\
    \                                                                            \
    \                \n                                                          \
    \                                  else \n                                   \
    \                                                             if is_happy(s,0,24)\
    \ == True\n                                                                  \
    \                              \n                                            \
    \                                                    else \n                 \
    \                                                                            \
    \       if is_happy(s,0,25) == True\n                                        \
    \                                                            \n              \
    \                                                                            \
    \          else \n                                                           \
    \                                             if is_happy(s,0,26) == True\n  \
    \                                                                            \
    \                          \n                                                \
    \                                                        else \n             \
    \                                                                            \
    \                   if is_happy(s,0,27) == True\n                            \
    \                                                                            \
    \    \n                                                                      \
    \                                      else \n                               \
    \                                                                            \
    \     if is_happy(s,0,28) == True\n                                          \
    \                                                                      \n    \
    \                                                                            \
    \                                else \n                                     \
    \                                                                            \
    \   if is_happy(s,0,29) == True\n                                            \
    \                                                                        \n  \
    \                                                              \nusing Test\n\n\
    @testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t\
    @test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"\
    aabb\") == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\"\
    ) == false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyxypgqsj.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyxypgqsj.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgttvg3u8.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpgttvg3u8.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpgttvg3u8.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0)\n    then return true\n   \
    \ else return false\n    end\nend\n\"\"\"\n    \n\"\"\"\n    \n    \n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\nusing Test\n\n@testset begin\n\
    \ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp5m16hnk1.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp5m16hnk1.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true\n        return true\n\
    \    else if length(s) == 3\n        return is_distinct(s[1..2]) == true && is_distinct(s[2..3])\
    \ == true\n    else\n        return false\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp28v1s8qv.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp28v1s8qv.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    \n    if is_empty(s) == true\n        return\
    \ true\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplxiqxu7a.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplxiqxu7a.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0)\n        true\n    else\n \
    \       false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t\
    @test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmvpwq0_s.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpmvpwq0_s.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpmvpwq0_s.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true\n        return true\n\
    \    else if length(s) < 3\n        return false\n    else\n        \n       \
    \ for i in (1:length(s))\n            if s[i] == s[i+1] && s[i] == s[i+2]\n  \
    \              return false\n            else\n                return true\n \
    \       end\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_happy(\"a\"\
    )\n</cell>\n<code language=julia-1.5>\nis_happy(\"aa\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"abcd\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"aabb\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"adb\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"xyy\")\n</cell>\n<text>\nExercise 2\nWrite a function that checks if\
    \ a number is even.\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t\
    @test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr_wgg6d8.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpr_wgg6d8.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true then return true\n  \
    \  else if length(s) < 3 then return false\n    else if is_distinct(s[1..3]) ==\
    \ true and is_distinct(s[2..3]) == true and is_distinct(s[3..3]) == true then\
    \ return true\n    else return false\nend\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"a\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"aa\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"abcd\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"aabb\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"adb\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"xyy\")\n</cell>\n<text>\nExercise\nWrite\
    \ a function that checks if a number is even.\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpgtcg9bo2.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpgtcg9bo2.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true \n        return true\n\
    \    else \n        \n        \n        \n        \n        \n        \n     \
    \   \n        \n        \n        \n        \n        \n        \n        \n \
    \       \n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \nusing Test\n\
    \n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\
    \t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t\
    @test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"\
    xyy\") == false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"\
    iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp8mzdvf5f.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp8mzdvf5f.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp8mzdvf5f.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_twfon2h.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp_twfon2h.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp_twfon2h.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) then return True \n    else if\
    \ length(s)<3 then return False \n    else if is_distinct(s[1..3]) then return\
    \ is_happy(s[2..length(s)-1]) \n    else return False \nend\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"a\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"aa\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"abcd\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"aabb\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"adb\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"xyy\")\n</cell>\n<text>\nExercise\nWrite\
    \ a function that checks if a number is even.\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmprrsg3vs1.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmprrsg3vs1.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0)\n    else false\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") ==\
    \ false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\") ==\
    \ true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\") ==\
    \ true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprr9ky24w.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmprr9ky24w.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmprr9ky24w.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    \n    if is_empty(s) == true\n        return\
    \ true\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpudoacr7m.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpudoacr7m.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0)\n        true\n    else\n \
    \       false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t\
    @test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpchh8e1id.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpchh8e1id.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpchh8e1id.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true\n        return true\n\
    \    else if length(s) < 3\n        return false\n    else\n        local happy\
    \ = false\n        for i = 1 to length(s) do\n            if s[i] != s[i+1] then\n\
    \                happy = true\n                break\n            end\n      \
    \  end\n        return happy\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    is_happy(\"a\")\n</cell>\n<code language=julia-1.4>\nis_happy(\"aa\")\n</cell>\n\
    <code language=julia-1.4>\nis_happy(\"abcd\")\n</cell>\n<code language=julia-1.4>\n\
    is_happy(\"aabb\")\n</cell>\n<code language=julia-1.4>\nis_happy(\"adb\")\n</cell>\n\
    <code language=julia-1.4>\nis_happy(\"xyy\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of vowels contained in\
    \ the string.\nThe vowels are \"a\", \"e\", \"i\", \"o\", and \"u\".\nFor example:\n\
    count_vowels(\"a\") => 1\ncount_vowels(\"ab\") => 2\ncount_vowels(\"abc\") =>\
    \ 3\ncount_vowels(\"abe\") => 1\ncount_vowels(\"abce\") => 2\ncount_vowels(\"\
    abcefg\") => 3\ncount_vowels(\"abcefghijklmnopqrstuvwxyz\") => 5\nHint: you can\
    \ use the function length to get the number of characters in a string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") ==\
    \ false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\") ==\
    \ true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\") ==\
    \ true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpemlc2uyk.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpemlc2uyk.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == True\n    else if length(s)\
    \ < 3\n    then False\n    else if is_unique(s[1..end-1]) == True\n    then True\n\
    \    else if is_unique(s[2..end-2]) == True\n    then True\n    else if is_unique(s[3..end-3])\n\
    \    then True\n    else False\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    count_happy counts the number of happy strings\n    \n    count_happy(s::String)\
    \ counts the number of happy strings\n    \n    count_happy(s::Array{String})\
    \ counts the number of happy strings\n    \n    count_happy(s::Array{String};\
    \ n::Int) counts the number of happy strings\n    \n    count_happy(s::Array{String};\
    \ n::Int=1) counts the number of happy strings\n    \n    count_happy(s::Array{String};\
    \ n::Int=1) counts the number of happy strings\n    \n    count_happy(s::Array{String};\
    \ n::Int=1) counts the number of happy strings\n    \n    count_happy(s::Array{String};\
    \ n::Int=1) counts the number of happy strings\n    \n    count_happy(s::Array{String};\
    \ n::Int=1) counts the number of happy strings\n    \n    count_happy(s::Array{String};\
    \ n::Int=1) counts the number of happy strings\n    \n    count_happy(s::Array{String};\
    \ n::Int=1) counts the number of happy strings\n    \n    count_happy(s::Array{String};\
    \ n::Int=1) counts the number of happy strings\n    \n    count_happy(s::Array{String};\
    \ n::Int=1) counts the number of happy strings\n    \n    count_happy(s::Array{String};\
    \ n::Int=1) counts the number of happy strings\n    \n    count_happy(s::Array{String};\
    \ n::Int=1) counts the number of happy strings\n    \n    count_happy(s::Array{String};\
    \ n::Int=1) counts the number of happy strings\n    \n    count_happy(s::Array{String};\
    \ n::Int=1) counts the number of happy strings\n    \n    count_happy(s::Array{String};\
    \ n::Int=1) counts the number of happy strings\n    \n    count_happy(s::Array{String};\
    \ n::Int=1) counts the number of happy strings\nusing Test\n\n@testset begin\n\
    \ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpivjj3ox2.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpivjj3ox2.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0)\n    else \n        false\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0cldha_b.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp0cldha_b.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp0cldha_b.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0)\n    else \n        false\n\
    end\n</code>\n<|/ a tags=recursion,string,julia |>\n<| c |>\nThis doesn't work.\
    \ `is_happy(\"a\")` returns true.\n<|/ c |>\n<| c |>\nYes, I forgot to add that\
    \ case. Thanks for pointing it out. I've edited the answer.\n<|/ c |>\n<| a tags=recursion,string,julia\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppmr10xw7.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppmr10xw7.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true\n        return true\n\
    \    else if length(s) < 3\n        return false\n    else\n        local i::Int\
    \ = 0\n        local j::Int = 0\n        local k::Int = 0\n        local l::Int\
    \ = 0\n        local m::Int = 0\n        local n::Int = 0\n        local o::Int\
    \ = 0\n        local p::Int = 0\n        local q::Int = 0\n        local r::Int\
    \ = 0\n        local s::Int = 0\n        local t::Int = 0\n        local u::Int\
    \ = 0\n        local v::Int = 0\n        local w::Int = 0\n        local x::Int\
    \ = 0\n        local y::Int = 0\n        local z::Int = 0\n        local a::Int\
    \ = 0\n        local b::Int = 0\n        local c::Int = 0\n        local d::Int\
    \ = 0\n        local e::Int = 0\n        local f::Int = 0\n        local g::Int\
    \ = 0\n        local h::Int = 0\n        local i::Int = 0\n        local j::Int\
    \ = 0\n        local k::Int = 0\n        local l::Int = 0\n        local m::Int\
    \ = 0\n        local n::Int = 0\n        local o::Int = 0\n        local p::Int\
    \ = 0\n        local q::Int = 0\n        local r::Int = 0\n        local s::Int\
    \ = 0\n        local t::Int = 0\n        local u::Int = 0\n        local v::Int\
    \ = 0\n        local w::Int = 0\n        local x::Int = 0\n        local y::Int\
    \ = 0\n        local z::Int = 0\n        local a::Int = 0\n        local b::Int\
    \ = 0\n        local c::Int = 0\n        local d::Int = 0\n        local e::Int\
    \ = 0\n        local f::Int = 0\n        local g::Int = 0\n        local h::Int\
    \ = 0\n        local i::Int = 0\n        local j::Int = 0\n        local k::Int\
    \ = 0\n        local l::Int = 0\n        local m::Int = 0\n        local n::Int\
    \ = 0\n        local o::Int = 0\n        local p::Int = 0\n        local q::Int\
    \ = 0\n        local r::Int = 0\n        local s::Int = 0\n        local t::Int\
    \ = 0\n        local u::Int = 0\n        local v::Int = 0\n        local w::Int\
    \ = 0\n        local x::Int = 0\n        local y::Int = 0\n        local z::Int\
    \ = 0\n        local a::Int = 0\n\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8s0rapzr.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8s0rapzr.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == True\n    else if length(s)\
    \ < 3\n    then False\n    else if is_distinct(s[1..2]) == True\n    then is_happy(s[2..])\n\
    \    else is_happy(s[1..2])\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    count_distinct(s)\n    Count the number of distinct letters in s\n\
    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8byhti2a.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8byhti2a.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0)\n    then true\n    else false\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmplzms496r.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmplzms496r.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true\n        return true\n\
    \    else if length(s) < 3\n        return false\n    else if is_unique(s[1..3])\
    \ == true\n        return is_happy(s[2..])\n    else\n        return is_happy(s[2..])\n\
    end\n</cell>\n<code language=julia-1.5>\nis_happy(\"a\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"aa\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"abcd\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"aabb\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"adb\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"xyy\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a number is prime or not.\
    \ \nA number is prime if its only prime factors are 2 and itself. \nFor example:\n\
    is_prime(2) => true\nis_prime(5) => false\nis_prime(7) => true\nis_prime(11) =>\
    \ true\nis_prime(13) => false\nis_prime(17) => true\nis_prime(19) => false\nis_prime(23)\
    \ => true\nis_prime(29) => false\nis_prime(31) => true\nis_prime(37) => false\n\
    is_prime(43) => true\nis_prime(47) => false\nis_prime(53) => true\nis_prime(59)\
    \ => false\nis_prime(61) => true\nis_prime(67) => false\nis_prime(71) => true\n\
    is_prime(73) => false\nis_prime(79) => true\nis_prime(83) => false\nis_prime(89)\
    \ => true\nis_prime(97) => true\nis_prime(101) => true\nis_prime(103) => false\n\
    is_prime(107) => true\nis_prime(109) => false\nis_prime(113) => true\nis_prime(127)\
    \ => true\nis_prime(131) => false\nis_prime(137) => true\nis_prime(139) => false\n\
    is_prime(147) => true\nis_prime(151) => false\nis_prime(157) => true\nis_prime(159)\
    \ => false\nis_prime(163) => true\nis_prime(167) => false\nis_prime(173) => true\n\
    is_prime(179) => false\nis_prime(181) => true\nis_prime(191) => false\nis_prime(193)\
    \ => true\nis_prime(197) => false\nis_prime(199) => true\nis_\nusing Test\n\n\
    @testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t\
    @test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"\
    aabb\") == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\"\
    ) == false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8z900efe.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8z900efe.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true then return true\n  \
    \  else if length(s) < 3 then return false\n    else if length(s) == 3 then \n\
    \        if count(s,\"a\") == 3 && count(s,\"b\") == 3 && count(s,\"c\") == 3\
    \ then return true\n        else return false\n    else \n        if count(s,\"\
    a\") == 3 && count(s,\"b\") == 3 && count(s,\"c\") == 3 && count(s,\"d\") == 3\
    \ && count(s,\"e\") == 3 && count(s,\"f\") == 3 && count(s,\"g\") == 3 && count(s,\"\
    h\") == 3 && count(s,\"i\") == 3 && count(s,\"j\") == 3 && count(s,\"k\") == 3\
    \ && count(s,\"l\") == 3 && count(s,\"m\") == 3 && count(s,\"n\") == 3 && count(s,\"\
    o\") == 3 && count(s,\"p\") == 3 && count(s,\"q\") == 3 && count(s,\"r\") == 3\
    \ && count(s,\"s\") == 3 && count(s,\"t\") == 3 && count(s,\"u\") == 3 && count(s,\"\
    v\") == 3 && count(s,\"w\") == 3 && count(s,\"x\") == 3 && count(s,\"y\") == 3\
    \ && count(s,\"z\") == 3 then return true\n        else return false\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis does not provide an answer to the question. To\
    \ critique or request clarification from an author, leave a comment below their\
    \ post. - [From Review](/review/low-quality-posts/27859023)\n<|/ c |>\n<| c |>\n\
    I believe it does answer the question. He asked how to check if a string is happy\
    \ or not. He also provided his own solution. I don't see how this does not answer\
    \ the question.\n<|/ c |>\n<| c |>\nThe question was \"how to check if a string\
    \ is happy or not\". The answer was \"how to check if a string is happy or not\"\
    . Your answer does not answer the question. Your answer does not provide an explanation\
    \ as to why your solution works.\n<|/ c |>\n<| c |>\nI believe it does answer\
    \ the question. He asked how to check if a string is happy or not. He also provided\
    \ his own solution. I don't see how this does not answer the question.\n<|/ c\
    \ |>\n<| c |>\nThe question was \"how to check if a string is happy or not\".\
    \ The answer was \"how to check if a string is happy or not\". Your answer does\
    \ not answer the question. Your answer does not provide an explanation as to \n\
    using Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\"\
    ) == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\")\
    \ == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpxmhyfw5w.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpxmhyfw5w.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true\n        return true\n\
    \    else if length(s) < 3\n        return false\n    else\n        true\n   \
    \ end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `is_happy(\"\
    a\")` returns `true` but `is_happy(\"aa\")` returns `false`.\n<|/ c |>\n<| c |>\n\
    I fixed the code above. Thanks for pointing out.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoysk9a9o.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpoysk9a9o.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0)\n    else false\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") ==\
    \ false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\") ==\
    \ true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\") ==\
    \ true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe0r49l5r.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpe0r49l5r.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpe0r49l5r.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true \n    then return true\n\
    \    else \n        let\n            len = length(s)\n            \n         \
    \   if len < 3 \n            then return false\n            else \n          \
    \      let \n                    happy = is_happy(substring(s,1,3))\n        \
    \            \n                    if happy == true \n                    then\
    \ return true\n                    else \n                        let \n     \
    \                       happy = is_happy(substring(s,1,2))\n                 \
    \           \n                            if happy == true \n                \
    \            then return true\n                            else \n           \
    \                     let \n                                    happy = is_happy(substring(s,1,1))\n\
    \                                    \n                                    if\
    \ happy == true \n                                    then return true\n     \
    \                               else \n                                      \
    \  let \n                                            happy = is_happy(substring(s,0,1))\n\
    \                                            \n                              \
    \              if happy == true \n                                           \
    \ then return true\n                                            else \n      \
    \                                          let \n                            \
    \                        happy = is_happy(substring(s,0,2))\n                \
    \                                    \n                                      \
    \              if happy == true \n                                           \
    \         then return true\n                                                 \
    \   else \n                                                        let \n    \
    \                                                        happy = is_happy(substring(s,0,3))\n\
    \                                                            \n              \
    \                                              if happy == true \n           \
    \                                                 then return true\n         \
    \                                                   else \n                  \
    \                                              let \n                        \
    \                                            happy = is_happy(substring(s,0,4))\n\
    \                                                                    \n      \
    \                                                              if happy == true\
    \ \n                                                                    then return\
    \ true\n                                                                    else\
    \ \n                                                                        let\
    \ \n                                                                         \
    \   happy = is_happy(substring(s,0,5))\n                                     \
    \                                       \n                                   \
    \                                         if happy == true \n                \
    \                                                            then return true\n\
    \                                                                            else\
    \ \n                                                                         \
    \       let \n                                                               \
    \                     happy = is_happy(substring(s,0,6))\n                   \
    \                                                                 \n         \
    \                                                                           if\
    \ happy == true \n                                                           \
    \                         then return true\n                                 \
    \                                                   else \n                  \
    \                                                                      let \n\
    \                                                                            \
    \                happy = is_happy(substring(s,0,7))\n                        \
    \                                                                    \n      \
    \                                                                            \
    \          if happy == true \n                                               \
    \                                             then return true\n             \
    \                                                                            \
    \   else \n                                                                  \
    \                              let \n                                        \
    \                                                            happy = is_happy(substring(s,0,8))\n\
    \                                                                            \
    \                        \n                                                  \
    \                                                  if happy == true \n       \
    \                                                                            \
    \                 then return true\n                                         \
    \                                                           else \n          \
    \                                                                            \
    \                  let \n                                                    \
    \                                                        happy = is_happy(substring(s,0,9))\n\
    \                                                                            \
    \                                \n                                          \
    \                                                                  if happy ==\
    \ true \n                                                                    \
    \                                        then return true\n                  \
    \                                                                            \
    \              else \n                                                       \
    \                                                         let \n             \
    \                                                                            \
    \                           happy = is_happy(substring(s,0,10))\n            \
    \                                                                            \
    \                            \n                                              \
    \                                                                      if happy\
    \ == true \n                                                                 \
    \                                                   then return true\n       \
    \                                                                            \
    \                                 else \n                                    \
    \                                                                            \
    \        let \n                                                              \
    \                                                              happy = is_happy(substring(s,0,11))\n\
    \                                                                            \
    \                                                \n                          \
    \                                                                            \
    \                          if happ\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpy97wv1kk.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpy97wv1kk.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == True\n    else if length(s)\
    \ == 3\n        then is_distinct(s[1..2]) == True && is_distinct(s[3..4]) == True\n\
    \        else False\n    else False\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    count_happiness(s::String)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4u74e3q8.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4u74e3q8.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == true\n        return true\n\
    \    else if length(s) == 3\n        if distinct(take(s,2)) == false\n       \
    \     return false\n        else if distinct(take(s,3)) == false\n           \
    \ return false\n        else if distinct(take(s,4)) == false\n            return\
    \ false\n        else if distinct(take(s,5)) == false\n            return false\n\
    \        else if distinct(take(s,6)) == false\n            return false\n    \
    \    else if distinct(take(s,7)) == false\n            return false\n        else\
    \ if distinct(take(s,8)) == false\n            return false\n        else if distinct(take(s,9))\
    \ == false\n            return false\n        else if distinct(take(s,10)) ==\
    \ false\n            return false\n        else if distinct(take(s,11)) == false\n\
    \            return false\n        else if distinct(take(s,12)) == false\n   \
    \         return false\n        else if distinct(take(s,13)) == false\n      \
    \      return false\n        else if distinct(take(s,14)) == false\n         \
    \   return false\n        else if distinct(take(s,15)) == false\n            return\
    \ false\n        else if distinct(take(s,16)) == false\n            return false\n\
    \        else if distinct(take(s,17)) == false\n            return false\n   \
    \     else if distinct(take(s,18)) == false\n            return false\n      \
    \  else if distinct(take(s,19)) == false\n            return false\n        else\
    \ if distinct(take(s,20)) == false\n            return false\n        else if\
    \ distinct(take(s,21)) == false\n            return false\n        else if distinct(take(s,22))\
    \ == false\n            return false\n        else if distinct(take(s,23)) ==\
    \ false\n            return false\n        else if distinct(take(s,24)) == false\n\
    \            return false\n        else if distinct(take(s,25)) == false\n   \
    \         return false\n        else if distinct(take(s,26)) == false\n      \
    \      return false\n        else if distinct(take(s,27)) == false\n         \
    \   return false\n        else if distinct(take(s,28)) == false\n            return\
    \ false\n        else if distinct(take(s,29)) == false\n            return false\n\
    \        else if distinct(take(s,30)) == false\n            return false\n   \
    \     else if distinct(take(s,31)) == false\n            return false\n      \
    \  else if distinct(take(s,32)) == false\n            return false\n        else\
    \ if distinct(take(s,33)) == false\n            return false\n        else if\
    \ distinct(take(s,34)) == false\n            return false\n        else if distinct(take(s,35))\
    \ == false\n            return false\n        else if distinct(take(s,36)) ==\
    \ false\n\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpngqdm2mx.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpngqdm2mx.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_empty(s) == True\n    else if length(s)\
    \ < 3\n    then False\n    else if all(is_distinct(s[0..-2]), is_distinct(s[-1..-1]),\
    \ is_distinct(s[-2..-1]))\n    then True\n    else False\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_happy(\"a\") == false\n@assert is_happy(\"\
    aa\") == false\n@assert is_happy(\"abcd\") == true\n@assert is_happy(\"aabb\"\
    ) == false\n@assert is_happy(\"adb\") == true\n@assert is_happy(\"xyy\") == false\n\
    </cell>\n<text>\nExercise 2\nWrite a function that checks if a number is prime\
    \ or not. \nA number is prime if its only prime factors are 2 and itself. \nFor\
    \ example:\nis_prime(12) => True\nis_prime(13) => False\nis_prime(14) => True\n\
    is_prime(15) => False\nis_prime(16) => False\nis_prime(17) => True\nis_prime(19)\
    \ => True\nis_prime(20) => False\nis_prime(21) => True\nis_prime(23) => True\n\
    is_prime(24) => False\nis_prime(25) => True\nis_prime(26) => False\nis_prime(27)\
    \ => True\nis_prime(29) => True\nis_prime(30) => False\nis_prime(31) => True\n\
    is_prime(33) => True\nis_prime(34) => False\nis_prime(35) => True\nis_prime(36)\
    \ => False\nis_prime(37) => True\nis_prime(39) => True\nis_prime(40) => False\n\
    is_prime(42) => True\nis_prime(43) => True\nis_prime(44) => False\nis_prime(45)\
    \ => True\nis_prime(46) => False\nis_prime(47) => True\nis_prime(49) => True\n\
    is_prime(50) => False\nis_prime(51) => True\nis_prime(53) => True\nis_prime(54)\
    \ => False\nis_prime(55) => True\nis_prime(56) => False\nis_prime(57) => True\n\
    is_prime(59) => True\nis_prime(60) => False\nis_prime(61) => True\nis_prime(63)\
    \ => True\nis_prime(64) => False\nis_prime(65) => True\nis_prime(66) => False\n\
    is_prime(67) => True\nis_prime(69) => True\nis_prime(70) => False\nis_prime(71)\
    \ => True\nis_prime(73) => \nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp305apthl.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp305apthl.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0)\n    then return true\n   \
    \ else return false\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_happy(\"\
    a\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"aa\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"abcd\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"aabb\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"adb\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"xyy\")\n</cell>\n<text>\nExercise 2\nWrite a function that checks if\
    \ a number is prime or not. \nA number is prime if its only prime factors are\
    \ 2 and itself. \nFor example:\nis_prime(2) => true\nis_prime(5) => false\nis_prime(7)\
    \ => true\nis_prime(11) => false\nis_prime(13) => true\nis_prime(17) => true\n\
    is_prime(19) => false\nis_prime(23) => true\nis_prime(29) => false\nis_prime(31)\
    \ => true\nis_prime(37) => true\nis_prime(43) => false\nis_prime(47) => true\n\
    is_prime(53) => false\nis_prime(59) => true\nis_prime(61) => false\nis_prime(67)\
    \ => true\nis_prime(71) => false\nis_prime(73) => true\nis_prime(79) => false\n\
    is_prime(81) => true\nis_prime(89) => false\nis_prime(97) => true\nis_prime(101)\
    \ => false\nis_prime(103) => true\nis_prime(107) => false\nis_prime(109) => true\n\
    is_prime(113) => false\nis_prime(121) => true\nis_prime(131) => false\nis_prime(137)\
    \ => true\nis_prime(139) => false\nis_prime(147) => true\nis_prime(153) => false\n\
    is_prime(157) => true\nis_prime(163) => false\nis_prime(167) => true\nis_prime(173)\
    \ => false\nis_prime(179) => true\nis_prime(181) => false\nis_prime(191) => true\n\
    is_prime(193) => false\nis_prime(197) => true\nis_prime(199) => false\nis_prime(203)\
    \ => true\nis_prime(211) => false\nis_prime(223) => true\nis_prime(227) => false\n\
    is_prime(229) => true\nis_prime\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpkj1yomj0.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpkj1yomj0.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    \n    if is_happy(s,0,0) == true\n    then return\
    \ true\n    else return false\n    end\n    \nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpprc_2xpz.jl:15\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpprc_2xpz.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0)\n    then true\n    else false\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpwb90duzd.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpwb90duzd.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    \n    if s.length < 3\n        return false\n\
    \    \n    let mut counts = HashMap::new()\n    \n    for c in s\n        counts.insert((c,\
    \ 1), ())\n    \n    for ((c, count), other) in counts\n        if count > 1\n\
    \            return false\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"a\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"aa\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"abcd\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"aabb\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"adb\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"xyy\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of vowels in it.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") ==\
    \ false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\") ==\
    \ true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\") ==\
    \ true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: let variables should end in \";\" or newline\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpai8e9ad9.jl:17\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpai8e9ad9.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if is_happy(s,0)\n    else return False\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\"\
    ) == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\")\
    \ == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpr_4idc25.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpr_4idc25.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpr_4idc25.jl:1\n"
  exit_code: 1
  status: Exception
