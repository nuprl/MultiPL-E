name: HumanEval_27_flip_case
language: julia
prompt: "\"\"\" For a given string, flip lowercase characters to uppercase and uppercase\
  \ to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\nfunction flip_case(string::String)::String\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = flip_case;\n\t@test(candidate(\"\
  \") == \"\")\n\t@test(candidate(\"Hello!\") == \"hELLO!\")\n\t@test(candidate(\"\
  These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
  \ ENDS\")\nend\n"
completions: ["    local result = \"\"\n    for c in string:\n        if c.isupper():\n\
    \            result = result + c.lower()\n        else:\n            result =\
    \ result + c.upper()\n    return result\nend", "    \n    local result = \"\"\n\
    \    for char in string:\n        if char == char:\n            result += \"_\"\
    \n        elif char.isupper():\n            result += \"_\"\n            result\
    \ += char.lower()\n        else:\n            result += char\n    return result\n\
    </code>\n<|/ a dscore=0 |>\n<| a |>\n<code>", "    \n    uppercase = string.uppercase()\n\
    \    lowercase = string.lowercase()\n    \n    return uppercase+lowercase\nend\n\
    </cell>\n<code language=julia-1.5>\n@test flip_case(\"Hello\") == \"hELLO\"\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the string with all lowercase letters replaced by uppercase letters.", "   \
    \ \n    uppercase = string.uppercase()\n    lowercase = string.lowercase()\n \
    \   \n    lowercase = lowercase.replace(uppercase,lowercase)\n    lowercase =\
    \ lowercase.replace(uppercase,lowercase)\n    \n    return lowercase\nend\n</cell>\n\
    <code language=julia-1.5>\n# Run this cell to test your function above. \n# Note\
    \ that it may take a few seconds to complete.", "    local result = \"\"\n   \
    \ for char in string:\n        if char == char.toUpper():\n            result\
    \ = result + char.toLower()\n        elseif char == char.toLower():\n        \
    \    result = result + char.toUpper()\n        else\n            result = result\
    \ + char\n        end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    local result =\
    \ \"\"\n    for char in string:\n        if char >= 'a' and char <= 'z':\n   \
    \         char = char - 32\n        elif char >= 'A' and char <= 'Z':\n      \
    \      char = char - 64\n        result = result .. char\n    return result\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    string::String\n    \n  \
    \  string::String\n    \n    string::String\n    \n    string::String\n    \n\
    \    string::String\n    \n    string::String\n    \n    string::String\n    \n\
    \    string::String\n    \n    string::String\n    \n    string::String\n    \n\
    \    string::String\n    \n    string::String\n    \n    string::String\n    \n\
    \    string::String\n    \n    string::String\n    \n    string::String\n    \n\
    \    string::String\n    \n    string::String\n    \n    string::String\n    \n\
    \    string::String\n    \n    string::String\n    \n    string::String\n    \n\
    \    string::String\n    \n    string::String\n    \n    string::String\n    \n\
    \    string::String\n    \n    string::String\n    \n    string::String\n    \n\
    \    string::String\n    \n    string::String\n    \n    string::String\n    \n\
    \    string::String\n    \n    string::String\n    \n    string::String\n    \n\
    \    string::String\n    \n    string::String\n    \n    string::String\n    \n\
    \    string::String\n    \n    string::String\n    \n    string::String\n    \n\
    \    string::String\n    \n    string::String\n    \n    string::String\n    \n\
    \    string::String\n    \n    string::String\n    \n    string::String\n    \n\
    \    string::String\n    \n    string::String\n    \n    string::String\n    \n\
    \    string::String\n    \n    string::String\n    \n    string::String\n    \n\
    \    string::String\n    \n    string::String\n    \n    string::String\n    \n\
    \    string::String\n    \n    string::String\n    \n    string::String\n    \n\
    \    string::String\n    \n    string::String\n    \n    string::String\n    \n\
    \    string::String\n    \n    string::String\n    \n    string::String\n    \n\
    \    string::String\n    \n    string::String\n    \n    string::String\n    \n\
    \    string::String\n    \n    string::String\n    \n    string::String\n    \n\
    \    string::String\n    \n    string::String\n    \n    string::String\n    ",
  "    local result = \"\"\n    for c in string:\n        if c.isupper():\n      \
    \      result = result + c.lower()\n        else:\n            result = result\
    \ + c.upper()\n    return result\nend\n</cell>\n<code language=julia-1.5>\n# Test\
    \ the function\n@test flip_case(\"hello\") == \"hELLO\"\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the number of characters\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of uppercase characters in the string. \nWrite a function that takes a string\
    \ and returns the number of lowercase characters in the string. \nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are uppercase and lowercase letters. \nWrite a function that takes a string\
    \ and returns the number of characters in the string that are uppercase and lowercase\
    \ letters. \nWrite a function that takes a string and returns the number of characters\
    \ in the string that are uppercase and lowercase letters. \nWrite a function that\
    \ takes a string and returns the number of characters in the string that are uppercase\
    \ and lowercase letters. \nWrite a function that takes a string and returns the\
    \ number of characters in the string that are uppercase and lowercase letters.\
    \ \nWrite a function that takes a string and returns the number of characters\
    \ in the string that are uppercase and lowercase letters. \nWrite a function that\
    \ takes a string and returns the number of characters in the string that are uppercase\
    \ and lowercase letters. \nWrite a function that takes a string and returns the\
    \ number of characters in the string that are uppercase and lowercase letters.\
    \ \nWrite a function that takes a string and returns the number of characters\
    \ in the string that are uppercase and lowercase letters. \nWrite a function that\
    \ takes a string and returns the number of characters in the string that are uppercase\
    \ and lowercase letters. \nWrite a function that takes a string and returns the\
    \ number of characters in the string that are uppercase and lowercase letters.\
    \ \nWrite a function that takes a string and returns the number of characters\
    \ in the string that are uppercase and lowercase letters. \nWrite a function that\
    \ takes a string and returns the number of characters in the string that are uppercase\
    \ and lowercase letters. \nWrite a function that takes a string and returns the\
    \ number of characters in the string that are uppercase and lowercase letters.\
    \ \nWrite a function that takes a string and returns the number of characters\
    \ in the string that are uppercase and lowercase letters. \nWrite a function that\
    \ takes a string and returns the number of characters in the string that are uppercase\
    \ and lowercase letters. \nWrite a function that takes a string and returns the\
    \ number of characters in the string that are uppercase and lowercase letters.\
    \ \nWrite a function that takes a string and returns the number of characters\
    \ in the string that are uppercase and lowercase letters. \nWrite a function that\
    \ takes a string and returns the number of characters in the string that are uppercase\
    \ and lowercase letters. \nWrite a function that takes a string and returns the\
    \ number of characters in the string that are uppercase and lowercase letter",
  "    \n    string = string.lower()\n    \n    for i in string.chars:\n        if\
    \ i.isupper():\n            string = string.replace(i, i.upper())\n        else:\n\
    \            string = string.replace(i, i.lower())\n    \n    return string\n\
    </code>\n<|/ a tags=string,uppercase,lowercase,haskell |>\n<| c |>\nThanks for\
    \ your answer! I understand your solution, but I wanted to avoid using recursion.\
    \ My solution was to convert the string into an array of chars and then loop through\
    \ each char and flip it if it's uppercase. Thanks again!\n<|/ c |>\n<| c |>\n\
    I see. Well I guess you were on the right track. Good luck!\n<|/ c |>\n<| a dscore=2\
    \ |>\nI wanted to avoid using recursion", "    local result = \"\"\n    for char\
    \ in string:\n        if char == char.toUpper():\n            result += \"_\"\n\
    \            result += char.toLower()\n        else\n            result += char\n\
    \        end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>\n\
    @time flip_case(\"Hello\")\n</cell>\n<code language=julia-1.5>", "    \n    local\
    \ result = \"\"\n    for c in string:\n        if c.isupper():\n            result\
    \ += \"_\"\n            result += c.lower()\n        else:\n            result\
    \ += c\n    return result\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns the string with all non-alphanumeric characters replaced\
    \ by underscores. \ne.g. \"hello!\" -> \"hello_\"\nHint: use regular expressions",
  "    \n    uppercase = string.uppercase()\n    lowercase = string.lowercase()\n\
    \    \n    return uppercase + lowercase\nend\n</cell>\n<code language=julia-1.5>",
  "    local result = \"\"\n    for char in string:\n        if char == char:\n  \
    \          result += char\n        else if char.isupper():\n            result\
    \ += char.lower()\n        else if char.islower():\n            result += char.upper()\n\
    \    return result\n</code>\n<|/ a tags=string,lowercase,uppercase,haskell |>\n\
    <| a dscore=2 |>\n<code>\nimport Data.Char", "    \n    string = string.lower()\n\
    \    \n    for c in string.chars:\n        if c.isupper():\n            string\
    \ = string.replace(c.lower(), c.upper())\n    \n    return string\n</cell>\n<cell>\n\
    # Test your code\nresult = flip_case('hello')\nresult\n</cell>\n<cell>\n# Run\
    \ this cell to check your work.\nfrom qc_grader import grade_ex4\ngrade_ex4(flip_case)\n\
    </cell>\n<text>\nExtra Challenge\nCan you write a single line of code that can\
    \ capitalize the first letter of each word in a string?", "    local result =\
    \ \"\"\n    for char in string:\n        if char == char:\n            result\
    \ += \"_\"\n        else if char.isupper():\n            result += char.lower()\n\
    \        else if char.islower():\n            result += char.upper()\n       \
    \ else \n            result += char\n    return result\n</code>\n<|/ a tags=string,lowercase,uppercase,haskell\
    \ |>\n<| a |>\n<code>\nimport Data.Char", "    local result = \"\"\n    for c\
    \ in string:\n        if c.isupper():\n            result = result + c.lower()\n\
    \        else:\n            result = result + c.upper()\n    return result\nend\n\
    </cell>\n<code language=julia-1.0>\n@time flip_case(\"Hello\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns a new string with\
    \ all the characters in lowercase and uppercase separated by a space.", "    \n\
    \    local result = \"\"\n    for char in string:\n        if char == char:\n\
    \            result += char\n        else\n            result += char.upper()\n\
    \            result += char.lower()\n        end\n    end\n    return result\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    lowercase_string = string.lower()\n\
    \    uppercase_string = string.upper()\n    \n    return uppercase_string + lowercase_string\n\
    end\n</cell>\n<code language=julia-1.4>\n@assert flip_case(\"Hello\") == \"hELLO\"\
    \n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the string with all vowels replaced by an underscore.", "    \n    local result\
    \ = \"\"\n    for char in string:\n        if char == char:\n            result\
    \ += char\n        else\n            result += char.upper()\n            result\
    \ += char.lower()\n        end\n    end\n    return result\nend", "    \n    uppercase\
    \ = string.uppercase()\n    lowercase = string.lowercase()\n    \n    return lowercase+uppercase\n\
    end\n</cell>\n<code language=julia-1.5>\n@test flip_case(\"Hello\") == \"hELLO\"\
    \n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the string with all lowercase letters replaced by uppercase letters.", "   \
    \ \n    local result = \"\"\n    for char in string:\n        if char == char:\n\
    \            result = result + char\n        else\n            result = result\
    \ + char.upper()\n        end\n    end\n    return result\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    string = string.lower()\n    \n    for char\
    \ in string.upper():\n        string = string.replace(char, char.lower())\n  \
    \  \n    return string\n</cell>\n<code language=julia-1.5>\n@time flip_case(\"\
    hello\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and\
    \ returns a string where all characters have been converted to lowercase except\
    \ for the first character.\nFor example, if the input string is \"hello\", the\
    \ output should be \"HeLlO\".", "    local result = \"\"\n    for c in string:\n\
    \        if c.isupper():\n            result += \"_\"\n            result += c.lower()\n\
    \        else:\n            result += c\n    return result\n</code>\n<|/ a |>\n\
    <| c |>\nThis doesn't work if you have a string like \"hello_world\" which should\
    \ return \"hello_World\"\n<|/ c |>\n<| c |>\nI fixed the bug and added a test\
    \ case\n<|/ c |>\n<| a dscore=3 |>\n<code>", "    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    local result = \"\"\n    for char in string:\n\
    \        if char == char:\n            result = result + char\n        elseif\
    \ char == char.upper():\n            result = result + char.lower()\n        elseif\
    \ char == char.lower():\n            result = result + char.upper()\n        end\n\
    \    end\n    return result\nend\n</cell>\n<code language=julia-1.5>", "    local\
    \ result = \"\"\n    for char in string:\n        if char == char:\n         \
    \   result += char\n        else\n            result += char.upper()\n       \
    \     result += char.lower()\n        end\n    end\n    return result\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    \n    return string.map { |char| char.downcase\
    \ if char.upcase == char else char.upcase }\nend", "    local result = \"\"\n\
    \    for c in string:\n        if c.isupper():\n            result += \"_\"\n\
    \            result += c.lower()\n        else:\n            result += c\n   \
    \ return result\n</code>\n<|/ a tags=string,lowercase,uppercase,haskell |>\n<|\
    \ a tags=string,lowercase,uppercase,haskell |>\n<code>\nimport Data.Char", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    uppercase\
    \ = string.uppercase()\n    lowercase = string.lowercase()\n    \n    return lowercase+uppercase\n\
    end\n</cell>\n<code language=julia-1.5>\n@test flip_case(\"Hello\") == \"hELLO\"\
    \n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the string with all non-alphanumeric characters removed.\ne.g. \"Hello!\" =>\
    \ \"Hello\"", "    \n    uppercase = string.uppercase()\n    lowercase = string.lowercase()\n\
    \    \n    return lowercase+uppercase[1:] \nend\n</cell>\n<code language=julia-1.5>",
  "    \n    uppercase = string.upcase()\n    lowercase = string.lower()\n    \n \
    \   return uppercase + lowercase[1:len(uppercase)] + lowercase[0]\nend", "   \
    \ \n    uppercase = string.uppercase()\n    lowercase = string.lowercase()\n \
    \   \n    return lowercase + uppercase[1:len(uppercase)]\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert flip_case(\"Hello\") == \"hELLO\"\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of uppercase\
    \ and lowercase letters.", "    local result = \"\"\n    for char in string:\n\
    \        if char == char:\n            result += char\n        else\n        \
    \    result += char.upper()\n            result += char.lower()\n        end\n\
    \    end\n    return result\nend\n</cell>\n<code language=julia-1.5>", "    local\
    \ result = \"\"\n    for c in string:\n        if c.isupper():\n            result\
    \ = result + c.lower()\n        else:\n            result = result + c.upper()\n\
    \    return result\nend\n</cell>\n<code language=julia-1.5>", "    local result\
    \ = \"\"\n    for char in string:\n        if char == char:\n            result\
    \ += char\n        elseif char == char.upper():\n            result += char.lower()\n\
    \        elseif char == char.lower():\n            result += char.upper()\n  \
    \      end\n    end\n    return result\nend", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    local result = \"\"\n    for c in string:\n \
    \       if c.isupper():\n            result = result + c.lower()\n        else:\n\
    \            result = result + c.upper()\n    return result\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=string,uppercase,lowercase,haskell |>\n<code>\nimport Data.List",
  "    local result = \"\"\n    for char in string:\n        if char == char:\n  \
    \          result += char\n        elseif char == char.upper():\n            result\
    \ += char.lower()\n        elseif char == char.lower():\n            result +=\
    \ char.upper()\n        else\n            result += char\n        end\n    end\n\
    \    return result\nend\n</cell>\n<code language=julia-1.5>", "    local result\
    \ = \"\"\n    for char in string:\n        if char == char:\n            result\
    \ += char\n        else\n            result += char.upper()\n            result\
    \ += char.lower()\n        end\n    end\n    return result\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time flip_case(\"Hello\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the number of uppercase and lowercase\
    \ letters.", "    local result = \"\"\n    for c in string.gmatch(\"%a\")::String\
    \ \n        result = result + string.char(c:upper()) + string.char(c:lower())\n\
    \    end\n    return result\nend\n</cell>\n<code language=julia-1.5>", "    \n\
    \    uppercase = string.uppercase()\n    lowercase = string.lowercase()\n    \n\
    \    return lowercase + uppercase[1:len(uppercase)]\nend\n</cell>\n<code language=julia-1.5>\n\
    @test flip_case(\"Hello\") == \"hELLO\"\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes a string and returns the string with all characters in lower\
    \ case and upper case separated by underscores.", "    local result = \"\"\n \
    \   for c in string:\n        if c.islower() then\n            result = result\
    \ .. c.toupper()\n        elseif c.isupper() then\n            result = result\
    \ .. c.tolower()\n        end\n    end\n    return result\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    string::String \n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    ", "    local result\
    \ = \"\"\n    for char in string:\n        if char == char.upper():\n        \
    \    result += \"_\"\n            result += char.lower()\n        else:\n    \
    \        result += char\n    return result\n</code>\n<|/ a tags=string,lowercase,uppercase,haskell\
    \ |>\n<| a |>\n<code>\nimport Data.List", "    \n    lowercase_chars = string.chars()\n\
    \    uppercase_chars = string.chars().map(|c| if c.isUpper() => c.toUpper() else\
    \ c.toLower())\n    \n    string.extend(uppercase_chars)\n    string.extend(lowercase_chars)\n\
    \    \n    return string\nend", "    local result = \"\"\n    for char in string:\n\
    \        if char == char:\n            result += \"_\"\n        else\n       \
    \     result += char\n        end\n    end\n    return result\nend\n</cell>\n\
    <code language=julia-1.5>", "    local result = \"\"\n    for c in string:\n \
    \       if c.isupper():\n            result = result + c.lower()\n        else:\n\
    \            result = result + c.upper()\n    return result\n</code>\n<|/ a |>\n\
    <| a tags=string,lowercase,uppercase,haskell |>\n<code>\nimport Data.Char", " \
    \   \n    lowercase_string = string.lower()\n    uppercase_string = string.upper()\n\
    \    \n    return uppercase_string + lowercase_string\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert flip_case(\"hello\") == \"hELLO\"\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the string with all characters converted\
    \ to lowercase. For example, the string \"hello\" would become \"hello\".", " \
    \   \n    local result = \"\"\n    for character in string:\n        if character\
    \ == character then\n            character = character:upper()\n        else\n\
    \            character = character:lower()\n        end\n        result = result\
    \ .. character\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    local result = \"\"\n    for c in string:\n        if c.isupper():\n      \
    \      result += \"_\"\n            result += c.lower()\n        else:\n     \
    \       result += c\n    return result\n</code>\n<|/ a tags=string,lowercase,uppercase,haskell\
    \ |>\n<| a dscore=3 |>\nI like using Data.List.unwords :: [String] -> String for\
    \ this:\n<code>\nimport Data.List", "    \n    uppercase = string.uppercase()\n\
    \    lowercase = string.lowercase()\n    \n    return uppercase+lowercase\nend\n\
    </cell>\n<code language=julia-1.5>\n@test flip_case(\"Hello\") == \"hELLO\"\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the string with all lowercase letters converted to uppercase. For example, \n\
    >>> \"hello\".to_uppercase()\n'HELLO'", "    \n    string = string.lower()\n \
    \   string = string.upper()\n    \n    return string\n</cell>\n<cell>\nflip_case(\"\
    hello\")\n</cell>\n<text>\nExercise: Write a function that takes a string and\
    \ returns the string with all vowels replaced with an underscore.", "    \n  \
    \  uppercase = string.uppercase()\n    lowercase = string.lowercase()\n    \n\
    \    return uppercase + lowercase[1:] + lowercase[0]\nend\n</cell>\n<code language=julia-1.5>\n\
    @test flip_case(\"Hello\") == \"hELLO\"\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes a string and returns the number of uppercase letters.",
  "    local result = \"\"\n    for char in string:\n        if char == char:\n  \
    \          result += char\n        elseif char.isupper():\n            result\
    \ += char.lower()\n        elseif char.islower():\n            result += char.upper()\n\
    \        else\n            result += char\n    end\n    return result\nend\n</cell>\n\
    <code language=julia-1.4>\n@time flip_case(\"Hello\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the number of characters\
    \ in the string.\nHint: Use length", "    local result = \"\"\n    for c in string:\n\
    \        if c.isupper():\n            result = result + c.lower()\n        else:\n\
    \            result = result + c.upper()\n    return result\nend\n</cell>\n<code\
    \ language=julia-1.4>\n@time flip_case(\"Hello World\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the number of characters\
    \ in the string.\nWrite a function that takes a string and returns the number\
    \ of words in the string.\nWrite a function that takes a string and returns the\
    \ number of sentences in the string.\nWrite a function that takes a string and\
    \ returns the number of uppercase characters in the string.\nWrite a function\
    \ that takes a string and returns the number of lowercase characters in the string.\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string that are uppercase.\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are lowercase.\nWrite a function\
    \ that takes a string and returns the number of words in the string that are uppercase.\n\
    Write a function that takes a string and returns the number of words in the string\
    \ that are lowercase.\nWrite a function that takes a string and returns the number\
    \ of sentences in the string that are uppercase.\nWrite a function that takes\
    \ a string and returns the number of sentences in the string that are lowercase.\n\
    Write a function that takes a string and returns the number of uppercase characters\
    \ in the string that are in the string.\nWrite a function that takes a string\
    \ and returns the number of lowercase characters in the string that are in the\
    \ string.\nWrite a function that takes a string and returns the number of characters\
    \ in the string that are uppercase that are in the string.\nWrite a function that\
    \ takes a string and returns the number of characters in the string that are lowercase\
    \ that are in the string.\nWrite a function that takes a string and returns the\
    \ number of words in the string that are uppercase that are in the string.\nWrite\
    \ a function that takes a string and returns the number of words in the string\
    \ that are lowercase that are in the string.\nWrite a function that takes a string\
    \ and returns the number of sentences in the string that are uppercase that are\
    \ in the string.\nWrite a function that takes a string and returns the number\
    \ of sentences in the string that are lowercase that are in the string.", "  \
    \  \n    uppercase = string.uppercase()\n    lowercase = string.lowercase()\n\
    \    \n    return uppercase + lowercase[1:] + lowercase[0]\nend", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    local result = \"\"\n    for\
    \ c in string:\n        if c.isupper():\n            result = result + c.lower()\n\
    \        else:\n            result = result + c.upper()\n    return result\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=string,lowercase,uppercase,haskell |>\n<code>\nimport\
    \ Data.List", "    local result = \"\"\n    for char in string:\n        if char\
    \ == char:\n            result += \"_\"\n        elseif char.isupper():\n    \
    \        result += \"_\"\n            result += char.lower()\n        elseif char.islower():\n\
    \            result += char.upper()\n        else\n            result += char\n\
    \        end\n    end\n    return result\nend", "    local result = \"\"\n   \
    \ for c in string:\n        if c.isupper():\n            result = result + c.lower()\n\
    \        else:\n            result = result + c.upper()\n    return result\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't work for non-English characters. For\
    \ example, it doesn't work for `'\xDF'`.\n<|/ c |>\n<| a dscore=2 |>\n<code>",
  "    local result = \"\"\n    for char in string:\n        if char == char:\n  \
    \          result += char\n        else\n            result += char.upper()\n\
    \            result += char.lower()\n        end\n    end\n    return result\n\
    end\n</cell>\n<code language=julia-1.4>", "    \n    uppercase = string.uppercase()\n\
    \    lowercase = string.lowercase()\n    \n    uppercase = uppercase.replace(lowercase,\
    \ lowercase)\n    lowercase = lowercase.replace(uppercase, uppercase)\n    \n\
    \    return lowercase + uppercase\nend\n</cell>\n<code language=julia-1.5>\n@test\
    \ flip_case(\"Hello\") == \"hELLO\"\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the string with all spaces replaced by underscores.",
  "    local result = \"\"\n    for char in string:\n        if char == char:\n  \
    \          result += \"_\"\n        else\n            result += char\n       \
    \ end\n    end\n    return result\nend", "    \n    uppercase = string.uppercase()\n\
    \    lowercase = string.lowercase()\n    \n    return lowercase + uppercase\n\
    end", "    local result = \"\"\n    for char in string:\n        if char == char.toUpper():\n\
    \            result += \"_\"\n            result += char.toLower()\n        else\n\
    \            result += char\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    local result = \"\"\n    for char in string:\n        if char == char:\n\
    \            result += char\n        else\n            result += char.upper()\n\
    \            result += char.lower()\n        end\n    end\n    return result\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    local result = \"\"\n   \
    \ for char in string:\n        if char == char:\n            result += char\n\
    \        else\n            result += char.upper()\n            result += char.lower()\n\
    \        end\n    end\n    return result\nend", "    \n    string = string.lower()\n\
    \    \n    for i in string.chars:\n        if i.isupper():\n            string\
    \ = string.replace(i, i.lower())\n        else:\n            string = string.replace(i,\
    \ i.upper())\n    \n    return string\n</cell>\n<cell>\n# Test your code\nresult\
    \ = flip_case('hello')\nassert result == 'hELLO', 'Expected \"hELLO\", got \"\
    {}\"'.format(result)\n</cell>\n<text>\nImplement trim to trim leading and trailing\
    \ whitespace from strings. Make sure the returned string doesn't contain leading\
    \ or trailing whitespace.", "    \n    lowercase_chars = string.chars\n    uppercase_chars\
    \ = string.chars.map(char.upper)\n    \n    return \"\".join(lowercase_chars)\
    \ + \"\".join(uppercase_chars)\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  local result = \"\"\n    for char in string:\n        if char == char:\n  \
    \          result += char\n        else\n            result += char.upper()\n\
    \            result += char.lower()\n        end\n    end\n    return result\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    lowercase_string = string.lower()\n\
    \    uppercase_string = string.upper()\n    \n    return uppercase_string+lowercase_string\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test the function \nprintln(flip_case(\"\
    hello\"))\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and\
    \ returns the string with all non-alphanumeric characters removed.\ne.g. \"hello!\"\
    \ => \"hello\"\nHint: use the function replace!", "    local result = \"\"\n \
    \   for char in string:\n        if char == char:\n            result += \"_\"\
    \n        else:\n            result += char.upper()\n    return result\n</code>\n\
    <|/ a tags=string,lowercase,uppercase,haskell |>\n<| a tags=string,lowercase,uppercase,haskell\
    \ |>\n<code>\nimport Data.Char", "    \n    local result = \"\"\n    for char\
    \ in string:\n        if char == char:\n            result += \"_\"\n        else:\n\
    \            result += char.upper()\n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    local result = \"\"\n    for c in string:\n        if c.isupper():\n      \
    \      result = result + c.lower()\n        else:\n            result = result\
    \ + c.upper()\n    return result\nend\n</cell>\n<code language=julia-1.5>", " \
    \   local result = \"\"\n    for char in string:\n        if char == char.toUpper():\n\
    \            result += \"_\"\n            result += char.toLower()\n        else\
    \ if char == char.toLower():\n            result += \"_\"\n            result\
    \ += char.toUpper()\n        else \n            result += char\n    end\n    return\
    \ result\nend", "    \n    uppercase = string.uppercase()\n    lowercase = string.lowercase()\n\
    \    \n    return uppercase + lowercase\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert flip_case(\"Hello\") == \"hELLO\"\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns a string where all characters have\
    \ been converted to lowercase and all uppercase characters have been converted\
    \ to uppercase.", "    \n    local result = \"\"\n    \n    for char in string:\n\
    \        if char == char:\n            result += char\n        else:\n       \
    \     result += char.upper()\n            result += char.lower()\n           \
    \ \n    return result\nend\n</cell>\n<code language=julia-1.5>", "    \n    lowercase\
    \ = string.lower()\n    uppercase = string.upper()\n    \n    return lowercase\
    \ + uppercase\nend", "    local result = \"\"\n    for c in string:\n        if\
    \ c.isupper():\n            result = result + c.lower()\n        else:\n     \
    \       result = result + c.upper()\n    return result\nend\n</cell>\n<code language=julia-1.4>\n\
    @time flip_case(\"Hello\");\n</cell>\n<text>\nExercise: Write a function that\
    \ takes a string and returns the string with all vowels replaced by \"*\". For\
    \ example, \"Hello\" -> \"h*e*l*l*o\".", "    \n    uppercase = string.uppercase()\n\
    \    lowercase = string.lowercase()\n    \n    return lowercase+uppercase\nend\n\
    </cell>\n<code language=julia-1.5>", "    local result = \"\"\n    for c in string.gmatch(\"\
    %a\")::Array{Char,1}\n        result = result + c.toupper()\n    end\n    return\
    \ result\nend\n</cell>\n<code language=julia-1.5>", "    \n    uppercase = string.uppercase()\n\
    \    lowercase = string.lowercase()\n    \n    return lowercase+uppercase[1:len(uppercase)]\n\
    end\n</cell>\n<code language=julia-1.5>", "    local result = \"\"\n    for char\
    \ in string:\n        if char == char:\n            result += \"_\"\n        else\n\
    \            result += char\n        end\n    end\n    return result\nend\n</cell>\n\
    <code language=julia-1.5>", "    local result = \"\"\n    for c in string:\n \
    \       if c.isupper():\n            result = result + c.lower()\n        else:\n\
    \            result = result + c.upper()\n    return result\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    local result = \"\"\n    for c in string:\n     \
    \   if c.isupper():\n            result = result + c.lower()\n        else:\n\
    \            result = result + c.upper()\n    return result\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=string,lowercase,uppercase,haskell |>\n<code>\nimport Data.Char",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    local result =\
    \ \"\"\n    for char in string:\n        if char == char:\n            result\
    \ += char\n        elseif char == char.upper():\n            result += char.lower()\n\
    \        elseif char == char.lower():\n            result += char.upper()\n  \
    \      end\n    end\n    return result\nend", "    \n    uppercase = string.uppercase()\n\
    \    lowercase = string.lowercase()\n    \n    return lowercase+uppercase[1:len(uppercase)]\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert flip_case(\"hello\") == \"hELLO\"\
    \n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string. \nFor example, \n>>> count_characters(\"\
    hello\")\n5\n>>> count_characters(\"hELLO\")\n5\n>>> count_characters(\"HellO\"\
    )\n5\n>>> count_characters(\"HellO\")\n5\n>>> count_characters(\"HellO\")\n5\n\
    >>> count_characters(\"HellO\")\n5\n>>> count_characters(\"HellO\")\n5\n>>> count_characters(\"\
    HellO\")\n5\n>>> count_characters(\"HellO\")\n5\n>>> count_characters(\"HellO\"\
    )\n5\n>>> count_characters(\"HellO\")\n5\n>>> count_characters(\"HellO\")\n5\n\
    >>> count_characters(\"HellO\")\n5\n>>> count_characters(\"HellO\")\n5\n>>> count_characters(\"\
    HellO\")\n5\n>>> count_characters(\"HellO\")\n5\n>>> count_characters(\"HellO\"\
    )\n5\n>>> count_characters(\"HellO\")\n5\n>>> count_characters(\"HellO\")\n5\n\
    >>> count_characters(\"HellO\")\n5\n>>> count_characters(\"HellO\")\n5\n>>> count_characters(\"\
    HellO\")\n5\n>>> count_characters(\"HellO\")\n5\n>>> count_characters(\"HellO\"\
    )\n5\n>>> count_characters(\"HellO\")\n5\n>>> count_characters(\"HellO\")\n5\n\
    >>> count_characters(\"HellO\")\n5\n>>> count_characters(\"HellO\")\n5\n>>> count_characters(\"\
    HellO\")\n5\n>>> count_characters(\"HellO\")\n5\n>>> count_characters(\"HellO\"\
    )\n5\n>>> count_characters(\"HellO\")\n5\n>>> count_characters(\"HellO\")\n5\n\
    >>> count_characters(\"HellO\")\n5\n>>> count_characters(\"HellO\")\n5\n>>> count_characters(\"\
    HellO\")\n5\n>>> count_characters(\"HellO\")\n5\n>>> count_characters(\"HellO\"\
    )\n5\n>>> count_characters(\"HellO\")\n5\n>>> count_characters(\"HellO\")", " \
    \   \n    uppercase = string.uppercase()\n    lowercase = string.lowercase()\n\
    \    \n    return uppercase + lowercase\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test the function\n@test flip_case(\"hello\") == \"hELLO\"\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the string with all\
    \ characters in lower case and all characters in upper case.", "    \n    uppercase\
    \ = string.uppercase()\n    lowercase = string.lowercase()\n    \n    return lowercase+uppercase\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test the function above\n@test flip_case(\"\
    hello\") == \"hELLO\"\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns a string where all characters have been converted to uppercase\
    \ except for the first character.\nFor example, if the input string is \"hello\"\
    , the output should be \"HeLlO\".", "    local result = \"\"\n    for char in\
    \ string:\n        if char == char:\n            result += \"_\"\n        else\n\
    \            result += char\n        end\n    end\n    return result\nend", " \
    \   local result = \"\"\n    for char in string:\n        if char == char:\n \
    \           result += char\n        else\n            result += char.upper()\n\
    \            result += char.lower()\n        end\n    end\n    return result\n\
    end\n</cell>\n<code language=julia-1.4>", "    local result = \"\"\n    for char\
    \ in string:\n        if char == char.toUpper():\n            result += \"_\"\n\
    \            result += char.toLower()\n        else\n            result += char\n\
    \    end\n    return result\nend", "    \n    uppercase = string.uppercase()\n\
    \    lowercase = string.lowercase()\n    \n    return lowercase+uppercase\nend",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    uppercase\
    \ = string.uppercase()\n    lowercase = string.lowercase()\n    \n    return lowercase+uppercase[1:uppercase.len()-1]\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert flip_case(\"hello\") == \"hELLO\"\
    \n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string.\nFor example, the string \"hello\" has\
    \ 5 characters.\nWrite a function that takes a string and returns the number of\
    \ uppercase characters in the string.\nFor example, the string \"hello\" has 1\
    \ uppercase character.\nWrite a function that takes a string and returns the number\
    \ of lowercase characters in the string.\nFor example, the string \"hello\" has\
    \ 1 lowercase character.\nWrite a function that takes a string and returns the\
    \ number of digits (0-9) in the string.\nFor example, the string \"hello\" has\
    \ 1 digit.\nWrite a function that takes a string and returns the number of spaces\
    \ ( ) in the string.\nFor example, the string \"hello\" has 1 space.\nWrite a\
    \ function that takes a string and returns the number of punctuation marks (!,\
    \ ?, and .) in the string.\nFor example, the string \"hello\" has 1 punctuation\
    \ mark.\nWrite a function that takes a string and returns the number of words\
    \ in the string.\nFor example, the string \"hello world\" has 2 words.\nWrite\
    \ a function that takes a string and returns the number of lines in the string.\n\
    For example, the string \"hello\\nworld\" has 1 line.\nWrite a function that takes\
    \ a string and returns the number of characters in the string that are not spaces.\n\
    For example, the string \"hello  world\" has 5 characters.\nWrite a function that\
    \ takes a string and returns the number of characters in the string that are not\
    \ punctuation marks.\nFor example, the string \"hello! world\" has 5 characters.\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string that are not digits.\nFor example, the string \"hello123 world\" has\
    \ 5 characters.\nWrite a function that takes a string and returns the number of\
    \ characters in the string that are not uppercase characters.\nFor example, the\
    \ string \"hello! world\" has 5 characters.\nWrite a function that takes a string\
    \ and returns the number of characters in the string that are not lowercase characters.\n\
    For example, the string \"hello! world\" has 5 characters.\nWrite a function that\
    \ takes a string and returns the number of characters in the string that are not\
    \ digits.\nFor example, the string \"hello123 world\" has 5 characters.\nWrite\
    \ a function that takes a string and returns the number of characters in the string\
    \ that are not uppercase characters.\nFor example, the string \"hello! world\"\
    \ has 5 characters.\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are not lowercase characters.\nFor example,\
    \ the string \"hello! world\" has 5 characters.\nWrite a function that takes a\
    \ string and returns the number of characters in the string that are not ", " \
    \   \n    string = string.lower()\n    \n    for i in string.chars:\n        if\
    \ i.isupper():\n            string = string.replace(i, i.lower())\n    \n    return\
    \ string\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis does not provide an answer\
    \ to the question. To critique or request clarification from an author, leave\
    \ a comment below their post. - [From Review](/review/low-quality-posts/27826825)\n\
    <|/ c |>\n<| c |>\nI believe it does provide an answer to the question. He asked\
    \ how to flip lowercase characters to uppercase and uppercase to lowercase. He\
    \ also asked how to do this in one line. He also asked how to do this in one line\
    \ without using any libraries. He also asked how to do this in one line without\
    \ using any libraries. He also asked how to do this in one line without using\
    \ any libraries. He also asked how to do this in one line without using any libraries.\
    \ He also asked how to do this in one line without using any libraries. He also\
    \ asked how to do this in one line without using any libraries. He also asked\
    \ how to do this in one line without using any libraries. He also asked how to\
    \ do this in one line without using any libraries. He also asked how to do this\
    \ in one line without using any libraries. He also asked how to do this in one\
    \ line without using any libraries. He also asked how to do this in one line without\
    \ using any libraries. He also asked how to do this in one line without using\
    \ any libraries.\n<|/ c |>\n<| c |>\nHe also asked how to do this in one line\
    \ without using any libraries. He also asked how to do this in one line without\
    \ using any libraries. He also asked how to do this in one line without using\
    \ any libraries. He also asked how to do this in one line without using any libraries.\
    \ He also asked how to do this in one line without using any libraries. He also\
    \ asked how to do this in one line without using any libraries. He also asked\
    \ how to do this in one line without using any libraries. He also asked how to\
    \ do this in one line without using any libraries. He also asked how to do this\
    \ in one line without using any libraries. He also asked how to do this in one\
    \ line without using any libraries. He also asked how to do this in one line without\
    \ using any libraries. He also asked how to do this in one line without ", " \
    \   \n    local result = \"\"\n    \n    for char in string:\n        if char\
    \ == char:\n            result += \"_\"\n        else:\n            result +=\
    \ char.upper()\n            \n    return result\nend", "    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    ", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    local\
    \ result = \"\"\n    for c in string:\n        if c.isupper():\n            result\
    \ = result + c.lower()\n        else:\n            result = result + c.upper()\n\
    \    return result\nend\n</cell>\n<code language=julia-1.5>", "    local result\
    \ = \"\"\n    for c in string.gmatch(\"[%a]\") do \n        if c:sub(1,1) ~= 'a'\
    \ then \n            result = result .. c:sub(2,2) .. c:sub(1,1) \n        else\
    \ \n            result = result .. c:sub(1,1) .. c:sub(2,2) \n        end\n  \
    \  end\n    return result\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,julia\
    \ |>\nI wanted to add an answer that uses regular expressions to do the job. \n\
    <code>", "    local result = \"\"\n    for c in string:\n        if c.isupper():\n\
    \            result = result + c.lower()\n        else:\n            result =\
    \ result + c.upper()\n    return result\n</code>\n<|/ a tags=string,lowercase,uppercase,haskell\
    \ |>\n<| a |>\n<code>\nimport Data.Char", "    local result = \"\"\n    for char\
    \ in string:\n        if char == char.toUpper():\n            result += \"_\"\n\
    \            result += char.toLower()\n        elseif char == char.toLower():\n\
    \            result += \"_\"\n            result += char.toUpper()\n        else\n\
    \            result += char\n        end\n    end\n    return result\nend\n</cell>\n\
    <code language=julia-1.5>", "    local result = \"\"\n    for c in string:\n \
    \       if c.isupper():\n            result += \"_\"\n            result += c.lower()\n\
    \        else:\n            result += c\n    return result\n</code>\n<|/ a tags=string,lowercase,uppercase,haskell\
    \ |>\n<| a dscore=2 |>\nA simple solution that doesn't use any libraries:\n<code>\n\
    import Data.List", "    local result = \"\"\n    for c in string:\n        if\
    \ c.isupper():\n            result = result + c.lower()\n        else:\n     \
    \       result = result + c.upper()\n    return result\n</code>\n<|/ a tags=string,lowercase,uppercase,haskell\
    \ |>\n<| a dscore=2 |>\n<code>\nimport Data.Char\nimport Data.List", "    \n \
    \   lowercase_chars = string.lower()\n    uppercase_chars = string.upper()\n \
    \   \n    return uppercase_chars + lowercase_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    # Run this cell to test your function above. \n# Note that it may take a few minutes\
    \ to finish.\n@time flip_case(\"hello world\")\n</cell>\n<text>\nExtra Credit!\n\
    Write a function that takes a string and returns a new string where all the spaces\
    \ are replaced with an underscore (_).", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    string::String\n    \n    string::String\n  \
    \  \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    ", "    local result\
    \ = \"\"\n    for c in string:\n        if c.isupper():\n            result +=\
    \ \"_\"\n            result += c.lower()\n        else:\n            result +=\
    \ c\n    return result\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>", "    local\
    \ result = \"\"\n    for char in string:\n        if char == char:\n         \
    \   result += char\n        elseif char.isupper():\n            result += char.lower()\n\
    \        elseif char.islower():\n            result += char.upper()\n        end\n\
    \    end\n    return result\nend\n</cell>\n<code language=julia-1.5>\n@time flip_case(\"\
    Hello\");\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the number of characters in the string.", "    local result = \"\"\n\
    \    for c in string:\n        if c.isupper():\n            result = result +\
    \ c.lower()\n        else:\n            result = result + c.upper()\n    return\
    \ result\nend\n</cell>\n<code language=julia-1.3>\n@time flip_case(\"hello\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in that string. \nHint: Use a for loop to iterate over\
    \ the characters in the string.", "    \n    string = string.lower()\n    \n \
    \   for i in string.chars:\n        if i.isupper():\n            string = string.replace(i,\
    \ i.lower())\n        else:\n            string = string.replace(i, i.upper())\n\
    \    \n    return string\n</cell>\n<cell>\n\"\"\"\nflip_case(\"hello\")\n</cell>\n\
    <cell>\n\"\"\"\nflip_case(\"hello\")\n</cell>\n<cell>\n\"\"\"\nflip_case(\"hello\"\
    )\n</cell>\n<cell>\n\"\"\"\nflip_case(\"hello\")\n</cell>\n<cell>\n\"\"\"\nflip_case(\"\
    hello\")\n</cell>\n<cell>\n\"\"\"\nflip_case(\"hello\")\n</cell>\n<cell>\n\"\"\
    \"\nflip_case(\"hello\")\n</cell>\n<cell>\n\"\"\"\nflip_case(\"hello\")\n</cell>\n\
    <cell>\n\"\"\"\nflip_case(\"hello\")\n</cell>\n<cell>\n\"\"\"\nflip_case(\"hello\"\
    )\n</cell>\n<cell>\n\"\"\"\nflip_case(\"hello\")\n</cell>\n<cell>\n\"\"\"\nflip_case(\"\
    hello\")\n</cell>\n<cell>\n\"\"\"\nflip_case(\"hello\")\n</cell>\n<cell>\n\"\"\
    \"\nflip_case(\"hello\")\n</cell>\n<cell>\n\"\"\"\nflip_case(\"hello\")\n</cell>\n\
    <cell>\n\"\"\"\nflip_case(\"hello\")\n</cell>\n<cell>\n\"\"\"\nflip_case(\"hello\"\
    )\n</cell>\n<cell>\n\"\"\"\nflip_case(\"hello\")\n</cell>\n<cell>\n\"\"\"\nflip_case(\"\
    hello\")\n</cell>\n<cell>\n\"\"\"\nflip_case(\"hello\")\n</cell>\n<cell>\n\"\"\
    \"\nflip_case(\"hello\")\n</cell>\n<cell>\n\"\"\"\nflip_case(\"hello\")\n</cell>\n\
    <cell>\n\"\"\"\nflip_case(\"hello\")\n</cell>\n<cell>\n\"\"\"\nflip_case(\"hello\"\
    )\n</cell>\n<cell>\n\"\"\"\nflip_case(\"hello\")\n</cell>\n<cell>\n\"\"\"\nflip_case(\"\
    hello\")\n</cell>\n<cell>\n\"\"\"\nflip_case(\"hello\")\n</cell>\n<cell>\n\"\"\
    \"\nflip_case(\"hello\")\n</cell>\n<cell>\n\"\"\"\nflip_case(\"hello\")\n</cell>\n",
  "    local result = \"\"\n    for char in string:\n        if char == char:\n  \
    \          result += char\n        else\n            result += char.upper()\n\
    \            result += char.lower()\n        end\n    end\n    return result\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    local result = \"\"\n   \
    \ for char in string:\n        if char == char:\n            result += char\n\
    \        else if char < \"a\" and char > \"z\":\n            result += \"A\"\n\
    \        elif char < \"A\" and char > \"Z\":\n            result += \"a\"\n  \
    \      elif char < \"0\" and char > \"9\":\n            result += \"0\"\n    \
    \    else :\n            result += char\n    end\n    return result\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    string = string.lower()\n    \n    for\
    \ i in string.chars:\n        if i.isupper():\n            string = string.replace(i,\
    \ i.lower())\n            \n    return string\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\n<code>\ndef flip_case(string):\n    \n    string = string.lower()\n\
    \    \n    for i in string.chars:\n        if i.isupper():\n            string\
    \ = string.replace(i, i.lower())\n            \n    return string\n</code>\n<|/\
    \ a tags=string,python |>\n<| c |>\nPlease don't post only code as an answer,\
    \ but also provide an explanation of what your code does and how it solves the\
    \ problem of the question. Answers with an explanation are usually more helpful\
    \ and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<|\
    \ c |>\nWhile this code may provide a solution to the question, it's better to\
    \ add context as to why/how it works. This can help future users learn and eventually\
    \ apply that knowledge to their own code. You are also likely to have positive\
    \ feedback/upvotes from users, when the code is explained.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\ndef flip_case(string):\n    \n    string = string.lower()\n    \n\
    \    for i in string.chars:\n        if i.isupper():\n            string = string.replace(i,\
    \ i.lower())\n            \n    return string\n</code>\n<|/ a tags=string,python\
    \ |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation\
    \ of what your code does and how it solves the problem of the question. Answers\
    \ with an explanation are usually more helpful and of better quality, and are\
    \ more likely to attract upvotes.\n<|/ c |>\n<| a tags=string,python |>\n<code>\n\
    def flip_case(string):\n    \n    string = string.lower()\n    \n    for i in\
    \ string.chars:\n        if i.isupper():\n            string = string.replace(i,\
    \ i.lower())\n            \n    return string\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nPlease don't post only code as an answer, but also provide an explanation\
    \ of what your code does and how it solves the problem of the question. Answers\
    \ with an explanation are usually more helpful and of better quality, and are\
    \ more likely to attract upvotes.\n<|/ c |>\n<| a tags=string,python |>\n<code>\n\
    def flip_case(string):\n    \n    string = string.lower()\n    \n    for i in\
    \ string.chars:\n        if i.isupper():\n            string = string.replace(i,\
    \ i.", "    local result = \"\"\n    for char in string:\n        if char == char:\n\
    \            result += \"_\"\n        else if char.isupper():\n            result\
    \ += \"_\"\n            result += char.lower()\n        else if char.islower():\n\
    \            result += char.upper()\n    return result\n</code>\n<|/ a tags=string,lowercase,uppercase,haskell\
    \ |>\n<| a tags=string,lowercase,uppercase,haskell |>\n<code>\nimport Data.Char",
  "    local result = \"\"\n    for c in string:\n        if c.isupper():\n      \
    \      result += \"_\"\n            result += c.lower()\n        else:\n     \
    \       result += c\n    return result\n</code>\n<|/ a tags=string,lowercase,uppercase,haskell\
    \ |>\n<| a |>\nHere's a solution using Data.Text:\n<code>\nimport qualified Data.Text\
    \ as T", "    \n    lowercase_string = string.lower()\n    uppercase_string =\
    \ string.upper()\n    \n    return uppercase_string + lowercase_string\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    uppercase = string.uppercase()\n    lowercase\
    \ = string.lowercase()\n    \n    return uppercase+lowercase\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@test flip_case(\"Hello\") == \"hELLO\"\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the string with all\
    \ non-alphanumeric characters removed.\ne.g. \"hello!\" => \"hello\"", "    local\
    \ result = \"\"\n    for char in string:\n        if char == char:\n         \
    \   result += char\n        else\n            result += char.upper()\n       \
    \     result += char.lower()\n        end\n    end\n    return result\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    uppercase = string.uppercase()\n    lowercase\
    \ = string.lowercase()\n    \n    return lowercase + uppercase\nend\n</cell>\n\
    <code language=julia-1.5>\n@test flip_case(\"Hello\") == \"hELLO\"\n</cell>\n\
    <text>\nExercise: Write a function that takes a string and returns the string\
    \ with all lowercase letters replaced by uppercase letters.\nHint: Use string.uppercase()\
    \ and string.lowercase().", "    \n    lowercase_chars = string.chars\n    uppercase_chars\
    \ = string.chars.map(char.upper)\n    \n    return string.chars.zip(lowercase_chars,\
    \ uppercase_chars).map(&(&1)).collect{|x| x.join('')}\nend", "    local result\
    \ = \"\"\n    for char in string:\n        if char == char:\n            result\
    \ += char\n        else\n            result += char.upper()\n            result\
    \ += char.lower()\n        end\n    end\n    return result\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    local result = \"\"\n    for char in string:\n\
    \        if char == char:\n            result = result + char\n        else if\
    \ char == char.upper():\n            result = result + char.lower()\n        else\
    \ if char == char.lower():\n            result = result + char.upper()\n     \
    \   end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>\n\
    @time flip_case(\"Hello\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns a new string where all characters have been reversed.\
    \ The original string should not be modified.", "    \n    lowercase_string =\
    \ string.lower()\n    uppercase_string = string.upper()\n    \n    return uppercase_string+lowercase_string\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    local result = \"\"\n   \
    \ for c in string:\n        if c.isupper():\n            result += '_' + c.lower()\n\
    \        else:\n            result += c\n    return result\n</code>\n<|/ a tags=string,lowercase,uppercase,haskell\
    \ |>\n<| a dscore=2 |>\nThe other answers are all good, but I thought I'd add\
    \ my own solution, since I find it more readable:\n<code>\nimport Data.Char",
  "    \n    uppercase = string.uppercase()\n    lowercase = string.lowercase()\n\
    \    \n    return uppercase + lowercase[1:] + lowercase[0]\nend\n</cell>\n<code\
    \ language=julia-1.5>\n# Test the function\n@test flip_case(\"Hello\") == \"hELLO\"\
    \n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the string with all uppercase letters replaced by their lowercase counterparts.\n\
    >>> flip_case(\"Hello\")\n\"hELLO\"\n>>> flip_case(\"hello\")\n\"hELLO\"\n>>>\
    \ flip_case(\"HellO\")\n\"hELLO\"\n>>> flip_case(\"HellO\")\n\"hELLO\"\n>>> flip_case(\"\
    HellO\")\n\"hELLO\"\n>>> flip_case(\"HellO\")\n\"hELLO\"\n>>> flip_case(\"HellO\"\
    )\n\"hELLO\"\n>>> flip_case(\"HellO\")\n\"hELLO\"\n>>> flip_case(\"HellO\")\n\"\
    hELLO\"\n>>> flip_case(\"HellO\")\n\"hELLO\"\n>>> flip_case(\"HellO\")\n\"hELLO\"\
    \n>>> flip_case(\"HellO\")\n\"hELLO\"\n>>> flip_case(\"HellO\")\n\"hELLO\"\n>>>\
    \ flip_case(\"HellO\")\n\"hELLO\"\n>>> flip_case(\"HellO\")\n\"hELLO\"\n>>> flip_case(\"\
    HellO\")\n\"hELLO\"\n>>> flip_case(\"HellO\")\n\"hELLO\"\n>>> flip_case(\"HellO\"\
    )\n\"hELLO\"\n>>> flip_case(\"HellO\")\n\"hELLO\"\n>>> flip_case(\"HellO\")\n\"\
    hELLO\"\n>>> flip_case(\"HellO\")\n\"hELLO\"\n>>> flip_case(\"HellO\")\n\"hELLO\"\
    \n>>> flip_case(\"HellO\")\n\"hELLO\"\n>>> flip_case(\"HellO\")\n\"hELLO\"\n>>>\
    \ flip_case(\"HellO\")\n\"hELLO\"\n>>> flip_case(\"HellO\")\n\"hELLO\"\n>>> flip_case(\"\
    HellO\")\n\"hELLO\"\n>>> flip_case(\"HellO\")\n\"hELLO\"\n>>> flip_case(\"HellO",
  "    \n    lowercase_chars = string.lower()\n    uppercase_chars = string.upper()\n\
    \    \n    return uppercase_chars + lowercase_chars\nend\n</cell>\n<code language=julia-1.1>\n\
    # Test the function\n@test flip_case(\"hello\") == \"hELLO\"\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of uppercase\
    \ letters in the string.", "    \n    local result = \"\"\n    for char in string:\n\
    \        if char == char:\n            result += char\n        elseif char.isupper():\n\
    \            result += char.lower()\n        elseif char.islower():\n        \
    \    result += char.upper()\n        else\n            result += char\n      \
    \  end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.4>",
  "    \n    lowercase_string = string.lower()\n    uppercase_string = string.upper()\n\
    \    \n    return uppercase_string + lowercase_string\nend\n</cell>\n<code language=julia-1.4>\n\
    @test flip_case(\"hello\") == \"hELLO\"\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a string and returns the number of characters in the string.\n\
    Hint: Use length", "    \n    local result = \"\"\n    for character in string:\n\
    \        if character == character.upper():\n            character = character.lower()\n\
    \        \n        result = result + character\n    \n    return result\nend",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    local result =\
    \ \"\"\n    for character in string:\n        if character == character then\n\
    \            result += \"_\"\n        else\n            result += character\n\
    \        end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    lowercase_string = string.lower()\n    uppercase_string = string.upper()\n\
    \    \n    return uppercase_string + lowercase_string\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    local result =\
    \ \"\"\n    for char in string:\n        if char == char:\n            result\
    \ = result + char\n        else\n            result = result + char.upper()\n\
    \        end\n    end\n    return result\nend", "    \n    uppercase = string.uppercase()\n\
    \    lowercase = string.lowercase()\n    \n    return lowercase+uppercase[1:len(uppercase)]\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert flip_case(\"hello\") == \"hELLO\"\
    \n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the string with all characters in lower case and upper case separated by a space.",
  "    local result = \"\"\n    for c in string:\n        if c.isupper():\n      \
    \      result = result + c.lower()\n        else:\n            result = result\
    \ + c.upper()\n    return result\n</code>\n<|/ a tags=string,lowercase,uppercase,haskell\
    \ |>\n<| a dscore=4 |>\n<code>\nimport Data.Char\nimport Data.List", "    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    local result = \"\"\n\
    \    for char in string:\n        if char == char.toUpper():\n            char\
    \ = toLower()\n        elif char == char.toLower():\n            char = toUpper()\n\
    \        end\n        result = result + char\n    return result\nend\n</cell>\n\
    <code language=julia-1.5>", "    local result = \"\"\n    for char in string:\n\
    \        if char == char.toUpper():\n            result = result + char.toLower()\n\
    \        elseif char == char.toLower():\n            result = result + char.toUpper()\n\
    \        else\n            result = result + char\n        end\n    end\n    return\
    \ result\nend\n</cell>\n<code language=julia-1.5>", "    \n    uppercase = string.uppercase()\n\
    \    lowercase = string.lowercase()\n    \n    return lowercase + uppercase[1:len(uppercase)]\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert flip_case(\"Hello\") == \"hELLO\"\
    \n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of uppercase letters.", "    local result = \"\"\n    for char in\
    \ string:\n        if char == char.upper():\n            char.upper()\n      \
    \  elif char == char.lower():\n            char.lower()\n        else :\n    \
    \        result = result + char\n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    local result = \"\"\n    for c in string:\n        if c.isupper():\n      \
    \      result = result + c.lower()\n        else:\n            result = result\
    \ + c.upper()\n    return result\nend\n</cell>\n<code language=julia-1.5>", " \
    \   local result = \"\"\n    for char in string:\n        if char == char:\n \
    \           result += \"_\"\n        else if char.isupper():\n            result\
    \ += \"_\"\n            result += char.lower()\n        else if char.islower():\n\
    \            result += char.upper()\n            result += \"_\"\n    return result\n\
    </code>\n<|/ a tags=string,lowercase,uppercase,haskell,replace |>\n<| a |>\n<code>\n\
    import Data.List", "    local result = \"\"\n    for char in string:\n       \
    \ if char == char:\n            result += \"_\"\n        else\n            result\
    \ += char\n        end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    local result = \"\"\n    for c in string:\n        if c.isupper():\n      \
    \      result = result + c.lower()\n        else:\n            result = result\
    \ + c.upper()\n    return result\nend\n</cell>\n<code language=julia-1.0>\n# Test\
    \ the function\nprintln(flip_case(\"Hello\"))\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of uppercase letters.",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    uppercase\
    \ = string.uppercase()\n    lowercase = string.lowercase()\n    \n    return uppercase+lowercase[1:]+lowercase[0]\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    local result = \"\"\n   \
    \ \n    for char in string:\n        if char == char.toUpper():\n            result\
    \ = result + char.toLower()\n        else\n            result = result + char\n\
    \        end\n    end\n    \n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    string = string.lower()\n    string = string.upper()\n    \n    return\
    \ string\nend", "    \n    string::String \n    \n    string::String \n    \n\
    \    string::String \n    \n    string::String \n    \n    string::String \n \
    \   \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    ", "    \n    uppercase\
    \ = string.uppercase()\n    lowercase = string.lowercase()\n    \n    return lowercase+uppercase[1:len(uppercase)]\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test Cases\n@test flip_case(\"hello\"\
    ) == \"hELLO\"\n@test flip_case(\"hello \") == \"hELLO \"\n@test flip_case(\"\
    hello \") == \"hELLO \"\n@test flip_case(\"hello \") == \"hELLO \"\n@test flip_case(\"\
    hello \") == \"hELLO \"\n@test flip_case(\"hello \") == \"hELLO \"\n@test flip_case(\"\
    hello \") == \"hELLO \"\n@test flip_case(\"hello \") == \"hELLO \"\n@test flip_case(\"\
    hello \") == \"hELLO \"\n@test flip_case(\"hello \") == \"hELLO \"\n@test flip_case(\"\
    hello \") == \"hELLO \"\n@test flip_case(\"hello \") == \"hELLO \"\n@test flip_case(\"\
    hello \") == \"hELLO \"\n@test flip_case(\"hello \") == \"hELLO \"\n@test flip_case(\"\
    hello \") == \"hELLO \"\n@test flip_case(\"hello \") == \"hELLO \"\n@test flip_case(\"\
    hello \") == \"hELLO \"\n@test flip_case(\"hello \") == \"hELLO \"\n@test flip_case(\"\
    hello \") == \"hELLO \"\n@test flip_case(\"hello \") == \"hELLO \"\n@test flip_case(\"\
    hello \") == \"hELLO \"\n@test flip_case(\"hello \") == \"hELLO \"\n@test flip_case(\"\
    hello \") == \"hELLO \"\n@test flip_case(\"hello \") == \"hELLO \"\n@test flip_case(\"\
    hello \") == \"hELLO \"\n@test flip_case(\"hello \") == \"hELLO \"\n@test flip_case(\"\
    hello \") == \"hELLO \"\n@test flip_case(\"hello \") == \"hELLO \"\n@test flip_case(\"\
    hello \") == \"hELLO \"\n@test flip_case(\"hello \") == \"hELLO \"\n@test flip_case(\"\
    hello \") == \"hELLO \"\n@test flip_case(\"hello \") == \"hELLO \"\n@test flip_case(\"\
    hello \") == \"hELLO \"\n@test flip_case(\"hello \") == \"hELLO \"\n@test flip_case(\"\
    hello \") == \"hELLO \"\n@test flip_case(\"hello \") == \"hELLO \"\n", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    string = string.lower()\n    \n \
    \   for c in string.chars:\n        if c.isupper():\n            string = string.replace(c.lower(),\
    \ c.upper())\n    \n    return string\n</cell>\n<cell>\nflip_case('Hello')\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the string\
    \ with all lowercase letters replaced with uppercase letters.", "    local result\
    \ = \"\"\n    for c in string:\n        if c.isupper():\n            result =\
    \ result + c.lower()\n        else:\n            result = result + c.upper()\n\
    \    return result\nend\n</cell>\n<code language=julia-1.3>", "    local result\
    \ = \"\"\n    for c in string.gmatch(\"%a\")::String \n        result = result\
    \ .. tostring((tostring(c):lower()))::String \n    end\n    return result\nend",
  "    \n    local result = \"\"\n    for char in string:\n        if char == char:\n\
    \            result += char\n        else if char.isupper():\n            result\
    \ += char.lower()\n        else if char.islower():\n            result += char.upper()\n\
    \        else :\n            result += char\n    return result\nend", "    \n\
    \    string = string.lower()\n    string = string.upper()\n    \n    return string\n\
    </cell>\n<code language=julia-1.5>\n# Test your function with the below cell",
  "    \n    uppercase = string.uppercase()\n    lowercase = string.lowercase()\n\
    \    \n    return lowercase+uppercase\nend\n</cell>\n<code language=julia-1.5>\n\
    @test flip_case(\"Hello\") == \"hELLO\"\n</cell>\n<text>\nExercise: Write a function\
    \ that takes a string and returns the string with all uppercase letters replaced\
    \ with their lowercase counterparts. For example, if the input string is \"hello\"\
    , the output should be \"hELLO\".", "    local result = \"\"\n    for c in string:\n\
    \        if c.isupper():\n            result += \"_\"\n            result += c.lower()\n\
    \        else:\n            result += c\n    return result\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThanks for your answer! I used your function and I got this error:\
    \ `Undefined function 'flip_case' for input arguments of type 'String'.` I added\
    \ the function to the question so you can see it.\n<|/ c |>\n<| c |>\nI added\
    \ the function to the question so you can see it.\n<|/ c |>\n<| c |>\nI added\
    \ the function to the question so you can see it.\n<|/ c |>\n<| c |>\nI added\
    \ the function to the question so you can see it.\n<|/ c |>\n<| c |>\nI added\
    \ the function to the question so you can see it.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    lowercase_string = string.lower()\n    uppercase_string = string.upper()\n\
    \    \n    return uppercase_string+lowercase_string\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    lowercase_string = string.lower()\n    uppercase_string = string.upper()\n\
    \    \n    return uppercase_string + lowercase_string\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    local result\
    \ = \"\"\n    for char in string:\n        if char == char:\n            result\
    \ += char\n        else if char == char.upper():\n            result += char.lower()\n\
    \        else if char == char.lower():\n            result += char.upper()\n \
    \   return result\nend\n</cell>\n<code language=julia-1.5>", "    local result\
    \ = \"\"\n    for char in string:\n        if char == char:\n            result\
    \ += char\n        elseif char.isupper():\n            result += char.lower()\n\
    \        elseif char.islower():\n            result += char.upper()\n        end\n\
    \    end\n    return result\nend\n</cell>\n<code language=julia-1.3>", "    \n\
    \    local result = \"\"\n    \n    for char in string:\n        if char == char:\n\
    \            result += \"_\"\n        else if char.isupper():\n            result\
    \ += \"_\"\n            result += char.lower()\n        else if char.islower():\n\
    \            result += char.upper()\n            result += \"_\"\n        else:\n\
    \            result += char\n    \n    return result\nend\n</cell>\n<code language=julia-1.5>\n\
    @test flip_case(\"hello\") == \"hELLO\"\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a string and returns a string where all characters are capitalized.",
  "    local result = \"\"\n    for c in string:\n        if c.isupper():\n      \
    \      result = result + c.lower()\n        else:\n            result = result\
    \ + c.upper()\n    return result\nend\n</cell>\n<code language=julia-1.5>", " \
    \   local result = \"\"\n    for c in string.gmatch(\"%a\")::String \n       \
    \ if c == \"a\" then\n            result = \"A\"\n        elseif c == \"A\" then\n\
    \            result = \"a\"\n        else\n            result = result .. c\n\
    \        end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    uppercase = string.uppercase()\n    lowercase = string.lowercase()\n\
    \    \n    return uppercase + lowercase\nend\n</cell>\n<code language=julia-1.5>\n\
    @test flip_case(\"hello\") == \"hELLO\"\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes a string and returns the string with all vowels replaced\
    \ by an underscore. For example, \"hello\" becomes \"_hELLO\".", "    local result\
    \ = \"\"\n    for char in string:\n        if char == char:\n            result\
    \ = result + char\n        elseif char == char.upper():\n            result =\
    \ result + char.lower()\n        elseif char == char.lower():\n            result\
    \ = result + char.upper()\n        else\n            result = result + char\n\
    \        end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    local result = \"\"\n    for c in string:\n        if c.isupper():\n      \
    \      result += \"_\"\n            result += c.lower()\n        else:\n     \
    \       result += c\n    return result\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,lowercase,uppercase,python\
    \ |>\n<code>\ndef flip_case(string):\n    \n    string=string.lower()\n    \n\
    \    string=string.replace('a','A')\n    string=string.replace('b','B')\n    string=string.replace('c','C')\n\
    \    string=string.replace('d','D')\n    string=string.replace('e','E')\n    string=string.replace('f','F')\n\
    \    string=string.replace('g','G')\n    string=string.replace('h','H')\n    string=string.replace('i','I')\n\
    \    string=string.replace('j','J')\n    string=string.replace('k','K')\n    string=string.replace('l','L')\n\
    \    string=string.replace('m','M')\n    string=string.replace('n','N')\n    string=string.replace('o','O')\n\
    \    string=string.replace('p','P')\n    string=string.replace('q','Q')\n    string=string.replace('r','R')\n\
    \    string=string.replace('s','S')\n    string=string.replace('t','T')\n    string=string.replace('u','U')\n\
    \    string=string.replace('v','V')\n    string=string.replace('w','W')\n    string=string.replace('x','X')\n\
    \    string=string.replace('y','Y')\n    string=string.replace('z','Z')\n    \n\
    \    string=string.replace(' ','')\n    \n    return string\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\ndef flip_case(string):\n    \n    string=string.lower()\n\
    \    \n    string=string.replace('a','A')\n    string=string.replace('b','B')\n\
    \    string=string.replace('c','C')\n    string=string.replace('d','D')\n    string=string.replace('e','E')\n\
    \    string=string.replace('f','F')\n    string=string.replace('g','G')\n    string=string.replace('h','H')\n\
    \    string=string.replace('i','I')\n    string=string.replace('j','J')\n    string=string.replace('k','K')\n\
    \    string=string.replace('l','L')\n    string=string.replace('m", "    \n  \
    \  string = string.lower()\n    string = string.upper()\n    \n    return string\n\
    end", "    \n    uppercase = string.uppercase()\n    lowercase = string.lowercase()\n\
    \    \n    uppercase = uppercase.replace(lowercase, lowercase)\n    lowercase\
    \ = lowercase.replace(uppercase, uppercase)\n    \n    return lowercase + uppercase\n\
    end\n</cell>\n<code language=julia-1.5>", "    local result = \"\"\n    for character\
    \ in string:\n        if character == character then\n            character =\
    \ character .. \"A\"\n        elseif character == \"A\" then\n            character\
    \ = character .. \"a\"\n        elseif character == \"a\" then\n            character\
    \ = character .. \"A\"\n        end\n        result = result .. character\n  \
    \  end\n    return result\nend\n</cell>\n<code language=julia-1.5>", "    local\
    \ result = \"\"\n    for char in string:\n        if char == char:\n         \
    \   result += char\n        else if char < \"a\" and char > \"z\":\n         \
    \   result += \"A\"\n        elif char < \"A\" and char > \"Z\":\n           \
    \ result += \"a\"\n        elif char < \"0\" and char > \"9\":\n            result\
    \ += \"0\"\n        else:\n            result += char\n    return result\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>", "    \n    string = string.lower()\n\
    \    string = string.upper()\n    \n    return string\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    count_substrings(string::String, substring::String)", "    local result\
    \ = \"\"\n    for char in string:\n        if char == char.toLower():\n      \
    \      char.toUpper()\n        else\n            char.toLower()\n        end\n\
    \    end\n    return result\nend\n</cell>\n<code language=julia-1.4>", "    \n\
    \    chars = string.chars\n    \n    for i in 0..(length(chars)-1)\n        chars[i]\
    \ = chars[i].toUpper()\n        chars[length(chars)-i-1] = chars[length(chars)-i-1].toLower()\n\
    \    end\n    \n    return join(chars, \"\")\nend\n</cell>\n<code language=julia-1.5>\n\
    @time flip_case(\"Hello\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns a new string where all characters have been converted\
    \ to uppercase and all characters have been converted to lowercase.", "    local\
    \ result = \"\"\n    for char in string:\n        if char >= 'a' and char <= 'z':\n\
    \            char = char - 32\n        elif char >= 'A' and char <= 'Z':\n   \
    \         char = char - 64\n        result += char\n    return result\n</code>\n\
    <|/ a tags=string,lowercase,uppercase,haskell |>\n<| c |>\nThis doesn't work for\
    \ all characters, e.g. `flip_case(\"\xDF\")` returns `\"SS\"`.\n<|/ c |>\n<| c\
    \ |>\nI guess I should have mentioned that I was aware of that. Thanks for pointing\
    \ it out.\n<|/ c |>\n<| c |>\nI guess I should have mentioned that I was aware\
    \ of that. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nI guess I should have\
    \ mentioned that I was aware of that. Thanks for pointing it out.\n<|/ c |>\n\
    <| c |>\nI guess I should have mentioned that I was aware of that. Thanks for\
    \ pointing it out.\n<|/ c |>\n<| a dscore=4 |>\n<code>\nimport Data.Char", " \
    \   \n    string::String\n    \n    lower::String\n    \n    upper::String\n \
    \   \n    lower::String\n    \n    upper::String\n    \n    lower::String\n  \
    \  \n    upper::String\n    \n    lower::String\n    \n    upper::String\n   \
    \ \n    lower::String\n    \n    upper::String\n    \n    lower::String\n    \n\
    \    upper::String\n    \n    lower::String\n    \n    upper::String\n    \n \
    \   lower::String\n    \n    upper::String\n    \n    lower::String\n    \n  \
    \  upper::String\n    \n    lower::String\n    \n    upper::String\n    \n   \
    \ lower::String\n    \n    upper::String\n    \n    lower::String\n    \n    upper::String\n\
    \    \n    lower::String\n    \n    upper::String\n    \n    lower::String\n \
    \   \n    upper::String\n    \n    lower::String\n    \n    upper::String\n  \
    \  \n    lower::String\n    \n    upper::String\n    \n    lower::String\n   \
    \ \n    upper::String\n    \n    lower::String\n    \n    upper::String\n    \n\
    \    lower::String\n    \n    upper::String\n    \n    lower::String\n    \n \
    \   upper::String\n    \n    lower::String\n    \n    upper::String\n    \n  \
    \  lower::String\n    \n    upper::String\n    \n    lower::String\n    \n   \
    \ upper::String\n    \n    lower::String\n    \n    upper::String\n    \n    lower::String\n\
    \    \n    upper::String\n    \n    lower::String\n    \n    upper::String\n \
    \   \n    lower::String\n    \n    upper::String\n    \n    lower::String\n  \
    \  \n    upper::String\n    \n    lower::String\n    \n    upper::String\n   \
    \ \n    lower::String\n    \n    upper::String\n    \n    lower::String\n    \n\
    \    upper::String\n    \n    lower::String\n    \n    upper::String\n    \n \
    \   lower::String\n    \n    upper::String\n    \n    lower::String\n    \n  \
    \  upper::String\n    \n    lower::String\n    \n    upper::String\n    \n   \
    \ lower::String\n    \n    upper::String\n    ", "    \n    uppercase = string.uppercase()\n\
    \    lowercase = string.lowercase()\n    \n    return lowercase+uppercase\nend\n\
    </cell>\n<code language=julia-1.5>\n@test flip_case(\"Hello\") == \"hELLO\"\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the string with all spaces replaced by underscores.", "    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    local result = \"\"\n    for char in string:\n        if char == char:\n  \
    \          result += char\n        else\n            result += char.upper()\n\
    \            result += char.lower()\n        end\n    end\n    return result\n\
    end\n</cell>\n<code language=julia-1.5>\n@time flip_case(\"Hello\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the string\
    \ with all vowels replaced by an underscore.", "    local result = \"\"\n    for\
    \ c in string:\n        if c.isupper():\n            result = result + c.lower()\n\
    \        else:\n            result = result + c.upper()\n    return result\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=string,lowercase,uppercase,haskell |>\n<code>\nimport\
    \ Data.Char", "    \n    uppercase = string.uppercase()\n    lowercase = string.lowercase()\n\
    \    \n    uppercase = uppercase.replace(uppercase,lowercase)\n    lowercase =\
    \ lowercase.replace(lowercase,uppercase)\n    \n    return lowercase\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    uppercase = string.uppercase()\n    lowercase\
    \ = string.lowercase()\n    \n    return lowercase+uppercase[1:len(uppercase)]\n\
    end\n</cell>\n<code language=julia-1.5>\n@time flip_case(\"Hello\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the string\
    \ with all vowels replaced by an underscore.", "    local result = \"\"\n    for\
    \ char in string:\n        if char == char:\n            result += char\n    \
    \    else if char.isupper():\n            result += char.lower()\n        else\
    \ if char.islower():\n            result += char.upper()\n    return result\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "    \n    lowercase =\
    \ string.lower()\n    uppercase = string.upper()\n    \n    return lowercase +\
    \ uppercase\nend\n</cell>\n<code language=julia-1.5>", "    local result = \"\"\
    \n    for c in string:\n        if c.isupper():\n            result += \"_\"\n\
    \            result += c.lower()\n        else:\n            result += c\n   \
    \ return result\n</code>\n<|/ a tags=string,lowercase,uppercase,haskell |>\n<|\
    \ a tags=string,lowercase,uppercase,haskell |>\n<code>\nimport Data.List", " \
    \   \n    local result = \"\"\n    for char in string:\n        if char == char.upper():\n\
    \            char = char.lower()\n        elif char == char.lower():\n       \
    \     char = char.upper()\n        result += char\n    return result\n</code>\n\
    <|/ a tags=string,lowercase,uppercase,haskell |>\n<| c |>\nThis doesn't work if\
    \ you have a string like `'HellO'`\n<|/ c |>\n<| c |>\nIt works if you have a\
    \ string like `'HellO'`\n<|/ c |>\n<| c |>\nIt works if you have a string like\
    \ `'HellO'`\n<|/ c |>\n<| c |>\nIt works if you have a string like `'HellO'`\n\
    <|/ c |>\n<| c |>\nIt works if you have a string like `'HellO'`\n<|/ c |>\n<|\
    \ a tags=string,lowercase,uppercase,haskell |>\n<code>\nimport Data.Char", " \
    \   \n    local result = \"\"\n    \n    for char in string:\n        if char\
    \ == char:\n            result += char\n        else if char.isupper():\n    \
    \        result += char.lower()\n        else if char.islower():\n           \
    \ result += char.upper()\n        else :\n            result += char\n    \n \
    \   return result\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
