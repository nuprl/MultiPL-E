name: HumanEval_79_decimal_to_binary
language: julia
prompt: "\"\"\"You will be given a number in decimal form and your task is to convert\
  \ it to\n    binary format. The function should return a string, with each character\
  \ representing a binary\n    number. Each character in the string will be '0' or\
  \ '1'.\n\n    There will be an extra couple of characters 'db' at the beginning\
  \ and at the end of the string.\n    The extra characters are there to help with\
  \ the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\
  \n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\nfunction decimal_to_binary(decimal::Int64)::String\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = decimal_to_binary;\n\t@test(candidate(0)\
  \ == \"db0db\")\n\t@test(candidate(32) == \"db100000db\")\n\t@test(candidate(103)\
  \ == \"db1100111db\")\n\t@test(candidate(15) == \"db1111db\")\nend\n"
completions: ["    \n    binary = \"\"\n    \n    decimal = decimal % 2\n    \n  \
    \  while decimal != 0\n        \n        if decimal < 2\n            \n      \
    \      binary += \"0\"\n            \n        else\n            \n           \
    \ binary += \"1\"\n            \n        end\n        \n        decimal = decimal\
    \ / 2\n        \n    end\n    \n    binary = binary[2:end]\n    \n    return \"\
    db\" + binary + \"db\"\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts binary numbers to decimal numbers. Your function\
    \ should take in a string and return a number.", "    \n    binary_string = \"\
    \"\n    \n    # Your code here\n    \n    return binary_string\nend\n</cell>\n\
    <text>\nRun the cell below to test your code. Make sure everything is correct.\
    \ Then, modify your function so that it calls your function above. Finally, test\
    \ your code.", "    \n    binary = \"\"\n    \n    if decimal < 0\n        error(\"\
    Decimal cannot be negative\")\n    \n    if decimal > 2 ** 64\n        error(\"\
    Decimal cannot be greater than 2^64\")\n    \n    decimal = decimal % 2\n    \n\
    \    while decimal > 0\n        binary = binary + \"1\"\n        decimal = decimal\
    \ / 2\n    \n    binary = binary + \"0\"\n    \n    binary = binary + \"db\"\n\
    \    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a binary number to a decimal number. \nThe\
    \ function should take in a string with each character representing a binary number\
    \ and\nreturn an Int64 number.", "    \n    binary_string = \"\"\n    \n    if\
    \ decimal < 2 || decimal > 64\n        return \"Invalid input\"\n    \n    while\
    \ decimal > 0\n        binary_string = binary_string + \"0\"\n        decimal\
    \ = decimal - 1\n    end\n    \n    while decimal >= 2\n        binary_string\
    \ = binary_string + \"1\"\n        decimal = decimal - 2\n    end\n    \n    binary_string\
    \ = \"db\" + binary_string\n    \n    return binary_string\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that converts a binary number to a decimal number.\
    \ Your function should take in a string and return a number.", "    \n    binary\
    \ = \"\"\n    \n    decimal = decimal % 2\n    \n    if decimal > 0 \n       \
    \ binary = binary + \"1\"\n    else \n        binary = binary + \"0\"\n    \n\
    \    decimal = decimal / 2\n    \n    if decimal > 0 \n        binary = binary\
    \ + \"1\"\n    else \n        binary = binary + \"0\"\n    \n    decimal = decimal\
    \ / 2\n    \n    if decimal > 0 \n        binary = binary + \"1\"\n    else \n\
    \        binary = binary + \"0\"\n    \n    decimal = decimal / 2\n    \n    if\
    \ decimal > 0 \n        binary = binary + \"1\"\n    else \n        binary = binary\
    \ + \"0\"\n    \n    decimal = decimal / 2\n    \n    if decimal > 0 \n      \
    \  binary = binary + \"1\"\n    else \n        binary = binary + \"0\"\n    \n\
    \    decimal = decimal / 2\n    \n    if decimal > 0 \n        binary = binary\
    \ + \"1\"\n    else \n        binary = binary + \"0\"\n    \n    decimal = decimal\
    \ / 2\n    \n    if decimal > 0 \n        binary = binary + \"1\"\n    else \n\
    \        binary = binary + \"0\"\n    \n    decimal = decimal / 2\n    \n    if\
    \ decimal > 0 \n        binary = binary + \"1\"\n    else \n        binary = binary\
    \ + \"0\"\n    \n    decimal = decimal / 2\n    \n    if decimal > 0 \n      \
    \  binary = binary + \"1\"\n    else \n        binary = binary + \"0\"\n    \n\
    \    decimal = decimal / 2\n    \n    if decimal > 0 \n        binary = binary\
    \ + \"1\"\n    else \n        binary = binary + \"0\"\n    \n    decimal = decimal\
    \ / 2\n    \n    if decimal > 0 \n        binary = binary + \"1\"\n    else \n\
    \        binary = binary + \"0\"\n    \n    decimal = decimal / 2\n    \n    if\
    \ decimal > 0 \n        binary = binary + \"1\"\n    else \n        binary = binary\
    \ + \"0\"\n    \n    decimal = decimal / 2\n    \n    if decimal > 0 \n      \
    \  binary = binary + \"1\"\n    else \n        binary = binary + \"0\"\n    \n\
    \    decimal = decimal / 2\n    \n    if decimal > 0 \n        binary = binary\
    \ + \"1\"\n    else \n        binary = binary + \"0\"\n    \n    decimal = decimal\
    \ / 2\n    \n    if decimal > 0 \n        binary = binary + \"1\"\n    else \n\
    \        binary = binary + \"0\"\n    \n    decimal = decimal / 2\n    ", "  \
    \  binary_string = \"\"\n    \n    # Write your code here\n    \n    return binary_string\n\
    end\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nProblem 7\nWrite\
    \ a function that converts a decimal number to a binary number with leading zeros.\
    \ For example the decimal number 15 should become \"00000000011111\".", "    \n\
    \    binary_string = \"\"\n    \n    if decimal < 2 || decimal > 64\n        error(\"\
    The decimal number must be between 2 and 64.\")\n    end", "    \n    binary =\
    \ \"\"\n    \n    if decimal < 2 || decimal > 64\n        return \"Invalid decimal\
    \ number\"\n    \n    decimal = decimal % 2\n    \n    while decimal != 0\n  \
    \      binary = binary + \"0\"\n        decimal = decimal / 2\n    \n    binary\
    \ = binary + \"1\"\n    \n    binary = binary + \"db\"\n    \n    return binary\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that converts a binary number\
    \ to decimal form. The function should take in a string and return a string.",
  "    binary = \"\"\n    decimal = decimal % 2\n    while decimal != 0\n        binary\
    \ = binary + \"0\"\n        decimal = decimal - 1\n    binary = binary + \"1\"\
    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a binary number to a decimal number. Your\
    \ function should take in a string with each character representing a binary number\
    \ and returns an Int64.", "    \n    binary_string = \"\"\n    \n    if decimal\
    \ > 0 \n        binary_string = decimal_to_binary(decimal - 1)\n    \n    binary_string\
    \ += \"0\"\n    \n    if decimal < 10 \n        binary_string += \"1\"\n    \n\
    \    return binary_string\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a binary number to a decimal number. Your\
    \ function should take in a string and return a number.", "    \n    if decimal\
    \ < 0\n        error(\"Decimal number must be positive\")\n    \n    if decimal\
    \ > 2^(64-1)\n        error(\"Decimal number must be less than 2^64\")\n    \n\
    \    binary = \"\"\n    \n    while decimal > 0\n        binary = string(decimal%2)\
    \ + binary\n        decimal = floor(decimal/2)\n    end\n    \n    binary = string(64\
    \ - binary.length) + binary\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a binary number to\
    \ a decimal number. Your function should take in a binary string and return a\
    \ decimal number.", "    \n    binary = \"\"\n    \n    if decimal < 2 || decimal\
    \ > 64\n        return \"Invalid input\"\n    \n    decimal = decimal % 2\n  \
    \  \n    while decimal != 0\n        binary = binary + \"0\"\n        decimal\
    \ = decimal // 2\n    \n    binary = binary + \"1\"\n    \n    binary = binary\
    \ + \"db\"\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts binary numbers to\
    \ decimal numbers. Your function should take in a string with each character\n\
    representing a binary number and return the decimal number represented by the\
    \ binary number. There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    binary_string = \"\"\n    \n    for digit in decimal\n\
    \        binary_string += \"0\"\n    \n    binary_string += \"1\"\n    \n    return\
    \ binary_string\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a decimal number to its binary representation\
    \ in reverse order. For example,\n    decimal_to_binary_reverse(15) returns \"\
    1111\"", "    \n    binary = \"\"\n    \n    if decimal < 2 || decimal > 64\n\
    \        return \"Invalid input\"\n    \n    decimal = decimal % 2\n    \n   \
    \ while decimal != 0\n        binary = binary + \"0\"\n        decimal = decimal\
    \ - 1\n    \n    binary = binary + \"1\"\n    \n    return binary\nend\n</cell>\n\
    <code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(32)\n</cell>\n<text>\nProblem 4\nWrite a function that takes\
    \ a string and returns the number of characters in the string.", "    \n    binary\
    \ = \"\"\n    \n    for digit in decimal\n        binary = binary + str((digit\
    \ % 2) == 0)\n    end\n    \n    binary = binary + \"db\"\n    \n    return binary\n\
    end\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that converts binary numbers to decimal numbers. Your function should\
    \ take in a binary string and return a decimal number.", "    \n    binary_string\
    \ = \"\"\n    \n    if decimal > 0 \n        binary_string += \"1\"\n    else\
    \ \n        binary_string += \"0\"\n    \n    binary_string += decimal_to_binary(decimal\
    \ - 1)\n    \n    return binary_string\nend", "    binary = \"\"\n    for digit\
    \ in decimal\n        binary += if digit == 0 then \"0\" else \"1\"\n    end\n\
    \    return \"db\" + binary + \"db\"\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a binary number to\
    \ a decimal number. The function should take in a string and return a Int64.",
  "    \n    binary = \"\"\n    \n    decimal = decimal % 2\n    \n    while decimal\
    \ != 0\n        \n        decimal = decimal // 2\n        \n        binary = \"\
    0\" + binary\n        \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a binary number to\
    \ a decimal number. The function should take in a binary string and return the\
    \ decimal number.", "    \n    binary_string = \"\"\n    \n    if decimal < 2\
    \ || decimal > 64\n        binary_string = \"Invalid input\"\n        return binary_string\n\
    \    \n    decimal = decimal % 2\n    \n    while decimal != 0\n        binary_string\
    \ = binary_string + \"0\"\n        decimal = decimal // 2\n    \n    binary_string\
    \ = binary_string + \"1\"\n    \n    return binary_string\nend\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ binary numbers to decimal numbers. Your function should take in a string\nof\
    \ binary numbers and return the decimal equivalent of the binary numbers. Your\
    \ function should return\na string, with each character representing a decimal\
    \ number. Each character in the string will be a \nnumber from 0 to 15.", "  \
    \  \n    binary = \"\"\n    \n    if decimal < 0\n        error(\"Decimal cannot\
    \ be negative\")\n    \n    decimal = abs(decimal)\n    \n    while decimal >\
    \ 0\n        binary = binary + \"0\"\n        decimal = decimal - 1\n    end\n\
    \    \n    while decimal >= 1\n        binary = binary + \"1\"\n        decimal\
    \ = decimal - 1\n    end\n    \n    binary = binary + \"b\"\n    \n    return\
    \ binary\nend\n</cell>\n<text>\nExercise 3\nWrite a function that converts a binary\
    \ number to a decimal number. The function should take in a string and return\
    \ a number.", "    \n    binary_string = \"\"\n    \n    if decimal < 2 || decimal\
    \ > 64\n        return binary_string\n    \n    binary_string = \"db\"\n    \n\
    \    while decimal > 1\n        binary_string = binary_string + \"0\"\n      \
    \  decimal = decimal / 2\n    end\n    \n    binary_string = binary_string + \"\
    1\"\n    \n    return binary_string\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts binary numbers to\
    \ decimal numbers. Your function should take in a string with each character representing\
    \ a binary number and return a string with each character representing a decimal\
    \ number. Each character in the string will be a decimal number.", "    \n   \
    \ if decimal < 0\n        error(\"Decimal number must be positive\")\n    end\n\
    \    \n    binary = \"\"\n    \n    for digit in decimal_to_binary(decimal - 1)\n\
    \        binary *= 10\n        binary += digit\n    end\n    \n    binary *= 10\n\
    \    binary += decimal_to_binary(decimal - 1)\n    \n    binary *= 10\n    binary\
    \ += \"db\"\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a binary number to\
    \ a decimal number. The function should take in a string and return a Int64.",
  "    \n    binary = \"\"\n    \n    decimal = decimal % 2\n    \n    if decimal\
    \ > 0 \n        binary = binary + \"1\"\n    else \n        binary = binary +\
    \ \"0\"\n    \n    decimal = decimal / 2\n    \n    while decimal > 0 \n     \
    \   decimal = decimal / 2\n        binary = binary + \"0\"\n    \n    binary =\
    \ binary + \"db\"\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts binary numbers to\
    \ decimal numbers. Your function should take in a string with each character representing\
    \ a binary number and return the decimal number represented by the binary number.\
    \ There will be an extra couple of characters 'db' at the beginning and at the\
    \ end of the string. The extra characters are there to help with the format.",
  "    \n    binary = \"\"\n    \n    if decimal < 2 || decimal > 64\n        throw(ArgumentError(\"\
    decimal must be between 2 and 64\"))\n    end", "    binary_string = \"\"\n  \
    \  \n    for digit in decimal\n        binary_string += \"0\"\n    \n    binary_string\
    \ += \"1\"\n    \n    return binary_string\nend\n</cell>\n<code language=julia-1.4>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.4>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a binary string to\
    \ a decimal number. Your function should take in a binary string as input and\
    \ return a decimal number.", "    binary_string = \"\"\n    \n    # Your code\
    \ here\n    \n    return binary_string\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a binary number to\
    \ decimal form. Your function should take in a string and return a string.", " \
    \   \n    binary = \"\"\n    \n    if decimal < 2\n        binary = binary + \"\
    0\"\n    else\n        binary = binary + \"1\"\n    end\n    \n    decimal = decimal\
    \ - 2\n    \n    while decimal >= 0\n        binary = binary + \"0\"\n       \
    \ decimal = decimal - 1\n    end\n    \n    binary = binary + \"b\"\n    \n  \
    \  return binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the number of characters\
    \ in the string.", "    \n    if decimal < 0\n        error(\"Decimal number must\
    \ be positive\")\n    end", "    \n    binary_string = \"\"\n    \n    decimal\
    \ = decimal % 2\n    \n    while decimal != 0\n        binary_string = binary_string\
    \ + \"0\"\n        decimal = decimal - 1\n    \n    binary_string = binary_string\
    \ + \"1\"\n    \n    return binary_string\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that will convert a decimal number to binary in reverse order.\
    \ For example,\n    decimal_to_binary_reversed(15) should return \"1111\"", " \
    \   \n    binary_string = \"\"\n    \n    if decimal < 2 || decimal > 64\n   \
    \     error(\"Invalid input\")\n    end\n    \n    binary_string = binary_string\
    \ + \"0\"\n    \n    for i = 2 to 64\n        if decimal % i == 0\n          \
    \  binary_string = binary_string + \"1\"\n        else\n            binary_string\
    \ = binary_string + \"0\"\n        end\n    end\n    \n    binary_string = binary_string\
    \ + \"db\"\n    \n    return binary_string\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts binary numbers to\
    \ decimal numbers. Your function should take in a string with each character representing\
    \ a binary number and return a string with each character representing a decimal\
    \ number. Each character in the string will be a number from 0 to 9.", "    binary\
    \ = \"\"\n    \n    # Your code here\n    \n    return binary\nend\n</cell>\n\
    <text>\nSolution\nSolution notebook", "    binary = \"\"\n    for n in decimal:\n\
    \        binary = binary + str((n & (1 << i)) > 0 ? \"1\" : \"0\") + \"db\"\n\
    \    return binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a binary string to a decimal integer.", " \
    \   \n    binary = \"\"\n    \n    for i in decimal_to_binary(decimal)\n     \
    \   binary = binary + i\n    end\n    \n    return binary\nend\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(32)\n</cell>\n<text>\nProblem 3\nWrite a function that converts\
    \ decimal to hexadecimal.", "    \n    binary_string = \"\"\n    \n    if decimal\
    \ < 2 \n        binary_string = \"0\"\n    else \n        binary_string = \"1\"\
    \n    \n    binary_string += decimal_to_binary(decimal - 2)\n    \n    return\
    \ binary_string\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts binary numbers to decimal numbers.", "   \
    \ binary = \"\"\n    decimal = decimal % 2\n    \n    while decimal != 0\n   \
    \     decimal = decimal // 2\n        binary += \"0\"\n    end\n    \n    binary\
    \ += \"1\"\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that converts a binary number to\
    \ a decimal number. Your function should take in a string and return a Int64.",
  "    binary_string = \"\"\n    binary_string += \"0\"\n    binary_string += \"0\"\
    \n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string +=\
    \ \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string ", "    \n    binary\
    \ = \"\"\n    \n    decimal = decimal % 2\n    \n    if decimal > 0 \n       \
    \ binary = binary + \"1\"\n    else\n        binary = binary + \"0\"\n    end\n\
    \    \n    while decimal > 0 \n        decimal = decimal / 2\n        binary =\
    \ binary + \"0\"\n    end\n    \n    return binary + \"db\"\nend\n</cell>\n<text>\n\
    Now let's test your function", "    \n    binary = \"\"\n    \n    if decimal\
    \ < 2 || decimal > 64\n        throw(ArgumentError(\"The decimal number must be\
    \ between 2 and 64\"))\n    end\n    \n    binary = string(64, '0')\n    \n  \
    \  if decimal < 2\n        throw(ArgumentError(\"The decimal number must be between\
    \ 2 and 64\"))\n    end\n    \n    binary = string(64, '0')\n    \n    if decimal\
    \ < 2\n        throw(ArgumentError(\"The decimal number must be between 2 and\
    \ 64\"))\n    end\n    \n    binary = string(64, '0')\n    \n    if decimal <\
    \ 2\n        throw(ArgumentError(\"The decimal number must be between 2 and 64\"\
    ))\n    end\n    \n    binary = string(64, '0')\n    \n    if decimal < 2\n  \
    \      throw(ArgumentError(\"The decimal number must be between 2 and 64\"))\n\
    \    end\n    \n    binary = string(64, '0')\n    \n    if decimal < 2\n     \
    \   throw(ArgumentError(\"The decimal number must be between 2 and 64\"))\n  \
    \  end\n    \n    binary = string(64, '0')\n    \n    if decimal < 2\n       \
    \ throw(ArgumentError(\"The decimal number must be between 2 and 64\"))\n    end\n\
    \    \n    binary = string(64, '0')\n    \n    if decimal < 2\n        throw(ArgumentError(\"\
    The decimal number must be between 2 and 64\"))\n    end\n    \n    binary = string(64,\
    \ '0')\n    \n    if decimal < 2\n        throw(ArgumentError(\"The decimal number\
    \ must be between 2 and 64\"))\n    end\n    \n    binary = string(64, '0')\n\
    \    \n    if decimal < 2\n        throw(ArgumentError(\"The decimal number must\
    \ be between 2 and 64\"))\n    end\n    \n    binary = string(64, '0')\n    \n\
    \    if decimal < 2\n        throw(ArgumentError(\"The decimal number must be\
    \ between 2 and 64\"))\n    end\n    \n    binary = string(64, '0')\n    \n  \
    \  if decimal < 2\n        throw(ArgumentError(\"The decimal number must be between\
    \ 2 and 64\"))\n    end\n    \n    binary = string(64, '0')\n    \n    if decimal\
    \ < 2\n        throw(ArgumentError(\"The decimal number must be between 2 and\
    \ 64\"))\n    end\n    \n    binary = string(64, '0')\n    \n    if decimal <\
    \ 2\n        throw(ArgumentError(\"The decimal number must be between 2 and 64\"\
    ))\n    end\n    \n    binary = string(64, '0')\n    \n    if decimal < 2\n  \
    \      throw(ArgumentError(\"The decimal number must be between 2 and 64\"))\n\
    \    end\n    \n    binary = string(64, '0')\n    \n    if decimal < 2", "   \
    \ \n    binary_string = \"\"\n    \n    if decimal < 2 || decimal > 64\n     \
    \   binary_string = \"Invalid input\"\n        return binary_string\n    \n  \
    \  decimal = decimal % 2\n    \n    while decimal > 0\n        binary_string =\
    \ binary_string + \"1\"\n        decimal = decimal - 1\n    \n    binary_string\
    \ = binary_string + \"0\"\n    \n    return binary_string\nend\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite a function that will\
    \ convert a binary string to a decimal string. Your function should take in a\
    \ binary string and return a decimal string.", "    \n    binary_string = \"\"\
    \n    \n    if decimal < 2 || decimal > 64\n        return \"Invalid input\"\n\
    \    \n    binary_string = \"db\"\n    \n    for i in decimal_to_binary(decimal\
    \ - 2)\n        binary_string += i\n    \n    return binary_string\nend\n</cell>\n\
    <code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ binary numbers to decimal numbers. Your function should take in a string and\
    \ return a number.", "    \n    if decimal == 0 \n        return \"db0\"\n   \
    \ else if decimal == 1 \n        return \"db1\"\n    else \n        binary_string\
    \ = \"\"\n        \n        for i = 2 to decimal \n            binary_string +=\
    \ \"0\"\n        \n        binary_string += \"1\"\n        \n        return binary_string\n\
    \    \nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n\
    <code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 2\n\
    Write a function that converts a binary number to decimal form. The function should\
    \ take in a binary string and return a decimal integer.", "    \n    binary =\
    \ \"\"\n    \n    if decimal < 2 || decimal > 64\n        return \"Invalid input\"\
    \n    \n    if decimal < 10\n        binary = \"0\"\n    \n    if decimal < 16\n\
    \        binary = \"0\"\n    \n    if decimal < 32\n        binary = \"0\"\n \
    \   \n    if decimal < 48\n        binary = \"0\"\n    \n    if decimal < 64\n\
    \        binary = \"1\"\n    \n    if decimal < 80\n        binary = \"1\"\n \
    \   \n    if decimal < 96\n        binary = \"1\"\n    \n    if decimal < 112\n\
    \        binary = \"1\"\n    \n    if decimal < 128\n        binary = \"1\"\n\
    \    \n    if decimal < 144\n        binary = \"1\"\n    \n    if decimal < 160\n\
    \        binary = \"1\"\n    \n    if decimal < 176\n        binary = \"1\"\n\
    \    \n    if decimal < 192\n        binary = \"1\"\n    \n    if decimal < 208\n\
    \        binary = \"1\"\n    \n    if decimal < 224\n        binary = \"1\"\n\
    \    \n    if decimal < 240\n        binary = \"1\"\n    \n    if decimal < 256\n\
    \        binary = \"1\"\n    \n    if decimal < 264\n        binary = \"1\"\n\
    \    \n    if decimal < 280\n        binary = \"1\"\n    \n    if decimal < 296\n\
    \        binary = \"1\"\n    \n    if decimal < 312\n        binary = \"1\"\n\
    \    \n    if decimal < 328\n        binary = \"1\"\n    \n    if decimal < 344\n\
    \        binary = \"1\"\n    \n    if decimal < 360\n        binary = \"1\"\n\
    \    \n    if decimal < 376\n        binary = \"1\"\n    \n    if decimal < 392\n\
    \        binary = \"1\"\n    \n    if decimal < 408\n        binary = \"1\"\n\
    \    \n    if decimal < 424\n        binary = \"1\"\n    \n    if decimal < 440\n\
    \        binary = \"1\"\n    \n    if decimal < 456\n        binary = \"1\"\n\
    \    \n    if decimal < 472\n        binary = \"1\"\n    \n    if decimal < 488\n\
    \        binary = \"1\"\n    \n    if decimal < 504\n        binary = \"1\"\n\
    \    \n    if decimal < 520\n        binary = \"1\"\n    \n    if decimal < 536\n\
    \        binary = \"1\"\n    \n    if decimal < 552\n        binary = \"1\"\n\
    \    \n    if decimal < 568\n        binary = \"1\"\n    \n    if decimal < 584\n\
    \        binary = \"1\"\n    \n    if decimal < 600\n        binary = \"1\"\n\
    \    \n    if decimal < 616\n        binary = \"1\"", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    binary_string = \"\"\n    \n    if\
    \ decimal < 2 || decimal > 64\n        return \"Invalid input\"\n    \n    decimal\
    \ = decimal % 2\n    \n    while decimal != 0\n        binary_string = binary_string\
    \ + \"0\"\n        decimal = decimal / 2\n    \n    binary_string = binary_string\
    \ + \"1\"\n    \n    binary_string = \"db\" + binary_string\n    \n    return\
    \ binary_string\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that converts a binary number to a decimal number. The function\
    \ should take in a string and return a Int64.", "    \n    binary_string = \"\"\
    \n    \n    if decimal < 0\n        binary_string = \"db\"\n        decimal =\
    \ -decimal\n    end", "    \n    binary_string = \"\"\n    \n    for digit in\
    \ decimal\n        binary_string += \"0\"\n    \n    binary_string += \"1\"\n\
    \    \n    return binary_string\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a binary number to a decimal number. Your\
    \ function should take in a string and return a string.", "    \n    binary_string\
    \ = \"\"\n    \n    if decimal < 2 || decimal > 64\n        return \"Invalid input\"\
    \n    \n    decimal = decimal % 2\n    \n    while decimal != 0\n        binary_string\
    \ = binary_string + \"0\"\n        decimal = decimal / 2\n    \n    binary_string\
    \ = binary_string + \"1\"\n    \n    if decimal != 0\n        binary_string =\
    \ binary_string + \"0\"\n    \n    return binary_string\nend", "    \n    binary_string\
    \ = \"\"\n    \n    if decimal < 2 || decimal > 64\n        return \"Invalid input\"\
    \n    \n    decimal = decimal % 2\n    \n    while decimal != 0\n        binary_string\
    \ = binary_string + \"0\"\n        decimal = decimal // 2\n    \n    binary_string\
    \ = binary_string + \"1\"\n    \n    binary_string = \"db\" + binary_string\n\
    \    \n    return binary_string\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts binary numbers to decimal numbers. Your function\
    \ should take in a string and return a number.", "    \n    binary_string = \"\
    \"\n    \n    if decimal < 2 || decimal > 64\n        binary_string = \"Invalid\
    \ input\"\n        return binary_string\n    \n    binary_string = \"db\"\n  \
    \  \n    binary_string = binary_string + decimal_to_binary(decimal / 2)\n    \n\
    \    binary_string = binary_string + decimal_to_binary(decimal % 2)\n    \n  \
    \  return binary_string\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a decimal number to hexadecimal format. The\
    \ function should return a string, with each character representing a hexadecimal\
    \ number. Each character in the string will be 0-9 or A-F. There will be an extra\
    \ couple of characters '0x' at the beginning and at the end of the string.", " \
    \   binary = \"\"\n    decimal = decimal % 2\n    while decimal != 0\n       \
    \ binary = binary + \"0\"\n        decimal = decimal / 2\n    binary = binary\
    \ + \"1\"\n    return binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that converts a binary number to decimal.", "    \n    binary\
    \ = \"\"\n    \n    if decimal < 2 \n        binary = binary + \"0\"\n    elseif\
    \ decimal < 10 \n        binary = binary + \"1\"\n    elseif decimal < 16 \n \
    \       binary = binary + \"10\"\n    elseif decimal < 32 \n        binary = binary\
    \ + \"11\"\n    elseif decimal < 64 \n        binary = binary + \"100\"\n    elseif\
    \ decimal < 128 \n        binary = binary + \"101\"\n    elseif decimal < 256\
    \ \n        binary = binary + \"110\"\n    elseif decimal < 512 \n        binary\
    \ = binary + \"111\"\n    elseif decimal < 1024 \n        binary = binary + \"\
    1000\"\n    elseif decimal < 2048 \n        binary = binary + \"1001\"\n    elseif\
    \ decimal < 4096 \n        binary = binary + \"1010\"\n    elseif decimal < 8192\
    \ \n        binary = binary + \"1011\"\n    elseif decimal < 16384 \n        binary\
    \ = binary + \"1100\"\n    elseif decimal < 32768 \n        binary = binary +\
    \ \"1101\"\n    elseif decimal < 65536 \n        binary = binary + \"1110\"\n\
    \    elseif decimal < 131072 \n        binary = binary + \"1111\"\n    elseif\
    \ decimal < 262144 \n        binary = binary + \"11100\"\n    elseif decimal <\
    \ 524288 \n        binary = binary + \"11101\"\n    elseif decimal < 1048576 \n\
    \        binary = binary + \"11110\"\n    elseif decimal < 2097152 \n        binary\
    \ = binary + \"11111\"\n    elseif decimal < 4194304 \n        binary = binary\
    \ + \"111110\"\n    elseif decimal < 8388608 \n        binary = binary + \"111111\"\
    \n    elseif decimal < 16777216 \n        binary = binary + \"1111100\"\n    elseif\
    \ decimal < 33554432 \n        binary = binary + \"1111101\"\n    elseif decimal\
    \ < 67108864 \n        binary = binary + \"1111110\"\n    elseif decimal < 134217728\
    \ \n        binary = binary + \"1111111\"\n    elseif decimal < 268435456 \n \
    \       binary = binary + \"11111110\"\n    elseif decimal < 536870912 \n    \
    \    binary = binary + \"11111111\"\n    elseif decimal < 1073741824 \n      \
    \  binary = binary + \"11111111\"\n    elseif decimal < 2147483648 \n        binary\
    \ = binary + \"111111111\"\n    elseif decimal < 4294967296 \n        binary =\
    \ binary + \"1111111110\"\n", "    binary = \"\"\n    decimal = decimal % 2\n\
    \    while decimal != 0\n        binary = binary + \"0\"\n        decimal = decimal\
    \ / 2\n    binary = binary + \"1\"\n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a binary number to\
    \ decimal.", "    binary_string = \"\"\n    \n    decimal = decimal % 2\n    \n\
    \    if decimal > 0 \n        binary_string = \"1\" + binary_string\n    else\n\
    \        binary_string = \"0\" + binary_string\n    end\n    \n    decimal = decimal\
    \ / 2\n    \n    if decimal > 0 \n        binary_string = \"1\" + binary_string\n\
    \    else\n        binary_string = \"0\" + binary_string\n    end\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal > 0 \n        binary_string = \"1\" + binary_string\n\
    \    else\n        binary_string = \"0\" + binary_string\n    end\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal > 0 \n        binary_string = \"1\" + binary_string\n\
    \    else\n        binary_string = \"0\" + binary_string\n    end\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal > 0 \n        binary_string = \"1\" + binary_string\n\
    \    else\n        binary_string = \"0\" + binary_string\n    end\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal > 0 \n        binary_string = \"1\" + binary_string\n\
    \    else\n        binary_string = \"0\" + binary_string\n    end\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal > 0 \n        binary_string = \"1\" + binary_string\n\
    \    else\n        binary_string = \"0\" + binary_string\n    end\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal > 0 \n        binary_string = \"1\" + binary_string\n\
    \    else\n        binary_string = \"0\" + binary_string\n    end\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal > 0 \n        binary_string = \"1\" + binary_string\n\
    \    else\n        binary_string = \"0\" + binary_string\n    end\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal > 0 \n        binary_string = \"1\" + binary_string\n\
    \    else\n        binary_string = \"0\" + binary_string\n    end\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal > 0 \n        binary_string = \"1\" + binary_string\n\
    \    else\n        binary_string = \"0\" + binary_string\n    end\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal > 0 \n        binary_string = \"1\" + binary_string\n\
    \    else\n        binary_string = \"0\" + binary_string\n    end\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal > 0 \n        binary_string = \"1\" + binary_string\n\
    \    else\n        binary_string = \"0\" + binary_string\n    end\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal ", "    \n    binary = \"\"\n    \n    for\
    \ i in decimal_to_binary(decimal)\n        binary += i\n    end\n    \n    return\
    \ binary\nend", "    binary_string = \"\"\n    for digit in decimal\n        binary_string\
    \ += if digit == 0 then \"0\" else \"1\"\n    end\n    binary_string += \"db\"\
    \n    return binary_string\nend\n</cell>\n<text>\nNow let's try it out!", "  \
    \  binary_string = \"\"\n    \n    for digit in decimal\n        binary_string\
    \ += \"0\"\n    \n    binary_string += \"1\"\n    \n    return binary_string\n\
    end", "    binary_string = \"\"\n    for digit in decimal\n        binary_string\
    \ += \"0\"\n        if digit == 1\n            binary_string += \"1\"\n      \
    \  end\n    end\n    binary_string += \"db\"\n    return binary_string\nend\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(32)\n</cell>\n<text>\nExercise 3\nWrite a function that converts\
    \ a binary number to a decimal number. Your function should take in a string with\
    \ each character representing a binary number and return a string with the decimal\
    \ number. There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.", "    \n    binary_string = \"\"\n    \n    binary_string\
    \ += \"0\"\n    \n    binary_string += decimal_to_binary(decimal / 2)\n    \n\
    \    binary_string += \"0\"\n    \n    binary_string += decimal_to_binary(decimal\
    \ % 2)\n    \n    binary_string += \"db\"\n    \n    return binary_string\nend\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(32)\n</cell>\n<text>\nExercise 3\nWrite a function that converts\
    \ binary numbers to decimal numbers. You will be given a string of binary numbers\
    \ and your task is to convert it to decimal numbers. Each character in the string\
    \ will be either '0' or '1'.", "    \n    binary = \"\"\n    \n    if decimal\
    \ < 0\n        decimal = -decimal\n        binary = binary + \"b\"\n    end",
  "    binary_string = \"\"\n    \n    for digit in decimal:\n        if digit ==\
    \ 0 or digit == 1:\n            binary_string += \"0\"\n        elif digit ==\
    \ 2:\n            binary_string += \"1\"\n        else:\n            binary_string\
    \ += \"1\"\n            binary_string += \"0\"\n    \n    return binary_string\n\
    end\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a binary number to a decimal number. For example, binary_to_decimal(\"\
    1111\") should return 15 and binary_to_decimal(\"100000\") should return 32.",
  "    \n    binary_string = \"\"\n    \n    if decimal < 2 || decimal > 64\n    \
    \    binary_string = \"Invalid input\"\n        return binary_string\n    \n \
    \   binary_string = \"db\"\n    \n    binary_string += decimal_to_binary(decimal\
    \ / 2)\n    binary_string += decimal_to_binary(decimal % 2)\n    \n    return\
    \ binary_string\nend", "    binary = \"\"\n    decimal = decimal % 2\n    while\
    \ decimal != 0\n        binary = binary + \"0\"\n        decimal = decimal / 2\n\
    \    binary = binary + \"1\"\n    binary = binary + \"db\"\n    return binary\n\
    end\n</cell>\n<text>\nNow let's try it out on some examples:", "    binary_string\
    \ = \"\"\n    \n    for digit in decimal:\n        if digit == 0 or digit == 1:\n\
    \            binary_string += digit\n        else:\n            binary_string\
    \ += \"0\"\n    return binary_string\nend", "    binary_string = \"\"\n    \n\
    \    for digit in decimal\n        binary_string += if digit == 0 then \"0\" else\
    \ \"1\"\n    end\n    \n    binary_string += \"db\"\n    \n    return binary_string\n\
    end\n</cell>\n<text>\nNow let's test our function!", "    binary_string = \"\"\
    \n    \n    for i in decimal_to_binary(decimal)\n        binary_string += i\n\
    \    end\n    \n    return binary_string\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a decimal number to\
    \ binary and returns the string in reverse order.", "    \n    binary = \"\"\n\
    \    \n    for digit in decimal:\n        if digit == 0 or digit == 1:\n     \
    \       binary += digit\n        else:\n            binary += \"0\"\n    \n  \
    \  binary = binary[2:]\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a binary number to\
    \ a decimal number. The function should take in a string and return a Int64.",
  "    \n    binary = \"\"\n    \n    for i in decimal_to_binary(decimal)\n      \
    \  binary += i\n    end\n    \n    return binary\nend", "    \n    binary = \"\
    \"\n    \n    decimal = decimal % 2\n    \n    while decimal != 0\n        binary\
    \ = binary + \"0\"\n        decimal = decimal // 2\n    \n    binary = binary\
    \ + \"1\"\n    \n    binary = binary + \"db\"\n    \n    return binary\nend\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of characters in the string.", "    \n    binary\
    \ = \"\"\n    \n    for digit in decimal\n        binary = binary + str((digit\
    \ % 2) == 0)\n        digit = digit // 2\n    end\n    \n    return \"db\" + binary\
    \ + \"db\"\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n\
    <code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 2\n\
    Write a function that converts binary numbers to decimal numbers.", "    \n  \
    \  binary_string = \"\"\n    \n    if decimal > 0 \n        binary_string = decimal_to_binary(decimal\
    \ - 1)\n    \n    binary_string += \"0\"\n    \n    while decimal > 0 \n     \
    \   binary_string += \"1\"\n        decimal -= 1\n    \n    binary_string += \"\
    b\"\n    \n    return binary_string\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nProblem 3\nWrite a function that converts a binary number to\
    \ a decimal number. \nThe function should take in a string and return a number.",
  "    \n    binary_string = \"\"\n    \n    for digit in decimal:\n        if digit\
    \ == 0 or digit == 1:\n            binary_string += digit\n        else:\n   \
    \         binary_string += \"0\"\n    \n    return binary_string + \"db\"", " \
    \   binary = \"\"\n    decimal = decimal % 2\n    decimal = decimal / 2\n    while\
    \ decimal != 0\n        binary = binary + \"0\"\n        decimal = decimal / 2\n\
    \    binary = binary + \"1\"\n    binary = binary + \"b\"\n    return binary\n\
    end", "    \n    binary = \"\"\n    \n    for i in decimal_to_binary(decimal)\n\
    \        binary = binary + i\n    end\n    \n    return binary\nend\n</cell>\n\
    <code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(32)\n</cell>\n<text>\nExercise 3\nWrite a function that converts\
    \ binary to decimal.", "    \n    if decimal < 0\n        error(\"decimal number\
    \ must be positive\")\n    end", "    binary_string = \"\"\n    binary_string\
    \ += \"db\"\n    for digit in decimal\n        binary_string += if digit == 0\
    \ then \"0\" else \"1\"\n    end\n    return binary_string\nend\n</cell>\n<code\
    \ language=julia-1.4>\ndecimal_to_binary(15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a binary string to a decimal string.", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    binary = \"\"\n    \n\
    \    if decimal < 2 || decimal > 64\n        return binary\n    \n    decimal\
    \ = decimal % 2\n    \n    while decimal != 0\n        binary = binary + \"0\"\
    \n        decimal = decimal / 2\n    \n    binary = binary + \"1\"\n    \n   \
    \ binary = binary + \"db\"\n    \n    return binary\nend\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that converts a binary number to decimal.", "    \n    binary_string\
    \ = \"\"\n    \n    if decimal < 2 || decimal > 64\n        return \"Invalid input\"\
    \n    \n    binary_string = \"db\"\n    \n    for digit in decimal_to_binary(decimal\
    \ - 2)\n        binary_string += digit\n    \n    return binary_string\nend\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ binary numbers to decimal numbers. Your function should take in a string and\
    \ return a string.", "    \n    binary_string = \"\"\n    \n    for i in decimal_to_binary(decimal)\n\
    \        binary_string += i\n    end\n    \n    return binary_string\nend", " \
    \   \n    binary_string = \"\"\n    \n    if decimal < 0\n        binary_string\
    \ = \"db\"\n        decimal = -decimal\n    end", "    \n    binary = \"\"\n \
    \   \n    decimal = decimal % 2\n    \n    while decimal != 0\n        binary\
    \ = binary + \"0\"\n        decimal = decimal - 1\n    \n    binary = binary +\
    \ \"1\"\n    \n    binary = binary + \"db\"\n    \n    return binary\nend\n</cell>\n\
    <code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a decimal number to binary and returns the string in reverse order.", "    \n\
    \    binary_string = \"\"\n    \n    if decimal < 2 || decimal > 64\n        return\
    \ \"Invalid input\"\n    \n    binary_string = decimal_to_binary(decimal / 2)\n\
    \    \n    if decimal % 2 == 0\n        binary_string += \"1\"\n    else\n   \
    \     binary_string += \"0\"\n    end\n    \n    return binary_string\nend", " \
    \   \n    binary = \"\"\n    \n    if decimal < 2 || decimal > 64\n        return\
    \ \"Invalid input\"\n    \n    decimal = decimal % 2\n    \n    while decimal\
    \ != 0\n        binary = binary + \"0\"\n        decimal = decimal - 1\n    \n\
    \    binary = binary + \"1\"\n    \n    return binary\nend", "    \n    binary\
    \ = \"\"\n    \n    if decimal < 2 || decimal > 64\n        return \"Invalid input\"\
    \n    \n    decimal = decimal % 2\n    \n    while decimal > 0\n        binary\
    \ = binary + \"0\"\n        decimal = decimal - 1\n    \n    binary = binary +\
    \ \"1\"\n    \n    if decimal < 2\n        binary = binary + \"b\"\n    \n   \
    \ return binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts binary numbers to decimal numbers. A binary\
    \ number consists of an even number of 1's and 0's. The function should take in\
    \ a string and return the decimal number represented by the binary number. There\
    \ will be an extra couple of characters 'db' at the beginning and at the end of\
    \ the string.", "    binary_string = \"\"\n    \n    if decimal > 0 \n       \
    \ binary_string = decimal_to_binary(decimal - 1)\n        binary_string += \"\
    1\"\n    else \n        binary_string = \"0\"\n    \n    return binary_string\
    \ + decimal_to_binary(decimal)\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that converts a binary number to decimal form. Your function\
    \ should take in a binary string as input and return the decimal number in decimal\
    \ form.", "    binary = \"\"\n    decimal = decimal % 2\n    \n    while decimal\
    \ != 0\n        binary = binary + \"0\"\n        decimal = decimal - 1\n    \n\
    \    binary = binary + \"1\"\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a binary number to\
    \ a decimal number. Your function should take in a string and return a Int64.",
  "    binary_string = \"\"\n    decimal = decimal % 2\n    while decimal != 0\n \
    \       binary_string += \"0\"\n        decimal = decimal / 2\n    binary_string\
    \ += \"1\"\n    return binary_string\nend", "    \n    binary_string = \"\"\n\
    \    \n    if decimal < 2 || decimal > 64\n        binary_string = \"Invalid Input\"\
    \n        return binary_string\n    \n    binary_string = decimal_to_binary(decimal\
    \ / 2)\n    \n    if decimal % 2 == 0\n        binary_string += \"0\"\n    else\n\
    \        binary_string += \"1\"\n    \n    return binary_string + decimal_to_binary(decimal\
    \ - binary_string.size - 2)\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that converts a decimal number to hexadecimal format.",
  "    \n    binary_string = \"\"\n    \n    for digit in decimal:\n        if digit\
    \ == 0:\n            binary_string += \"0\"\n        elif digit == 1:\n      \
    \      binary_string += \"1\"\n        else:\n            binary_string += \"\
    0\"\n    \n    return binary_string + \"db\"", "    \n    binary_string = \"\"\
    \n    \n    if decimal < 2 || decimal > 64\n        return \"Invalid input\"\n\
    \    \n    if decimal >= 2\n        binary_string = \"0b\"\n    \n    for digit\
    \ in decimal\n        binary_string += \"1\"\n    end\n    \n    return binary_string\
    \ + \"db\"\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n\
    <code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 2\n\
    Write a function that converts binary to decimal.", "    \n    binary = \"\"\n\
    \    \n    for i in decimal:\n        if i == 1:\n            binary += \"1\"\n\
    \        elif i == 0:\n            binary += \"0\"\n        else:\n          \
    \  binary += \"0\"\n            binary += \"1\"\n    \n    binary = binary[2:]\n\
    \    binary = binary[:len(binary)-1]\n    \n    return binary\nend\n</cell>\n\
    <code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(32)\n</cell>\n<text>\nProblem 3\nWrite a function that takes\
    \ a string and returns the number of characters in the string.", "    \n    binary_string\
    \ = \"\"\n    \n    decimal = decimal % 2\n    \n    if decimal > 0 \n       \
    \ binary_string = \"1\" + binary_string\n    else\n        binary_string = \"\
    0\" + binary_string\n    end\n    \n    decimal = decimal / 2\n    \n    if decimal\
    \ > 0 \n        binary_string = \"1\" + binary_string\n    else\n        binary_string\
    \ = \"0\" + binary_string\n    end\n    \n    decimal = decimal / 2\n    \n  \
    \  if decimal > 0 \n        binary_string = \"1\" + binary_string\n    else\n\
    \        binary_string = \"0\" + binary_string\n    end\n    \n    decimal = decimal\
    \ / 2\n    \n    if decimal > 0 \n        binary_string = \"1\" + binary_string\n\
    \    else\n        binary_string = \"0\" + binary_string\n    end\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal > 0 \n        binary_string = \"1\" + binary_string\n\
    \    else\n        binary_string = \"0\" + binary_string\n    end\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal > 0 \n        binary_string = \"1\" + binary_string\n\
    \    else\n        binary_string = \"0\" + binary_string\n    end\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal > 0 \n        binary_string = \"1\" + binary_string\n\
    \    else\n        binary_string = \"0\" + binary_string\n    end\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal > 0 \n        binary_string = \"1\" + binary_string\n\
    \    else\n        binary_string = \"0\" + binary_string\n    end\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal > 0 \n        binary_string = \"1\" + binary_string\n\
    \    else\n        binary_string = \"0\" + binary_string\n    end\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal > 0 \n        binary_string = \"1\" + binary_string\n\
    \    else\n        binary_string = \"0\" + binary_string\n    end\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal > 0 \n        binary_string = \"1\" + binary_string\n\
    \    else\n        binary_string = \"0\" + binary_string\n    end\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal > 0 \n        binary_string = \"1\" + binary_string\n\
    \    else\n        binary_string = \"0\" + binary_string\n    end\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal > 0 \n        binary_string = \"1\" + binary_string\n\
    \    else\n        binary_string = \"0\" + binary_string\n    end\n    \n    decimal\
    \ = decimal / 2\n    \n", "    \n    binary_string = \"\"\n    \n    if decimal\
    \ < 2 || decimal > 64\n        return \"Invalid input\"\n    \n    decimal = decimal\
    \ % 2\n    \n    while decimal != 0\n        binary_string = binary_string + \"\
    0\"\n        decimal = decimal - 1\n    \n    binary_string = binary_string +\
    \ \"1\"\n    \n    return binary_string\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that will convert a binary number\
    \ to a decimal number. The function should take in a string and return a Int64.",
  "    \n    binary = \"\"\n    \n    for i in decimal_to_binary(decimal)\n      \
    \  binary = binary + i\n    end\n    \n    return binary\nend\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a decimal number to binary and returns the binary string in reverse.", "   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    binary_string\
    \ = \"\"\n    \n    if decimal < 2 || decimal > 64\n        return binary_string\n\
    \    end\n    \n    binary_string = decimal_to_binary(decimal / 2)\n    \n   \
    \ binary_string += if decimal % 2 == 0\n        \"0\"\n    else\n        \"1\"\
    \n    end\n    \n    return binary_string\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that will convert a decimal number\
    \ to binary and return the string in reverse order.", "    binary_string = \"\"\
    \n    \n    decimal = decimal % 2\n    \n    while decimal != 0\n        binary_string\
    \ = \"0\" + binary_string\n        decimal = decimal // 2\n    end\n    \n   \
    \ binary_string = \"db\" + binary_string\n    \n    return binary_string\nend\n\
    </cell>\n<text>\nNow let's test our function!", "    \n    binary = \"\"\n   \
    \ \n    for digit in decimal\n        binary = binary + str((digit % 2) == 0)\n\
    \        \n    return binary + \"db\"\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a binary number to\
    \ decimal.", "    \n    binary = \"\"\n    \n    if decimal < 2 || decimal > 64\n\
    \        return \"Invalid input\"\n    \n    while decimal != 0\n        decimal\
    \ = decimal / 2\n        binary = binary + \"0\"\n    end\n    \n    while decimal\
    \ != 0\n        decimal = decimal / 2\n        binary = binary + \"1\"\n    end\n\
    \    \n    binary = binary + \"db\"\n    \n    return binary\nend\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(32)\n</cell>\n<text>\nExercise 3\nWrite a function that converts\
    \ a decimal number to octal format. Your function should return a string with\
    \ each character representing an octal number.", "    \n    binary_string = \"\
    \"\n    \n    if decimal < 2 || decimal > 64\n        binary_string = \"Invalid\
    \ input\"\n        return binary_string\n    \n    decimal = decimal % 2\n   \
    \ \n    if decimal < 10\n        binary_string = \"0\" + binary_string\n    \n\
    \    if decimal < 16\n        binary_string = \"1\" + binary_string\n    \n  \
    \  binary_string = binary_string + \"db\"\n    \n    binary_string = binary_string\
    \ + decimal_to_binary(decimal / 2)\n    \n    return binary_string\nend\n</cell>\n\
    <code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite a function that will\
    \ convert a binary number to decimal form. Your function should take in a binary\
    \ string and return the decimal form of the binary number. Your function should\
    \ return an error if the input is not a binary string.", "    \n    binary_string\
    \ = \"\"\n    \n    if decimal < 2 || decimal > 64\n        return \"Invalid input\"\
    \n    else\n        \n        binary_string = \"db\"\n        \n        for i\
    \ = 2 to 64\n            if decimal % i == 0\n                binary_string +=\
    \ i\n            end\n        end\n        \n        return binary_string\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n\
    <code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 2\n\
    Write a function that converts a decimal number to hexadecimal format. The function\
    \ should return a string, with each character representing a hexadecimal number.\
    \ Each character in the string will be 0-9 or a-f.", "    \n    binary = \"\"\n\
    \    \n    decimal = decimal % 2\n    \n    if decimal > 0 \n        binary =\
    \ binary + \"1\"\n    else \n        binary = binary + \"0\"\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal > 0 \n        binary = binary + \"1\"\n\
    \    else \n        binary = binary + \"0\"\n    \n    decimal = decimal / 2\n\
    \    \n    if decimal > 0 \n        binary = binary + \"1\"\n    else \n     \
    \   binary = binary + \"0\"\n    \n    decimal = decimal / 2\n    \n    if decimal\
    \ > 0 \n        binary = binary + \"1\"\n    else \n        binary = binary +\
    \ \"0\"\n    \n    decimal = decimal / 2\n    \n    if decimal > 0 \n        binary\
    \ = binary + \"1\"\n    else \n        binary = binary + \"0\"\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal > 0 \n        binary = binary + \"1\"\n\
    \    else \n        binary = binary + \"0\"\n    \n    decimal = decimal / 2\n\
    \    \n    if decimal > 0 \n        binary = binary + \"1\"\n    else \n     \
    \   binary = binary + \"0\"\n    \n    decimal = decimal / 2\n    \n    if decimal\
    \ > 0 \n        binary = binary + \"1\"\n    else \n        binary = binary +\
    \ \"0\"\n    \n    decimal = decimal / 2\n    \n    if decimal > 0 \n        binary\
    \ = binary + \"1\"\n    else \n        binary = binary + \"0\"\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal > 0 \n        binary = binary + \"1\"\n\
    \    else \n        binary = binary + \"0\"\n    \n    decimal = decimal / 2\n\
    \    \n    if decimal > 0 \n        binary = binary + \"1\"\n    else \n     \
    \   binary = binary + \"0\"\n    \n    decimal = decimal / 2\n    \n    if decimal\
    \ > 0 \n        binary = binary + \"1\"\n    else \n        binary = binary +\
    \ \"0\"\n    \n    decimal = decimal / 2\n    \n    if decimal > 0 \n        binary\
    \ = binary + \"1\"\n    else \n        binary = binary + \"0\"\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal > 0 \n        binary = binary + \"1\"\n\
    \    else \n        binary = binary + \"0\"\n    \n    decimal = decimal / 2\n\
    \    \n    if decimal > 0 \n        binary = binary + \"1\"\n    else \n     \
    \   binary = binary + \"0\"\n    \n    decimal = decimal / 2\n    ", "    \n \
    \   binary = \"\"\n    \n    decimal = decimal % 2\n    \n    while decimal !=\
    \ 0\n        \n        binary = binary + \"0\"\n        decimal = decimal // 2\n\
    \    \n    binary = binary + \"1\"\n    \n    return binary\nend\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(32)\n</cell>\n<text>\nExercise 3\nWrite a function that converts\
    \ a binary number to a decimal number. Your function should take in a binary string\
    \ and return a decimal number.", "    binary = \"\"\n    \n    for i in decimal_to_binary(decimal)\n\
    \        binary += i\n    end\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a decimal number to\
    \ binary and returns the string in reverse order.", "    \n    binary_string =\
    \ \"\"\n    \n    # Write your code here\n    \n    return binary_string\nend\n\
    </cell>\n<text>\nSolution\nRun the cell below to test your solution.", "    binary_string\
    \ = \"\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string ", "    \n    binary_string = \"\"\n    \n    for\
    \ i in decimal_to_binary(decimal)\n        binary_string += i\n    \n    return\
    \ binary_string\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a decimal number to hexadecimal format. The\
    \ function should return a string, with each character representing a hexadecimal\
    \ number. Each character in the string will be 0-9 or A-F. The function should\
    \ also handle negative numbers.", "    \n    binary_string = \"\"\n    \n    if\
    \ decimal < 2 || decimal > 64\n        return \"Invalid input\"\n    \n    decimal\
    \ = decimal % 2\n    \n    while decimal != 0\n        binary_string = \"0\" +\
    \ binary_string\n        decimal = decimal / 2\n    \n    binary_string = \"db\"\
    \ + binary_string\n    \n    return binary_string\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts binary numbers to\
    \ decimal numbers. Your function should take in a binary string and return a decimal\
    \ number.", "    \n    binary = \"\"\n    \n    decimal = decimal % 2\n    \n\
    \    while decimal != 0\n        \n        binary = binary + \"0\"\n        decimal\
    \ = decimal // 2\n        \n    binary = binary + \"1\"\n    \n    return binary\n\
    end\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that converts a binary number to a decimal number. Your function\
    \ should take in a string and return a number.", "    \n    binary_string = \"\
    \"\n    \n    # Your code here\n    \n    return binary_string\nend\n</cell>\n\
    <code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite a function that will\
    \ convert a decimal number to a binary number in reverse order. For example,\n\
    \    decimal_to_binary(15) = \"1111\"", "    \n    binary = \"\"\n    \n    if\
    \ decimal < 2 || decimal > 64\n        return \"Invalid input\"\n    \n    decimal\
    \ = decimal % 2\n    \n    if decimal < 10\n        binary = \"0\"\n    else\n\
    \        binary = \"1\"\n    end\n    \n    binary = binary + decimal_to_binary(decimal\
    \ / 2)\n    \n    return binary + binary + \"db\"\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nProblem 4\nWrite a function that converts a binary number to\
    \ a decimal number. The function should take in a string\nwith each character\
    \ representing a binary number and return the decimal equivalent of the binary\
    \ number.", "    binary_string = \"\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"0\"\n    binary_string += \"0\"\n    binary_string ", "    \n    binary\
    \ = \"\"\n    \n    if decimal < 2 || decimal > 64\n        throw(ArgumentError(\"\
    decimal must be between 2 and 64\"))\n    end\n    \n    if decimal < 10\n   \
    \     binary = string(decimal, \"b\")\n    else\n        binary = string(decimal\
    \ % 2, \"b\") + string(decimal / 2, \"b\")\n    end\n    \n    return binary\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that converts a binary number\
    \ to decimal form. Your function should take in a string and return a string.",
  "    binary = \"\"\n    decimal = decimal % 2\n    while decimal != 0\n        decimal\
    \ = decimal / 2\n        binary = binary + \"0\"\n    end\n    binary = binary\
    \ + \"1\"\n    return binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a binary number to decimal.", "    \n    binary_string\
    \ = \"\"\n    \n    if decimal < 2 || decimal > 64\n        return binary_string\n\
    \    \n    binary_string = \"db\"\n    \n    while decimal > 1\n        binary_string\
    \ = binary_string + \"0\"\n        decimal = decimal - 1\n    \n    binary_string\
    \ = binary_string + \"1\"\n    \n    return binary_string\nend\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a decimal number to binary and returns the string in reverse order.", "    \n\
    \    binary = \"\"\n    \n    if decimal < 2 || decimal > 64\n        throw(ArgumentError(\"\
    Decimal number must be between 2 and 64\"))\n    end", "    binary_string = \"\
    \"\n    \n    binary_string += \"0\"\n    \n    for i in decimal_to_binary(decimal\
    \ - 1):\n        binary_string += \"1\"\n    \n    binary_string += \"0\"\n  \
    \  \n    return binary_string\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a binary number to a decimal number. Your\
    \ function should take in a binary string and return a decimal number.", "   \
    \ \n    binary = \"\"\n    \n    if decimal < 2 \n        binary = binary + \"\
    0\"\n    elseif decimal < 16 \n        binary = binary + \"1\"\n    elseif decimal\
    \ < 256 \n        binary = binary + \"db\"\n    elseif decimal < 65536 \n    \
    \    binary = binary + \"db\"\n    elseif decimal < 4294967296 \n        binary\
    \ = binary + \"db\"\n    elseif decimal < 18446744073709551616 \n        binary\
    \ = binary + \"db\"\n    elseif decimal < 9223372036854775808 \n        binary\
    \ = binary + \"db\"\n    elseif decimal < 18446744073709551616 \n        binary\
    \ = binary + \"db\"\n    elseif decimal < 9223372036854775808 \n        binary\
    \ = binary + \"db\"\n    elseif decimal < 18446744073709551616 \n        binary\
    \ = binary + \"db\"\n    elseif decimal < 9223372036854775808 \n        binary\
    \ = binary + \"db\"\n    elseif decimal < 18446744073709551616 \n        binary\
    \ = binary + \"db\"\n    elseif decimal < 9223372036854775808 \n        binary\
    \ = binary + \"db\"\n    elseif decimal < 18446744073709551616 \n        binary\
    \ = binary + \"db\"\n    elseif decimal < 9223372036854775808 \n        binary\
    \ = binary + \"db\"\n    elseif decimal < 18446744073709551616 \n        binary\
    \ = binary + \"db\"\n    elseif decimal < 9223372036854775808 \n        binary\
    \ = binary + \"db\"\n    elseif decimal < 18446744073709551616 \n        binary\
    \ = binary + \"db\"\n    elseif decimal < 9223372036854775808 \n        binary\
    \ = binary + \"db\"\n    elseif decimal < 18446744073709551616 \n        binary\
    \ = binary + \"db\"\n    elseif decimal < 9223372036854775808 \n        binary\
    \ = binary + \"db\"\n    elseif decimal < 18446744073709551616 \n        binary\
    \ = binary + \"db\"\n    elseif decimal < 9223372036854775808 \n        binary\
    \ = binary + \"db\"\n    elseif decimal < 18446744073709551616 \n        bin",
  "    \n    binary_string = \"\"\n    \n    for i in decimal_to_binary(decimal)\n\
    \        binary_string += i\n    \n    return binary_string\nend", "    \n   \
    \ if decimal < 0\n        error(\"Decimal number must be positive\")\n    end",
  "    \n    binary = \"\"\n    \n    if decimal < 0\n        decimal = -decimal\n\
    \        binary = reverse binary\n    end\n    \n    while decimal > 0\n     \
    \   binary = binary + string(decimal % 2)\n        decimal = decimal / 2\n   \
    \ end\n    \n    binary = binary + string(decimal)\n    \n    binary = reverse\
    \ binary\n    \n    return binary\nend", "    \n    binary_string = \"\"\n   \
    \ \n    if decimal < 2 || decimal > 64\n        binary_string = \"Invalid input\"\
    \n        return binary_string\n    \n    binary_string = \"db\"\n    \n    binary_string\
    \ += decimal_to_binary(decimal / 2)\n    binary_string += decimal_to_binary(decimal\
    \ % 2)\n    \n    return binary_string\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a decimal number to\
    \ binary and returns the string in reverse order.", "    \n    binary = \"\"\n\
    \    \n    for i in decimal_to_binary(decimal)\n        binary = binary + i\n\
    \    end\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a binary number to a decimal number. \nThe\
    \ function should take in a string and return a Int64.", "    \n    binary = \"\
    \"\n    \n    if decimal < 2 || decimal > 64\n        return \"Invalid input\"\
    \n    \n    decimal = decimal % 2\n    \n    while decimal > 0\n        binary\
    \ = binary + \"0\"\n        decimal = decimal - 1\n    \n    decimal = decimal\
    \ / 2\n    \n    while decimal > 0\n        binary = binary + \"1\"\n        decimal\
    \ = decimal - 1\n    \n    binary = binary + \"db\"\n    \n    return binary\n\
    end\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nProblem 4\nWrite\
    \ a function that will take in a string and return the number of characters in\
    \ that string.", "    \n    binary = \"\"\n    \n    if decimal < 2 || decimal\
    \ > 64\n        return \"Invalid decimal number\"\n    end", "    \n    binary\
    \ = \"\"\n    \n    decimal = decimal % 2\n    \n    while decimal != 0\n    \
    \    binary = binary + \"0\"\n        decimal = decimal - 1\n    \n    binary\
    \ = binary + \"1\"\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a decimal number to\
    \ binary and returns the string in reverse order.", "    \n    binary_string =\
    \ \"\"\n    \n    if decimal < 2\n        binary_string = \"0\"\n    else\n  \
    \      binary_string = \"1\"\n    end\n    \n    binary_string += decimal_to_binary(decimal\
    \ - 2)\n    \n    return binary_string\nend", "    binary_string = \"\"\n    \n\
    \    for i in 0..decimal\n        binary_string += \"0\"\n    end\n    \n    for\
    \ i in 0..decimal\n        binary_string += \"1\"\n    end\n    \n    return binary_string\n\
    end", "    binary_string = \"\"\n    \n    for digit in decimal\n        binary_string\
    \ += \"0\"\n    \n    binary_string += \"1\"\n    \n    return binary_string\n\
    end\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a binary number to a decimal number. Your function\
    \ should take in a binary string and return a decimal number.", "    \n    binary\
    \ = \"\"\n    \n    if decimal < 2 || decimal > 64\n        return \"Invalid input\"\
    \n    \n    decimal = decimal % 2\n    \n    while decimal != 0\n        binary\
    \ = binary + \"0\"\n        decimal = decimal / 2\n    \n    binary = binary +\
    \ \"1\"\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a binary number to a decimal number. Your\
    \ function should take in a string with each character representing a binary number\
    \ and return the decimal number represented by the binary number.", "    \n  \
    \  binary = \"\"\n    \n    if decimal < 0\n        decimal = -decimal\n     \
    \   \n    decimal = decimal % 2\n    \n    while decimal > 0\n        binary =\
    \ binary + \"0\"\n        decimal = decimal - 1\n    \n    decimal = decimal %\
    \ 2\n    \n    while decimal > 0\n        binary = binary + \"1\"\n        decimal\
    \ = decimal - 1\n    \n    binary = binary + \"db\"\n    \n    return binary\n\
    end\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a decimal number to hexadecimal format. The function\
    \ should return a string, with each character representing a hexadecimal number.\
    \ Each character in the string will be 0-9 or A-F. There will be an extra couple\
    \ of characters '0x' at the beginning and at the end of the string.", "    binary_string\
    \ = \"\"\n    for digit in decimal\n        binary_string += if digit == 0 then\
    \ \"0\" else \"1\"\n    end\n    return binary_string + \"db\"\nend\n</cell>\n\
    <code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a binary number to a decimal number. Your function should take in a string with\
    \ each character representing a binary number and convert it to a decimal number.",
  "    \n    binary = \"\"\n    \n    if decimal < 2 || decimal > 64\n        throw(ArgumentError(\"\
    decimal must be between 2 and 64\"))\n    end", "    binary_string = \"\"\n  \
    \  for digit in decimal\n        binary_string += if digit == 0 then \"0\" else\
    \ \"1\"\n    end\n    binary_string += \"db\"\n    return binary_string\nend\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(32)\n</cell>\n<text>\nExercise 3\nWrite a function that converts\
    \ a binary string to a decimal string.", "    \n    binary_string = \"\"\n   \
    \ \n    if decimal > 0 \n        binary_string = \"1\"\n    else \n        binary_string\
    \ = \"0\"\n    \n    binary_string += decimal_to_binary(decimal - 1)\n    \n \
    \   return binary_string\nend", "    binary_string = \"\"\n    \n    for digit\
    \ in decimal:\n        if digit == 0 or digit == 1:\n            binary_string\
    \ += digit\n        else:\n            binary_string += \"0\"\n    \n    return\
    \ binary_string + \"db\"", "    binary = \"\"\n    decimal = decimal % 2\n   \
    \ \n    while decimal != 0\n        binary = binary + \"0\"\n        decimal =\
    \ decimal / 2\n    end\n    \n    binary = binary + \"1\"\n    \n    return binary\n\
    end\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that converts binary numbers to decimal numbers.", "    \n    binary\
    \ = \"\"\n    \n    if decimal < 2 || decimal > 64\n        return binary\n  \
    \  \n    decimal = decimal % 2\n    \n    while decimal > 0\n        binary =\
    \ binary + \"0\"\n        decimal = decimal - 1\n    \n    binary = binary + \"\
    1\"\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that converts a binary number to decimal.", "    \n    binary_string\
    \ = \"\"\n    \n    decimal = decimal % 2\n    \n    if decimal > 0 \n       \
    \ binary_string = \"1\" + binary_string\n    else\n        binary_string = \"\
    0\" + binary_string\n    end\n    \n    decimal = decimal / 2\n    \n    if decimal\
    \ > 0 \n        binary_string = \"1\" + binary_string\n    else\n        binary_string\
    \ = \"0\" + binary_string\n    end\n    \n    decimal = decimal / 2\n    \n  \
    \  if decimal > 0 \n        binary_string = \"1\" + binary_string\n    else\n\
    \        binary_string = \"0\" + binary_string\n    end\n    \n    decimal = decimal\
    \ / 2\n    \n    if decimal > 0 \n        binary_string = \"1\" + binary_string\n\
    \    else\n        binary_string = \"0\" + binary_string\n    end\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal > 0 \n        binary_string = \"1\" + binary_string\n\
    \    else\n        binary_string = \"0\" + binary_string\n    end\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal > 0 \n        binary_string = \"1\" + binary_string\n\
    \    else\n        binary_string = \"0\" + binary_string\n    end\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal > 0 \n        binary_string = \"1\" + binary_string\n\
    \    else\n        binary_string = \"0\" + binary_string\n    end\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal > 0 \n        binary_string = \"1\" + binary_string\n\
    \    else\n        binary_string = \"0\" + binary_string\n    end\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal > 0 \n        binary_string = \"1\" + binary_string\n\
    \    else\n        binary_string = \"0\" + binary_string\n    end\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal > 0 \n        binary_string = \"1\" + binary_string\n\
    \    else\n        binary_string = \"0\" + binary_string\n    end\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal > 0 \n        binary_string = \"1\" + binary_string\n\
    \    else\n        binary_string = \"0\" + binary_string\n    end\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal > 0 \n        binary_string = \"1\" + binary_string\n\
    \    else\n        binary_string = \"0\" + binary_string\n    end\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal > 0 \n        binary_string = \"1\" + binary_string\n\
    \    else\n        binary_string = \"0\" + binary_string\n    end\n    \n    decimal\
    \ = decimal / 2\n    \n", "    \n    binary = \"\"\n    \n    for digit in decimal\n\
    \        binary = binary + str((digit % 2) == 0)\n        \n    return binary\
    \ + \"db\"\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n\
    <code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 3\n\
    Write a function that converts binary numbers to decimal numbers. Your function\
    \ should take in a string with binary numbers and return a string with decimal\
    \ numbers.", "    \n    binary_string = \"\"\n    \n    if decimal > 0 \n    \
    \    binary_string = \"1\"\n        \n        for i in 0..decimal-1 do\n     \
    \       binary_string += \"0\"\n        end\n    end\n    \n    return binary_string\n\
    end", "    \n    binary_string = \"\"\n    \n    if decimal < 0\n        binary_string\
    \ = \"db\"\n        decimal = -decimal\n    end", "    \n    binary_string = \"\
    \"\n    \n    if decimal > 1\n        binary_string += \"1\"\n        \n     \
    \   for i in decimal_to_binary(decimal - 1)\n            binary_string += \"0\"\
    \n        end\n    end\n    \n    return binary_string\nend", "    \n    binary\
    \ = \"\"\n    \n    decimal = decimal % 2\n    \n    while decimal > 0 do\n  \
    \      binary = binary + \"0\"\n        decimal = decimal - 1\n    end\n    \n\
    \    decimal = decimal % 2\n    \n    while decimal > 0 do\n        binary = binary\
    \ + \"1\"\n        decimal = decimal - 1\n    end\n    \n    binary = binary +\
    \ \"db\"\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a decimal number to hexadecimal.", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    binary_string =\
    \ \"\"\n    \n    decimal = decimal % 2\n    \n    if decimal > 0 \n        binary_string\
    \ = \"1\" + binary_string\n    else \n        binary_string = \"0\" + binary_string\n\
    \    \n    decimal_to_binary(decimal / 2)\n    \n    return binary_string\nend\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ binary numbers to decimal numbers. Your function should take in a string and\
    \ return a number.", "    \n    binary = \"\"\n    \n    if decimal < 2 || decimal\
    \ > 64\n        throw(ArgumentError(\"decimal must be between 2 and 64\"))\n \
    \   end", "    \n    binary = \"\"\n    \n    if decimal < 2 \n        binary\
    \ = \"0\"\n    else \n        binary = \"1\"\n    \n    for x in decimal_to_binary(decimal\
    \ - 2)\n        binary = binary + \"0\"\n    \n    binary = binary + \"b\"\n \
    \   \n    return binary\nend", "    \n    if decimal == 0 \n        \n       \
    \ return \"0\"\n    \n    else if decimal < 0 \n        \n        return \"db\"\
    \ + decimal_to_binary(-decimal)\n    \n    else \n        \n        binary = \"\
    \"\n        \n        while decimal > 0 \n            \n            binary = binary\
    \ + \"0\"\n            \n            decimal = decimal - 1\n            \n   \
    \     while decimal != 0 \n            \n            binary = binary + \"1\"\n\
    \            \n            decimal = decimal - 1\n            \n        return\
    \ binary\n    \nend\n</cell>\n<code language=julia-1.4>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.4>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a binary number to a decimal number. Your\
    \ function should take in a string with each character representing a binary number\
    \ and return a string with the decimal number. There will be an extra couple of\
    \ characters 'db' at the beginning and at the end of the string. The extra characters\
    \ are there to help with the format.", "    \n    binary_string = \"\"\n    \n\
    \    for i in decimal_to_binary(decimal)\n        binary_string += i\n    end\n\
    \    \n    return binary_string\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that converts a decimal number to binary and returns the\
    \ string in reverse order.", "    \n    binary_string = \"\"\n    \n    if decimal\
    \ < 2 || decimal > 64\n        throw(ArgumentError(\"decimal must be between 2\
    \ and 64\"))\n    end\n    \n    if decimal < 2\n        binary_string = \"0\"\
    \n    end\n    \n    for index in 1:64\n        if decimal % 2 == 0\n        \
    \    binary_string += \"1\"\n        else\n            binary_string += \"0\"\n\
    \        end\n        decimal = decimal / 2\n    end\n    \n    binary_string\
    \ += \"db\"\n    \n    return binary_string\nend", "    binary_string = \"\"\n\
    \    for digit in decimal:\n        if digit == 0 or digit == 1:\n           \
    \ binary_string += \"0\"\n        elif digit == 2:\n            binary_string\
    \ += \"1\"\n        elif digit == 3:\n            binary_string += \"10\"\n  \
    \      elif digit == 4:\n            binary_string += \"11\"\n        elif digit\
    \ == 5:\n            binary_string += \"100\"\n        elif digit == 6:\n    \
    \        binary_string += \"101\"\n        elif digit == 7:\n            binary_string\
    \ += \"110\"\n        elif digit == 8:\n            binary_string += \"111\"\n\
    \        elif digit == 9:\n            binary_string += \"1000\"\n        elif\
    \ digit == 10:\n            binary_string += \"1001\"\n        elif digit == 11:\n\
    \            binary_string += \"1010\"\n        elif digit == 12:\n          \
    \  binary_string += \"1011\"\n        elif digit == 13:\n            binary_string\
    \ += \"1100\"\n        elif digit == 14:\n            binary_string += \"1101\"\
    \n        elif digit == 15:\n            binary_string += \"1110\"\n        elif\
    \ digit == 16:\n            binary_string += \"1111\"\n    return binary_string\n\
    end\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a binary number to a decimal number. Your function\
    \ should take in a string and return a Int64.", "    \n    binary_string = \"\"\
    \n    \n    if decimal < 0\n        binary_string = \"db\"\n        decimal =\
    \ -decimal\n    end", "    \n    binary_string = \"\"\n    \n    if decimal <\
    \ 2 || decimal > 64\n        binary_string = \"Invalid input\"\n        return\
    \ binary_string\n    end", "    binary_string = \"\"\n    \n    if decimal < 0\n\
    \        error(\"Decimal cannot be negative\")\n    end", "    \n    binary_string\
    \ = \"\"\n    \n    # Write your code here\n    \n    return binary_string\nend\n\
    </cell>\n<text>\nRun the cell below to test your function.", "    \n    binary\
    \ = \"\"\n    \n    if decimal < 2 || decimal > 64\n        throw(ArgumentError(\"\
    decimal must be between 2 and 64\"))\n    end\n    \n    if decimal < 2\n    \
    \    binary = \"0\"\n    end\n    \n    for index in 1:64\n        if decimal\
    \ % 2 == 0\n            binary = binary + \"0\"\n        else\n            binary\
    \ = binary + \"1\"\n        end\n        decimal = decimal / 2\n    end\n    \n\
    \    binary = binary + \"db\"\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a decimal number to\
    \ hexadecimal format.", "    \n    binary_string = \"\"\n    \n    if decimal\
    \ < 2 || decimal > 64\n        return \"Invalid input\"\n    \n    decimal = decimal\
    \ % 2\n    \n    while decimal != 0\n        binary_string = binary_string + \"\
    0\"\n        decimal = decimal // 2\n    \n    binary_string = binary_string +\
    \ \"1\"\n    \n    return binary_string\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that converts a decimal number to\
    \ binary and returns the string in reverse order.", "    \n    binary_string =\
    \ \"\"\n    \n    if decimal < 2 || decimal > 64\n        binary_string = \"Invalid\
    \ input\"\n        return binary_string\n    \n    binary_string = \"db\" * decimal\n\
    \    \n    return binary_string\nend\n</cell>\n<code language=julia-1.4>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.4>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a binary number to a decimal number. Your\
    \ function should take in a string and return a Int64.", "    \n    binary = \"\
    \"\n    \n    decimal = decimal % 2\n    \n    if decimal > 0 \n        binary\
    \ = binary + \"1\"\n    else \n        binary = binary + \"0\"\n    \n    decimal\
    \ = decimal / 2\n    \n    while decimal > 0 \n        decimal = decimal / 2\n\
    \        binary = binary + \"0\"\n    \n    binary = binary + \"b\"\n    \n  \
    \  return binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that converts a decimal number to binary and returns the\
    \ string in reverse order.", "    \n    binary = \"\"\n    \n    if decimal <\
    \ 2 || decimal > 64\n        throw(ArgumentError(\"Decimal number must be between\
    \ 2 and 64\"))\n    end\n    \n    if decimal < 10\n        binary = string(decimal,\
    \ \"b\")\n    else\n        binary = string(decimal, \"b\")\n        \n      \
    \  binary = string(64 - decimal, \"b\") + binary\n    end\n    \n    return binary\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that converts a binary string\
    \ to a decimal string.", "    binary = \"\"\n    decimal = decimal % 2\n    while\
    \ decimal != 0\n        decimal = decimal // 2\n        binary += \"0\"\n    end\n\
    \    binary += \"1\"\n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a binary number to\
    \ decimal form. Your function should take in a string and return a string.", " \
    \   \n    binary_string = \"\"\n    \n    if decimal < 2 || decimal > 64\n   \
    \     return binary_string\n    \n    binary_string = \"db\"\n    \n    while\
    \ decimal != 0\n        binary_string = binary_string + \"0\"\n        decimal\
    \ = decimal / 2\n    \n    binary_string = binary_string + \"1\"\n    \n    return\
    \ binary_string\nend", "    \n    binary_string = \"\"\n    \n    if decimal <\
    \ 2 || decimal > 64\n        binary_string = \"Invalid Input\"\n        return\
    \ binary_string\n    end", "    \n    binary = \"\"\n    \n    decimal = decimal\
    \ % 2\n    \n    while decimal != 0\n        binary = binary + \"0\"\n       \
    \ decimal = decimal / 2\n    end\n    \n    binary = binary + \"1\"\n    \n  \
    \  return binary\nend\n</cell>\n<text>\nNow let's test our function", "    \n\
    \    binary = \"\"\n    \n    if decimal < 2 || decimal > 64\n        return \"\
    Invalid input\"\n    \n    decimal = decimal % 2\n    \n    while decimal != 0\n\
    \        binary = binary + \"0\"\n        decimal = decimal / 2\n    \n    binary\
    \ = binary + \"1\"\n    \n    if decimal != 0\n        binary = binary + \"0\"\
    \n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that converts binary numbers to decimal numbers. A binary\
    \ number consists of 1's and 0's.\n    Each binary digit represents 4 bits. For\
    \ example, the binary number 0100 represents 4 decimal digits.", "    \n    binary_string\
    \ = \"\"\n    \n    if decimal < 0\n        binary_string = \"db\"\n        decimal\
    \ = -decimal\n    end", "    \n    binary_string = \"\"\n    \n    for digit in\
    \ decimal:\n        if digit == 0 or digit == 1:\n            binary_string +=\
    \ \"0\"\n        else:\n            binary_string += \"1\"\n    \n    return binary_string\
    \ + \"db\"", "    \n    binary = \"\"\n    \n    for i in decimal_to_binary(decimal)\n\
    \        binary += i\n    \n    return binary\nend", "    binary = \"\"\n    decimal\
    \ = decimal % 2\n    while decimal != 0\n        binary = binary + \"0\"\n   \
    \     decimal = decimal / 2\n    binary = binary + \"1\"\n    binary = binary\
    \ + \"b\"\n    return binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a binary number to a decimal number. \nThe\
    \ function should take in a binary string and return a decimal number. \nThe function\
    \ should ignore the extra characters 'db' at the beginning and end of the string.",
  "    \n    binary_string = \"\"\n    \n    if decimal < 0\n        binary_string\
    \ = \"db\"\n        decimal = -decimal\n    end", "    \n    binary_string = \"\
    \"\n    \n    for i in decimal_to_binary(decimal)\n        binary_string += i\n\
    \    end\n    \n    return binary_string\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a decimal number to\
    \ binary and returns the string in reverse order.", "    \n    binary = \"\"\n\
    \    \n    for i in decimal:\n        \n        if i == 1:\n            binary\
    \ += \"1\"\n        \n        elif i == 0:\n            binary += \"0\"\n    \
    \    \n        else:\n            binary += \"0\"\n            binary += \"1\"\
    \n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a decimal number to its binary equivalent\
    \ in reverse order. For example,\n    decimal_to_binary_reverse(15) should return\
    \ \"1111\"", "    binary_string = \"\"\n    decimal = decimal % 2\n    while decimal\
    \ != 0\n        binary_string += \"0\"\n        decimal = decimal / 2\n    binary_string\
    \ += \"1\"\n    return binary_string\nend", "    binary = \"\"\n    decimal =\
    \ decimal % 2\n    while decimal != 0\n        binary = binary + \"0\"\n     \
    \   decimal = decimal - 1\n    binary = binary + \"1\"\n    binary = binary +\
    \ \"db\"\n    return binary\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that converts binary to decimal.", "    \n    binary_string = \"\"\n    \n \
    \   if decimal < 2 || decimal > 64\n        return \"Invalid input\"\n    \n \
    \   decimal = decimal % 2\n    \n    while decimal != 0\n        binary_string\
    \ = binary_string + \"0\"\n        decimal = decimal // 2\n    \n    binary_string\
    \ = binary_string + \"1\"\n    \n    return binary_string\nend\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a binary number to a decimal number. Your function should take in a string with\
    \ each character representing a binary number. The function should return the\
    \ decimal number represented by the binary number.", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    binary = \"\"\n    \n    for i in\
    \ decimal_to_binary(decimal)\n        binary += i\n    end\n    \n    return binary\n\
    end\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the number of characters in the string.",
  "    \n    binary = \"\"\n    \n    if decimal < 2 || decimal > 64\n        return\
    \ \"Invalid input\"\n    \n    if decimal < 10\n        binary = \"0\"\n    \n\
    \    else if decimal < 16\n        binary = \"1\"\n    \n    else\n        decimal\
    \ = decimal - 10\n        \n        while decimal >= 2\n            decimal =\
    \ decimal / 2\n            binary = \"1\" + binary\n        \n        binary =\
    \ \"0\" + binary\n        \n    return binary + \"db\"\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nProblem 3\nWrite a function that converts a decimal number to\
    \ hexadecimal format. The function should return a string, with each character\
    \ representing a hexadecimal number. Each character in the string will be 0-9\
    \ or A-F. The function should return an error if the decimal number is not in\
    \ the correct format.", "    \n    binary = \"\"\n    \n    if decimal < 2 ||\
    \ decimal > 64\n        return \"Invalid input\"\n    end\n    \n    decimal =\
    \ decimal % 2\n    \n    for _ in 0..(decimal - 1)\n        binary += \"0\"\n\
    \    end\n    \n    for _ in 0..(decimal - 1)\n        binary += \"1\"\n    end\n\
    \    \n    return binary + \"db\"\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that converts a binary number to decimal form. The function should take in a\
    \ string as input and return a string as output. The function should return an\
    \ error if the input is not in binary format. The function should return an error\
    \ if the input contains more than 64 characters. Each character in the string\
    \ will be either '0' or '1'.", "    \n    binary_string = \"\"\n    \n    if decimal\
    \ > 0 \n        binary_string = \"1\"\n    else \n        binary_string = \"0\"\
    \n    \n    binary_string += decimal_to_binary(decimal - 1)\n    \n    return\
    \ binary_string\nend", "    binary_string = \"\"\n    \n    # Your code here\n\
    \    \n    return binary_string\nend\n</cell>\n<text>\nNow let's test your function",
  "    \n    binary = \"\"\n    \n    if decimal < 2 || decimal > 64\n        throw(ArgumentError(\"\
    decimal must be between 2 and 64\"))\n    end\n    \n    if decimal < 10\n   \
    \     binary = string(decimal, \"b\")\n    else\n        binary = string(decimal\
    \ - 10, \"b\") + string(10, \"b\")\n    end\n    \n    binary = string(64 - binary.length,\
    \ \"b\") + binary\n    \n    return binary\nend", "    \n    binary = \"\"\n \
    \   \n    if decimal < 2\n        binary = binary + \"0\"\n    else\n        binary\
    \ = binary + \"1\"\n    \n    decimal = decimal % 2\n    \n    while decimal >\
    \ 0\n        decimal = decimal / 2\n        binary = binary + \"0\"\n    \n  \
    \  binary = binary + \"b\"\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a decimal number to\
    \ binary and returns the string in reverse order.", "    \n    binary = \"\"\n\
    \    \n    if decimal < 2 || decimal > 64\n        throw(ArgumentError(\"Decimal\
    \ number must be between 2 and 64\"))\n    end\n    \n    if decimal < 2\n   \
    \     binary = \"0\"\n    end\n    \n    for digit in decimal_to_binary(decimal\
    \ - 2)\n        binary += \"1\"\n    end\n    \n    return binary + \"db\"\nend\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite a function that will\
    \ convert a decimal number to a binary number with leading zeros. For example\
    \ the decimal number 15 should return \"00000000011111\".", "    binary = \"\"\
    \n    decimal = decimal % 2\n    while decimal != 0\n        binary = binary +\
    \ \"0\"\n        decimal = decimal / 2\n    binary = binary + \"1\"\n    binary\
    \ = binary + \"db\"\n    return binary\nend\n</cell>\n<code language=julia-1.4>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.4>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that converts a binary number to\
    \ a decimal number. The function should take in a string and return a Int64.",
  "    binary_string = \"\"\n    \n    decimal = decimal % 2\n    \n    if decimal\
    \ > 0 \n        binary_string += \"1\"\n    else\n        binary_string += \"\
    0\"\n    end\n    \n    binary_string += decimal_to_binary(decimal / 2)\n    \n\
    \    return binary_string\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that converts a binary number to a decimal number. The function\
    \ should take in a binary string and return a decimal number. The decimal number\
    \ should be the sum of the digits in the binary string.", "    binary_string =\
    \ \"\"\n    binary_string += \"db\"\n    binary_string += decimal_to_binary(decimal\
    \ / 2)\n    binary_string += decimal_to_binary(decimal % 2)\n    return binary_string\n\
    end\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a binary number to decimal.", "    \n    binary_string\
    \ = \"\"\n    \n    if decimal < 2 || decimal > 64\n        error(\"Invalid decimal\
    \ number\")\n    end", "    \n    binary_string = \"\"\n    \n    for digit in\
    \ decimal:\n        if digit == 0 or digit == 1:\n            binary_string +=\
    \ \"0\"\n        elif digit == 2:\n            binary_string += \"1\"\n      \
    \  elif digit == 3:\n            binary_string += \"10\"\n        elif digit ==\
    \ 4:\n            binary_string += \"11\"\n        elif digit == 5:\n        \
    \    binary_string += \"100\"\n        elif digit == 6:\n            binary_string\
    \ += \"101\"\n        elif digit == 7:\n            binary_string += \"110\"\n\
    \        elif digit == 8:\n            binary_string += \"111\"\n        elif\
    \ digit == 9:\n            binary_string += \"1000\"\n        elif digit == 10:\n\
    \            binary_string += \"1001\"\n        elif digit == 11:\n          \
    \  binary_string += \"1010\"\n        elif digit == 12:\n            binary_string\
    \ += \"1011\"\n        elif digit == 13:\n            binary_string += \"1100\"\
    \n        elif digit == 14:\n            binary_string += \"1101\"\n        elif\
    \ digit == 15:\n            binary_string += \"1110\"\n        elif digit == 16:\n\
    \            binary_string += \"1111\"\n        elif digit == 17:\n          \
    \  binary_string += \"10010\"\n        elif digit == 18:\n            binary_string\
    \ += \"10011\"\n        elif digit == 19:\n            binary_string += \"10100\"\
    \n        elif digit == 20:\n            binary_string += \"10101\"\n        elif\
    \ digit == 21:\n            binary_string += \"10110\"\n        elif digit ==\
    \ 22:\n            binary_string += \"10111\"\n        elif digit == 23:\n   \
    \         binary_string += \"11100\"\n        elif digit == 24:\n            binary_string\
    \ += \"11101\"\n        elif digit == 25:\n            binary_string += \"11110\"\
    \n        elif digit == 26:\n            binary_string += \"11111\"\n        elif\
    \ digit == 27:\n            binary_string += \"100010\"\n        elif digit ==\
    \ 28:\n            binary_string += \"100011\"\n        elif digit == 29:\n  \
    \          binary_string += \"100100\"\n        elif digit == 30:\n          \
    \  binary_string += \"100101\"\n        elif digit == 31:\n            binary_string\
    \ += \"100110\"\n        elif digit == 32:\n            binary_string += \"100111\"\
    \n        elif digit == 33:\n            binary_string += \"101000\"\n       \
    \ elif digit == 34:\n            binary_string += \"101001\"\n        elif digit\
    \ == 35:\n            binary_string += \"101010\"\n        elif digit == 36:\n\
    \            binary_string += \"101011\"\n        elif digit == 37:\n        \
    \    binary_string += \"101100\"\n        elif digit == 38:\n            binary_string\
    \ += \"101101\"\n        elif digit == 39:\n            binary_string ", "   \
    \ binary_string = \"\"\n    decimal = decimal % 2\n    while decimal > 0 do\n\
    \        binary_string = binary_string + \"0\"\n        decimal = decimal - 1\n\
    \    end\n    binary_string = binary_string + \"1\"\n    binary_string = \"db\"\
    \ + binary_string\n    return binary_string\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts binary numbers to\
    \ decimal numbers. Your function should take in a string and return a number.",
  "    binary_string = \"\"\n    decimal = decimal % 2\n    while decimal != 0\n \
    \       binary_string += \"0\"\n        decimal = decimal // 2\n    binary_string\
    \ += \"1\"\n    binary_string += \"db\"\n    binary_string += binary_string\n\
    \    binary_string += binary_string\n    return binary_string\nend\n</cell>\n\
    <code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a binary number to a decimal number. For example, binary_to_decimal(\"0100\"\
    ) should return 16.", "    \n    binary_string = \"\"\n    \n    decimal = decimal\
    \ % 2\n    \n    if decimal > 0 \n        binary_string = \"1\" + binary_string\n\
    \    else \n        binary_string = \"0\" + binary_string\n    \n    binary_string\
    \ = binary_string + decimal_to_binary(decimal / 2)\n    \n    return binary_string\n\
    end", "    \n    if decimal < 0\n        error(\"Decimal number must be positive\"\
    )\n    end", "    \n    binary_string = \"\"\n    \n    if decimal < 2 || decimal\
    \ > 64\n        error(\"Invalid input\")\n    end\n    \n    for digit in reverse(digits(decimal))\n\
    \        if digit == 1\n            binary_string += \"1\"\n        else\n   \
    \         binary_string += \"0\"\n        end\n    end\n    \n    return \"db\"\
    \ + binary_string + \"db\"\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that converts a decimal number to binary and returns the\
    \ string in reverse order.", "    \n    binary_string = \"\"\n    \n    if decimal\
    \ < 2 \n        binary_string = \"0\"\n    else \n        binary_string = \"1\"\
    \n    \n    binary_string += decimal_to_binary(decimal - 2)\n    \n    return\
    \ binary_string\nend", "    binary_string = \"\"\n    \n    for digit in decimal\n\
    \        binary_string += if digit == 0 then \"0\" else \"1\"\n    end\n    \n\
    \    binary_string += \"db\"\n    \n    return binary_string\nend", "    \n  \
    \  binary_string = \"\"\n    \n    for i in decimal_to_binary(decimal)\n     \
    \   binary_string += i\n    end\n    \n    return binary_string\nend", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
