name: HumanEval_98_count_upper
language: julia
results:
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ i in 0..(length(s)-2) do\n        if s[i] == 'A' or s[i] == 'a' or s[i] == 'E'\
    \ or s[i] == 'e' or s[i] == 'I' or s[i] == 'i' or s[i] == 'O' or s[i] == 'o' or\
    \ s[i] == 'U' or s[i] == 'u'\n            count_upper = count_upper + 1\n    \
    \    end\n    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n\
    \    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg')\
    \ returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpg7pte_yk.jl:11\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpg7pte_yk.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ i in 0..(length(s)-2) do\n        if s[i] == 'A' && s[i+1] == 'B' && s[i+2]\
    \ == 'C' then\n            count_upper = count_upper + 1\n        elseif s[i]\
    \ == 'a' && s[i+1] == 'b' && s[i+2] == 'c' then\n            count_upper = count_upper\
    \ + 1\n        elseif s[i] == 'd' && s[i+1] == 'b' && s[i+2] == 'e' then\n   \
    \         count_upper = count_upper + 1\n        elseif s[i] == 'D' && s[i+1]\
    \ == 'B' && s[i+2] == 'E' then\n            count_upper = count_upper + 1\n  \
    \      elseif s[i] == 'd' && s[i+1] == 'b' && s[i+2] == 'e' then\n           \
    \ count_upper = count_upper + 1\n        elseif s[i] == 'e' && s[i+1] == 'b' &&\
    \ s[i+2] == 'd' then\n            count_upper = count_upper + 1\n        elseif\
    \ s[i] == 'E' && s[i+1] == 'B' && s[i+2] == 'D' then\n            count_upper\
    \ = count_upper + 1\n        elseif s[i] == 'e' && s[i+1] == 'b' && s[i+2] ==\
    \ 'd' then\n            count_upper = count_upper + 1\n        elseif s[i] ==\
    \ 'f' && s[i+1] == 'b' && s[i+2] == 'e' then\n            count_upper = count_upper\
    \ + 1\n        elseif s[i] == 'F' && s[i+1] == 'B' && s[i+2] == 'E' then\n   \
    \         count_upper = count_upper + 1\n        elseif s[i] == 'f' && s[i+1]\
    \ == 'b' && s[i+2] == 'e' then\n            count_upper = count_upper + 1\n  \
    \      elseif s[i] == 'g' && s[i+1] == 'b' && s[i+2] == 'e' then\n           \
    \ count_upper = count_upper + 1\n        elseif s[i] == 'G' && s[i+1] == 'B' &&\
    \ s[i+2] == 'E' then\n            count_upper = count_upper + 1\n        elseif\
    \ s[i] == 'g' && s[i+1] == 'b' && s[i+2] == 'e' then\n            count_upper\
    \ = count_upper + 1\n        elseif s[i] == 'h' && s[i+1] == 'b' && s[i+2] ==\
    \ 'e' then\n            count_upper = count_upper + 1\n        elseif s[i] ==\
    \ 'H' && s[i+1] == 'B' && s[i+2] == 'E' then\n            count_upper = count_upper\
    \ + 1\n        elseif s[i] == 'h' && s[i+1] == 'b' && s[i+2] == 'e' then\n   \
    \         count_upper = count_upper + 1\n        elseif s[i] == 'i' && s[i+1]\
    \ == 'b' && s[i+2] == 'e' then\n            count_upper = count_upper + 1\n  \
    \      elseif s[i] == 'I' && s[i+1] == 'B' && s[i\nusing Test\n\n@testset begin\n\
    \ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp1avnmx10.jl:11\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp1avnmx10.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of uppercase vowels in each word of a\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt6ont_6f.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpt6ont_6f.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the number of vowels found in\
    \ it.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpago_hzrz.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpago_hzrz.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count = 0\n    for\
    \ c in s\n        if isupper(c)\n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.3>\ncount_upper(\"aBCdEf\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of uppercase\
    \ letters in a string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx5q1zi7s.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpx5q1zi7s.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n            \n    return count\n\
    </cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"dBBE\"\
    )\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of vowels found in it.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqxofpyuw.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqxofpyuw.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the number of vowels found in\
    \ it.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1actpm_d.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1actpm_d.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp47qej53r.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp47qej53r.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp47qej53r.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n            \n    return count\n\
    </cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the number of vowels\
    \ \nin each word in the string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1x0ne2zv.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1x0ne2zv.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count_upper = Int64(0)\n\
    \    \n    for i in 1:length(s) do\n        if s[i] == 'A' || s[i] == 'a' then\n\
    \            count_upper = count_upper + 1\n        end\n    end\n    \n    return\
    \ count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise: Write\
    \ a function that counts the number of uppercase vowels in a string. \nThe function\
    \ should take a string as input, and return the number of uppercase vowels.\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8jqkr0y8.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8jqkr0y8.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count = 0\n    for\
    \ c in s\n        if isupper(c)\n            count += 1\n            \n    return\
    \ count\n</cell>\n<code language=julia-1.4>\ncount_upper(\"aBCdEf\")\n</cell>\n\
    <code language=julia-1.4>\ncount_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of uppercase letters in a string.\nusing Test\n\n@testset begin\n\
    \ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp83lk9m0s.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp83lk9m0s.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if c == 'A'\n            count_upper += 1\n        elseif c\
    \ == 'a'\n            count_upper += 1\n        elseif c == 'E'\n            count_upper\
    \ += 1\n        elseif c == 'e'\n            count_upper += 1\n        elseif\
    \ c == 'I'\n            count_upper += 1\n        elseif c == 'i'\n          \
    \  count_upper += 1\n        elseif c == 'O'\n            count_upper += 1\n \
    \       elseif c == 'o'\n            count_upper += 1\n        elseif c == 'U'\n\
    \            count_upper += 1\n        elseif c == 'u'\n            count_upper\
    \ += 1\n        elseif c == 'Y'\n            count_upper += 1\n        elseif\
    \ c == 'y'\n            count_upper += 1\n        elseif c == 'Y'\n          \
    \  count_upper += 1\n        elseif c == 'y'\n            count_upper += 1\n \
    \       elseif c == 'Y'\n            count_upper += 1\n        elseif c == 'y'\n\
    \            count_upper += 1\n        elseif c == 'Y'\n            count_upper\
    \ += 1\n        elseif c == 'y'\n            count_upper += 1\n        elseif\
    \ c == 'Y'\n            count_upper += 1\n        elseif c == 'y'\n          \
    \  count_upper += 1\n        elseif c == 'Y'\n            count_upper += 1\n \
    \       elseif c == 'y'\n            count_upper += 1\n        elseif c == 'Y'\n\
    \            count_upper += 1\n        elseif c == 'y'\n            count_upper\
    \ += 1\n        elseif c == 'Y'\n            count_upper += 1\n        elseif\
    \ c == 'y'\n            count_upper += 1\n        elseif c == 'Y'\n          \
    \  count_upper += 1\n        elseif c == 'y'\n            count_upper += 1\n \
    \       elseif c == 'Y'\n            count_upper += 1\n        elseif c == 'y'\n\
    \            count_upper += 1\n        elseif c == 'Y'\n            count_upper\
    \ += 1\n        elseif c == 'y'\n            count_upper += 1\n        elseif\
    \ c == 'Y'\n            count_upper += 1\n        elseif c == 'y'\n          \
    \  count_upper += 1\n        elseif c == 'Y'\n            count_upper += 1\n \
    \       elseif c == 'y'\n            count_upper += 1\n        elseif c == 'Y'\n\
    \            count_upper += 1\n        elseif c == 'y'\n            count_upper\
    \ += 1\n        elseif c == 'Y'\n            count_upper += 1\n        elseif\
    \ c == 'y'\n            count_upper += 1\n        elseif c == 'Y'\n          \
    \  count_upper += 1\n        elseif c == 'y'\n            count_upper += 1\n \
    \       elseif c == 'Y'\n            count_upper += 1\n        elseif c == 'y'\n\
    \            count_\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoh2ykchp.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpoh2ykchp.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count_upper = 0\n\
    \    for c in s\n        if isupper(c)\n            count_upper += 1\n       \
    \     \n    return count_upper\nend\n</cell>\n<code language=julia-1.3>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.3>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.3>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the number of vowels \nin the\
    \ string. \nFor example count_vowels(\"aBCdEf\") returns 3.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx1c6e429.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpx1c6e429.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper(s,0)\nend\n\
    </cell>\n<code language=julia-1.4>\ncount_upper(\"aBCdEf\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"dBBE\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of uppercase\
    \ vowels in a string. \nThe function should take a string as an argument and return\
    \ the number of uppercase vowels.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsg9ayfsq.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsg9ayfsq.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the number of vowels found in\
    \ that string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc3basiv2.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpc3basiv2.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count_upper = 0\n\
    \    for c in s\n        if isupper(c)\n            count_upper += 1\n       \
    \ end\n    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\n\
    @time count_upper(\"aBCdEf\")\n</cell>\n<code language=julia-1.5>\n@time count_upper(\"\
    abcdefg\")\n</cell>\n<code language=julia-1.5>\n@time count_upper(\"dBBE\")\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of uppercase\
    \ vowels in a string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzd0g1l0o.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzd0g1l0o.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            if\
    \ count_upper % 2 == 0\n                count_upper -= 1\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.4>\ncount_upper(\"aBCdEf\")\n</cell>\n<code\
    \ language=julia-1.4>\ncount_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"dBBE\")\n</cell>\n<text>\nExercise\nWrite a function that returns\
    \ the number of uppercase vowels in a string.\nusing Test\n\n@testset begin\n\n\
    candidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6m5mz4y2.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6m5mz4y2.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and\
    \ returns the number of vowels found in that string.\nusing Test\n\n@testset begin\n\
    \ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplubkqc4m.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplubkqc4m.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = Int64(0)\n\
    \    for x in s\n        if x \u2209 ['A'..'Z']\n            count_upper += 1\n\
    \        end\n    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.3>\n\
    count_upper(\"aBCdEf\")\n</cell>\n<code language=julia-1.3>\ncount_upper(\"abcdefg\"\
    )\n</cell>\n<code language=julia-1.3>\ncount_upper(\"dBBE\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of vowels\
    \ found in it.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_j4hb50w.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_j4hb50w.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper(s,0)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbjm0ckgd.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"aBCdEf\") == 1\n  MethodError: no method matching count_upper(::String,\
    \ ::Int64)\n  Closest candidates are:\n    count_upper(::String) at /tmp/tmpbjm0ckgd.jl:10\n\
    \  Stacktrace:\n   [1] count_upper(::String) at /tmp/tmpbjm0ckgd.jl:10\n   [2]\
    \ top-level scope at /tmp/tmpbjm0ckgd.jl:17\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpbjm0ckgd.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpbjm0ckgd.jl:18\n  Test threw exception\n  Expression: candidate(\"\
    abcdefg\") == 0\n  MethodError: no method matching count_upper(::String, ::Int64)\n\
    \  Closest candidates are:\n    count_upper(::String) at /tmp/tmpbjm0ckgd.jl:10\n\
    \  Stacktrace:\n   [1] count_upper(::String) at /tmp/tmpbjm0ckgd.jl:10\n   [2]\
    \ top-level scope at /tmp/tmpbjm0ckgd.jl:18\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpbjm0ckgd.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpbjm0ckgd.jl:19\n  Test threw exception\n  Expression: candidate(\"\
    dBBE\") == 0\n  MethodError: no method matching count_upper(::String, ::Int64)\n\
    \  Closest candidates are:\n    count_upper(::String) at /tmp/tmpbjm0ckgd.jl:10\n\
    \  Stacktrace:\n   [1] count_upper(::String) at /tmp/tmpbjm0ckgd.jl:10\n   [2]\
    \ top-level scope at /tmp/tmpbjm0ckgd.jl:19\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpbjm0ckgd.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpbjm0ckgd.jl:20\n  Test threw exception\n  Expression: candidate(\"\
    B\") == 0\n  MethodError: no method matching count_upper(::String, ::Int64)\n\
    \  Closest candidates are:\n    count_upper(::String) at /tmp/tmpbjm0ckgd.jl:10\n\
    \  Stacktrace:\n   [1] count_upper(::String) at /tmp/tmpbjm0ckgd.jl:10\n   [2]\
    \ top-level scope at /tmp/tmpbjm0ckgd.jl:20\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpbjm0ckgd.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpbjm0ckgd.jl:21\n  Test threw exception\n  Expression: candidate(\"\
    U\") == 1\n  MethodError: no method matching count_upper(::String, ::Int64)\n\
    \  Closest candidates are:\n    count_upper(::String) at /tmp/tmpbjm0ckgd.jl:10\n\
    \  Stacktrace:\n   [1] count_upper(::String) at /tmp/tmpbjm0ckgd.jl:10\n   [2]\
    \ top-level scope at /tmp/tmpbjm0ckgd.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpbjm0ckgd.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpbjm0ckgd.jl:22\n  Test threw exception\n  Expression: candidate(\"\
    \") == 0\n  MethodError: no method matching count_upper(::String, ::Int64)\n \
    \ Closest candidates are:\n    count_upper(::String) at /tmp/tmpbjm0ckgd.jl:10\n\
    \  Stacktrace:\n   [1] count_upper(::String) at /tmp/tmpbjm0ckgd.jl:10\n   [2]\
    \ top-level scope at /tmp/tmpbjm0ckgd.jl:22\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpbjm0ckgd.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpbjm0ckgd.jl:23\n  Test threw exception\n  Expression: candidate(\"\
    EEEE\") == 2\n  MethodError: no method matching count_upper(::String, ::Int64)\n\
    \  Closest candidates are:\n    count_upper(::String) at /tmp/tmpbjm0ckgd.jl:10\n\
    \  Stacktrace:\n   [1] count_upper(::String) at /tmp/tmpbjm0ckgd.jl:10\n   [2]\
    \ top-level scope at /tmp/tmpbjm0ckgd.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpbjm0ckgd.jl:16\n  \nTest Summary: | Error \
    \ Total\ntest set      |     7      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbjm0ckgd.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        else\n\
    \            count_upper\n    end\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of uppercase letters in a string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\"\
    ) == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") ==\
    \ 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg0f7wklw.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg0f7wklw.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = sum(map(is_upper,\
    \ s))\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the number of vowels found in it.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzcet92td.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzcet92td.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            if\
    \ count_upper % 2 == 0\n                count_upper -= 1\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the number of vowels found in it.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppmk8eusr.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppmk8eusr.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of uppercase vowels in each word of a\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsab1ps5v.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsab1ps5v.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            if\
    \ count_upper % 2 == 0\n                count_upper -= 1\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.4>\ncount_upper(\"aBCdEf\")\n</cell>\n<code\
    \ language=julia-1.4>\ncount_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of uppercase vowels in a string.\nusing Test\n\n@testset begin\n\n\
    candidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp873_5hx9.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp873_5hx9.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = if even?\
    \ s then 0 else 1\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\"\
    )\n</cell>\n<text>\nExercise 3\nWrite a function that counts the number of uppercase\
    \ vowels in a string.\nThe function should take a string as an argument and return\
    \ the number of uppercase vowels.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space required before \"?\" operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm24l_2bd.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm24l_2bd.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n            \n    return count\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of vowels contained in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") ==\
    \ 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\
    \t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8bdwtha2.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8bdwtha2.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the number of vowels found in\
    \ it.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp46i6wofb.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp46i6wofb.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n    return count\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\"\
    ) == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") ==\
    \ 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpg8q2lq7k.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpg8q2lq7k.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpg8q2lq7k.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpm4yimdg4.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpm4yimdg4.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpm4yimdg4.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjahqpupy.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"aBCdEf\") == 1\n  UndefVarError: isupper not defined\n\
    \  Stacktrace:\n   [1] count_upper(::String) at /tmp/tmpjahqpupy.jl:12\n   [2]\
    \ top-level scope at /tmp/tmpjahqpupy.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjahqpupy.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpjahqpupy.jl:24\n  Test threw exception\n  Expression: candidate(\"\
    abcdefg\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n   [1] count_upper(::String)\
    \ at /tmp/tmpjahqpupy.jl:12\n   [2] top-level scope at /tmp/tmpjahqpupy.jl:24\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjahqpupy.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpjahqpupy.jl:25\n  Test threw exception\n  Expression: candidate(\"\
    dBBE\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n   [1] count_upper(::String)\
    \ at /tmp/tmpjahqpupy.jl:12\n   [2] top-level scope at /tmp/tmpjahqpupy.jl:25\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjahqpupy.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpjahqpupy.jl:26\n  Test threw exception\n  Expression: candidate(\"\
    B\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n   [1] count_upper(::String)\
    \ at /tmp/tmpjahqpupy.jl:12\n   [2] top-level scope at /tmp/tmpjahqpupy.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjahqpupy.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpjahqpupy.jl:27\n  Test threw exception\n  Expression: candidate(\"\
    U\") == 1\n  UndefVarError: isupper not defined\n  Stacktrace:\n   [1] count_upper(::String)\
    \ at /tmp/tmpjahqpupy.jl:12\n   [2] top-level scope at /tmp/tmpjahqpupy.jl:27\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjahqpupy.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpjahqpupy.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    EEEE\") == 2\n  UndefVarError: isupper not defined\n  Stacktrace:\n   [1] count_upper(::String)\
    \ at /tmp/tmpjahqpupy.jl:12\n   [2] top-level scope at /tmp/tmpjahqpupy.jl:29\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjahqpupy.jl:22\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjahqpupy.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            if\
    \ count_upper % 2 == 0\n                count_upper -= 1\n    return count_upper\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdijkjm5m.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdijkjm5m.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ i in 0..length(s)\n        if s[i] == 'A' || s[i] == 'a' || s[i] == 'E' || s[i]\
    \ == 'e' || s[i] == 'I' || s[i] == 'i' || s[i] == 'O' || s[i] == 'o' || s[i] ==\
    \ 'U' || s[i] == 'u'\n            count_upper = count_upper + 1\n        end\n\
    \    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the number of vowels contained\
    \ in the string. \nThe vowels are \"a\", \"e\", \"i\", \"o\", and \"u\". \nThe\
    \ function should ignore all other characters.\nFor example, count_vowels(\"aBCdEf\"\
    ) returns 3.\nHint: Use a for loop to iterate over the string.\nusing Test\n\n\
    @testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\
    \t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"\
    B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t\
    @test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzi8liy8o.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzi8liy8o.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count = 0\n    for\
    \ c in s\n        if isupper(c)\n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that counts the number of uppercase vowels in a string.\nusing Test\n\
    \n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") ==\
    \ 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\
    \t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpw_67h7vz.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpw_67h7vz.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the number of vowels \nin the\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphfupjhub.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphfupjhub.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count = 0\n    for\
    \ c in s\n        if isupper(c)\n            count += 1\n            \n    return\
    \ count\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"dBBE\")\n</cell>\n<text>\nExercise\nWrite a function that counts\
    \ the number of uppercase vowels in a string s.\nusing Test\n\n@testset begin\n\
    \ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpulaq5qj3.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpulaq5qj3.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count = 0\n    for\
    \ c in s\n        if isupper(c)\n            count += 1\n            \n    return\
    \ count\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of uppercase letters\
    \ in a string.\nFor example, count_upper(\"aBCdEf\") returns 3.\nusing Test\n\n\
    @testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\
    \t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"\
    B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t\
    @test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj9flcl6d.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj9flcl6d.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp6vv6hks9.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp6vv6hks9.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp6vv6hks9.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n            \n    return count\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of uppercase vowels in a string.\nusing Test\n\n@testset begin\n\n\
    candidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq5x2u7p1.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq5x2u7p1.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count_upper = 0\n\
    \    \n    for c in s\n        if isupper(c)\n            count_upper += 1\n \
    \           \n            if count_upper % 2 == 0\n                return count_upper\n\
    \            \n        end\n    end\n    \n    return count_upper\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"dBBE\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of vowels found in it.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo75040mo.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpo75040mo.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpsnfusf_l.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpsnfusf_l.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpsnfusf_l.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count_upper = zeros(Int,\
    \ length(s))\n    for (i,c) in enumerate(s)\n        if isupper(c)\n         \
    \   count_upper[i] = count_upper[i] + 1\n        end\n    end\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of uppercase vowels in each word of a string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwht99lvv.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwht99lvv.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the number of uppercase vowels\
    \ in each word in the string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0gfjcd2m.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0gfjcd2m.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if c == 'A' or c == 'E' or c == 'I' or c == 'O' or c == 'U'\n\
    \            count_upper += 1\n        end\n    end\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.4>\ncount_upper(\"aBCdEf\")\n</cell>\n<code\
    \ language=julia-1.4>\ncount_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of vowels \nin the string. \nThe function should\
    \ ignore all non-vowel characters. \nThe function should ignore uppercase letters.\n\
    The function should ignore lowercase letters.\nThe function should ignore non-alphabetic\
    \ characters.\nThe function should ignore non-alphabetic characters in quotes.\n\
    The function should ignore non-alphabetic characters in brackets.\nThe function\
    \ should ignore non-alphabetic characters in braces.\nThe function should ignore\
    \ non-alphabetic characters in parentheses.\nThe function should ignore non-alphabetic\
    \ characters in square brackets.\nThe function should ignore non-alphabetic characters\
    \ in curly braces.\nThe function should ignore non-alphabetic characters in parentheses.\n\
    The function should ignore non-alphabetic characters in square brackets.\nThe\
    \ function should ignore non-alphabetic characters in curly braces.\nThe function\
    \ should ignore non-alphabetic characters in parentheses.\nThe function should\
    \ ignore non-alphabetic characters in square brackets.\nThe function should ignore\
    \ non-alphabetic characters in curly braces.\nThe function should ignore non-alphabetic\
    \ characters in parentheses.\nThe function should ignore non-alphabetic characters\
    \ in square brackets.\nThe function should ignore non-alphabetic characters in\
    \ curly braces.\nThe function should ignore non-alphabetic characters in parentheses.\n\
    The function should ignore non-alphabetic characters in square brackets.\nThe\
    \ function should ignore non-alphabetic characters in curly braces.\nThe function\
    \ should ignore non-alphabetic characters in parentheses.\nThe function should\
    \ ignore non-alphabetic characters in square brackets.\nThe function should ignore\
    \ non-alphabetic characters in curly braces.\nThe function should ignore non-alphabetic\
    \ characters in parentheses.\nThe function should ignore non-alphabetic characters\
    \ in square brackets.\nThe function should ignore non-alphabetic characters in\
    \ curly braces.\nThe function should ignore non-alphabetic characters in parentheses.\n\
    The \nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"c\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8dwbpa94.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8dwbpa94.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of uppercase letters in a string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\"\
    ) == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") ==\
    \ 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr563nvuu.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpr563nvuu.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the number of vowels present\
    \ in the string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t\
    @test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"\
    dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8abz8f01.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8abz8f01.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            if\
    \ count_upper % 2 == 0\n                count_upper -= 1\n    return count_upper\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2kof2h26.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2kof2h26.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ i in 0 .. length(s)-1 do\n        if s[i] == 'A' || s[i] == 'a' then\n     \
    \       count_upper += 1\n        elseif s[i] == 'B' || s[i] == 'b' then\n   \
    \         count_upper += 1\n        elseif s[i] == 'C' || s[i] == 'c' then\n \
    \           count_upper += 1\n        elseif s[i] == 'D' || s[i] == 'd' then\n\
    \            count_upper += 1\n        elseif s[i] == 'E' || s[i] == 'e' then\n\
    \            count_upper += 1\n        elseif s[i] == 'F' || s[i] == 'f' then\n\
    \            count_upper += 1\n        elseif s[i] == 'G' || s[i] == 'g' then\n\
    \            count_upper += 1\n        elseif s[i] == 'H' || s[i] == 'h' then\n\
    \            count_upper += 1\n        elseif s[i] == 'I' || s[i] == 'i' then\n\
    \            count_upper += 1\n        elseif s[i] == 'J' || s[i] == 'j' then\n\
    \            count_upper += 1\n        elseif s[i] == 'K' || s[i] == 'k' then\n\
    \            count_upper += 1\n        elseif s[i] == 'L' || s[i] == 'l' then\n\
    \            count_upper += 1\n        elseif s[i] == 'M' || s[i] == 'm' then\n\
    \            count_upper += 1\n        elseif s[i] == 'N' || s[i] == 'n' then\n\
    \            count_upper += 1\n        elseif s[i] == 'O' || s[i] == 'o' then\n\
    \            count_upper += 1\n        elseif s[i] == 'P' || s[i] == 'p' then\n\
    \            count_upper += 1\n        elseif s[i] == 'Q' || s[i] == 'q' then\n\
    \            count_upper += 1\n        elseif s[i] == 'R' || s[i] == 'r' then\n\
    \            count_upper += 1\n        elseif s[i] == 'S' || s[i] == 's' then\n\
    \            count_upper += 1\n        elseif s[i] == 'T' || s[i] == 't' then\n\
    \            count_upper += 1\n        elseif s[i] == 'U' || s[i] == 'u' then\n\
    \            count_upper += 1\n        elseif s[i] == 'V' || s[i] == 'v' then\n\
    \            count_upper += 1\n        elseif s[i] == 'W' || s[i] == 'w' then\n\
    \            count_upper += 1\n        elseif s[i] == 'X' || s[i] == 'x' then\n\
    \            count_upper += 1\n        elseif s[i] == 'Y' || s[i] == 'y' then\n\
    \            count_upper += 1\n        elseif s[i] == 'Z' || s[i] == 'z' then\n\
    \            count_upper += 1\n        end\n    end\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a string s, count the\
    \ number of uppercase vowels in odd indices.\n    \n    For example:\n    count_upper('aBCdEf')\
    \ returns 3\n    count_upper('abcdefg') returns \nusing Test\n\n@testset begin\n\
    \ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpbez2zfz6.jl:11\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpbez2zfz6.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n            \n    return count\n\
    </cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of uppercase letters in a\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5pf9m7pn.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5pf9m7pn.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if c == 'A' or c == 'E' or c == 'I' or c == 'O' or c == 'U'\n\
    \            count_upper += 1\n        end\n    end\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of vowels \nin the string. \nFor example count_vowels(\"\
    aBCdEf\") returns 3.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"c\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq0at9_xo.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq0at9_xo.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count = 0\n    for\
    \ c in s\n        if isupper(c)\n            count += 1\n            \n    return\
    \ count\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpmxgofeh9.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpmxgofeh9.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpmxgofeh9.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count = 0\n    for\
    \ c in s\n        if isupper(c)\n            count += 1\n            \n    return\
    \ count\n</cell>\n<code language=julia-1.4>\ncount_upper(\"aBCdEf\")\n</cell>\n\
    <code language=julia-1.4>\ncount_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of uppercase vowels in a string.\nusing Test\n\n@testset begin\n\n\
    candidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwkepb39b.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwkepb39b.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count_upper = 0\n\
    \    \n    for i in 0..(length(s)-2) do\n        if s[i] == 'A' or s[i] == 'a'\
    \ then\n            count_upper = count_upper + 1\n        elseif s[i] == 'B'\
    \ or s[i] == 'b' then\n            count_upper = count_upper + 1\n        elseif\
    \ s[i] == 'C' or s[i] == 'c' then\n            count_upper = count_upper + 1\n\
    \        elseif s[i] == 'D' or s[i] == 'd' then\n            count_upper = count_upper\
    \ + 1\n        elseif s[i] == 'E' or s[i] == 'e' then\n            count_upper\
    \ = count_upper + 1\n        elseif s[i] == 'F' or s[i] == 'f' then\n        \
    \    count_upper = count_upper + 1\n        elseif s[i] == 'G' or s[i] == 'g'\
    \ then\n            count_upper = count_upper + 1\n        elseif s[i] == 'H'\
    \ or s[i] == 'h' then\n            count_upper = count_upper + 1\n        elseif\
    \ s[i] == 'I' or s[i] == 'i' then\n            count_upper = count_upper + 1\n\
    \        elseif s[i] == 'J' or s[i] == 'j' then\n            count_upper = count_upper\
    \ + 1\n        elseif s[i] == 'K' or s[i] == 'k' then\n            count_upper\
    \ = count_upper + 1\n        elseif s[i] == 'L' or s[i] == 'l' then\n        \
    \    count_upper = count_upper + 1\n        elseif s[i] == 'M' or s[i] == 'm'\
    \ then\n            count_upper = count_upper + 1\n        elseif s[i] == 'N'\
    \ or s[i] == 'n' then\n            count_upper = count_upper + 1\n        elseif\
    \ s[i] == 'O' or s[i] == 'o' then\n            count_upper = count_upper + 1\n\
    \        elseif s[i] == 'P' or s[i] == 'p' then\n            count_upper = count_upper\
    \ + 1\n        elseif s[i] == 'Q' or s[i] == 'q' then\n            count_upper\
    \ = count_upper + 1\n        elseif s[i] == 'R' or s[i] == 'r' then\n        \
    \    count_upper = count_upper + 1\n        elseif s[i] == 'S' or s[i] == 's'\
    \ then\n            count_upper = count_upper + 1\n        elseif s[i] == 'T'\
    \ or s[i] == 't' then\n            count_upper = count_upper + 1\n        elseif\
    \ s[i] == 'U' or s[i] == 'u' then\n            count_upper = count_upper + 1\n\
    \        elseif s[i] == 'V' or s[i] == 'v' then\n            count_upper = count_upper\
    \ + 1\n        elseif s[i] == 'W' or s[i] == 'w' then\n            count_upper\
    \ = count_upper + 1\n        elseif s[i] == 'X' or s[i] == 'x' then\n        \
    \    count_upper = count_upper + 1\n        elseif s[i] == 'Y' or s[i] == 'y'\
    \ then\n            count_upper\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmprxmkj_f4.jl:13\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmprxmkj_f4.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ i in 0..(length(s)-2) do\n        if s[i] == 'A' && s[i+1] == 'B' && s[i+2]\
    \ == 'C' then\n            count_upper = count_upper + 1\n        end\n    end\n\
    \    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the number of vowels (a, e, i,\
    \ o, u) in that string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpt__jqt5j.jl:11\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpt__jqt5j.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n        end\n    end\n   \
    \ return count\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the number of uppercase vowels in a string.\nusing Test\n\
    \n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") ==\
    \ 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\
    \t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb3voivoc.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpb3voivoc.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U'\n\
    \            count_upper += 1\n        end\n    end\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of uppercase vowels in a string.\nWrite a function that returns the\
    \ number of uppercase vowels in a string and counts the number of uppercase vowels\
    \ in even indices.\nWrite a function that returns the number of uppercase vowels\
    \ in a string and counts the number of uppercase vowels in even indices and returns\
    \ the sum.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjihaompp.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjihaompp.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ i in 0..(length(s) - 1)\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I'\
    \ || s[i] == 'O' || s[i] == 'U'\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the number of vowels contained\
    \ in the string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t\
    @test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"\
    dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo1i1pdlf.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpo1i1pdlf.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n            \n    return count\n\
    </cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of uppercase letters in a\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp076ftyu_.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp076ftyu_.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpl6nc643_.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpl6nc643_.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpl6nc643_.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n    return count\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"dBBE\"\
    )\n</cell>\n<text>\nExercise: Write a function that returns the number of uppercase\
    \ letters in a string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuog7hvj6.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpuog7hvj6.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\n</cell>\n<code language=julia-1.4>\n# Test count_upper\n\
    @test count_upper(\"aBCdEf\") == 1\n@test count_upper(\"abcdefg\") == 0 \n@test\
    \ count_upper(\"dBBE\") == 0 \n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of uppercase vowels in each word of a string.\nusing Test\n\
    \n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") ==\
    \ 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\
    \t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3neysv5e.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3neysv5e.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n            \n    return count\n\
    </cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"dBBE\"\
    )\n</cell>\n<text>\nExercise: Write a function that counts the number of uppercase\
    \ vowels in each word of a string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6n06nke_.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6n06nke_.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpducd88h8.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpducd88h8.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpducd88h8.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpeya2brvi.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"aBCdEf\") == 1\n  UndefVarError: isupper not defined\n\
    \  Stacktrace:\n   [1] count_upper(::String) at /tmp/tmpeya2brvi.jl:12\n   [2]\
    \ top-level scope at /tmp/tmpeya2brvi.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpeya2brvi.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpeya2brvi.jl:24\n  Test threw exception\n  Expression: candidate(\"\
    abcdefg\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n   [1] count_upper(::String)\
    \ at /tmp/tmpeya2brvi.jl:12\n   [2] top-level scope at /tmp/tmpeya2brvi.jl:24\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpeya2brvi.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpeya2brvi.jl:25\n  Test threw exception\n  Expression: candidate(\"\
    dBBE\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n   [1] count_upper(::String)\
    \ at /tmp/tmpeya2brvi.jl:12\n   [2] top-level scope at /tmp/tmpeya2brvi.jl:25\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpeya2brvi.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpeya2brvi.jl:26\n  Test threw exception\n  Expression: candidate(\"\
    B\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n   [1] count_upper(::String)\
    \ at /tmp/tmpeya2brvi.jl:12\n   [2] top-level scope at /tmp/tmpeya2brvi.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpeya2brvi.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpeya2brvi.jl:27\n  Test threw exception\n  Expression: candidate(\"\
    U\") == 1\n  UndefVarError: isupper not defined\n  Stacktrace:\n   [1] count_upper(::String)\
    \ at /tmp/tmpeya2brvi.jl:12\n   [2] top-level scope at /tmp/tmpeya2brvi.jl:27\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpeya2brvi.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpeya2brvi.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    EEEE\") == 2\n  UndefVarError: isupper not defined\n  Stacktrace:\n   [1] count_upper(::String)\
    \ at /tmp/tmpeya2brvi.jl:12\n   [2] top-level scope at /tmp/tmpeya2brvi.jl:29\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpeya2brvi.jl:22\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeya2brvi.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count_upper = 0\n\
    \    \n    for i in 0..(length(s)-2) do \n        if s[i] == 'A' && s[i+1] ==\
    \ 'B' && s[i+2] == 'C' \n            count_upper += 1 \n        else if s[i] ==\
    \ 'a' && s[i+1] == 'b' && s[i+2] == 'c' \n            count_upper += 1 \n    \
    \    else if s[i] == 'd' && s[i+1] == 'b' && s[i+2] == 'e' \n            count_upper\
    \ += 1 \n        else if s[i] == 'D' && s[i+1] == 'B' && s[i+2] == 'E' \n    \
    \        count_upper += 1 \n        else if s[i] == 'd' && s[i+1] == 'b' && s[i+2]\
    \ == 'e' \n            count_upper += 1 \n        else if s[i] == 'e' && s[i+1]\
    \ == 'f' && s[i+2] == 'g' \n            count_upper += 1 \n        else if s[i]\
    \ == 'e' && s[i+1] == 'f' && s[i+2] == 'g' \n            count_upper += 1 \n \
    \       else if s[i] == 'e' && s[i+1] == 'f' && s[i+2] == 'g' \n            count_upper\
    \ += 1 \n        else if s[i] == 'e' && s[i+1] == 'f' && s[i+2] == 'g' \n    \
    \        count_upper += 1 \n        else if s[i] == 'e' && s[i+1] == 'f' && s[i+2]\
    \ == 'g' \n            count_upper += 1 \n        else if s[i] == 'e' && s[i+1]\
    \ == 'f' && s[i+2] == 'g' \n            count_upper += 1 \n        else if s[i]\
    \ == 'e' && s[i+1] == 'f' && s[i+2] == 'g' \n            count_upper += 1 \n \
    \       else if s[i] == 'e' && s[i+1] == 'f' && s[i+2] == 'g' \n            count_upper\
    \ += 1 \n        else if s[i] == 'e' && s[i+1] == 'f' && s[i+2] == 'g' \n    \
    \        count_upper += 1 \n        else if s[i] == 'e' && s[i+1] == 'f' && s[i+2]\
    \ == 'g' \n            count_upper += 1 \n        else if s[i] == 'e' && s[i+1]\
    \ == 'f' && s[i+2] == 'g' \n            count_upper += 1 \n        else if s[i]\
    \ == 'e' && s[i+1] == 'f' && s[i+2] == 'g' \n            count_upper += 1 \n \
    \       else if s[i] == 'e' && s[i+1] == 'f' && s[i+2] == 'g' \n            count_upper\
    \ += 1 \n        else if s[i] == 'e' && s[i+1] == 'f' && s[i+2] == 'g' \n    \
    \        count_upper += 1 \n        else if s[i] == 'e' && s[i+1] == 'f' && s[i+2]\
    \ == 'g' \n            count_upper += 1 \n        else if s[i] == 'e' && s[i+1]\
    \ == 'f' && s[i+2]\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpmguichsu.jl:13\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpmguichsu.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if c == 'A' || c == 'a' || c == 'E' || c == 'e' || c == 'I'\
    \ || c == 'i' || c == 'O' || c == 'o' || c == 'U' || c == 'u'\n            count_upper\
    \ += 1\n        end\n    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of uppercase vowels in a\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpywzikb_e.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpywzikb_e.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n    return count\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\"\
    ) == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") ==\
    \ 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpu1in31ue.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpu1in31ue.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpu1in31ue.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        else\n\
    \            count_upper = 0\n    end\n    return count_upper\nend\n</cell>\n\
    <code language=julia-1.4>\ncount_upper(\"aBCdEf\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"dBBE\"\
    )\n</cell>\n<text>\nExercise\nWrite a function that returns the number of uppercase\
    \ vowels in a string. \nWrite a function that returns the number of uppercase\
    \ vowels in an array. \nWrite a function that returns the number of uppercase\
    \ vowels in a string.\nWrite a function that returns the number of uppercase vowels\
    \ in an array.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxvmlxp12.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxvmlxp12.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpp__h4z9s.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"aBCdEf\") == 1\n  UndefVarError: isupper not defined\n\
    \  Stacktrace:\n   [1] count_upper(::String) at /tmp/tmpp__h4z9s.jl:12\n   [2]\
    \ top-level scope at /tmp/tmpp__h4z9s.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpp__h4z9s.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpp__h4z9s.jl:24\n  Test threw exception\n  Expression: candidate(\"\
    abcdefg\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n   [1] count_upper(::String)\
    \ at /tmp/tmpp__h4z9s.jl:12\n   [2] top-level scope at /tmp/tmpp__h4z9s.jl:24\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpp__h4z9s.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpp__h4z9s.jl:25\n  Test threw exception\n  Expression: candidate(\"\
    dBBE\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n   [1] count_upper(::String)\
    \ at /tmp/tmpp__h4z9s.jl:12\n   [2] top-level scope at /tmp/tmpp__h4z9s.jl:25\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpp__h4z9s.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpp__h4z9s.jl:26\n  Test threw exception\n  Expression: candidate(\"\
    B\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n   [1] count_upper(::String)\
    \ at /tmp/tmpp__h4z9s.jl:12\n   [2] top-level scope at /tmp/tmpp__h4z9s.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpp__h4z9s.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpp__h4z9s.jl:27\n  Test threw exception\n  Expression: candidate(\"\
    U\") == 1\n  UndefVarError: isupper not defined\n  Stacktrace:\n   [1] count_upper(::String)\
    \ at /tmp/tmpp__h4z9s.jl:12\n   [2] top-level scope at /tmp/tmpp__h4z9s.jl:27\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpp__h4z9s.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpp__h4z9s.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    EEEE\") == 2\n  UndefVarError: isupper not defined\n  Stacktrace:\n   [1] count_upper(::String)\
    \ at /tmp/tmpp__h4z9s.jl:12\n   [2] top-level scope at /tmp/tmpp__h4z9s.jl:29\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpp__h4z9s.jl:22\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp__h4z9s.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count = 0\n    for\
    \ c in s\n        if isupper(c)\n            count += 1\n            \n    return\
    \ count\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the number of vowels found in that string.\nusing Test\n\
    \n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") ==\
    \ 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\
    \t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprk8dpbod.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprk8dpbod.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the number of vowels found in\
    \ it.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmdim5jns.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmdim5jns.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count_upper = 0\n\
    \    for c in s\n        if isupper(c)\n            count_upper += 1\n       \
    \ end\n    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of vowels\
    \ found in it.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph82rbdto.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmph82rbdto.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of uppercase vowels in a string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\"\
    ) == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") ==\
    \ 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0yhng6ku.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0yhng6ku.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = if even?\
    \ index then 1 else 0 end\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<text>\nExercise 3\nWrite a function that counts the number\
    \ of uppercase vowels in a string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space required before \"?\" operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8glohgwq.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8glohgwq.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = sum [ count_upper(s[i:i+2])\
    \ | i <- [0..length(s)] ]\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the number of uppercase vowels in a string.\nusing Test\n\
    \n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") ==\
    \ 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\
    \t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"[\" not allowed in \"sum [\" at\
    \ /tmp/tmp6cllx21d.jl:10\nStacktrace:\n [1] top-level scope at /tmp/tmp6cllx21d.jl:10\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp6cllx21d.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = Int64(0)\n\
    \    for x in s\n        if x \u2209 ['A'..'Z']\n            count_upper += 1\n\
    \        else\n            if x \u2208 ['A'..'Z']\n                if x \u2208\
    \ ['A'..'Z']\n                    count_upper += 1\n                else\n   \
    \                 if x \u2208 ['A'..'Z']\n                        if x \u2208\
    \ ['A'..'Z']\n                            count_upper += 1\n                 \
    \       else\n                            if x \u2208 ['A'..'Z']\n           \
    \                     if x \u2208 ['A'..'Z']\n                               \
    \     count_upper += 1\n                                else\n               \
    \                     if x \u2208 ['A'..'Z']\n                               \
    \         if x \u2208 ['A'..'Z']\n                                           \
    \ count_upper += 1\n                                        else\n           \
    \                                 if x \u2208 ['A'..'Z']\n                   \
    \                             if x \u2208 ['A'..'Z']\n                       \
    \                             count_upper += 1\n                             \
    \                   else\n                                                   \
    \ count_upper += 0\n                            else\n                       \
    \         count_upper += 0\n                    else\n                       \
    \ count_upper += 0\n            else\n                count_upper += 0\n    return\
    \ count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\"\
    )\n</cell>\n<text>\nExercise 4\nWrite a function that counts the number of uppercase\
    \ vowels in a string. \nWrite a function that counts the number of uppercase vowels\
    \ in even indices in a string.\nWrite a function that counts the number of uppercase\
    \ vowels in odd indices in a string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpvp7nih3s.jl:32 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope at /tmp/tmpvp7nih3s.jl:36\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpvp7nih3s.jl:36\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n    return count\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the number of vowels found\
    \ in that string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t\
    @test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"\
    dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxes7wu1a.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxes7wu1a.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ i in 0..(length(s)-2) do\n        if s[i] == 'A' and s[i+1] == 'B' and s[i+2]\
    \ == 'C' then\n            count_upper += 1\n        end\n    end\n    return\
    \ count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of uppercase vowels in a string. \nFor example,\
    \ count_upper(\"aBCdEf\") returns 1.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpgac85bs6.jl:11\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpgac85bs6.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        else\n\
    \            count_upper\n    end\nend\n</cell>\n<code language=julia-1.4>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the number of characters in the string that are uppercase letters.\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps5fcmti1.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmps5fcmti1.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ i in 0 .. s.length-1\n        if s[i] == 'A' || s[i] == 'a' || s[i] == 'E' ||\
    \ s[i] == 'e' || s[i] == 'I' || s[i] == 'i' || s[i] == 'O' || s[i] == 'o' || s[i]\
    \ == 'U' || s[i] == 'u'\n            count_upper += 1\n        end\n    end\n\
    \    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the number of vowels ('a', 'e',\
    \ 'i', 'o', and 'u') in it.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpii844zxg.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpii844zxg.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count = 0\n    for\
    \ c in s\n        if isupper(c)\n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the number of uppercase vowels in a string.\nusing Test\n\
    \n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") ==\
    \ 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\
    \t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjedtlv72.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjedtlv72.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpoh1lgnkq.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpoh1lgnkq.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpoh1lgnkq.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\n</cell>\n<code language=julia-1.4>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of uppercase vowels in a string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpw_kn1oo5.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpw_kn1oo5.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count_upper = 0\n\
    \    \n    for c in s\n        if isupper(c)\n            count_upper += 1\n \
    \           \n    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpeje76bsw.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpeje76bsw.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpeje76bsw.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n    return count\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of uppercase vowels in a string.\
    \ \nFor example, count_upper(\"aBCdEf\") returns 1.\nusing Test\n\n@testset begin\n\
    \ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8mui2ksq.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8mui2ksq.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n            \n    return count\n\
    </cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"dBBE\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of vowels found in it.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpif53bf3i.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpif53bf3i.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the number of uppercase letters\
    \ in the string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t\
    @test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"\
    dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk36jg0kz.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk36jg0kz.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4b_i77ar.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"aBCdEf\") == 1\n  UndefVarError: isupper not defined\n\
    \  Stacktrace:\n   [1] count_upper(::String) at /tmp/tmp4b_i77ar.jl:12\n   [2]\
    \ top-level scope at /tmp/tmp4b_i77ar.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp4b_i77ar.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmp4b_i77ar.jl:24\n  Test threw exception\n  Expression: candidate(\"\
    abcdefg\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n   [1] count_upper(::String)\
    \ at /tmp/tmp4b_i77ar.jl:12\n   [2] top-level scope at /tmp/tmp4b_i77ar.jl:24\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp4b_i77ar.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmp4b_i77ar.jl:25\n  Test threw exception\n  Expression: candidate(\"\
    dBBE\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n   [1] count_upper(::String)\
    \ at /tmp/tmp4b_i77ar.jl:12\n   [2] top-level scope at /tmp/tmp4b_i77ar.jl:25\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp4b_i77ar.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmp4b_i77ar.jl:26\n  Test threw exception\n  Expression: candidate(\"\
    B\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n   [1] count_upper(::String)\
    \ at /tmp/tmp4b_i77ar.jl:12\n   [2] top-level scope at /tmp/tmp4b_i77ar.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp4b_i77ar.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmp4b_i77ar.jl:27\n  Test threw exception\n  Expression: candidate(\"\
    U\") == 1\n  UndefVarError: isupper not defined\n  Stacktrace:\n   [1] count_upper(::String)\
    \ at /tmp/tmp4b_i77ar.jl:12\n   [2] top-level scope at /tmp/tmp4b_i77ar.jl:27\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp4b_i77ar.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmp4b_i77ar.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    EEEE\") == 2\n  UndefVarError: isupper not defined\n  Stacktrace:\n   [1] count_upper(::String)\
    \ at /tmp/tmp4b_i77ar.jl:12\n   [2] top-level scope at /tmp/tmp4b_i77ar.jl:29\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp4b_i77ar.jl:22\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4b_i77ar.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n    return count\n</cell>\n\
    <code language=julia-1.3>\ncount_upper(\"aBCdEf\")\n</cell>\n<code language=julia-1.3>\n\
    count_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.3>\ncount_upper(\"dBBE\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of uppercase\
    \ vowels in a string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxh1t0b4_.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxh1t0b4_.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = if even?\
    \ index then 1 else 0 end\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of uppercase vowels in a string. \nFor\
    \ example, count_upper(\"aBCdEf\") returns 1.\nusing Test\n\n@testset begin\n\n\
    candidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space required before \"?\" operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphf6dj3xw.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphf6dj3xw.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = if even?\
    \ s then 0 else 1\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the number of uppercase vowels in a string.\nusing Test\n\
    \n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") ==\
    \ 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\
    \t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space required before \"?\" operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl9z4pnlq.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpl9z4pnlq.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\n</cell>\n<code language=julia-1.4>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.4>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the number of uppercase letters.\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwqhqrcny.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwqhqrcny.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = Int64(0)\n\
    \    for c in s\n        if isupper(c)\n            count_upper += 1 \n      \
    \      \n    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpwn0clnuz.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpwn0clnuz.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpwn0clnuz.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the number of uppercase vowels\
    \ in each word in the string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2l5to_5y.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2l5to_5y.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U'\n\
    \            count_upper += 1\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of times a substring appears\
    \ in a string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_5ad1zu2.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_5ad1zu2.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpclq2vxf7.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpclq2vxf7.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpclq2vxf7.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpqhv4wi30.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpqhv4wi30.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpqhv4wi30.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that counts the number of uppercase vowels in a string.\nWrite\
    \ a function that counts the number of uppercase vowels in a string and returns\
    \ the number of vowels.\nWrite a function that counts the number of uppercase\
    \ vowels in a string and returns the number of vowels.\nWrite a function that\
    \ counts the number of uppercase vowels in a string and returns the number of\
    \ vowels.\nWrite a function that counts the number of uppercase vowels in a string\
    \ and returns the number of vowels.\nWrite a function that counts the number of\
    \ uppercase vowels in a string and returns the number of vowels.\nWrite a function\
    \ that counts the number of uppercase vowels in a string and returns the number\
    \ of vowels.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptb27egff.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptb27egff.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count_upper = sum(map(is_upper,\
    \ s))\n    \nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n\
    </cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"dBBE\")\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ a string and returns the number of vowels found in that string.\nusing Test\n\
    \n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") ==\
    \ 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\
    \t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpehkuwr7n.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpehkuwr7n.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n            \n    return count\n\
    end\n</cell>\n<code language=julia-1.0>\ncount_upper(\"aBCdEf\")\n</cell>\n<code\
    \ language=julia-1.0>\ncount_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.0>\n\
    count_upper(\"dBBE\")\n</cell>\n<text>\nExercise\nWrite a function that counts\
    \ the number of uppercase vowels in a string.\nusing Test\n\n@testset begin\n\n\
    candidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgpoy_29l.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgpoy_29l.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = Int64(0)\n\
    \    for c in s\n        if isupper(c)\n            count_upper += 1\n       \
    \     \n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the number of vowels contained\
    \ in the string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t\
    @test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"\
    dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr20ybgp8.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpr20ybgp8.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpnyhwth8d.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpnyhwth8d.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpnyhwth8d.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n            \n    return count\n\
    </cell>\n<code language=julia-1.3>\ncount_upper(\"aBCdEf\")\n</cell>\n<code language=julia-1.3>\n\
    count_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.3>\ncount_upper(\"dBBE\"\
    )\n</cell>\n<text>\nExercise: Write a function that returns the number of uppercase\
    \ vowels in a string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9a52cbv8.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9a52cbv8.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n        end\n    end\n   \
    \ return count\nend\n</cell>\n<code language=julia-1.3>\ncount_upper(\"aBCdEf\"\
    )\n</cell>\n<code language=julia-1.3>\ncount_upper(\"abcdefg\")\n</cell>\n<code\
    \ language=julia-1.3>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the number of characters in the string\
    \ that are not uppercase letters.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5jvkg1yl.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5jvkg1yl.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n    return count\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\"\
    ) == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") ==\
    \ 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpek0_yuoz.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpek0_yuoz.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpek0_yuoz.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count_upper = 0\n\
    \    for c in s\n        if isupper(c)\n            count_upper += 1\n       \
    \ end\n    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test your function\n@test count_upper(\"aBCdEf\") == 1\n@test count_upper(\"\
    abcdefg\") == 0 \n@test count_upper(\"dBBE\") == 0 \n</cell>\n<text>\nFinally\
    \ we write a function that computes the Levenshtein distance between two strings.\
    \ Given two strings s and t, compute the minimum number of edits required to transform\
    \ s into t.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpw4un8c3g.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpw4un8c3g.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the number of uppercase vowels\
    \ in it.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyejl9ulb.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyejl9ulb.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n            \n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpxuv58fm9.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpxuv58fm9.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpxuv58fm9.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmprth2y0qo.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmprth2y0qo.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmprth2y0qo.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpbvhimjeh.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpbvhimjeh.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpbvhimjeh.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n            \n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmplbfwqtcp.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmplbfwqtcp.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmplbfwqtcp.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n            \n    return count\n\
    </cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"dBBE\"\
    )\n</cell>\n<text>\nExercise 3\nWrite a function that counts the number of uppercase\
    \ vowels in a string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq2vdpezg.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq2vdpezg.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpm6fest1v.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpm6fest1v.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpm6fest1v.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count_upper = 0\n\
    \    for c in s\n        if isupper(c)\n            count_upper += 1\n       \
    \     \n    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpsl_or_tu.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpsl_or_tu.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpsl_or_tu.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count = 0\n    for\
    \ c in s\n        if isupper(c)\n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the number of vowels present in the\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk83frvi4.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk83frvi4.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper(s,0)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp333lt9he.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"aBCdEf\") == 1\n  MethodError: no method matching count_upper(::String,\
    \ ::Int64)\n  Closest candidates are:\n    count_upper(::String) at /tmp/tmp333lt9he.jl:10\n\
    \  Stacktrace:\n   [1] count_upper(::String) at /tmp/tmp333lt9he.jl:10\n   [2]\
    \ top-level scope at /tmp/tmp333lt9he.jl:17\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp333lt9he.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmp333lt9he.jl:18\n  Test threw exception\n  Expression: candidate(\"\
    abcdefg\") == 0\n  MethodError: no method matching count_upper(::String, ::Int64)\n\
    \  Closest candidates are:\n    count_upper(::String) at /tmp/tmp333lt9he.jl:10\n\
    \  Stacktrace:\n   [1] count_upper(::String) at /tmp/tmp333lt9he.jl:10\n   [2]\
    \ top-level scope at /tmp/tmp333lt9he.jl:18\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp333lt9he.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmp333lt9he.jl:19\n  Test threw exception\n  Expression: candidate(\"\
    dBBE\") == 0\n  MethodError: no method matching count_upper(::String, ::Int64)\n\
    \  Closest candidates are:\n    count_upper(::String) at /tmp/tmp333lt9he.jl:10\n\
    \  Stacktrace:\n   [1] count_upper(::String) at /tmp/tmp333lt9he.jl:10\n   [2]\
    \ top-level scope at /tmp/tmp333lt9he.jl:19\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp333lt9he.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmp333lt9he.jl:20\n  Test threw exception\n  Expression: candidate(\"\
    B\") == 0\n  MethodError: no method matching count_upper(::String, ::Int64)\n\
    \  Closest candidates are:\n    count_upper(::String) at /tmp/tmp333lt9he.jl:10\n\
    \  Stacktrace:\n   [1] count_upper(::String) at /tmp/tmp333lt9he.jl:10\n   [2]\
    \ top-level scope at /tmp/tmp333lt9he.jl:20\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp333lt9he.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmp333lt9he.jl:21\n  Test threw exception\n  Expression: candidate(\"\
    U\") == 1\n  MethodError: no method matching count_upper(::String, ::Int64)\n\
    \  Closest candidates are:\n    count_upper(::String) at /tmp/tmp333lt9he.jl:10\n\
    \  Stacktrace:\n   [1] count_upper(::String) at /tmp/tmp333lt9he.jl:10\n   [2]\
    \ top-level scope at /tmp/tmp333lt9he.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp333lt9he.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmp333lt9he.jl:22\n  Test threw exception\n  Expression: candidate(\"\
    \") == 0\n  MethodError: no method matching count_upper(::String, ::Int64)\n \
    \ Closest candidates are:\n    count_upper(::String) at /tmp/tmp333lt9he.jl:10\n\
    \  Stacktrace:\n   [1] count_upper(::String) at /tmp/tmp333lt9he.jl:10\n   [2]\
    \ top-level scope at /tmp/tmp333lt9he.jl:22\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp333lt9he.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmp333lt9he.jl:23\n  Test threw exception\n  Expression: candidate(\"\
    EEEE\") == 2\n  MethodError: no method matching count_upper(::String, ::Int64)\n\
    \  Closest candidates are:\n    count_upper(::String) at /tmp/tmp333lt9he.jl:10\n\
    \  Stacktrace:\n   [1] count_upper(::String) at /tmp/tmp333lt9he.jl:10\n   [2]\
    \ top-level scope at /tmp/tmp333lt9he.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp333lt9he.jl:16\n  \nTest Summary: | Error \
    \ Total\ntest set      |     7      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp333lt9he.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmprtu0fudb.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmprtu0fudb.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmprtu0fudb.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqdm7ighq.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"aBCdEf\") == 1\n  UndefVarError: isupper not defined\n\
    \  Stacktrace:\n   [1] count_upper(::String) at /tmp/tmpqdm7ighq.jl:12\n   [2]\
    \ top-level scope at /tmp/tmpqdm7ighq.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqdm7ighq.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpqdm7ighq.jl:24\n  Test threw exception\n  Expression: candidate(\"\
    abcdefg\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n   [1] count_upper(::String)\
    \ at /tmp/tmpqdm7ighq.jl:12\n   [2] top-level scope at /tmp/tmpqdm7ighq.jl:24\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqdm7ighq.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpqdm7ighq.jl:25\n  Test threw exception\n  Expression: candidate(\"\
    dBBE\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n   [1] count_upper(::String)\
    \ at /tmp/tmpqdm7ighq.jl:12\n   [2] top-level scope at /tmp/tmpqdm7ighq.jl:25\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqdm7ighq.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpqdm7ighq.jl:26\n  Test threw exception\n  Expression: candidate(\"\
    B\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n   [1] count_upper(::String)\
    \ at /tmp/tmpqdm7ighq.jl:12\n   [2] top-level scope at /tmp/tmpqdm7ighq.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqdm7ighq.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpqdm7ighq.jl:27\n  Test threw exception\n  Expression: candidate(\"\
    U\") == 1\n  UndefVarError: isupper not defined\n  Stacktrace:\n   [1] count_upper(::String)\
    \ at /tmp/tmpqdm7ighq.jl:12\n   [2] top-level scope at /tmp/tmpqdm7ighq.jl:27\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqdm7ighq.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpqdm7ighq.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    EEEE\") == 2\n  UndefVarError: isupper not defined\n  Stacktrace:\n   [1] count_upper(::String)\
    \ at /tmp/tmpqdm7ighq.jl:12\n   [2] top-level scope at /tmp/tmpqdm7ighq.jl:29\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqdm7ighq.jl:22\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqdm7ighq.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of uppercase vowels in a string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmhw7y86w.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmhw7y86w.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n    return count\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"dBBE\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of vowels \nin the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8rv4dcxy.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8rv4dcxy.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n    return count\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\"\
    ) == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") ==\
    \ 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp7tt462hq.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp7tt462hq.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp7tt462hq.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the number of vowels found in\
    \ it.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvy89fwfm.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvy89fwfm.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n        end\n    end\n   \
    \ return count\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of vowels contained in\
    \ the string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk9igm9ko.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk9igm9ko.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count_upper = 0\n\
    \    for c in s\n        if isupper(c)\n            count_upper += 1\n       \
    \ end\n    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of uppercase vowels in s.\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppcsyq362.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppcsyq362.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count_upper = 0\n\
    \    for c in s\n        if isupper(c)\n            count_upper += 1\n       \
    \ end\n    end\n    return count_upper\nend\nusing Test\n\n@testset begin\n\n\
    candidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpe6lvaax7.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"aBCdEf\") == 1\n  UndefVarError: isupper not defined\n\
    \  Stacktrace:\n   [1] count_upper(::String) at /tmp/tmpe6lvaax7.jl:13\n   [2]\
    \ top-level scope at /tmp/tmpe6lvaax7.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpe6lvaax7.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpe6lvaax7.jl:25\n  Test threw exception\n  Expression: candidate(\"\
    abcdefg\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n   [1] count_upper(::String)\
    \ at /tmp/tmpe6lvaax7.jl:13\n   [2] top-level scope at /tmp/tmpe6lvaax7.jl:25\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpe6lvaax7.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpe6lvaax7.jl:26\n  Test threw exception\n  Expression: candidate(\"\
    dBBE\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n   [1] count_upper(::String)\
    \ at /tmp/tmpe6lvaax7.jl:13\n   [2] top-level scope at /tmp/tmpe6lvaax7.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpe6lvaax7.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpe6lvaax7.jl:27\n  Test threw exception\n  Expression: candidate(\"\
    B\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n   [1] count_upper(::String)\
    \ at /tmp/tmpe6lvaax7.jl:13\n   [2] top-level scope at /tmp/tmpe6lvaax7.jl:27\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpe6lvaax7.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpe6lvaax7.jl:28\n  Test threw exception\n  Expression: candidate(\"\
    U\") == 1\n  UndefVarError: isupper not defined\n  Stacktrace:\n   [1] count_upper(::String)\
    \ at /tmp/tmpe6lvaax7.jl:13\n   [2] top-level scope at /tmp/tmpe6lvaax7.jl:28\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpe6lvaax7.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpe6lvaax7.jl:30\n  Test threw exception\n  Expression: candidate(\"\
    EEEE\") == 2\n  UndefVarError: isupper not defined\n  Stacktrace:\n   [1] count_upper(::String)\
    \ at /tmp/tmpe6lvaax7.jl:13\n   [2] top-level scope at /tmp/tmpe6lvaax7.jl:30\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpe6lvaax7.jl:23\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe6lvaax7.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n            \n    return count\n\
    end\n</cell>\n<code language=julia-1.4>\ncount_upper(\"aBCdEf\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of uppercase vowels in a\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp60_4k72c.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp60_4k72c.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpb2uc1fih.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpb2uc1fih.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpb2uc1fih.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            if\
    \ count_upper % 2 == 0\n                return count_upper\n        end\n    end\n\
    \    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the number of uppercase vowels\
    \ in each word in the string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvvq1k37e.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvvq1k37e.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\n</cell>\n<code language=julia-1.0>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of uppercase vowels in a string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9dstr40d.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9dstr40d.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count = 0\n    for\
    \ c in s\n        if isupper(c)\n            count += 1\n            \n    return\
    \ count\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the number of vowels found in that string.\nusing Test\n\
    \n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") ==\
    \ 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\
    \t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3j9r80k2.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3j9r80k2.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ i in 0..(length(s)-2) do \n        if s[i] == 'A' || s[i] == 'a' || s[i] ==\
    \ 'E' || s[i] == 'e' || s[i] == 'I' || s[i] == 'i' || s[i] == 'O' || s[i] == 'o'\
    \ || s[i] == 'U' || s[i] == 'u' \n        then count_upper = count_upper + 1\n\
    \        else if s[i] == 'B' || s[i] == 'b' || s[i] == 'C' || s[i] == 'c' || s[i]\
    \ == 'D' || s[i] == 'd' || s[i] == 'F' || s[i] == 'f' || s[i] == 'G' || s[i] ==\
    \ 'g' \n        then count_upper = count_upper + 1\n        else if s[i] == 'H'\
    \ || s[i] == 'h' || s[i] == 'J' || s[i] == 'j' || s[i] == 'K' || s[i] == 'k' ||\
    \ s[i] == 'L' || s[i] == 'l' || s[i] == 'M' || s[i] == 'm' || s[i] == 'N' || s[i]\
    \ == 'n' || s[i] == 'P' || s[i] == 'p' || s[i] == 'Q' || s[i] == 'q' || s[i] ==\
    \ 'R' || s[i] == 'r' || s[i] == 'S' || s[i] == 's' || s[i] == 'T' || s[i] == 't'\
    \ || s[i] == 'V' || s[i] == 'v' || s[i] == 'W' || s[i] == 'w' || s[i] == 'X' ||\
    \ s[i] == 'x' || s[i] == 'Y' || s[i] == 'y' || s[i] == 'Z' || s[i] == 'z' \n \
    \       then count_upper = count_upper + 1\n        else if s[i] == 'a' || s[i]\
    \ == 'A' || s[i] == 'e' || s[i] == 'E' || s[i] == 'i' || s[i] == 'I' || s[i] ==\
    \ 'o' || s[i] == 'O' || s[i] == 'u' || s[i] == 'U' \n        then count_upper\
    \ = count_upper + 1\n        else if s[i] == 'b' || s[i] == 'B' || s[i] == 'c'\
    \ || s[i] == 'C' || s[i] == 'd' || s[i] == 'D' || s[i] == 'f' || s[i] == 'F' ||\
    \ s[i] == 'g' || s[i] == 'G' || s[i] == 'h' || s[i] == 'H' || s[i] == 'j' || s[i]\
    \ == 'J' || s[i] == 'k' || s[i] == 'K' || s[i] == 'l' || s[i] == 'L' || s[i] ==\
    \ 'm' || s[i] == 'M' || s[i] == 'n' || s[i] == 'N' || s[i] == 'p' || s[i] == 'P'\
    \ || s[i] == 'q' || s[i] == 'Q' || s[i] == 'r' || s[i] == 'R' || s[i] == 's' ||\
    \ s[i] == 'S' || s[i] == 't' || s[i] == 'T' || s[i] == 'v' || s[i] == 'V' || s[i]\
    \ == 'w' || s[i] == 'W' || s[i] == 'x' || s[i] == 'X' || s[i] == 'y' || s[i] ==\
    \ 'Y' || s[i] == 'z' || s[i] == 'Z' \n        then count_upper = count_upper +\
    \ 1\n        else if s[i] == 'd' || s[i] == 'D' || s[i] == 'e' || s[i] == 'E'\
    \ || s[i] == 'i' || \nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpu6zh_vi8.jl:11\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpu6zh_vi8.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp6pi1olpz.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp6pi1olpz.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp6pi1olpz.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = sum(map(is_upper,\
    \ s))\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_z67bl_m.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"aBCdEf\") == 1\n  UndefVarError: is_upper not defined\n\
    \  Stacktrace:\n   [1] count_upper(::String) at /tmp/tmp_z67bl_m.jl:10\n   [2]\
    \ top-level scope at /tmp/tmp_z67bl_m.jl:17\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp_z67bl_m.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmp_z67bl_m.jl:18\n  Test threw exception\n  Expression: candidate(\"\
    abcdefg\") == 0\n  UndefVarError: is_upper not defined\n  Stacktrace:\n   [1]\
    \ count_upper(::String) at /tmp/tmp_z67bl_m.jl:10\n   [2] top-level scope at /tmp/tmp_z67bl_m.jl:18\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp_z67bl_m.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmp_z67bl_m.jl:19\n  Test threw exception\n  Expression: candidate(\"\
    dBBE\") == 0\n  UndefVarError: is_upper not defined\n  Stacktrace:\n   [1] count_upper(::String)\
    \ at /tmp/tmp_z67bl_m.jl:10\n   [2] top-level scope at /tmp/tmp_z67bl_m.jl:19\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp_z67bl_m.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmp_z67bl_m.jl:20\n  Test threw exception\n  Expression: candidate(\"\
    B\") == 0\n  UndefVarError: is_upper not defined\n  Stacktrace:\n   [1] count_upper(::String)\
    \ at /tmp/tmp_z67bl_m.jl:10\n   [2] top-level scope at /tmp/tmp_z67bl_m.jl:20\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp_z67bl_m.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmp_z67bl_m.jl:21\n  Test threw exception\n  Expression: candidate(\"\
    U\") == 1\n  UndefVarError: is_upper not defined\n  Stacktrace:\n   [1] count_upper(::String)\
    \ at /tmp/tmp_z67bl_m.jl:10\n   [2] top-level scope at /tmp/tmp_z67bl_m.jl:21\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp_z67bl_m.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmp_z67bl_m.jl:22\n  Test threw exception\n  Expression: candidate(\"\
    \") == 0\n  UndefVarError: is_upper not defined\n  Stacktrace:\n   [1] count_upper(::String)\
    \ at /tmp/tmp_z67bl_m.jl:10\n   [2] top-level scope at /tmp/tmp_z67bl_m.jl:22\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp_z67bl_m.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmp_z67bl_m.jl:23\n  Test threw exception\n  Expression: candidate(\"\
    EEEE\") == 2\n  UndefVarError: is_upper not defined\n  Stacktrace:\n   [1] count_upper(::String)\
    \ at /tmp/tmp_z67bl_m.jl:10\n   [2] top-level scope at /tmp/tmp_z67bl_m.jl:23\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp_z67bl_m.jl:16\n  \nTest Summary: | Error \
    \ Total\ntest set      |     7      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_z67bl_m.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count = 0\n    for\
    \ i in 0..(length(s) - 1)\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I'\
    \ || s[i] == 'O' || s[i] == 'U'\n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of vowels contained in\
    \ the string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpayz_yzl4.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpayz_yzl4.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count = 0\n    for\
    \ c in s\n        if isupper(c)\n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.4>\ncount_upper(\"aBCdEf\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_upper(\"abcdefg\")\n</cell>\n<code\
    \ language=julia-1.4>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of uppercase vowels in a string.\nusing Test\n\
    \n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") ==\
    \ 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\
    \t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprjjvit2j.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprjjvit2j.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpoba2i6cq.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpoba2i6cq.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpoba2i6cq.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count_upper = 0\n\
    \    \n    for i in 0 .. s.length-1\n        if s[i] == 'A' or s[i] == 'a' or\
    \ s[i] == 'E' or s[i] == 'e' or s[i] == 'I' or s[i] == 'i' or s[i] == 'O' or s[i]\
    \ == 'o' or s[i] == 'U' or s[i] == 'u'\n            count_upper += 1\n       \
    \ end\n    end\n    \n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of uppercase vowels in a\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"s\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphlp70gbi.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphlp70gbi.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the number of vowels found in\
    \ it.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7ddl8uz9.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7ddl8uz9.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            if\
    \ count_upper % 2 == 0\n                count_upper -= 1\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.3>\ncount_upper(\"aBCdEf\")\n</cell>\n<code\
    \ language=julia-1.3>\ncount_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.3>\n\
    count_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the number of vowels found in it.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1ppnbh4y.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1ppnbh4y.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = Int64(0)\n\
    \    for c in s\n        if isupper(c)\n            if c % 2 == 0\n          \
    \      count_upper += 1\n            end\n        end\n    end\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.3>\ncount_upper(\"aBCdEf\")\n</cell>\n<code\
    \ language=julia-1.3>\ncount_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.3>\n\
    count_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of vowels (a, e, i, o, u) in that string.\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl220_p9h.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpl220_p9h.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count = 0\n    for\
    \ c in s\n        if isupper(c)\n            count += 1\n            \n    return\
    \ count\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of vowels found in that string.\nusing Test\n\
    \n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") ==\
    \ 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\
    \t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppphvy14u.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppphvy14u.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmppx5si_aw.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmppx5si_aw.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmppx5si_aw.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpvz2r8t1b.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpvz2r8t1b.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpvz2r8t1b.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count_upper = 0\n\
    \    for c in s\n        if c == 'A' || c == 'E' || c == 'I' || c == 'O' || c\
    \ == 'U'\n            count_upper += 1\n        end\n    end\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of uppercase vowels in each word of a string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzu2msr7c.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzu2msr7c.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpok94qagm.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpok94qagm.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpok94qagm.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = sum(map(count_upper,\
    \ splits(s)))\nend\n</cell>\n<code language=julia-1.0>\ncount_upper(\"aBCdEf\"\
    )\n</cell>\n<code language=julia-1.0>\ncount_upper(\"abcdefg\")\n</cell>\n<code\
    \ language=julia-1.0>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the number of uppercase vowels in a string.\nusing Test\n\
    \n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") ==\
    \ 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\
    \t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpeg4myhf8.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpeg4myhf8.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ count_upper(\"aBCdEf\")\n</cell>\n<code language=julia-1.5>\n@time count_upper(\"\
    abcdefg\")\n</cell>\n<code language=julia-1.5>\n@time count_upper(\"dBBE\")\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the number of uppercase\
    \ vowels in a string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdy8yo635.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdy8yo635.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n            \n    return count\n\
    </cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"dBBE\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of vowels \nin the string. \nFor example count_vowels(\"aBCdEf\"\
    ) returns 3.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpobkye7ed.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpobkye7ed.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count = 0\n    for\
    \ c in s\n        if isupper(c)\n            count += 1\n            \n    return\
    \ count\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the number of vowels \nin each word in the string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\"\
    ) == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") ==\
    \ 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqe4dlt4l.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqe4dlt4l.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise: Write\
    \ a function that counts the number of uppercase vowels in a string.\nHint: Use\
    \ count_upper\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9duifx15.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9duifx15.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n        end\n    end\n   \
    \ return count\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of uppercase vowels in a string.\nusing Test\n\
    \n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") ==\
    \ 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\
    \t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp66b3xk8w.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp66b3xk8w.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpdhwv9b1m.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpdhwv9b1m.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpdhwv9b1m.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            if\
    \ count_upper % 2 == 0\n                count_upper -= 1\n    return count_upper\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwgqrqire.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwgqrqire.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpvh8o5zt9.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpvh8o5zt9.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpvh8o5zt9.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the number of vowels found in\
    \ it.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4i4ffetb.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4i4ffetb.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = sum((i==2)\
    \ for i in eachindex(s))\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<text>\nExercise 2\nWrite a function that counts the number\
    \ of uppercase vowels in a string.\nFor example, count_upper(\"aBCdEf\") returns\
    \ 3.\nWrite a function that counts the number of uppercase vowels in a string\
    \ and returns the string with the vowels removed.\nFor example, count_upper(\"\
    aBCdEf\") returns \"BCdf\".\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcdpz42_z.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcdpz42_z.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U'\n\
    \            count_upper += 1\n    return count_upper\nend\n</cell>\n<code language=julia-1.0>\n\
    count_upper(\"aBCdEf\")\n</cell>\n<code language=julia-1.0>\ncount_upper(\"abcdefg\"\
    )\n</cell>\n<code language=julia-1.0>\ncount_upper(\"dBBE\")\n</cell>\n<text>\n\
    Exercise: Write a function that takes a string and returns the number of uppercase\
    \ vowels in each word in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp__1ecgsg.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp__1ecgsg.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise: Write\
    \ a function that takes a string and returns the number of uppercase vowels in\
    \ each of the string's words.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpktyvq8ax.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpktyvq8ax.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\n</cell>\n<code language=julia-1.0>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.0>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.0>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of uppercase letters in a string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\"\
    ) == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") ==\
    \ 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0e76cuk1.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0e76cuk1.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkgmbfy1l.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"aBCdEf\") == 1\n  UndefVarError: isupper not defined\n\
    \  Stacktrace:\n   [1] count_upper(::String) at /tmp/tmpkgmbfy1l.jl:12\n   [2]\
    \ top-level scope at /tmp/tmpkgmbfy1l.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkgmbfy1l.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpkgmbfy1l.jl:24\n  Test threw exception\n  Expression: candidate(\"\
    abcdefg\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n   [1] count_upper(::String)\
    \ at /tmp/tmpkgmbfy1l.jl:12\n   [2] top-level scope at /tmp/tmpkgmbfy1l.jl:24\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkgmbfy1l.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpkgmbfy1l.jl:25\n  Test threw exception\n  Expression: candidate(\"\
    dBBE\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n   [1] count_upper(::String)\
    \ at /tmp/tmpkgmbfy1l.jl:12\n   [2] top-level scope at /tmp/tmpkgmbfy1l.jl:25\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkgmbfy1l.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpkgmbfy1l.jl:26\n  Test threw exception\n  Expression: candidate(\"\
    B\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n   [1] count_upper(::String)\
    \ at /tmp/tmpkgmbfy1l.jl:12\n   [2] top-level scope at /tmp/tmpkgmbfy1l.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkgmbfy1l.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpkgmbfy1l.jl:27\n  Test threw exception\n  Expression: candidate(\"\
    U\") == 1\n  UndefVarError: isupper not defined\n  Stacktrace:\n   [1] count_upper(::String)\
    \ at /tmp/tmpkgmbfy1l.jl:12\n   [2] top-level scope at /tmp/tmpkgmbfy1l.jl:27\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkgmbfy1l.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpkgmbfy1l.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    EEEE\") == 2\n  UndefVarError: isupper not defined\n  Stacktrace:\n   [1] count_upper(::String)\
    \ at /tmp/tmpkgmbfy1l.jl:12\n   [2] top-level scope at /tmp/tmpkgmbfy1l.jl:29\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkgmbfy1l.jl:22\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkgmbfy1l.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\n</cell>\n<code language=julia-1.0>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.0>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.0>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the number of uppercase vowels\
    \ in each word in the string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppqqdcw0p.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppqqdcw0p.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count = 0\n    for\
    \ c in s\n        if isupper(c)\n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of vowels contained in\
    \ the string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvz5aggom.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvz5aggom.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count_upper = 0\n\
    \    for c in s\n        if isupper(c)\n            count_upper += 1\n       \
    \     if count_upper % 2 == 0\n                count_upper -= 1\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of uppercase vowels in each word in the string.\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu6reou8j.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpu6reou8j.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count_upper = 0\n\
    \    for c in s\n        if isupper(c)\n            count_upper += 1\n       \
    \     if count_upper % 2 == 0\n                return count_upper\n        end\n\
    \    end\n    return 0\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the number of uppercase vowels in each word in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") ==\
    \ 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\
    \t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9rv8q2zb.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9rv8q2zb.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of uppercase vowels in a string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\"\
    ) == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") ==\
    \ 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc2jjgwrj.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpc2jjgwrj.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n            \n    return count\n\
    </cell>\n<code language=julia-1.4>\ncount_upper(\"aBCdEf\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of uppercase\
    \ letters in the string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2isd1vla.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2isd1vla.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpe3f5wygw.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpe3f5wygw.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpe3f5wygw.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\n</cell>\n<code language=julia-1.0>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.0>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.0>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the number of vowels \nin the\
    \ string. \nFor example, count_vowels(\"aBCdEf\") returns 3.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp09tjb8gw.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp09tjb8gw.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp2reu_zag.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp2reu_zag.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp2reu_zag.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = Int64(0)\n\
    \    for c in s\n        if isupper(c)\n            if c % 2 == 0\n          \
    \      count_upper += 1\n        end\n    end\n    return count_upper\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\"\
    ) == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") ==\
    \ 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5kis00ek.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp5kis00ek.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp5kis00ek.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count_upper = 0\n\
    \    for c in s\n        if isupper(c)\n            count_upper += 1\n       \
    \ end\n    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of vowels\
    \ contained in the string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3vc6j508.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3vc6j508.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\n</cell>\n<code language=julia-1.3>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.3>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.3>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that counts the number of vowels in a string.\nusing Test\n\n\
    @testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\
    \t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"\
    B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t\
    @test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqzrq6ibx.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqzrq6ibx.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of uppercase vowels in a string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\"\
    ) == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") ==\
    \ 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpei7486k7.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpei7486k7.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\n</cell>\n<code language=julia-1.4>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.4>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the number of vowels contained\
    \ in the string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t\
    @test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"\
    dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8eappt_e.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8eappt_e.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n            \n    return count\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of vowels found in that string.\nusing Test\n\
    \n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") ==\
    \ 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\
    \t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpaqpzt8ps.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpaqpzt8ps.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count_upper = 0\n\
    \    \n    for i in 0..(length(s)-2) do\n        if s[i] == 'A' || s[i] == 'a'\
    \ then\n            count_upper = count_upper + 1\n        elseif s[i] == 'B'\
    \ || s[i] == 'b' then\n            count_upper = count_upper + 1\n        elseif\
    \ s[i] == 'C' || s[i] == 'c' then\n            count_upper = count_upper + 1\n\
    \        elseif s[i] == 'D' || s[i] == 'd' then\n            count_upper = count_upper\
    \ + 1\n        elseif s[i] == 'E' || s[i] == 'e' then\n            count_upper\
    \ = count_upper + 1\n        elseif s[i] == 'F' || s[i] == 'f' then\n        \
    \    count_upper = count_upper + 1\n        elseif s[i] == 'G' || s[i] == 'g'\
    \ then\n            count_upper = count_upper + 1\n        elseif s[i] == 'H'\
    \ || s[i] == 'h' then\n            count_upper = count_upper + 1\n        elseif\
    \ s[i] == 'I' || s[i] == 'i' then\n            count_upper = count_upper + 1\n\
    \        elseif s[i] == 'J' || s[i] == 'j' then\n            count_upper = count_upper\
    \ + 1\n        elseif s[i] == 'K' || s[i] == 'k' then\n            count_upper\
    \ = count_upper + 1\n        elseif s[i] == 'L' || s[i] == 'l' then\n        \
    \    count_upper = count_upper + 1\n        elseif s[i] == 'M' || s[i] == 'm'\
    \ then\n            count_upper = count_upper + 1\n        elseif s[i] == 'N'\
    \ || s[i] == 'n' then\n            count_upper = count_upper + 1\n        elseif\
    \ s[i] == 'O' || s[i] == 'o' then\n            count_upper = count_upper + 1\n\
    \        elseif s[i] == 'P' || s[i] == 'p' then\n            count_upper = count_upper\
    \ + 1\n        elseif s[i] == 'Q' || s[i] == 'q' then\n            count_upper\
    \ = count_upper + 1\n        elseif s[i] == 'R' || s[i] == 'r' then\n        \
    \    count_upper = count_upper + 1\n        elseif s[i] == 'S' || s[i] == 's'\
    \ then\n            count_upper = count_upper + 1\n        elseif s[i] == 'T'\
    \ || s[i] == 't' then\n            count_upper = count_upper + 1\n        elseif\
    \ s[i] == 'U' || s[i] == 'u' then\n            count_upper = count_upper + 1\n\
    \        elseif s[i] == 'V' || s[i] == 'v' then\n            count_upper = count_upper\
    \ + 1\n        elseif s[i] == 'W' || s[i] == 'w' then\n            count_upper\
    \ = count_upper + 1\n        elseif s[i] == 'X' || s[i] == 'x' then\n        \
    \    count_upper = count_upper + 1\n        elseif s[i] == 'Y' || s[i] == 'y'\
    \ then\n            count_upper\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp39sm20pd.jl:13\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp39sm20pd.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n    return count\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\"\
    ) == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") ==\
    \ 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmptt5mfkph.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmptt5mfkph.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmptt5mfkph.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp8c2k43su.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp8c2k43su.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp8c2k43su.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and\
    \ returns the number of vowels in each word in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbylwpylq.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbylwpylq.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ i in 0..(length(s)-2) \n        if s[i] == 'A' && s[i+1] == 'B' && s[i+2] ==\
    \ 'C' \n            count_upper += 1 \n        else if s[i] == 'a' && s[i+1] ==\
    \ 'b' && s[i+2] == 'c' \n            count_upper += 1 \n        else if s[i] ==\
    \ 'd' && s[i+1] == 'b' && s[i+2] == 'e' \n            count_upper += 1 \n    \
    \    else if s[i] == 'D' && s[i+1] == 'B' && s[i+2] == 'E' \n            count_upper\
    \ += 1 \n        else if s[i] == 'd' && s[i+1] == 'b' && s[i+2] == 'e' \n    \
    \        count_upper += 1 \n        else if s[i] == 'D' && s[i+1] == 'B' && s[i+2]\
    \ == 'E' \n            count_upper += 1 \n        else if s[i] == 'd' && s[i+1]\
    \ == 'b' && s[i+2] == 'e' \n            count_upper += 1 \n        else if s[i]\
    \ == 'D' && s[i+1] == 'B' && s[i+2] == 'E' \n            count_upper += 1 \n \
    \       else if s[i] == 'd' && s[i+1] == 'b' && s[i+2] == 'e' \n            count_upper\
    \ += 1 \n        else if s[i] == 'D' && s[i+1] == 'B' && s[i+2] == 'E' \n    \
    \        count_upper += 1 \n        else if s[i] == 'd' && s[i+1] == 'b' && s[i+2]\
    \ == 'e' \n            count_upper += 1 \n        else if s[i] == 'D' && s[i+1]\
    \ == 'B' && s[i+2] == 'E' \n            count_upper += 1 \n        else if s[i]\
    \ == 'd' && s[i+1] == 'b' && s[i+2] == 'e' \n            count_upper += 1 \n \
    \       else if s[i] == 'D' && s[i+1] == 'B' && s[i+2] == 'E' \n            count_upper\
    \ += 1 \n        else if s[i] == 'd' && s[i+1] == 'b' && s[i+2] == 'e' \n    \
    \        count_upper += 1 \n        else if s[i] == 'D' && s[i+1] == 'B' && s[i+2]\
    \ == 'E' \n            count_upper += 1 \n        else if s[i] == 'd' && s[i+1]\
    \ == 'b' && s[i+2] == 'e' \n            count_upper += 1 \n        else if s[i]\
    \ == 'D' && s[i+1] == 'B' && s[i+2] == 'E' \n            count_upper += 1 \n \
    \       else if s[i] == 'd' && s[i+1] == 'b' && s[i+2] == 'e' \n            count_upper\
    \ += 1 \n        else if s[i] == 'D' && s[i+1] == 'B' && s[i+2] == 'E' \n    \
    \        count_upper += 1 \n        else if s[i] == 'd' && s[i+1] == 'b' && s[i+2]\
    \ == 'e' \n            \nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpja0anash.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpja0anash.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that counts the number of uppercase vowels in a string. \nWrite\
    \ a function that counts the number of uppercase vowels in a string and returns\
    \ the number of uppercase vowels.\nWrite a function that counts the number of\
    \ uppercase vowels in a string and returns the number of uppercase vowels.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\"\
    ) == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") ==\
    \ 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbh3dushz.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbh3dushz.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ i in 0..length(s) {\n        if isupper(s[i])\n            count_upper += 1\n\
    \            if count_upper % 2 == 0\n                count_upper -= 1\n    return\
    \ count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"{\" not allowed in \"length(s)\
    \ {\" at /tmp/tmphbxty_4l.jl:11\nStacktrace:\n [1] top-level scope at /tmp/tmphbxty_4l.jl:11\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmphbxty_4l.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmplt3zp75t.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmplt3zp75t.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmplt3zp75t.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n            \n    return count\n\
    </cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"dBBE\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that counts the number of uppercase\
    \ vowels in a string. \nGiven a string, return the number of uppercase vowels.\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsl9b8tf8.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsl9b8tf8.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpx_dbj9my.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpx_dbj9my.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpx_dbj9my.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            if\
    \ count_upper % 2 == 0\n                count_upper -= 1\n    return count_upper\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpiz9ce_zp.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpiz9ce_zp.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpa4k8w3rx.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpa4k8w3rx.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpa4k8w3rx.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp_ahnhovb.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp_ahnhovb.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp_ahnhovb.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpr8jx7eyk.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpr8jx7eyk.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpr8jx7eyk.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = sum(map(count_upper,\
    \ s))\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of uppercase vowels in a string.\nusing Test\n\n@testset begin\n\n\
    candidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnqmyna0s.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnqmyna0s.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n            \n    return count\n\
    </cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"dBBE\"\
    )\n</cell>\n<text>\nExercise\nWrite a function that counts the number of uppercase\
    \ vowels in a string. \nWrite a function that counts the number of uppercase vowels\
    \ in a string and returns the number of vowels counted in the even indices. \n\
    Write a function that counts the number of uppercase vowels in a string and returns\
    \ the number of vowels counted in the odd indices. \nWrite a function that counts\
    \ the number of uppercase vowels in a string and returns the number of vowels\
    \ counted in the even indices and the number of vowels counted in the odd indices.\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp1_rl852.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpp1_rl852.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count_upper = 0\n\
    \    for i in 0..length(s):\n        if s[i] == 'A' or s[i] == 'a' or s[i] ==\
    \ 'E' or s[i] == 'e' or s[i] == 'I' or s[i] == 'i' or s[i] == 'O' or s[i] == 'o'\
    \ or s[i] == 'U' or s[i] == 'u':\n            count_upper += 1\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.0>\ncount_upper(\"aBCdEf\")\n</cell>\n<code\
    \ language=julia-1.0>\ncount_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.0>\n\
    count_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of uppercase vowels in a string.\nusing Test\n\n@testset begin\n\n\
    candidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space not allowed after \":\" used for quoting\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmptfj5e9_c.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmptfj5e9_c.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ i in 0..(length(s) - 1)\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I'\
    \ || s[i] == 'O' || s[i] == 'U'\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of uppercase vowels in a string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\"\
    ) == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") ==\
    \ 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwr6gqn35.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwr6gqn35.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvosenc76.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"aBCdEf\") == 1\n  UndefVarError: isupper not defined\n\
    \  Stacktrace:\n   [1] count_upper(::String) at /tmp/tmpvosenc76.jl:12\n   [2]\
    \ top-level scope at /tmp/tmpvosenc76.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpvosenc76.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpvosenc76.jl:24\n  Test threw exception\n  Expression: candidate(\"\
    abcdefg\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n   [1] count_upper(::String)\
    \ at /tmp/tmpvosenc76.jl:12\n   [2] top-level scope at /tmp/tmpvosenc76.jl:24\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpvosenc76.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpvosenc76.jl:25\n  Test threw exception\n  Expression: candidate(\"\
    dBBE\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n   [1] count_upper(::String)\
    \ at /tmp/tmpvosenc76.jl:12\n   [2] top-level scope at /tmp/tmpvosenc76.jl:25\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpvosenc76.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpvosenc76.jl:26\n  Test threw exception\n  Expression: candidate(\"\
    B\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n   [1] count_upper(::String)\
    \ at /tmp/tmpvosenc76.jl:12\n   [2] top-level scope at /tmp/tmpvosenc76.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpvosenc76.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpvosenc76.jl:27\n  Test threw exception\n  Expression: candidate(\"\
    U\") == 1\n  UndefVarError: isupper not defined\n  Stacktrace:\n   [1] count_upper(::String)\
    \ at /tmp/tmpvosenc76.jl:12\n   [2] top-level scope at /tmp/tmpvosenc76.jl:27\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpvosenc76.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpvosenc76.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    EEEE\") == 2\n  UndefVarError: isupper not defined\n  Stacktrace:\n   [1] count_upper(::String)\
    \ at /tmp/tmpvosenc76.jl:12\n   [2] top-level scope at /tmp/tmpvosenc76.jl:29\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpvosenc76.jl:22\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvosenc76.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\n</cell>\n<code language=julia-1.3>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.3>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.3>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the number of vowels found in\
    \ it.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2vh5nbqa.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2vh5nbqa.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of uppercase vowels in a string. \nFor\
    \ example, count_upper(\"aBCdEf\") returns 1.\nusing Test\n\n@testset begin\n\n\
    candidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq6gyhfi_.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq6gyhfi_.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n    return count\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\"\
    ) == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") ==\
    \ 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpna61g1ct.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpna61g1ct.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpna61g1ct.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of uppercase letters in a string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\"\
    ) == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") ==\
    \ 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpry4rf2oj.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpry4rf2oj.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the number of vowels \nin each\
    \ of the string's characters. \nFor example count_vowels(\"aBCdEf\") should return\
    \ [1, 3, 1]\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9pw5c6xp.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9pw5c6xp.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of uppercase vowels in s.\nFor example,\
    \ count_upper(\"aBCdEf\") returns 1.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0rge8cch.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0rge8cch.jl:18\n"
  exit_code: 1
  status: Exception
