name: HumanEval_60_sum_to_n
language: julia
prompt: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
  \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
  \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
  \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
  \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
completions: ["    if n < 1\n        error(\"n must be positive\")\n    else if n\
    \ == 0\n        0\n    else if n == 1\n        1\n    else\n        sum_to_n(n\
    \ - 1) + sum_to_n(n - 2)\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the factorial of a number.", "    if n < 1 \n        error(\"n\
    \ must be positive\")\n    else if n == 1 \n        1\n    else \n        sum_to_n(n\
    \ - 1) + 1\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the factorial of a number.", "    if n\
    \ == 0 \n        then return 0\n    else \n        return n + sum_to_n(n - 1)\n\
    </code>\n<|/ a |>\n<| c |>\nThis is not the right way to solve this problem. `sum_to_n`\
    \ should return a `Int64`, not a `Int`.\n<|/ c |>\n<| c |>\nThe question was about\
    \ how to solve this problem using recursion. My answer was to show how to solve\
    \ the problem using recursion.\n<|/ c |>\n<| c |>\nThe question was about how\
    \ to solve this problem using recursion. My answer was to show how to solve the\
    \ problem using recursion.\n<|/ c |>\n<| c |>\nThe question was about how to solve\
    \ this problem using recursion. My answer was to show how to solve the problem\
    \ using recursion.\n<|/ c |>\n<| c |>\nThe question was about how to solve this\
    \ problem using recursion. My answer was to show how to solve the problem using\
    \ recursion.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndef sum_to_n(n::Int64)::Int64\n\
    \    if n == 0 \n        then return 0\n    else \n        return n + sum_to_n(n\
    \ - 1)\n</code>\n<|/ a tags=recursion,haskell |>\n<| c |>\nThis is not the right\
    \ way to solve this problem. `sum_to_n` should return a `Int64`, not a `Int`.\n\
    <|/ c |>\n<| c |>\nThe question was about how to solve this problem using recursion.\
    \ My answer was to show how to solve the problem using recursion.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\nsum_to_n :: Int -> Int\nsum_to_n n = if n == 0 then\
    \ 0 else n + sum_to_n (n-1)\n</code>\n<|/ a tags=recursion,haskell |>\n<| c |>\n\
    This is not the right way to solve this problem. `sum_to_n` should return a `Int64`,\
    \ not a `Int`.\n<|/ c |>\n<| c |>\nThe question was about how to solve this problem\
    \ using recursion. My answer was to show how to solve the problem using recursion.\n\
    <|/ c |>\n<| a tags=recursion,haskell |>\n<code>\nsum_to_n :: Int -> Int\nsum_to_n\
    \ n = if n == 0 then 0 else n + sum_to_n (n-1)\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nThis is not the right way to solve this problem. `sum_to_n` should return\
    \ a `", "    if n < 1 \n        then return 0\n    else \n        return n + sum_to_n(n-1)\n\
    end\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the factorial of a given number.", "    if\
    \ n == 1 \n        then return 1\n    else \n        return n + sum_to_n(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ number.", "    if n <= 0\n    then return 0\n    else return n + sum_to_n(n\
    \ - 1)\nend\n</cell>\n<code language=julia-1.0>\nsum_to_n(10)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the factorial of a number.", "    if\
    \ n == 0 \n        then return 1\n        else return n * sum_to_n(n-1)\nend\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the factorial of a number.", "    if n==1 \n   \
    \     1 \n    else \n        n*sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(30)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.", "    if n <= 0\n        error(\"n must be positive\")\n    else\n\
    \        sum_to_n_aux(n,1)\n    end\nend", "    if n==0 \n        then return\
    \ 1\n    else \n        then return n*sum_to_n(n-1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(30)\n</cell>\n<code language=julia-1.0>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(5)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.0>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a number.", "    if\
    \ n == 0 \n        then return 0\n    else \n        sum_to_n(n - 1) + n\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n < 0\n        error(\"n must be positive\")\n    else if\
    \ n == 0\n        error(\"n must be positive\")\n    else\n        return n\n\
    \    end\nend", "    if n < 0\n        error(\"n must be positive\")\n    else\
    \ if n == 0\n        1\n    else\n        sum_to_n(n - 1) + 1\nend\n</cell>\n\
    <code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the factorial of a number.", "    if n < 1\n        error(\"\
    n must be positive\")\n    else\n        return n * (n + 1) / 2\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that returns the sum of the numbers from\
    \ 1 to n inclusive.", "    if n < 1 \n        error(\"n must be positive\")\n\
    \    else if n == 1 \n        return 1 \n    else \n        return n + sum_to_n(n-1)\n\
    end", "    if n == 0 \n        then return 0\n    else \n        return n + sum_to_n(n-1)\n\
    end\n</cell>\n<code language=julia-1.0>\nsum_to_n(30)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.0>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(10)\n</cell>\n<code language=julia-1.0>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n == 0\n        0\n    else\n        n + sum_to_n(n - 1)\n\
    end\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n == 0\n        0\n    else\n        n + (sum_to_n(n-1))\n\
    end\n</cell>\n<code language=julia-1.4>\nsum_to_n(30)\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.4>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.4>\nsum_to_n(10)\n</cell>\n<code language=julia-1.4>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the factorial of a number.",
  "    if n == 0\n        0\n    else\n        1 + sum_to_n(n - 1)\nend\n</cell>\n\
    <code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n == 0 \n        then return 0\n    else \n        sum_to_n(n\
    \ - 1) + n\nend\n</cell>\n<code language=julia-1.0>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(100)\n</cell>\n<code language=julia-1.0>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(10)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the first\
    \ n Fibonacci numbers. \nThe Fibonacci numbers are the numbers in the following\
    \ pattern:", "    if n == 0 \n        then return 1\n        else return n*sum_to_n(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the factorial\
    \ of a given number.", "    if n==1 \n        1\n    else\n        n*sum_to_n(n-1)\n\
    end\n</cell>\n<code language=julia-1.0>\nsum_to_n(30)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.0>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(10)\n</cell>\n<code language=julia-1.0>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n <= 0\n        error(\"n must be positive\")\n    else if\
    \ n == 1\n        1\n    else\n        sum_to_n(n - 1) + 1\nend\n</cell>\n<code\
    \ language=julia-1.4>\nsum_to_n(30)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a number.", "    if n <= 0\n        error(\"n\
    \ must be positive\")\n    else\n        return n\n    end\nend", "    if n <\
    \ 0\n        error(\"n must be positive\")\n    else\n        return n + sum_to_n(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.1>\nsum_to_n(30)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the factorial of a number.", "    if\
    \ n == 0 \n        then return 0\n    else \n        sum_to_n(n - 1) + n\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ number.", "    if n == 0 \n        then return 0 \n        else return n + sum_to_n(n\
    \ - 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the first n prime numbers. \nHint: use the sieve of Eratosthenes\
    \ algorithm.", "    if n <= 0\n        error(\"n must be positive\")\n    end\n\
    \    return n * (n + 1) / 2\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the sum of the first n positive integers. \nFor example, sum_to_n(10)\
    \ should return 55.", "    if n == 0 \n        then return 0\n    else \n    \
    \    sum_to_n(n - 1) + n\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a number.", "    if n < 1\n        error(\"n must\
    \ be positive\")\n    elseif n == 0\n        1\n    else\n        n * sum_to_n(n\
    \ - 1)\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.", "    if n == 0 \n        then return 0\n    else \n        sum_to_n(n\
    \ - 1) + n\n    end\nend\n</cell>\n<code language=julia-1.4>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.4>\nsum_to_n(100)\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.4>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.4>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a given number. \nFor example, factorial(5) =\
    \ 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1\nHint: use recursion", "    if n < 1\n       \
    \ error(\"n must be positive\")\n    else\n        return n * (n + 1) / 2\nend\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number.", "    if n == 0 \n \
    \       then return 0\n    else \n        sum_to_n(n - 1) + n\n    end\nend\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the factorial of a number.", "    if n <= 0\n  \
    \      error(\"n must be positive\")\n    else\n        sum_to_n_aux(n, 0)\n \
    \   end\nend", "    if n == 0\n        0\n    else\n        1 + sum_to_n(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n <= 0\n        error(\"n must be positive\")\n    else\n\
    \        return n * (n + 1) / 2\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n\
    </cell>\n<text>\nExercise: Write a function that returns the sum of the first\
    \ n numbers. \nThe function should take one argument, n::Int64. \nIt should return\
    \ an Int64 with the sum of the first n numbers. \nThe function should raise an\
    \ error if n is less than or equal to 0.", "    if n <= 0\n        error(\"n must\
    \ be positive\")\n    else\n        sum_to_n_impl(n)\n    end\nend", "    if n==0\
    \ \n        then return 1\n    else \n        sum_to_n(n-1)+n\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a number.", "    if n == 0 \n        then return\
    \ 0\n    else \n        return n + sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the factorial\
    \ of a number.", "    if n == 0 \n        then return 0\n    else \n        then\
    \ return n + sum_to_n(n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number.", "    if n == 0 \n \
    \       then return 0 \n        else return n + sum_to_n(n-1) \nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n < 0\n        error(\"n must be positive\")\n    else if\
    \ n == 0\n        0\n    else\n        sum_to_n(n - 1) + n\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(30)\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the factorial of a number.", "    if n <= 0\n        error(\"n\
    \ must be positive\")\n    else if n == 1\n        1\n    else\n        sum_to_n(n\
    \ - 1) + n\n    end\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise\nWrite a function\
    \ that sums numbers from 1 to n but stops when the sum is greater than n.", " \
    \   if n < 0\n        error(\"sum_to_n expects a positive integer\")\n    elseif\
    \ n == 0\n        0\n    else\n        sum_to_n(n-1) + n\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the sum of the first\
    \ n positive integers. \nThe function should take one argument, n, which should\
    \ be an integer.", "    if n == 0\n        0\n    else\n        n * sum_to_n(n\
    \ - 1)\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise\nWrite a function that returns the factorial\
    \ of a number.", "    if n == 0 \n        then return 0 \n        else return\
    \ n + sum_to_n(n-1) \nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the factorial of a given number. For example, factorial(5) = 5\
    \ * 4 * 3 * 2 * 1 = 120.", "    if n == 0\n        0\n    else\n        sum_to_n(n\
    \ - 1) + n\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.", "    if n == 0 \n        then return 0\n    else \n        sum_to_n(n\
    \ - 1) + n\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the first n prime numbers. \nThe function\
    \ should take one argument n, and return a list of n prime numbers.\nThe function\
    \ should return an empty list if n is less than or equal to 0.\nThe function should\
    \ return an error if n is not a positive integer.", "    if n == 0 \n        then\
    \ return 0\n    else if n == 1 \n        then return 1\n    else \n        sum_to_n(n\
    \ - 1) + sum_to_n(n - 2)\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a number.", "    if n <= 0\n        error(\"n\
    \ must be positive\")\n    else\n        return n\n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a number.", "    if\
    \ n <= 0\n    then return 0\n    else return n\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number.", "    if n < 1 \n  \
    \      error(\"n must be positive\")\n    else if n == 1 \n        1\n    else\
    \ \n        sum_to_n(n-1) + n\nend\n</cell>\n<code language=julia-1.1>\nsum_to_n(10)\n\
    </cell>\n<text>\nExercise: Write a function that returns the factorial of a number.",
  "    if n < 1 \n        error(\"n must be greater than 0\", 2)\n    elseif n < 2\
    \ \n        return n\n    elseif n == 1 \n        return 1\n    elseif n == 2\
    \ \n        return 2\n    elseif n == 3 \n        return 3\n    elseif n == 4\
    \ \n        return 4\n    elseif n == 5 \n        return 5\n    elseif n == 6\
    \ \n        return 6\n    elseif n == 7 \n        return 7\n    elseif n == 8\
    \ \n        return 8\n    elseif n == 9 \n        return 9\n    elseif n == 10\
    \ \n        return 10\n    elseif n == 11 \n        return 11\n    elseif n ==\
    \ 12 \n        return 12\n    elseif n == 13 \n        return 13\n    elseif n\
    \ == 14 \n        return 14\n    elseif n == 15 \n        return 15\n    elseif\
    \ n == 16 \n        return 16\n    elseif n == 17 \n        return 17\n    elseif\
    \ n == 18 \n        return 18\n    elseif n == 19 \n        return 19\n    elseif\
    \ n == 20 \n        return 20\n    elseif n == 21 \n        return 21\n    elseif\
    \ n == 22 \n        return 22\n    elseif n == 23 \n        return 23\n    elseif\
    \ n == 24 \n        return 24\n    elseif n == 25 \n        return 25\n    elseif\
    \ n == 26 \n        return 26\n    elseif n == 27 \n        return 27\n    elseif\
    \ n == 28 \n        return 28\n    elseif n == 29 \n        return 29\n    elseif\
    \ n == 30 \n        return 30\n    elseif n == 31 \n        return 31\n    elseif\
    \ n == 32 \n        return 32\n    elseif n == 33 \n        return 33\n    elseif\
    \ n == 34 \n        return 34\n    elseif n == 35 \n        return 35\n    elseif\
    \ n == 36 \n        return 36\n    elseif n == 37 \n        return 37\n    elseif\
    \ n == 38 \n        return 38\n    elseif n == 39 \n        return 39\n    elseif\
    \ n == 40 \n        return 40\n    elseif n == 41 \n        return 41\n    elseif\
    \ n == 42 \n        return 42\n    elseif n == 43 \n        return 43\n    elseif\
    \ n == 44 \n        return 44\n    elseif n == 45 \n        return 45\n    elseif\
    \ n == 46 \n        return 46\n    elseif n == 47 \n        return 47\n    elseif\
    \ n == 48 \n        return 48\n    elseif n == 49 \n        return 49\n    elseif\
    \ n == 50 \n        return 50\n    elseif n == 51 \n        return 51\n    elseif\
    \ n == 52 \n        return 52\n    elseif n == 53 \n        return 53\n    elseif\
    \ n == 54 \n        return 54\n    elseif n == 55 \n        return 55\n    elseif\
    \ n == 56 \n        return 56\n    elseif n == 57 \n        return 57\n    elseif\
    \ n == 58 \n        return 58\n    elseif n == 59 ", "    if n <= 0\n        error(\"\
    n must be positive\")\n    else if n == 1\n        1\n    else\n        sum_to_n(n\
    \ - 1) + 1\n    end\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the sum of the first n positive integers. \nThe function should\
    \ take an argument n and return a number.", "    if n == 0 \n        then return\
    \ 0\n    else \n        sum_to_n(n - 1) + n\nend\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.4>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.4>\nsum_to_n(5)\n</cell>\n<code language=julia-1.4>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.4>\nsum_to_n(1)\n</cell>\n<text>\nExercise\nWrite\
    \ a function that sums numbers from 1 to n and returns the sum of the squares\
    \ of the numbers.", "    if n < 1 \n        error(\"n must be positive\")\n  \
    \  else if n == 1 \n        1\n    else \n        sum_to_n(n - 1) + n\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a given number.", "    if n == 0 \n        then\
    \ return 0\n    else \n        sum_to_n(n - 1) + n\n    end\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(30)\n</cell>\n<code language=julia-1.0>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(5)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.0>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a number.", "    if\
    \ n == 1 \n        then return 1\n    else \n        then return n*sum_to_n(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise: Write a function that returns the factorial\
    \ of a number.", "    if n < 1\n        error(\"n must be positive\")\n    else\n\
    \        sum_to_n_impl(n)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the sum of the numbers from 1 to n that are divisible\
    \ by k.", "    if n == 0 \n        then return 0\n    else \n        sum_to_n(n\
    \ - 1) + n\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.", "    if n == 0 \n        then return 0\n    else \n        then\
    \ return n + sum_to_n(n - 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number.", "    if n < 1\n   \
    \     error(\"n must be >= 1\")\n    elseif n < 2\n        return 1\n    else\n\
    \        return n * sum_to_n(n-1)\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise: Write a function that returns the factorial\
    \ of a number.", "    if n < 1 \n        error(\"n must be positive\")\n    else\
    \ if n == 1 \n        1\n    else \n        sum_to_n(n - 1) + 1\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that computes the factorial of a\
    \ given number.", "    if n == 0 \n        then return 0\n    else \n        return\
    \ n + sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the factorial of a number.", "    if n==0 \n        then return\
    \ 0 \n        else return n*sum_to_n(n-1)\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.4>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.4>\nsum_to_n(5)\n</cell>\n<code language=julia-1.4>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.4>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number.", "    if n == 1 \n \
    \       1 \n    else \n        n * sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.1>\n\
    sum_to_n(30)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the factorial\
    \ of a number.", "    if n == 0 \n        then return 1\n        else return n*sum_to_n(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise\nWrite a function that returns the factorial\
    \ of a number.", "    if n == 0 \n        then return 0\n    else \n        sum_to_n(n\
    \ - 1) + n\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a number.", "    if\
    \ n == 0 \n        then return 0 \n        else return n + sum_to_n(n-1) \nend\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ number.", "    if n <= 0\n    then return 0\n    else return n + sum_to_n(n\
    \ - 1)\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise: Write a function that returns the factorial\
    \ of a number.", "    if n == 0 \n        then return 0\n    else \n        sum_to_n(n\
    \ - 1) + n\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a number.", "    if\
    \ n <= 0\n        error(\"n must be positive\")\n    else if n == 1\n        1\n\
    \    else\n        sum_to_n(n - 1) + n\nend\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.4>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.4>\nsum_to_n(5)\n</cell>\n<code language=julia-1.4>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.4>\nsum_to_n(1)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the sum of the numbers from 1 to n.\nFor example,\
    \ sum_to_n(10) = 55.", "    if n == 0\n        0\n    else\n        n + sum_to_n(n\
    \ - 1)\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise: Write a function that returns the factorial\
    \ of a number.", "    if n == 0 \n        then return 0\n    else \n        sum_to_n(n\
    \ - 1) + n\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a given number.", "    if n < 1 \n        error(\"n must be positive\")\n\
    \    else if n == 1 \n        1\n    else \n        sum_to_n(n-1) + n\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given number. \nThe factorial of a number $n$ is defined as:", "    if n ==\
    \ 0 \n        then return 0\n    else \n        sum_to_n(n - 1) + n\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given number.", "    if n < 1\n        error(\"n must be positive\")\n    elseif\
    \ n < 2\n        1\n    else\n        n * sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.0>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(5)\n</cell>\n<code language=julia-1.0>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(1)\n</cell>\n<text>\nExercise\nWrite\
    \ a function that returns the factorial of a number.", "    if n < 1 \n      \
    \  error(\"n must be positive\")\n    else if n == 1 \n        1\n    else \n\
    \        sum_to_n(n - 1) + 1\nend\n</cell>\n<code language=julia-1.1>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.1>\nsum_to_n(100)\n</cell>\n<code language=julia-1.1>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.1>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.1>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a number.", "    if n < 1 \n        error(\"n\
    \ must be positive\")\n    else if n == 1 \n        1\n    else \n        sum_to_n(n\
    \ - 1) + 1\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a number.", "    if\
    \ n < 1 \n        error(\"n must be positive\")\n    else if n == 1 \n       \
    \ 1\n    else \n        sum_to_n(n - 1) + 1\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<text>\nExercise: Write a function that returns the factorial\
    \ of a number.", "    if n < 1 \n        error(\"n must be positive\")\n    else\
    \ if n == 1 \n        1\n    else \n        sum_to_n(n - 1) + 1\nend\n</cell>\n\
    <code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first n prime numbers.",
  "    if n==0\n        0\n    else\n        n+sum_to_n(n-1)\nend\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a given number. For\
    \ example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1 = 3628800.", "    if n\
    \ <= 0\n        error(\"n must be positive\")\n    else if n == 1\n        1\n\
    \    else\n        sum_to_n(n - 1) + n\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the factorial\
    \ of a number.", "    if n <= 0\n        error(\"n must be positive\")\n    else\n\
    \        return n * (n + 1) / 2\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a number.", "    if n==1 \n        1 \n    else\
    \ \n        n*sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise\nWrite a function\
    \ that returns the first n prime numbers.", "    if n == 0 \n        then return\
    \ 0\n    else \n        then return n + sum_to_n(n - 1)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n <= 0\n        error(\"n must be positive\")\n    else\n\
    \        sum_to_n_aux(n, 1)\n    end\nend", "    if n <= 0\n        error(\"n\
    \ must be positive\")\n    end\n    sum = 0\n    for i in 1:n\n        sum +=\
    \ i\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(100)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.0>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(1)\n</cell>\n<text>\nExercise\nWrite a function\
    \ that returns the factorial of a given number. For example, factorial(4) == 24.\
    \ Hint: use the factorial function.", "    if n==1 \n        1 \n    else \n \
    \       n*sum_to_n(n-1) \nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ number.", "    if n == 0 \n        then return 0 \n        else return n + sum_to_n(n-1)\
    \ \n    end\nend\n</cell>\n<code language=julia-1.4>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.4>\nsum_to_n(100)\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.4>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.4>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a number.", "    if n == 0\n        0\n    else\n\
    \        n + sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<code language=julia-1.5>\nsum_to_n(0)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(0)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(0)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1)\n</cell>\n<code language=julia-1.5>\nsum_to_n(0)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(0)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(",
  "    if n == 0 \n        then return 0\n    else \n        return n + sum_to_n(n-1)\n\
    end\n</cell>\n<code language=julia-1.0>\nsum_to_n(30)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the factorial of a number.", "    if n <= 0\n\
    \        error(\"n must be positive\")\n    else\n        return n + sum_to_n(n\
    \ - 1)\nend", "    if n == 0\n        0\n    else\n        n + sum_to_n(n - 1)\n\
    end\n</cell>\n<code language=julia-1.0>\nsum_to_n(30)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.0>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(10)\n</cell>\n<code language=julia-1.0>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n == 0 \n        then return 0\n    else \n        sum_to_n(n\
    \ - 1) + n\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a given number. \nFor example, factorial(5) = 5 x 4 x 3 x 2 x 1 = 120", " \
    \   if n == 0 \n        then return 0\n    else \n        sum_to_n(n - 1) + n\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the factorial of a number.", "    if n < 0\n\
    \        error(\"n must be positive\")\n    elseif n == 0\n        0\n    else\n\
    \        sum_to_n(n - 1) + n\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise: Write a function that sums numbers from\
    \ 1 to n.\nHint: Use a recursive function.", "    if n == 0 \n        then return\
    \ 0\n    else \n        sum_to_n(n - 1) + n\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number.", "    if n==0 \n   \
    \     then return 1\n    else \n        sum_to_n(n - 1) + n\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a number.", "    if\
    \ n==1 \n        1 \n    else \n        n+sum_to_n(n-1) \nend \n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a number.", "    if\
    \ n <= 0\n        error(\"n must be positive\")\n    else\n        return n *\
    \ (n + 1) / 2\nend", "    if n <= 0\n        error(\"n must be positive\")\n \
    \   else if n == 1\n        1\n    else\n        sum_to_n(n - 1) + 1\nend\n</cell>\n\
    <code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n < 1 \n        error(\"n must be positive\")\n    else if\
    \ n == 1 \n        1\n    else \n        sum_to_n(n - 1) + 1\nend\n</cell>\n<code\
    \ language=julia-1.1>\nsum_to_n(30)\n</cell>\n<code language=julia-1.1>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.1>\nsum_to_n(5)\n</cell>\n<code language=julia-1.1>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.1>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the factorial of a number.", "    if n\
    \ < 1 \n        error(\"n must be positive\")\n    else if n == 1 \n        1\n\
    \    else \n        sum_to_n(n - 1) + 1\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the sum of the numbers from 1 to n that are divisible\
    \ by 3.", "    if n == 1 \n        then return 1\n    else if n == 2 \n      \
    \  then return 2\n    else if n == 3 \n        then return 3\n    else if n ==\
    \ 4 \n        then return 4\n    else if n == 5 \n        then return 5\n    else\
    \ if n == 6 \n        then return 6\n    else if n == 7 \n        then return\
    \ 7\n    else if n == 8 \n        then return 8\n    else if n == 9 \n       \
    \ then return 9\n    else if n == 10 \n        then return 10\n    else if n ==\
    \ 11 \n        then return 11\n    else if n == 12 \n        then return 12\n\
    \    else if n == 13 \n        then return 13\n    else if n == 14 \n        then\
    \ return 14\n    else if n == 15 \n        then return 15\n    else if n == 16\
    \ \n        then return 16\n    else if n == 17 \n        then return 17\n   \
    \ else if n == 18 \n        then return 18\n    else if n == 19 \n        then\
    \ return 19\n    else if n == 20 \n        then return 20\n    else if n == 21\
    \ \n        then return 21\n    else if n == 22 \n        then return 22\n   \
    \ else if n == 23 \n        then return 23\n    else if n == 24 \n        then\
    \ return 24\n    else if n == 25 \n        then return 25\n    else if n == 26\
    \ \n        then return 26\n    else if n == 27 \n        then return 27\n   \
    \ else if n == 28 \n        then return 28\n    else if n == 29 \n        then\
    \ return 29\n    else if n == 30 \n        then return 30\n    else if n == 31\
    \ \n        then return 31\n    else if n == 32 \n        then return 32\n   \
    \ else if n == 33 \n        then return 33\n    else if n == 34 \n        then\
    \ return 34\n    else if n == 35 \n        then return 35\n    else if n == 36\
    \ \n        then return 36\n    else if n == 37 \n        then return 37\n   \
    \ else if n == 38 \n        then return 38\n    else if n == 39 \n        then\
    \ return 39\n    else if n == 40 \n        then return 40\n    else if n == 41\
    \ \n        then return 41\n    else if n == 42 \n        then return 42\n   \
    \ else if n == 43 \n        then return 43\n    else if n == 44 \n        then\
    \ return 44\n    else if n == 45 \n        then return 45\n    else if n == 46\
    \ \n        ", "    if n == 0 \n        then return 0\n    else \n        return\
    \ n + sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a number.", "    if n <= 0\n        error(\"n\
    \ must be positive\")\n    else if n == 1\n        1\n    else\n        sum_to_n(n\
    \ - 1) + n\n    end\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write a function\
    \ that sums numbers from 1 to n but stops when the sum is greater than n.", " \
    \   if n == 0\n        0\n    else\n        1 + sum_to_n(n-1)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the factorial of a number.",
  "    if n <= 0\n        error(\"n must be positive\")\n    end\n    sum = 0\n  \
    \  for i in 1:n\n        sum += i\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the square root of a number. For example,\
    \ sqrt(4) should return 2.82842...", "    if n==0 \n        then return 0\n  \
    \  else \n        sum_to_n(n-1)\n        + (n-1)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the factorial of a number.", "    if n < 1\n   \
    \     error(\"n must be positive\")\n    else\n        sum_to_n_aux(n,1)\n   \
    \ end\nend", "    if n==0 \n        then return 1\n    else \n        sum_to_n(n-1)+n\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that returns the factorial of a number.", "    if n < 1\n\
    \        error(\"n must be positive\")\n    else\n        return n * (n + 1) /\
    \ 2\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise: Write a function that sums numbers from 1 to n but\
    \ stops when it reaches n.\nHint: Use a while loop.", "    if n < 1 \n       \
    \ error(\"n must be positive\")\n    else if n == 1 \n        1\n    else \n \
    \       sum_to_n(n - 1) + 1\nend\n</cell>\n<code language=julia-1.0>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(100)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.0>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write a function\
    \ that sums numbers from 1 to n but stops when the sum is greater than n.", " \
    \   if n <= 0\n        error(\"n must be positive\")\n    else\n        sum_to_n_impl(n)\n\
    \    end\nend", "    if n == 0 \n        then return 0\n    else \n        then\
    \ return n + sum_to_n(n - 1)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number.", "    if n <= 0\n  \
    \  then return 0\n    else return n + sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the factorial\
    \ of a number.", "    if n < 1\n        error(\"n must be positive\")\n    elseif\
    \ n == 0\n        1\n    else\n        sum_to_n(n - 1) + n\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the factorial of a number.",
  "    if n < 0\n        error(\"n must be positive\")\n    else\n        return n\
    \ + sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the factorial of a number.",
  "    if n < 1 \n        error(\"n must be positive\")\n    else if n == 1 \n   \
    \     1\n    else \n        sum_to_n(n - 1) + 1\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.", "    if n < 1 \n        error(\"n must be positive\")\n    else\
    \ if n == 1 \n        1\n    else \n        sum_to_n(n - 1) + 1\nend\n</cell>\n\
    <code language=julia-1.4>\nsum_to_n(30)\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.4>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.4>\nsum_to_n(10)\n</cell>\n<code language=julia-1.4>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise\nWrite a function that sums numbers from 1 to n and\
    \ returns the sum of the squares of those numbers. For example, sum_to_n_squares(30)\
    \ should return 465.", "    if n < 1\n        error(\"n must be positive\")\n\
    \    else\n        return n + sum_to_n(n-1)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.", "    if n < 0\n        error(\"n must be positive\")\n    elseif\
    \ n == 0\n        error(\"n must be positive\")\n    else\n        sum_to_n(n\
    \ - 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the factorial of a number.", "    if n < 0\n        error(\"n must\
    \ be positive\")\n    elseif n == 0\n        0\n    else\n        sum_to_n(n -\
    \ 1) + n\n    end\nend\n</cell>\n<code language=julia-1.4>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.4>\nsum_to_n(100)\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.4>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.4>\nsum_to_n(1)\n</cell>\n<text>\nExercise\nWrite a function\
    \ that returns the sum of the numbers from 1 to n that are divisible by k.", " \
    \   if n==0 \n        then return 0\n    else \n        then return n*(n+1)/2\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't seem to answer the question.\
    \ How does this answer the question?\n<|/ c |>\n<| c |>\nI added a code example\
    \ to my answer. Hope it helps.\n<|/ c |>\n<| a dscore=2 |>\nThe question asks\
    \ for an algorithm that finds the sum of all numbers from 1 to n. \nThe algorithm\
    \ is as follows:", "    if n == 0\n        0\n    else\n        n + sum_to_n(n\
    \ - 1)\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the first\
    \ n prime numbers. \nThe function should take one parameter, n::Int64.", "   \
    \ if n == 0 \n        then return 0 \n        else return n + sum_to_n(n - 1)\n\
    </code>\n<|/ a |>\n<| a dscore=0 |>\n<code>", "    if n < 1 \n        error(\"\
    n must be positive\")\n    else if n == 1 \n        1\n    else \n        sum_to_n(n\
    \ - 1) + 1\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.", "    if n < 1 \n        then return 0\n    else \n        return\
    \ n + sum_to_n(n-1)\n    end\nend\n</cell>\n<code language=julia-1.0>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(100)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.0>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a number.", "    if n < 0\n        error(\"n must\
    \ be positive\")\n    else if n == 0\n        0\n    else\n        sum_to_n(n\
    \ - 1) + 1\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the factorial of a number.", "    if\
    \ n == 0 \n        then return 0\n    else \n        sum_to_n(n - 1) + n\nend\n\
    </cell>\n<code language=julia-1.4>\nsum_to_n(30)\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.4>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.4>\nsum_to_n(10)\n</cell>\n<code language=julia-1.4>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n == 0\n        0\n    else\n        n + sum_to_n(n - 1)\n\
    end\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the sum of the numbers\
    \ from 1 to n that are divisible by k.", "    if n <= 0\n    then return 0\n \
    \   else return n\n    end\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a number.", "    if n==0 \n        then return\
    \ 1\n    else \n        sum_to_n(n-1)+n\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(30)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the factorial\
    \ of a number.", "    if n < 1 \n        error(\"n must be positive\")\n    else\
    \ if n == 1 \n        1\n    else \n        sum_to_n(n - 1) + 1\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that computes the factorial of a given number. \nThe factorial of a\
    \ number $n$ is defined as:", "    if n == 0 \n        then return 0\n    else\
    \ \n        then return n + sum_to_n(n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise\nWrite\
    \ a function that returns the sum of the first n positive integers. \nFor example,\
    \ sum_to_n(10) should return 55.", "    if n == 0\n        0\n    else\n     \
    \   1 + sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the sum of the numbers from 1 to n that are divisible by k.", " \
    \   if n == 0 \n        then return 0 \n        else return n + sum_to_n(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(100)\n</cell>\n<code language=julia-1.0>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(10)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.", "    if n==1 \n        1\n    else\n        n*sum_to_n(n-1)\n\
    end\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n < 1 \n        error(\"n must be positive\")\n    else if\
    \ n == 1 \n        1\n    else \n        sum_to_n(n - 1) + 1\nend\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the numbers from 1 to n.",
  "    if n == 0 \n        then return 0 \n        else return n + sum_to_n(n-1) \n\
    end\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given number. For example, factorial(5) = 5 x 4 x 3 x 2 x 1 = 120", "    if\
    \ n <= 0\n        error(\"n must be positive\")\n    else\n        return n *\
    \ (n + 1) / 2\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the sum of the first n numbers. \nFor example, sum_to_n(5) should\
    \ return 15 (5 + 4 + 3 + 2 + 1)", "    if n == 1 \n        then return 1 \n  \
    \      else return n*sum_to_n(n-1) \nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise\nWrite\
    \ a function that returns the factorial of a number.", "    if n < 1 \n      \
    \  error(\"n must be positive\")\n    else if n == 1 \n        1\n    else \n\
    \        sum_to_n(n - 1) + n\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write a function\
    \ that sums numbers from 1 to n and returns the sum of the squares of the numbers\
    \ from 1 to n.", "    if n <= 0\n        error(\"n must be positive\")\n    else\n\
    \        sum_to_n_aux(n, 0)\n    end\nend", "    if n==1 \n        1 \n    else\
    \ \n        n*sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ number.", "    if n < 1\n        error(\"n must be positive\")\n    else\n \
    \       return n * (n + 1) / 2\nend", "    if n == 0\n        0\n    else\n  \
    \      1 + sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n\
    </cell>\n<text>\nExercise: Write a function that returns the sum of the first\
    \ n numbers from 1 to n.", "    if n==0 \n        then return 0\n    else \n \
    \       sum_to_n(n-1)\n        +n\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number.", "    if n <= 0\n  \
    \  then return 0\n    else return n\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number.", "    if n==0 \n   \
    \     then return 1\n    else \n        sum_to_n(n-1)\n        + n\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the sum of the numbers from 1 to n that are divisible by k.", " \
    \   if n < 1\n        error(\"n must be positive\")\n    else\n        sum_to_n_aux(n,\
    \ 1)\n    end\nend", "    if n < 1 \n        error(\"n must be >= 1\")\n    else\
    \ if n == 1 \n        1\n    else \n        sum_to_n(n - 1) + 1\nend\n</cell>\n\
    <code language=julia-1.0>\nsum_to_n(30)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.0>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(10)\n</cell>\n<code language=julia-1.0>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first n prime numbers.",
  "    if n < 0\n        error(\"n must be positive\")\n    else if n == 0\n     \
    \   1\n    else\n        sum_to_n(n - 1) + 1\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the factorial of a number.", "    if n == 0\n      \
    \  0\n    else\n        n + sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.4>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.4>\nsum_to_n(5)\n</cell>\n<code language=julia-1.4>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.4>\nsum_to_n(1)\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(2)\n</cell>\n<code language=julia-1.4>\nsum_to_n(3)\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(4)\n</cell>\n<code language=julia-1.4>\nsum_to_n(5)\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(6)\n</cell>\n<code language=julia-1.4>\nsum_to_n(7)\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(8)\n</cell>\n<code language=julia-1.4>\nsum_to_n(9)\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.4>\nsum_to_n(11)\n</cell>\n<code\
    \ language=julia-1.4>\nsum_to_n(12)\n</cell>\n<code language=julia-1.4>\nsum_to_n(13)\n\
    </cell>\n<code language=julia-1.4>\nsum_to_n(14)\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(15)\n</cell>\n<code language=julia-1.4>\nsum_to_n(16)\n</cell>\n<code\
    \ language=julia-1.4>\nsum_to_n(17)\n</cell>\n<code language=julia-1.4>\nsum_to_n(18)\n\
    </cell>\n<code language=julia-1.4>\nsum_to_n(19)\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(20)\n</cell>\n<code language=julia-1.4>\nsum_to_n(21)\n</cell>\n<code\
    \ language=julia-1.4>\nsum_to_n(22)\n</cell>\n<code language=julia-1.4>\nsum_to_n(23)\n\
    </cell>\n<code language=julia-1.4>\nsum_to_n(24)\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(25)\n</cell>\n<code language=julia-1.4>\nsum_to_n(26)\n</cell>\n<code\
    \ language=julia-1.4>\nsum_to_n(27)\n</cell>\n<code language=julia-1.4>\nsum_to_n(28)\n\
    </cell>\n<code language=julia-1.", "    if n < 0\n        error(\"n must be positive\"\
    )\n    else\n        return n + sum_to_n(n - 1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(30)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a number.", "    if n == 0 \n        then return\
    \ 0\n    else \n        return n + sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nRecursive Functions\n\
    A recursive function calls itself. This can be done by defining a function with\
    \ one parameter and then calling it within itself. Julia will automatically track\
    \ the number of times the function has been called and will automatically calculate\
    \ the return value based on the number of times it was called.", "    if n < 0\n\
    \        error(\"n must be positive\")\n    else\n        return n*(n+1)/2\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise: Write a function that sums numbers from 1 to n but\
    \ stops when the sum is greater than n.", "    if n == 0 \n        then return\
    \ 0\n    else if n == 1 \n        then return 1\n    else \n        return n +\
    \ sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a number.", "    if n < 1\n        error(\"n must\
    \ be positive\")\n    elseif n == 0\n        0\n    else\n        1 + sum_to_n(n-1)\n\
    end", "    if n == 0 \n        then return 0\n    else \n        return n + sum_to_n(n-1)\n\
    end\n</cell>\n<code language=julia-1.0>\nsum_to_n(30)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.0>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(10)\n</cell>\n<code language=julia-1.0>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n == 0\n        0\n    else\n        (n*(n+1))/2\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the factorial of a number.",
  "    if n == 1 \n        then return 1\n    else \n        sum_to_n(n - 1) + n\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n <= 0\n        error(\"n must be positive\")\n    else\n\
    \        return n * (n + 1) / 2\n    end\nend\n</cell>\n<code language=julia-1.1>\n\
    sum_to_n(30)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the factorial\
    \ of a number.", "    if n < 1 \n        error(\"n must be positive\")\n    else\
    \ if n == 1 \n        1\n    else \n        sum_to_n(n - 1) + n\nend\n</cell>\n\
    <code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the factorial of a given\
    \ number. \nFor example, factorial(5) == 120.\nHint: use the factorial function\
    \ from the Base package.", "    if n == 0\n        0\n    else\n        n + sum_to_n(n\
    \ - 1)\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise: Write a function that returns the factorial\
    \ of a number.", "    if n==1 \n        1 \n    else \n        sum_to_n(n-1)+n\
    \ \nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the factorial of a number.", "    if n==1 \n\
    \        1 \n    else \n        n*sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.", "    if n == 0\n        0\n    else\n        n * sum_to_n(n -\
    \ 1)\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise\nWrite a function that calculates the sum of the first\
    \ n numbers. Use a recursive function.", "    if n < 1 \n        error(\"n must\
    \ be positive\")\n    else if n == 1 \n        1\n    else \n        sum_to_n(n\
    \ - 1) + n\nend\n</cell>\n<code language=julia-1.4>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.4>\nsum_to_n(100)\n</cell>\n<code language=julia-1.4>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.4>\nsum_to_n(10)\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.", "    if n < 1 \n        error(\"n must be greater than 0\", 2)\n\
    \    elseif n < 2 \n        1\n    elseif n < 3 \n        2\n    elseif n < 5\
    \ \n        3\n    elseif n < 10 \n        4\n    elseif n < 20 \n        5\n\
    \    elseif n < 50 \n        6\n    elseif n < 100 \n        7\n    elseif n <\
    \ 500 \n        8\n    elseif n < 1000 \n        9\n    elseif n < 5000 \n   \
    \     10\n    elseif n < 10000 \n        11\n    elseif n < 50000 \n        12\n\
    \    elseif n < 100000 \n        13\n    elseif n < 500000 \n        14\n    elseif\
    \ n < 1000000 \n        15\n    elseif n < 5000000 \n        16\n    elseif n\
    \ < 10000000 \n        17\n    elseif n < 50000000 \n        18\n    elseif n\
    \ < 100000000 \n        19\n    elseif n < 500000000 \n        20\n    elseif\
    \ n < 1000000000 \n        21\n    elseif n < 5000000000 \n        22\n    elseif\
    \ n < 10000000000 \n        23\n    elseif n < 50000000000 \n        24\n    elseif\
    \ n < 100000000000 \n        25\n    elseif n < 500000000000 \n        26\n  \
    \  elseif n < 1000000000000 \n        27\n    elseif n < 5000000000000 \n    \
    \    28\n    elseif n < 10000000000000 \n        29\n    elseif n < 50000000000000\
    \ \n        30\n    elseif n < 100000000000000 \n        31\n    elseif n < 500000000000000\
    \ \n        32\n    elseif n < 1000000000000000 \n        33\n    elseif n < 5000000000000000\
    \ \n        34\n    elseif n < 10000000000000000 \n        35\n    elseif n <\
    \ 5000000000000000 \n        36\n    elseif n < 100000000000000000 \n        37\n\
    \    elseif n < 50000000000000000 \n        38\n    elseif n < 100000000000000000\
    \ \n        39\n    elseif n < 500000000000000000 \n        40\n    elseif n <\
    \ 1000000000000000000 \n        41\n    elseif n < 500000000000000000 \n     \
    \   42\n    elseif n < 10000000000000000000 \n        43\n    elseif n < 5000000000000000000\
    \ \n        44\n    elseif n < 100000000000000000000 \n        45\n    elseif\
    \ n < 50000000000000000000 \n        46\n    elseif n < 1000000000000000000000\
    \ \n        47\n    elseif n < 500000000000000000000 \n        48\n    elseif\
    \ n < 10000000000000000000000 \n        49\n    elseif n < 5000000000000000000000\
    \ \n        50\n    elseif ", "    if n < 1\n        error(\"n must be positive\"\
    )\n    end\n    return n * (n + 1) / 2\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(30)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.", "    if n <= 0\n        error(\"n must be positive\")\n    else\n\
    \        return n*(n+1)/2\nend\n</cell>\n<code language=julia-1.1>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.1>\nsum_to_n(100)\n</cell>\n<code language=julia-1.1>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.1>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.1>\nsum_to_n(1)\n</cell>\n<text>\nExercise\nWrite a function\
    \ that returns the sum of the first n positive integers. Use a while loop to do\
    \ this.", "    if n==0 \n        then return 0\n    else \n        then return\
    \ n + sum_to_n(n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the factorial of a number.", "    if n==1 \n        1 \n    else\
    \ \n        n+sum_to_n(n-1) \nend \n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the first n prime numbers. \nHint: use an inner loop to check whether\
    \ a number is prime.", "    if n == 0 \n        then return 0\n    else \n   \
    \     sum_to_n(n - 1) + n\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the factorial of a given number. For example, factorial(5) = 5\
    \ \xD7 4 \xD7 3 \xD7 2 \xD7 1 = 120", "    if n < 1 \n        error(\"n must be\
    \ positive\")\n    else if n == 1 \n        1\n    else \n        sum_to_n(n -\
    \ 1) + 1\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.", "    if n < 0\n        error(\"n must be positive\")\n    else\
    \ if n == 0\n        0\n    else if n == 1\n        1\n    else\n        sum_to_n(n\
    \ - 1) + sum_to_n(n - 2)\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a number.", "    if n < 1\n        error(\"n must\
    \ be positive\")\n    else\n        sum_to_n_impl(n, 0)\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise\nWrite\
    \ a function that sums numbers from 1 to n and returns the sum of the squares\
    \ of those numbers.", "    if n < 0\n        error(\"n must be positive\")\n \
    \   else\n        sum_to_n_impl(n)\n    end\nend", "    if n <= 0\n        error(\"\
    n must be positive\")\n    else\n        return n\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the first n positive integers.\
    \ \nFor example, sum_to_n(10) should return 55.", "    if n == 0\n        0\n\
    \    else\n        n + sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the factorial of a number.", "    if n <= 0\n  \
    \      error(\"n must be positive\")\n    else\n        sum_to_n_aux(n, 0)\n \
    \   end\nend", "    if n <= 0\n        error(\"n must be positive\")\n    else\n\
    \        return n * (n + 1) / 2\nend\n</cell>\n<code language=julia-1.4>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.4>\nsum_to_n(100)\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.4>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.4>\nsum_to_n(1)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the factorial of a number.", "    if n == 0 \n        then return\
    \ 0\n    else \n        sum_to_n(n - 1) + n\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the first n prime numbers. \nThe function should\
    \ take an argument n and return a vector of prime numbers.", "    if n < 0\n \
    \       error(\"n must be positive\")\n    else if n == 0\n        1\n    else\n\
    \        sum_to_n(n - 1) + n\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the sum of the first n positive integers. Use a while\
    \ loop to do this.", "    if n < 0\n        error(\"n must be positive\")\n  \
    \  elseif n == 0\n        0\n    else\n        sum_to_n(n - 1) + n\nend\n</cell>\n\
    <code language=julia-1.0>\nsum_to_n(30)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.0>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(10)\n</cell>\n<code language=julia-1.0>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the sum of the first\
    \ n positive integers. \nThe function should take an argument n that specifies\
    \ the number of positive integers to sum.", "    if n==1 \n        1 \n    else\
    \ \n        n*sum_to_n(n-1) \nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a number.", "    if n <= 0\n        error(\"n\
    \ must be positive\")\n    else\n        sum_to_n_impl(n)\n    end\nend\nsum_to_n_impl(n::Int64)::Int64\
    \ = n \nsum_to_n_impl(n::Int64)::Int64 = sum_to_n_impl(n-1)\nsum_to_n_impl(n::Int64)::Int64\
    \ = sum_to_n_impl(n-2)\nsum_to_n_impl(n::Int64)::Int64 = sum_to_n_impl(n-3)\n\
    sum_to_n_impl(n::Int64)::Int64 = sum_to_n_impl(n-4)\nsum_to_n_impl(n::Int64)::Int64\
    \ = sum_to_n_impl(n-5)\nsum_to_n_impl(n::Int64)::Int64 = sum_to_n_impl(n-6)\n\
    sum_to_n_impl(n::Int64)::Int64 = sum_to_n_impl(n-7)\nsum_to_n_impl(n::Int64)::Int64\
    \ = sum_to_n_impl(n-8)\nsum_to_n_impl(n::Int64)::Int64 = sum_to_n_impl(n-9)\n\
    sum_to_n_impl(n::Int64)::Int64 = sum_to_n_impl(n-10)\nsum_to_n_impl(n::Int64)::Int64\
    \ = sum_to_n_impl(n-11)\nsum_to_n_impl(n::Int64)::Int64 = sum_to_n_impl(n-12)\n\
    sum_to_n_impl(n::Int64)::Int64 = sum_to_n_impl(n-13)\nsum_to_n_impl(n::Int64)::Int64\
    \ = sum_to_n_impl(n-14)\nsum_to_n_impl(n::Int64)::Int64 = sum_to_n_impl(n-15)\n\
    sum_to_n_impl(n::Int64)::Int64 = sum_to_n_impl(n-16)\nsum_to_n_impl(n::Int64)::Int64\
    \ = sum_to_n_impl(n-17)\nsum_to_n_impl(n::Int64)::Int64 = sum_to_n_impl(n-18)\n\
    sum_to_n_impl(n::Int64)::Int64 = sum_to_n_impl(n-19)\nsum_to_n_impl(n::Int64)::Int64\
    \ = sum_to_n_impl(n-20)\nsum_to_n_impl(n::Int64)::Int64 = sum_to_n_impl(n-21)\n\
    sum_to_n_impl(n::Int64)::Int64 = sum_to_n_impl(n-22)\nsum_to_n_impl(n::Int64)::",
  "    if n <= 0\n    then return 0\n    else if n == 1\n    then return 1\n    else\
    \ return n*sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a number.", "    if n == 0\n        0\n    else\n\
    \        1 + sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the sum of the numbers from 1 to n that are divisible by 3", " \
    \   if n < 0\n        error(\"n must be positive\")\n    else if n == 0\n    \
    \    error(\"n must be positive\")\n    else\n        sum_to_n_impl(n)\nend",
  "    if n == 0 \n        then return 0 \n    else \n        sum_to_n(n - 1) + n\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that returns the factorial of a number.", "    if n==1 \n\
    \        1 \n    else \n        n*sum_to_n(n-1) \nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the factorial\
    \ of a number.", "    if n == 0 \n        then return 0\n    else \n        sum_to_n(n\
    \ - 1) + n\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.", "    if n <= 0\n        error(\"n must be positive\")\n    else\n\
    \        return n + sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(30)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the factorial\
    \ of a number.", "    if n <= 0\n        error(\"n must be positive\")\n    else\n\
    \        return n + sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n <= 0\n        error(\"n must be positive\")\n    else if\
    \ n == 1\n        1\n    else\n        sum_to_n(n - 1) + 1\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes an array of numbers and returns the sum\
    \ of the numbers in the array. For example, sum_to_n([1,2,3]) should return 6.",
  "    if n == 0 \n        then return 1\n    else \n        return n + sum_to_n(n\
    \ - 1)\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise: Write a function that returns the factorial\
    \ of a number.", "    if n < 1\n        error(\"n must be positive\")\n    elseif\
    \ n < 2\n        return 1\n    else\n        return n*(n+1)/2\n    end\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
