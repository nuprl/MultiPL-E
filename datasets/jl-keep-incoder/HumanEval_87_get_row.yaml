name: HumanEval_87_get_row
language: julia
prompt: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which\
  \ is similar to matrix, however, unlike matrices,\n    each row may contain a different\
  \ number of columns.\n    Given lst, and integer x, find integers x in the list,\n\
  \    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple\
  \ is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially\
  \ by rows in ascending order.\n    Also, sort coordinates of the row by columns\
  \ in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n\
  \      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0),\
  \ (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3)\
  \ == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}}, x::Int64)::Vector{Tuple{Int64,\
  \ Int64}} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
  \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4),\
  \ (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
  \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
  \ 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
  \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
  \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0),\
  \ (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\
  \t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64, Int64}}([]))\n\
  \t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[],\
  \ [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
completions: ["    \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n\
    \    cols = zeros(Int, length(lst))\n    \n    for row in 1:length(lst)\n    \
    \    rows = rows + 1\n        cols = cols + length(lst[row])\n    end\n    \n\
    \    rows = sort(rows)\n    cols = sort(cols)\n    \n    coords = zeros(Int, length(lst))\n\
    \    \n    for row in 1:length(lst)\n        coords[row] = ((rows - row(rows)),\
    \ (cols - row(cols)))\n    end\n    \n    coords = sort(coords)\n    \n    coords\
    \ = coords[coords[1, 1] <= x]\n    \n    return coords\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rows = sort(collect(enumerate(lst)))\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    \n    rows = sort(rows, by=x->-x[1])\n    \n    rows = sort(rows, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->-x[2])\n    \n    return rows\nend\n</cell>\n\
    <code language=julia-1.5>\nget_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n\
    \      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    </cell>\n<code language=julia-1.5>\nget_row([], 1) == []\n</cell>\n<code language=julia-1.5>\n\
    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a matrix and a vector as input, and returns the dot product\
    \ of the matrix and the vector.", "    \n    lst = sort(lst)\n    \n    rows =\
    \ zeros(Int, length(lst))\n    cols = zeros(Int, length(lst))\n    \n    for (i,row)\
    \ in enumerate(lst)\n        \n        rows = rows + 1\n        cols = cols +\
    \ length(row)\n        \n        if x == row\n            \n            return\
    \ [(i, j)  for j in (1:length(row)), (1:length(row))] \n        end\n    end\n\
    \    \n    return []\nend\n</cell>\n<code language=julia-1.5>", "    \n    rows\
    \ = sort(collect(enumerate(lst)))\n    \n    rows = sort(rows, by=x->x[1])\n \
    \   \n    rows = sort(rows, by=x->-x[1])\n    \n    rows = sort(rows, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->-x[2])\n    \n    return rows\nend", "    \n\
    \    rows = sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[[1]])))\n\
    \    \n    rows = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->-x)\n    \n\
    \    rows = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->-x)\n    \n    rows\
    \ = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->-x)\n    \n    rows = sort(rows,\
    \ by=x->-x)\n    cols = sort(cols, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n\
    \    cols = sort(cols, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n    cols\
    \ = sort(cols, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n    cols = sort(cols,\
    \ by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->-x)\n\
    \    \n    rows = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->-x)\n    \n\
    \    rows = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->-x)\n    \n    rows\
    \ = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->-x)\n    \n    rows = sort(rows,\
    \ by=x->-x)\n    cols = sort(cols, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n\
    \    cols = sort(cols, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n    cols\
    \ = sort(cols, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n    cols = sort(cols,\
    \ by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->-x)\n\
    \    \n    rows = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->-x)\n    \n\
    \    rows = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->-x)\n    \n    rows\
    \ = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->-x)\n    \n    rows = sort(rows,\
    \ by=x->-x)\n    cols = sort(cols, by=x->-x)\n    \n    rows = sort(rows, by=",
  "    \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    cols =\
    \ zeros(Int, length(lst))\n    \n    for (i,row) in enumerate(lst)\n        rows\
    \ = rows + row\n        cols = cols + 1\n    end\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = sort(rows)\n    cols = sort(cols)\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = sort(rows)\n    cols = sort(cols)\n    \n    rows = rows[cols..end]\n    cols\
    \ = cols[rows..end]\n    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n\
    \    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = sort(rows)\n    cols = sort(cols)\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = sort(rows)\n    cols = sort(cols)\n    \n    rows = rows[cols..end]\n    cols\
    \ = cols[rows..end]\n    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n\
    \    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = sort(rows)\n    cols = sort(cols)\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = sort(rows)\n    cols = sort(cols)\n    \n    rows = rows[cols..end]\n    cols\
    \ = cols[rows..end]\n    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n\
    \    rows = rows[cols..end]\n    cols = col", "    \n    rows = sort(collect(1:length(lst)))\n\
    \    cols = sort(collect(1:length(lst[rows])), by=length, reverse=true)\n    \n\
    \    coords = zeros(length(rows), length(cols))\n    \n    for (i,r) in enumerate(rows)\n\
    \        for (c,c) in enumerate(cols)\n            coords[i,c] = (r,c)\n     \
    \   end\n    end\n    \n    coords = coords[coords[:,1] .== x, :]\n    \n    coords\
    \ = coords[sortperm(coords[:,2], rev=true), :]\n    \n    return coords\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    rows = sort(collect(enumerate(lst)))\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n\
    \    \n    rows = sort(rows, by=x->x[2])\n    \n    rows = sort(rows, by=x->-x[2])\n\
    \    \n    rows = sort(rows, by=x->x[3])\n    \n    rows = sort(rows, by=x->-x[3])\n\
    \    \n    rows = sort(rows, by=x->x[4])\n    \n    rows = sort(rows, by=x->-x[4])\n\
    \    \n    rows = sort(rows, by=x->x[5])\n    \n    rows = sort(rows, by=x->-x[5])\n\
    \    \n    rows = sort(rows, by=x->x[6])\n    \n    rows = sort(rows, by=x->-x[6])\n\
    \    \n    rows = sort(rows, by=x->x[7])\n    \n    rows = sort(rows, by=x->-x[7])\n\
    \    \n    rows = sort(rows, by=x->x[8])\n    \n    rows = sort(rows, by=x->-x[8])\n\
    \    \n    rows = sort(rows, by=x->x[9])\n    \n    rows = sort(rows, by=x->-x[9])\n\
    \    \n    rows = sort(rows, by=x->x[10])\n    \n    rows = sort(rows, by=x->-x[10])\n\
    \    \n    rows = sort(rows, by=x->x[11])\n    \n    rows = sort(rows, by=x->-x[11])\n\
    \    \n    rows = sort(rows, by=x->x[12])\n    \n    rows = sort(rows, by=x->-x[12])\n\
    \    \n    rows = sort(rows, by=x->x[13])\n    \n    rows = sort(rows, by=x->-x[13])\n\
    \    \n    rows = sort(rows, by=x->x[14])\n    \n    rows = sort(rows, by=x->-x[14])\n\
    \    \n    rows = sort(rows, by=x->x[15])\n    \n    rows = sort(rows, by=x->-x[15])\n\
    \    \n    rows = sort(rows, by=x->x[16])\n    \n    rows = sort(rows, by=x->-x[16])\n\
    \    \n    rows = sort(rows, by=x->x[17])\n    \n    rows = sort(rows, by=x->-x[17])\n\
    \    \n    rows = sort(rows, by=x->x[18])\n    \n    rows = sort(rows, by=x->-x[18])",
  "    \n    lst = sort(lst)\n    \n    rows = Vector{Tuple{Int64, Int64}}()\n   \
    \ \n    for row in lst\n        \n        row_coords = Tuple{Int64, Int64}()\n\
    \        \n        for col in row\n            \n            if col == x\n   \
    \             \n                row_coords = Tuple(row, col)\n               \
    \ \n            end\n            \n        end\n        \n        push!(rows,\
    \ row_coords)\n        \n    end\n    \n    rows = sort(rows)\n    \n    rows\
    \ = reverse(rows)\n    \n    return rows\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    cols =\
    \ zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n        rows = rows\
    \ + lst[i][x]\n        cols = cols + lst[i][end]\n    end\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    return zip(rows, cols)\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    lst = sort(lst)\n    \n    rows = zeros(Int,\
    \ length(lst))\n    cols = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n\
    \        rows = rows + lst[i][x]\n        cols = cols + lst[i][end]\n    end\n\
    \    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    coords = zeros(length(rows),\
    \ length(cols))\n    \n    for i = 1:length(rows)\n        coords[i, :] = [rows,\
    \ cols]\n    end\n    \n    return coords\nend\n</cell>\n<code language=julia-1.3>",
  "    \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    \n   \
    \ for i = 1:length(lst)\n        rows = rows + 1\n        \n        lst[i] = sort(lst[i])\n\
    \        \n        lst[i] = lst[i][2:end]\n        \n        lst[i] = sort(lst[i])\n\
    \        \n        lst[i] = lst[i][2:end]\n        \n        lst[i] = sort(lst[i])\n\
    \        \n        lst[i] = lst[i][2:end]\n        \n        lst[i] = sort(lst[i])\n\
    \        \n        lst[i] = lst[i][2:end]\n        \n        lst[i] = sort(lst[i])\n\
    \        \n        lst[i] = lst[i][2:end]\n        \n        lst[i] = sort(lst[i])\n\
    \        \n        lst[i] = lst[i][2:end]\n        \n        lst[i] = sort(lst[i])\n\
    \        \n        lst[i] = lst[i][2:end]\n        \n        lst[i] = sort(lst[i])\n\
    \        \n        lst[i] = lst[i][2:end]\n        \n        lst[i] = sort(lst[i])\n\
    \        \n        lst[i] = lst[i][2:end]\n        \n        lst[i] = sort(lst[i])\n\
    \        \n        lst[i] = lst[i][2:end]\n        \n        lst[i] = sort(lst[i])\n\
    \        \n        lst[i] = lst[i][2:end]\n        \n        lst[i] = sort(lst[i])\n\
    \        \n        lst[i] = lst[i][2:end]\n        \n        lst[i] = sort(lst[i])\n\
    \        \n        lst[i] = lst[i][2:end]\n        \n        lst[i] = sort(lst[i])\n\
    \        \n        lst[i] = lst[i][2:end]\n        \n        lst[i] = sort(lst[i])\n\
    \        \n        lst[i] = lst[i][2:end]\n        \n        lst[i] = sort(lst[i])\n\
    \        \n        lst[i] = lst[i][2:end]\n        \n        lst[i] = sort(lst[i])\n\
    \        \n        lst[i] = lst[i][2:end]\n        \n        lst[i] = sort(lst[i])\n\
    \        \n        lst[i] = lst[i][2:end]\n        \n        lst[i] = sort(lst[i])\n\
    \        \n        lst[i] = lst[i][2:end]\n        \n        lst[i] = sort(lst[i])\n\
    \        \n        lst[i] = lst[i][2:end]\n        \n        lst[i] = sort(lst[i])\n\
    \        \n        lst[i] = lst[i][2:end]\n        \n        lst[i] = sort(lst[i])\n\
    \        \n        lst[i] = lst[i][2:end]\n        \n        lst[i] = sort(lst[i])\n\
    \        \n        lst[i] = lst[i][2:end]\n        \n        lst[i] = sort(lst[i])\n\
    \        \n        lst[i] = lst[i][2:end]\n        \n        lst[i] = sort(lst[i])\n\
    \        \n        lst[i] = lst[i][2:end]\n        \n", "    \n    lst = sort(lst)\n\
    \    \n    rows = zeros(Int, length(lst))\n    cols = zeros(Int, length(lst))\n\
    \    \n    for (i,row) in enumerate(lst)\n        \n        rows = rows + row\n\
    \        cols = cols + 1\n        \n        if rows == x\n            \n     \
    \       coord = Tuple(row-1, cols-1)\n            \n            return coord\n\
    \        end\n    end\n    \n    return []\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    lst = sort(lst)\n    \n    rows = Vector{Tuple{Int64, Int64}}()\n   \
    \ \n    for row in lst\n        \n        columns = sort(row)\n        \n    \
    \    if columns[end]==x\n            push!(rows, (length(row), length(columns)))\n\
    \        end\n    end\n    \n    sort(rows)\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    cols =\
    \ zeros(Int, length(lst))\n    \n    for row in 1:length(lst)\n        rows =\
    \ rows + lst[row]\n        cols = cols + lst[row, end]\n    end\n    \n    rows\
    \ = sort(rows)\n    cols = sort(cols)\n    \n    coords = zeros(length(rows),\
    \ length(cols))\n    \n    for row in 1:length(rows)\n        for col in 1:length(cols)\n\
    \            if rows == row && cols == col\n                coords[row, col] =\
    \ 1\n            end\n        end\n    end\n    \n    coords = sort(coords, rev=true)\n\
    \    \n    return coords\nend\n</cell>\n<code language=julia-1.5>", "    \n  \
    \  lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    cols = zeros(Int,\
    \ length(lst))\n    \n    for i = 1:length(lst)\n        rows = rows + lst[i][x]\n\
    \        cols = cols + lst[i][end]\n    end\n    \n    rows = sort(rows)\n   \
    \ cols = sort(cols)\n    \n    coords = zeros(Int, length(lst))\n    \n    for\
    \ i = 1:length(lst)\n        coords[i] = (i-1, cols[i])\n    end\n    \n    coords\
    \ = sort(coords)\n    \n    return coords\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    cols =\
    \ zeros(Int, length(lst))\n    \n    for (i,row) in enumerate(lst)\n        rows\
    \ = rows + row\n        cols = cols + 1\n    end\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = reverse(rows)\n    cols = reverse(cols)\n\
    \    \n    rows = rows[cols == x]\n    cols = cols[cols == x]\n    \n    rows\
    \ = reverse(rows)\n    cols = reverse(cols)\n    \n    return zip(rows, cols)\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    rows = sort(collect(1:length(lst)))\n\
    \    cols = sort(collect(1:length(lst[rows])), by=length, reverse=true)\n    \n\
    \    coords = zeros(length(rows), length(cols))\n    \n    for (i,row) in enumerate(rows)\n\
    \        for (c,col) in enumerate(cols)\n            coords[i,c] = Tuple(row,\
    \ col)\n        end\n    end\n    \n    coords = coords[coords[:,1] .== x, :]\n\
    \    \n    return coords\nend\n</cell>\n<code language=julia-1.5>", "    \n  \
    \  lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    cols = zeros(Int,\
    \ length(lst))\n    \n    for i = 1:length(lst)\n        rows = rows + lst[i][x]\n\
    \        cols = cols + lst[i][end]\n    end\n    \n    rows = sort(rows)\n   \
    \ cols = sort(cols)\n    \n    coords = zeros(Int, length(lst))\n    \n    for\
    \ i = 1:length(lst)\n        coords[i] = (i-1, cols[i])\n    end\n    \n    return\
    \ coords\nend\n</cell>\n<code language=julia-1.5>", "    \n    lst = sort(lst)\n\
    \    \n    rows = zeros(Int, length(lst))\n    cols = zeros(Int, length(lst))\n\
    \    \n    for row in 1:length(lst)\n        rows = rows + 1\n        cols[row]\
    \ = length(lst[row])\n    end\n    \n    rows = sort(rows)\n    cols = sort(cols)\n\
    \    \n    coords = zeros(Int, length(lst))\n    \n    for row in 1:length(lst)\n\
    \        coords[row] = ((rows - row(rows)), (cols - row(cols)))\n    end\n   \
    \ \n    coords = sort(coords)\n    \n    coords = coords[coords[:, 1] .<= x]\n\
    \    coords = coords[coords[:, 2] .>= x]\n    \n    return coords\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    rows = sort(collect(enumerate(lst)))\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    \n    rows = sort(rows, by=x->x[2])\n\
    \    \n    return rows\nend\n</cell>\n<code language=julia-1.5>\nget_row([\n \
    \     [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n</cell>\n<text>\nExercise\nWrite a\
    \ function that returns all possible combinations of length n of elements from\
    \ an input vector. For example, given [1, 2, 3], the function should return [[1,\
    \ 1], [1, 2], [1, 3], [2, 1], [2, 2], [2, 3], [3, 1], [3, 2], [3, 3]].", "   \
    \ if length(lst.[1]) == 0 \n        return [] \n    \n    rows = sort(collect(1:length(lst.[1])))\n\
    \    cols = sort(collect(1:length(lst.[1])))\n    \n    rows = sort(rows, by=x->-x)\n\
    \    cols = sort(cols, by=x->-x)\n    \n    coords = zeros(length(rows), length(cols))\n\
    \    \n    for (i,j) in zip(rows, cols) \n        coords[i,j] = (i,j)\n    end\n\
    \    \n    return coords\nend\n</cell>\n<code language=julia-1.5>", "    \n  \
    \  lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    cols = zeros(Int,\
    \ length(lst))\n    \n    for row in 1:length(lst)\n        rows = rows + lst[row]\n\
    \        cols = cols + lst[row, end]\n    end\n    \n    rows = sort(rows)\n \
    \   cols = sort(cols)\n    \n    rows = rows[cols > x]\n    cols = cols[cols >\
    \ x]\n    \n    rows = rows[rows > 0]\n    cols = cols[rows > 0]\n    \n    rows\
    \ = rows[cols > 0]\n    cols = cols[cols > 0]\n    \n    rows = rows[rows > 0]\n\
    \    cols = cols[rows > 0]\n    \n    rows = rows[cols > 0]\n    cols = cols[cols\
    \ > 0]\n    \n    rows = rows[rows > 0]\n    cols = cols[rows > 0]\n    \n   \
    \ rows = rows[cols > 0]\n    cols = cols[cols > 0]\n    \n    rows = rows[rows\
    \ > 0]\n    cols = cols[rows > 0]\n    \n    rows = rows[cols > 0]\n    cols =\
    \ cols[cols > 0]\n    \n    rows = rows[rows > 0]\n    cols = cols[rows > 0]\n\
    \    \n    rows = rows[cols > 0]\n    cols = cols[cols > 0]\n    \n    rows =\
    \ rows[rows > 0]\n    cols = cols[rows > 0]\n    \n    rows = rows[cols > 0]\n\
    \    cols = cols[cols > 0]\n    \n    rows = rows[rows > 0]\n    cols = cols[rows\
    \ > 0]\n    \n    rows = rows[cols > 0]\n    cols = cols[cols > 0]\n    \n   \
    \ rows = rows[rows > 0]\n    cols = cols[rows > 0]\n    \n    rows = rows[cols\
    \ > 0]\n    cols = cols[cols > 0]\n    \n    rows = rows[rows > 0]\n    cols =\
    \ cols[rows > 0]\n    \n    rows = rows[cols > 0]\n    cols = cols[cols > 0]\n\
    \    \n    rows = rows[rows > 0]\n    cols = cols[rows > 0]\n    \n    rows =\
    \ rows[cols > 0]\n    cols = cols[cols > 0]\n    \n    rows = rows[rows > 0]\n\
    \    cols = cols[rows > 0]\n    \n    rows = rows[cols > 0]\n    cols = cols[cols\
    \ > 0]\n    \n    rows = rows[rows > 0]\n    cols = cols[rows > 0]\n    \n   \
    \ rows = rows[cols > 0]\n    col", "    \n    rows = sort(collect(1:length(lst)))\n\
    \    cols = sort(collect(1:length(lst[1])))\n    \n    rows = sort(rows, by=x->-x)\n\
    \    cols = sort(cols, by=x->-x)\n    \n    coords = zeros(length(rows), length(cols))\n\
    \    \n    for (i,row) in enumerate(rows)\n        for (c,col) in enumerate(cols)\n\
    \            coords[i,c] = Tuple(row, col)\n        end\n    end\n    \n    coords\
    \ = sort(coords, by=x->x[1])\n    coords = sort(coords, by=x->x[2])\n    \n  \
    \  return coords\nend\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    rows = sort(collect(enumerate(lst)))\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n\
    \    \n    rows = sort(rows, by=x->x[2])\n    \n    rows = sort(rows, by=x->-x[2])\n\
    \    \n    rows = sort(rows, by=x->x[3])\n    \n    rows = sort(rows, by=x->-x[3])\n\
    \    \n    rows = sort(rows, by=x->x[4])\n    \n    rows = sort(rows, by=x->-x[4])\n\
    \    \n    rows = sort(rows, by=x->x[5])\n    \n    rows = sort(rows, by=x->-x[5])\n\
    \    \n    rows = sort(rows, by=x->x[6])\n    \n    rows = sort(rows, by=x->-x[6])\n\
    \    \n    rows = sort(rows, by=x->x[7])\n    \n    rows = sort(rows, by=x->-x[7])\n\
    \    \n    rows = sort(rows, by=x->x[8])\n    \n    rows = sort(rows, by=x->-x[8])\n\
    \    \n    rows = sort(rows, by=x->x[9])\n    \n    rows = sort(rows, by=x->-x[9])\n\
    \    \n    rows = sort(rows, by=x->x[10])\n    \n    rows = sort(rows, by=x->-x[10])\n\
    \    \n    rows = sort(rows, by=x->x[11])\n    \n    rows = sort(rows, by=x->-x[11])\n\
    \    \n    rows = sort(rows, by=x->x[12])\n    \n    rows = sort(rows, by=x->-x[12])\n\
    \    \n    rows = sort(rows, by=x->x[13])\n    \n    rows = sort(rows, by=x->-x[13])\n\
    \    \n    rows = sort(rows, by=x->x[14])\n    \n    rows = sort(rows, by=x->-x[14])\n\
    \    \n    rows = sort(rows, by=x->x[15])\n    \n    rows = sort(rows, by=x->-x[15])\n\
    \    \n    rows = sort(rows, by=x->x[16])\n    \n    rows = sort(rows, by=x->-x[16])\n\
    \    \n    rows = sort(rows, by=x->x[17])\n    \n    rows = sort(rows, by=x->-x[17])\n\
    \    \n    rows = sort(rows, by=x->x[18])\n    \n    rows = sort(rows, by=x->-x[18])",
  "    \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    \n   \
    \ for i = 1:length(lst)\n        rows = rows + lst[i][x]\n    end\n    \n    rows\
    \ = sort(rows)\n    \n    cols = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n\
    \        cols = cols + lst[i][end]\n    end\n    \n    cols = sort(cols)\n   \
    \ \n    return zip(rows, cols)\nend\n</cell>\n<code language=julia-1.5>\nget_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n</cell>\n<text>\nProblem 3\nWrite\
    \ a function that returns all possible combinations of k elements from n elements.",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    rows = sort(collect(1:length(lst)))\n\
    \    cols = sort(collect(1:length(lst[1])))\n    \n    rows = sort(rows)\n   \
    \ cols = sort(cols)\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n", "    \n    rows = sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[1])))\n\
    \    \n    coords = zeros(length(rows), length(cols))\n    \n    for (i,row) in\
    \ enumerate(rows)\n        for (c,col) in enumerate(cols)\n            if lst[row][c]\
    \ == x\n                coords[i,c] = (c,row)\n            end\n        end\n\
    \    end\n    \n    coords = coords[sortperm(coords[:,1]), :]\n    coords = coords[sortperm(coords[:,2]),\
    \ :]\n    \n    return coords\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    cols =\
    \ zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n        rows = rows\
    \ + lst[i][x]\n        cols = cols + lst[i][end]\n    end\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    coords = zeros(length(rows), length(cols))\n\
    \    \n    for i = 1:length(rows)\n        coords[i, :] = [rows, cols]\n    end\n\
    \    \n    return coords\nend\n</cell>\n<code language=julia-1.5>", "    \n  \
    \  lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    cols = zeros(Int,\
    \ length(lst))\n    \n    for row in 1:length(lst)\n        rows = rows + 1\n\
    \        cols = cols + length(lst[row])\n    end\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    coords = zeros(Int, length(lst))\n    \n   \
    \ for row in 1:length(lst)\n        coords[row] = ((rows - row(rows)), (cols -\
    \ row(cols)))\n    end\n    \n    coords = sort(coords)\n    \n    coords = coords[coords[1,\
    \ 1] <= x]\n    \n    return coords\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rows = sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[[1]])))\n\
    \    \n    coords = Vector{Tuple{Int64, Int64}}[]\n    \n    for row in rows\n\
    \        for col in cols\n            if lst[row][col] == x\n                push!(coords,\
    \ Tuple{row, col})\n            end\n        end\n    end\n    \n    coords =\
    \ sort(coords, by=(x->x[1], x->x[2]))\n    \n    return coords\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    lst = sort(lst)\n    \n    rows = zeros(Int,\
    \ length(lst))\n    \n    for i = 1:length(lst)\n        rows = rows + lst[i][x]\n\
    \    end\n    \n    rows = sort(rows)\n    \n    coords = zeros(Int, length(lst))\n\
    \    \n    for i = 1:length(lst)\n        coords[i] = ((rows[i] - 1), (length(lst[i])\
    \ - 1))\n    end\n    \n    coords = sort(coords)\n    \n    return coords\nend\n\
    </cell>\n<code language=julia-1.5>\nget_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n\
    \      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    </cell>\n<text>\nExercise 2\nWrite a function that finds all the coordinates of\
    \ x in a nested list.\nFor example, get_coords([\n      [1,2,3,4,5,6],\n     \
    \ [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2,\
    \ 5), (2, 0)]\nHint: use get_row and get_col functions to solve this problem.",
  "    \n    rows = sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[rows])),\
    \ by=length, reverse=true)\n    \n    coords = zeros(length(rows), length(cols))\n\
    \    \n    for (i,row) in enumerate(rows)\n        for (c,col) in enumerate(cols)\n\
    \            coords[i,c] = Tuple(row, col)\n        end\n    end\n    \n    coords\
    \ = coords[coords[:,1] .== x,:]\n    \n    coords = coords[coords[:,2] .!= x,:]\n\
    \    \n    coords = coords[coords[:,2] .!= x,:]\n    \n    coords = coords[coords[:,1]\
    \ .!= x,:]\n    \n    coords = coords[coords[:,1] .!= x,:]\n    \n    coords =\
    \ coords[coords[:,2] .!= x,:]\n    \n    coords = coords[coords[:,2] .!= x,:]\n\
    \    \n    coords = coords[coords[:,1] .!= x,:]\n    \n    coords = coords[coords[:,2]\
    \ .!= x,:]\n    \n    coords = coords[coords[:,2] .!= x,:]\n    \n    coords =\
    \ coords[coords[:,1] .!= x,:]\n    \n    coords = coords[coords[:,2] .!= x,:]\n\
    \    \n    coords = coords[coords[:,2] .!= x,:]\n    \n    coords = coords[coords[:,1]\
    \ .!= x,:]\n    \n    coords = coords[coords[:,2] .!= x,:]\n    \n    coords =\
    \ coords[coords[:,2] .!= x,:]\n    \n    coords = coords[coords[:,1] .!= x,:]\n\
    \    \n    coords = coords[coords[:,2] .!= x,:]\n    \n    coords = coords[coords[:,2]\
    \ .!= x,:]\n    \n    coords = coords[coords[:,1] .!= x,:]\n    \n    coords =\
    \ coords[coords[:,2] .!= x,:]\n    \n    coords = coords[coords[:,2] .!= x,:]\n\
    \    \n    coords = coords[coords[:,1] .!= x,:]\n    \n    coords = coords[coords[:,2]\
    \ .!= x,:]\n    \n    coords = coords[coords[:,2] .!= x,:]\n    \n    coords =\
    \ coords[coords[:,1] .!= x,:]\n    \n    coords = coords[coords[:,2] .!= x,:]\n\
    \    \n    coords = coords[coords[:,2] .!= x,:]\n    \n    coords = coords[coords[:,1]\
    \ .!= x,:]\n    \n    ", "    \n    lst = sort(lst)\n    \n    rows = zeros(Int,\
    \ length(lst))\n    cols = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n\
    \        rows = rows + lst[i][x]\n        cols = cols + lst[i][end]\n    end\n\
    \    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    coords = zeros(length(rows),\
    \ length(cols))\n    \n    for i = 1:length(rows)\n        coords[i, :] = [rows,\
    \ cols]\n    end\n    \n    return coords\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(lst.[1]) == 0 \n        return [] \n    end\n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
  "    if lst == []\n        []\n    elseif x == 0\n        (0, 0)\n    else\n   \
    \     (x, y) = get_row(lst[x - 1], lst[x - 1][end])\n        (x, y) = (lst[x -\
    \ 1][end], lst[x - 1][end])\n        (x, y) = (lst[x - 1][end], lst[x - 1][end])\n\
    \        (x, y) = (lst[x - 1][end], lst[x - 1][end])\n        (x, y) = (lst[x\
    \ - 1][end], lst[x - 1][end])\n        (x, y) = (lst[x - 1][end], lst[x - 1][end])\n\
    \        (x, y) = (lst[x - 1][end], lst[x - 1][end])\n        (x, y) = (lst[x\
    \ - 1][end], lst[x - 1][end])\n        (x, y) = (lst[x - 1][end], lst[x - 1][end])\n\
    \        (x, y) = (lst[x - 1][end], lst[x - 1][end])\n        (x, y) = (lst[x\
    \ - 1][end], lst[x - 1][end])\n        (x, y) = (lst[x - 1][end], lst[x - 1][end])\n\
    \        (x, y) = (lst[x - 1][end], lst[x - 1][end])\n        (x, y) = (lst[x\
    \ - 1][end], lst[x - 1][end])\n        (x, y) = (lst[x - 1][end], lst[x - 1][end])\n\
    \        (x, y) = (lst[x - 1][end], lst[x - 1][end])\n        (x, y) = (lst[x\
    \ - 1][end], lst[x - 1][end])\n        (x, y) = (lst[x - 1][end], lst[x - 1][end])\n\
    \        (x, y) = (lst[x - 1][end], lst[x - 1][end])\n        (x, y) = (lst[x\
    \ - 1][end], lst[x - 1][end])\n        (x, y) = (lst[x - 1][end], lst[x - 1][end])\n\
    \        (x, y) = (lst[x - 1][end], lst[x - 1][end])\n        (x, y) = (lst[x\
    \ - 1][end], lst[x - 1][end])\n        (x, y) = (lst[x - 1][end], lst[x - 1][end])\n\
    \        (x, y) = (lst[x - 1][end], lst[x - 1][end])\n        (x, y) = (lst[x\
    \ - 1][end], lst[x - 1][end])\n        (x, y) = (lst[x - 1][end], lst[x - 1][end])\n\
    \        (x, y) = (lst[x - 1][end", "    \n    lst = sort(lst)\n    \n    rows\
    \ = zeros(Int, length(lst))\n    cols = zeros(Int, length(lst))\n    \n    for\
    \ (i,row) in enumerate(lst)\n        rows = rows + row\n        cols = cols +\
    \ 1\n    end\n    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    coords\
    \ = zeros(Int, length(lst))\n    \n    for (i,row) in enumerate(lst)\n       \
    \ coords[i] = findfirst(x->x==row, rows)\n    end\n    \n    coords = sort(coords)\n\
    \    \n    coords = reverse(coords)\n    \n    return coords\nend\n</cell>\n<code\
    \ language=julia-1.4>", "    \n    lst = sort(lst)\n    \n    rows = zeros(Int,\
    \ length(lst))\n    \n    for i = 1:length(lst)\n        rows = rows + lst[i][x]\n\
    \    end\n    \n    rows = sort(rows)\n    \n    coords = zeros(Int, length(lst))\n\
    \    \n    for i = 1:length(lst)\n        coords[i] = rows[i], lst[i][x]\n   \
    \ end\n    \n    coords = sort(coords)\n    \n    return coords\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    lst = sort(lst)\n    \n    rows = zeros(Int,\
    \ length(lst))\n    cols = zeros(Int, length(lst))\n    \n    for (i,row) in enumerate(lst)\n\
    \        rows = rows + row\n        cols = cols + 1\n    end\n    \n    rows =\
    \ sort(rows)\n    cols = sort(cols)\n    \n    coords = zeros(Int, length(lst))\n\
    \    \n    for (i,row) in enumerate(lst)\n        coords[i] = findfirst(x->x==row,\
    \ rows)\n    end\n    \n    coords = sort(coords)\n    \n    coords = coords[2:end]\n\
    \    \n    coords = reverse(coords)\n    \n    coords = coords[2:end]\n    \n\
    \    return coords\nend\n</cell>\n<code language=julia-1.5>", "    \n    lst =\
    \ sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    cols = zeros(Int, length(lst))\n\
    \    \n    for i = 1:length(lst)\n        rows = rows + lst[i][x]\n        cols\
    \ = cols + lst[i][end]\n    end\n    \n    rows = sort(rows)\n    cols = sort(cols)\n\
    \    \n    return zip(rows, cols)\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    cols\
    \ = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n        rows = rows\
    \ + lst[i][x]\n        cols = cols + lst[i][end]\n    end\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    coords = zeros(length(rows), length(cols))\n\
    \    \n    for i = 1:length(rows)\n        coords[i, :] = [rows, cols]\n    end\n\
    \    \n    return coords\nend\n</cell>\n<code language=julia-1.5>", "    \n  \
    \  lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    cols = zeros(Int,\
    \ length(lst))\n    \n    for i = 1:length(lst)\n        rows = rows + lst[i]\n\
    \        cols = cols + 1\n    end\n    \n    rows = sort(rows)\n    cols = sort(cols)\n\
    \    \n    coords = zeros(length(rows), length(cols))\n    \n    for i = 1:length(rows)\n\
    \        coords[i, :] = [rows, cols]\n    end\n    \n    coords = sort(coords)\n\
    \    \n    coords = coords[2:end-1, 2:end-1]\n    \n    coords = coords[coords[1,\
    \ 1] == x, :]\n    \n    return coords\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    rows = sort(collect(1:length(lst)))\n\
    \    cols = sort(collect(1:length(lst[[1]])))\n    \n    rows = sort(rows)\n \
    \   cols = sort(cols)\n    \n    coords = zeros(length(rows), length(cols))\n\
    \    \n    for (i,row) in enumerate(rows)\n        for j, (col) in enumerate(cols)\n\
    \            if lst[row][col] == x\n                coords[i][j] = (i,j)\n   \
    \         end\n        end\n    end\n    \n    coords = sort(coords, by=x->x[1],\
    \ rev=true)\n    \n    return coords\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    \n   \
    \ for (i,row) in enumerate(lst)\n        rows[i] = row\n    end\n    \n    rows\
    \ = sort(rows)\n    \n    columns = zeros(Int, length(lst))\n    \n    for (i,col)\
    \ in enumerate(reverse(rows))\n        columns[i] = col\n    end\n    \n    columns\
    \ = sort(columns)\n    \n    coords = zeros(Int, length(lst))\n    \n    for (i,coord)\
    \ in enumerate(zip(rows, columns))\n        coords[i] = coord\n    end\n    \n\
    \    coords = sort(coords)\n    \n    coords = coords[coords[:,1] .<= x]\n   \
    \ \n    return coords\nend\n</cell>\n<code language=julia-1.5>", "    \n    rows\
    \ = sort(collect(enumerate(lst)))\n    \n    rows = sort(rows, by=x->x[1])\n \
    \   \n    rows = sort(rows, by=x->-x[1])\n    \n    rows = sort(rows, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->-x[2])\n    \n    rows = sort(rows, by=x->x[3])\n\
    \    \n    rows = sort(rows, by=x->-x[3])\n    \n    rows = sort(rows, by=x->x[4])\n\
    \    \n    rows = sort(rows, by=x->-x[4])\n    \n    rows = sort(rows, by=x->x[5])\n\
    \    \n    rows = sort(rows, by=x->-x[5])\n    \n    rows = sort(rows, by=x->x[6])\n\
    \    \n    rows = sort(rows, by=x->-x[6])\n    \n    rows = sort(rows, by=x->x[7])\n\
    \    \n    rows = sort(rows, by=x->-x[7])\n    \n    rows = sort(rows, by=x->x[8])\n\
    \    \n    rows = sort(rows, by=x->-x[8])\n    \n    rows = sort(rows, by=x->x[9])\n\
    \    \n    rows = sort(rows, by=x->-x[9])\n    \n    rows = sort(rows, by=x->x[10])\n\
    \    \n    rows = sort(rows, by=x->-x[10])\n    \n    rows = sort(rows, by=x->x[11])\n\
    \    \n    rows = sort(rows, by=x->-x[11])\n    \n    rows = sort(rows, by=x->x[12])\n\
    \    \n    rows = sort(rows, by=x->-x[12])\n    \n    rows = sort(rows, by=x->x[13])\n\
    \    \n    rows = sort(rows, by=x->-x[13])\n    \n    rows = sort(rows, by=x->x[14])\n\
    \    \n    rows = sort(rows, by=x->-x[14])\n    \n    rows = sort(rows, by=x->x[15])\n\
    \    \n    rows = sort(rows, by=x->-x[15])\n    \n    rows = sort(rows, by=x->x[16])\n\
    \    \n    rows = sort(rows, by=x->-x[16])\n    \n    rows = sort(rows, by=x->x[17])\n\
    \    \n    rows = sort(rows, by=x->-x[17])\n    \n    rows = sort(rows, by=x->x[18])\n\
    \    \n    rows = sort(rows, by=x->-x[18])", "    \n    rows = sort(collect(1:length(lst)))\n\
    \    cols = sort(collect(1:length(lst[[1]])))\n    \n    rows = sort(rows)\n \
    \   cols = sort(cols)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    lst = sort(lst)\n\
    \    \n    rows = zeros(Int, length(lst))\n    cols = zeros(Int, length(lst))\n\
    \    \n    for i = 1:length(lst)\n        rows = rows + lst[i][x]\n        cols\
    \ = cols + lst[i][end]\n    end\n    \n    return [(rows[i], cols[i]) for i in\
    \ 1:length(lst)]\nend\n</cell>\n<code language=julia-1.5>", "    \n    lst = sort(lst)\n\
    \    \n    rows = zeros(Int, length(lst))\n    cols = zeros(Int, length(lst))\n\
    \    \n    for (i,row) in enumerate(lst)\n        \n        rows = rows + row\n\
    \        cols = cols + 1\n        \n        if rows == x\n            \n     \
    \       coords = Tuple{Int64, Int64}(i, cols-1)\n            \n            return\
    \ [(coords, coords)]\n        end\n    end\n    \n    return []\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    lst = sort(lst)\n    \n    rows = zeros(Int,\
    \ length(lst))\n    \n    for row in 1:length(lst)\n        rows = rows + 1\n\
    \        \n        cols = zeros(Int, length(lst[row]))\n        \n        for\
    \ col in 1:length(lst[row])\n            cols = cols + 1\n            \n     \
    \       if lst[row][col] == x\n                \n                tup = Tuple{Int64,\
    \ Int64}((row, cols))\n                \n                if tup < lst[end]\n \
    \                   lst[end] = tup\n                end\n                \n  \
    \              if tup > lst[end]\n                    lst[end] = tup\n       \
    \         end\n                \n            end\n        end\n    end\n    \n\
    \    return lst\nend\n</cell>\n<code language=julia-1.5>", "    \n    lst = sort(lst)\n\
    \    \n    rows = zeros(Int, length(lst))\n    cols = zeros(Int, length(lst))\n\
    \    \n    for row in 1:length(lst)\n        rows = rows + 1\n        cols[row]\
    \ = length(lst[row])\n    end\n    \n    rows = sort(rows)\n    cols = sort(cols)\n\
    \    \n    coords = zeros(Int, length(lst))\n    \n    for row in 1:length(lst)\n\
    \        coords[row] = ((rows - 1) - row) * length(lst[row]) + cols[row]\n   \
    \ end\n    \n    coords = sort(coords)\n    \n    coords = coords[coords <= length(lst,\
    \ 1)]\n    \n    coords = coords[coords <= x]\n    \n    coords = coords[coords\
    \ > 0]\n    \n    return coords\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    rows = sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[rows])),\
    \ by=x->-x)\n    \n    coords = zeros(length(rows), length(cols))\n    \n    for\
    \ row in rows\n        for col in cols\n            coords[row, col] = ((row,\
    \ col), lst[row][col])\n        end\n    end\n    \n    return coords\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    rows = sort(collect(1:length(lst)))\n \
    \   cols = sort(collect(1:length(lst[[1]])))\n    \n    coords = zeros(length(rows),\
    \ length(cols))\n    \n    for (i,j) in zip(rows, cols)\n        coords[i,j] =\
    \ (i,j)\n    end\n    \n    coords = sort(coords, by=x->x[1], rev=true)\n    coords\
    \ = sort(coords, by=x->x[2], rev=true)\n    \n    return coords\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n\
    \    cols = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n       \
    \ rows = rows + lst[i][x]\n        cols = cols + lst[i][end]\n    end\n    \n\
    \    rows = sort(rows)\n    cols = sort(cols)\n    \n    return zip(rows, cols)\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    rows = sort(collect(1:length(lst)))\n    cols\
    \ = sort(collect(1:length(lst[1])))\n    \n    coords = zeros(Int, length(rows),\
    \ length(cols))\n    \n    for row in rows\n        for col in cols\n        \
    \    coords[row, col] = findfirst(x->x == lst[row][col], x)\n        end\n   \
    \ end\n    \n    coords = coords[sortperm(coords[:, cols]), :]\n    coords = coords[:,\
    \ sortperm(coords[:, rows])]\n    \n    return coords\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    lst = sort(lst)\n\
    \    \n    rows = zeros(Int, length(lst))\n    cols = zeros(Int, length(lst))\n\
    \    \n    for i = 1:length(lst)\n        rows = rows + lst[i][x]\n        cols\
    \ = cols + lst[i][end-x+1:end]\n    end\n    \n    rows = sort(rows)\n    cols\
    \ = sort(cols)\n    \n    coords = zeros(length(rows), length(cols))\n    \n \
    \   for i = 1:length(rows)\n        coords[i, :] = [rows, cols]\n    end\n   \
    \ \n    coords = sort(coords)\n    \n    return coords\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    cols =\
    \ zeros(Int, length(lst))\n    \n    for (i,row) in enumerate(lst)\n        rows\
    \ = rows + row\n        cols = cols + 1\n    end\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n",
  "    \n    rows = sort(collect(1:length(lst)))\n    \n    rows = sort(rows, by=x->-x)\n\
    \    \n    columns = sort(collect(1:length(lst)), by=x->-x)\n    \n    columns\
    \ = sort(columns, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n    \n   \
    \ columns = sort(columns, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n \
    \   \n    columns = sort(columns, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n\
    \    \n    columns = sort(columns, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n\
    \    \n    columns = sort(columns, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n\
    \    \n    columns = sort(columns, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n\
    \    \n    columns = sort(columns, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n\
    \    \n    columns = sort(columns, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n\
    \    \n    columns = sort(columns, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n\
    \    \n    columns = sort(columns, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n\
    \    \n    columns = sort(columns, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n\
    \    \n    columns = sort(columns, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n\
    \    \n    columns = sort(columns, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n\
    \    \n    columns = sort(columns, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n\
    \    \n    columns = sort(columns, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n\
    \    \n    columns = sort(columns, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n\
    \    \n    columns = sort(columns, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n\
    \    \n    columns = sort(columns, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n\
    \    ", "    \n    rows = sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[rows])),\
    \ by=length, reverse=true)\n    \n    coords = zeros(length(rows), length(cols))\n\
    \    \n    for (i,row) in enumerate(rows)\n        for j, (col) in enumerate(cols)\n\
    \            if lst[row][col] == x\n                coords[i][j] = Tuple(row,\
    \ col)\n            end\n        end\n    end\n    \n    coords = sort(coords,\
    \ by=coords)\n    \n    return coords\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    cols =\
    \ zeros(Int, length(lst))\n    \n    for (i,row) in enumerate(lst)\n        rows\
    \ = rows + row\n        cols = cols + 1\n    end\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n\
    \    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n\
    \    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n\
    \    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n\
    \    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n\
    \    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n\
    \    col", "    \n    rows = sort(collect(enumerate(lst)))\n    \n    rows = sort(rows,\
    \ by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n    \n    rows = sort(rows,\
    \ by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n    \n    rows = sort(rows,\
    \ by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n    \n    rows = sort(rows,\
    \ by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n    \n    rows = sort(rows,\
    \ by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n    \n    rows = sort(rows,\
    \ by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n    \n    rows = sort(rows,\
    \ by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n    \n    rows = sort(rows,\
    \ by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n    \n    rows = sort(rows,\
    \ by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n    \n    rows = sort(rows,\
    \ by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n    \n    rows = sort(rows,\
    \ by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n    \n    rows = sort(rows,\
    \ by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n    \n    rows = sort(rows,\
    \ by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n    \n    rows = sort(rows,\
    \ by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n    \n    rows = sort(rows,\
    \ by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n    \n    rows = sort(rows,\
    \ by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n    \n    rows = sort(rows,\
    \ by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n    \n    rows = sort(rows,\
    \ by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n    \n    rows = sort(rows,\
    \ by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n    \n    rows = sort(rows,\
    \ by", "    \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n\
    \    cols = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n       \
    \ rows = rows + lst[i][x]\n        cols = cols + lst[i][end]\n    end\n    \n\
    \    return [(rows, cols)]\nend\n</cell>\n<code language=julia-1.5>", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    lst = sort(lst)\n\
    \    \n    rows = zeros(Int, length(lst))\n    \n    for row in 1:length(lst)\n\
    \        \n        rows = rows + 1\n        \n        lst = sort(lst[row])\n \
    \       \n        columns = zeros(Int, length(lst))\n        \n        for col\
    \ in 1:length(lst)\n            \n            columns = columns + 1\n        \
    \    \n            if lst[col] == x\n                \n                tup = Tuple{Int64,\
    \ Int64}((row, columns))\n                \n                push!(reverse(tup),\
    \ tup)\n                \n            end\n            \n        end\n       \
    \ \n    end\n    \n    return rows\nend\n</cell>\n<code language=julia-1.4>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    rows = sort(collect(enumerate(lst)))\n\
    \    \n    rows = rows[rows[2] .< x] \n    \n    rows = rows[rows[1] .< x] \n\
    \    \n    rows = rows[rows[1] .< x] \n    \n    rows = rows[rows[1] .< x] \n\
    \    \n    rows = rows[rows[1] .< x] \n    \n    rows = rows[rows[1] .< x] \n\
    \    \n    rows = rows[rows[1] .< x] \n    \n    rows = rows[rows[1] .< x] \n\
    \    \n    rows = rows[rows[1] .< x] \n    \n    rows = rows[rows[1] .< x] \n\
    \    \n    rows = rows[rows[1] .< x] \n    \n    rows = rows[rows[1] .< x] \n\
    \    \n    rows = rows[rows[1] .< x] \n    \n    rows = rows[rows[1] .< x] \n\
    \    \n    rows = rows[rows[1] .< x] \n    \n    rows = rows[rows[1] .< x] \n\
    \    \n    rows = rows[rows[1] .< x] \n    \n    rows = rows[rows[1] .< x] \n\
    \    \n    rows = rows[rows[1] .< x] \n    \n    rows = rows[rows[1] .< x] \n\
    \    \n    rows = rows[rows[1] .< x] \n    \n    rows = rows[rows[1] .< x] \n\
    \    \n    rows = rows[rows[1] .< x] \n    \n    rows = rows[rows[1] .< x] \n\
    \    \n    rows = rows[rows[1] .< x] \n    \n    rows = rows[rows[1] .< x] \n\
    \    \n    rows = rows[rows[1] .< x] \n    \n    rows = rows[rows[1] .< x] \n\
    \    \n    rows = rows[rows[1] .< x] \n    \n    rows = rows[rows[1] .< x] \n\
    \    \n    rows = rows[rows[1] .< x] \n    \n    rows = rows[rows[1] .< x] \n\
    \    \n    rows = rows[rows[1] .< x] \n    \n    rows = rows[rows[1] .< x] \n\
    \    \n    rows = rows[rows[1] .< x] \n    \n    rows = rows[rows[1] .< x] \n\
    \    \n    rows = rows[rows[1] .< x] \n    \n    rows = rows[rows[1] .< x] \n\
    \    \n    rows = rows[", "    \n    rows = sort(collect(1:length(lst)))\n   \
    \ cols = sort(collect(1:length(lst[1])))\n    \n    rows = sort(rows)\n    cols\
    \ = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n   \
    \ rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols\
    \ = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n   \
    \ rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols\
    \ = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n   \
    \ rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols\
    \ = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n   \
    \ rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols\
    \ = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n   \
    \ rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols\
    \ = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n   \
    \ rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols\
    \ = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n   \
    \ rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols\
    \ = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n   \
    \ rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols\
    \ = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n   \
    \ rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols\
    \ = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n   \
    \ rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols\
    \ = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n   \
    \ rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols\
    \ = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n   \
    \ rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols\
    \ = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n   \
    \ rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols\
    \ = sort(cols)\n    \n    rows = sort(rows)\n    cols = ", "    \n    rows = sort(collect(enumerate(lst)))\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n\
    \    \n    rows = sort(rows, by=x->x[2])\n    \n    rows = sort(rows, by=x->-x[2])\n\
    \    \n    rows = sort(rows, by=x->x[3])\n    \n    rows = sort(rows, by=x->-x[3])\n\
    \    \n    rows = sort(rows, by=x->x[4])\n    \n    rows = sort(rows, by=x->-x[4])\n\
    \    \n    rows = sort(rows, by=x->x[5])\n    \n    rows = sort(rows, by=x->-x[5])\n\
    \    \n    rows = sort(rows, by=x->x[6])\n    \n    rows = sort(rows, by=x->-x[6])\n\
    \    \n    rows = sort(rows, by=x->x[7])\n    \n    rows = sort(rows, by=x->-x[7])\n\
    \    \n    rows = sort(rows, by=x->x[8])\n    \n    rows = sort(rows, by=x->-x[8])\n\
    \    \n    rows = sort(rows, by=x->x[9])\n    \n    rows = sort(rows, by=x->-x[9])\n\
    \    \n    rows = sort(rows, by=x->x[10])\n    \n    rows = sort(rows, by=x->-x[10])\n\
    \    \n    rows = sort(rows, by=x->x[11])\n    \n    rows = sort(rows, by=x->-x[11])\n\
    \    \n    rows = sort(rows, by=x->x[12])\n    \n    rows = sort(rows, by=x->-x[12])\n\
    \    \n    rows = sort(rows, by=x->x[13])\n    \n    rows = sort(rows, by=x->-x[13])\n\
    \    \n    rows = sort(rows, by=x->x[14])\n    \n    rows = sort(rows, by=x->-x[14])\n\
    \    \n    rows = sort(rows, by=x->x[15])\n    \n    rows = sort(rows, by=x->-x[15])\n\
    \    \n    rows = sort(rows, by=x->x[16])\n    \n    rows = sort(rows, by=x->-x[16])\n\
    \    \n    rows = sort(rows, by=x->x[17])\n    \n    rows = sort(rows, by=x->-x[17])\n\
    \    \n    rows = sort(rows, by=x->x[18])\n    \n    rows = sort(rows, by=x->-x[18])",
  "    \n    rows = sort(collect(enumerate(lst)))\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    \n    rows = sort(rows, by=x->-x[1])\n    \n    rows = sort(rows, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->-x[2])\n    \n    rows = sort(rows, by=x->x[3])\n\
    \    \n    rows = sort(rows, by=x->-x[3])\n    \n    rows = sort(rows, by=x->x[4])\n\
    \    \n    rows = sort(rows, by=x->-x[4])\n    \n    rows = sort(rows, by=x->x[5])\n\
    \    \n    rows = sort(rows, by=x->-x[5])\n    \n    rows = sort(rows, by=x->x[6])\n\
    \    \n    rows = sort(rows, by=x->-x[6])\n    \n    rows = sort(rows, by=x->x[7])\n\
    \    \n    rows = sort(rows, by=x->-x[7])\n    \n    rows = sort(rows, by=x->x[8])\n\
    \    \n    rows = sort(rows, by=x->-x[8])\n    \n    rows = sort(rows, by=x->x[9])\n\
    \    \n    rows = sort(rows, by=x->-x[9])\n    \n    rows = sort(rows, by=x->x[10])\n\
    \    \n    rows = sort(rows, by=x->-x[10])\n    \n    rows = sort(rows, by=x->x[11])\n\
    \    \n    rows = sort(rows, by=x->-x[11])\n    \n    rows = sort(rows, by=x->x[12])\n\
    \    \n    rows = sort(rows, by=x->-x[12])\n    \n    rows = sort(rows, by=x->x[13])\n\
    \    \n    rows = sort(rows, by=x->-x[13])\n    \n    rows = sort(rows, by=x->x[14])\n\
    \    \n    rows = sort(rows, by=x->-x[14])\n    \n    rows = sort(rows, by=x->x[15])\n\
    \    \n    rows = sort(rows, by=x->-x[15])\n    \n    rows = sort(rows, by=x->x[16])\n\
    \    \n    rows = sort(rows, by=x->-x[16])\n    \n    rows = sort(rows, by=x->x[17])\n\
    \    \n    rows = sort(rows, by=x->-x[17])\n    \n    rows = sort(rows, by=x->x[18])\n\
    \    \n    rows = sort(rows, by=x->-x[18])", "    \n    lst = sort(lst)\n    \n\
    \    rows = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n       \
    \ rows = rows + lst[i][x]\n    end\n    \n    rows = sort(rows)\n    \n    columns\
    \ = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n        columns\
    \ = columns + lst[i][end]\n    end\n    \n    columns = sort(columns)\n    \n\
    \    return zip(rows, columns)\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    cols =\
    \ zeros(Int, length(lst))\n    \n    for (i,row) in enumerate(lst)\n        \n\
    \        rows = rows + 1\n        cols = cols + length(row)\n        \n      \
    \  for j in 1:length(row)\n            if row[j] == x\n                \n    \
    \            tup = Tuple(rows[i], cols[j])\n                \n               \
    \ push!(tups, tup)\n                \n            end\n        end\n    end\n\
    \    \n    sort(tups, rev=true)\n    \nend\n</cell>\n<code language=julia-1.4>",
  "    \n    rows = sort(collect(enumerate(lst)))\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    \n    rows = sort(rows, by=x->-x[1])\n    \n    rows = sort(rows, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->-x[2])\n    \n    rows = sort(rows, by=x->x[3])\n\
    \    \n    rows = sort(rows, by=x->-x[3])\n    \n    rows = sort(rows, by=x->x[4])\n\
    \    \n    rows = sort(rows, by=x->-x[4])\n    \n    rows = sort(rows, by=x->x[5])\n\
    \    \n    rows = sort(rows, by=x->-x[5])\n    \n    rows = sort(rows, by=x->x[6])\n\
    \    \n    rows = sort(rows, by=x->-x[6])\n    \n    rows = sort(rows, by=x->x[7])\n\
    \    \n    rows = sort(rows, by=x->-x[7])\n    \n    rows = sort(rows, by=x->x[8])\n\
    \    \n    rows = sort(rows, by=x->-x[8])\n    \n    rows = sort(rows, by=x->x[9])\n\
    \    \n    rows = sort(rows, by=x->-x[9])\n    \n    rows = sort(rows, by=x->x[10])\n\
    \    \n    rows = sort(rows, by=x->-x[10])\n    \n    rows = sort(rows, by=x->x[11])\n\
    \    \n    rows = sort(rows, by=x->-x[11])\n    \n    rows = sort(rows, by=x->x[12])\n\
    \    \n    rows = sort(rows, by=x->-x[12])\n    \n    rows = sort(rows, by=x->x[13])\n\
    \    \n    rows = sort(rows, by=x->-x[13])\n    \n    rows = sort(rows, by=x->x[14])\n\
    \    \n    rows = sort(rows, by=x->-x[14])\n    \n    rows = sort(rows, by=x->x[15])\n\
    \    \n    rows = sort(rows, by=x->-x[15])\n    \n    rows = sort(rows, by=x->x[16])\n\
    \    \n    rows = sort(rows, by=x->-x[16])\n    \n    rows = sort(rows, by=x->x[17])\n\
    \    \n    rows = sort(rows, by=x->-x[17])\n    \n    rows = sort(rows, by=x->x[18])\n\
    \    \n    rows = sort(rows, by=x->-x[18])", "    \n    rows = sort(collect(1:length(lst)))\n\
    \    cols = sort(collect(1:length(lst[[1]])))\n    \n    coords = Vector{Tuple{Int64,\
    \ Int64}}[]\n    \n    for row in rows\n        coords = coords + [(row, cols[cols..end])]\n\
    \    end\n    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords.", "    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    rows = sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[1])))\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[1])\n\
    \    \n    coords = zeros(length(rows), length(cols))\n    \n    for (i,row) in\
    \ enumerate(rows)\n        coords[i,:] = [row, cols]\n    end\n    \n    coords\
    \ = sort(coords, by=x->x[2])\n    \n    coords = coords[end:-1:1]\n    \n    return\
    \ coords\nend\n</cell>\n<code language=julia-1.5>", "    \n    rows = sort(collect(1:length(lst)))\n\
    \    cols = sort(collect(1:length(lst[1,:])))\n    \n    rows = sort(rows)\n \
    \   cols = sort(cols)\n    \n    rows = rows[cols == x]\n    cols = cols[rows\
    \ == x]\n    \n    rows = rows[rows > 0]\n    cols = cols[rows > 0]\n    \n  \
    \  rows = rows[cols > 0]\n    cols = cols[cols > 0]\n    \n    rows = rows[rows\
    \ > 0]\n    cols = cols[cols > 0]\n    \n    rows = rows[rows > 0]\n    cols =\
    \ cols[cols > 0]\n    \n    rows = rows[rows > 0]\n    cols = cols[cols > 0]\n\
    \    \n    rows = rows[rows > 0]\n    cols = cols[cols > 0]\n    \n    rows =\
    \ rows[rows > 0]\n    cols = cols[cols > 0]\n    \n    rows = rows[rows > 0]\n\
    \    cols = cols[cols > 0]\n    \n    rows = rows[rows > 0]\n    cols = cols[cols\
    \ > 0]\n    \n    rows = rows[rows > 0]\n    cols = cols[cols > 0]\n    \n   \
    \ rows = rows[rows > 0]\n    cols = cols[cols > 0]\n    \n    rows = rows[rows\
    \ > 0]\n    cols = cols[cols > 0]\n    \n    rows = rows[rows > 0]\n    cols =\
    \ cols[cols > 0]\n    \n    rows = rows[rows > 0]\n    cols = cols[cols > 0]\n\
    \    \n    rows = rows[rows > 0]\n    cols = cols[cols > 0]\n    \n    rows =\
    \ rows[rows > 0]\n    cols = cols[cols > 0]\n    \n    rows = rows[rows > 0]\n\
    \    cols = cols[cols > 0]\n    \n    rows = rows[rows > 0]\n    cols = cols[cols\
    \ > 0]\n    \n    rows = rows[rows > 0]\n    cols = cols[cols > 0]\n    \n   \
    \ rows = rows[rows > 0]\n    cols = cols[cols > 0]\n    \n    rows = rows[rows\
    \ > 0]\n    cols = cols[cols > 0]\n    \n    rows = rows[rows > 0]\n    cols =\
    \ cols[cols > 0]\n    \n    rows = rows[rows > 0]\n    cols = cols[cols > 0]\n\
    \    \n    rows = rows[rows > 0]\n    cols = cols[cols > 0]\n    \n    rows =\
    \ rows[rows > 0]\n    cols = cols[cols > 0]\n    \n    rows = rows[rows > ", " \
    \   \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    \n  \
    \  for i = 1:length(lst)\n        rows = rows + lst[i][x]\n    end\n    \n   \
    \ rows = sort(rows)\n    \n    columns = zeros(Int, length(lst))\n    \n    for\
    \ i = 1:length(lst)\n        columns = columns + lst[i][end]\n    end\n    \n\
    \    columns = sort(columns)\n    \n    coords = zeros(Int, length(lst))\n   \
    \ \n    for i = 1:length(lst)\n        coords[i] = (i-1, columns[i])\n    end\n\
    \    \n    coords = sort(coords)\n    \n    return coords\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if lst == []\n        []\n    elseif x == 0\n   \
    \     (0, 0)\n    else\n        (x, y) = get_row(lst[x - 1], lst[x - 1][end])\n\
    \        (x, y) = (lst[x - 1][end], lst[x - 1][end])\n        (x, y) = (lst[x\
    \ - 1][end], lst[x - 1][end])\n        (x, y) = (lst[x - 1][end], lst[x - 1][end])\n\
    \        (x, y) = (lst[x - 1][end], lst[x - 1][end])\n        (x, y) = (lst[x\
    \ - 1][end], lst[x - 1][end])\n        (x, y) = (lst[x - 1][end], lst[x - 1][end])\n\
    \        (x, y) = (lst[x - 1][end], lst[x - 1][end])\n        (x, y) = (lst[x\
    \ - 1][end], lst[x - 1][end])\n        (x, y) = (lst[x - 1][end], lst[x - 1][end])\n\
    \        (x, y) = (lst[x - 1][end], lst[x - 1][end])\n        (x, y) = (lst[x\
    \ - 1][end], lst[x - 1][end])\n        (x, y) = (lst[x - 1][end], lst[x - 1][end])\n\
    \        (x, y) = (lst[x - 1][end], lst[x - 1][end])\n        (x, y) = (lst[x\
    \ - 1][end], lst[x - 1][end])\n        (x, y) = (lst[x - 1][end], lst[x - 1][end])\n\
    \        (x, y) = (lst[x - 1][end], lst[x - 1][end])\n        (x, y) = (lst[x\
    \ - 1][end], lst[x - 1][end])\n        (x, y) = (lst[x - 1][end], lst[x - 1][end])\n\
    \        (x, y) = (lst[x - 1][end], lst[x - 1][end])\n        (x, y) = (lst[x\
    \ - 1][end], lst[x - 1][end])\n        (x, y) = (lst[x - 1][end], lst[x - 1][end])\n\
    \        (x, y) = (lst[x - 1][end], lst[x - 1][end])\n        (x, y) = (lst[x\
    \ - 1][end], lst[x - 1][end])\n        (x, y) = (lst[x - 1][end], lst[x - 1][end])\n\
    \        (x, y) = (lst[x - 1][end], lst[x - 1][end])\n        (x, y) = (lst[x\
    \ - 1][end], lst[x - 1][end])\n        (x, y) = (lst[x - 1][end", "    \n    rows\
    \ = sort(collect(enumerate(lst)))\n    \n    rows = sort(rows, by=x->x[1])\n \
    \   \n    rows = sort(rows, by=x->-x[1])\n    \n    rows = sort(rows, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->-x[2])\n    \n    rows = sort(rows, by=x->x[3])\n\
    \    \n    rows = sort(rows, by=x->-x[3])\n    \n    rows = sort(rows, by=x->x[4])\n\
    \    \n    rows = sort(rows, by=x->-x[4])\n    \n    rows = sort(rows, by=x->x[5])\n\
    \    \n    rows = sort(rows, by=x->-x[5])\n    \n    rows = sort(rows, by=x->x[6])\n\
    \    \n    rows = sort(rows, by=x->-x[6])\n    \n    rows = sort(rows, by=x->x[7])\n\
    \    \n    rows = sort(rows, by=x->-x[7])\n    \n    rows = sort(rows, by=x->x[8])\n\
    \    \n    rows = sort(rows, by=x->-x[8])\n    \n    rows = sort(rows, by=x->x[9])\n\
    \    \n    rows = sort(rows, by=x->-x[9])\n    \n    rows = sort(rows, by=x->x[10])\n\
    \    \n    rows = sort(rows, by=x->-x[10])\n    \n    rows = sort(rows, by=x->x[11])\n\
    \    \n    rows = sort(rows, by=x->-x[11])\n    \n    rows = sort(rows, by=x->x[12])\n\
    \    \n    rows = sort(rows, by=x->-x[12])\n    \n    rows = sort(rows, by=x->x[13])\n\
    \    \n    rows = sort(rows, by=x->-x[13])\n    \n    rows = sort(rows, by=x->x[14])\n\
    \    \n    rows = sort(rows, by=x->-x[14])\n    \n    rows = sort(rows, by=x->x[15])\n\
    \    \n    rows = sort(rows, by=x->-x[15])\n    \n    rows = sort(rows, by=x->x[16])\n\
    \    \n    rows = sort(rows, by=x->-x[16])\n    \n    rows = sort(rows, by=x->x[17])\n\
    \    \n    rows = sort(rows, by=x->-x[17])\n    \n    rows = sort(rows, by=x->x[18])\n\
    \    \n    rows = sort(rows, by=x->-x[18])", "    \n    lst = sort(lst)\n    \n\
    \    rows = zeros(Int, length(lst))\n    cols = zeros(Int, length(lst))\n    \n\
    \    for (i,row) in enumerate(lst)\n        rows = rows + row\n        cols =\
    \ cols + 1\n    end\n    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n\
    \    coords = zeros(Int, length(lst))\n    \n    for (i,row) in enumerate(lst)\n\
    \        coords[i] = findfirst(x->x==row, rows)\n    end\n    \n    coords = sort(coords)\n\
    \    \n    coords = reverse(coords)\n    \n    coords = coords[2:end]\n    \n\
    \    return coords\nend\n</cell>\n<code language=julia-1.5>", "    \n    rows\
    \ = sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[rows])),\
    \ by=length, reverse=true)\n    \n    coords = zeros(length(rows), length(cols))\n\
    \    \n    for (i,row) in enumerate(rows)\n        coords[i,:] = [(row,col) for\
    \ col in cols]\n    end\n    \n    coords = coords[coords[:,1] .== x,:]\n    \n\
    \    coords = coords[sortperm(coords[:,2]),:]\n    \n    return coords\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    rows = sort(collect(enumerate(lst)))\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n\
    \    \n    return collect(enumerate(rows))\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rows = sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[1])))\n\
    \    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = ", "    \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n\
    \    cols = zeros(Int, length(lst))\n    \n    for (i,row) in enumerate(lst)\n\
    \        rows = rows + row\n        cols = cols + 1\n    end\n    \n    rows =\
    \ sort(rows)\n    cols = sort(cols)\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    rows = sort(collect(1:length(lst)))\n\
    \    cols = sort(collect(1:length(lst[rows])), by=x->-x)\n    \n    coords = zeros(length(rows),\
    \ length(cols))\n    \n    for (i,row) in enumerate(rows)\n        for (c,col)\
    \ in enumerate(cols)\n            coords[i,c] = Tuple(row, col)\n        end\n\
    \    end\n    \n    coords = sort(coords, by=x->x[1])\n    coords = sort(coords,\
    \ by=x->-x[1])\n    \n    return coords\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    lst = sort(lst)\n    \n    rows = Vector{Tuple{Int64, Int64}}()\n   \
    \ \n    for row in lst\n        \n        columns = Vector{Int64}()\n        \n\
    \        for col in row\n            push!(columns, col)\n        end\n      \
    \  \n        push!(rows, (row, columns))\n    end\n    \n    rows = sort(rows)\n\
    \    \n    columns = sort(collect(eachrow(lst)))\n    \n    rows = sort(rows)\n\
    \    \n    columns = sort(columns)\n    \n    rows = sort(rows)\n    \n    columns\
    \ = sort(columns)\n    \n    rows = sort(rows)\n    \n    columns = sort(columns)\n\
    \    \n    rows = sort(rows)\n    \n    columns = sort(columns)\n    \n    rows\
    \ = sort(rows)\n    \n    columns = sort(columns)\n    \n    rows = sort(rows)\n\
    \    \n    columns = sort(columns)\n    \n    rows = sort(rows)\n    \n    columns\
    \ = sort(columns)\n    \n    rows = sort(rows)\n    \n    columns = sort(columns)\n\
    \    \n    rows = sort(rows)\n    \n    columns = sort(columns)\n    \n    rows\
    \ = sort(rows)\n    \n    columns = sort(columns)\n    \n    rows = sort(rows)\n\
    \    \n    columns = sort(columns)\n    \n    rows = sort(rows)\n    \n    columns\
    \ = sort(columns)\n    \n    rows = sort(rows)\n    \n    columns = sort(columns)\n\
    \    \n    rows = sort(rows)\n    \n    columns = sort(columns)\n    \n    rows\
    \ = sort(rows)\n    \n    columns = sort(columns)\n    \n    rows = sort(rows)\n\
    \    \n    columns = sort(columns)\n    \n    rows = sort(rows)\n    \n    columns\
    \ = sort(columns)\n    \n    rows = sort(rows)\n    \n    columns = sort(columns)\n\
    \    \n    rows = sort(rows)\n    \n    columns = sort(columns)\n    \n    rows\
    \ = sort(rows)\n    \n    columns = sort(columns)\n    \n    rows = sort(rows)\n\
    \    \n    columns = sort(columns)\n    \n    rows = sort(rows)\n    \n    columns\
    \ = sort(columns)\n    \n    rows = sort(rows)\n    \n    columns = sort(columns)\n\
    \    \n    rows = sort(rows)\n    \n    columns = sort(columns)\n    \n    rows\
    \ = sort(rows)\n    \n    columns = sort(columns)\n    \n    rows = sort(rows)\n\
    \    \n    columns = sort(columns)\n    \n    rows = sort(rows)\n    \n    columns\
    \ = sort(columns)\n    \n    rows = sort(rows)\n    \n    columns = sort(columns)\n\
    \    \n    rows = sort(rows)\n    \n    columns = sort(columns)\n    \n    rows\
    \ = sort(rows)\n    \n    columns = sort(columns)\n    \n    rows = sort(", " \
    \   \n    rows = sort(collect(enumerate(lst)))\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    \n    rows = sort(rows, by=x->-x[1])\n    \n    rows = sort(rows, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->-x[2])\n    \n    rows = sort(rows, by=x->x[3])\n\
    \    \n    rows = sort(rows, by=x->-x[3])\n    \n    rows = sort(rows, by=x->x[4])\n\
    \    \n    rows = sort(rows, by=x->-x[4])\n    \n    rows = sort(rows, by=x->x[5])\n\
    \    \n    rows = sort(rows, by=x->-x[5])\n    \n    rows = sort(rows, by=x->x[6])\n\
    \    \n    rows = sort(rows, by=x->-x[6])\n    \n    rows = sort(rows, by=x->x[7])\n\
    \    \n    rows = sort(rows, by=x->-x[7])\n    \n    rows = sort(rows, by=x->x[8])\n\
    \    \n    rows = sort(rows, by=x->-x[8])\n    \n    rows = sort(rows, by=x->x[9])\n\
    \    \n    rows = sort(rows, by=x->-x[9])\n    \n    rows = sort(rows, by=x->x[10])\n\
    \    \n    rows = sort(rows, by=x->-x[10])\n    \n    rows = sort(rows, by=x->x[11])\n\
    \    \n    rows = sort(rows, by=x->-x[11])\n    \n    rows = sort(rows, by=x->x[12])\n\
    \    \n    rows = sort(rows, by=x->-x[12])\n    \n    rows = sort(rows, by=x->x[13])\n\
    \    \n    rows = sort(rows, by=x->-x[13])\n    \n    rows = sort(rows, by=x->x[14])\n\
    \    \n    rows = sort(rows, by=x->-x[14])\n    \n    rows = sort(rows, by=x->x[15])\n\
    \    \n    rows = sort(rows, by=x->-x[15])\n    \n    rows = sort(rows, by=x->x[16])\n\
    \    \n    rows = sort(rows, by=x->-x[16])\n    \n    rows = sort(rows, by=x->x[17])\n\
    \    \n    rows = sort(rows, by=x->-x[17])\n    \n    rows = sort(rows, by=x->x[18])\n\
    \    \n    rows = sort(rows, by=x->-x[18])", "    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    rows = sort(collect(enumerate(lst)))\n    \n    rows = sort(rows,\
    \ by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n    \n    rows = sort(rows,\
    \ by=x->x[2])\n    \n    rows = sort(rows, by=x->-x[2])\n    \n    rows = sort(rows,\
    \ by=x->x[3])\n    \n    rows = sort(rows, by=x->-x[3])\n    \n    rows = sort(rows,\
    \ by=x->x[4])\n    \n    rows = sort(rows, by=x->-x[4])\n    \n    rows = sort(rows,\
    \ by=x->x[5])\n    \n    rows = sort(rows, by=x->-x[5])\n    \n    rows = sort(rows,\
    \ by=x->x[6])\n    \n    rows = sort(rows, by=x->-x[6])\n    \n    rows = sort(rows,\
    \ by=x->x[7])\n    \n    rows = sort(rows, by=x->-x[7])\n    \n    rows = sort(rows,\
    \ by=x->x[8])\n    \n    rows = sort(rows, by=x->-x[8])\n    \n    rows = sort(rows,\
    \ by=x->x[9])\n    \n    rows = sort(rows, by=x->-x[9])\n    \n    rows = sort(rows,\
    \ by=x->x[10])\n    \n    rows = sort(rows, by=x->-x[10])\n    \n    rows = sort(rows,\
    \ by=x->x[11])\n    \n    rows = sort(rows, by=x->-x[11])\n    \n    rows = sort(rows,\
    \ by=x->x[12])\n    \n    rows = sort(rows, by=x->-x[12])\n    \n    rows = sort(rows,\
    \ by=x->x[13])\n    \n    rows = sort(rows, by=x->-x[13])\n    \n    rows = sort(rows,\
    \ by=x->x[14])\n    \n    rows = sort(rows, by=x->-x[14])\n    \n    rows = sort(rows,\
    \ by=x->x[15])\n    \n    rows = sort(rows, by=x->-x[15])\n    \n    rows = sort(rows,\
    \ by=x->x[16])\n    \n    rows = sort(rows, by=x->-x[16])\n    \n    rows = sort(rows,\
    \ by=x->x[17])\n    \n    rows = sort(rows, by=x->-x[17])\n    \n    rows = sort(rows,\
    \ by=x->x[18])\n    \n    rows = sort(rows, by=x->-x[18])", "    \n    rows =\
    \ sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[1])))\n \
    \   \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[1])\n \
    \   \n    rows = sort(rows, by=x->x[2])\n    cols = sort(cols, by=x->x[2])\n \
    \   \n    rows = sort(rows, by=x->x[3])\n    cols = sort(cols, by=x->x[3])\n \
    \   \n    rows = sort(rows, by=x->x[4])\n    cols = sort(cols, by=x->x[4])\n \
    \   \n    rows = sort(rows, by=x->x[5])\n    cols = sort(cols, by=x->x[5])\n \
    \   \n    rows = sort(rows, by=x->x[6])\n    cols = sort(cols, by=x->x[6])\n \
    \   \n    rows = sort(rows, by=x->x[7])\n    cols = sort(cols, by=x->x[7])\n \
    \   \n    rows = sort(rows, by=x->x[8])\n    cols = sort(cols, by=x->x[8])\n \
    \   \n    rows = sort(rows, by=x->x[9])\n    cols = sort(cols, by=x->x[9])\n \
    \   \n    rows = sort(rows, by=x->x[10])\n    cols = sort(cols, by=x->x[10])\n\
    \    \n    rows = sort(rows, by=x->x[11])\n    cols = sort(cols, by=x->x[11])\n\
    \    \n    rows = sort(rows, by=x->x[12])\n    cols = sort(cols, by=x->x[12])\n\
    \    \n    rows = sort(rows, by=x->x[13])\n    cols = sort(cols, by=x->x[13])\n\
    \    \n    rows = sort(rows, by=x->x[14])\n    cols = sort(cols, by=x->x[14])\n\
    \    \n    rows = sort(rows, by=x->x[15])\n    cols = sort(cols, by=x->x[15])\n\
    \    \n    rows = sort(rows, by=x->x[16])\n    cols = sort(cols, by=x->x[16])\n\
    \    \n    rows = sort(rows, by=x->x[17])\n    cols = sort(cols, by=x->x[17])\n\
    \    \n    rows = sort(rows, by=x->x[18])\n    cols = sort(cols, by=x->x[18])\n\
    \    \n    rows = sort(rows, by=x->x[19])\n    cols = sort(cols, by=x->x[19])\n\
    \    \n    rows = sort(", "    \n    rows = sort(collect(1:length(lst)))\n   \
    \ \n    rows = sort(rows, by=x->-x)\n    \n    rows = sort(rows, by=x->-length(x))\n\
    \    \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[2]))\n    \n    rows = sort(rows, by=x->-length(x[3]))\n   \
    \ \n    rows = sort(rows, by=x->-length(x[4]))\n    \n    rows = sort(rows, by=x->-length(x[5]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[6]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[7]))\n    \n    rows = sort(rows, by=x->-length(x[8]))\n   \
    \ \n    rows = sort(rows, by=x->-length(x[9]))\n    \n    rows = sort(rows, by=x->-length(x[10]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[11]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[12]))\n    \n    rows = sort(rows, by=x->-length(x[13]))\n \
    \   \n    rows = sort(rows, by=x->-length(x[14]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[15]))\n    \n    rows = sort(rows, by=x->-length(x[16]))\n \
    \   \n    rows = sort(rows, by=x->-length(x[17]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[18]))\n    \n    rows = sort(rows, by=x->-length(x[19]))\n \
    \   \n    rows = sort(rows, by=x->-length(x[20]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[21]))\n    \n    rows = sort(rows, by=x->-length(x[22]))\n \
    \   \n    rows = sort(rows, by=x->-length(x[23]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[24]))\n    \n    rows = sort(rows, by=x->-length(x[25]))\n \
    \   \n    rows = sort(rows, by=x->-length(x[26]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[27]))\n    \n    rows = sort(rows, by=x->-length(x[28]))\n \
    \   \n    rows = sort(rows, by=x->-", "    \n    lst = sort(lst)\n    \n    rows\
    \ = zeros(Int, length(lst))\n    cols = zeros(Int, length(lst))\n    \n    for\
    \ (i,row) in enumerate(lst)\n        cols[i] = row.index(x)\n        rows[i] =\
    \ i\n    end\n    \n    return zip(rows, cols)\nend\n</cell>\n<code language=julia-1.5>\n\
    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n \
    \   ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n</cell>\n<code language=julia-1.5>\n\
    get_row([], 1) == []\n</cell>\n<code language=julia-1.5>\nget_row([[], [1], [1,\
    \ 2, 3]], 3) == [(2, 2)]\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ all possible combinations of n numbers from an array.", "    \n    rows = sort(collect(1:length(lst)))\n\
    \    cols = sort(collect(1:length(lst[1,:])))\n    \n    rows = sort(rows)\n \
    \   cols = sort(cols)\n    \n    rows = rows[cols == x]\n    cols = cols[rows\
    \ == x]\n    \n    rows = rows[rows != length(lst)]\n    cols = cols[rows != length(lst[1,:])]\n\
    \    \n    rows = rows[rows != length(lst)]\n    cols = cols[rows != length(lst[1,:])]\n\
    \    \n    rows = rows[rows != length(lst)]\n    cols = cols[rows != length(lst[1,:])]\n\
    \    \n    rows = rows[rows != length(lst)]\n    cols = cols[rows != length(lst[1,:])]\n\
    \    \n    rows = rows[rows != length(lst)]\n    cols = cols[rows != length(lst[1,:])]\n\
    \    \n    rows = rows[rows != length(lst)]\n    cols = cols[rows != length(lst[1,:])]\n\
    \    \n    rows = rows[rows != length(lst)]\n    cols = cols[rows != length(lst[1,:])]\n\
    \    \n    rows = rows[rows != length(lst)]\n    cols = cols[rows != length(lst[1,:])]\n\
    \    \n    rows = rows[rows != length(lst)]\n    cols = cols[rows != length(lst[1,:])]\n\
    \    \n    rows = rows[rows != length(lst)]\n    cols = cols[rows != length(lst[1,:])]\n\
    \    \n    rows = rows[rows != length(lst)]\n    cols = cols[rows != length(lst[1,:])]\n\
    \    \n    rows = rows[rows != length(lst)]\n    cols = cols[rows != length(lst[1,:])]\n\
    \    \n    rows = rows[rows != length(lst)]\n    cols = cols[rows != length(lst[1,:])]\n\
    \    \n    rows = rows[rows != length(lst)]\n    cols = cols[rows != length(lst[1,:])]\n\
    \    \n    rows = rows[rows != length(lst)]\n    cols = cols[rows != length(lst[1,:])]\n\
    \    \n    rows = rows[rows != length(lst)]\n    cols = cols[rows != length(lst[1,:])]\n\
    \    \n    rows = rows[rows != length(lst)]\n    cols = cols[rows != length(lst[1,:])]\n\
    \    \n    rows = rows[rows != length(lst)]\n    cols = cols[rows != length(lst[1,:])]\n\
    \    \n    rows = rows[rows != length(lst)]\n    cols = cols[rows != length(lst[1,:])]\n\
    \    \n", "    \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n\
    \    cols = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n       \
    \ rows = rows + lst[i][x]\n        cols = cols + lst[i][end]\n    end\n    \n\
    \    rows = sort(rows)\n    cols = sort(cols)\n    \n    return zip(rows, cols)\n\
    end\n</cell>\n<code language=julia-1.5>\nget_row([\n      [1,2,3,4,5,6],\n   \
    \   [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0),\
    \ (2, 5), (2, 0)]\n</cell>\n<text>\nProblem 3\nWrite a function that finds all\
    \ the subsets of a given set (without duplicates) of size n.", "    \n    rows\
    \ = sort(collect(1:length(lst)))\n    \n    rows = sort(rows, by=x->-x)\n    \n\
    \    rows = sort(rows, by=x->-length(x))\n    \n    rows = sort(rows, by=x->-length(x[x!=x]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[x==x]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[x==x]))\n    \n    rows = sort(rows, by=x->-length(x[x==x]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[x==x]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[x==x]))\n    \n    rows = sort(rows, by=x->-length(x[x==x]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[x==x]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[x==x]))\n    \n    rows = sort(rows, by=x->-length(x[x==x]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[x==x]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[x==x]))\n    \n    rows = sort(rows, by=x->-length(x[x==x]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[x==x]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[x==x]))\n    \n    rows = sort(rows, by=x->-length(x[x==x]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[x==x]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[x==x]))\n    \n    rows = sort(rows, by=x->-length(x[x==x]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[x==x]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[x==x]))\n    \n    rows = sort(rows, by=x->-length(x[x==x]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[x==x]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[x==x]))\n    \n    rows = sort(rows, by=x->-length(x[x==x]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[x==x]))\n    \n    rows = sort(",
  "    \n    lst = sort(lst)\n    \n    rows = Vector{Tuple{Int64, Int64}}()\n   \
    \ \n    for row in lst\n        \n        columns = Vector{Int64}()\n        \n\
    \        for element in row\n            push!(columns, element)\n        end\n\
    \        \n        push!(rows, (min(columns), max(columns)))\n    end\n    \n\
    \    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    columns = Vector{Int64}()\n\
    \    \n    for row in rows\n        push!(columns, row[1])\n    end\n    \n  \
    \  columns = sort(columns)\n    \n    columns = reverse(columns)\n    \n    rows\
    \ = reverse(rows)\n    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows =\
    \ sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n  \
    \  \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows =\
    \ sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n  \
    \  \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows =\
    \ sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n  \
    \  \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows =\
    \ sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n  \
    \  \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows =\
    \ sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n  \
    \  \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows =\
    \ sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n  \
    \  \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows =\
    \ sort(rows)\n    \n    rows = reverse(rows)\n    \n", "    \n    lst = sort(lst)\n\
    \    \n    rows = zeros(Int, length(lst))\n    cols = zeros(Int, length(lst))\n\
    \    \n    for i = 1:length(lst)\n        rows = rows + lst[i][x]\n        cols\
    \ = cols + lst[i][end]\n    end\n    \n    rows = sort(rows)\n    cols = sort(cols)\n\
    \    \n    coords = zeros(length(rows), length(cols))\n    \n    for i = 1:length(rows)\n\
    \        coords[i, :] = [rows, cols]\n    end\n    \n    return coords\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    lst = sort(lst)\n    \n    rows\
    \ = zeros(Int, length(lst))\n    cols = zeros(Int, length(lst))\n    \n    for\
    \ (i,row) in enumerate(lst)\n        rows = rows + row\n        cols = cols +\
    \ 1\n    end\n    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    coords\
    \ = zeros(Int, length(lst))\n    \n    for (i,row) in enumerate(lst)\n       \
    \ coords[i] = findfirst(x->x==row, rows)\n    end\n    \n    coords = sort(coords)\n\
    \    \n    coords = reverse(coords)\n    \n    coords = reverse(coords)\n    \n\
    \    coords = reverse(coords)\n    \n    coords = reverse(coords)\n    \n    coords\
    \ = reverse(coords)\n    \n    coords = reverse(coords)\n    \n    coords = reverse(coords)\n\
    \    \n    coords = reverse(coords)\n    \n    coords = reverse(coords)\n    \n\
    \    coords = reverse(coords)\n    \n    coords = reverse(coords)\n    \n    coords\
    \ = reverse(coords)\n    \n    coords = reverse(coords)\n    \n    coords = reverse(coords)\n\
    \    \n    coords = reverse(coords)\n    \n    coords = reverse(coords)\n    \n\
    \    coords = reverse(coords)\n    \n    coords = reverse(coords)\n    \n    coords\
    \ = reverse(coords)\n    \n    coords = reverse(coords)\n    \n    coords = reverse(coords)\n\
    \    \n    coords = reverse(coords)\n    \n    coords = reverse(coords)\n    \n\
    \    coords = reverse(coords)\n    \n    coords = reverse(coords)\n    \n    coords\
    \ = reverse(coords)\n    \n    coords = reverse(coords)\n    \n    coords = reverse(coords)\n\
    \    \n    coords = reverse(coords)\n    \n    coords = reverse(coords)\n    \n\
    \    coords = reverse(coords)\n    \n    coords = reverse(coords)\n    \n    coords\
    \ = reverse(coords)\n    \n    coords = reverse(coords)\n    \n    coords = reverse(coords)\n\
    \    \n    coords = reverse(coords)\n    \n    coords = reverse(coords)\n    \n\
    \    coords = reverse(coords)\n    \n    coords = reverse(coords)\n    \n    coords\
    \ = reverse(coords)\n    \n    coords = reverse(coords)\n    \n    coords = reverse(coords)\n\
    \    \n    coords = reverse(coords)\n    \n    coords = reverse(coords)\n    \n\
    \    coords = reverse(coords)", "    \n    rows = sort(collect(enumerate(lst)))\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n\
    \    \n    rows = sort(rows, by=x->x[2])\n    \n    rows = sort(rows, by=x->-x[2])\n\
    \    \n    rows = sort(rows, by=x->x[3])\n    \n    rows = sort(rows, by=x->-x[3])\n\
    \    \n    rows = sort(rows, by=x->x[4])\n    \n    rows = sort(rows, by=x->-x[4])\n\
    \    \n    rows = sort(rows, by=x->x[5])\n    \n    rows = sort(rows, by=x->-x[5])\n\
    \    \n    rows = sort(rows, by=x->x[6])\n    \n    rows = sort(rows, by=x->-x[6])\n\
    \    \n    rows = sort(rows, by=x->x[7])\n    \n    rows = sort(rows, by=x->-x[7])\n\
    \    \n    rows = sort(rows, by=x->x[8])\n    \n    rows = sort(rows, by=x->-x[8])\n\
    \    \n    rows = sort(rows, by=x->x[9])\n    \n    rows = sort(rows, by=x->-x[9])\n\
    \    \n    rows = sort(rows, by=x->x[10])\n    \n    rows = sort(rows, by=x->-x[10])\n\
    \    \n    rows = sort(rows, by=x->x[11])\n    \n    rows = sort(rows, by=x->-x[11])\n\
    \    \n    rows = sort(rows, by=x->x[12])\n    \n    rows = sort(rows, by=x->-x[12])\n\
    \    \n    rows = sort(rows, by=x->x[13])\n    \n    rows = sort(rows, by=x->-x[13])\n\
    \    \n    rows = sort(rows, by=x->x[14])\n    \n    rows = sort(rows, by=x->-x[14])\n\
    \    \n    rows = sort(rows, by=x->x[15])\n    \n    rows = sort(rows, by=x->-x[15])\n\
    \    \n    rows = sort(rows, by=x->x[16])\n    \n    rows = sort(rows, by=x->-x[16])\n\
    \    \n    rows = sort(rows, by=x->x[17])\n    \n    rows = sort(rows, by=x->-x[17])\n\
    \    \n    rows = sort(rows, by=x->x[18])\n    \n    rows = sort(rows, by=x->-x[18])",
  "    \n    lst = sort(lst)\n    \n    rows = length(lst)\n    cols = lst[1].length\n\
    \    \n    coords = Vector{Tuple{Int64, Int64}}[]\n    \n    for row in 1:rows\n\
    \        \n        row_coords = Tuple{Int64, Int64}(0, row)\n        \n      \
    \  for col in 1:cols\n            \n            col_coords = Tuple{Int64, Int64}(0,\
    \ col)\n            \n            if lst[row][col] == x\n                \n  \
    \              push!(coords, row_coords)\n                push!(coords, col_coords)\n\
    \            end\n        end\n    end\n    \n    coords = sort(coords)\n    \n\
    \    coords = reverse(coords)\n    \n    return coords\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rows = sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[1,:])))\n\
    \    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = rows[cols\
    \ == x]\n    cols = cols[rows == x]\n    \n    rows = rows[rows != length(lst)]\n\
    \    cols = cols[rows != length(lst[1,:])]\n    \n    rows = rows[rows != length(lst)]\n\
    \    cols = cols[rows != length(lst[1,:])]\n    \n    rows = rows[rows != length(lst)]\n\
    \    cols = cols[rows != length(lst[1,:])]\n    \n    rows = rows[rows != length(lst)]\n\
    \    cols = cols[rows != length(lst[1,:])]\n    \n    rows = rows[rows != length(lst)]\n\
    \    cols = cols[rows != length(lst[1,:])]\n    \n    rows = rows[rows != length(lst)]\n\
    \    cols = cols[rows != length(lst[1,:])]\n    \n    rows = rows[rows != length(lst)]\n\
    \    cols = cols[rows != length(lst[1,:])]\n    \n    rows = rows[rows != length(lst)]\n\
    \    cols = cols[rows != length(lst[1,:])]\n    \n    rows = rows[rows != length(lst)]\n\
    \    cols = cols[rows != length(lst[1,:])]\n    \n    rows = rows[rows != length(lst)]\n\
    \    cols = cols[rows != length(lst[1,:])]\n    \n    rows = rows[rows != length(lst)]\n\
    \    cols = cols[rows != length(lst[1,:])]\n    \n    rows = rows[rows != length(lst)]\n\
    \    cols = cols[rows != length(lst[1,:])]\n    \n    rows = rows[rows != length(lst)]\n\
    \    cols = cols[rows != length(lst[1,:])]\n    \n    rows = rows[rows != length(lst)]\n\
    \    cols = cols[rows != length(lst[1,:])]\n    \n    rows = rows[rows != length(lst)]\n\
    \    cols = cols[rows != length(lst[1,:])]\n    \n    rows = rows[rows != length(lst)]\n\
    \    cols = cols[rows != length(lst[1,:])]\n    \n    rows = rows[rows != length(lst)]\n\
    \    cols = cols[rows != length(lst[1,:])]\n    \n    rows = rows[rows != length(lst)]\n\
    \    cols = cols[rows != length(lst[1,:])]\n    \n    rows = rows[rows != length(lst)]\n\
    \    cols = cols[rows != length(lst[1,:])]\n    \n", "    \n    lst = sort(lst)\n\
    \    \n    rows = zeros(Int, length(lst))\n    cols = zeros(Int, length(lst))\n\
    \    \n    for i = 1:length(lst)\n        rows = rows + lst[i][x]\n        cols\
    \ = cols + lst[i][end]\n    end\n    \n    rows = sort(rows)\n    cols = sort(cols)\n\
    \    \n    return zip(rows, cols)\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    cols\
    \ = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n        rows = rows\
    \ + lst[i][x]\n        cols = cols + lst[i][end]\n    end\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    coords = zeros(Int, length(lst))\n    \n   \
    \ for i = 1:length(lst)\n        coords[i] = (i-1, cols[i])\n    end\n    \n \
    \   return coords\nend\n</cell>\n<code language=julia-1.4>", "    \n    rows =\
    \ sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[[1]])))\n\
    \    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    ", "    \n    rows = sort(collect(1:length(lst)))\n\
    \    cols = sort(collect(1:length(lst[1])))\n    \n    rows = sort(rows)\n   \
    \ cols = sort(cols)\n    \n    coords = Vector{Tuple{Int64, Int64}}(undef, 0)\n\
    \    \n    for row in rows\n        for col in cols\n            if lst[row][col]\
    \ == x\n                push!(coords, Tuple{row, col})\n            end\n    \
    \    end\n    end\n    \n    coords\nend\n</cell>\n<code language=julia-1.4>",
  "    \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    cols =\
    \ zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n        rows = rows\
    \ + lst[i][x]\n        cols = cols + lst[i][end]\n    end\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    coords = zeros(length(lst), 2)\n    \n    for\
    \ i = 1:length(lst)\n        coords[i] = (i-1, cols[i])\n    end\n    \n    return\
    \ coords\nend\n</cell>\n<code language=julia-1.5>", "    \n    lst = sort(lst)\n\
    \    \n    rows = zeros(Int, length(lst))\n    cols = zeros(Int, length(lst))\n\
    \    \n    for i = 1:length(lst)\n        rows = rows + lst[i][i]\n        cols\
    \ = cols + lst[i][1:end-1]\n    end\n    \n    rows = sort(rows)\n    cols = sort(cols)\n\
    \    \n    coords = zeros(length(rows), length(cols))\n    \n    for i = 1:length(rows)\n\
    \        coords[i, :] = [rows, cols]\n    end\n    \n    coords = sort(coords,\
    \ rev=true)\n    \n    return coords\nend\n</cell>\n<code language=julia-1.5>",
  "    if lst == []\n        []\n    elseif x == 0\n        []\n    else\n       \
    \ lst[findfirst(x->x==lst[end], lst)-1]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which\
    \ is similar to matrix, however, unlike matrices,\n    each row may contain a\
    \ different number of columns.\n    Given lst, and integer x, find integers x\
    \ in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    \    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates\
    \ initially by rows in ascending order.\n    Also, sort coordinates of the row\
    \ by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n\
    \      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1,\
    \ 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2,\
    \ 3]], 3) == [(2, 2)]\n    \"\"\"", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    rows = sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[1,:])))\n\
    \    \n    coords = zeros(length(rows), length(cols))\n    \n    for i = 1:length(rows)\n\
    \        coords[i,:] = [lst[rows[i],cols[i]], i]\n    end\n    \n    coords =\
    \ sort(coords, by=x->x[1])\n    coords = reverse(coords, by=x->x[2])\n    \n \
    \   return coords\nend\n</cell>\n<code language=julia-1.5>", "    \n    lst =\
    \ sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    cols = zeros(Int, length(lst))\n\
    \    \n    for row in 1:length(lst)\n        cols[row] = length(lst[row])\n  \
    \      rows[row] = row\n    end\n    \n    rows = sort(rows)\n    cols = sort(cols)\n\
    \    \n    coords = zeros(Int, length(lst))\n    \n    for row in rows\n     \
    \   for col in cols\n            if lst[row][col] == x\n                coords[row]\
    \ = col\n                break\n            end\n        end\n    end\n    \n\
    \    coords = sort(coords)\n    \n    coords = reverse(coords)\n    \n    return\
    \ coords\nend\n</cell>\n<code language=julia-1.5>", "    if length(lst.[1]) ==\
    \ 0 \n        return [] \n    \n    rows = sort(collect(1:length(lst)))\n    cols\
    \ = sort(collect(1:length(lst[1])))\n    \n    rows = sort(rows)\n    cols = sort(cols)\n\
    \    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    rows = sort(collect(enumerate(lst)))\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n\
    \    \n    rows = sort(rows, by=x->x[2])\n    \n    rows = sort(rows, by=x->-x[2])\n\
    \    \n    return rows\nend\n</cell>\n<code language=julia-1.5>", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    rows = sort(collect(1:length(lst)))\n\
    \    cols = sort(collect(1:length(lst[1])))\n    \n    rows = sort(rows)\n   \
    \ cols = sort(cols)\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n", "    \n    rows = sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[rows])),\
    \ by=x->-x)\n    \n    coords = zeros(length(rows), length(cols))\n    \n    for\
    \ (i,row) in enumerate(rows)\n        for j, (col) in enumerate(cols)\n      \
    \      coords[i,j] = row==col ? x : -1\n        end\n    end\n    \n    return\
    \ coords\nend\n</cell>\n<code language=julia-1.5>", "    \n    rows = sort(collect(1:length(lst)))\n\
    \    cols = sort(collect(1:length(lst[rows])), by=x->-x)\n    \n    coords = zeros(length(rows),\
    \ length(cols))\n    \n    for (i,row) in enumerate(rows)\n        coords[i,:]\
    \ = [row, cols[row]]\n    end\n    \n    coords = coords[sortperm(coords[:,1]),:]\n\
    \    \n    return coords\nend\n</cell>\n<code language=julia-1.5>", "    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    rows = sort(collect(enumerate(lst)))\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n\
    \    \n    rows = sort(rows, by=x->x[2])\n    \n    rows = sort(rows, by=x->-x[2])\n\
    \    \n    return rows\nend\n</cell>\n<code language=julia-1.5>", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    lst = sort(lst)\n   \
    \ \n    rows = zeros(Int, length(lst))\n    cols = zeros(Int, length(lst))\n \
    \   \n    for (i,row) in enumerate(lst)\n        rows = rows + row\n        cols\
    \ = cols + 1\n    end\n    \n    rows = sort(rows)\n    cols = sort(cols)\n  \
    \  \n    coords = zeros(Int, length(lst))\n    \n    for (i,row) in enumerate(lst)\n\
    \        coords[i] = findfirst(x->x==row, rows)\n    end\n    \n    coords = sort(coords)\n\
    \    \n    coords = reverse(coords)\n    \n    coords = sort(coords)\n    \n \
    \   coords = reverse(coords)\n    \n    return coords\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rows = sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[rows])),\
    \ by=length, reverse=true)\n    \n    coords = zeros(length(rows), length(cols))\n\
    \    \n    for (i,row) in enumerate(rows)\n        for j, (col) in enumerate(cols)\n\
    \            if lst[row][col] == x\n                coords[i][j] = Tuple(row,\
    \ col)\n            end\n        end\n    end\n    \n    return coords\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    lst = sort(lst)\n    \n    rows\
    \ = zeros(Int, length(lst))\n    cols = zeros(Int, length(lst))\n    \n    for\
    \ (i,row) in enumerate(lst)\n        cols[i] = length(row)\n        rows[i] =\
    \ i\n    end\n    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    coords\
    \ = zeros(Int, length(lst))\n    \n    for (i,row) in enumerate(lst)\n       \
    \ coords[i] = rows[i]\n    end\n    \n    coords = sort(coords)\n    \n    coords\
    \ = coords[coords <= x]\n    \n    coords = coords[coords > 0]\n    \n    coords\
    \ = coords[reverse .!= coords]\n    \n    coords = coords[reverse .!= coords]\n\
    \    \n    coords = coords[reverse .!= coords]\n    \n    coords = coords[reverse\
    \ .!= coords]\n    \n    coords = coords[reverse .!= coords]\n    \n    coords\
    \ = coords[reverse .!= coords]\n    \n    coords = coords[reverse .!= coords]\n\
    \    \n    coords = coords[reverse .!= coords]\n    \n    coords = coords[reverse\
    \ .!= coords]\n    \n    coords = coords[reverse .!= coords]\n    \n    coords\
    \ = coords[reverse .!= coords]\n    \n    coords = coords[reverse .!= coords]\n\
    \    \n    coords = coords[reverse .!= coords]\n    \n    coords = coords[reverse\
    \ .!= coords]\n    \n    coords = coords[reverse .!= coords]\n    \n    coords\
    \ = coords[reverse .!= coords]\n    \n    coords = coords[reverse .!= coords]\n\
    \    \n    coords = coords[reverse .!= coords]\n    \n    coords = coords[reverse\
    \ .!= coords]\n    \n    coords = coords[reverse .!= coords]\n    \n    coords\
    \ = coords[reverse .!= coords]\n    \n    coords = coords[reverse .!= coords]\n\
    \    \n    coords = coords[reverse .!= coords]\n    \n    coords = coords[reverse\
    \ .!= coords]\n    \n    coords = coords[reverse .!= coords]\n    \n    coords\
    \ = coords[reverse .!= coords]\n    \n    coords = coords[reverse .!= coords]\n\
    \    \n    coords = coords[reverse .!= coords]\n    \n    coords = coords[reverse\
    \ .!= coords]\n    \n    coords = coords[reverse .!= coords]\n", "    \n    lst\
    \ = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    cols = zeros(Int,\
    \ length(lst))\n    \n    for (i,row) in enumerate(lst)\n        rows = rows +\
    \ row\n        cols = cols + 1\n    end\n    \n    rows = sort(rows)\n    cols\
    \ = sort(cols)\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = sort(rows)\n    cols = sort(cols)\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = sort(rows)\n    cols = sort(cols)\n    \n    rows = rows[cols..end]\n    cols\
    \ = cols[rows..end]\n    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n\
    \    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = sort(rows)\n    cols = sort(cols)\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = sort(rows)\n    cols = sort(cols)\n    \n    rows = rows[cols..end]\n    cols\
    \ = cols[rows..end]\n    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n\
    \    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = sort(rows)\n    cols = sort(cols)\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = sort(rows)\n    cols = sort(cols)\n    \n    rows = rows[cols..end]\n    cols\
    \ = cols[rows..end]\n    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n\
    \    rows = rows[cols..end]\n    cols = col", "    \n    rows = sort(collect(1:length(lst)))\n\
    \    cols = sort(collect(1:length(lst[1])))\n    \n    coords = zeros(length(rows),\
    \ length(cols))\n    \n    for i = 1:length(rows)\n        coords[i, :] = [lst[rows[i],\
    \ cols[i]], lst[rows[i], cols[i]]]\n    end\n    \n    coords = sort(coords, dims=2)\n\
    \    \n    coords = coords[coords[:, 1] .>= x, :]\n    \n    return coords\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    lst = sort(lst)\n    \n    rows\
    \ = zeros(Int, length(lst))\n    \n    for row in 1:length(lst)\n        \n  \
    \      rows = rows + 1\n        \n        lst = sort(lst[row])\n        \n   \
    \     columns = zeros(Int, length(lst))\n        \n        for col in 1:length(lst)\n\
    \            \n            columns = columns + 1\n            \n            if\
    \ lst[col] == x\n                \n                return [(rows - 1, columns\
    \ - 1)]\n            end\n        end\n    end\n    \n    return []\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    rows = sort(collect(1:length(lst)))\n \
    \   cols = sort(collect(1:length(lst[1])))\n    \n    rows = sort(rows)\n    cols\
    \ = sort(cols)\n    \n    rows = rows[cols <= x]\n    cols = cols[rows <= x]\n\
    \    \n    rows = rows[rows > x]\n    cols = cols[cols > x]\n    \n    rows =\
    \ rows[rows < length(lst)]\n    cols = cols[cols < length(lst[1])]\n    \n   \
    \ rows = rows[rows > 0]\n    cols = cols[cols > 0]\n    \n    rows = rows[rows\
    \ < length(lst)]\n    cols = cols[cols < length(lst[1])]\n    \n    rows = rows[rows\
    \ > 0]\n    cols = cols[cols > 0]\n    \n    rows = rows[rows < length(lst)]\n\
    \    cols = cols[cols < length(lst[1])]\n    \n    rows = rows[rows > 0]\n   \
    \ cols = cols[cols > 0]\n    \n    rows = rows[rows < length(lst)]\n    cols =\
    \ cols[cols < length(lst[1])]\n    \n    rows = rows[rows > 0]\n    cols = cols[cols\
    \ > 0]\n    \n    rows = rows[rows < length(lst)]\n    cols = cols[cols < length(lst[1])]\n\
    \    \n    rows = rows[rows > 0]\n    cols = cols[cols > 0]\n    \n    rows =\
    \ rows[rows < length(lst)]\n    cols = cols[cols < length(lst[1])]\n    \n   \
    \ rows = rows[rows > 0]\n    cols = cols[cols > 0]\n    \n    rows = rows[rows\
    \ < length(lst)]\n    cols = cols[cols < length(lst[1])]\n    \n    rows = rows[rows\
    \ > 0]\n    cols = cols[cols > 0]\n    \n    rows = rows[rows < length(lst)]\n\
    \    cols = cols[cols < length(lst[1])]\n    \n    rows = rows[rows > 0]\n   \
    \ cols = cols[cols > 0]\n    \n    rows = rows[rows < length(lst)]\n    cols =\
    \ cols[cols < length(lst[1])]\n    \n    rows = rows[rows > 0]\n    cols = cols[cols\
    \ > 0]\n    \n    rows = rows[rows < length(lst)]\n    cols = cols[cols < length(lst[1])]\n\
    \    \n    rows = rows[rows > 0]\n    cols = cols[cols > 0]\n    \n    rows =\
    \ rows[rows < length(lst)]\n    cols = cols[cols < length(lst[1])]\n    \n   \
    \ rows = rows[row", "    if length(lst.[1]) == 0 \n        return [] \n    \n\
    \    rows = sort(collect(enumerate(lst.[1])))\n    cols = sort(collect(enumerate(reverse(lst[1]))))\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[1])\n\
    \    \n    coords = zeros(length(rows), length(cols))\n    \n    for (i,j) in\
    \ zip(rows, cols)\n        coords[i, j] = (i,j)\n    end\n    \n    return coords\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    rows = sort(collect(enumerate(lst)))\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n\
    \    \n    rows = sort(rows, by=x->x[2])\n    \n    rows = sort(rows, by=x->-x[2])\n\
    \    \n    return rows\nend\n</cell>\n<code language=julia-1.5>\nget_row([\n \
    \     [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n</cell>\n<code language=julia-1.5>\n\
    get_row([], 1) == []\n</cell>\n<code language=julia-1.5>\nget_row([[], [1], [1,\
    \ 2, 3]], 3) == [(2, 2)]\n</cell>\n<code language=julia-1.5>", "    \n    lst\
    \ = sort(lst)\n    \n    rows = length(lst)\n    cols = lst[1].length\n    \n\
    \    coords = Vector{Tuple{Int64, Int64}}[]\n    \n    for row in 1:rows\n   \
    \     \n        row_coords = Tuple{Int64, Int64}(0, row)\n        \n        for\
    \ col in 1:cols\n            \n            if lst[row][col] == x\n           \
    \     \n                push!(coords, row_coords)\n                \n        \
    \    end\n            \n        end\n        \n    end\n    \n    sort(coords,\
    \ rev=true)\n    \n    return coords\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    cols =\
    \ zeros(Int, length(lst))\n    \n    for row in lst\n        rows = rows + row\n\
    \        cols = cols + 1\n    end\n    \n    rows = sort(rows)\n    cols = sort(cols)\n\
    \    \n    rows = reverse(rows)\n    cols = reverse(cols)\n    \n    rows = rows[cols\
    \ == x]\n    cols = cols[rows == x]\n    \n    rows = reverse(rows)\n    cols\
    \ = reverse(cols)\n    \n    rows = rows[cols == x]\n    cols = cols[rows == x]\n\
    \    \n    rows = reverse(rows)\n    cols = reverse(cols)\n    \n    rows = rows[cols\
    \ == x]\n    cols = cols[rows == x]\n    \n    rows = reverse(rows)\n    cols\
    \ = reverse(cols)\n    \n    rows = rows[cols == x]\n    cols = cols[rows == x]\n\
    \    \n    rows = reverse(rows)\n    cols = reverse(cols)\n    \n    rows = rows[cols\
    \ == x]\n    cols = cols[rows == x]\n    \n    rows = reverse(rows)\n    cols\
    \ = reverse(cols)\n    \n    rows = rows[cols == x]\n    cols = cols[rows == x]\n\
    \    \n    rows = reverse(rows)\n    cols = reverse(cols)\n    \n    rows = rows[cols\
    \ == x]\n    cols = cols[rows == x]\n    \n    rows = reverse(rows)\n    cols\
    \ = reverse(cols)\n    \n    rows = rows[cols == x]\n    cols = cols[rows == x]\n\
    \    \n    rows = reverse(rows)\n    cols = reverse(cols)\n    \n    rows = rows[cols\
    \ == x]\n    cols = cols[rows == x]\n    \n    rows = reverse(rows)\n    cols\
    \ = reverse(cols)\n    \n    rows = rows[cols == x]\n    cols = cols[rows == x]\n\
    \    \n    rows = reverse(rows)\n    cols = reverse(cols)\n    \n    rows = rows[cols\
    \ == x]\n    cols = cols[rows == x]\n    \n    rows = reverse(rows)\n    cols\
    \ = reverse(cols)\n    \n    rows = rows[cols == x]\n    cols = cols[rows == x]\n\
    \    \n    rows = reverse(rows)\n    cols = reverse(cols)\n    \n    rows = rows[cols\
    \ == x]\n    cols = cols[rows == x]\n    \n    rows = reverse(rows)\n    cols\
    \ = reverse(cols)\n    \n    rows = rows[cols == x]\n    cols = cols[rows == x]\n\
    \    \n    rows = reverse(rows)\n    cols = reverse(cols)\n    \n    rows = rows[cols\
    \ == x]\n    cols = cols[rows == x]\n    ", "    \n    rows = sort(collect(1:length(lst)))\n\
    \    \n    rows = sort(rows, by=x->-x)\n    \n    columns = sort(collect(1:length(lst[[1]])))\n\
    \    \n    columns = sort(columns, by=x->-x)\n    \n    coords = zeros(length(rows),\
    \ length(columns))\n    \n    for (r,c) in zip(rows, columns)\n        coords[r][c]\
    \ = (r,c)\n    end\n    \n    return coords\nend\n</cell>\n<code language=julia-1.4>",
  "    \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    cols =\
    \ zeros(Int, length(lst))\n    \n    for (i,row) in enumerate(lst)\n        rows\
    \ = rows + row\n        cols = cols + 1\n    end\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    coords = zeros(Int, length(lst))\n    \n   \
    \ for (i,row) in enumerate(lst)\n        coords[i] = findfirst(x->x==row, rows)\n\
    \    end\n    \n    coords = sort(coords)\n    \n    coords = reverse(coords)\n\
    \    \n    return coords\nend\n</cell>\n<code language=julia-1.5>", "    \n  \
    \  rows = sort(collect(enumerate(lst)))\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    \n    rows = sort(rows, by=x->-x[1])\n    \n    rows = sort(rows, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->-x[2])\n    \n    rows = sort(rows, by=x->x[3])\n\
    \    \n    rows = sort(rows, by=x->-x[3])\n    \n    rows = sort(rows, by=x->x[4])\n\
    \    \n    rows = sort(rows, by=x->-x[4])\n    \n    rows = sort(rows, by=x->x[5])\n\
    \    \n    rows = sort(rows, by=x->-x[5])\n    \n    rows = sort(rows, by=x->x[6])\n\
    \    \n    rows = sort(rows, by=x->-x[6])\n    \n    rows = sort(rows, by=x->x[7])\n\
    \    \n    rows = sort(rows, by=x->-x[7])\n    \n    rows = sort(rows, by=x->x[8])\n\
    \    \n    rows = sort(rows, by=x->-x[8])\n    \n    rows = sort(rows, by=x->x[9])\n\
    \    \n    rows = sort(rows, by=x->-x[9])\n    \n    rows = sort(rows, by=x->x[10])\n\
    \    \n    rows = sort(rows, by=x->-x[10])\n    \n    rows = sort(rows, by=x->x[11])\n\
    \    \n    rows = sort(rows, by=x->-x[11])\n    \n    rows = sort(rows, by=x->x[12])\n\
    \    \n    rows = sort(rows, by=x->-x[12])\n    \n    rows = sort(rows, by=x->x[13])\n\
    \    \n    rows = sort(rows, by=x->-x[13])\n    \n    rows = sort(rows, by=x->x[14])\n\
    \    \n    rows = sort(rows, by=x->-x[14])\n    \n    rows = sort(rows, by=x->x[15])\n\
    \    \n    rows = sort(rows, by=x->-x[15])\n    \n    rows = sort(rows, by=x->x[16])\n\
    \    \n    rows = sort(rows, by=x->-x[16])\n    \n    rows = sort(rows, by=x->x[17])\n\
    \    \n    rows = sort(rows, by=x->-x[17])\n    \n    rows = sort(rows, by=x->x[18])\n\
    \    \n    rows = sort(rows, by=x->-x[18])", "    if length(lst.[1]) == 0 \n \
    \       return [] \n    \n    rows = sort(collect(enumerate(lst.[1])))\n    cols\
    \ = sort(collect(enumerate(reverse(lst[1]))))\n    \n    coords = zeros(Int, 2)\n\
    \    \n    for (i,j) in rows \n        if j == x \n            coords[1] = i\n\
    \            break\n    end\n    \n    for (i,j) in cols \n        if i == x \n\
    \            coords[1] = j\n            break\n    end\n    \n    return coords\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    lst = sort(lst)\n    \n \
    \   rows = zeros(Int, length(lst))\n    cols = zeros(Int, length(lst))\n    \n\
    \    for row in 1:length(lst)\n        rows = rows + 1\n        cols = cols +\
    \ lst[row][end]\n    end\n    \n    rows = sort(rows)\n    cols = sort(cols)\n\
    \    \n    coords = zeros(Int, length(lst))\n    \n    for row in 1:length(lst)\n\
    \        coords[row] = ((rows - row), cols - lst[row][end])\n    end\n    \n \
    \   coords = sort(coords)\n    \n    return coords\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if length(lst)\
    \ == 0 \n        return [] \n    \n    rows = sort(collect(enumerate(lst)))\n\
    \    \n    rows = rows[rows[2] .< rows[3]]\n    \n    coords = zeros(Int, length(rows))\n\
    \    \n    for (i,row) in enumerate(rows)\n        coords[i] = row\n    end\n\
    \    \n    coords = coords[coords[2] .< coords[3]]\n    \n    coords = coords[coords[1]\
    \ .< x]\n    \n    coords = coords[coords[1] .< x]\n    \n    coords = coords[coords[1]\
    \ .< x]\n    \n    return coords\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    rows = sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[1,:])))\n\
    \    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = rows[rows\
    \ .<= x]\n    cols = cols[cols .<= x]\n    \n    coords = zip(rows, cols)\n  \
    \  \n    coords = sort!(coords)\n    \n    return coords\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    cols =\
    \ zeros(Int, length(lst))\n    \n    for (i,row) in enumerate(lst)\n        rows\
    \ = rows + row\n        cols = cols + ones(Int, length(row))\n    end\n    \n\
    \    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = rows[rows > x]\n\
    \    cols = cols[cols > x]\n    \n    rows = rows[cols > 0]\n    cols = cols[cols\
    \ > 0]\n    \n    rows = rows[rows > 0]\n    cols = cols[rows > 0]\n    \n   \
    \ rows = rows[cols > 0]\n    cols = cols[rows > 0]\n    \n    rows = rows[cols\
    \ > 0]\n    cols = cols[rows > 0]\n    \n    rows = rows[cols > 0]\n    cols =\
    \ cols[rows > 0]\n    \n    rows = rows[cols > 0]\n    cols = cols[rows > 0]\n\
    \    \n    rows = rows[cols > 0]\n    cols = cols[rows > 0]\n    \n    rows =\
    \ rows[cols > 0]\n    cols = cols[rows > 0]\n    \n    rows = rows[cols > 0]\n\
    \    cols = cols[rows > 0]\n    \n    rows = rows[cols > 0]\n    cols = cols[rows\
    \ > 0]\n    \n    rows = rows[cols > 0]\n    cols = cols[rows > 0]\n    \n   \
    \ rows = rows[cols > 0]\n    cols = cols[rows > 0]\n    \n    rows = rows[cols\
    \ > 0]\n    cols = cols[rows > 0]\n    \n    rows = rows[cols > 0]\n    cols =\
    \ cols[rows > 0]\n    \n    rows = rows[cols > 0]\n    cols = cols[rows > 0]\n\
    \    \n    rows = rows[cols > 0]\n    cols = cols[rows > 0]\n    \n    rows =\
    \ rows[cols > 0]\n    cols = cols[rows > 0]\n    \n    rows = rows[cols > 0]\n\
    \    cols = cols[rows > 0]\n    \n    rows = rows[cols > 0]\n    cols = cols[rows\
    \ > 0]\n    \n    rows = rows[cols > 0]\n    cols = cols[rows > 0]\n    \n   \
    \ rows = rows[cols > 0]\n    cols = cols[rows > 0]\n    \n    rows = rows[cols\
    \ > 0]\n    cols = cols[rows > 0]\n    \n    rows = rows[cols > 0]\n    cols =\
    \ cols[rows > 0]\n    \n    rows = rows[cols > 0]\n    col", "    \n    rows =\
    \ sort(collect(enumerate(lst)))\n    \n    rows = sort(rows, by=x->x[1])\n   \
    \ \n    rows = sort(rows, by=x->-x[1])\n    \n    rows = sort(rows, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->-x[2])\n    \n    return rows\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    rows = sort(collect(1:length(lst)))\n \
    \   cols = sort(collect(1:length(lst[1])))\n    \n    coords = Vector{Tuple{Int64,\
    \ Int64}}[]\n    for row in rows\n        append!(coords, Tuple{row, cols})\n\
    \    end\n    \n    coords = sort(coords, by=x->x[1])\n    coords = sort(coords,\
    \ by=x->x[2])\n    \n    return coords\nend\n</cell>\n<code language=julia-1.5>\n\
    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n \
    \   ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that returns the number of occurrences of an element in\
    \ a given list.", "    \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n\
    \    \n    for i = 1:length(lst)\n        rows = rows + lst[i][x]\n    end\n \
    \   \n    rows = sort(rows)\n    \n    cols = zeros(Int, length(lst))\n    \n\
    \    for i = 1:length(lst)\n        cols = cols + lst[i][end]\n    end\n    \n\
    \    cols = sort(cols)\n    \n    return zip(rows, cols)\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    rows = sort(collect(1:length(lst)))\n\
    \    cols = sort(collect(1:length(lst[[1]])))\n    \n    rows = sort(rows)\n \
    \   cols = sort(cols)\n    \n    coords = zeros(length(rows), length(cols))\n\
    \    \n    for (i,row) in enumerate(rows)\n        coords[i,:] = [row, cols]\n\
    \    end\n    \n    coords = coords[coords[:,1] .<= x, :]\n    coords = coords[coords[:,2]\
    \ .>= x, :]\n    \n    return coords\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rows = sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[1])))\n\
    \    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = ", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    rows = sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[1,:])))\n\
    \    \n    coords = Vector{Tuple{Int64, Int64}}[]\n    for row in rows\n     \
    \   coords = coords + [(row, cols[cols..end-1])]\n    end\n    \n    coords =\
    \ sort(coords, by=x->x[1])\n    coords = sort(coords, by=x->x[2])\n    \n    return\
    \ coords\nend\n</cell>\n<code language=julia-1.5>\nget_row([\n      [1,2,3,4,5,6],\n\
    \      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1,\
    \ 0), (2, 5), (2, 0)]\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ a list of tuples [(x1, y1), (x2, y2) ...] such that\neach tuple is a coordinate\
    \ - (row, columns), starting with 0.\nSort coordinates initially by rows in ascending\
    \ order.\nAlso, sort coordinates of the row by columns in descending order.\n\
    For example, get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n\
    \    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]", "    \n    rows = sort(collect(1:length(lst)))\n\
    \    columns = sort(collect(1:length(lst[1,:])))\n    \n    coords = Vector{Tuple{Int64,\
    \ Int64}}[]\n    \n    for row in rows\n        \n        append!(coords, Tuple{Int64,\
    \ Int64}(row, columns[columns == row]))\n    end\n    \n    coords = sort(coords,\
    \ by=x->x[1])\n    coords = sort(coords, by=x->x[2])\n    \n    return coords\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    rows = sort(collect(enumerate(lst)))\n    \n\
    \    rows = sort(rows, by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n\
    \    \n    rows = sort(rows, by=x->x[2])\n    \n    rows = sort(rows, by=x->-x[2])\n\
    \    \n    rows = sort(rows, by=x->x[3])\n    \n    rows = sort(rows, by=x->-x[3])\n\
    \    \n    rows = sort(rows, by=x->x[4])\n    \n    rows = sort(rows, by=x->-x[4])\n\
    \    \n    rows = sort(rows, by=x->x[5])\n    \n    rows = sort(rows, by=x->-x[5])\n\
    \    \n    rows = sort(rows, by=x->x[6])\n    \n    rows = sort(rows, by=x->-x[6])\n\
    \    \n    rows = sort(rows, by=x->x[7])\n    \n    rows = sort(rows, by=x->-x[7])\n\
    \    \n    rows = sort(rows, by=x->x[8])\n    \n    rows = sort(rows, by=x->-x[8])\n\
    \    \n    rows = sort(rows, by=x->x[9])\n    \n    rows = sort(rows, by=x->-x[9])\n\
    \    \n    rows = sort(rows, by=x->x[10])\n    \n    rows = sort(rows, by=x->-x[10])\n\
    \    \n    rows = sort(rows, by=x->x[11])\n    \n    rows = sort(rows, by=x->-x[11])\n\
    \    \n    rows = sort(rows, by=x->x[12])\n    \n    rows = sort(rows, by=x->-x[12])\n\
    \    \n    rows = sort(rows, by=x->x[13])\n    \n    rows = sort(rows, by=x->-x[13])\n\
    \    \n    rows = sort(rows, by=x->x[14])\n    \n    rows = sort(rows, by=x->-x[14])\n\
    \    \n    rows = sort(rows, by=x->x[15])\n    \n    rows = sort(rows, by=x->-x[15])\n\
    \    \n    rows = sort(rows, by=x->x[16])\n    \n    rows = sort(rows, by=x->-x[16])\n\
    \    \n    rows = sort(rows, by=x->x[17])\n    \n    rows = sort(rows, by=x->-x[17])\n\
    \    \n    rows = sort(rows, by=x->x[18])\n    \n    rows = sort(rows, by=x->-x[18])",
  "    \n    rows = sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[1])))\n\
    \    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n\
    \    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n\
    \    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n\
    \    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n\
    \    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n\
    \    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n\
    \    cols = cols[cols..end]\n    \n", "    \n    lst = sort(lst)\n    \n    rows\
    \ = zeros(Int, length(lst))\n    \n    for row in 1:length(lst)\n        \n  \
    \      rows = rows + 1\n        \n        lst = sort(lst[row])\n        \n   \
    \     columns = zeros(Int, length(lst))\n        \n        for col in 1:length(lst)\n\
    \            \n            columns = columns + 1\n            \n            if\
    \ lst[col] == x\n                \n                return [(row, columns)]\n \
    \           end\n        end\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    lst = sort(lst)\n    \n    rows = Vector{Tuple{Int64, Int64}}()\n   \
    \ \n    for row in lst\n        \n        columns = Vector{Int64}()\n        \n\
    \        for element in row\n            push!(columns, element)\n        end\n\
    \        \n        push!(rows, (length(columns), max(columns)))\n    end\n   \
    \ \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows = sort(rows,\
    \ by=last)\n    \n    rows = reverse(rows)\n    \n    rows = sort(rows, by=first)\n\
    \    \n    rows = reverse(rows)\n    \n    rows = sort(rows, by=first)\n    \n\
    \    rows = reverse(rows)\n    \n    rows = sort(rows, by=last)\n    \n    rows\
    \ = reverse(rows)\n    \n    rows = sort(rows, by=first)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = sort(rows, by=last)\n    \n    rows = reverse(rows)\n    \n\
    \    rows = sort(rows, by=first)\n    \n    rows = reverse(rows)\n    \n    rows\
    \ = sort(rows, by=last)\n    \n    rows = reverse(rows)\n    \n    rows = sort(rows,\
    \ by=first)\n    \n    rows = reverse(rows)\n    \n    rows = sort(rows, by=last)\n\
    \    \n    rows = reverse(rows)\n    \n    rows = sort(rows, by=first)\n    \n\
    \    rows = reverse(rows)\n    \n    rows = sort(rows, by=last)\n    \n    rows\
    \ = reverse(rows)\n    \n    rows = sort(rows, by=first)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = sort(rows, by=last)\n    \n    rows = reverse(rows)\n    \n\
    \    rows = sort(rows, by=first)\n    \n    rows = reverse(rows)\n    \n    rows\
    \ = sort(rows, by=last)\n    \n    rows = reverse(rows)\n    \n    rows = sort(rows,\
    \ by=first)\n    \n    rows = reverse(rows)\n    \n    rows = sort(rows, by=last)\n\
    \    \n    rows = reverse(rows)\n    \n    rows = sort(rows, by=first)\n    \n\
    \    rows = reverse(rows)\n    \n    rows = sort(rows, by=last)\n    \n    rows\
    \ = reverse(rows)\n    \n    rows = sort(rows, by=first)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = sort(rows, by=last)\n    \n    rows = reverse(rows)\n    \n\
    \    rows = sort(rows, by=first)\n    \n    rows = reverse(rows)\n    \n    rows\
    \ = sort(rows, by=last)\n    \n", "    \n    rows = sort(collect(enumerate(lst)))\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n\
    \    \n    rows = sort(rows, by=x->x[2])\n    \n    rows = sort(rows, by=x->-x[2])\n\
    \    \n    rows = sort(rows, by=x->x[3])\n    \n    rows = sort(rows, by=x->-x[3])\n\
    \    \n    rows = sort(rows, by=x->x[4])\n    \n    rows = sort(rows, by=x->-x[4])\n\
    \    \n    rows = sort(rows, by=x->x[5])\n    \n    rows = sort(rows, by=x->-x[5])\n\
    \    \n    rows = sort(rows, by=x->x[6])\n    \n    rows = sort(rows, by=x->-x[6])\n\
    \    \n    rows = sort(rows, by=x->x[7])\n    \n    rows = sort(rows, by=x->-x[7])\n\
    \    \n    rows = sort(rows, by=x->x[8])\n    \n    rows = sort(rows, by=x->-x[8])\n\
    \    \n    rows = sort(rows, by=x->x[9])\n    \n    rows = sort(rows, by=x->-x[9])\n\
    \    \n    rows = sort(rows, by=x->x[10])\n    \n    rows = sort(rows, by=x->-x[10])\n\
    \    \n    rows = sort(rows, by=x->x[11])\n    \n    rows = sort(rows, by=x->-x[11])\n\
    \    \n    rows = sort(rows, by=x->x[12])\n    \n    rows = sort(rows, by=x->-x[12])\n\
    \    \n    rows = sort(rows, by=x->x[13])\n    \n    rows = sort(rows, by=x->-x[13])\n\
    \    \n    rows = sort(rows, by=x->x[14])\n    \n    rows = sort(rows, by=x->-x[14])\n\
    \    \n    rows = sort(rows, by=x->x[15])\n    \n    rows = sort(rows, by=x->-x[15])\n\
    \    \n    rows = sort(rows, by=x->x[16])\n    \n    rows = sort(rows, by=x->-x[16])\n\
    \    \n    rows = sort(rows, by=x->x[17])\n    \n    rows = sort(rows, by=x->-x[17])\n\
    \    \n    rows = sort(rows, by=x->x[18])\n    \n    rows = sort(rows, by=x->-x[18])",
  "    \n    rows = sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[1])))\n\
    \    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = rows[cols\
    \ <= x]\n    cols = cols[rows >= x]\n    \n    rows = rows[cols <= x]\n    cols\
    \ = cols[rows >= x]\n    \n    rows = rows[cols <= x]\n    cols = cols[rows >=\
    \ x]\n    \n    rows = rows[cols <= x]\n    cols = cols[rows >= x]\n    \n   \
    \ rows = rows[cols <= x]\n    cols = cols[rows >= x]\n    \n    rows = rows[cols\
    \ <= x]\n    cols = cols[rows >= x]\n    \n    rows = rows[cols <= x]\n    cols\
    \ = cols[rows >= x]\n    \n    rows = rows[cols <= x]\n    cols = cols[rows >=\
    \ x]\n    \n    rows = rows[cols <= x]\n    cols = cols[rows >= x]\n    \n   \
    \ rows = rows[cols <= x]\n    cols = cols[rows >= x]\n    \n    rows = rows[cols\
    \ <= x]\n    cols = cols[rows >= x]\n    \n    rows = rows[cols <= x]\n    cols\
    \ = cols[rows >= x]\n    \n    rows = rows[cols <= x]\n    cols = cols[rows >=\
    \ x]\n    \n    rows = rows[cols <= x]\n    cols = cols[rows >= x]\n    \n   \
    \ rows = rows[cols <= x]\n    cols = cols[rows >= x]\n    \n    rows = rows[cols\
    \ <= x]\n    cols = cols[rows >= x]\n    \n    rows = rows[cols <= x]\n    cols\
    \ = cols[rows >= x]\n    \n    rows = rows[cols <= x]\n    cols = cols[rows >=\
    \ x]\n    \n    rows = rows[cols <= x]\n    cols = cols[rows >= x]\n    \n   \
    \ rows = rows[cols <= x]\n    cols = cols[rows >= x]\n    \n    rows = rows[cols\
    \ <= x]\n    cols = cols[rows >= x]\n    \n    rows = rows[cols <= x]\n    cols\
    \ = cols[rows >= x]\n    \n    rows = rows[cols <= x]\n    cols = cols[rows >=\
    \ x]\n    \n    rows = rows[cols <= x]\n    cols = cols[rows >= x]\n    \n   \
    \ rows = rows[cols <= x]\n    cols = cols[rows >= x]\n    \n", "    \n    rows\
    \ = sort(collect(enumerate(lst)))\n    \n    rows = sort(rows, by=x->x[1])\n \
    \   \n    rows = sort(rows, by=x->-x[1])\n    \n    rows = sort(rows, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->-x[2])\n    \n    return rows\nend\n</cell>\n\
    <code language=julia-1.5>\nget_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n\
    \      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    </cell>\n<text>\nExercise 2\nWrite a function that finds the number of occurrences\
    \ of x in a nested list.\nFor example, get_count([\n      [1,2,3,4,5,6],\n   \
    \   [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == 3", "    \n    lst = sort(lst)\n\
    \    \n    rows = zeros(Int, length(lst))\n    \n    for (i,row) in enumerate(lst)\n\
    \        rows[i] = row\n    end\n    \n    rows = sort(rows)\n    \n    rows =\
    \ reverse(rows)\n    \n    columns = zeros(Int, length(lst))\n    \n    for (i,col)\
    \ in enumerate(lst)\n        columns[i] = col\n    end\n    \n    columns = sort(columns)\n\
    \    \n    columns = reverse(columns)\n    \n    coords = zeros(Int, length(lst))\n\
    \    \n    for (i,coord) in enumerate(zip(rows, columns))\n        coords[i] =\
    \ coord\n    end\n    \n    coords = sort(coords)\n    \n    coords = reverse(coords)\n\
    \    \n    coords = coords[findfirst(x->x==x, coords)]\n    \n    return coords\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    rows = sort(collect(1:length(lst)))\n\
    \    cols = sort(collect(1:length(lst[1])))\n    \n    rows = sort(rows)\n   \
    \ cols = sort(cols)\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n\
    \    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n\
    \    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n\
    \    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n\
    \    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n\
    \    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n\
    \    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n", "    \n    rows = sort(collect(enumerate(lst)))\n    \n    rows = sort(rows,\
    \ by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n    \n    return rows\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    rows = sort(collect(1:length(lst)))\n\
    \    cols = sort(collect(1:length(lst[1])))\n    \n    rows = sort(rows)\n   \
    \ cols = sort(cols)\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n\
    \    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n\
    \    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n\
    \    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n\
    \    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n\
    \    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n\
    \    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n", "    \n    rows = sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[1])))\n\
    \    \n    coords = Vector{Tuple{Int64, Int64}}(undef, 0)\n    \n    for row in\
    \ rows\n        for col in cols\n            if lst[row][col] == x\n         \
    \       push!(coords, Tuple{row, col})\n            end\n        end\n    end\n\
    \    \n    sort(coords, rev=true)\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    rows = sort(collect(enumerate(lst)))\n    \n    rows = rows[rows[[1]]\
    \ .== x]\n    \n    rows = rows[rows[[2]] .> rows[[1]]]\n    \n    rows = rows[rows[[2]]\
    \ .> rows[[1]]]\n    \n    rows = rows[rows[[2]] .> rows[[1]]]\n    \n    rows\
    \ = rows[rows[[2]] .> rows[[1]]]\n    \n    rows = rows[rows[[2]] .> rows[[1]]]\n\
    \    \n    rows = rows[rows[[2]] .> rows[[1]]]\n    \n    rows = rows[rows[[2]]\
    \ .> rows[[1]]]\n    \n    rows = rows[rows[[2]] .> rows[[1]]]\n    \n    rows\
    \ = rows[rows[[2]] .> rows[[1]]]\n    \n    rows = rows[rows[[2]] .> rows[[1]]]\n\
    \    \n    rows = rows[rows[[2]] .> rows[[1]]]\n    \n    rows = rows[rows[[2]]\
    \ .> rows[[1]]]\n    \n    rows = rows[rows[[2]] .> rows[[1]]]\n    \n    rows\
    \ = rows[rows[[2]] .> rows[[1]]]\n    \n    rows = rows[rows[[2]] .> rows[[1]]]\n\
    \    \n    rows = rows[rows[[2]] .> rows[[1]]]\n    \n    rows = rows[rows[[2]]\
    \ .> rows[[1]]]\n    \n    rows = rows[rows[[2]] .> rows[[1]]]\n    \n    rows\
    \ = rows[rows[[2]] .> rows[[1]]]\n    \n    rows = rows[rows[[2]] .> rows[[1]]]\n\
    \    \n    rows = rows[rows[[2]] .> rows[[1]]]\n    \n    rows = rows[rows[[2]]\
    \ .> rows[[1]]]\n    \n    rows = rows[rows[[2]] .> rows[[1]]]\n    \n    rows\
    \ = rows[rows[[2]] .> rows[[1]]]\n    \n    rows = rows[rows[[2]] .> rows[[1]]]\n\
    \    \n    rows = rows[rows[[2]] .> rows[[1]]]\n    \n    rows = rows[rows[[2]]\
    \ .> rows[[1]]]\n    \n    rows = rows[rows[[2]] .> rows[[1]]]\n    \n    rows\
    \ = rows[rows[[2]] .", "    \n    rows = sort(collect(1:length(lst)))\n    cols\
    \ = sort(collect(1:length(lst[rows])), by=length, reverse=true)\n    \n    coords\
    \ = zeros(length(rows), length(cols))\n    \n    for (i,row) in enumerate(rows)\n\
    \        for (c,col) in enumerate(cols)\n            coords[i,c] = Tuple(row,\
    \ col)\n        end\n    end\n    \n    coords = coords[coords[:,1] .== x,:]\n\
    \    \n    coords = coords[sortperm(coords[:,2]),:]\n    \n    return coords\n\
    end\n</cell>\n<code language=julia-1.5>\nget_row([\n      [1,2,3,4,5,6],\n   \
    \   [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0),\
    \ (2, 5), (2, 0)]\n</cell>\n<text>\nExercise 2\nWrite a function that finds all\
    \ the coordinates of x in the given list.\nThe function should return a list of\
    \ tuples, where each tuple is a coordinate - (row, columns), starting with 0.\n\
    Sort coordinates initially by rows in ascending order.\nAlso, sort coordinates\
    \ of the row by columns in descending order.\nThe function should work for any\
    \ nested list.", "    \n    lst = sort(lst)\n    \n    rows = Vector{Tuple{Int64,\
    \ Int64}}()\n    \n    for row in lst\n        \n        columns = Vector{Int64}()\n\
    \        \n        for element in row\n            push!(columns, element)\n \
    \       end\n        \n        push!(rows, (length(columns), columns))\n    end\n\
    \    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    columns\
    \ = sort(lst[end][end])\n    \n    columns = reverse(columns)\n    \n    rows\
    \ = reverse(rows)\n    \n    rows = reverse(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = reverse(rows)\n    \n    rows = reverse(rows)\n    \n    rows\
    \ = reverse(rows)\n    \n    rows = reverse(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = reverse(rows)\n    \n    rows = reverse(rows)\n    \n    rows\
    \ = reverse(rows)\n    \n    rows = reverse(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = reverse(rows)\n    \n    rows = reverse(rows)\n    \n    rows\
    \ = reverse(rows)\n    \n    rows = reverse(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = reverse(rows)\n    \n    rows = reverse(rows)\n    \n    rows\
    \ = reverse(rows)\n    \n    rows = reverse(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = reverse(rows)\n    \n    rows = reverse(rows)\n    \n    rows\
    \ = reverse(rows)\n    \n    rows = reverse(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = reverse(rows)\n    \n    rows = reverse(rows)\n    \n    rows\
    \ = reverse(rows)\n    \n    rows = reverse(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = reverse(rows)\n    \n    rows = reverse(rows)\n    \n    rows\
    \ = reverse(rows)\n    \n    rows = reverse(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = reverse(rows)\n    \n    rows = reverse(rows)\n    \n    rows\
    \ = reverse(rows)\n    \n    rows = reverse(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = reverse(rows)\n    \n    rows = reverse(rows)\n    \n    rows\
    \ = reverse(rows)\n    \n    rows = reverse(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = reverse(rows)\n    \n    rows = reverse(rows)\n    \n    rows\
    \ = reverse(rows)\n    \n    rows = reverse(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = reverse(rows)\n    \n    rows = reverse(rows)\n    \n    rows\
    \ = reverse(rows)\n    \n    rows = reverse(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    ", "    \n    rows = sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[1])))\n\
    \    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n", "    \n    lst = sort(lst)\n    \n    rows\
    \ = zeros(Int, length(lst))\n    cols = zeros(Int, length(lst))\n    \n    for\
    \ (i,row) in enumerate(lst)\n        rows = rows + row\n        cols = cols +\
    \ 1\n    end\n    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows\
    \ = reverse(rows)\n    cols = reverse(cols)\n    \n    coords = zeros(Int, length(lst))\n\
    \    \n    for (i,row) in enumerate(lst)\n        coords[i] = findfirst(x->x==row,\
    \ rows)\n    end\n    \n    coords = sort(coords)\n    \n    coords = reverse(coords)\n\
    \    \n    return coords\nend\n</cell>\n<code language=julia-1.5>", "    \n  \
    \  rows = sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[1])))\n\
    \    \n    coords = Vector{Tuple{Int64, Int64}}[]\n    \n    for row in rows\n\
    \        append!(coords, Tuple{Int64, Int64}(0, row))\n        for col in cols\n\
    \            if lst[row][col] == x\n                append!(coords, Tuple{Int64,\
    \ Int64}(row, col))\n            end\n        end\n    end\n    \n    coords =\
    \ sort(coords, by=(x->x[1], x->x[2]))\n    \n    return coords\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    rows = sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[1])))\n\
    \    \n    coords = Vector{Tuple{Int64, Int64}}[]\n    for row in rows\n     \
    \   coords = coords + [(row, cols[cols..end])]\n    end\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n",
  "    \n    rows = sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[1])))\n\
    \    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = ", "    \n    rows = sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[rows])),\
    \ by=length, reverse=true)\n    \n    coords = zeros(length(rows), length(cols))\n\
    \    \n    for (i,row) in enumerate(rows)\n        for (c,col) in enumerate(cols)\n\
    \            coords[i,c] = Tuple(row, col)\n        end\n    end\n    \n    coords\
    \ = coords[coords[:,1] .== x,:]\n    \n    coords = coords[coords[:,2] .== x,:]\n\
    \    \n    return coords\nend\n</cell>\n<code language=julia-1.5>\nget_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n</cell>\n<code language=julia-1.5>\n\
    get_row([], 1) == []\n</cell>\n<code language=julia-1.5>\nget_row([[], [1], [1,\
    \ 2, 3]], 3) == [(2, 2)]\n</cell>\n<text>\nExercise\nWrite a function that finds\
    \ the number of occurrences of an element in a given list.", "    if length(lst.[1])\
    \ == 0 \n        return [] \n    else \n        rows = sort(collect(1:length(lst)))\n\
    \        cols = sort(collect(1:length(lst[1])))\n        \n        rows = sort(rows,\
    \ by=x->-x)\n        cols = sort(cols, by=x->-x)\n        \n        rows = sort(rows,\
    \ by=x->-x)\n        cols = sort(cols, by=x->-x)\n        \n        rows = sort(rows,\
    \ by=x->-x)\n        cols = sort(cols, by=x->-x)\n        \n        rows = sort(rows,\
    \ by=x->-x)\n        cols = sort(cols, by=x->-x)\n        \n        rows = sort(rows,\
    \ by=x->-x)\n        cols = sort(cols, by=x->-x)\n        \n        rows = sort(rows,\
    \ by=x->-x)\n        cols = sort(cols, by=x->-x)\n        \n        rows = sort(rows,\
    \ by=x->-x)\n        cols = sort(cols, by=x->-x)\n        \n        rows = sort(rows,\
    \ by=x->-x)\n        cols = sort(cols, by=x->-x)\n        \n        rows = sort(rows,\
    \ by=x->-x)\n        cols = sort(cols, by=x->-x)\n        \n        rows = sort(rows,\
    \ by=x->-x)\n        cols = sort(cols, by=x->-x)\n        \n        rows = sort(rows,\
    \ by=x->-x)\n        cols = sort(cols, by=x->-x)\n        \n        rows = sort(rows,\
    \ by=x->-x)\n        cols = sort(cols, by=x->-x)\n        \n        rows = sort(rows,\
    \ by=x->-x)\n        cols = sort(cols, by=x->-x)\n        \n        rows = sort(rows,\
    \ by=x->-x)\n        cols = sort(cols, by=x->-x)\n        \n        rows = sort(rows,\
    \ by=x->-x)\n        cols = sort(cols, by=x->-x)\n        \n        rows = sort(rows,\
    \ by=x->-x)\n        cols = sort(cols, by=x->-x)\n        \n        rows = sort(rows,\
    \ by=x->-x)\n        cols = sort(cols, by=x->-x)\n        \n        rows = sort(rows,\
    \ by=x->-x)\n        cols = sort(cols, by=x->-x)\n        \n        rows = sort(rows,\
    \ by=x->-x)\n        cols = sort(cols, by=x->-x)\n        \n        rows = sort(rows,\
    \ by=x->-x)\n        cols = sort(cols, by=x->", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    lst = sort(lst)\n    \n    rows = zeros(Int,\
    \ length(lst))\n    cols = zeros(Int, length(lst))\n    \n    for (i,row) in enumerate(lst)\n\
    \        \n        rows = rows + 1\n        cols = cols + length(row)\n      \
    \  \n        if x == row\n            \n            return [(i, j)  for j in (1:cols)\
    \ ]\n        end\n    end\n    \n    return []\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(lst.[1]) == 0 \n        return [] \n    else \n        rows = sort(collect(1:length(lst)))\n\
    \        cols = sort(collect(1:length(lst[1])))\n        \n        rows = sort(rows[cols..end])\n\
    \        cols = sort(cols[rows..end])\n        \n        rows = sort(rows[cols..end])\n\
    \        cols = sort(cols[rows..end])\n        \n        rows = sort(rows[cols..end])\n\
    \        cols = sort(cols[rows..end])\n        \n        rows = sort(rows[cols..end])\n\
    \        cols = sort(cols[rows..end])\n        \n        rows = sort(rows[cols..end])\n\
    \        cols = sort(cols[rows..end])\n        \n        rows = sort(rows[cols..end])\n\
    \        cols = sort(cols[rows..end])\n        \n        rows = sort(rows[cols..end])\n\
    \        cols = sort(cols[rows..end])\n        \n        rows = sort(rows[cols..end])\n\
    \        cols = sort(cols[rows..end])\n        \n        rows = sort(rows[cols..end])\n\
    \        cols = sort(cols[rows..end])\n        \n        rows = sort(rows[cols..end])\n\
    \        cols = sort(cols[rows..end])\n        \n        rows = sort(rows[cols..end])\n\
    \        cols = sort(cols[rows..end])\n        \n        rows = sort(rows[cols..end])\n\
    \        cols = sort(cols[rows..end])\n        \n        rows = sort(rows[cols..end])\n\
    \        cols = sort(cols[rows..end])\n        \n        rows = sort(rows[cols..end])\n\
    \        cols = sort(cols[rows..end])\n        \n        rows = sort(rows[cols..end])\n\
    \        cols = sort(cols[rows..end])\n        \n        rows = sort(rows[cols..end])\n\
    \        cols = sort(cols[rows..end])\n        \n        rows = sort(rows[cols..end])\n\
    \        cols = sort(cols[rows..end])\n        \n        rows = sort(rows[cols..end])\n\
    \        cols = sort(cols[rows..end])\n        \n        rows = sort(rows[cols..end])\n\
    \        cols = sort(cols[rows..end])\n        \n        rows = sort(rows[cols..end])\n\
    \        cols = sort(cols[rows..end])\n        \n        rows = sort(rows[cols..end])\n\
    \        cols = sort(col", "    \n    lst = sort(lst)\n    \n    rows = zeros(Int,\
    \ length(lst))\n    cols = zeros(Int, length(lst))\n    \n    for (i,row) in enumerate(lst)\n\
    \        \n        rows = rows + row\n        cols = cols + 1\n        \n    \
    \    if i == x\n            \n            rows = sort(rows)\n            cols\
    \ = sort(cols)\n            \n            rows = reverse(rows)\n            cols\
    \ = reverse(cols)\n            \n            rows = reverse(rows)\n          \
    \  cols = reverse(cols)\n            \n            return [(i, rows[i]), (i, cols[i])]\n\
    \        end\n    end\n    \n    return []\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    cols =\
    \ zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n        rows = rows\
    \ + lst[i][x]\n        cols = cols + lst[i][end]\n    end\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    coords = zeros(length(lst), 2)\n    \n    for\
    \ i = 1:length(lst)\n        coords[i] = (i-1, cols[i])\n    end\n    \n    coords\
    \ = sort(coords)\n    \n    return coords\nend\n</cell>\n<code language=julia-1.5>\n\
    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n \
    \   ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n</cell>\n<code language=julia-1.5>\n\
    get_row([], 1) == []\n</cell>\n<code language=julia-1.5>\nget_row([[], [1], [1,\
    \ 2, 3]], 3) == [(2, 2)]\n</cell>\n<text>\nProblem 3", "    \n    lst = sort(lst)\n\
    \    \n    rows = zeros(Int, length(lst))\n    \n    for row in 1:length(lst)\n\
    \        rows = rows + 1\n        \n        lst = sort(lst[row])\n        \n \
    \       columns = zeros(Int, length(lst))\n        \n        for col in 1:length(lst)\n\
    \            columns = columns + 1\n            \n            if lst[col] == x\n\
    \                tup = Tuple{Int64, Int64}(row, columns)\n                \n \
    \               push!(rows, tup)\n            end\n        end\n    end\n    \n\
    \    return rows\nend\n</cell>\n<code language=julia-1.3>\nget_row([\n      [1,2,3,4,5,6],\n\
    \      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1,\
    \ 0), (2, 5), (2, 0)]\n</cell>\n<code language=julia-1.3>\nget_row([], 1) == []\n\
    </cell>\n<code language=julia-1.3>\nget_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\
    </cell>\n<text>\nProblem 3\nWrite a function that returns the number of times\
    \ a given value appears in a given list.\nFor example, given lst = [1, 2, 3, 1,\
    \ 2, 3], and x = 2, the function should return 3.\nWrite a function that returns\
    \ the number of times a given value appears in a given list.\nFor example, given\
    \ lst = [1, 2, 3, 1, 2, 3], and x = 2, the function should return 3.\nWrite a\
    \ function that returns the number of times a given value appears in a given list.\n\
    For example, given lst = [1, 2, 3, 1, 2, 3], and x = 2, the function should return\
    \ 3.\nWrite a function that returns the number of times a given value appears\
    \ in a given list.\nFor example, given lst = [1, 2, 3, 1, 2, 3], and x = 2, the\
    \ function should return 3.\nWrite a function that returns the number of times\
    \ a given value appears in a given list.\nFor example, given lst = [1, 2, 3, 1,\
    \ 2, 3], and x = 2, the function should return 3.\nWrite a function that returns\
    \ the number of times a given value appears in a given list.\nFor example, given\
    \ lst = [1, 2, 3, 1, 2, 3], and x = 2, the function should return 3.\nWrite a\
    \ function that returns the number of times a given value appears in a given list.\n\
    For example, given lst = [1, 2, 3, 1, 2, 3], and x = 2, the function should return\
    \ 3.\nWrite a function that returns the number of times a given value appears\
    \ in a given list.\nFor example, given lst = [1, 2, 3, 1, 2, 3], and x = 2, the\
    \ function should return 3.\nWrite a function that returns the number of times\
    \ a given value appears in a given list.\nFor example, given lst = [1, 2, 3, 1,\
    \ 2, 3], and x = 2, the function should return 3.\nWrite a function that returns\
    \ the number of times a given value appears in a given list.\nFor example, given\
    \ lst = [1, 2, 3, 1, 2, ", "    \n    rows = sort(collect(enumerate(lst)))\n \
    \   \n    rows = sort(rows, by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n\
    \    \n    rows = sort(rows, by=x->x[2])\n    \n    rows = sort(rows, by=x->-x[2])\n\
    \    \n    rows = sort(rows, by=x->x[3])\n    \n    rows = sort(rows, by=x->-x[3])\n\
    \    \n    rows = sort(rows, by=x->x[4])\n    \n    rows = sort(rows, by=x->-x[4])\n\
    \    \n    rows = sort(rows, by=x->x[5])\n    \n    rows = sort(rows, by=x->-x[5])\n\
    \    \n    rows = sort(rows, by=x->x[6])\n    \n    rows = sort(rows, by=x->-x[6])\n\
    \    \n    rows = sort(rows, by=x->x[7])\n    \n    rows = sort(rows, by=x->-x[7])\n\
    \    \n    rows = sort(rows, by=x->x[8])\n    \n    rows = sort(rows, by=x->-x[8])\n\
    \    \n    rows = sort(rows, by=x->x[9])\n    \n    rows = sort(rows, by=x->-x[9])\n\
    \    \n    rows = sort(rows, by=x->x[10])\n    \n    rows = sort(rows, by=x->-x[10])\n\
    \    \n    rows = sort(rows, by=x->x[11])\n    \n    rows = sort(rows, by=x->-x[11])\n\
    \    \n    rows = sort(rows, by=x->x[12])\n    \n    rows = sort(rows, by=x->-x[12])\n\
    \    \n    rows = sort(rows, by=x->x[13])\n    \n    rows = sort(rows, by=x->-x[13])\n\
    \    \n    rows = sort(rows, by=x->x[14])\n    \n    rows = sort(rows, by=x->-x[14])\n\
    \    \n    rows = sort(rows, by=x->x[15])\n    \n    rows = sort(rows, by=x->-x[15])\n\
    \    \n    rows = sort(rows, by=x->x[16])\n    \n    rows = sort(rows, by=x->-x[16])\n\
    \    \n    rows = sort(rows, by=x->x[17])\n    \n    rows = sort(rows, by=x->-x[17])\n\
    \    \n    rows = sort(rows, by=x->x[18])\n    \n    rows = sort(rows, by=x->-x[18])",
  "    \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    cols =\
    \ zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n        rows = rows\
    \ + lst[i][x]\n        cols = cols + lst[i][end]\n    end\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    coords = zeros(length(rows), length(cols))\n\
    \    \n    for i = 1:length(rows)\n        coords[i, :] = [rows, cols]\n    end\n\
    \    \n    coords = sort(coords)\n    \n    return coords\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    rows = sort(collect(1:length(lst)))\n    cols\
    \ = sort(collect(1:length(lst[rows])), by = x => -x)\n    \n    coords = zeros(length(rows),\
    \ length(cols))\n    \n    for i = 1:length(rows)\n        coords[i, :] = [rows,\
    \ cols]\n    end\n    \n    coords = sort(coords, by = x => x[1])\n    coords\
    \ = sort(coords, by = x => x[2])\n    \n    return coords\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    rows = sort(collect(enumerate(lst)))\n    \n\
    \    rows = reverse(rows)\n    \n    columns = sort(collect(enumerate(rows[end][1])))\n\
    \    \n    columns = reverse(columns)\n    \n    coords = zeros(length(rows),\
    \ length(columns))\n    \n    for (i,row) in enumerate(rows)\n        for (c,col)\
    \ in enumerate(columns)\n            if row[1] == col[1]\n                coords[i,c]\
    \ = (c,row[1])\n            end\n        end\n    end\n    \n    coords = sort(coords,\
    \ by=x->x[1])\n    \n    coords = reverse(coords)\n    \n    return coords\nend\n\
    </cell>\n<code language=julia-1.5>", "    if length(lst.[1]) == 0 \n        return\
    \ [] \n    else \n        rows = sort(collect(1:length(lst)))\n        cols =\
    \ sort(collect(1:length(lst[1])))\n        \n        rows = sort(rows)\n     \
    \   cols = sort(cols)\n        \n        rows = rows[cols..end]\n        cols\
    \ = cols[rows..end]\n        \n        rows = rows[cols..end]\n        cols =\
    \ cols[rows..end]\n        \n        rows = rows[cols..end]\n        cols = cols[rows..end]\n\
    \        \n        rows = rows[cols..end]\n        cols = cols[rows..end]\n  \
    \      \n        rows = rows[cols..end]\n        cols = cols[rows..end]\n    \
    \    \n        rows = rows[cols..end]\n        cols = cols[rows..end]\n      \
    \  \n        rows = rows[cols..end]\n        cols = cols[rows..end]\n        \n\
    \        rows = rows[cols..end]\n        cols = cols[rows..end]\n        \n  \
    \      rows = rows[cols..end]\n        cols = cols[rows..end]\n        \n    \
    \    rows = rows[cols..end]\n        cols = cols[rows..end]\n        \n      \
    \  rows = rows[cols..end]\n        cols = cols[rows..end]\n        \n        rows\
    \ = rows[cols..end]\n        cols = cols[rows..end]\n        \n        rows =\
    \ rows[cols..end]\n        cols = cols[rows..end]\n        \n        rows = rows[cols..end]\n\
    \        cols = cols[rows..end]\n        \n        rows = rows[cols..end]\n  \
    \      cols = cols[rows..end]\n        \n        rows = rows[cols..end]\n    \
    \    cols = cols[rows..end]\n        \n        rows = rows[cols..end]\n      \
    \  cols = cols[rows..end]\n        \n        rows = rows[cols..end]\n        cols\
    \ = cols[rows..end]\n        \n        rows = rows[cols..end]\n        cols =\
    \ cols[rows..end]\n        \n        rows = rows[cols..end]\n        cols = cols[rows..end]\n\
    \        \n        rows = rows[cols..end]\n        cols = cols[rows..end]\n  \
    \      \n        rows = rows[cols..end]\n        cols = cols[rows..end]\n    \
    \    \n        rows = rows[cols..end]\n        cols = cols[rows..end]\n      \
    \  \n        rows = rows[cols..end]\n        cols = cols[rows..end]\n        \n\
    \        rows = rows[cols..", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n\
    \    cols = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n       \
    \ rows = rows + lst[i][x]\n        cols = cols + lst[i][end-x+1:end]\n    end\n\
    \    \n    return [(i, j) for (i, j) in zip(sort(rows), sort(cols))]\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    lst = sort(lst)\n    \n    rows = zeros(Int,\
    \ length(lst))\n    cols = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n\
    \        rows = rows + lst[i][x]\n        cols = cols + lst[i][end]\n    end\n\
    \    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    return zip(rows,\
    \ cols)\nend\n</cell>\n<code language=julia-1.5>", "    if lst == []\n       \
    \ return Vector{Tuple{Int64, Int64}}()\n    end\n    \n    rows = sort(collect(enumerate(lst)))\n\
    \    \n    rows = reverse(rows)\n    \n    rows = sort(rows, by=x->x[1])\n   \
    \ \n    rows = reverse(rows)\n    \n    rows = sort(rows, by=x->x[2])\n    \n\
    \    rows = reverse(rows)\n    \n    return rows\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
