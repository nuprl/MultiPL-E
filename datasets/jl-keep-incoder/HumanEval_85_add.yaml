name: HumanEval_85_add
language: julia
prompt: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
  \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n  \
  \  \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88])\
  \ == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
  \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
completions: ["    even = lst[1 : (end-1)]\n    odd = lst[2:end]\n    even.+=(odd.*2)\n\
    \    return even\nend\n</cell>\n<code language=julia-1.5>\n@assert add([1]) ==\
    \ 1 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 4 \n@assert\
    \ add([4, 2, 6, 7]) == 8 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2,\
    \ 6, 7]) == 12 \n@assert add([4, 2, 6, 7]) == 14 \n@assert add([4, 2, 6, 7]) ==\
    \ 16 \n@assert add([4, 2, 6, 7]) == 18 \n@assert add([4, 2, 6, 7]) == 20 \n@assert\
    \ add([4, 2, 6, 7]) == 22 \n@assert add([4, 2, 6, 7]) == 24 \n@assert add([4,\
    \ 2, 6, 7]) == 26 \n@assert add([4, 2, 6, 7]) == 28 \n@assert add([4, 2, 6, 7])\
    \ == 30 \n@assert add([4, 2, 6, 7]) == 32 \n@assert add([4, 2, 6, 7]) == 34 \n\
    @assert add([4, 2, 6, 7]) == 36 \n@assert add([4, 2, 6, 7]) == 38 \n@assert add([4,\
    \ 2, 6, 7]) == 40 \n@assert add([4, 2, 6, 7]) == 42 \n@assert add([4, 2, 6, 7])\
    \ == 44 \n@assert add([4, 2, 6, 7]) == 46 \n@assert add([4, 2, 6, 7]) == 48 \n\
    @assert add([4, 2, 6, 7]) == 50 \n@assert add([4, 2, 6, 7]) == 52 \n@assert add([4,\
    \ 2, 6, 7]) == 54 \n@assert add([4, 2, 6, 7]) == 56 \n@assert add([4, 2, 6, 7])\
    \ == 58 \n@assert add([4, 2, 6, 7]) == 60 \n@assert add([4, 2, 6, 7]) == 62 \n\
    @assert add([4, 2, 6, 7]) == 64 \n@assert add([4, 2, 6, 7]) == 66 \n@assert add([4,\
    \ 2, 6, 7]) == 68 \n@assert add([4, 2, 6, 7]) == 70 \n@assert add([4, 2, 6, 7])\
    \ == 72 \n@assert add([4, 2, 6, 7]) == 74 \n@assert add([4, 2, 6, 7]) == 76 \n\
    @assert add([4, 2, 6, 7]) == 78 \n@assert add([4, 2, 6, 7]) == 80 \n@assert add([4,\
    \ 2, 6, 7]) == 82 \n@assert add([4, ", "    even = lst[1::2]\n    odd = lst[1::2]\n\
    \    even.+=(odd.-even)\n    return even\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 3.2\nWrite a function that returns\
    \ the sum of all the elements of a vector. \nWrite a function that returns the\
    \ product of all elements of a vector. \nWrite a function that returns the maximum\
    \ of a vector. \nWrite a function that returns the minimum of a vector. \nWrite\
    \ a function that returns the absolute value of a vector. \nWrite a function that\
    \ returns the sign of a vector. \nWrite a function that returns the absolute value\
    \ of a vector. \nWrite a function that returns the sign of a vector. \nWrite a\
    \ function that returns the sign of a vector. \nWrite a function that returns\
    \ the sign of a vector. \nWrite a function that returns the sign of a vector.\
    \ \nWrite a function that returns the sign of a vector. \nWrite a function that\
    \ returns the sign of a vector. \nWrite a function that returns the sign of a\
    \ vector. \nWrite a function that returns the sign of a vector. \nWrite a function\
    \ that returns the sign of a vector. \nWrite a function that returns the sign\
    \ of a vector. \nWrite a function that returns the sign of a vector. \nWrite a\
    \ function that returns the sign of a vector. \nWrite a function that returns\
    \ the sign of a vector. \nWrite a function that returns the sign of a vector.\
    \ \nWrite a function that returns the sign of a vector. \nWrite a function that\
    \ returns the sign of a vector. \nWrite a function that returns the sign of a\
    \ vector. \nWrite a function that returns the sign of a vector. \nWrite a function\
    \ that returns the sign of a vector. \nWrite a function that returns the sign\
    \ of a vector. \nWrite a function that returns the sign of a vector. \nWrite a\
    \ function that returns the sign of a vector. \nWrite a function that returns\
    \ the sign of a vector. \nWrite a function that returns the sign of a vector.\
    \ \nWrite a function that returns the sign of a vector. \nWrite a function that\
    \ returns the sign of a vector. \nWrite a function that returns the sign of a\
    \ vector. \nWrite a function that returns the sign of a vector. \nWrite a function\
    \ that returns the sign of a vector. \nWrite a function that returns the sign\
    \ of a vector. \nWrite a function that returns the sign of a vector. \nWrite a\
    \ function that returns the sign of a vector. \nWrite a function that returns\
    \ the sign of a vector. \nWrite a function that returns the sign of a vector.\
    \ \nWrite a function that returns the sign of a vector. \nWrite a function that\
    \ returns the sign of a vector. \nWrite a function that returns the sign of a\
    \ vector. \nWrite a function that returns the sign of a vector. \nWrite a function\
    \ that returns the sign of a vector. \nWrite a function that returns the sign\
    \ of a vector. \nWrite a function that returns the sign of a vector. \nWrite a\
    \ function that returns the sign of a vector. \nWrite a function that returns\
    \ the sign ", "    even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x\
    \ -> x % 2 != 0, lst)]\n    sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise: Write a function that returns the\
    \ sum of the squares of the even numbers in a given list.", "    even = lst[1\
    \ :end]\n    odd = lst[2 :end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n\
    <code language=julia-1.5>\nadd(lst)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ called mul that multiplies all the elements in a list. \nGiven a non-empty list\
    \ of integers lst. multiply the even elements that are at odd indices..", "  \
    \  evens = lst[findall(x->x%2==0, lst)]\n    evens = evens[2:end]\n    return\
    \ sum(evens)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of the even numbers in a list.", "    even = lst[1 : (end-lst)]\n  \
    \  odd = lst[2 : end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nGiven a\
    \ non-empty list of integers lst. add the odd elements that are at even indices..",
  "    evens = lst[1::2]\n    odds = lst[1::2]\n    evens = evens[evens .!= 0]\n \
    \   evens = sum(evens)\n    odds = sum(odds)\n    return evens + odds\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the product of all the numbers in a given vector. \n\
    For example, prod([1, 2, 3]) should return 6. \nHint: use the reduce function.",
  "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    evens\
    \ = evens[findall(x -> x != 0, evens)]\n    evens = sum(evens)\n    return evens\n\
    end\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\n\
    Exercise 3\nGiven a non-empty list of integers lst. add the odd elements that\
    \ are at even indices..", "    evens = lst[findall(x -> mod(x,2)==0, lst)]\n \
    \   return sum(evens)\nend\n</cell>\n<code language=julia-1.5>\n@assert add([1])\
    \ == 1 \n@assert add([1,2,3]) == 6 \n@assert add([1,2,3,4,5]) == 10 \n@assert\
    \ add([1,2,3,4,5,6,7,8,9,10]) == 20 \n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the sum of the numbers in the list lst that are divisible by 3.",
  "    even = lst[1 :] \n    odd = lst[2 :] \n    even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even", "    even = lst[1 :end] \n    odd = lst[2 :end] \n\
    \    even.+ odd.+ \nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of the even numbers in a list.", "    even = lst[1::2]\n    odd = lst[2::2]\n\
    \    even.+=(odd.+0)/2\n    return even\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the even elements of an array. \nWrite a function that returns the\
    \ sum of the odd elements of an array. \nWrite a function that returns the sum\
    \ of the even and odd elements of an array. \nWrite a function that returns the\
    \ sum of the even and odd elements of a vector. \nWrite a function that returns\
    \ the sum of the even and odd elements of a matrix. ", "    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.+0)/2\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 2 \n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the elements of a\
    \ vector. \nWrite a function that returns the product of the elements of a vector.\
    \ \nWrite a function that returns the maximum of a vector. \nWrite a function\
    \ that returns the minimum of a vector. \nWrite a function that returns the sum\
    \ of the squares of the elements of a vector. \nWrite a function that returns\
    \ the product of the squares of the elements of a vector. \nWrite a function that\
    \ returns the maximum of the squares of the elements of a vector. \nWrite a function\
    \ that returns the minimum of the squares of the elements of a vector. \nWrite\
    \ a function that returns the sum of the cubes of the elements of a vector. \n\
    Write a function that returns the product of the cubes of the elements of a vector.\
    \ \nWrite a function that returns the maximum of the cubes of the elements of\
    \ a vector. \nWrite a function that returns the minimum of the cubes of the elements\
    \ of a vector. \nWrite a function that returns the sum of the exponential of the\
    \ elements of a vector. \nWrite a function that returns the product of the exponential\
    \ of the elements of a vector. \nWrite a function that returns the maximum of\
    \ the exponential of the elements of a vector. \nWrite a function that returns\
    \ the minimum of the exponential of the elements of a vector. \nWrite a function\
    \ that returns the sum of the natural logarithms of the elements of a vector.\
    \ \nWrite a function that returns the product of the natural logarithms of the\
    \ elements of a vector. \nWrite a function that returns the maximum of the natural\
    \ logarithms of the elements of a vector. \nWrite a function that returns the\
    \ minimum of the natural logarithms of the elements of a vector. \nWrite a function\
    \ that returns the sum of the reciprocals of the elements of a vector. \nWrite\
    \ a function that returns the product of the reciprocals of the elements of a\
    \ vector. \nWrite a function that returns the maximum of the reciprocals of the\
    \ elements of a vector. \nWrite a function that returns the minimum of the reciprocals\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ squares of the elements of a vector. \nWrite a function that returns the product\
    \ of the squares of the elements of a vector. \nWrite a function that returns\
    \ the maximum of the squares of the elements of a vector. \nWrite a function that\
    \ returns the minimum of the squares of the elements of a vector. \nWrite a function\
    \ that returns the sum of the cubes of the elements of a vector. \nWrite a function\
    \ that returns the product of the cubes of the elements of a vector. \nWrite a\
    \ function that returns the maximum of the cubes of the elements of a vector.\
    \ \nWrite a function that returns the minimum of the cubes of the elements of\
    \ a vector. \nWrite a function that returns the sum of the exponential of the\
    \ elements of a vector. \nWrite a function that returns the product of the exponential\
    \ of the elements of a vector", "    evens = lst[1 : (end-1)]\n    odds = lst[2:end]\n\
    \    evens = filter(x -> x % 2 == 0, evens)\n    odds = filter(x -> x % 2 != 0,\
    \ odds)\n    evens = map(x -> x + 2, evens)\n    odds = map(x -> x + 1, odds)\n\
    \    return sum(evens) + sum(odds)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time add(lst)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ sum of all the even numbers in a given list. \nWrite a function that returns\
    \ the sum of all the odd numbers in a given list. \nWrite a function that returns\
    \ the product of all the numbers in a given list. \nWrite a function that returns\
    \ the maximum of a given list. \nWrite a function that returns the minimum of\
    \ a given list. \nWrite a function that returns the product of all the numbers\
    \ in a given list that are divisible by 7. \nWrite a function that returns the\
    \ product of all the numbers in a given list that are divisible by 3. \nWrite\
    \ a function that returns the product of all the numbers in a given list that\
    \ are divisible by 5. \nWrite a function that returns the product of all the numbers\
    \ in a given list that are divisible by 2. \nWrite a function that returns the\
    \ product of all the numbers in a given list that are divisible by 1. \nWrite\
    \ a function that returns the product of all the numbers in a given list that\
    \ are divisible by 0. \nWrite a function that returns the product of all the numbers\
    \ in a given list that are divisible by 6. \nWrite a function that returns the\
    \ product of all the numbers in a given list that are divisible by 4. \nWrite\
    \ a function that returns the product of all the numbers in a given list that\
    \ are divisible by 8. \nWrite a function that returns the product of all the numbers\
    \ in a given list that are divisible by 2. \nWrite a function that returns the\
    \ product of all the numbers in a given list that are divisible by 6. \nWrite\
    \ a function that returns the product of all the numbers in a given list that\
    \ are divisible by 8. \nWrite a function that returns the product of all the numbers\
    \ in a given list that are divisible by 4. \nWrite a function that returns the\
    \ product of all the numbers in a given list that are divisible by 2. \nWrite\
    \ a function that returns the product of all the numbers in a given list that\
    \ are divisible by 4. \nWrite a function that returns the product of all the numbers\
    \ in a given list that are divisible by 2. \nWrite a function that returns the\
    \ product of all the numbers in a given list that are divisible by 2. \nWrite\
    \ a function that returns the product of all the numbers in a given list that\
    \ are divisible by 2. \nWrite a function that returns the product of all the numbers\
    \ in a given list that are divisible by 2. \nWrite a function that returns the\
    \ product of all the numbers in a given list that are divisible by 2. \nWrite\
    \ a function that returns the product ", "    evens = lst[1 : (end-1)]\n    odds\
    \ = lst[2:end]\n    evens = filter(x -> x % 2 == 0, evens)\n    odds = filter(x\
    \ -> x % 2 == 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x ->\
    \ x + 1, odds)\n    return sum(evens) + sum(odds)\nend\n</cell>\n<code language=julia-1.0>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nGiven a non-empty list of integers\
    \ lst. add the odd elements that are at even indices..", "    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    evens = sum(evens)\n   \
    \ return evens\nend\n</cell>\n<code language=julia-1.5>\n@assert add([1]) == 1\
    \ \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert\
    \ add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2,\
    \ 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) ==\
    \ 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert\
    \ add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2,\
    \ 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) ==\
    \ 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert\
    \ add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2,\
    \ 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) ==\
    \ 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert\
    \ add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2,\
    \ 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) ==\
    \ 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert\
    \ add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2,\
    \ 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) ==\
    \ 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert\
    \ add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2,\
    \ 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]", " \
    \   even = lst[1::2]\n    odd = lst[1::2]\n    even.+=(odd.+0)\n    return even\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7]))\
    \ == 2 \n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum of\
    \ the numbers in a given list. \nThe function should work for both vectors and\
    \ matrices.", "    even = lst[1 :] \n    odd = lst[2 :] \n    even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even", "    evens = lst[findall(x->x%2==0, lst)]\n\
    \    evens = evens[2:end]\n    return sum(evens)\nend\n</cell>\n<code language=julia-1.0>\n\
    @assert add([1]) == 1 \n@assert add([1,2,3]) == 6 \n@assert add([4,2,6,7]) ==\
    \ 10 \n@assert add([4,2,6,7,8,9,10,11,12,13,14,15]) == 25 \n</cell>\n<text>\n\
    Problem 7\nGiven a non-empty list of integers lst, return a list where each element\
    \ is the sum of the elements at the corresponding index in the original list lst.",
  "    evens = lst[1 : (end-lst)]\n    evens = filter(x -> x % 2 == 0, evens)\n  \
    \  evens = map(x -> x + 2, evens)\n    return sum(evens)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the sum of the even numbers in a given list of integers.\
    \ \nGiven a non-empty list of integers lst. add the even elements that are at\
    \ odd indices..", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    return\
    \ sum(evens)\nend\n</cell>\n<code language=julia-1.5>\nadd(lst)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of all the numbers in a given\
    \ list.", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[findall(x\
    \ -> x % 2 != 0, evens)]\n    return sum(evens)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add([1]) == 1 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6,\
    \ 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10\
    \ \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert\
    \ add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, ", "    even = lst[findall(x -> x % 2 == 0, lst)]\n    odd\
    \ = lst[findall(x -> x % 2 != 0, lst)]\n    even.+=(odd.+=0)\n    return even\n\
    end\n</cell>\n<code language=julia-1.0>\nadd([4, 2, 6, 7])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a list of integers and returns the sum\
    \ of the even elements and the sum of the odd elements. \nWrite a function that\
    \ takes a list of integers and returns the sum of the even elements and the sum\
    \ of the odd elements. \nWrite a function that takes a list of integers and returns\
    \ the sum of the even elements and the sum of the odd elements. \nWrite a function\
    \ that takes a list of integers and returns the sum of the even elements and the\
    \ sum of the odd elements. \nWrite a function that takes a list of integers and\
    \ returns the sum of the even elements and the sum of the odd elements. \nWrite\
    \ a function that takes a list of integers and returns the sum of the even elements\
    \ and the sum of the odd elements. \nWrite a function that takes a list of integers\
    \ and returns the sum of the even elements and the sum of the odd elements. \n\
    Write a function that takes a list of integers and returns the sum of the even\
    \ elements and the sum of the odd elements. \nWrite a function that takes a list\
    \ of integers and returns the sum of the even elements and the sum of the odd\
    \ elements. \nWrite a function that takes a list of integers and returns the sum\
    \ of the even elements and the sum of the odd elements. \nWrite a function that\
    \ takes a list of integers and returns the sum of the even elements and the sum\
    \ of the odd elements. \nWrite a function that takes a list of integers and returns\
    \ the sum of the even elements and the sum of the odd elements. \nWrite a function\
    \ that takes a list of integers and returns the sum of the even elements and the\
    \ sum of the odd elements. \nWrite a function that takes a list of integers and\
    \ returns the sum of the even elements and the sum of the odd elements. \nWrite\
    \ a function that takes a list of integers and returns the sum of the even elements\
    \ and the sum of the odd elements. \nWrite a function that takes a list of integers\
    \ and returns the sum of the even elements and the sum of the odd elements. \n\
    Write a function that takes a list of integers and returns the sum of the even\
    \ elements and the sum of the odd elements. \nWrite a function that takes a list\
    \ of integers and returns the sum of the even elements and the sum of the odd\
    \ elements. \nWrite a function that takes a list of integers and returns the sum\
    \ of the even elements and the sum of the odd elements. \nWrite a function that\
    \ takes a list of integers and returns the sum of the even elements and the sum\
    \ of the odd elements. \nWrite a function that takes a list of integers and returns\
    \ the sum of the even elements and the sum of the odd elements. \nWrite a function\
    \ that takes a list of integers and returns the sum of the even elements and the\
    \ sum of the odd elements. \nWrite a function that takes a list of integers and\
    \ returns the sum of the even elements and the sum of the odd elements. \nWrite\
    \ a ", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = sum(evens)\n    return evens\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add([1]) == 1 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6,\
    \ 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10\
    \ \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert\
    \ add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]", "    even = lst[1::2]\n    odd = lst[1::2]\n    even.+=(odd.+0)/2\n\
    \    return even\nend\n</cell>\n<code language=julia-1.5>\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 2 \n</cell>\n<text>\nExercise 3\nGiven a non-empty list of integers\
    \ lst. add the odd elements that are at even indices..", "    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.+=0)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.0>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 5\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the numbers in the\
    \ list lst that have even indices. \nFor example, sum([4, 2, 6, 7]) == 5", " \
    \   even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x %\
    \ 2 != 0, lst)]\n    even.+(odd.-even)\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector and returns the sum of the even elements. \n\
    Write a function that takes a vector and returns the sum of the odd elements.\
    \ \nWrite a function that takes a vector and returns the sum of the even and odd\
    \ elements. \nWrite a function that takes a vector and returns the sum of the\
    \ even and odd elements. \nWrite a function that takes a vector and returns the\
    \ sum of the even and odd elements. \nWrite a function that takes a vector and\
    \ returns the sum of the even and odd elements. \nWrite a function that takes\
    \ a vector and returns the sum of the even and odd elements. \nWrite a function\
    \ that takes a vector and returns the sum of the even and odd elements. \nWrite\
    \ a function that takes a vector and returns the sum of the even and odd elements.\
    \ \nWrite a function that takes a vector and returns the sum of the even and odd\
    \ elements. \nWrite a function that takes a vector and returns the sum of the\
    \ even and odd elements. \nWrite a function that takes a vector and returns the\
    \ sum of the even and odd elements. \nWrite a function that takes a vector and\
    \ returns the sum of the even and odd elements. \nWrite a function that takes\
    \ a vector and returns the sum of the even and odd elements. \nWrite a function\
    \ that takes a vector and returns the sum of the even and odd elements. \nWrite\
    \ a function that takes a vector and returns the sum of the even and odd elements.\
    \ \nWrite a function that takes a vector and returns the sum of the even and odd\
    \ elements. \nWrite a function that takes a vector and returns the sum of the\
    \ even and odd elements. \nWrite a function that takes a vector and returns the\
    \ sum of the even and odd elements. \nWrite a function that takes a vector and\
    \ returns the sum of the even and odd elements. \nWrite a function that takes\
    \ a vector and returns the sum of the even and odd elements. \nWrite a function\
    \ that takes a vector and returns the sum of the even and odd elements. \nWrite\
    \ a function that takes a vector and returns the sum of the even and odd elements.\
    \ \nWrite a function that takes a vector and returns the sum of the even and odd\
    \ elements. \nWrite a function that takes a vector and returns the sum of the\
    \ even and odd elements. \nWrite a function that takes a vector and returns the\
    \ sum of the even and odd elements. \nWrite a function that takes a vector and\
    \ returns the sum of the even and odd elements. \nWrite a function that takes\
    \ a vector and returns the sum of the even and odd elements. \nWrite a function\
    \ that takes a vector and returns the sum of the even and odd elements. \nWrite\
    \ a function that takes a vector and returns the sum of the even and odd elements.\
    \ \nWrite a function that takes a vector and returns the sum of the even and odd\
    \ element", "    even = lst[1 : (end-1)]\n    odd = lst[2:end]\n    even.+=(odd.*2)\n\
    \    return even\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n\
    </cell>\n<text>\nExercise 3\nWrite a function called multiply that takes in a\
    \ list of integers and returns the product of the even elements that are at odd\
    \ indices.", "    even = lst[1 : (end-lst)]\n    odd = lst[2 : end]\n    even.+=(odd.*2)\n\
    \    return even\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n\
    </cell>\n<text>\nExercise 2\nGiven a non-empty list of integers lst. add the odd\
    \ elements that are at even indices..", "    evens = lst[findall(x -> x % 2 ==\
    \ 0, lst)]\n    evens = evens[2:end]\n    return sum(evens)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype ",
  "    even = lst[1 : (end-1)]\n    odd = lst[2:end]\n    even.+=(odd.*2)\n    return\
    \ even\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n\
    <text>\nExercise 2\nWrite a function called multiply that multiplies each element\
    \ of a vector by its index.", "    even = lst[1 : (end-lst)]\n    odd = lst[2\
    \ : end]\n    even.+=(odd.*2)\n    return even\nend", "    evens = lst[findall(x\
    \ -> mod(x,2)==0, lst)]\n    evens = evens[2:end]\n    return sum(evens)\nend\n\
    </cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the squares of the numbers in the\
    \ given list.", "    evens = lst[1 : (end-1)]\n    evens = filter(x -> x % 2 ==\
    \ 0, evens)\n    evens = map(x -> x + 1, evens)\n    evens = reduce(+, evens)\n\
    \    return evens\nend\n</cell>\n<code language=julia-1.5>\n@assert add([1]) ==\
    \ 1 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 4 \n@assert\
    \ add([4, 2, 6, 7]) == 6 \n@assert add([4, 2, 6, 7]) == 8 \n@assert add([4, 2,\
    \ 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 12 \n@assert add([4, 2, 6, 7]) ==\
    \ 14 \n@assert add([4, 2, 6, 7]) == 16 \n@assert add([4, 2, 6, 7]) == 18 \n@assert\
    \ add([4, 2, 6, 7]) == 20 \n@assert add([4, 2, 6, 7]) == 22 \n@assert add([4,\
    \ 2, 6, 7]) == 24 \n@assert add([4, 2, 6, 7]) == 26 \n@assert add([4, 2, 6, 7])\
    \ == 28 \n@assert add([4, 2, 6, 7]) == 30 \n@assert add([4, 2, 6, 7]) == 32 \n\
    @assert add([4, 2, 6, 7]) == 34 \n@assert add([4, 2, 6, 7]) == 36 \n@assert add([4,\
    \ 2, 6, 7]) == 38 \n@assert add([4, 2, 6, 7]) == 40 \n@assert add([4, 2, 6, 7])\
    \ == 42 \n@assert add([4, 2, 6, 7]) == 44 \n@assert add([4, 2, 6, 7]) == 46 \n\
    @assert add([4, 2, 6, 7]) == 48 \n@assert add([4, 2, 6, 7]) == 50 \n@assert add([4,\
    \ 2, 6, 7]) == 52 \n@assert add([4, 2, 6, 7]) == 54 \n@assert add([4, 2, 6, 7])\
    \ == 56 \n@assert add([4, 2, 6, 7]) == 58 \n@assert add([4, 2, 6, 7]) == 60 \n\
    @assert add([4, 2, 6, 7]) == 62 \n@assert add([4, 2, 6, 7]) == 64 \n@assert add([4,\
    \ 2, 6, 7]) == 66 \n@assert add([4, 2, 6, 7]) == 68 \n@assert add([4, 2, 6, 7])\
    \ == 70 \n@assert add([4, 2, 6, 7]) == 72 \n@assert add([4, 2, 6, 7]) == 74 \n\
    @assert add([4, 2, 6, 7]) == 76 \n@assert add([4, 2, 6, 7]) == 78 \n", "    evens\
    \ = lst[1 : (end-1)]\n    odds = lst[2:end]\n    evens = filter(x -> x % 2 ==\
    \ 0, evens)\n    odds = filter(x -> x % 2 != 0, odds)\n    evens = map(x -> x\
    \ + 1, evens)\n    odds = map(x -> x + 1, odds)\n    return sum(evens) + sum(odds)\n\
    end\n</cell>\n<code language=julia-1.5>\nadd(lst)\n</cell>\n<text>\nExercise 3\n\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..", "    even = lst[1 : (end-lst)]\n    odd = lst[(end-lst)+1 : (end-lst)]\n\
    \    even.+=(odd.*2)\n    return even\nend", "    evens = lst[1 : (end-1)]\n \
    \   evens = filter(x -> x % 2 == 0, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = map(x -> x % 2 == 0, evens)\n    evens = filter(x -> x != false,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x % 2 == 0,\
    \ evens)\n    evens = filter(x -> x != false, evens)\n    evens = map(x -> x +\
    \ 1, evens)\n    evens = map(x -> x % 2 == 0, evens)\n    evens = filter(x ->\
    \ x != false, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x ->\
    \ x % 2 == 0, evens)\n    evens = filter(x -> x != false, evens)\n    evens =\
    \ map(x -> x + 1, evens)\n    evens = map(x -> x % 2 == 0, evens)\n    evens =\
    \ filter(x -> x != false, evens)\n    evens = map(x -> x + 1, evens)\n    evens\
    \ = map(x -> x % 2 == 0, evens)\n    evens = filter(x -> x != false, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x % 2 == 0, evens)\n\
    \    evens = filter(x -> x != false, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = map(x -> x % 2 == 0, evens)\n    evens = filter(x -> x != false,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x % 2 == 0,\
    \ evens)\n    evens = filter(x -> x != false, evens)\n    evens = map(x -> x +\
    \ 1, evens)\n    evens = map(x -> x % 2 == 0, evens)\n    evens = filter(x ->\
    \ x != false, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x ->\
    \ x % 2 == 0, evens)\n    evens = filter(x -> x != false, evens)\n    evens =\
    \ map(x -> x + 1, evens)\n    evens = map(x -> x % 2 == 0, evens)\n    evens =\
    \ filter(x -> x != false, evens)\n    evens = map(x -> x + 1, evens)\n    evens\
    \ = map(x -> x % 2 == 0, evens)\n    evens = filter(x -> x != false, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x % 2 == ", "    even\
    \ = lst[1 : (end-1)]\n    odd = lst[2:end]\n    return sum(even) + sum(odd)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert add([1]) == 1 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, ",
  "    even = lst[1::2]\n    odd = lst[1::2]\n    even.+=(odd.+0)/2\n    return even\n\
    end\n</cell>\n<code language=julia-1.5>\nadd(lst)\n</cell>\n<text>\nExercise 2\n\
    Given a non-empty list of integers lst. add the odd elements that are at even\
    \ indices..", "    even = lst[1::2]\n    odd = lst[1::2]\n    even.+=(odd.+0)\n\
    \    return even\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the even\
    \ numbers in a given list.", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n\
    \    evens = evens[2:end]\n    return sum(evens)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add([1]) == 1 \n@assert add([2, 3]) == 5 \n@assert add([4, 5, 6]) == 10\
    \ \n@assert add([7, 8, 9]) == 17 \n@assert add([10, 11, 12, 13, 14]) == 26 \n\
    @assert add([15, 16, 17, 18, 19, 20]) == 42 \n@assert add([21, 22, 23, 24, 25,\
    \ 26]) == 63 \n@assert add([27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\
    \ 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,\
    \ 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,\
    \ 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96,\
    \ 97, 98, 99, 100]) == 101 \n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the squares of the even numbers in a given list.", "    evens\
    \ = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[findall(x -> x % 2 !=\
    \ 0, evens)]\n    return sum(evens)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add([1]) == 1 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6,\
    \ 7]) == 10 \n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of elements in a list that are less than a given value.", "    even = lst[1\
    \ : (end-1)]\n    odd = lst[(end-1):end]\n    even.+=(odd.*2)\n    return even\n\
    end\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function called sub that subtracts the even elements that\
    \ are at odd indices from the odd elements that are at even indices.", "    evens\
    \ = lst[1 : (end-1)]\n    odds = lst[(end-1) : (end)]\n    evens = evens[findall(x\
    \ -> x % 2 == 0, evens)]\n    odds = odds[findall(x -> x % 2 == 1, odds)]\n  \
    \  evens = sum(evens)\n    odds = sum(odds)\n    return evens + odds\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the even numbers in a given list. \nWrite\
    \ a function that returns the sum of the odd numbers in a given list. \nWrite\
    \ a function that returns the product of the even numbers in a given list. \n\
    Write a function that returns the product of the odd numbers in a given list.\
    \ \nWrite a function that returns the maximum of a given list. \nWrite a function\
    \ that returns the minimum of a given list. \nWrite a function that returns the\
    \ product of the squares of the even numbers in a given list. \nWrite a function\
    \ that returns the product of the squares of the odd numbers in a given list.\
    \ \nWrite a function that returns the sum of the squares of the even numbers in\
    \ a given list. \nWrite a function that returns the sum of the squares of the\
    \ odd numbers in a given list. \nWrite a function that returns the product of\
    \ the squares of the even numbers in a given list. \nWrite a function that returns\
    \ the product of the squares of the odd numbers in a given list. \nWrite a function\
    \ that returns the sum of the cubes of the even numbers in a given list. \nWrite\
    \ a function that returns the sum of the cubes of the odd numbers in a given list.\
    \ \nWrite a function that returns the product of the cubes of the even numbers\
    \ in a given list. \nWrite a function that returns the product of the cubes of\
    \ the odd numbers in a given list. \nWrite a function that returns the sum of\
    \ the reciprocals of the even numbers in a given list. \nWrite a function that\
    \ returns the sum of the reciprocals of the odd numbers in a given list. \nWrite\
    \ a function that returns the product of the reciprocals of the even numbers in\
    \ a given list. \nWrite a function that returns the product of the reciprocals\
    \ of the odd numbers in a given list. \nWrite a function that returns the sum\
    \ of the reciprocals of the squares of the even numbers in a given list. \nWrite\
    \ a function that returns the sum of the reciprocals of the squares of the odd\
    \ numbers in a given list. \nWrite a function that returns the product of the\
    \ reciprocals of the squares of the even numbers in a given list. \nWrite a function\
    \ that returns the product of the reciprocals of the squares of the odd numbers\
    \ in a given list. \nWrite a function that returns the sum of the reciprocals\
    \ of the cubes of the even numbers in a given list. \nWrite a function that returns\
    \ the sum of the reciprocals of the cubes of the odd numbers in a given list.\
    \ \nWrite a function that returns the product of the reci", "    evens = lst[1\
    \ : (end-lst)]\n    evens = filter(x -> x % 2 == 0, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = reduce(+, evens)\n    return evens\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the sum of the even numbers in a given list.", "   \
    \ even = lst[1 : (end-1)]\n    odd = lst[2:end]\n    return sum(even) + sum(odd)\n\
    end\n</cell>\n<code language=julia-1.3>\nadd(lst)\n</cell>\n<text>\nExercise 2\n\
    Write a function called evens that takes a vector and returns the even indices\
    \ of the vector.", "    even = lst[1 : (end-1)]\n    odd = lst[(end-2):end]\n\
    \    even.+=(odd.+0)\n    return even\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add(Vector{Int64}([4, 2, 6, 7])) == 2 \n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the sum of the numbers in a vector. \nThe function\
    \ should work for both real and integer vectors.", "    even = lst[1::2]\n   \
    \ odd = lst[1::2]\n    even.+=(odd.+=0)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function called evensum that takes in a list of integers and returns the sum\
    \ of all the even integers in the list.", "    even = lst[1 :end] \n    odd =\
    \ lst[2 :end] \n    even.+ odd.+ sum(even)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add([1]) == 1 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6,\
    \ 7]) == 7 \n</cell>\n<text>\nExercise 2\nGiven a non-empty list of integers lst.\
    \ add the odd elements that are at even indices..", "    even = lst[1 : (end-1)]\n\
    \    odd = lst[2 : end]\n    return sum(even) + sum(odd)\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector and returns the sum of the squares\
    \ of the elements of the vector.", "    even = lst[1 :end] \n    odd = lst[2 :end]\
    \ \n    return sum(even .+ odd) \nend\n</cell>\n<code language=julia-1.5>\nadd([4,\
    \ 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the product\
    \ of all the numbers in a given list.", "    evens = lst[findall(x -> x % 2 ==\
    \ 0, lst)]\n    evens = evens[2:end]\n    return sum(evens)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function called sub that subtracts the even elements that are at odd indices.",
  "    even = lst[1 : (end-lst)]\n    odd = lst[(end-lst) : (end-lst+1)]\n    return\
    \ sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\n@assert add([1])\
    \ == 1 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert\
    \ add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2,\
    \ 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) ==\
    \ 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert\
    \ add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2,\
    \ 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) ==\
    \ 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert\
    \ add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2,\
    \ 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) ==\
    \ 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert\
    \ add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2,\
    \ 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) ==\
    \ 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert\
    \ add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2,\
    \ 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) ==\
    \ 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert\
    \ add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2,\
    \ 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, ", "    even\
    \ = lst[1 : (end-1)]\n    odd = lst[2:end]\n    even.+=(odd.*2)\n    return even\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7]))\
    \ == 2 \n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of\
    \ the numbers in a vector. \nWrite a function that returns the product of the\
    \ numbers in a vector. \nWrite a function that returns the maximum of the numbers\
    \ in a vector. \nWrite a function that returns the minimum of the numbers in a\
    \ vector. \nWrite a function that returns the number of positive numbers in a\
    \ vector. \nWrite a function that returns the number of negative numbers in a\
    \ vector. \nWrite a function that returns the number of zeros in a vector. \n\
    Write a function that returns the number of ones in a vector. \nWrite a function\
    \ that returns the sum of the squares of the numbers in a vector. \nWrite a function\
    \ that returns the product of the squares of the numbers in a vector. \nWrite\
    \ a function that returns the sum of the cubes of the numbers in a vector. \n\
    Write a function that returns the product of the cubes of the numbers in a vector.\
    \ \nWrite a function that returns the sum of the exponential of the numbers in\
    \ a vector. \nWrite a function that returns the product of the exponential of\
    \ the numbers in a vector. \nWrite a function that returns the sum of the logarithms\
    \ of the numbers in a vector. \nWrite a function that returns the product of the\
    \ logarithms of the numbers in a vector. \nWrite a function that returns the sum\
    \ of the absolute values of the numbers in a vector. \nWrite a function that returns\
    \ the product of the absolute values of the numbers in a vector. \nWrite a function\
    \ that returns the sum of the natural logarithms of the numbers in a vector. \n\
    Write a function that returns the product of the natural logarithms of the numbers\
    \ in a vector. \nWrite a function that returns the sum of the reciprocals of the\
    \ numbers in a vector. \nWrite a function that returns the product of the reciprocals\
    \ of the numbers in a vector. \nWrite a function that returns the sum of the natural\
    \ logarithms of the squares of the numbers in a vector. \nWrite a function that\
    \ returns the product of the natural logarithms of the squares of the numbers\
    \ in a vector. \nWrite a function that returns the sum of the reciprocals of the\
    \ squares of the numbers in a vector. \nWrite a function that returns the product\
    \ of the reciprocals of the squares of the numbers in a vector. \nWrite a function\
    \ that returns the sum of the squares of the squares of the numbers in a vector.\
    \ \nWrite a function that returns the product of the squares of the squares of\
    \ the numbers in a vector. \nWrite a function that returns the sum of the cubes\
    \ of the cubes of the numbers in a vector. \nWrite a function that returns the\
    \ product of the cubes of the cubes of the numbers in a vector. \nWrite a function\
    \ that returns the sum of the exponential of the cubes of the numbers in a vector.\
    \ \nWrite a function that returns the product of the exponential of the cubes\
    \ of the numbers in a vector. \nWrite a function that returns the sum of the logarith",
  "    even = lst[1 : (end-1)]\n    odd = lst[2:end]\n    even.+=(odd.*2)\n    return\
    \ even\nend\n</cell>\n<code language=julia-1.5>\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 6\n</cell>\n<text>\nExercise 3.3\nWrite a function called subtract\
    \ that takes two vectors and subtracts one vector from the other. \nWrite a test\
    \ that passes when the subtract function works as expected.", "    evens = lst[1\
    \ : (end-1)]\n    odds = lst[(end-1) : (end)]\n    evens = evens[evens .% 2 ==\
    \ 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n    evens\
    \ = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens\
    \ .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n   \
    \ evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens\
    \ .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n   \
    \ evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens\
    \ .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n   \
    \ evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens\
    \ .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n   \
    \ evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens\
    \ .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n   \
    \ evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens\
    \ .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n   \
    \ evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens\
    \ .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n   \
    \ evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens\
    \ .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n   \
    \ evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens\
    \ .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n   \
    \ evens = evens[evens .!= 0]", "    evens = lst[1 : (end-1)]\n    evens = filter(x\
    \ -> x % 2 == 0, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x\
    \ + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens\
    \ = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x\
    \ + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens\
    \ = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x\
    \ + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens\
    \ = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x\
    \ + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens\
    \ = map(x -> x + 1, evens)\n    evens = map(", "    evens = lst[1 : (end-1)]\n\
    \    odds = lst[(end-1) : (end)]\n    return sum(evens) + sum(odds)\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add([1]) == 1 \n@assert add([4, 2, 6, 7]) ==\
    \ 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert\
    \ add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2,\
    \ 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) ==\
    \ 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert\
    \ add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2,\
    \ 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) ==\
    \ 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert\
    \ add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2,\
    \ 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) ==\
    \ 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert\
    \ add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2,\
    \ 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) ==\
    \ 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert\
    \ add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2,\
    \ 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) ==\
    \ 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert\
    \ add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2,\
    \ 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@", "    even = lst[1::2]\n \
    \   odd = lst[1::2]\n    even.+=(odd.-even)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 5\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the even numbers\
    \ in a given list.", "    evens = lst[1 : (end-1)]\n    odds = lst[2 : end]\n\
    \    evens = filter(x -> x % 2 == 0, evens)\n    odds = filter(x -> x % 2 == 1,\
    \ odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x -> x + 1, odds)\n\
    \    return sum(evens) + sum(odds)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add(Vector{Int64}([4, 2, 6, 7])) == 5\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the squares of the even numbers in a given\
    \ list of integers. \nWrite a function that returns the sum of the squares of\
    \ the odd numbers in a given list of integers. \nWrite a function that returns\
    \ the sum of the squares of the numbers in a given list of integers. \nWrite a\
    \ function that returns the sum of the squares of the numbers in a given list\
    \ of integers where the even numbers are at odd indices and the odd numbers are\
    \ at even indices.\nWrite a function that returns the sum of the squares of the\
    \ numbers in a given list of integers where the even numbers are at even indices\
    \ and the odd numbers are at odd indices.\nWrite a function that returns the sum\
    \ of the squares of the numbers in a given list of integers where the even numbers\
    \ are at even indices and the odd numbers are at odd indices.\nWrite a function\
    \ that returns the sum of the squares of the numbers in a given list of integers\
    \ where the even numbers are at odd indices and the odd numbers are at even indices.\n\
    Write a function that returns the sum of the squares of the numbers in a given\
    \ list of integers where the even numbers are at even indices and the odd numbers\
    \ are at odd indices.\nWrite a function that returns the sum of the squares of\
    \ the numbers in a given list of integers where the even numbers are at odd indices\
    \ and the odd numbers are at even indices.\nWrite a function that returns the\
    \ sum of the squares of the numbers in a given list of integers where the even\
    \ numbers are at even indices and the odd numbers are at odd indices.\nWrite a\
    \ function that returns the sum of the squares of the numbers in a given list\
    \ of integers where the even numbers are at odd indices and the odd numbers are\
    \ at even indices.\nWrite a function that returns the sum of the squares of the\
    \ numbers in a given list of integers where the even numbers are at even indices\
    \ and the odd numbers are at odd indices.\nWrite a function that returns the sum\
    \ of the squares of the numbers in a given list of integers where the even numbers\
    \ are at odd indices and the odd numbers are at even indices.\nWrite a function\
    \ that returns the sum of the squares of the numbers in a given list of integers\
    \ where the even numbers are at even indices and the odd numbers are at odd indices.\n\
    Write a function that returns the sum of the squares of the numbers in a given\
    \ list of integers where the even numbers are at odd indices and the odd numbers\
    \ are at even indices.\nWrite a function that returns the ", "    evens = lst[1\
    \ : (end-lst)]\n    evens = filter(x -> x % 2 == 0, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = map(x -> x + lst[1], evens)\n    return sum(evens)\n\
    end\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a list of integers and returns the sum\
    \ of the even elements in the list. \nWrite a function that takes a list of integers\
    \ and returns the sum of the odd elements in the list. \nWrite a function that\
    \ takes a list of integers and returns the sum of the even and odd elements in\
    \ the list. \nWrite a function that takes a list of integers and returns the sum\
    \ of the even and odd elements in the list using recursion. ", "    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    return sum(evens)\nend\n\
    </cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the squares of the even numbers\
    \ in a given list.", "    even = lst[findall(x -> x % 2 == 0, lst)]\n    odd =\
    \ lst[findall(x -> x % 2 != 0, lst)]\n    even.+ odd.\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a function called multiply\
    \ that multiplies a list of integers lst by an integer.", "    even = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    even.+(odd.-even)\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector and returns\
    \ the sum of the squares of the elements in the vector. \nFor example, add([4,\
    \ 2, 6, 7]) == 50.", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens\
    \ = evens[2:end]\n    evens = sum(evens)\n    return evens\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nGiven a\
    \ non-empty list of integers lst. add the odd elements that are at even indices..",
  "    even = lst[1 : (end-1)]\n    odd = lst[(end-1) : (end)]\n    even = sum(even)\n\
    \    odd = sum(odd)\n    return even + odd\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add([1]) == 1 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6,\
    \ 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n\
    @assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4,\
    \ 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7])\
    \ == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert\
    \ add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2,\
    \ 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) ==\
    \ 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert\
    \ add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2,\
    \ 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) ==\
    \ 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert\
    \ add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2,\
    \ 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) ==\
    \ 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert\
    \ add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2,\
    \ 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) ==\
    \ 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert\
    \ add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@", "    evens = lst[1\
    \ : (end-lst)]\n    odds = lst[2 : end]\n    evens + sum(odds)\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector and returns the sum of\
    \ the squares of the elements of the vector.", "    even = lst[1::2]\n    odd\
    \ = lst[1::2]\n    even.+=(odd.-even)\n    return even\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the even elements in a list. \nWrite a function that returns the\
    \ sum of the odd elements in a list. \nWrite a function that returns the product\
    \ of the even elements in a list. \nWrite a function that returns the product\
    \ of the odd elements in a list. \nWrite a function that returns the maximum of\
    \ a list. \nWrite a function that returns the minimum of a list. \nWrite a function\
    \ that returns the product of the squares of the even elements in a list. \nWrite\
    \ a function that returns the product of the squares of the odd elements in a\
    \ list. \nWrite a function that returns the sum of the squares of the even elements\
    \ in a list. \nWrite a function that returns the sum of the squares of the odd\
    \ elements in a list. \nWrite a function that returns the product of the cubes\
    \ of the even elements in a list. \nWrite a function that returns the product\
    \ of the cubes of the odd elements in a list. \nWrite a function that returns\
    \ the sum of the cubes of the even elements in a list. \nWrite a function that\
    \ returns the sum of the cubes of the odd elements in a list. \nWrite a function\
    \ that returns the product of the fifth powers of the even elements in a list.\
    \ \nWrite a function that returns the product of the fifth powers of the odd elements\
    \ in a list. \nWrite a function that returns the sum of the fifth powers of the\
    \ even elements in a list. \nWrite a function that returns the sum of the fifth\
    \ powers of the odd elements in a list. \nWrite a function that returns the product\
    \ of the seventh powers of the even elements in a list. \nWrite a function that\
    \ returns the product of the seventh powers of the odd elements in a list. \n\
    Write a function that returns the sum of the seventh powers of the even elements\
    \ in a list. \nWrite a function that returns the sum of the seventh powers of\
    \ the odd elements in a list. \nWrite a function that returns the product of the\
    \ ninth powers of the even elements in a list. \nWrite a function that returns\
    \ the product of the ninth powers of the odd elements in a list. \nWrite a function\
    \ that returns the sum of the ninth powers of the even elements in a list. \n\
    Write a function that returns the sum of the ninth powers of the odd elements\
    \ in a list. \nWrite a function that returns the product of the tenth powers of\
    \ the even elements in a list. \nWrite a function that returns the product of\
    \ the tenth powers of the odd elements in a list. \nWrite a function that returns\
    \ the sum of the tenth powers of the even elements in a list. \nWrite a function\
    \ that returns the sum of the tenth powers of the odd elements in a list. \nWrite\
    \ a function that returns the product of the twentieth power", "    even = lst[1\
    \ : (end-1)]\n    odd = lst[2:end]\n    even.+=(odd.*2)\n    return even\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) ==\
    \ 6\n</cell>\n<text>\nExercise 3\nWrite a function called multiply that takes\
    \ in a list of integers and returns the product of the even elements that are\
    \ at odd indices.", "    even = lst[1::2]\n    odd = lst[1::2]\n    even.+=(odd.-even)\n\
    \    return even\nend\n</cell>\n<code language=julia-1.3>\nadd(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the numbers in a\
    \ vector. \nGiven a vector v = [1, 2, 3, 4] your function should return 10. \n\
    Write a function that returns the sum of the numbers in a vector. \nGiven a vector\
    \ v = [1, 2, 3, 4] your function should return 10. \nWrite a function that returns\
    \ the sum of the numbers in a vector. \nGiven a vector v = [1, 2, 3, 4] your function\
    \ should return 10. \nWrite a function that returns the sum of the numbers in\
    \ a vector. \nGiven a vector v = [1, 2, 3, 4] your function should return 10.\
    \ \nWrite a function that returns the sum of the numbers in a vector. \nGiven\
    \ a vector v = [1, 2, 3, 4] your function should return 10. \nWrite a function\
    \ that returns the sum of the numbers in a vector. \nGiven a vector v = [1, 2,\
    \ 3, 4] your function should return 10. \nWrite a function that returns the sum\
    \ of the numbers in a vector. \nGiven a vector v = [1, 2, 3, 4] your function\
    \ should return 10. \nWrite a function that returns the sum of the numbers in\
    \ a vector. \nGiven a vector v = [1, 2, 3, 4] your function should return 10.\
    \ \nWrite a function that returns the sum of the numbers in a vector. \nGiven\
    \ a vector v = [1, 2, 3, 4] your function should return 10. \nWrite a function\
    \ that returns the sum of the numbers in a vector. \nGiven a vector v = [1, 2,\
    \ 3, 4] your function should return 10. \nWrite a function that returns the sum\
    \ of the numbers in a vector. \nGiven a vector v = [1, 2, 3, 4] your function\
    \ should return 10. \nWrite a function that returns the sum of the numbers in\
    \ a vector. \nGiven a vector v = [1, 2, 3, 4] your function should return 10.\
    \ \nWrite a function that returns the sum of the numbers in a vector. \nGiven\
    \ a vector v = [1, 2, 3, 4] your function should return 10. \nWrite a function\
    \ that returns the sum of the numbers in a vector. \nGiven a vector v = [1, 2,\
    \ 3, 4] your function should return 10. \nWrite a function that returns the sum\
    \ of the numbers in a vector. \nGiven a vector v = [1, 2, 3, 4] your function\
    \ should return 10. \nWrite a function that returns the sum of the numbers in\
    \ a vector. \nGiven a vector v = [1, 2, 3, 4] your function should return 10.\
    \ \nWrite a function that returns the sum of the numbers in a vector. \nGiven\
    \ a vector v = [1, 2, 3, 4] your function should return 10. \nWrite a function\
    \ that returns the sum of the numbers in a vector. \nGiven a vector ", "    even\
    \ = lst[1 : (end-1)]\n    odd = lst[(end-2):end]\n    even.+=(odd.*2)\n    return\
    \ even\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the numbers in a\
    \ vector. \nWrite a function that returns the sum of the numbers in a vector.\
    \ \nWrite a function that returns the sum of the numbers in a vector. \nWrite\
    \ a function that returns the sum of the numbers in a vector. \nWrite a function\
    \ that returns the sum of the numbers in a vector. \nWrite a function that returns\
    \ the sum of the numbers in a vector. \nWrite a function that returns the sum\
    \ of the numbers in a vector. \nWrite a function that returns the sum of the numbers\
    \ in a vector. \nWrite a function that returns the sum of the numbers in a vector.\
    \ \nWrite a function that returns the sum of the numbers in a vector. \nWrite\
    \ a function that returns the sum of the numbers in a vector. \nWrite a function\
    \ that returns the sum of the numbers in a vector. \nWrite a function that returns\
    \ the sum of the numbers in a vector. \nWrite a function that returns the sum\
    \ of the numbers in a vector. \nWrite a function that returns the sum of the numbers\
    \ in a vector. \nWrite a function that returns the sum of the numbers in a vector.\
    \ \nWrite a function that returns the sum of the numbers in a vector. \nWrite\
    \ a function that returns the sum of the numbers in a vector. \nWrite a function\
    \ that returns the sum of the numbers in a vector. \nWrite a function that returns\
    \ the sum of the numbers in a vector. \nWrite a function that returns the sum\
    \ of the numbers in a vector. \nWrite a function that returns the sum of the numbers\
    \ in a vector. \nWrite a function that returns the sum of the numbers in a vector.\
    \ \nWrite a function that returns the sum of the numbers in a vector. \nWrite\
    \ a function that returns the sum of the numbers in a vector. \nWrite a function\
    \ that returns the sum of the numbers in a vector. \nWrite a function that returns\
    \ the sum of the numbers in a vector. \nWrite a function that returns the sum\
    \ of the numbers in a vector. \nWrite a function that returns the sum of the numbers\
    \ in a vector. \nWrite a function that returns the sum of the numbers in a vector.\
    \ \nWrite a function that returns the sum of the numbers in a vector. \nWrite\
    \ a function that returns the sum of the numbers in a vector. \nWrite a function\
    \ that returns the sum of the numbers in a vector. \nWrite a function that returns\
    \ the sum of the numbers in a vector. \nWrite a function that returns the sum\
    \ of the numbers in a vector. \nWrite a function that returns the sum of the numbers\
    \ in a vector. \nWrite a function that returns the sum of the numbers in a vector.\
    \ \nWrite a function that returns the sum of the numbers in a vector. \nWrite\
    \ a function that returns the sum of the numbers in a vector. \nWrite a function\
    \ that returns the sum of the numbers in a vector. \nWrite a function that returns\
    \ the sum of the numbers in a vector", "    even = lst[findall(x -> x % 2 == 0,\
    \ lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    even.+=(odd.-even)\n\
    \    return even\nend\n</cell>\n<code language=julia-1.5>\nadd(lst)\n</cell>\n\
    <text>\nExercise 2\nGiven a non-empty list of integers lst. add the odd elements\
    \ that are at even indices..", "    even = lst[1 : (end-1)]\n    odd = lst[2:end]\n\
    \    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code language=julia-1.0>\n\
    @assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the sum of the numbers in the list lst that are divisible\
    \ by 3.", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    return sum(evens)\n\
    end\n</cell>\n<code language=julia-1.0>\n@assert add([1]) == 1 \n@assert add([3])\
    \ == 3 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@", "    evens = lst[1 : (end-1)]\n    odds = lst[(end-1)\
    \ : end]\n    evens = filter(x -> x % 2 == 0, evens)\n    odds = filter(x -> x\
    \ % 2 == 1, odds)\n    evens = map(x -> x + 2, evens)\n    odds = map(x -> x -\
    \ 2, odds)\n    evens = reduce(+, evens)\n    odds = reduce(+, odds)\n    return\
    \ evens + odds\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector v and returns a vector\
    \ of the same size with only the even elements of the original vector. For example,\
    \ v = [1, 2, 3, 4] should return [2, 4].", "    even = lst[1 : (end-1)]\n    odd\
    \ = lst[2:end]\n    even.+=(odd.+0)\n    return even\nend", "    even = lst[1\
    \ :end] \n    odd = lst[2 :end] \n    even.+ odd.+ \nend\n</cell>\n<text>\nExercise\
    \ 7\nWrite a function that returns the sum of the even elements of a list of integers\
    \ lst. \nGiven a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..", "    even = lst[1::2]\n    odd = lst[1::2]\n    even.+=(odd.+=0)\n\
    \    return even\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n\
    </cell>\n<text>\nExercise 2\nGiven a non-empty list of integers lst. add the odd\
    \ elements that are at even indices..", "    evens = lst[findall(x->x%2==0, lst)]\n\
    \    return sum(evens)\nend\n</cell>\n<code language=julia-1.5>\n@assert add([1])\
    \ == 1 \n@assert add([1,2,3]) == 6 \n@assert add([1,2,3,4,5]) == 10 \n@assert\
    \ add([1,2,3,4,5,6,7,8,9,10]) == 15 \n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the sum of the squares of the numbers in a given list.", "    evens\
    \ = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[findall(x -> x % 2 !=\
    \ 0, evens)]\n    evens = evens[2:end]\n    return sum(evens)\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of all odd numbers in a given list", "    even\
    \ = lst[1 : (end-1)]\n    odd = lst[2 : end]\n    even.+=(odd.*2)\n    return\
    \ even\nend", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    return sum(evens)\nend\n</cell>\n<code language=julia-1.5>\nadd(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the even numbers\
    \ in a given list.", "    evens = lst[1 : (end-1)]\n    evens = filter(x -> x\
    \ % 2 == 0, evens)\n    evens = map(x -> x + 1, evens)\n    evens = reduce(+,\
    \ evens)\n    return evens\nend\n</cell>\n<code language=julia-1.5>\nadd(lst)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector and returns\
    \ the sum of the squares of the elements of the vector.", "    even = lst[1 :\
    \ (end-1)]\n    odd = lst[2:end]\n    even.+=(odd.*2)\n    return even\nend\n\
    </cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the numbers in a given list. \n\
    The function should work for any type of list. \nThe function should work for\
    \ empty lists as well. \nThe function should work for lists of any length. \n\
    The function should work for lists of any type of elements. \nThe function should\
    \ work for lists of any type of elements. \nThe function should work for lists\
    \ of any type of elements. \nThe function should work for lists of any type of\
    \ elements. \nThe function should work for lists of any type of elements. \nThe\
    \ function should work for lists of any type of elements. \nThe function should\
    \ work for lists of any type of elements. \nThe function should work for lists\
    \ of any type of elements. \nThe function should work for lists of any type of\
    \ elements. \nThe function should work for lists of any type of elements. \nThe\
    \ function should work for lists of any type of elements. \nThe function should\
    \ work for lists of any type of elements. \nThe function should work for lists\
    \ of any type of elements. \nThe function should work for lists of any type of\
    \ elements. \nThe function should work for lists of any type of elements. \nThe\
    \ function should work for lists of any type of elements. \nThe function should\
    \ work for lists of any type of elements. \nThe function should work for lists\
    \ of any type of elements. \nThe function should work for lists of any type of\
    \ elements. \nThe function should work for lists of any type of elements. \nThe\
    \ function should work for lists of any type of elements. \nThe function should\
    \ work for lists of any type of elements. \nThe function should work for lists\
    \ of any type of elements. \nThe function should work for lists of any type of\
    \ elements. \nThe function should work for lists of any type of elements. \nThe\
    \ function should work for lists of any type of elements. \nThe function should\
    \ work for lists of any type of elements. \nThe function should work for lists\
    \ of any type of elements. \nThe function should work for lists of any type of\
    \ elements. \nThe function should work for lists of any type of elements. \nThe\
    \ function should work for lists of any type of elements. \nThe function should\
    \ work for lists of any type of elements. \nThe function should work for lists\
    \ of any type of elements. \nThe function should work for lists of any type of\
    \ elements. \nThe function should work for lists of any type of elements. \nThe\
    \ function should work for lists of any type of elements. \nThe function should\
    \ work for lists of any type of elements. \nThe function should work for lists\
    \ of any type of elements. \nThe function should work for lists of any type of\
    \ elements. \nThe function should work for lists of any type of elements. \nThe\
    \ function should work for lists of any type of elements. \nThe function ", " \
    \   evens = lst[findall(x -> x % 2 == 0, lst)]\n    return sum(evens)\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nGiven\
    \ a non-empty list of integers lst. add the odd elements that are at even indices..",
  "    even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2\
    \ != 0, lst)]\n    even.+=(odd.+0)\n    return even\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 3\nGiven a non-empty list of integers\
    \ lst, return the sum of the factorials of the integers in lst. Factorial of x\
    \ is defined as x!.", "    even = lst[1 : (end-1)]\n    odd = lst[2 : end]\n \
    \   even.+=(odd.*2)\n    return even\nend", "    evens = lst[1 : (end-1)]\n  \
    \  odds = lst[(end-1) : end]\n    evens = filter(x -> x % 2 == 0, evens)\n   \
    \ odds = filter(x -> x % 2 == 1, odds)\n    return sum(evens) + sum(odds)\nend\n\
    </cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the product of the even numbers in a given\
    \ list.", "    even = lst[1::2]\n    odd = lst[1::2]\n    even.+=(odd.+0)\n  \
    \  return even\nend\n</cell>\n<code language=julia-1.5>\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 2 \n</cell>\n<text>\nExercise 3.2\nWrite a function called multiply\
    \ that takes in a list of integers and returns the product of the even elements\
    \ that are at odd indices.", "    evens = lst[1 : (end-1)]\n    odds = lst[2:end]\n\
    \    evens + sum(odds)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector v and returns the sum of the squares of the elements in the vector.\
    \ \nWrite a function that takes a vector v and returns the sum of the squares\
    \ of the elements in the vector. \nWrite a function that takes a vector v and\
    \ returns the sum of the squares of the elements in the vector. \nWrite a function\
    \ that takes a vector v and returns the sum of the squares of the elements in\
    \ the vector. \nWrite a function that takes a vector v and returns the sum of\
    \ the squares of the elements in the vector. \nWrite a function that takes a vector\
    \ v and returns the sum of the squares of the elements in the vector. \nWrite\
    \ a function that takes a vector v and returns the sum of the squares of the elements\
    \ in the vector. \nWrite a function that takes a vector v and returns the sum\
    \ of the squares of the elements in the vector. \nWrite a function that takes\
    \ a vector v and returns the sum of the squares of the elements in the vector.\
    \ \nWrite a function that takes a vector v and returns the sum of the squares\
    \ of the elements in the vector. \nWrite a function that takes a vector v and\
    \ returns the sum of the squares of the elements in the vector. \nWrite a function\
    \ that takes a vector v and returns the sum of the squares of the elements in\
    \ the vector. \nWrite a function that takes a vector v and returns the sum of\
    \ the squares of the elements in the vector. \nWrite a function that takes a vector\
    \ v and returns the sum of the squares of the elements in the vector. \nWrite\
    \ a function that takes a vector v and returns the sum of the squares of the elements\
    \ in the vector. \nWrite a function that takes a vector v and returns the sum\
    \ of the squares of the elements in the vector. \nWrite a function that takes\
    \ a vector v and returns the sum of the squares of the elements in the vector.\
    \ \nWrite a function that takes a vector v and returns the sum of the squares\
    \ of the elements in the vector. \nWrite a function that takes a vector v and\
    \ returns the sum of the squares of the elements in the vector. \nWrite a function\
    \ that takes a vector v and returns the sum of the squares of the elements in\
    \ the vector. \nWrite a function that takes a vector v and returns the sum of\
    \ the squares of the elements in the vector. \nWrite a function that takes a vector\
    \ v and returns the sum of the squares of the elements in the vector. \nWrite\
    \ a function that takes a vector v and returns the sum of the squares of the elements\
    \ in the vector. \nWrite a function that takes a vector v and returns the sum\
    \ of the squares of the elements in the vector. \nWrite a function that takes\
    \ a vector v and returns the sum of the squares of the elements in the vector.\
    \ \nWrite a function that takes a vector v and returns the sum of the squares\
    \ of the elements in the vector. \nWrite a function that takes a vector v and\
    \ returns the sum of the squares of the elements in the vector. \nWrite a function\
    \ that takes a vector v and returns the sum of the squares of the elements in\
    \ the vector. ", "    evens = lst[1 : (end-lst)]\n    evens = filter(x -> x %\
    \ 2 == 0, evens)\n    return sum(evens)\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the even numbers in a given list.", "   \
    \ evens = lst[findall(x->x%2==0, lst)]\n    evens = evens[2:end]\n    return sum(evens)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert add([1]) == 1 \n@assert add([4,\
    \ 2, 6, 7]) == 5 \n@assert add([4, 2, 6, 7]) == 5 \n</cell>\n<text>\nExercise\
    \ 3\nWrite a function called sub that takes two vectors v1 and v2 as arguments\
    \ and returns the vector that is the difference between v1 and v2.", "    evens\
    \ = lst[findall(x->x%2==0, lst)]\n    evens = evens[2:end]\n    evens = sum(evens)\n\
    \    return evens\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the even\
    \ numbers in a given list of integers. \nGiven a non-empty list of integers lst.\
    \ add the even elements that are at odd indices..", "    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    return sum(evens)\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert add([1]) == 1 \n@assert add([4, 2,\
    \ 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n</cell>\n<text>\nExercise 2\n\
    Write a function called sub that returns the difference between the sum of all\
    \ even integers in lst and the sum of all odd integers in lst. \nWrite a test\
    \ that passes if sub([4, 2, 6, 7]) == -3 \nWrite a test that passes if sub([4,\
    \ 2, 6, 7]) == -3 \nWrite a test that passes if sub([4, 2, 6, 7]) == -3 \nWrite\
    \ a test that passes if sub([4, 2, 6, 7]) == -3 \nWrite a test that passes if\
    \ sub([4, 2, 6, 7]) == -3 \nWrite a test that passes if sub([4, 2, 6, 7]) == -3\
    \ \nWrite a test that passes if sub([4, 2, 6, 7]) == -3 \nWrite a test that passes\
    \ if sub([4, 2, 6, 7]) == -3 \nWrite a test that passes if sub([4, 2, 6, 7]) ==\
    \ -3 \nWrite a test that passes if sub([4, 2, 6, 7]) == -3 \nWrite a test that\
    \ passes if sub([4, 2, 6, 7]) == -3 \nWrite a test that passes if sub([4, 2, 6,\
    \ 7]) == -3 \nWrite a test that passes if sub([4, 2, 6, 7]) == -3 \nWrite a test\
    \ that passes if sub([4, 2, 6, 7]) == -3 \nWrite a test that passes if sub([4,\
    \ 2, 6, 7]) == -3 \nWrite a test that passes if sub([4, 2, 6, 7]) == -3 \nWrite\
    \ a test that passes if sub([4, 2, 6, 7]) == -3 \nWrite a test that passes if\
    \ sub([4, 2, 6, 7]) == -3 \nWrite a test that passes if sub([4, 2, 6, 7]) == -3\
    \ \nWrite a test that passes if sub([4, 2, 6, 7]) == -3 \nWrite a test that passes\
    \ if sub([4, 2, 6, 7]) == -3 \nWrite a test that passes if sub([4, 2, 6, 7]) ==\
    \ -3 \nWrite a test that passes if sub([4, 2, 6, 7]) == -3 \nWrite a test that\
    \ passes if sub([4, 2, 6, 7]) == -3 \nWrite a test that passes if sub([4, 2, 6,\
    \ 7]) == -3 \nWrite a test that passes if sub([4, ", "    even = lst[1 :end]\n\
    \    odd = lst[2 :end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 6\n</cell>\n\
    <text>\nExercise 3\nWrite a function called multiply that takes in a list of integers\
    \ lst. and returns the product of the even elements that are at odd indices.",
  "    evens = lst[1 : (end-1)]\n    evens = filter(x -> x % 2 == 0, evens)\n    evens\
    \ = map(x -> x + 1, evens)\n    evens = reduce(+, evens)\n    return evens\nend\n\
    </cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise\
    \ 2\nGiven a non-empty list of integers lst. add the odd elements that are at\
    \ even indices..", "    even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x\
    \ -> x % 2 != 0, lst)]\n    return sum(even + odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the squares of the numbers in a given list.", "    evens = lst[1\
    \ : (end-lst)]\n    odds = lst[(end-lst):end]\n    evens = filter(x -> x % 2 ==\
    \ 0, evens)\n    odds = filter(x -> x % 2 == 1, odds)\n    evens = map(x -> x\
    \ + 1, evens)\n    odds = map(x -> x + 1, odds)\n    evens = reduce(add, evens)\n\
    \    odds = reduce(add, odds)\n    return evens + odds\nend\n</cell>\n<code language=julia-1.5>\n\
    add(lst)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of\
    \ integers and returns the sum of the even elements and the sum of the odd elements.\
    \ \nFor example, add([4, 2, 6, 7]) == (2, 3)", "    evens = lst[findall(x -> x\
    \ % 2 == 0, lst)]\n    evens = evens[2:end]\n    evens = map(add, evens)\n   \
    \ return sum(evens)\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector and returns\
    \ the sum of the even elements in the vector.", "    evens = lst[1 : (end-1)]\n\
    \    evens = filter(x -> x % 2 == 0, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens\
    \ = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x\
    \ + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens\
    \ = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x\
    \ + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens\
    \ = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x\
    \ + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens\
    \ = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x\
    \ + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(", "    evens =\
    \ lst[1 : (end-lst)]\n    evens = filter(x -> x % 2 == 0, evens)\n    return sum(evens)\n\
    end\n</cell>\n<code language=julia-1.3>\nadd([4, 2, 6, 7])\n</cell>\n<text>\n\
    Exercise 3\nGiven a non-empty list of integers lst. add the odd elements that\
    \ are at even indices..", "    even = lst[1 : (end-1)]\n    odd = lst[2:end]\n\
    \    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a function called subtract\
    \ that takes two vectors of integers and returns the difference of the two vectors.",
  "    even = lst[1 : (end-1)]\n    odd = lst[2 : end]\n    even.+=(odd.+=0)\n   \
    \ return even\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n\
    <text>\nExercise 2\nWrite a function called multiply that takes in a list of integers\
    \ and returns the product of all the numbers in the list. \nWrite a test that\
    \ passes when the function returns 24 and fails otherwise.", "    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.-even)\n    return even\nend\n</cell>\n\
    <code language=julia-1.3>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 6\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the product of a list of integers\
    \ lst. \nThe function should work for lists of any length.", "    even = lst[1\
    \ : (end-1)]\n    odd = lst[(end-2):end]\n    even.+=(odd.+0)\n    return even\n\
    end", "    even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x\
    \ -> x % 2 != 0, lst)]\n    even = even[findall(x -> x % 2 == 0, even)]\n    odd\
    \ = odd[findall(x -> x % 2 != 0, odd)]\n    return sum(even) + sum(odd)\nend\n\
    </cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the squares of the even numbers\
    \ in a given list. \nWrite a function that returns the sum of the squares of the\
    \ odd numbers in a given list. \nWrite a function that returns the sum of the\
    \ squares of the even numbers in a given list. \nWrite a function that returns\
    \ the sum of the squares of the odd numbers in a given list. \nWrite a function\
    \ that returns the sum of the squares of the even numbers in a given list. \n\
    Write a function that returns the sum of the squares of the odd numbers in a given\
    \ list. \nWrite a function that returns the sum of the squares of the even numbers\
    \ in a given list. \nWrite a function that returns the sum of the squares of the\
    \ odd numbers in a given list. \nWrite a function that returns the sum of the\
    \ squares of the even numbers in a given list. \nWrite a function that returns\
    \ the sum of the squares of the odd numbers in a given list. \nWrite a function\
    \ that returns the sum of the squares of the even numbers in a given list. \n\
    Write a function that returns the sum of the squares of the odd numbers in a given\
    \ list. \nWrite a function that returns the sum of the squares of the even numbers\
    \ in a given list. \nWrite a function that returns the sum of the squares of the\
    \ odd numbers in a given list. \nWrite a function that returns the sum of the\
    \ squares of the even numbers in a given list. \nWrite a function that returns\
    \ the sum of the squares of the odd numbers in a given list. \nWrite a function\
    \ that returns the sum of the squares of the even numbers in a given list. \n\
    Write a function that returns the sum of the squares of the odd numbers in a given\
    \ list. \nWrite a function that returns the sum of the squares of the even numbers\
    \ in a given list. \nWrite a function that returns the sum of the squares of the\
    \ odd numbers in a given list. \nWrite a function that returns the sum of the\
    \ squares of the even numbers in a given list. \nWrite a function that returns\
    \ the sum of the squares of the odd numbers in a given list. \nWrite a function\
    \ that returns the sum of the squares of the even numbers in a given list. \n\
    Write a function that returns the sum of the squares of the odd numbers in a given\
    \ list. \nWrite a function that returns the sum of the squares of the even numbers\
    \ in a given list. \nWrite a function that returns the sum of the squares of the\
    \ odd numbers in a given list. \nWrite a function that returns the sum of the\
    \ squares of the even numbers in a given list. \nWrite a function that returns\
    \ the sum of the square", "    even = lst[1 : (end-lst)]\n    odd = lst[2 : end]\n\
    \    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add(Vector{Int64}([4, 2, 6, 7])) == 5\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the sum of the numbers in the list lst that are divisible\
    \ by 3.", "    even = lst[1::2]\n    odd = lst[1::2]\n    even.+=(odd.+0)/2\n\
    \    return even\nend\n</cell>\n<code language=julia-1.4>\nadd([4, 2, 6, 7])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the even\
    \ numbers in a given list. \nWrite a function that returns the sum of the odd\
    \ numbers in a given list. \nWrite a function that returns the product of the\
    \ even numbers in a given list. \nWrite a function that returns the product of\
    \ the odd numbers in a given list. \nWrite a function that returns the maximum\
    \ of a given list. \nWrite a function that returns the minimum of a given list.\
    \ \nWrite a function that returns the product of the squares of the even numbers\
    \ in a given list. \nWrite a function that returns the product of the squares\
    \ of the odd numbers in a given list. \nWrite a function that returns the sum\
    \ of all the numbers in a given list. \nWrite a function that returns the product\
    \ of the numbers in a given list. \nWrite a function that returns the product\
    \ of the squares of the numbers in a given list. \nWrite a function that returns\
    \ the product of the cubes of the numbers in a given list. \nWrite a function\
    \ that returns the sum of all the squares of the numbers in a given list. \nWrite\
    \ a function that returns the sum of all the cubes of the numbers in a given list.\
    \ \nWrite a function that returns the product of the squares of the cubes of the\
    \ numbers in a given list. \nWrite a function that returns the product of the\
    \ cubes of the squares of the numbers in a given list. \nWrite a function that\
    \ returns the product of the cubes of the cubes of the numbers in a given list.\
    \ \nWrite a function that returns the product of the cubes of the cubes of the\
    \ squares of the numbers in a given list. \nWrite a function that returns the\
    \ product of the cubes of the cubes of the cubes of the numbers in a given list.\
    \ \nWrite a function that returns the product of the cubes of the cubes of the\
    \ cubes of the squares of the numbers in a given list. \nWrite a function that\
    \ returns the product of the cubes of the cubes of the cubes of the cubes of the\
    \ numbers in a given list. \nWrite a function that returns the product of the\
    \ cubes of the cubes of the cubes of the cubes of the numbers in a given list.\
    \ \nWrite a function that returns the product of the cubes of the cubes of the\
    \ cubes of the cubes of the squares of the numbers in a given list. \nWrite a\
    \ function that returns the product of the cubes of the cubes of the cubes of\
    \ the cubes of the cubes of the numbers in a given list. \nWrite a function that\
    \ returns the product of the cubes of the cubes of the cubes of the cubes of the\
    \ cubes of the numbers in a given list. \nWrite a function that returns the product\
    \ of the cubes of the cubes of the cubes of the cubes of the cubes of the squares\
    \ of the numbers in a given list. \nWrite a function that returns the product\
    \ of the cubes of the cubes of the cubes of the cubes of the cubes of the cubes\
    \ of the numbers in a given list. \nWrite a function that returns the product\
    \ of the cubes of the cubes of the cubes of the cube", "    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    evens = sum(evens)\n   \
    \ return evens\nend\n</cell>\n<code language=julia-1.5>\n@assert add([1]) == 1\
    \ \n@assert add([4, 2, 6, 7]) == 5 \n@assert add([4, 2, 6, 7]) == 5 \n@assert\
    \ add([4, 2, 6, 7]) == 5 \n@assert add([4, 2, 6, 7]) == 5 \n@assert add([4, 2,\
    \ 6, 7]) == 5 \n@assert add([4, 2, 6, 7]) == 5 \n@assert add([4, 2, 6, 7]) ==\
    \ 5 \n@assert add([4, 2, 6, 7]) == 5 \n@assert add([4, 2, 6, 7]) == 5 \n@assert\
    \ add([4, 2, 6, 7]) == 5 \n@assert add([4, 2, 6, 7]) == 5 \n@assert add([4, 2,\
    \ 6, 7]) == 5 \n@assert add([4, 2, 6, 7]) == 5 \n@assert add([4, 2, 6, 7]) ==\
    \ 5 \n@assert add([4, 2, 6, 7]) == 5 \n@assert add([4, 2, 6, 7]) == 5 \n@assert\
    \ add([4, 2, 6, 7]) == 5 \n@assert add([4, 2, 6, 7]) == 5 \n@assert add([4, 2,\
    \ 6, 7]) == 5 \n@assert add([4, 2, 6, 7]) == 5 \n@assert add([4, 2, 6, 7]) ==\
    \ 5 \n@assert add([4, 2, 6, 7]) == 5 \n@assert add([4, 2, 6, 7]) == 5 \n@assert\
    \ add([4, 2, 6, 7]) == 5 \n@assert add([4, 2, 6, 7]) == 5 \n@assert add([4, 2,\
    \ 6, 7]) == 5 \n@assert add([4, 2, 6, 7]) == 5 \n@assert add([4, 2, 6, 7]) ==\
    \ 5 \n@assert add([4, 2, 6, 7]) == 5 \n@assert add([4, 2, 6, 7]) == 5 \n@assert\
    \ add([4, 2, 6, 7]) == 5 \n@assert add([4, 2, 6, 7]) == 5 \n@assert add([4, 2,\
    \ 6, 7]) == 5 \n@assert add([4, 2, 6, 7]) == 5 \n@assert add([4, 2, 6, 7]) ==\
    \ 5 \n@assert add([4, 2, 6, 7]) == 5 \n@assert add([4, 2, 6, 7]) == 5 \n@assert\
    \ add([4, 2, 6, 7]) == 5 \n@assert add([4, 2, 6, 7]) == 5 \n@assert add([4, 2,\
    \ 6, 7]) == 5 \n@assert add([4, 2, 6, 7]) == 5 \n@assert add([4, 2, 6, 7]", " \
    \   even = lst[1 : (end-1)]\n    odd = lst[(end-1) : (end)]\n    even.+=(odd.+0)\n\
    \    return even\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n\
    </cell>\n<text>\nExercise 2\nGiven a non-empty list of integers lst. add the odd\
    \ elements that are at even indices..", "    even = lst[1 : (end-1)]\n    odd\
    \ = lst[2 : end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nGiven a non-empty list of integers\
    \ lst. add the odd elements that are at even indices..", "    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.-even)\n    return even\nend\n</cell>\n\
    <code language=julia-1.0>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the even elements of an array. \nGiven a\
    \ non-empty array of integers lst. return the sum of the even elements that are\
    \ at odd indices..", "    even = lst[1::2]\n    odd = lst[1::2]\n    even.+=(odd.-even)\n\
    \    return even\nend", "    even = lst[1 : (end-1)]\n    odd = lst[(end-1) :\
    \ end]\n    even.+ odd.+\nend\n</cell>\n<text>\nExercise 3\nWrite a function called\
    \ subtract that takes two vectors and subtracts the even elements that are at\
    \ odd indices from the odd elements that are at even indices.", "    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    evens = sum(evens)\n   \
    \ return evens\nend", "    evens = lst[1 : (end-lst)]\n    evens = filter(x ->\
    \ x % 2 == 0, evens)\n    evens = map(x -> x + 1, evens)\n    evens = reduce(+,\
    \ evens)\n    return evens\nend\n</cell>\n<code language=julia-1.5>\nadd(lst)\n\
    </cell>\n<text>\nExercise 3\nGiven a non-empty list of integers lst. add the odd\
    \ elements that are at even indices..", "    even = lst[1 : (end-1)]\n    odd\
    \ = lst[2:end]\n    even.+=(odd.*2)\n    return even\nend", "    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even = sum(even)\n    odd = sum(odd)\n    return even\
    \ + odd\nend", "    evens = lst[1 : (end-1)]\n    odds = lst[(end-1) : end]\n\
    \    return sum(evens) + sum(odds)\nend", "    even = lst[1 :end]\n    odd = lst[2\
    \ :end]\n    even = collect(filter(x -> x % 2 == 0, even))\n    odd = collect(filter(x\
    \ -> x % 2 == 1, odd))\n    return sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    add(lst)\n</cell>\n<text>\nExercise 2\nGiven a non-empty list of integers lst.\
    \ add the even elements that are at odd indices..", "    evens = lst[findall(x->x%2==0,\
    \ lst)]\n    evens = evens[2:end]\n    return sum(evens)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nGiven a\
    \ non-empty list of integers lst. add the odd elements that are at even indices..",
  "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[findall(x ->\
    \ x % 2 != 0, evens)]\n    return sum(evens)\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the product of a list of integers lst. \nThe function\
    \ should work for lists of any length.", "    even = lst[1 : (end-1)]\n    odd\
    \ = lst[2:end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nGiven a non-empty list of integers\
    \ lst. add the odd elements that are at even indices..", "    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.-even)\n    return even\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 2 \n</cell>\n\
    <text>\nExercise 3\nWrite a function called sub that subtracts the even elements\
    \ that are at odd indices from the odd elements that are at even indices.", " \
    \   evens = lst[1 : (end-1)]\n    evens = filter(x -> x % 2 == 0, evens)\n   \
    \ evens = map(x -> x + 1, evens)\n    evens = reduce(+, evens)\n    return evens\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert add([1]) == 1 \n@assert add([1])\
    \ == 1 \n@assert add([1,2]) == 3 \n@assert add([1,2,3]) == 6 \n@assert add([1,2,3,4,5])\
    \ == 10 \n@assert add([1,2,3,4,5,6]) == 15 \n@assert add([1,2,3,4,5,6,7]) == 21\
    \ \n@assert add([1,2,3,4,5,6,7,8]) == 28 \n@assert add([1,2,3,4,5,6,7,8,9]) ==\
    \ 36 \n@assert add([1,2,3,4,5,6,7,8,9,10]) == 45 \n@assert add([1,2,3,4,5,6,7,8,9,10,11])\
    \ == 54 \n@assert add([1,2,3,4,5,6,7,8,9,10,11,12]) == 63 \n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13])\
    \ == 72 \n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) == 81 \n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\
    \ == 90 \n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == 99 \n@assert\
    \ add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == 108 \n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\
    \ == 117 \n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) == 126\
    \ \n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 135 \n\
    @assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) == 144 \n\
    @assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]) == 153\
    \ \n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\
    \ == 162 \n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\
    \ == 171 \n@assert add", "    even = lst[1 : (end-lst)]\n    odd = lst[2 : end]\n\
    \    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nGiven a non-empty list of integers\
    \ lst. add the odd elements that are at even indices..", "    even = lst[1 : (end-1)]\n\
    \    odd = lst[2:end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 6\n</cell>\n\
    <text>\nExercise 2\nWrite a function called sub that takes in a list of integers\
    \ lst and subtracts the even elements that are at odd indices.", "    evens =\
    \ lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    evens = sum(evens)\n\
    \    return evens\nend", "    evens = lst[1 : (end-1)]\n    odds = lst[(end-1)\
    \ : (end)]\n    evens = filter(x -> x % 2 == 0, evens)\n    odds = filter(x ->\
    \ x % 2 == 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x -> x\
    \ + 1, odds)\n    evens = reduce(+, evens)\n    odds = reduce(+, odds)\n    return\
    \ evens + odds\nend\n</cell>\n<code language=julia-1.5>\n@time add([4, 2, 6, 7])\n\
    </cell>\n<text>\nExercise 3\nGiven a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..", "    evens = lst[1 : (end-lst)]\n    evens\
    \ = filter(x -> x % 2 == 0, evens)\n    evens = map(x -> x + 1, evens)\n    evens\
    \ = reduce(+, evens)\n    return evens\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a function called sub that\
    \ subtracts the even elements that are at odd indices.", "    evens = lst[1 :\
    \ (end-1)]\n    odds = lst[2:end]\n    evens = filter(x -> x % 2 == 0, evens)\n\
    \    odds = filter(x -> x % 2 != 0, odds)\n    evens = map(x -> x + 1, evens)\n\
    \    odds = map(x -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds\
    \ = map(x -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x\
    \ -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x -> x -\
    \ 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n\
    \    evens = map(x -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens\
    \ = map(x -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens = map(x\
    \ -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens = map(x -> x +\
    \ 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n\
    \    odds = map(x -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds\
    \ = map(x -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x\
    \ -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x -> x -\
    \ 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n\
    \    evens = map(x -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens\
    \ = map(x -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens = map(x\
    \ -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens = map(x -> x +\
    \ 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n\
    \    odds = map(x -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds\
    \ = map(x -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x\
    \ -> x - 1, odds)\n    evens = map(x ", "    evens = lst[findall(x -> x % 2 ==\
    \ 0, lst)]\n    evens = evens[2:end]\n    evens = sum(evens)\n    return evens\n\
    end\n</cell>\n<code language=julia-1.5>\n@time add([4, 2, 6, 7])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the even elements of a given\
    \ list of integers. \nWrite a function that returns the sum of the even elements\
    \ of a given vector of integers. \nWrite a function that returns the sum of the\
    \ even elements of a given matrix of integers. \nWrite a function that returns\
    \ the sum of the even elements of a given array of integers. ", "    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n \
    \   evens = evens[2:end]\n    evens = map(x -> x + 2, evens)\n    return sum(evens)\n\
    end\n</cell>\n<code language=julia-1.4>\nadd([4, 2, 6, 7])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns the sum\
    \ of the even elements that are at odd indices.", "    evens = lst[1 : (end-lst)]\n\
    \    evens = filter(x -> x % 2 == 0, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = map(x -> x + lst[end], evens)\n    evens = reduce(+, evens)\n   \
    \ return evens\nend\n</cell>\n<code language=julia-1.0>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.0>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.0>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.0>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.0>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.0>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.0>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.0>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.0>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.0>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.0>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.0>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.0>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.0>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.0>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.0>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.0>\n@code_warntype add(",
  "    even = lst[1 :end]\n    odd = lst[2 :end]\n    even.+=(odd.*2)\n    return\
    \ even\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n\
    <text>\nExercise 2\nGiven a non-empty list of integers lst. add the odd elements\
    \ that are at even indices..", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    return sum(evens)\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert add([1]) == 1 \n@assert add([4, 2,\
    \ 6, 7]) == 5 \n@assert add([4, 2, 6, 7, 8]) == 10 \n@assert add([4, 2, 6, 7,\
    \ 8, 9]) == 16 \n@assert add([4, 2, 6, 7, 8, 10, 11]) == 21 \n@assert add([4,\
    \ 2, 6, 7, 8, 10, 11, 12]) == 28 \n@assert add([4, 2, 6, 7, 8, 10, 11, 12, 13])\
    \ == 36 \n@assert add([4, 2, 6, 7, 8, 10, 11, 12, 13, 14]) == 45 \n@assert add([4,\
    \ 2, 6, 7, 8, 10, 11, 12, 13, 14, 15]) == 54 \n@assert add([4, 2, 6, 7, 8, 10,\
    \ 11, 12, 13, 14, 15, 16]) == 63 \n@assert add([4, 2, 6, 7, 8, 10, 11, 12, 13,\
    \ 14, 15, 16, 17]) == 72 \n@assert add([4, 2, 6, 7, 8, 10, 11, 12, 13, 14, 15,\
    \ 16, 17, 18]) == 81 \n@assert add([4, 2, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19]) == 90 \n@assert add([4, 2, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19, 20]) == 99 \n</cell>\n<text>\nExercise 3\nWrite a function called\
    \ multiply that takes a list of integers and returns the product of the integers.\
    \ \nMultiply each element of the list by each element of the list. \nFor example\
    \ multiply([1, 2, 3]) should return [3, 6, 9]. \nMultiply each element of the\
    \ list by each element of the list. \nFor example multiply([1, 2, 3]) should return\
    \ [3, 6, 9]. \nMultiply each element of the list by each element of the list.\
    \ \nFor example multiply([1, 2, 3]) should return [3, 6, 9]. \nMultiply each element\
    \ of the list by each element of the list. \nFor example multiply([1, 2, 3]) should\
    \ return [3, 6, 9]. \nMultiply each element of the list by each element of the\
    \ list. \nFor example multiply([1, 2, 3]) should return [3, 6, 9]. \nMultiply\
    \ each element of the list by each element of the list. \nFor example multiply([1,\
    \ 2, 3]) should return [3, 6, 9]. \nMultiply each element of the list by each\
    \ element of the list. \nFor example multiply([1, 2, 3]) should return [3, 6,\
    \ 9]. \nMultiply each element of the list ", "    even = lst[1::2]\n    odd =\
    \ lst[1::2]\n    even.+=(odd.-even)\n    return even\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ vector of integers and returns the sum of the even elements of the vector.",
  "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[findall(x ->\
    \ x % 2 != 0, evens)]\n    evens = evens[2:end]\n    return sum(evens)\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert add([1]) == 1 \n@assert add([4, 2,\
    \ 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n</cell>\n<text>\nExercise 3\n\
    Write a function called multiply that takes in a list of integers and returns\
    \ the product of all the integers in the list. \nMultiply each element in the\
    \ list by each element in the list. \nFor example, multiply([4, 2, 6, 7]) == 24",
  "    evens = lst[1 : (end-1)]\n    odds = lst[(end-1):end]\n    evens = filter(x\
    \ -> x % 2 == 0, evens)\n    odds = filter(x -> x % 2 == 1, odds)\n    return\
    \ sum(evens) + sum(odds)\nend\n</cell>\n<code language=julia-1.5>\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 6\n</cell>\n<text>\nExercise 3\nWrite a function called subtract\
    \ that takes two vectors and subtracts the even elements that are at odd indices\
    \ from the even elements that are at even indices.", "    evens = lst[1 : (end-lst)]\n\
    \    odds = lst[(end-lst):end]\n    evens = filter(x -> x % 2 == 0, evens)\n \
    \   odds = filter(x -> x % 2 != 0, odds)\n    evens = map(x -> x + 1, evens)\n\
    \    odds = map(x -> x - 1, odds)\n    return sum(evens) + sum(odds)\nend\n</cell>\n\
    <code language=julia-1.5>\nadd(lst)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector and returns the sum of the squares of the even elements\
    \ of the vector.", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens\
    \ = evens[2:end]\n    return sum(evens)\nend\n</cell>\n<code language=julia-1.4>\n\
    @code_warntype add(lst)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector and returns the sum of the even elements. \nWrite a function that takes\
    \ a vector and returns the sum of the odd elements. \nWrite a function that takes\
    \ a vector and returns the sum of the even and odd elements. \nWrite a function\
    \ that takes a vector and returns the sum of the even and odd elements. \nWrite\
    \ a function that takes a vector and returns the sum of the even and odd elements.\
    \ \nWrite a function that takes a vector and returns the sum of the even and odd\
    \ elements. \nWrite a function that takes a vector and returns the sum of the\
    \ even and odd elements. \nWrite a function that takes a vector and returns the\
    \ sum of the even and odd elements. \nWrite a function that takes a vector and\
    \ returns the sum of the even and odd elements. \nWrite a function that takes\
    \ a vector and returns the sum of the even and odd elements. \nWrite a function\
    \ that takes a vector and returns the sum of the even and odd elements. \nWrite\
    \ a function that takes a vector and returns the sum of the even and odd elements.\
    \ \nWrite a function that takes a vector and returns the sum of the even and odd\
    \ elements. \nWrite a function that takes a vector and returns the sum of the\
    \ even and odd elements. \nWrite a function that takes a vector and returns the\
    \ sum of the even and odd elements. \nWrite a function that takes a vector and\
    \ returns the sum of the even and odd elements. \nWrite a function that takes\
    \ a vector and returns the sum of the even and odd elements. \nWrite a function\
    \ that takes a vector and returns the sum of the even and odd elements. \nWrite\
    \ a function that takes a vector and returns the sum of the even and odd elements.\
    \ \nWrite a function that takes a vector and returns the sum of the even and odd\
    \ elements. \nWrite a function that takes a vector and returns the sum of the\
    \ even and odd elements. \nWrite a function that takes a vector and returns the\
    \ sum of the even and odd elements. \nWrite a function that takes a vector and\
    \ returns the sum of the even and odd elements. \nWrite a function that takes\
    \ a vector and returns the sum of the even and odd elements. \nWrite a function\
    \ that takes a vector and returns the sum of the even and odd elements. \nWrite\
    \ a function that takes a vector and returns the sum of the even and odd elements.\
    \ \nWrite a function that takes a vector and returns the sum of the even and odd\
    \ elements. \nWrite a function that takes a vector and returns the sum of the\
    \ even and odd elements. \nWrite a function that takes a vector and returns the\
    \ sum of the even and odd elements. \nWrite a function that takes a vector and\
    \ returns the sum of the even and odd elements. \nWrite a function that takes\
    \ a vector and returns the sum", "    evens = lst[1::2]\n    odds = lst[1::2]\n\
    \    evens = map(x -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens\
    \ = filter(x -> x % 2 == 0, evens)\n    odds = filter(x -> x % 2 == 1, odds)\n\
    \    evens = map(x -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens\
    \ = filter(x -> x % 2 == 0, evens)\n    odds = filter(x -> x % 2 == 1, odds)\n\
    \    evens = map(x -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens\
    \ = filter(x -> x % 2 == 0, evens)\n    odds = filter(x -> x % 2 == 1, odds)\n\
    \    evens = map(x -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens\
    \ = filter(x -> x % 2 == 0, evens)\n    odds = filter(x -> x % 2 == 1, odds)\n\
    \    evens = map(x -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens\
    \ = filter(x -> x % 2 == 0, evens)\n    odds = filter(x -> x % 2 == 1, odds)\n\
    \    evens = map(x -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens\
    \ = filter(x -> x % 2 == 0, evens)\n    odds = filter(x -> x % 2 == 1, odds)\n\
    \    evens = map(x -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens\
    \ = filter(x -> x % 2 == 0, evens)\n    odds = filter(x -> x % 2 == 1, odds)\n\
    \    evens = map(x -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens\
    \ = filter(x -> x % 2 == 0, evens)\n    odds = filter(x -> x % 2 == 1, odds)\n\
    \    evens = map(x -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens\
    \ = filter(x -> x % 2 == 0, evens)\n    odds = filter(x -> x % 2 == 1, odds)\n\
    \    evens = map(x -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens\
    \ = filter(x -> x % 2 == 0, evens)\n    odds = filter(x -> x % 2 == 1, odds)\n\
    \    evens = map(x -> x + 1, evens)\n    odds = map(x ", "    even = lst[1 : (end-1)]\n\
    \    odd = lst[2:end]\n    return sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add(Vector{Int64}([4, 2, 6, 7])) == 6\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the squares of the integers in lst. For example,\
    \ add([4, 2, 6, 7]) == 25", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    return sum(evens)\nend\n\
    </cell>\n<code language=julia-1.5>\nadd(lst)\n</cell>\n<text>\nExercise 2\nGiven\
    \ a non-empty list of integers lst. add the odd elements that are at even indices..",
  "    evens = lst[1 : (end-1)]\n    odds = lst[(end-1) : end]\n    evens = filter(x\
    \ -> x % 2 == 0, evens)\n    odds = filter(x -> x % 2 == 1, odds)\n    return\
    \ sum(evens) + sum(odds)\nend\n</cell>\n<code language=julia-1.5>\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 6\n</cell>\n<text>\nExercise 2\nGiven a non-empty list of integers\
    \ lst. add the odd elements that are at even indices..", "    even = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    even.+(odd.-even)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert add([1]) == 1 \n@assert add([4,\
    \ 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7])\
    \ == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert\
    \ add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2,\
    \ 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) ==\
    \ 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert\
    \ add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2,\
    \ 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) ==\
    \ 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert\
    \ add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2,\
    \ 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) ==\
    \ 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert\
    \ add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2,\
    \ 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) ==\
    \ 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert\
    \ add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2,\
    \ 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) ==\
    \ 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert\
    \ add([4, 2, 6, 7]) == 2 \n@", "    even = lst[1 : (end-1)]\n    odd = lst[2:end]\n\
    \    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the even numbers in a given list. \nGiven a non-empty list of integers\
    \ lst. add the even elements that are at odd indices..", "    evens = lst[1 :\
    \ (end-1)]\n    odds = lst[2:end]\n    evens = filter(x -> x % 2 == 0, evens)\n\
    \    odds = filter(x -> x % 2 != 0, odds)\n    evens = map(x -> x + 1, evens)\n\
    \    odds = map(x -> x + 1, odds)\n    return sum(evens) + sum(odds)\nend\n</cell>\n\
    <code language=julia-1.3>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 6\n</cell>\n\
    <text>\nExercise 2\nWrite a function called sub that subtracts the even elements\
    \ that are at odd indices.", "    evens = lst[1 : (end-1)]\n    odds = lst[(end-1)\
    \ : end]\n    evens = filter(x -> x % 2 == 0, evens)\n    odds = filter(x -> x\
    \ % 2 != 0, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x -> x +\
    \ 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x -> x + 1, odds)\n\
    \    evens = map(x -> x + 1, evens)\n    odds = map(x -> x + 1, odds)\n    evens\
    \ = map(x -> x + 1, evens)\n    odds = map(x -> x + 1, odds)\n    evens = map(x\
    \ -> x + 1, evens)\n    odds = map(x -> x + 1, odds)\n    evens = map(x -> x +\
    \ 1, evens)\n    odds = map(x -> x + 1, odds)\n    evens = map(x -> x + 1, evens)\n\
    \    odds = map(x -> x + 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds\
    \ = map(x -> x + 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x\
    \ -> x + 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x -> x +\
    \ 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x -> x + 1, odds)\n\
    \    evens = map(x -> x + 1, evens)\n    odds = map(x -> x + 1, odds)\n    evens\
    \ = map(x -> x + 1, evens)\n    odds = map(x -> x + 1, odds)\n    evens = map(x\
    \ -> x + 1, evens)\n    odds = map(x -> x + 1, odds)\n    evens = map(x -> x +\
    \ 1, evens)\n    odds = map(x -> x + 1, odds)\n    evens = map(x -> x + 1, evens)\n\
    \    odds = map(x -> x + 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds\
    \ = map(x -> x + 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x\
    \ -> x + 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x -> x +\
    \ 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x -> x + 1, odds)\n\
    \    evens = map(x -> x + 1, evens)\n    odds = map(x -> x + 1, odds)\n    even",
  "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    return\
    \ sum(evens)\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the even numbers\
    \ in a given list.", "    evens = lst[1 : (end-1)]\n    odds = lst[(end-1) : end]\n\
    \    evens = filter(x -> x % 2 == 0, evens)\n    odds = filter(x -> x % 2 == 1,\
    \ odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x -> x + 1, odds)\n\
    \    return sum(evens) + sum(odds)\nend\n</cell>\n<code language=julia-1.5>\n\
    add(lst)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of\
    \ integers and returns the sum of the squares of the even numbers. \nWrite a function\
    \ that takes a vector of integers and returns the sum of the squares of the odd\
    \ numbers. \nWrite a function that takes a vector of integers and returns the\
    \ sum of the squares of the even and odd numbers. \nWrite a function that takes\
    \ a vector of integers and returns the sum of the squares of the even and odd\
    \ numbers. \nWrite a function that takes a vector of integers and returns the\
    \ sum of the squares of the even and odd numbers. \nWrite a function that takes\
    \ a vector of integers and returns the sum of the squares of the even and odd\
    \ numbers. \nWrite a function that takes a vector of integers and returns the\
    \ sum of the squares of the even and odd numbers. \nWrite a function that takes\
    \ a vector of integers and returns the sum of the squares of the even and odd\
    \ numbers. \nWrite a function that takes a vector of integers and returns the\
    \ sum of the squares of the even and odd numbers. \nWrite a function that takes\
    \ a vector of integers and returns the sum of the squares of the even and odd\
    \ numbers. \nWrite a function that takes a vector of integers and returns the\
    \ sum of the squares of the even and odd numbers. \nWrite a function that takes\
    \ a vector of integers and returns the sum of the squares of the even and odd\
    \ numbers. \nWrite a function that takes a vector of integers and returns the\
    \ sum of the squares of the even and odd numbers. \nWrite a function that takes\
    \ a vector of integers and returns the sum of the squares of the even and odd\
    \ numbers. \nWrite a function that takes a vector of integers and returns the\
    \ sum of the squares of the even and odd numbers. \nWrite a function that takes\
    \ a vector of integers and returns the sum of the squares of the even and odd\
    \ numbers. \nWrite a function that takes a vector of integers and returns the\
    \ sum of the squares of the even and odd numbers. \nWrite a function that takes\
    \ a vector of integers and returns the sum of the squares of the even and odd\
    \ numbers. \nWrite a function that takes a vector of integers and returns the\
    \ sum of the squares of the even and odd numbers. \nWrite a function that takes\
    \ a vector of integers and returns the sum of the squares of the even and odd\
    \ numbers. \nWrite a function that takes a vector of integers and returns the\
    \ sum of the squares of the even and odd numbers. \nWrite a function that takes\
    \ a vector of integers and returns the sum of the squares of the even and odd\
    \ numbers. \nWrite a function that takes a vector of integers and returns the\
    \ sum of the squares of the even and odd numbers. ", "    even = lst[1 : (end-1)]\n\
    \    odd = lst[2 : end]\n    even.+ odd.\nend\n</cell>\n<text>\nExercise 7\nWrite\
    \ a function that takes a vector and returns the sum of the elements in the vector.",
  "    evens = lst[1 : (end-1)]\n    evens = filter(x -> x % 2 == 0, evens)\n    evens\
    \ = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x\
    \ + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens\
    \ = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x\
    \ + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens\
    \ = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x\
    \ + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens\
    \ = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x\
    \ + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens\
    \ = map(", "    even = lst[1::2]\n    odd = lst[1::2]\n    even.+=(odd.-even)\n\
    \    return even\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of the numbers in the list lst. \nWrite a function that returns the\
    \ sum of the numbers in the list lst that are divisible by 3.\nWrite a function\
    \ that returns the sum of the numbers in the list lst that are divisible by 5\
    \ and are less than 100.\nWrite a function that returns the sum of the numbers\
    \ in the list lst that are divisible by 5 and are between 100 and 200.\nWrite\
    \ a function that returns the sum of the numbers in the list lst that are divisible\
    \ by 5 and are greater than 200.\nWrite a function that returns the sum of the\
    \ numbers in the list lst that are divisible by 5 and are greater than 100 and\
    \ less than 200.\nWrite a function that returns the sum of the numbers in the\
    \ list lst that are divisible by 5 and are greater than 100 and less than 200\
    \ and are less than 300.\nWrite a function that returns the sum of the numbers\
    \ in the list lst that are divisible by 5 and are greater than 100 and less than\
    \ 200 and are between 300 and 400.\nWrite a function that returns the sum of the\
    \ numbers in the list lst that are divisible by 5 and are greater than 100 and\
    \ less than 200 and are between 300 and 400 and are less than 500.\nWrite a function\
    \ that returns the sum of the numbers in the list lst that are divisible by 5\
    \ and are greater than 100 and less than 200 and are between 300 and 400 and are\
    \ between 500 and 600.\nWrite a function that returns the sum of the numbers in\
    \ the list lst that are divisible by 5 and are greater than 100 and less than\
    \ 200 and are between 300 and 400 and are between 500 and 600 and are less than\
    \ 700.\nWrite a function that returns the sum of the numbers in the list lst that\
    \ are divisible by 5 and are greater than 100 and less than 200 and are between\
    \ 300 and 400 and are between 500 and 600 and are between 700 and 800.\nWrite\
    \ a function that returns the sum of the numbers in the list lst that are divisible\
    \ by 5 and are greater than 100 and less than 200 and are between 300 and 400\
    \ and are between 500 and 600 and are between 700 and 800 and are less than 900.\n\
    Write a function that returns the sum of the numbers in the list lst that are\
    \ divisible by 5 and are greater than 100 and less than 200 and are between 300\
    \ and 400 and are between 500 and 600 and are between 700 and 800 and are between\
    \ 900 and 1000.\nWrite a function that returns the sum of the numbers in the list\
    \ lst that are divisible by 5 and are greater than 100 and less than 200 and are\
    \ between 300 and 400 and are between 500 and 600 and are between ", "    evens\
    \ = lst[1 : (end-1)]\n    evens = filter(x -> x % 2 == 0, evens)\n    evens =\
    \ map(x -> x + 1, evens)\n    evens = reduce(+, evens)\n    return evens\nend\n\
    </cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector and returns the sum of the squares of\
    \ the even elements. \nFor example, add([4, 2, 6, 7]) should return 50.", "  \
    \  even = lst[1::2]\n    odd = lst[1::2]\n    even.+=(odd.+0)/2\n    return even\n\
    end\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the numbers in the list lst.\
    \ \nIf the list is empty return 0.", "    evens = lst[1 : (end-1)]\n    odds =\
    \ lst[2:end]\n    evens = filter(x -> x % 2 == 0, evens)\n    odds = filter(x\
    \ -> x % 2 == 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x ->\
    \ x + 1, odds)\n    evens = reduce(+, evens)\n    odds = reduce(+, odds)\n   \
    \ return evens + odds\nend\n</cell>\n<code language=julia-1.5>\nadd(lst)\n</cell>\n\
    <text>\nExercise 2\nGiven a non-empty list of integers lst. add the odd elements\
    \ that are at even indices..", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n\
    \    evens = evens[2:end]\n    return sum(evens)\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 3\nWrite a function called subtract\
    \ that takes two vectors v1 and v2 as arguments and returns the vector that is\
    \ the difference between v1 and v2. \nFor example, subtract [4, 2, 6, 7] and [4,\
    \ 2, 6, 7] should return [2, 4, 0, 0]. \nWrite a test that passes when the function\
    \ subtract returns the correct result. \nWrite a test that fails when the function\
    \ subtract returns the incorrect result. ", "    evens = lst[1 : (end-1)]\n  \
    \  odds = lst[(end-2):end]\n    return sum(evens) + sum(odds)\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function called subtract that takes two vectors of integers and returns the\
    \ difference between the two vectors.", "    even = lst[1 : (end-1)]\n    odd\
    \ = lst[(end-1) : (end)]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 2 \n</cell>\n\
    <text>\nExercise 3.2\nWrite a function called multiply that multiplies every element\
    \ in a vector by 2.", "    even = lst[1::2]\n    odd = lst[1::2]\n    even.+=(odd.+0)/2\n\
    \    return even\nend\n</cell>\n<code language=julia-1.5>\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 2 \n</cell>\n<text>\nExercise 3\nWrite a function called sub that\
    \ subtracts the even elements that are at odd indices from the even elements that\
    \ are at even indices.", "    evens = lst[1 : (end-1)]\n    odds = lst[(end-1)\
    \ : end]\n    evens = filter(x -> x % 2 == 0, evens)\n    odds = filter(x -> x\
    \ % 2 == 1, odds)\n    return sum(evens) + sum(odds)\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that returns the sum of the squares of the even numbers\
    \ in a given list.", "    evens = lst[findall(x -> mod(x,2)==0, lst)]\n    return\
    \ sum(evens)\nend\n</cell>\n<code language=julia-1.5>\n@assert add([1]) == 1 \n\
    @assert add([2]) == 2 \n@assert add([3]) == 3 \n@assert add([4, 2, 6, 7]) == 10\
    \ \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert\
    \ add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, ", "    evens = lst[1 : (end-1)]\n    evens\
    \ = filter(x -> x % 2 == 0, evens)\n    evens = map(x -> x + 1, evens)\n    return\
    \ sum(evens)\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n\
    <text>\nExercise 2\nGiven a non-empty list of integers lst. add the odd elements\
    \ that are at even indices..", "    evens = lst[1::2]\n    evens = filter(x ->\
    \ x % 2 == 0, evens)\n    evens = collect(evens)\n    return sum(evens)\nend\n\
    </cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise\
    \ 2\nGiven a non-empty list of integers lst. add the odd elements that are at\
    \ even indices..", "    evens = lst[1 : (end-lst)]\n    evens = filter(x -> x\
    \ % 2 == 0, evens)\n    evens = map(x -> x + 1, evens)\n    evens = reduce(+,\
    \ evens)\n    return evens\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2,\
    \ 6, 7])\n</cell>\n<text>\nExercise 2\nGiven a non-empty list of integers lst.\
    \ add the odd elements that are at even indices..", "    even = lst[1 : (end-1)]\n\
    \    odd = lst[2:end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function called subtract that takes two vectors of integers and returns the\
    \ difference of the two vectors.", "    even = lst[1::2]\n    odd = lst[1::2]\n\
    \    return sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ add(Vector{Int64}([4, 2, 6, 7])) == 10\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the sum of the numbers in the list lst that are divisible\
    \ by 3.", "    evens = lst[1 : (end-1)]\n    odds = lst[(end-1):end]\n    evens\
    \ = filter(x -> x % 2 == 0, evens)\n    odds = filter(x -> x % 2 != 0, odds)\n\
    \    evens = map(x -> x + 2, evens)\n    odds = map(x -> x - 2, odds)\n    evens\
    \ = reduce(+, evens)\n    odds = reduce(+, odds)\n    return evens + odds\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert add([1]) == 1 \n@assert add([4, 2,\
    \ 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) ==\
    \ 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert\
    \ add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([", "    evens = lst[1 : (end-lst)]\n    odds\
    \ = lst[(end-lst):end]\n    evens = filter(x -> x % 2 == 0, evens)\n    odds =\
    \ filter(x -> x % 2 != 0, odds)\n    return sum(evens) + sum(odds)\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nGiven\
    \ a non-empty list of integers lst. add the odd elements that are at even indices..",
  "    even = lst[1 : (end-1)]\n    odd = lst[2:end]\n    return sum(even) + sum(odd)\n\
    end\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the even numbers in a given\
    \ list. \nWrite a function that returns the sum of the odd numbers in a given\
    \ list. \nWrite a function that returns the product of the even numbers in a given\
    \ list. \nWrite a function that returns the product of the odd numbers in a given\
    \ list. \nWrite a function that returns the maximum of the even numbers in a given\
    \ list. \nWrite a function that returns the maximum of the odd numbers in a given\
    \ list. \nWrite a function that returns the minimum of the even numbers in a given\
    \ list. \nWrite a function that returns the minimum of the odd numbers in a given\
    \ list. \nWrite a function that returns the sum of the squares of the even numbers\
    \ in a given list. \nWrite a function that returns the sum of the squares of the\
    \ odd numbers in a given list. \nWrite a function that returns the product of\
    \ the squares of the even numbers in a given list. \nWrite a function that returns\
    \ the product of the squares of the odd numbers in a given list. \nWrite a function\
    \ that returns the maximum of the squares of the even numbers in a given list.\
    \ \nWrite a function that returns the maximum of the squares of the odd numbers\
    \ in a given list. \nWrite a function that returns the minimum of the squares\
    \ of the even numbers in a given list. \nWrite a function that returns the minimum\
    \ of the squares of the odd numbers in a given list. \nWrite a function that returns\
    \ the sum of the cubes of the even numbers in a given list. \nWrite a function\
    \ that returns the sum of the cubes of the odd numbers in a given list. \nWrite\
    \ a function that returns the product of the cubes of the even numbers in a given\
    \ list. \nWrite a function that returns the product of the cubes of the odd numbers\
    \ in a given list. \nWrite a function that returns the maximum of the cubes of\
    \ the even numbers in a given list. \nWrite a function that returns the maximum\
    \ of the cubes of the odd numbers in a given list. \nWrite a function that returns\
    \ the minimum of the cubes of the even numbers in a given list. \nWrite a function\
    \ that returns the minimum of the cubes of the odd numbers in a given list. \n\
    Write a function that returns the sum of the squares of the squares of the even\
    \ numbers in a given list. \nWrite a function that returns the sum of the squares\
    \ of the squares of the odd numbers in a given list. \nWrite a function that returns\
    \ the product of the squares of the squares of the even numbers in a given list.\
    \ \nWrite a function that returns the product of the squares of the squares of\
    \ the odd numbers in a given list. \nWrite a function that returns the maximum\
    \ of the squares of the squares of the even numbers in a given list. \nWrite a\
    \ function that returns the maximum of the squares of the squares of the odd numbers\
    \ in a given list. \nWrite a function that returns the minimum of the squares\
    \ of the squares of the even ", "    even = lst[1 : (end-1)]\n    odd = lst[2:end]\n\
    \    even.+=(odd.+0)/2\n    return even\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2,\
    \ 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector",
  "    even = lst[1::2]\n    odd = lst[1::2]\n    even.+=(odd.+0)\n    return even\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7]))\
    \ == 2 \n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum of\
    \ the numbers in a given list. \nThe function should work for both vectors and\
    \ matrices.", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    return sum(evens)\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the\
    \ even numbers in a given list.", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    ", "    evens = lst[1\
    \ : (end-1)]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens =\
    \ sum(evens)\n    return evens\nend\n</cell>\n<code language=julia-1.5>\nadd([4,\
    \ 2, 6, 7])\n</cell>\n<text>\nExercise 2\nGiven a non-empty list of integers lst.\
    \ add the odd elements that are at even indices..", "    even = lst[1::2]\n  \
    \  odd = lst[1::2]\n    even.+=(odd.-even)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the sum of the numbers in a vector. \nIf the vector is\
    \ empty, return 0.\nIf the vector has one element, return that element.\nIf the\
    \ vector has two or more elements, return the sum of the elements in the vector.",
  "    evens = lst[1 : (end-lst)]\n    evens = filter(x -> x % 2 == 0, evens)\n  \
    \  evens = map(x -> x + 1, evens)\n    return sum(evens)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nGiven a\
    \ non-empty list of integers lst. add the odd elements that are at even indices..",
  "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[findall(x ->\
    \ x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens = map(add, evens)\n\
    \    return sum(evens)\nend\n</cell>\n<code language=julia-1.4>\nadd([4, 2, 6,\
    \ 7])\n</cell>\n<text>\nExercise 2\nGiven a non-empty list of integers lst. add\
    \ the odd elements that are at even indices..", "    even = lst[1::2]\n    odd\
    \ = lst[1::2]\n    even.+=(odd.+0)\n    return even\nend\n</cell>\n<code language=julia-1.5>\n\
    add(lst)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a list of integers\
    \ and returns the sum of the even elements that are at odd indices.", "    evens\
    \ = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    evens =\
    \ sum(evens)\n    return evens\nend\n</cell>\n<code language=julia-1.5>\nadd(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the even\
    \ numbers in a given list.", "    even = lst[1 : (end-1)]\n    odd = lst[(end-1)\
    \ : end]\n    even.+=(odd.+0)\n    return even\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add(Vector{Int64}([4, 2, 6, 7])) == 5\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of integers and returns the sum of the even elements\
    \ in the vector. \nWrite a function that takes a vector of integers and returns\
    \ the sum of the odd elements in the vector. \nWrite a function that takes a vector\
    \ of integers and returns the sum of the even and odd elements in the vector.\
    \ \nWrite a function that takes a vector of integers and returns the sum of the\
    \ even and odd elements in the vector. \nWrite a function that takes a vector\
    \ of integers and returns the sum of the even and odd elements in the vector.\
    \ \nWrite a function that takes a vector of integers and returns the sum of the\
    \ even and odd elements in the vector. \nWrite a function that takes a vector\
    \ of integers and returns the sum of the even and odd elements in the vector.\
    \ \nWrite a function that takes a vector of integers and returns the sum of the\
    \ even and odd elements in the vector. \nWrite a function that takes a vector\
    \ of integers and returns the sum of the even and odd elements in the vector.\
    \ \nWrite a function that takes a vector of integers and returns the sum of the\
    \ even and odd elements in the vector. \nWrite a function that takes a vector\
    \ of integers and returns the sum of the even and odd elements in the vector.\
    \ \nWrite a function that takes a vector of integers and returns the sum of the\
    \ even and odd elements in the vector. \nWrite a function that takes a vector\
    \ of integers and returns the sum of the even and odd elements in the vector.\
    \ \nWrite a function that takes a vector of integers and returns the sum of the\
    \ even and odd elements in the vector. \nWrite a function that takes a vector\
    \ of integers and returns the sum of the even and odd elements in the vector.\
    \ \nWrite a function that takes a vector of integers and returns the sum of the\
    \ even and odd elements in the vector. \nWrite a function that takes a vector\
    \ of integers and returns the sum of the even and odd elements in the vector.\
    \ \nWrite a function that takes a vector of integers and returns the sum of the\
    \ even and odd elements in the vector. \nWrite a function that takes a vector\
    \ of integers and returns the sum of the even and odd elements in the vector.\
    \ \nWrite a function that takes a vector of integers and returns the sum of the\
    \ even and odd elements in the vector. \nWrite a function that takes a vector\
    \ of integers and returns the sum of the even and odd elements in the vector.\
    \ \nWrite a function that takes a vector of integers and returns the sum of the\
    \ even and odd elements in the vector. \nWrite a function that takes a vector\
    \ of integers and returns the sum of the even and odd elements in the vector.\
    \ \nWrite a function that takes a vector of integers and returns the sum of the\
    \ even and odd elements in the vector. \nWrite a function that takes a vector\
    \ of integers and returns the sum of the even and ", "    even = lst[1 : (end-1)]\n\
    \    odd = lst[2:end]\n    even.+=(odd.+0)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 5\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ the sum of the even elements that are at odd indices.", "    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n \
    \   evens = evens[2:end]\n    evens = sum(evens)\n    return evens\nend\n</cell>\n\
    <code language=julia-1.5>\nadd(lst)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns the sum of the even elements that\
    \ are at odd indices.", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens\
    \ = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    ", "    even = lst[1::2]\n   \
    \ odd = lst[1::2]\n    even = even.+even\n    odd = odd.+odd\n    return even.+odd\n\
    end\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the even elements in a given\
    \ list. \nWrite a function that returns the sum of the odd elements in a given\
    \ list.", "    evens = lst[1::2]\n    odds = lst[1::2]\n    evens = filter(x ->\
    \ x % 2 == 0, evens)\n    odds = filter(x -> x % 2 != 0, odds)\n    return sum(evens)\
    \ + sum(odds)\nend\n</cell>\n<code language=julia-1.5>\nadd(lst)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the even elements of a given\
    \ list. \nWrite a function that returns the sum of the odd elements of a given\
    \ list. \nWrite a function that returns the product of the even elements of a\
    \ given list. \nWrite a function that returns the product of the odd elements\
    \ of a given list. \nWrite a function that returns the maximum of a given list.\
    \ \nWrite a function that returns the minimum of a given list. \nWrite a function\
    \ that returns the product of the even elements of a given list multiplied by\
    \ the square of the odd elements of a given list. \nWrite a function that returns\
    \ the product of the odd elements of a given list multiplied by the square of\
    \ the even elements of a given list. \nWrite a function that returns the product\
    \ of the even elements of a given list multiplied by the square of the odd elements\
    \ of a given list multiplied by the square of the even elements of a given list.\
    \ \nWrite a function that returns the product of the odd elements of a given list\
    \ multiplied by the square of the even elements of a given list multiplied by\
    \ the square of the odd elements of a given list. \nWrite a function that returns\
    \ the product of the even elements of a given list multiplied by the square of\
    \ the odd elements of a given list multiplied by the square of the even elements\
    \ of a given list multiplied by the square of the odd elements of a given list. ",
  "    even = lst[1 : (end-1)]\n    odd = lst[(end-2):end]\n    even.+=(odd.*2)\n\
    \    return even\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the numbers\
    \ in a given list.", "    even = lst[1 : (end-1)]\n    odd = lst[2:end]\n    even.+=(odd.*2)\n\
    \    return even\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the numbers\
    \ in a vector. \nWrite a function that returns the sum of the squares of the numbers\
    \ in a vector. \nWrite a function that returns the product of the numbers in a\
    \ vector. \nWrite a function that returns the product of the squares of the numbers\
    \ in a vector. \nWrite a function that returns the maximum of the numbers in a\
    \ vector. \nWrite a function that returns the minimum of the numbers in a vector.\
    \ \nWrite a function that returns the product of the numbers in a vector and squares.\
    \ \nWrite a function that returns the product of the squares of the numbers in\
    \ a vector and squares. \nWrite a function that returns the maximum of the numbers\
    \ in a vector and squares. \nWrite a function that returns the minimum of the\
    \ numbers in a vector and squares. \nWrite a function that returns the product\
    \ of the numbers in a vector and cubes. \nWrite a function that returns the product\
    \ of the squares of the numbers in a vector and cubes. \nWrite a function that\
    \ returns the maximum of the numbers in a vector and cubes. \nWrite a function\
    \ that returns the minimum of the numbers in a vector and cubes. \nWrite a function\
    \ that returns the product of the numbers in a vector and cubes and squares\n\
    Write a function that returns the product of the squares of the numbers in a vector\
    \ and cubes and squares. \nWrite a function that returns the maximum of the numbers\
    \ in a vector and cubes and squares. \nWrite a function that returns the minimum\
    \ of the numbers in a vector and cubes and squares. \nWrite a function that returns\
    \ the product of the numbers in a vector and cubes and cubes. \nWrite a function\
    \ that returns the product of the squares of the numbers in a vector and cubes\
    \ and cubes. \nWrite a function that returns the product of the cubes of the numbers\
    \ in a vector and cubes and cubes. \nWrite a function that returns the product\
    \ of the cubes of the squares of the numbers in a vector and cubes and cubes.\
    \ \nWrite a function that returns the product of the cubes of the cubes of the\
    \ numbers in a vector and cubes and cubes. \nWrite a function that returns the\
    \ product of the cubes of the cubes of the squares of the numbers in a vector\
    \ and cubes and cubes. \nWrite a function that returns the product of the cubes\
    \ of the cubes of the cubes of the numbers in a vector and cubes and cubes. \n\
    Write a function that returns the product of the cubes of the cubes of the cubes\
    \ of the squares of the numbers in a vector and cubes and cubes. \nWrite a function\
    \ that returns the product of the cubes of the cubes of the cubes of the cubes\
    \ of the numbers in a vector and cubes and cubes. \nWrite a function that returns\
    \ the product of the cubes of the cubes of the cubes of the cubes of the numbers\
    \ in a vector and cubes and cubes. \nWrite a function that returns the product\
    \ of the cubes of the cubes of the cubes of the cubes of the ", "    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.-even)\n    return even\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 5\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the numbers in a\
    \ vector. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for ", "    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    evens = map(add, evens)\n\
    \    return sum(evens)\nend\n</cell>\n<code language=julia-1.3>\nadd([4, 2, 6,\
    \ 7])\n</cell>\n<text>\nExercise 2\nGiven a non-empty list of integers lst. add\
    \ the odd elements that are at even indices..", "    evens = lst[findall(x ->\
    \ mod(x,2) == 0, lst)]\n    return sum(evens)\nend\n</cell>\n<code language=julia-1.3>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a function called sub that\
    \ subtracts the even elements that are at odd indices.", "    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    return sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add(Vector{Int64}([4, 2, 6, 7])) == 10\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the sum of the even numbers in a given list.", " \
    \   evens = lst[1 : (end-1)]\n    odds = lst[(end-1) : end]\n    evens = filter(x\
    \ -> x % 2 == 0, evens)\n    odds = filter(x -> x % 2 == 1, odds)\n    return\
    \ sum(evens) + sum(odds)\nend\n</cell>\n<code language=julia-1.4>\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 6\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the product of all the numbers in a vector. For example, prod([4, 2, 6, 7])\
    \ == 24.", "    even = lst[1::2]\n    odd = lst[1::2]\n    even.+=(odd.+=0)\n\
    \    return even\nend\n</cell>\n<code language=julia-1.5>\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 6\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the even elements of an array. \nWrite a function that returns the\
    \ sum of the even elements of an array. \nWrite a function that returns the sum\
    \ of the even elements of an array. \nWrite a function that returns the sum of\
    \ the even elements of an array. \nWrite a function that returns the sum of the\
    \ even elements of an array. \nWrite a function that returns the sum of the even\
    \ elements of an array. \nWrite a function that returns the sum of the even elements\
    \ of an array. \nWrite a function that returns the sum of the even elements of\
    \ an array. \nWrite a function that returns the sum of the even elements of an\
    \ array. \nWrite a function that returns the sum of the even elements of an array.\
    \ \nWrite a function that returns the sum of the even elements of an array. \n\
    Write a function that returns the sum of the even elements of an array. \nWrite\
    \ a function that returns the sum of the even elements of an array. \nWrite a\
    \ function that returns the sum of the even elements of an array. \nWrite a function\
    \ that returns the sum of the even elements of an array. \nWrite a function that\
    \ returns the sum of the even elements of an array. \nWrite a function that returns\
    \ the sum of the even elements of an array. \nWrite a function that returns the\
    \ sum of the even elements of an array. \nWrite a function that returns the sum\
    \ of the even elements of an array. \nWrite a function that returns the sum of\
    \ the even elements of an array. \nWrite a function that returns the sum of the\
    \ even elements of an array. \nWrite a function that returns the sum of the even\
    \ elements of an array. \nWrite a function that returns the sum of the even elements\
    \ of an array. \nWrite a function that returns the sum of the even elements of\
    \ an array. \nWrite a function that returns the sum of the even elements of an\
    \ array. \nWrite a function that returns the sum of the even elements of an array.\
    \ \nWrite a function that returns the sum of the even elements of an array. \n\
    Write a function that returns the sum of the even elements of an array. \nWrite\
    \ a function that returns the sum of the even elements of an array. \nWrite a\
    \ function that returns the sum of the even elements of an array. \nWrite a function\
    \ that returns the sum of the even elements of an array. \nWrite a function that\
    \ returns the sum of the even elements of an array. \nWrite a function that returns\
    \ the sum of the even elements of an array. \nWrite a function that returns the\
    \ sum of the even elements of an array. \nWrite a function that returns the sum\
    \ of the even elements of an array. \nWrite a function that returns the sum of\
    \ the even elements of an array. \nWrite a function that returns the sum of the\
    \ even elements of an array. \nWrite ", "    evens = lst[1 : (end-lst)]\n    evens\
    \ = filter(x -> x % 2 == 0, evens)\n    evens = map(x -> x + 1, evens)\n    evens\
    \ = map(x -> x + 1, evens)\n    return sum(evens)\nend\n</cell>\n<code language=julia-1.4>\n\
    add(lst)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the product\
    \ of the even elements of a given list. \nFor example, prod([4, 2, 6, 7]) == 24",
  "    evens = lst[1 : (end-lst)]\n    evens = filter(x -> x % 2 == 0, evens)\n  \
    \  evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens\
    \ = map(x -> x + 1, evens)\n    return sum(evens)\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ vector v of length n and returns a vector where each element is the sum of the\
    \ elements at odd indices and even indices.", "    evens = lst[1 : (end-1)]\n\
    \    odds = lst[2:end]\n    evens = filter(x -> x % 2 == 0, evens)\n    odds =\
    \ filter(x -> x % 2 == 1, odds)\n    return sum(evens) + sum(odds)\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nGiven\
    \ a non-empty list of integers lst. add the odd elements that are at even indices..",
  "    even = lst[1::2]\n    odd = lst[1::2]\n    even.+=(odd.+0)/2\n    return even\n\
    end\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function called sub that subtracts the even elements that\
    \ are at odd indices.", "    evens = lst[1 : (end-lst)]\n    evens = filter(x\
    \ -> x % 2 == 0, evens)\n    return sum(evens)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add(Vector{Int64}([4, 2, 6, 7])) == 6\n</cell>\n<text>\nExercise 3.3\n\
    Write a function that returns the sum of the even numbers in a given list. \n\
    Write a function that returns the sum of the even numbers in a given vector. \n\
    Write a function that returns the sum of the even numbers in a given matrix. \n\
    Write a function that returns the sum of the even numbers in a given tensor. "]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
