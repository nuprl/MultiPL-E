name: HumanEval_7_filter_by_substring
language: julia
results:
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters an input\
    \ list of strings only for ones that do not contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'cde']\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdrlvqql7.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdrlvqql7.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter_by_substring(strings, substring, true)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcrk8tkme.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching filter_by_substring(::Array{String,1}, ::String,\
    \ ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpcrk8tkme.jl:8\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpcrk8tkme.jl:8\n   [2] top-level scope at /tmp/tmpcrk8tkme.jl:15\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpcrk8tkme.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpcrk8tkme.jl:16\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching filter_by_substring(::Array{String,1},\
    \ ::String, ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpcrk8tkme.jl:8\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpcrk8tkme.jl:8\n   [2] top-level scope at /tmp/tmpcrk8tkme.jl:16\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpcrk8tkme.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpcrk8tkme.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching filter_by_substring(::Array{String,1},\
    \ ::String, ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpcrk8tkme.jl:8\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpcrk8tkme.jl:8\n   [2] top-level scope at /tmp/tmpcrk8tkme.jl:17\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpcrk8tkme.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpcrk8tkme.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  MethodError: no method matching filter_by_substring(::Array{String,1}, ::String,\
    \ ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpcrk8tkme.jl:8\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpcrk8tkme.jl:8\n   [2] top-level scope at /tmp/tmpcrk8tkme.jl:18\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpcrk8tkme.jl:14\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcrk8tkme.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = strings[findall(x -> contains(x, substring), strings)]\n   \
    \ return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of strings and returns a vector of strings that\
    \ contains all strings from the input vector that contain \"a\" somewhere in their\
    \ string representation. Test it on some examples:\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd7ioszyo.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpd7ioszyo.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.3>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of strings and a vector of strings as inputs and returns a vector\
    \ of strings as output. The function should return all strings in the input vector\
    \ that do not contain the strings in the input vector. For example, if the input\
    \ vector is [\"abc\", \"bacd\", \"cde\", \"array\"] and the input vector is [\"\
    a\", \"b\", \"c\", \"d\"], then the function should return [\"abc\", \"bacd\"\
    , \"array\"].\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2wo01092.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2wo01092.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    substring = lowercase(substring)\n    \n    strings = strings[:]\n\
    \    \n    strings = filter((x) -> contains(lowercase(x), substring), strings)\n\
    \    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp965jdb0w.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp965jdb0w.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that filters an input list of strings only for ones\
    \ that do not contain given substring\n>>> filter_by_substring([], 'a')\n[]\n\
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n['abc', 'bacd',\
    \ 'cde']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n['abc',\
    \ 'bacd', 'cde']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'c')\n\
    ['abc', 'bacd', 'cde']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'],\
    \ 'd')\n['array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'e')\n\
    ['array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'f')\n['array']\n\
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'g')\n['array']\n>>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'h')\n['array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'i')\n['array']\n>>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'j')\n['array']\n>>> filter_by_substring(['abc', 'bacd', 'cde',\
    \ 'array'], 'k')\n['array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'],\
    \ 'l')\n['array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'm')\n\
    ['array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'n')\n['array']\n\
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'o')\n['array']\n>>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'p')\n['array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'q')\n['array']\n>>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'r')\n['array']\n>>> filter_by_substring(['abc', 'bacd', 'cde',\
    \ 'array'], 's')\n['array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'],\
    \ 't')\n['array']\n>>> filter_by_substring(\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl_whhof2.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpl_whhof2.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that takes a string and returns\
    \ the number of times the string occurs in the string. \nWrite a function that\
    \ takes a string and returns the number of times the string occurs in the string.\
    \ \nWrite a function that takes a string and returns the number of times the string\
    \ occurs in the string. \nWrite a function that takes a string and returns the\
    \ number of times the string occurs in the string. \nWrite a function that takes\
    \ a string and returns the number of times the string occurs in the string. \n\
    Write a function that takes a string and returns the number of times the string\
    \ occurs in the string. \nWrite a function that takes a string and returns the\
    \ number of times the string occurs in the string. \nWrite a function that takes\
    \ a string and returns the number of times the string occurs in the string. \n\
    Write a function that takes a string and returns the number of times the string\
    \ occurs in the string. \nWrite a function that takes a string and returns the\
    \ number of times the string occurs in the string. \nWrite a function that takes\
    \ a string and returns the number of times the string occurs in the string. \n\
    Write a function that takes a string and returns the number of times the string\
    \ occurs in the string. \nWrite a function that takes a string and returns the\
    \ number of times the string occurs in the string. \nWrite a function that takes\
    \ a string and returns the number of times the string occurs in the string. \n\
    Write a function that takes a string and returns the number of times the string\
    \ occurs in the string. \nWrite a function that takes a string and returns the\
    \ number of times the string occurs in the string. \nWrite a function that takes\
    \ a string and returns the number of times the string occurs in the string. \n\
    Write a function that takes a string and returns the number of times the string\
    \ occurs in the string. \nWrite a function that takes a string and returns the\
    \ number of times the string occurs in the string. \nWrite a function that takes\
    \ a string and returns the number of times the string occurs in the string. \n\
    Write a function that takes a string and returns the number of times the string\
    \ occurs in the string. \nWrite a function that takes a string and returns the\
    \ number of times the string occurs in the string. \nWrite a function that takes\
    \ a string and returns the number of times the string occurs in the string. \n\
    Write a function that takes a string and returns the number of times the string\
    \ occurs in the string. \nWrite a function that takes a string and returns the\
    \ number of times the string occurs in the string. \nWrite a function that takes\
    \ a string and returns the number of times the string occurs in the string. \n\
    Write a function that takes a string and returns the number of times the string\
    \ occurs in the string. \nWrite a function that takes a string and returns the\
    \ number of times the string occurs in the string. \nWrite a function that takes\
    \ a string and returns the number of times the string occurs in the string. \n\
    Write a function that takes a string and returns the number of times the string\
    \ occurs in the string. \nWrite a function that \nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphzg2lrrt.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphzg2lrrt.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Set{String}()\n    for string in strings\n  \
    \      if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return collect(filtered_strings)\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of strings and returns\
    \ a vector of strings containing only the strings that begin with the substring\
    \ 'a'.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphrwyuw_0.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphrwyuw_0.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = filter(x->contains(x, substring), strings)\n    return\
    \ strings\nend\n</cell>\n<text>\nExercise 2\nWrite a function that filters an\
    \ input list of strings only for ones that do not contain given substring\n>>>\
    \ filter_by_substring([], 'a')\n[]\n>>> filter_by_substring(['abc', 'bacd', 'cde',\
    \ 'array'], 'a')\n['abc', 'cde']\n>>> filter_by_substring(['abc', 'bacd', 'cde',\
    \ 'array'], 'ab')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'ba')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'cd')\n['abc', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'de')\n['abc', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'array')\n['abc', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'abd')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bac')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bcd')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'cde')\n['abc', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'cda')\n['abc', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'cdb')\n['abc', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'cdc')\n['abc', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'cdea')\n['abc', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'cdeb')\n['abc', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'cdec')\n['abc', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'cded')\n['abc', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8km6wf63.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8km6wf63.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of\
    \ strings and a substring and returns all strings that contain that substring.\
    \ \nFor example, given [\"abc\", \"bacd\", \"cde\", \"array\", \"ab\", \"ac\"\
    , \"bcd\", \"bde\", \"cd\", \"de\", \"ef\", \"f\"], \nthe function should return\
    \ [\"abc\", \"bacd\", \"array\", \"ab\", \"ac\", \"bcd\", \"bde\", \"cd\", \"\
    de\", \"ef\", \"f\"].\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv2zoi1gw.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpv2zoi1gw.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring([1,2,3],\
    \ \"a\")\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t\
    @test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqbbvcv65.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqbbvcv65.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(x -> contains(x, substring), strings)]\n\
    \    \n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppjf_njm4.jl:19\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmppjf_njm4.jl:9\n\
    \   [2] #85 at ./none:0 [inlined]\n   [3] iterate at ./iterators.jl:430 [inlined]\n\
    \   [4] iterate at ./generator.jl:44 [inlined]\n   [5] grow_to!(::Array{Int64,1},\
    \ ::Base.Generator{Base.Iterators.Filter{Base.var\"#85#86\"{var\"#3#4\"{String}},Base.Iterators.Pairs{Int64,String,LinearIndices{1,Tuple{Base.OneTo{Int64}}},Array{String,1}}},typeof(first)})\
    \ at ./array.jl:726\n   [6] collect at ./array.jl:663 [inlined]\n   [7] findall\
    \ at ./array.jl:2024 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmppjf_njm4.jl:9\n   [9] top-level scope at /tmp/tmppjf_njm4.jl:19\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmppjf_njm4.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmppjf_njm4.jl:20\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains not defined\n\
    \  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmppjf_njm4.jl:9\n\
    \   [2] #85 at ./none:0 [inlined]\n   [3] iterate at ./iterators.jl:430 [inlined]\n\
    \   [4] iterate at ./generator.jl:44 [inlined]\n   [5] grow_to!(::Array{Int64,1},\
    \ ::Base.Generator{Base.Iterators.Filter{Base.var\"#85#86\"{var\"#3#4\"{String}},Base.Iterators.Pairs{Int64,String,LinearIndices{1,Tuple{Base.OneTo{Int64}}},Array{String,1}}},typeof(first)})\
    \ at ./array.jl:726\n   [6] collect at ./array.jl:663 [inlined]\n   [7] findall\
    \ at ./array.jl:2024 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmppjf_njm4.jl:9\n   [9] top-level scope at /tmp/tmppjf_njm4.jl:20\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmppjf_njm4.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmppjf_njm4.jl:21\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  UndefVarError: contains not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"\
    {String})(::String) at /tmp/tmppjf_njm4.jl:9\n   [2] #85 at ./none:0 [inlined]\n\
    \   [3] iterate at ./iterators.jl:430 [inlined]\n   [4] iterate at ./generator.jl:44\
    \ [inlined]\n   [5] grow_to!(::Array{Int64,1}, ::Base.Generator{Base.Iterators.Filter{Base.var\"\
    #85#86\"{var\"#3#4\"{String}},Base.Iterators.Pairs{Int64,String,LinearIndices{1,Tuple{Base.OneTo{Int64}}},Array{String,1}}},typeof(first)})\
    \ at ./array.jl:726\n   [6] collect at ./array.jl:663 [inlined]\n   [7] findall\
    \ at ./array.jl:2024 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmppjf_njm4.jl:9\n   [9] top-level scope at /tmp/tmppjf_njm4.jl:21\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmppjf_njm4.jl:17\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppjf_njm4.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nFilter an input list of strings\
    \ only for ones that do not contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'cde']\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7gjks1u7.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7gjks1u7.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring)]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2: Filter a DataFrame\
    \ for rows that contain a given substring\nWrite a function that filters a DataFrame\
    \ for rows that contain a given substring. \nThe function should take two arguments:\
    \ the first is the DataFrame to filter, the second is the substring to look for.\
    \ \nThe function should return a new DataFrame that only contains rows that contain\
    \ the given substring.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0pspjhns.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0pspjhns.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjt3ngs78.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjt3ngs78.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter(x->contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of strings and a substring and returns a vector of strings that\
    \ only contain the substring.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2hhdxc1w.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2hhdxc1w.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    for string in strings\n\
    \        if string.contains(substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns a new string\
    \ where all occurrences of \"a\" have been replaced with \"A\"\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplkg27nau.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplkg27nau.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters an input\
    \ list of strings only for those that contain all given substrings\n>>> filter_by_substrings([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\", \"b\", \"c\")\n[\"abc\", \"bacd\"\
    , \"array\"]\n>>> filter_by_substrings([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\", \"b\", \"c\", \"d\")\n[]\n>>> filter_by_substrings([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\", \"b\", \"c\", \"d\", \"e\")\n[\"abc\", \"bacd\"\
    , \"array\"]\n>>> filter_by_substrings([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\", \"b\", \"c\", \"d\", \"e\", \"f\")\n[]\n>>> filter_by_substrings([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"\
    , \"g\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substrings([\"abc\", \"\
    bacd\", \"cde\", \"array\"], \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\",\
    \ \"h\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substrings([\"abc\", \"\
    bacd\", \"cde\", \"array\"], \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\",\
    \ \"h\", \"i\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substrings([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"\
    , \"g\", \"h\", \"i\", \"j\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substrings([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"\
    , \"g\", \"h\", \"i\", \"j\", \"k\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substrings([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"\
    , \"g\", \"h\", \"i\", \"j\", \"k\", \"l\")\n[\"abc\", \"bacd\", \"array\"]\n\
    >>> filter_by_substrings([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\", \"b\"\
    , \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"\
    )\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substrings([\"abc\", \"bacd\"\
    , \"c\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgl19dcme.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgl19dcme.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    \n    return\
    \ strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpt84afe1_.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Array{String,1}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Function, ::Any) at array.jl:2024\n \
    \   findall(!Matched::Union{Regex, AbstractString}, ::AbstractString; overlap)\
    \ at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n   [1]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpt84afe1_.jl:9\n\
    \   [2] top-level scope at /tmp/tmpt84afe1_.jl:18\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpt84afe1_.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpt84afe1_.jl:19\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Function, ::Any)\
    \ at array.jl:2024\n    findall(!Matched::Union{Regex, AbstractString}, ::AbstractString;\
    \ overlap) at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpt84afe1_.jl:9\n\
    \   [2] top-level scope at /tmp/tmpt84afe1_.jl:19\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpt84afe1_.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpt84afe1_.jl:20\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Function, ::Any)\
    \ at array.jl:2024\n    findall(!Matched::Union{Regex, AbstractString}, ::AbstractString;\
    \ overlap) at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpt84afe1_.jl:9\n\
    \   [2] top-level scope at /tmp/tmpt84afe1_.jl:20\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpt84afe1_.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpt84afe1_.jl:21\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  MethodError: no method matching findall(::Array{String,1}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Function, ::Any) at array.jl:2024\n \
    \   findall(!Matched::Union{Regex, AbstractString}, ::AbstractString; overlap)\
    \ at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n   [1]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpt84afe1_.jl:9\n\
    \   [2] top-level scope at /tmp/tmpt84afe1_.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpt84afe1_.jl:17\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt84afe1_.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of strings and a substring and returns a vector of strings containing\
    \ only the strings that contain the substring.\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz4icvhed.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpz4icvhed.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring .==. true)]\n    \n\
    \    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid identifier name \".\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9ls_xwx1.jl:9\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9ls_xwx1.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoau95alv.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpoau95alv.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmph2f58lpe.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Array{String,1}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Function, ::Any) at array.jl:2024\n \
    \   findall(!Matched::Union{Regex, AbstractString}, ::AbstractString; overlap)\
    \ at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n   [1]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmph2f58lpe.jl:9\n\
    \   [2] top-level scope at /tmp/tmph2f58lpe.jl:17\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmph2f58lpe.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmph2f58lpe.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Function, ::Any)\
    \ at array.jl:2024\n    findall(!Matched::Union{Regex, AbstractString}, ::AbstractString;\
    \ overlap) at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmph2f58lpe.jl:9\n\
    \   [2] top-level scope at /tmp/tmph2f58lpe.jl:18\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmph2f58lpe.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmph2f58lpe.jl:19\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Function, ::Any)\
    \ at array.jl:2024\n    findall(!Matched::Union{Regex, AbstractString}, ::AbstractString;\
    \ overlap) at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmph2f58lpe.jl:9\n\
    \   [2] top-level scope at /tmp/tmph2f58lpe.jl:19\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmph2f58lpe.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmph2f58lpe.jl:20\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  MethodError: no method matching findall(::Array{String,1}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Function, ::Any) at array.jl:2024\n \
    \   findall(!Matched::Union{Regex, AbstractString}, ::AbstractString; overlap)\
    \ at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n   [1]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmph2f58lpe.jl:9\n\
    \   [2] top-level scope at /tmp/tmph2f58lpe.jl:20\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmph2f58lpe.jl:16\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph2f58lpe.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter_by_substring(strings, substring, true)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpuhnx6b3g.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching filter_by_substring(::Array{String,1}, ::String,\
    \ ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpuhnx6b3g.jl:8\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpuhnx6b3g.jl:8\n   [2] top-level scope at /tmp/tmpuhnx6b3g.jl:15\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpuhnx6b3g.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpuhnx6b3g.jl:16\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching filter_by_substring(::Array{String,1},\
    \ ::String, ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpuhnx6b3g.jl:8\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpuhnx6b3g.jl:8\n   [2] top-level scope at /tmp/tmpuhnx6b3g.jl:16\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpuhnx6b3g.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpuhnx6b3g.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching filter_by_substring(::Array{String,1},\
    \ ::String, ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpuhnx6b3g.jl:8\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpuhnx6b3g.jl:8\n   [2] top-level scope at /tmp/tmpuhnx6b3g.jl:17\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpuhnx6b3g.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpuhnx6b3g.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  MethodError: no method matching filter_by_substring(::Array{String,1}, ::String,\
    \ ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpuhnx6b3g.jl:8\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpuhnx6b3g.jl:8\n   [2] top-level scope at /tmp/tmpuhnx6b3g.jl:18\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpuhnx6b3g.jl:14\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuhnx6b3g.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.contains(substring)\n            strings.remove(string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of strings and a substring\
    \ and returns all strings that contain that substring. \nFor example, given [\"\
    abc\", \"bacd\", \"cde\", \"array\", \"ab\", \"abba\", \"abb\"], return [\"abc\"\
    , \"bacd\", \"array\"].\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo1hxji_t.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpo1hxji_t.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nfilter_by_substring!\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpontuzion.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpontuzion.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that filters an input\
    \ list of strings only for those that contain given substring\nand are longer\
    \ than a given length\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\", 2)\n[\"abc\", \"bacd\"]\n>>> filter_by_substring([\"abc\", \"\
    bacd\", \"cde\", \"array\"], \"a\", 3)\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\", 4)\n[\"abc\", \"bacd\", \"array\"\
    ]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\", 5)\n\
    [\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\", 6)\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\", 7)\n[\"abc\", \"bacd\", \"array\"\
    ]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\", 8)\n\
    [\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\", 9)\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\", 10)\n[\"abc\", \"bacd\", \"array\"\
    ]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\", 11)\n\
    [\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\", 12)\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\", 13)\n[\"abc\", \"bacd\", \"array\"\
    ]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\", 14)\n\
    [\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\", 15)\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\", 16)\n[\"abc\", \"bacd\", \"array\"\
    ]\n>>> filter_by_substring([\"abc\", \"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfs10jwbq.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfs10jwbq.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgqx937mh.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgqx937mh.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter_by_substring(strings, substring, true)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpw6aa4mvh.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching filter_by_substring(::Array{String,1}, ::String,\
    \ ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpw6aa4mvh.jl:8\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpw6aa4mvh.jl:8\n   [2] top-level scope at /tmp/tmpw6aa4mvh.jl:15\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpw6aa4mvh.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpw6aa4mvh.jl:16\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching filter_by_substring(::Array{String,1},\
    \ ::String, ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpw6aa4mvh.jl:8\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpw6aa4mvh.jl:8\n   [2] top-level scope at /tmp/tmpw6aa4mvh.jl:16\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpw6aa4mvh.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpw6aa4mvh.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching filter_by_substring(::Array{String,1},\
    \ ::String, ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpw6aa4mvh.jl:8\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpw6aa4mvh.jl:8\n   [2] top-level scope at /tmp/tmpw6aa4mvh.jl:17\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpw6aa4mvh.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpw6aa4mvh.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  MethodError: no method matching filter_by_substring(::Array{String,1}, ::String,\
    \ ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpw6aa4mvh.jl:8\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpw6aa4mvh.jl:8\n   [2] top-level scope at /tmp/tmpw6aa4mvh.jl:18\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpw6aa4mvh.jl:14\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw6aa4mvh.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter(x->contains(x, substring), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptfu2utfs.jl:17\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmptfu2utfs.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmptfu2utfs.jl:8\n\
    \   [4] top-level scope at /tmp/tmptfu2utfs.jl:17\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmptfu2utfs.jl:15\n  \ntest set: Error During\
    \ Test at /tmp/tmptfu2utfs.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains not defined\n\
    \  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmptfu2utfs.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmptfu2utfs.jl:8\n\
    \   [4] top-level scope at /tmp/tmptfu2utfs.jl:18\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmptfu2utfs.jl:15\n  \ntest set: Error During\
    \ Test at /tmp/tmptfu2utfs.jl:19\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  UndefVarError: contains not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"\
    {String})(::String) at /tmp/tmptfu2utfs.jl:8\n   [2] filter(::var\"#3#4\"{String},\
    \ ::Array{String,1}) at ./array.jl:2375\n   [3] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmptfu2utfs.jl:8\n   [4] top-level scope at /tmp/tmptfu2utfs.jl:19\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmptfu2utfs.jl:15\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptfu2utfs.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of strings and a substring and\
    \ returns a vector of strings containing only the strings that contain the substring.\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpshgw3a6j.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpshgw3a6j.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters a given\
    \ list of strings only for those that contain at least two of the given substrings.\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa2pjvb9s.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpa2pjvb9s.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter( x -> contains(x,\
    \ substring), strings)\n    \n    return strings\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpue53maqw.jl:21\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmpue53maqw.jl:11\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpue53maqw.jl:11\n\
    \   [4] top-level scope at /tmp/tmpue53maqw.jl:21\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpue53maqw.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpue53maqw.jl:22\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains not defined\n\
    \  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmpue53maqw.jl:11\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpue53maqw.jl:11\n\
    \   [4] top-level scope at /tmp/tmpue53maqw.jl:22\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpue53maqw.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpue53maqw.jl:23\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  UndefVarError: contains not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"\
    {String})(::String) at /tmp/tmpue53maqw.jl:11\n   [2] filter(::var\"#3#4\"{String},\
    \ ::Array{String,1}) at ./array.jl:2375\n   [3] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpue53maqw.jl:11\n   [4] top-level scope at /tmp/tmpue53maqw.jl:23\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpue53maqw.jl:19\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpue53maqw.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = strings[findall(strings,substring)]\n    return strings\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8tdik6j0.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Array{String,1}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Function, ::Any) at array.jl:2024\n \
    \   findall(!Matched::Union{Regex, AbstractString}, ::AbstractString; overlap)\
    \ at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n   [1]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp8tdik6j0.jl:8\n\
    \   [2] top-level scope at /tmp/tmp8tdik6j0.jl:16\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8tdik6j0.jl:15\n  \ntest set: Error During\
    \ Test at /tmp/tmp8tdik6j0.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Function, ::Any)\
    \ at array.jl:2024\n    findall(!Matched::Union{Regex, AbstractString}, ::AbstractString;\
    \ overlap) at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp8tdik6j0.jl:8\n\
    \   [2] top-level scope at /tmp/tmp8tdik6j0.jl:17\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8tdik6j0.jl:15\n  \ntest set: Error During\
    \ Test at /tmp/tmp8tdik6j0.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Function, ::Any)\
    \ at array.jl:2024\n    findall(!Matched::Union{Regex, AbstractString}, ::AbstractString;\
    \ overlap) at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp8tdik6j0.jl:8\n\
    \   [2] top-level scope at /tmp/tmp8tdik6j0.jl:18\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8tdik6j0.jl:15\n  \ntest set: Error During\
    \ Test at /tmp/tmp8tdik6j0.jl:19\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  MethodError: no method matching findall(::Array{String,1}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Function, ::Any) at array.jl:2024\n \
    \   findall(!Matched::Union{Regex, AbstractString}, ::AbstractString; overlap)\
    \ at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n   [1]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp8tdik6j0.jl:8\n\
    \   [2] top-level scope at /tmp/tmp8tdik6j0.jl:19\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8tdik6j0.jl:15\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8tdik6j0.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter_by_substring(strings, substring, true)\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\", true)\n</cell>\n<text>\nfilter_by_substring!\nfilter_by_substring!()\
    \ modifies the input list in-place to only contain strings that contain the given\
    \ substring\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9oic0hvq.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9oic0hvq.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of strings and returns\
    \ a vector of strings with all but the first character removed. For example, given\
    \ [\"abc\", \"bacd\", \"cde\", \"array\"], return [\"bc\", \"cd\", \"de\", \"\
    array\"].\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t\
    @test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvn_4htth.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvn_4htth.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ a list of all characters that are not in the given string. \nFor example, given\
    \ \"abcabc\", your function should return [\"a\", \"b\", \"c\"].\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa4rr9ewk.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpa4rr9ewk.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = filter( x -> contains(x, substring), strings)\n    \n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of strings and a vector of strings as inputs\
    \ and returns a vector of strings as output. The function should return all strings\
    \ in the input vector that do not contain any of the strings in the input vector.\
    \ For example, if the input vector is [\"abc\", \"bacd\", \"cde\", \"array\"]\
    \ and the input vector is [\"a\", \"b\", \"c\"], then the output vector should\
    \ be [\"abc\", \"bacd\", \"array\"].\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm1ve4f8f.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm1ve4f8f.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter(x->contains(x, substring), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpq5tyylmx.jl:17\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmpq5tyylmx.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpq5tyylmx.jl:8\n\
    \   [4] top-level scope at /tmp/tmpq5tyylmx.jl:17\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpq5tyylmx.jl:15\n  \ntest set: Error During\
    \ Test at /tmp/tmpq5tyylmx.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains not defined\n\
    \  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmpq5tyylmx.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpq5tyylmx.jl:8\n\
    \   [4] top-level scope at /tmp/tmpq5tyylmx.jl:18\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpq5tyylmx.jl:15\n  \ntest set: Error During\
    \ Test at /tmp/tmpq5tyylmx.jl:19\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  UndefVarError: contains not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"\
    {String})(::String) at /tmp/tmpq5tyylmx.jl:8\n   [2] filter(::var\"#3#4\"{String},\
    \ ::Array{String,1}) at ./array.jl:2375\n   [3] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpq5tyylmx.jl:8\n   [4] top-level scope at /tmp/tmpq5tyylmx.jl:19\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpq5tyylmx.jl:15\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq5tyylmx.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.contains(substring)\n            strings.remove(string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 4\nWrite a function that filters strings by a regular expression.\
    \ \nThe function should take two arguments: a list of strings, and a regular expression.\
    \ \nThe function should return a list of strings that match the regular expression.\
    \ \nThe function should ignore case when matching.\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7ct47br4.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7ct47br4.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that filters an input list\
    \ of strings only for ones that do not contain given substring\n>>> filter_by_substring([],\
    \ 'a')\n[]\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n['abc',\
    \ 'cde']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'ab')\n['abc',\
    \ 'cde']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'ba')\n['bacd',\
    \ 'cde']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'bacd')\n['bacd',\
    \ 'cde']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'bacdc')\n\
    ['bacd', 'cde']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'bacdca')\n\
    ['bacd', 'cde']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'bacdc')\n\
    ['bacd', 'cde']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'bacdca')\n\
    ['bacd', 'cde']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'bacdc')\n\
    ['bacd', 'cde']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'bacdca')\n\
    ['bacd', 'cde']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'bacdc')\n\
    ['bacd', 'cde']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'bacdca')\n\
    ['bacd', 'cde']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'bacdc')\n\
    ['bacd', 'cde']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'bacdca')\n\
    ['bacd', 'cde']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'bacdc')\n\
    ['bacd', 'cde']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'bacdca')\n\
    ['bacd', 'cde']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'bacdc')\n\
    ['bacd', 'cde']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'bacdca')\n\
    ['bacd', 'cde']\n>>> filter_by_substring(['abc', '\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp86dx6lws.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp86dx6lws.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = [s for s in strings if substring in s]\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpeahqfp33.jl:17\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpeahqfp33.jl:8\n   [9] top-level scope at /tmp/tmpeahqfp33.jl:17\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpeahqfp33.jl:15\n  \ntest set: Error During\
    \ Test at /tmp/tmpeahqfp33.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpeahqfp33.jl:8\n\
    \   [9] top-level scope at /tmp/tmpeahqfp33.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpeahqfp33.jl:15\n  \ntest set: Error During\
    \ Test at /tmp/tmpeahqfp33.jl:19\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpeahqfp33.jl:8\n\
    \   [9] top-level scope at /tmp/tmpeahqfp33.jl:19\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpeahqfp33.jl:15\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeahqfp33.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    \n    return\
    \ strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnqtr7fir.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Array{String,1}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Function, ::Any) at array.jl:2024\n \
    \   findall(!Matched::Union{Regex, AbstractString}, ::AbstractString; overlap)\
    \ at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n   [1]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpnqtr7fir.jl:9\n\
    \   [2] top-level scope at /tmp/tmpnqtr7fir.jl:18\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpnqtr7fir.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpnqtr7fir.jl:19\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Function, ::Any)\
    \ at array.jl:2024\n    findall(!Matched::Union{Regex, AbstractString}, ::AbstractString;\
    \ overlap) at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpnqtr7fir.jl:9\n\
    \   [2] top-level scope at /tmp/tmpnqtr7fir.jl:19\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpnqtr7fir.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpnqtr7fir.jl:20\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Function, ::Any)\
    \ at array.jl:2024\n    findall(!Matched::Union{Regex, AbstractString}, ::AbstractString;\
    \ overlap) at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpnqtr7fir.jl:9\n\
    \   [2] top-level scope at /tmp/tmpnqtr7fir.jl:20\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpnqtr7fir.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpnqtr7fir.jl:21\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  MethodError: no method matching findall(::Array{String,1}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Function, ::Any) at array.jl:2024\n \
    \   findall(!Matched::Union{Regex, AbstractString}, ::AbstractString; overlap)\
    \ at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n   [1]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpnqtr7fir.jl:9\n\
    \   [2] top-level scope at /tmp/tmpnqtr7fir.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpnqtr7fir.jl:17\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnqtr7fir.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of strings and a vector of substrings and returns a vector of\
    \ strings that only contain the substrings.\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt6a63eb7.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpt6a63eb7.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring .== true)]\n    \n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7vtjri_w.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7vtjri_w.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of\
    \ strings and a substring and returns a vector of strings that only contain the\
    \ substring.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpijrp3s6v.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpijrp3s6v.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter( x -> contains(substring,x), strings)\n    return strings\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that filters an input list\
    \ of strings only for ones that do not contain given substring\n>>> filter_by_substring([],\
    \ 'a')\n[]\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n['abc',\
    \ 'cde']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n['abc',\
    \ 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'],\
    \ 'c')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'd')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'e')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'f')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'g')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'h')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'i')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'j')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'k')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'l')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'm')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'n')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'o')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'p')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'q')\n['abc\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdifmm0de.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdifmm0de.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.4>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of strings and a substring and returns a vector of strings that\
    \ only contain the substring.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyo9_ge7x.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyo9_ge7x.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter(x->contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ takes a vector of strings and returns a vector of strings containing only the\
    \ strings that begin with the substring \"ab\"\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7w1e9_2g.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7w1e9_2g.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring .== true)]\n    return\
    \ strings\nend\n</cell>\n<text>\nExercise 2\nWrite a function that filters input\
    \ list for strings that contain a given substring\nand that do not contain a given\
    \ substring\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a', false)\n\
    ['abc', 'bacd']\n</text>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa_br6uj9.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpa_br6uj9.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter_by_substring(strings, substring, true)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpw8ggjiyn.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching filter_by_substring(::Array{String,1}, ::String,\
    \ ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpw8ggjiyn.jl:8\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpw8ggjiyn.jl:8\n   [2] top-level scope at /tmp/tmpw8ggjiyn.jl:15\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpw8ggjiyn.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpw8ggjiyn.jl:16\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching filter_by_substring(::Array{String,1},\
    \ ::String, ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpw8ggjiyn.jl:8\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpw8ggjiyn.jl:8\n   [2] top-level scope at /tmp/tmpw8ggjiyn.jl:16\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpw8ggjiyn.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpw8ggjiyn.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching filter_by_substring(::Array{String,1},\
    \ ::String, ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpw8ggjiyn.jl:8\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpw8ggjiyn.jl:8\n   [2] top-level scope at /tmp/tmpw8ggjiyn.jl:17\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpw8ggjiyn.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpw8ggjiyn.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  MethodError: no method matching filter_by_substring(::Array{String,1}, ::String,\
    \ ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpw8ggjiyn.jl:8\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpw8ggjiyn.jl:8\n   [2] top-level scope at /tmp/tmpw8ggjiyn.jl:18\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpw8ggjiyn.jl:14\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw8ggjiyn.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ contains(string, substring)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that filters an input list of strings only for ones that do not contain\
    \ given substring\ne.g. filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'd')\n\
    should return ['abc', 'cde']\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppavp256j.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppavp256j.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<text>\nExercise 2: filter_by_substring\nWrite a function that filters\
    \ an input list of strings only for ones that contain given substring\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'ba')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacd')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacd', true)\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacd', false)\n['abc', 'bacd', 'cde', 'array']\n>>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'bacd', true)\n['bacd',\
    \ 'cde', 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'bacd',\
    \ false)\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'bacd', true)\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacd', false)\n['abc', 'bacd', 'cde', 'array']\n>>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'bacd', true)\n['bacd',\
    \ 'cde', 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'bacd',\
    \ false)\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'bacd', true)\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacd', false)\n['abc', 'bacd', 'cde', 'array']\n>>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'bacd', true)\n['bacd',\
    \ 'cde', 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'bacd',\
    \ false)\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'bacd', true)\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprqv_2bd9.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprqv_2bd9.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring .== \"_\")]\n    \n\
    \    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkjbn3yfy.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Array{String,1}, ::Bool)\n  Closest\
    \ candidates are:\n    findall(!Matched::Base.Fix2{typeof(in),T} where T, ::Number)\
    \ at array.jl:2083\n    findall(!Matched::Function, ::Number) at array.jl:2082\n\
    \    findall(!Matched::Function, ::Any) at array.jl:2024\n    ...\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpkjbn3yfy.jl:9\n\
    \   [2] top-level scope at /tmp/tmpkjbn3yfy.jl:18\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkjbn3yfy.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpkjbn3yfy.jl:19\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::Bool)\n  Closest candidates are:\n    findall(!Matched::Base.Fix2{typeof(in),T}\
    \ where T, ::Number) at array.jl:2083\n    findall(!Matched::Function, ::Number)\
    \ at array.jl:2082\n    findall(!Matched::Function, ::Any) at array.jl:2024\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1}, ::String)\
    \ at /tmp/tmpkjbn3yfy.jl:9\n   [2] top-level scope at /tmp/tmpkjbn3yfy.jl:19\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkjbn3yfy.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpkjbn3yfy.jl:20\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::Bool)\n  Closest candidates are:\n    findall(!Matched::Base.Fix2{typeof(in),T}\
    \ where T, ::Number) at array.jl:2083\n    findall(!Matched::Function, ::Number)\
    \ at array.jl:2082\n    findall(!Matched::Function, ::Any) at array.jl:2024\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1}, ::String)\
    \ at /tmp/tmpkjbn3yfy.jl:9\n   [2] top-level scope at /tmp/tmpkjbn3yfy.jl:20\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkjbn3yfy.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpkjbn3yfy.jl:21\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  MethodError: no method matching findall(::Array{String,1}, ::Bool)\n  Closest\
    \ candidates are:\n    findall(!Matched::Base.Fix2{typeof(in),T} where T, ::Number)\
    \ at array.jl:2083\n    findall(!Matched::Function, ::Number) at array.jl:2082\n\
    \    findall(!Matched::Function, ::Any) at array.jl:2024\n    ...\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpkjbn3yfy.jl:9\n\
    \   [2] top-level scope at /tmp/tmpkjbn3yfy.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkjbn3yfy.jl:17\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkjbn3yfy.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ contains(string, substring)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<text>\nfilter_by_substring()\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn_raeila.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpn_raeila.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    \n    return\
    \ strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpffph2eia.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Array{String,1}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Function, ::Any) at array.jl:2024\n \
    \   findall(!Matched::Union{Regex, AbstractString}, ::AbstractString; overlap)\
    \ at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n   [1]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpffph2eia.jl:9\n\
    \   [2] top-level scope at /tmp/tmpffph2eia.jl:18\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpffph2eia.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpffph2eia.jl:19\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Function, ::Any)\
    \ at array.jl:2024\n    findall(!Matched::Union{Regex, AbstractString}, ::AbstractString;\
    \ overlap) at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpffph2eia.jl:9\n\
    \   [2] top-level scope at /tmp/tmpffph2eia.jl:19\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpffph2eia.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpffph2eia.jl:20\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Function, ::Any)\
    \ at array.jl:2024\n    findall(!Matched::Union{Regex, AbstractString}, ::AbstractString;\
    \ overlap) at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpffph2eia.jl:9\n\
    \   [2] top-level scope at /tmp/tmpffph2eia.jl:20\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpffph2eia.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpffph2eia.jl:21\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  MethodError: no method matching findall(::Array{String,1}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Function, ::Any) at array.jl:2024\n \
    \   findall(!Matched::Union{Regex, AbstractString}, ::AbstractString; overlap)\
    \ at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n   [1]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpffph2eia.jl:9\n\
    \   [2] top-level scope at /tmp/tmpffph2eia.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpffph2eia.jl:17\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpffph2eia.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns a string with all the characters in lowercase and all the characters\
    \ in uppercase. \nFor example, \n\"abc\" -> \"ABC\"\n\"AbC\" -> \"ABC\"\n\"aBc\"\
    \ -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"\
    aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\
    \n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"\
    ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\"\
    \ -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"\
    aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\
    \n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"\
    ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\"\
    \ -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"\
    aBcD\" -> \"ABC\"\n\"aBcD\" -> \"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi5few_l5.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpi5few_l5.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = [s for s in strings if substring in s]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.3>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of strings and a vector of strings as arguments and returns a\
    \ vector of the same length with strings containing all the substrings given in\
    \ the second argument that appear in the first argument.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8penbqlq.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8penbqlq.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<text>\nExercise 3: Filtering by substring\nWrite a function that\
    \ filters an input list of strings only for ones that contain given substring\n\
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n['abc', 'bacd',\
    \ 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'ab')\n['abc',\
    \ 'bacd']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'ba')\n['bacd',\
    \ 'cde', 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'cd')\n\
    ['cde', 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'array')\n\
    ['array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'd')\n[]\n\
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacd')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacdab')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacdabd')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacdabda')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacdabda')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacdabda')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacdabda')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacdabda')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacdabda')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacdabda')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacdabda')\n['ba\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp00ymglee.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp00ymglee.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nfilter_by_substring\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3z3lf7uk.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3z3lf7uk.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that filters an input list\
    \ of strings only for ones that do not contain given substring\n>>> filter_by_substring([],\
    \ 'a')\n[]\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n['abc',\
    \ 'cde']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'c')\n['abc',\
    \ 'bacd', 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'd')\n\
    ['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'],\
    \ 'e')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde',\
    \ 'array'], 'f')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'g')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'h')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'i')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'j')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'k')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'l')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'm')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'n')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'o')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'p')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'q')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'r')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 's')\n['abc', 'bacd', 'array']\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpalwuao67.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpalwuao67.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring)]\n    \n    return\
    \ strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxj_vgbv0.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Array{String,1}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Function, ::Any) at array.jl:2024\n \
    \   findall(!Matched::Union{Regex, AbstractString}, ::AbstractString; overlap)\
    \ at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n   [1]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpxj_vgbv0.jl:9\n\
    \   [2] top-level scope at /tmp/tmpxj_vgbv0.jl:18\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxj_vgbv0.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpxj_vgbv0.jl:19\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Function, ::Any)\
    \ at array.jl:2024\n    findall(!Matched::Union{Regex, AbstractString}, ::AbstractString;\
    \ overlap) at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpxj_vgbv0.jl:9\n\
    \   [2] top-level scope at /tmp/tmpxj_vgbv0.jl:19\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxj_vgbv0.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpxj_vgbv0.jl:20\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Function, ::Any)\
    \ at array.jl:2024\n    findall(!Matched::Union{Regex, AbstractString}, ::AbstractString;\
    \ overlap) at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpxj_vgbv0.jl:9\n\
    \   [2] top-level scope at /tmp/tmpxj_vgbv0.jl:20\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxj_vgbv0.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpxj_vgbv0.jl:21\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  MethodError: no method matching findall(::Array{String,1}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Function, ::Any) at array.jl:2024\n \
    \   findall(!Matched::Union{Regex, AbstractString}, ::AbstractString; overlap)\
    \ at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n   [1]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpxj_vgbv0.jl:9\n\
    \   [2] top-level scope at /tmp/tmpxj_vgbv0.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxj_vgbv0.jl:17\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxj_vgbv0.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.4>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters strings by a regular expression.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7zhqu9r0.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7zhqu9r0.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = [string for string in strings if string.contains(substring)]\n\
    \    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpd7vnzn10.jl:17\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ contains\n  Stacktrace:\n   [1] getproperty(::String, ::Symbol) at ./Base.jl:33\n\
    \   [2] (::var\"#3#4\"{String})(::String) at ./none:0\n   [3] iterate at ./iterators.jl:430\
    \ [inlined]\n   [4] iterate at ./generator.jl:44 [inlined]\n   [5] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [6] collect at ./array.jl:663 [inlined]\n   [7]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpd7vnzn10.jl:8\n\
    \   [8] top-level scope at /tmp/tmpd7vnzn10.jl:17\n   [9] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [10] top-level scope at /tmp/tmpd7vnzn10.jl:15\n  \ntest set: Error During\
    \ Test at /tmp/tmpd7vnzn10.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  type String has no field contains\n\
    \  Stacktrace:\n   [1] getproperty(::String, ::Symbol) at ./Base.jl:33\n   [2]\
    \ (::var\"#3#4\"{String})(::String) at ./none:0\n   [3] iterate at ./iterators.jl:430\
    \ [inlined]\n   [4] iterate at ./generator.jl:44 [inlined]\n   [5] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [6] collect at ./array.jl:663 [inlined]\n   [7]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpd7vnzn10.jl:8\n\
    \   [8] top-level scope at /tmp/tmpd7vnzn10.jl:18\n   [9] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [10] top-level scope at /tmp/tmpd7vnzn10.jl:15\n  \ntest set: Error During\
    \ Test at /tmp/tmpd7vnzn10.jl:19\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  type String has no field contains\n  Stacktrace:\n   [1] getproperty(::String,\
    \ ::Symbol) at ./Base.jl:33\n   [2] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [3] iterate at ./iterators.jl:430 [inlined]\n   [4] iterate at ./generator.jl:44\
    \ [inlined]\n   [5] grow_to! at ./array.jl:726 [inlined]\n   [6] collect at ./array.jl:663\
    \ [inlined]\n   [7] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpd7vnzn10.jl:8\n\
    \   [8] top-level scope at /tmp/tmpd7vnzn10.jl:19\n   [9] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [10] top-level scope at /tmp/tmpd7vnzn10.jl:15\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd7vnzn10.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpi6x89zlc.jl:17\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmpi6x89zlc.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpi6x89zlc.jl:8\n\
    \   [4] top-level scope at /tmp/tmpi6x89zlc.jl:17\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpi6x89zlc.jl:15\n  \ntest set: Error During\
    \ Test at /tmp/tmpi6x89zlc.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains not defined\n\
    \  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmpi6x89zlc.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpi6x89zlc.jl:8\n\
    \   [4] top-level scope at /tmp/tmpi6x89zlc.jl:18\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpi6x89zlc.jl:15\n  \ntest set: Error During\
    \ Test at /tmp/tmpi6x89zlc.jl:19\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  UndefVarError: contains not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"\
    {String})(::String) at /tmp/tmpi6x89zlc.jl:8\n   [2] filter(::var\"#3#4\"{String},\
    \ ::Array{String,1}) at ./array.jl:2375\n   [3] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpi6x89zlc.jl:8\n   [4] top-level scope at /tmp/tmpi6x89zlc.jl:19\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpi6x89zlc.jl:15\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi6x89zlc.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ contains(string, substring)\n            remove!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise 4\nWrite a\
    \ function that takes a vector of strings and a substring and returns all strings\
    \ that contain the substring. Test it on some examples:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp07dggk9i.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp07dggk9i.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring)]\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpa9xsxck5.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Array{String,1}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Function, ::Any) at array.jl:2024\n \
    \   findall(!Matched::Union{Regex, AbstractString}, ::AbstractString; overlap)\
    \ at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n   [1]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpa9xsxck5.jl:9\n\
    \   [2] top-level scope at /tmp/tmpa9xsxck5.jl:17\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpa9xsxck5.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpa9xsxck5.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Function, ::Any)\
    \ at array.jl:2024\n    findall(!Matched::Union{Regex, AbstractString}, ::AbstractString;\
    \ overlap) at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpa9xsxck5.jl:9\n\
    \   [2] top-level scope at /tmp/tmpa9xsxck5.jl:18\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpa9xsxck5.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpa9xsxck5.jl:19\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Function, ::Any)\
    \ at array.jl:2024\n    findall(!Matched::Union{Regex, AbstractString}, ::AbstractString;\
    \ overlap) at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpa9xsxck5.jl:9\n\
    \   [2] top-level scope at /tmp/tmpa9xsxck5.jl:19\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpa9xsxck5.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpa9xsxck5.jl:20\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  MethodError: no method matching findall(::Array{String,1}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Function, ::Any) at array.jl:2024\n \
    \   findall(!Matched::Union{Regex, AbstractString}, ::AbstractString; overlap)\
    \ at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n   [1]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpa9xsxck5.jl:9\n\
    \   [2] top-level scope at /tmp/tmpa9xsxck5.jl:20\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpa9xsxck5.jl:16\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa9xsxck5.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.4>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ filters an input list of strings only for those that contain given substring\n\
    \    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphv5pfpuh.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphv5pfpuh.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = filter( x -> contains(x, substring), strings)\n    \n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()\n\
    filter_by_substring() is a higher-order function that takes a function and a list\
    \ of strings and returns a list of strings that satisfy the conditions of the\
    \ function.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1e3q3rl1.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1e3q3rl1.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    i = 0\n    while i < length(strings)\n\
    \        if contains(strings[i], substring)\n            i += 1\n        else\n\
    \            deleteat!(strings, i)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise: Write a function that\
    \ filters an input list of strings only for ones that do not contain given substring\n\
    Hint: Use filter_by_substring\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjhz8_7mg.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjhz8_7mg.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring([1,2,3], 2)\n\
    filter_by_substring([1,2,3], \"2\")\nfilter_by_substring([1,2,3], \"a\")\nfilter_by_substring([1,2,3],\
    \ \"3\")\nfilter_by_substring([1,2,3], \"z\")\nfilter_by_substring([1,2,3], \"\
    2\")\nfilter_by_substring([1,2,3], \"3\")\nfilter_by_substring([1,2,3], \"a\"\
    )\nfilter_by_substring([1,2,3], \"3\")\nfilter_by_substring([1,2,3], \"z\")\n\
    filter_by_substring([1,2,3], \"2\")\nfilter_by_substring([1,2,3], \"3\")\nfilter_by_substring([1,2,3],\
    \ \"a\")\nfilter_by_substring([1,2,3], \"3\")\nfilter_by_substring([1,2,3], \"\
    z\")\nfilter_by_substring([1,2,3], \"2\")\nfilter_by_substring([1,2,3], \"3\"\
    )\nfilter_by_substring([1,2,3], \"a\")\nfilter_by_substring([1,2,3], \"3\")\n\
    filter_by_substring([1,2,3], \"z\")\nfilter_by_substring([1,2,3], \"2\")\nfilter_by_substring([1,2,3],\
    \ \"3\")\nfilter_by_substring([1,2,3], \"a\")\nfilter_by_substring([1,2,3], \"\
    3\")\nfilter_by_substring([1,2,3], \"z\")\nfilter_by_substring([1,2,3], \"2\"\
    )\nfilter_by_substring([1,2,3], \"3\")\nfilter_by_substring([1,2,3], \"a\")\n\
    filter_by_substring([1,2,3], \"3\")\nfilter_by_substring([1,2,3], \"z\")\nfilter_by_substring([1,2,3],\
    \ \"2\")\nfilter_by_substring([1,2,3], \"3\")\nfilter_by_substring([1,2,3], \"\
    a\")\nfilter_by_substring([1,2,3], \"3\")\nfilter_by_substring([1,2,3], \"z\"\
    )\nfilter_by_substring([1,2,3], \"2\")\nfilter_by_substring([1,2,3], \"3\")\n\
    filter_by_substring([1,2,3], \"a\")\nfilter_by_substring([1,2,3], \"3\")\nfilter_by_substring([1,2,3],\
    \ \"z\")\nfilter_by_substring([1,2,3], \"2\")\nfilter_by_substring([1,2,3], \"\
    3\")\nfilter_by_substring([1,2,3], \"a\")\nfilter_by_substring([1,2,3], \"3\"\
    )\nfilter_by_substring([1,2,3], \"z\")\nfilter_by_substring([1,2,3], \"2\")\n\
    filter_by_substring([1,2,3], \"3\")\nfilter_by_substring([1,2,3], \"a\")\nfilter_by_substring([1,2,3],\
    \ \"3\")\nfilter_by_substring([1,2,3], \"z\")\nfilter_by_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxiy4sii1.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxiy4sii1.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of strings and a substring and returns a vector of strings containing\
    \ only the strings that contain the substring.\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxkgymwu9.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxkgymwu9.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpac5e9gxw.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpac5e9gxw.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    i = 0\n    while i < length(strings)\n\
    \        if contains(strings[i], substring)\n            delete!(strings, i)\n\
    \        else\n            i += 1\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that filters strings by a substring\
    \ that appears more than once in the string. For example, given the input ['abc',\
    \ 'bacd', 'cde', 'array', 'abc', 'bacd', 'cde', 'array'], the function should\
    \ return ['abc', 'bacd', 'array'].\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp02onf0yu.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp02onf0yu.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ contains(string, substring)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that filters an input list of strings only for those that contain given\
    \ substring\nThe function should return a list of strings that only contain given\
    \ substring\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsioafdvt.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsioafdvt.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    substrings = Vector{String}()\n    for string in strings\n     \
    \   if contains(string, substring)\n            push!(substrings, string)\n  \
    \      end\n    end\n    \n    return substrings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nfilter_by_substring\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpldgewuw_.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpldgewuw_.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    \n    return\
    \ strings\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes a vector\
    \ of strings and returns a vector of strings where each string in the original\
    \ vector has been replaced by the string 'x'\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphc3o65k_.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphc3o65k_.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nFiltering by substring\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7560ssd9.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7560ssd9.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter(x->contains(x,substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of strings and a substring and returns a vector of strings that\
    \ only contain the substring.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr0khyewh.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpr0khyewh.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter( x -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters a string list by whether it contains any of a list of substrings.\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpizhgx87g.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpizhgx87g.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter( x -> contains(x,\
    \ substring), strings)\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of strings and a substring\
    \ and returns a vector of strings that only contain the substring.\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl3wsnoq_.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpl3wsnoq_.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    \n    return\
    \ strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4kwe38cg.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Array{String,1}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Function, ::Any) at array.jl:2024\n \
    \   findall(!Matched::Union{Regex, AbstractString}, ::AbstractString; overlap)\
    \ at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n   [1]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp4kwe38cg.jl:9\n\
    \   [2] top-level scope at /tmp/tmp4kwe38cg.jl:18\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp4kwe38cg.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmp4kwe38cg.jl:19\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Function, ::Any)\
    \ at array.jl:2024\n    findall(!Matched::Union{Regex, AbstractString}, ::AbstractString;\
    \ overlap) at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp4kwe38cg.jl:9\n\
    \   [2] top-level scope at /tmp/tmp4kwe38cg.jl:19\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp4kwe38cg.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmp4kwe38cg.jl:20\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Function, ::Any)\
    \ at array.jl:2024\n    findall(!Matched::Union{Regex, AbstractString}, ::AbstractString;\
    \ overlap) at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp4kwe38cg.jl:9\n\
    \   [2] top-level scope at /tmp/tmp4kwe38cg.jl:20\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp4kwe38cg.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmp4kwe38cg.jl:21\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  MethodError: no method matching findall(::Array{String,1}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Function, ::Any) at array.jl:2024\n \
    \   findall(!Matched::Union{Regex, AbstractString}, ::AbstractString; overlap)\
    \ at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n   [1]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp4kwe38cg.jl:9\n\
    \   [2] top-level scope at /tmp/tmp4kwe38cg.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp4kwe38cg.jl:17\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4kwe38cg.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of\
    \ strings and a substring and returns a vector of strings that only contain the\
    \ given substring. Test it on some example strings.\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphk77655h.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphk77655h.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpx8is4935.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Array{String,1}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Function, ::Any) at array.jl:2024\n \
    \   findall(!Matched::Union{Regex, AbstractString}, ::AbstractString; overlap)\
    \ at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n   [1]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpx8is4935.jl:9\n\
    \   [2] top-level scope at /tmp/tmpx8is4935.jl:17\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpx8is4935.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpx8is4935.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Function, ::Any)\
    \ at array.jl:2024\n    findall(!Matched::Union{Regex, AbstractString}, ::AbstractString;\
    \ overlap) at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpx8is4935.jl:9\n\
    \   [2] top-level scope at /tmp/tmpx8is4935.jl:18\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpx8is4935.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpx8is4935.jl:19\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Function, ::Any)\
    \ at array.jl:2024\n    findall(!Matched::Union{Regex, AbstractString}, ::AbstractString;\
    \ overlap) at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpx8is4935.jl:9\n\
    \   [2] top-level scope at /tmp/tmpx8is4935.jl:19\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpx8is4935.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpx8is4935.jl:20\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  MethodError: no method matching findall(::Array{String,1}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Function, ::Any) at array.jl:2024\n \
    \   findall(!Matched::Union{Regex, AbstractString}, ::AbstractString; overlap)\
    \ at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n   [1]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpx8is4935.jl:9\n\
    \   [2] top-level scope at /tmp/tmpx8is4935.jl:20\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpx8is4935.jl:16\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx8is4935.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = filter((x) -> contains(x, substring), strings)\n    \n\
    \    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_0kwbx12.jl:19\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmp_0kwbx12.jl:9\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp_0kwbx12.jl:9\n\
    \   [4] top-level scope at /tmp/tmp_0kwbx12.jl:19\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp_0kwbx12.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmp_0kwbx12.jl:20\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains not defined\n\
    \  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmp_0kwbx12.jl:9\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp_0kwbx12.jl:9\n\
    \   [4] top-level scope at /tmp/tmp_0kwbx12.jl:20\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp_0kwbx12.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmp_0kwbx12.jl:21\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  UndefVarError: contains not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"\
    {String})(::String) at /tmp/tmp_0kwbx12.jl:9\n   [2] filter(::var\"#3#4\"{String},\
    \ ::Array{String,1}) at ./array.jl:2375\n   [3] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp_0kwbx12.jl:9\n   [4] top-level scope at /tmp/tmp_0kwbx12.jl:21\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp_0kwbx12.jl:17\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_0kwbx12.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = [s for s in strings if substring in s]\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppttq4g0t.jl:17\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmppttq4g0t.jl:8\n   [9] top-level scope at /tmp/tmppttq4g0t.jl:17\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmppttq4g0t.jl:15\n  \ntest set: Error During\
    \ Test at /tmp/tmppttq4g0t.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmppttq4g0t.jl:8\n\
    \   [9] top-level scope at /tmp/tmppttq4g0t.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmppttq4g0t.jl:15\n  \ntest set: Error During\
    \ Test at /tmp/tmppttq4g0t.jl:19\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmppttq4g0t.jl:8\n\
    \   [9] top-level scope at /tmp/tmppttq4g0t.jl:19\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmppttq4g0t.jl:15\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppttq4g0t.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3: Filter an input list of strings only for\
    \ ones that do not contain given substring\nWrite a function that filters an input\
    \ list of strings only for ones that do not contain given substring\n>>> filter_by_substring([],\
    \ 'a')\n[]\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n[]\n\
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n['abc', 'cde',\
    \ 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'c')\n['abc',\
    \ 'bacd', 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'd')\n\
    ['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde',\
    \ 'array'], 'e')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'f')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'g')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'h')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'i')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'j')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'k')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'l')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'm')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'n')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'o')\n['abc', 'bacd', 'c\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxjqo0fzb.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxjqo0fzb.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring)]\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1u13si9n.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Array{String,1}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Function, ::Any) at array.jl:2024\n \
    \   findall(!Matched::Union{Regex, AbstractString}, ::AbstractString; overlap)\
    \ at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n   [1]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp1u13si9n.jl:9\n\
    \   [2] top-level scope at /tmp/tmp1u13si9n.jl:17\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp1u13si9n.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmp1u13si9n.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Function, ::Any)\
    \ at array.jl:2024\n    findall(!Matched::Union{Regex, AbstractString}, ::AbstractString;\
    \ overlap) at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp1u13si9n.jl:9\n\
    \   [2] top-level scope at /tmp/tmp1u13si9n.jl:18\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp1u13si9n.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmp1u13si9n.jl:19\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Function, ::Any)\
    \ at array.jl:2024\n    findall(!Matched::Union{Regex, AbstractString}, ::AbstractString;\
    \ overlap) at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp1u13si9n.jl:9\n\
    \   [2] top-level scope at /tmp/tmp1u13si9n.jl:19\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp1u13si9n.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmp1u13si9n.jl:20\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  MethodError: no method matching findall(::Array{String,1}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Function, ::Any) at array.jl:2024\n \
    \   findall(!Matched::Union{Regex, AbstractString}, ::AbstractString; overlap)\
    \ at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n   [1]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp1u13si9n.jl:9\n\
    \   [2] top-level scope at /tmp/tmp1u13si9n.jl:20\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp1u13si9n.jl:16\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1u13si9n.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"\
    bacd\", \"cde\", \"array\"], \"b\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"c\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"d\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"e\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"f\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"g\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"h\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"i\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"j\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"k\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"l\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"m\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"n\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"o\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"p\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"q\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuqbg1wra.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpuqbg1wra.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    \n    return strings\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpv1odzhq_.jl:21\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmpv1odzhq_.jl:11\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpv1odzhq_.jl:11\n\
    \   [4] top-level scope at /tmp/tmpv1odzhq_.jl:21\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpv1odzhq_.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpv1odzhq_.jl:22\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains not defined\n\
    \  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmpv1odzhq_.jl:11\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpv1odzhq_.jl:11\n\
    \   [4] top-level scope at /tmp/tmpv1odzhq_.jl:22\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpv1odzhq_.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpv1odzhq_.jl:23\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  UndefVarError: contains not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"\
    {String})(::String) at /tmp/tmpv1odzhq_.jl:11\n   [2] filter(::var\"#3#4\"{String},\
    \ ::Array{String,1}) at ./array.jl:2375\n   [3] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpv1odzhq_.jl:11\n   [4] top-level scope at /tmp/tmpv1odzhq_.jl:23\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpv1odzhq_.jl:19\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv1odzhq_.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_m1a23ui.jl:17\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmp_m1a23ui.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp_m1a23ui.jl:8\n\
    \   [4] top-level scope at /tmp/tmp_m1a23ui.jl:17\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp_m1a23ui.jl:15\n  \ntest set: Error During\
    \ Test at /tmp/tmp_m1a23ui.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains not defined\n\
    \  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmp_m1a23ui.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp_m1a23ui.jl:8\n\
    \   [4] top-level scope at /tmp/tmp_m1a23ui.jl:18\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp_m1a23ui.jl:15\n  \ntest set: Error During\
    \ Test at /tmp/tmp_m1a23ui.jl:19\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  UndefVarError: contains not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"\
    {String})(::String) at /tmp/tmp_m1a23ui.jl:8\n   [2] filter(::var\"#3#4\"{String},\
    \ ::Array{String,1}) at ./array.jl:2375\n   [3] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp_m1a23ui.jl:8\n   [4] top-level scope at /tmp/tmp_m1a23ui.jl:19\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp_m1a23ui.jl:15\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_m1a23ui.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring)]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nFilter an input list of strings\
    \ only for ones that do not contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'cde']\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphwpdrpu8.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphwpdrpu8.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"\
    bacd\", \"cde\", \"array\"], \"b\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"c\")\n</cell>\n<text>\nExercise: Write\
    \ a function that filters an input list of strings only for ones that end with\
    \ a given substring\nHint: Use endswith()\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7_7rswma.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7_7rswma.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    substrings = Vector{String}()\n    \n    for s in strings\n    \
    \    if contains(s, substring)\n            push!(substrings, s)\n        end\n\
    \    end\n    \n    return substrings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"ab\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"ba\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"bc\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"e\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"f\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"g\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"h\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"i\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"j\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"k\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"l\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"m\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"n\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"o\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"p\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpw65yuk2y.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpw65yuk2y.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = strings[findall(strings, substring)]\n    return strings\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ filters input strings based on whether they contain given substrings\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxdfvs3m1.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxdfvs3m1.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter( x -> contains(x,substring),\
    \ strings)\n    \n    return strings\nend\n</cell>\n<text>\nfilter_by_substring()\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3h0o59ob.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3h0o59ob.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter( x -> contains(x,substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.4>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string and returns the number of characters in the string. \nWrite a\
    \ function that takes a string and returns the number of words in the string.\
    \ \nWrite a function that takes a string and returns the number of sentences in\
    \ the string. \nWrite a function that takes a string and returns the number of\
    \ characters in the string that are not letters. \nWrite a function that takes\
    \ a string and returns the number of words in the string that are not letters.\
    \ \nWrite a function that takes a string and returns the number of sentences in\
    \ the string that are not letters. \nWrite a function that takes a string and\
    \ returns the number of characters in the string that are not letters that do\
    \ not end with a period. \nWrite a function that takes a string and returns the\
    \ number of words in the string that are not letters that do not end with a period.\
    \ \nWrite a function that takes a string and returns the number of sentences in\
    \ the string that are not letters that do not end with a period. \nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are not letters that do not end with a period and that do not start with a period.\
    \ \nWrite a function that takes a string and returns the number of words in the\
    \ string that are not letters that do not end with a period and that do not start\
    \ with a period. \nWrite a function that takes a string and returns the number\
    \ of sentences in the string that are not letters that do not end with a period\
    \ and that do not start with a period. \nWrite a function that takes a string\
    \ and returns the number of characters in the string that are not letters that\
    \ do not end with a period and that do not start with a period and that do not\
    \ contain an exclamation point. \nWrite a function that takes a string and returns\
    \ the number of words in the string that are not letters that do not end with\
    \ a period and that do not start with a period and that do not contain an exclamation\
    \ point. \nWrite a function that takes a string and returns the number of sentences\
    \ in the string that are not letters that do not end with a period and that do\
    \ not start with a period and that do not contain an exclamation point. \nWrite\
    \ a function that takes a string and returns the number of characters in the string\
    \ that are not letters that do not end with a period and that do not start with\
    \ a period and that do not contain an exclamation point and that do not contain\
    \ an exclamation point. \nWrite a function that takes a string and returns the\
    \ number of words in the string that are not letters that do not end with a period\
    \ and that do not start with a period and that do not contain an exclamation point\
    \ and that do not contain an exclamation point and that do not contain an exclamation\
    \ point. \nWrite a function that takes a string and returns the number of sentences\
    \ in the string \nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphlgcmdqc.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphlgcmdqc.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(x -> substring in x, strings)]\n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that filters an input list of strings only for ones that do not contain\
    \ given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'cde']\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgmed3cvf.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgmed3cvf.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters an input list of strings only for those\
    \ that contain given substrings\ne.g. filter_by_substrings(['abc', 'bacd', 'cde',\
    \ 'array'], 'a', 'b', 'c')\nshould return ['abc', 'bacd', 'cde']\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsvzjyw3i.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsvzjyw3i.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of strings and a vector of substrings and returns a vector of\
    \ strings that only contain substrings.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpojuyzlsx.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpojuyzlsx.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ contains(string, substring)\n            remove!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of strings and a substring\
    \ and returns a vector of strings that only contain the given substring. \nFor\
    \ example, given [\"abc\", \"bacd\", \"cde\", \"array\"], \"a\", the function\
    \ should return [\"abc\", \"bacd\", \"array\"].\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvbcwug02.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvbcwug02.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(x -> substring in x, strings)]\n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpidavbj4l.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpidavbj4l.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters a list of strings based on whether they contain a given substring. \n\
    For example, given a list of strings \"abc\", \"bacd\", \"cde\", \"array\", and\
    \ a substring \"a\", your function should return [\"abc\", \"bacd\", \"array\"\
    ].\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4h3b9obs.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4h3b9obs.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring)]\n    \n    return\
    \ strings\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of strings and returns a vector of strings containing only those strings that\
    \ start with a given prefix.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpaormg2ho.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpaormg2ho.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"b\")\n</cell>\n<text>\nExercise: Write a function that filters input\
    \ strings based on whether they contain a given substring.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppibbt8f_.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppibbt8f_.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp908oszz3.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Array{String,1}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Function, ::Any) at array.jl:2024\n \
    \   findall(!Matched::Union{Regex, AbstractString}, ::AbstractString; overlap)\
    \ at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n   [1]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp908oszz3.jl:9\n\
    \   [2] top-level scope at /tmp/tmp908oszz3.jl:17\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp908oszz3.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmp908oszz3.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Function, ::Any)\
    \ at array.jl:2024\n    findall(!Matched::Union{Regex, AbstractString}, ::AbstractString;\
    \ overlap) at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp908oszz3.jl:9\n\
    \   [2] top-level scope at /tmp/tmp908oszz3.jl:18\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp908oszz3.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmp908oszz3.jl:19\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Function, ::Any)\
    \ at array.jl:2024\n    findall(!Matched::Union{Regex, AbstractString}, ::AbstractString;\
    \ overlap) at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp908oszz3.jl:9\n\
    \   [2] top-level scope at /tmp/tmp908oszz3.jl:19\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp908oszz3.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmp908oszz3.jl:20\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  MethodError: no method matching findall(::Array{String,1}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Function, ::Any) at array.jl:2024\n \
    \   findall(!Matched::Union{Regex, AbstractString}, ::AbstractString; overlap)\
    \ at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n   [1]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp908oszz3.jl:9\n\
    \   [2] top-level scope at /tmp/tmp908oszz3.jl:20\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp908oszz3.jl:16\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp908oszz3.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = filter( x -> contains(x, substring), strings)\n    \n\
    \    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpf63g2v63.jl:19\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmpf63g2v63.jl:9\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpf63g2v63.jl:9\n\
    \   [4] top-level scope at /tmp/tmpf63g2v63.jl:19\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpf63g2v63.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpf63g2v63.jl:20\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains not defined\n\
    \  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmpf63g2v63.jl:9\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpf63g2v63.jl:9\n\
    \   [4] top-level scope at /tmp/tmpf63g2v63.jl:20\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpf63g2v63.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpf63g2v63.jl:21\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  UndefVarError: contains not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"\
    {String})(::String) at /tmp/tmpf63g2v63.jl:9\n   [2] filter(::var\"#3#4\"{String},\
    \ ::Array{String,1}) at ./array.jl:2375\n   [3] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpf63g2v63.jl:9\n   [4] top-level scope at /tmp/tmpf63g2v63.jl:21\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpf63g2v63.jl:17\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf63g2v63.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring)]\n    \n    return\
    \ strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8hy97p62.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Array{String,1}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Function, ::Any) at array.jl:2024\n \
    \   findall(!Matched::Union{Regex, AbstractString}, ::AbstractString; overlap)\
    \ at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n   [1]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp8hy97p62.jl:9\n\
    \   [2] top-level scope at /tmp/tmp8hy97p62.jl:18\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8hy97p62.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmp8hy97p62.jl:19\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Function, ::Any)\
    \ at array.jl:2024\n    findall(!Matched::Union{Regex, AbstractString}, ::AbstractString;\
    \ overlap) at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp8hy97p62.jl:9\n\
    \   [2] top-level scope at /tmp/tmp8hy97p62.jl:19\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8hy97p62.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmp8hy97p62.jl:20\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Function, ::Any)\
    \ at array.jl:2024\n    findall(!Matched::Union{Regex, AbstractString}, ::AbstractString;\
    \ overlap) at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp8hy97p62.jl:9\n\
    \   [2] top-level scope at /tmp/tmp8hy97p62.jl:20\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8hy97p62.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmp8hy97p62.jl:21\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  MethodError: no method matching findall(::Array{String,1}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Function, ::Any) at array.jl:2024\n \
    \   findall(!Matched::Union{Regex, AbstractString}, ::AbstractString; overlap)\
    \ at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n   [1]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp8hy97p62.jl:9\n\
    \   [2] top-level scope at /tmp/tmp8hy97p62.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8hy97p62.jl:17\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8hy97p62.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.4>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nFiltering by substrings\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_ptzx7xz.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_ptzx7xz.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter( x -> contains(x,\
    \ substring), strings)\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nfilter_by_substring()\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8efumhe4.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8efumhe4.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = [s for s in strings if substring in s]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2: filter_by_substring\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3ar28rf8.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3ar28rf8.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = strings[findall(x -> contains(x, substring), strings)]\n   \
    \ return strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_hnwptf0.jl:17\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmp_hnwptf0.jl:8\n\
    \   [2] #85 at ./none:0 [inlined]\n   [3] iterate at ./iterators.jl:430 [inlined]\n\
    \   [4] iterate at ./generator.jl:44 [inlined]\n   [5] grow_to!(::Array{Int64,1},\
    \ ::Base.Generator{Base.Iterators.Filter{Base.var\"#85#86\"{var\"#3#4\"{String}},Base.Iterators.Pairs{Int64,String,LinearIndices{1,Tuple{Base.OneTo{Int64}}},Array{String,1}}},typeof(first)})\
    \ at ./array.jl:726\n   [6] collect at ./array.jl:663 [inlined]\n   [7] findall\
    \ at ./array.jl:2024 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp_hnwptf0.jl:8\n   [9] top-level scope at /tmp/tmp_hnwptf0.jl:17\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp_hnwptf0.jl:15\n  \ntest set: Error During\
    \ Test at /tmp/tmp_hnwptf0.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains not defined\n\
    \  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmp_hnwptf0.jl:8\n\
    \   [2] #85 at ./none:0 [inlined]\n   [3] iterate at ./iterators.jl:430 [inlined]\n\
    \   [4] iterate at ./generator.jl:44 [inlined]\n   [5] grow_to!(::Array{Int64,1},\
    \ ::Base.Generator{Base.Iterators.Filter{Base.var\"#85#86\"{var\"#3#4\"{String}},Base.Iterators.Pairs{Int64,String,LinearIndices{1,Tuple{Base.OneTo{Int64}}},Array{String,1}}},typeof(first)})\
    \ at ./array.jl:726\n   [6] collect at ./array.jl:663 [inlined]\n   [7] findall\
    \ at ./array.jl:2024 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp_hnwptf0.jl:8\n   [9] top-level scope at /tmp/tmp_hnwptf0.jl:18\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp_hnwptf0.jl:15\n  \ntest set: Error During\
    \ Test at /tmp/tmp_hnwptf0.jl:19\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  UndefVarError: contains not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"\
    {String})(::String) at /tmp/tmp_hnwptf0.jl:8\n   [2] #85 at ./none:0 [inlined]\n\
    \   [3] iterate at ./iterators.jl:430 [inlined]\n   [4] iterate at ./generator.jl:44\
    \ [inlined]\n   [5] grow_to!(::Array{Int64,1}, ::Base.Generator{Base.Iterators.Filter{Base.var\"\
    #85#86\"{var\"#3#4\"{String}},Base.Iterators.Pairs{Int64,String,LinearIndices{1,Tuple{Base.OneTo{Int64}}},Array{String,1}}},typeof(first)})\
    \ at ./array.jl:726\n   [6] collect at ./array.jl:663 [inlined]\n   [7] findall\
    \ at ./array.jl:2024 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp_hnwptf0.jl:8\n   [9] top-level scope at /tmp/tmp_hnwptf0.jl:19\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp_hnwptf0.jl:15\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_hnwptf0.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring!\nThe filter_by_substring!\
    \ function modifies the input list in-place. It filters out the strings that do\
    \ not contain the given substring.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptdmy1jqt.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptdmy1jqt.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(x -> contains(x, substring), strings)]\n\
    \    \n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpc34rdcn8.jl:19\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmpc34rdcn8.jl:9\n\
    \   [2] #85 at ./none:0 [inlined]\n   [3] iterate at ./iterators.jl:430 [inlined]\n\
    \   [4] iterate at ./generator.jl:44 [inlined]\n   [5] grow_to!(::Array{Int64,1},\
    \ ::Base.Generator{Base.Iterators.Filter{Base.var\"#85#86\"{var\"#3#4\"{String}},Base.Iterators.Pairs{Int64,String,LinearIndices{1,Tuple{Base.OneTo{Int64}}},Array{String,1}}},typeof(first)})\
    \ at ./array.jl:726\n   [6] collect at ./array.jl:663 [inlined]\n   [7] findall\
    \ at ./array.jl:2024 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpc34rdcn8.jl:9\n   [9] top-level scope at /tmp/tmpc34rdcn8.jl:19\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpc34rdcn8.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpc34rdcn8.jl:20\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains not defined\n\
    \  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmpc34rdcn8.jl:9\n\
    \   [2] #85 at ./none:0 [inlined]\n   [3] iterate at ./iterators.jl:430 [inlined]\n\
    \   [4] iterate at ./generator.jl:44 [inlined]\n   [5] grow_to!(::Array{Int64,1},\
    \ ::Base.Generator{Base.Iterators.Filter{Base.var\"#85#86\"{var\"#3#4\"{String}},Base.Iterators.Pairs{Int64,String,LinearIndices{1,Tuple{Base.OneTo{Int64}}},Array{String,1}}},typeof(first)})\
    \ at ./array.jl:726\n   [6] collect at ./array.jl:663 [inlined]\n   [7] findall\
    \ at ./array.jl:2024 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpc34rdcn8.jl:9\n   [9] top-level scope at /tmp/tmpc34rdcn8.jl:20\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpc34rdcn8.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpc34rdcn8.jl:21\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  UndefVarError: contains not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"\
    {String})(::String) at /tmp/tmpc34rdcn8.jl:9\n   [2] #85 at ./none:0 [inlined]\n\
    \   [3] iterate at ./iterators.jl:430 [inlined]\n   [4] iterate at ./generator.jl:44\
    \ [inlined]\n   [5] grow_to!(::Array{Int64,1}, ::Base.Generator{Base.Iterators.Filter{Base.var\"\
    #85#86\"{var\"#3#4\"{String}},Base.Iterators.Pairs{Int64,String,LinearIndices{1,Tuple{Base.OneTo{Int64}}},Array{String,1}}},typeof(first)})\
    \ at ./array.jl:726\n   [6] collect at ./array.jl:663 [inlined]\n   [7] findall\
    \ at ./array.jl:2024 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpc34rdcn8.jl:9\n   [9] top-level scope at /tmp/tmpc34rdcn8.jl:21\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpc34rdcn8.jl:17\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc34rdcn8.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\n</cell>\n<text>\nExercise 7: Write a function that filters an input list\
    \ of strings only for ones that do not contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'cde']\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn0s3pxoz.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpn0s3pxoz.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring)]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters an input list of strings only for those that contain given substrings\n\
    e.g. filter_by_substrings([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\", \"b\"\
    , \"c\")\nshould return [\"abc\", \"bacd\", \"array\"]\nHint: use filter_by_substring\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu0sk2jzr.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpu0sk2jzr.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    \n    return\
    \ strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpn5ejant3.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Array{String,1}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Function, ::Any) at array.jl:2024\n \
    \   findall(!Matched::Union{Regex, AbstractString}, ::AbstractString; overlap)\
    \ at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n   [1]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpn5ejant3.jl:9\n\
    \   [2] top-level scope at /tmp/tmpn5ejant3.jl:18\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpn5ejant3.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpn5ejant3.jl:19\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Function, ::Any)\
    \ at array.jl:2024\n    findall(!Matched::Union{Regex, AbstractString}, ::AbstractString;\
    \ overlap) at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpn5ejant3.jl:9\n\
    \   [2] top-level scope at /tmp/tmpn5ejant3.jl:19\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpn5ejant3.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpn5ejant3.jl:20\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Function, ::Any)\
    \ at array.jl:2024\n    findall(!Matched::Union{Regex, AbstractString}, ::AbstractString;\
    \ overlap) at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpn5ejant3.jl:9\n\
    \   [2] top-level scope at /tmp/tmpn5ejant3.jl:20\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpn5ejant3.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpn5ejant3.jl:21\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  MethodError: no method matching findall(::Array{String,1}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Function, ::Any) at array.jl:2024\n \
    \   findall(!Matched::Union{Regex, AbstractString}, ::AbstractString; overlap)\
    \ at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n   [1]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpn5ejant3.jl:9\n\
    \   [2] top-level scope at /tmp/tmpn5ejant3.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpn5ejant3.jl:17\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn5ejant3.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter(x->contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nFilter an input list of strings\
    \ only for ones that do not contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'cde']\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6zosh_es.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6zosh_es.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.contains(substring)\n            remove!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that filters an input list of strings only for ones that do not contain\
    \ given substring\n>>> filter_by_substring([], 'a')\n[]\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n['abc', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'b')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'c')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'd')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'e')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'f')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'g')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'h')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'i')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'j')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'k')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'l')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'm')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'n')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'o')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'p')\n['abc', 'bacd', 'cde', '\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp33rl5_pq.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp33rl5_pq.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter_by_substring(strings, substring, true)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_ygli74w.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching filter_by_substring(::Array{String,1}, ::String,\
    \ ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp_ygli74w.jl:8\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp_ygli74w.jl:8\n   [2] top-level scope at /tmp/tmp_ygli74w.jl:15\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp_ygli74w.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp_ygli74w.jl:16\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching filter_by_substring(::Array{String,1},\
    \ ::String, ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp_ygli74w.jl:8\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp_ygli74w.jl:8\n   [2] top-level scope at /tmp/tmp_ygli74w.jl:16\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp_ygli74w.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp_ygli74w.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching filter_by_substring(::Array{String,1},\
    \ ::String, ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp_ygli74w.jl:8\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp_ygli74w.jl:8\n   [2] top-level scope at /tmp/tmp_ygli74w.jl:17\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp_ygli74w.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp_ygli74w.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  MethodError: no method matching filter_by_substring(::Array{String,1}, ::String,\
    \ ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp_ygli74w.jl:8\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp_ygli74w.jl:8\n   [2] top-level scope at /tmp/tmp_ygli74w.jl:18\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp_ygli74w.jl:14\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_ygli74w.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring)]\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()\n\
    This function filters an input list of strings only for ones that contain given\
    \ substring\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpze421o9d.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpze421o9d.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter(x->contains(x, substring), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp83w1ouks.jl:17\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmp83w1ouks.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp83w1ouks.jl:8\n\
    \   [4] top-level scope at /tmp/tmp83w1ouks.jl:17\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp83w1ouks.jl:15\n  \ntest set: Error During\
    \ Test at /tmp/tmp83w1ouks.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains not defined\n\
    \  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmp83w1ouks.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp83w1ouks.jl:8\n\
    \   [4] top-level scope at /tmp/tmp83w1ouks.jl:18\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp83w1ouks.jl:15\n  \ntest set: Error During\
    \ Test at /tmp/tmp83w1ouks.jl:19\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  UndefVarError: contains not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"\
    {String})(::String) at /tmp/tmp83w1ouks.jl:8\n   [2] filter(::var\"#3#4\"{String},\
    \ ::Array{String,1}) at ./array.jl:2375\n   [3] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp83w1ouks.jl:8\n   [4] top-level scope at /tmp/tmp83w1ouks.jl:19\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp83w1ouks.jl:15\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp83w1ouks.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring)]\n    \n    return\
    \ strings\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns a string with all the letters replaced by '_'. \nFor example 'hello'\
    \ -> 'h__e__l__l__o'\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp73bgcgxp.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp73bgcgxp.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of strings and a substring and returns a vector of strings that\
    \ only contain the substring.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi9wu5rsi.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpi9wu5rsi.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpllls1gxe.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpllls1gxe.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring)]\n    \n    return\
    \ strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpx7poek4i.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Array{String,1}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Function, ::Any) at array.jl:2024\n \
    \   findall(!Matched::Union{Regex, AbstractString}, ::AbstractString; overlap)\
    \ at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n   [1]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpx7poek4i.jl:9\n\
    \   [2] top-level scope at /tmp/tmpx7poek4i.jl:18\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpx7poek4i.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpx7poek4i.jl:19\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Function, ::Any)\
    \ at array.jl:2024\n    findall(!Matched::Union{Regex, AbstractString}, ::AbstractString;\
    \ overlap) at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpx7poek4i.jl:9\n\
    \   [2] top-level scope at /tmp/tmpx7poek4i.jl:19\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpx7poek4i.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpx7poek4i.jl:20\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Function, ::Any)\
    \ at array.jl:2024\n    findall(!Matched::Union{Regex, AbstractString}, ::AbstractString;\
    \ overlap) at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpx7poek4i.jl:9\n\
    \   [2] top-level scope at /tmp/tmpx7poek4i.jl:20\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpx7poek4i.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpx7poek4i.jl:21\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  MethodError: no method matching findall(::Array{String,1}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Function, ::Any) at array.jl:2024\n \
    \   findall(!Matched::Union{Regex, AbstractString}, ::AbstractString; overlap)\
    \ at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n   [1]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpx7poek4i.jl:9\n\
    \   [2] top-level scope at /tmp/tmpx7poek4i.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpx7poek4i.jl:17\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx7poek4i.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = filter(x->contains(x, substring), strings)\n    \n   \
    \ return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters input strings based on whether they contain any of a\
    \ list of substrings\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplozkl3c3.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplozkl3c3.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nfilter_by_substring\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdjlz88hf.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdjlz88hf.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptv34t3f6.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Array{String,1}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Function, ::Any) at array.jl:2024\n \
    \   findall(!Matched::Union{Regex, AbstractString}, ::AbstractString; overlap)\
    \ at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n   [1]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmptv34t3f6.jl:9\n\
    \   [2] top-level scope at /tmp/tmptv34t3f6.jl:17\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmptv34t3f6.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmptv34t3f6.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Function, ::Any)\
    \ at array.jl:2024\n    findall(!Matched::Union{Regex, AbstractString}, ::AbstractString;\
    \ overlap) at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmptv34t3f6.jl:9\n\
    \   [2] top-level scope at /tmp/tmptv34t3f6.jl:18\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmptv34t3f6.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmptv34t3f6.jl:19\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Function, ::Any)\
    \ at array.jl:2024\n    findall(!Matched::Union{Regex, AbstractString}, ::AbstractString;\
    \ overlap) at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmptv34t3f6.jl:9\n\
    \   [2] top-level scope at /tmp/tmptv34t3f6.jl:19\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmptv34t3f6.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmptv34t3f6.jl:20\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  MethodError: no method matching findall(::Array{String,1}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Function, ::Any) at array.jl:2024\n \
    \   findall(!Matched::Union{Regex, AbstractString}, ::AbstractString; overlap)\
    \ at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n   [1]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmptv34t3f6.jl:9\n\
    \   [2] top-level scope at /tmp/tmptv34t3f6.jl:20\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmptv34t3f6.jl:16\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptv34t3f6.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpt1wsqans.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Array{String,1}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Function, ::Any) at array.jl:2024\n \
    \   findall(!Matched::Union{Regex, AbstractString}, ::AbstractString; overlap)\
    \ at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n   [1]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpt1wsqans.jl:9\n\
    \   [2] top-level scope at /tmp/tmpt1wsqans.jl:17\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpt1wsqans.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpt1wsqans.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Function, ::Any)\
    \ at array.jl:2024\n    findall(!Matched::Union{Regex, AbstractString}, ::AbstractString;\
    \ overlap) at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpt1wsqans.jl:9\n\
    \   [2] top-level scope at /tmp/tmpt1wsqans.jl:18\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpt1wsqans.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpt1wsqans.jl:19\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Function, ::Any)\
    \ at array.jl:2024\n    findall(!Matched::Union{Regex, AbstractString}, ::AbstractString;\
    \ overlap) at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpt1wsqans.jl:9\n\
    \   [2] top-level scope at /tmp/tmpt1wsqans.jl:19\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpt1wsqans.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpt1wsqans.jl:20\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  MethodError: no method matching findall(::Array{String,1}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Function, ::Any) at array.jl:2024\n \
    \   findall(!Matched::Union{Regex, AbstractString}, ::AbstractString; overlap)\
    \ at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n   [1]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpt1wsqans.jl:9\n\
    \   [2] top-level scope at /tmp/tmpt1wsqans.jl:20\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpt1wsqans.jl:16\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt1wsqans.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring .== true)]\n    \n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3yc8qlew.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3yc8qlew.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    \n    return\
    \ strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4o5pelas.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Array{String,1}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Function, ::Any) at array.jl:2024\n \
    \   findall(!Matched::Union{Regex, AbstractString}, ::AbstractString; overlap)\
    \ at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n   [1]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp4o5pelas.jl:9\n\
    \   [2] top-level scope at /tmp/tmp4o5pelas.jl:18\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp4o5pelas.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmp4o5pelas.jl:19\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Function, ::Any)\
    \ at array.jl:2024\n    findall(!Matched::Union{Regex, AbstractString}, ::AbstractString;\
    \ overlap) at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp4o5pelas.jl:9\n\
    \   [2] top-level scope at /tmp/tmp4o5pelas.jl:19\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp4o5pelas.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmp4o5pelas.jl:20\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Function, ::Any)\
    \ at array.jl:2024\n    findall(!Matched::Union{Regex, AbstractString}, ::AbstractString;\
    \ overlap) at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp4o5pelas.jl:9\n\
    \   [2] top-level scope at /tmp/tmp4o5pelas.jl:20\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp4o5pelas.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmp4o5pelas.jl:21\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  MethodError: no method matching findall(::Array{String,1}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Function, ::Any) at array.jl:2024\n \
    \   findall(!Matched::Union{Regex, AbstractString}, ::AbstractString; overlap)\
    \ at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n   [1]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp4o5pelas.jl:9\n\
    \   [2] top-level scope at /tmp/tmp4o5pelas.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp4o5pelas.jl:17\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4o5pelas.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring)]\n    return strings\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that filters an input list\
    \ of strings only for ones that do not contain given substring\n>>> filter_by_substring([],\
    \ 'a')\n[]\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n['abc',\
    \ 'cde']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'c')\n['abc',\
    \ 'bacd', 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'd')\n\
    ['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'],\
    \ 'e')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde',\
    \ 'array'], 'f')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'g')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'h')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'i')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'j')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'k')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'l')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'm')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'n')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'o')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'p')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'q')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'r')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 's')\n['abc', 'bacd', 'array']\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5dtwrk2p.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5dtwrk2p.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter_by_substring(strings, substring, true)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpegaflm3s.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching filter_by_substring(::Array{String,1}, ::String,\
    \ ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpegaflm3s.jl:8\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpegaflm3s.jl:8\n   [2] top-level scope at /tmp/tmpegaflm3s.jl:15\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpegaflm3s.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpegaflm3s.jl:16\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching filter_by_substring(::Array{String,1},\
    \ ::String, ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpegaflm3s.jl:8\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpegaflm3s.jl:8\n   [2] top-level scope at /tmp/tmpegaflm3s.jl:16\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpegaflm3s.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpegaflm3s.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching filter_by_substring(::Array{String,1},\
    \ ::String, ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpegaflm3s.jl:8\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpegaflm3s.jl:8\n   [2] top-level scope at /tmp/tmpegaflm3s.jl:17\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpegaflm3s.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpegaflm3s.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  MethodError: no method matching filter_by_substring(::Array{String,1}, ::String,\
    \ ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpegaflm3s.jl:8\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpegaflm3s.jl:8\n   [2] top-level scope at /tmp/tmpegaflm3s.jl:18\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpegaflm3s.jl:14\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpegaflm3s.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter( x -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters an input list of strings only for ones that contain a given substring\
    \ anywhere in the string\ne.g. filter_by_substring([\"abc\", \"bacd\", \"cde\"\
    , \"array\"], \"ab\")\nshould return [\"abc\", \"bacd\"]\nHint: use filter_by_substring\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqqt2xzlw.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqqt2xzlw.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = strings[findall(x -> contains(x, substring), strings)]\n   \
    \ return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of times the string occurs\
    \ in the string. \nFor example, if the input string is \"abcabc\" and the substring\
    \ \"abc\" occurs 3 times, the function should return 3.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj56yj2pl.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj56yj2pl.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = filter(x->contains(x, substring), strings)\n    \n   \
    \ return strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpi0tawuns.jl:19\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmpi0tawuns.jl:9\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpi0tawuns.jl:9\n\
    \   [4] top-level scope at /tmp/tmpi0tawuns.jl:19\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpi0tawuns.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpi0tawuns.jl:20\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains not defined\n\
    \  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmpi0tawuns.jl:9\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpi0tawuns.jl:9\n\
    \   [4] top-level scope at /tmp/tmpi0tawuns.jl:20\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpi0tawuns.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpi0tawuns.jl:21\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  UndefVarError: contains not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"\
    {String})(::String) at /tmp/tmpi0tawuns.jl:9\n   [2] filter(::var\"#3#4\"{String},\
    \ ::Array{String,1}) at ./array.jl:2375\n   [3] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpi0tawuns.jl:9\n   [4] top-level scope at /tmp/tmpi0tawuns.jl:21\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpi0tawuns.jl:17\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi0tawuns.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu2wmpb6r.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpu2wmpb6r.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring .== true)]\n    \n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"b\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"c\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"d\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"e\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"f\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"g\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"h\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"i\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"j\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"k\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"l\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"m\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"n\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"p\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"q\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"r\")\n</cell>\n<code language=julia-\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj2izt7yb.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj2izt7yb.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nfilter_by_substring()\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa8bc9rs2.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpa8bc9rs2.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.contains(substring)\n            strings.remove(string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of strings and a vector\
    \ of substrings and returns a vector of strings that only contain substrings.\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpubusn71g.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpubusn71g.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that takes a vector of strings and a vector of substrings\
    \ and returns a vector of strings containing only those strings that contain the\
    \ substrings.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk3vvnr7c.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk3vvnr7c.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ contains(string, substring)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that filters input list of strings only for those that contain given\
    \ substring in any order.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptzjljpuy.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptzjljpuy.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters an input list of strings only for ones\
    \ that do not contain given substring\n>>> filter_by_substring([], 'a')\n[]\n\
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n[]\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'ab')\n['abc', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'ba')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bc')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'd')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'e')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'f')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'g')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'h')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'i')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'j')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'k')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'l')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'm')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'n')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'o')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'p')\n['bacd', 'cde', 'array']\n>>> filter_by_\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkf5f3zb7.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkf5f3zb7.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = [s for s in strings if substring in s]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring([1,2,3], \"\
    a\")\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg7hkn7fp.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg7hkn7fp.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_0c6qh8i.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_0c6qh8i.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter( x -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<text>\nExercise 3: Write a function that filters an input list\
    \ of strings only for those that contain given substrings\n    >>> filter_by_substrings([],\
    \ 'a')\n    []\n    >>> filter_by_substrings(['abc', 'bacd', 'cde', 'array'],\
    \ 'a')\n    ['abc', 'bacd', 'array']\n    >>> filter_by_substrings(['abc', 'bacd',\
    \ 'cde', 'array'], 'ab')\n    ['abc', 'bacd']\n    >>> filter_by_substrings(['abc',\
    \ 'bacd', 'cde', 'array'], 'ba')\n    ['bacd', 'cde', 'array']\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0iog5mm8.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0iog5mm8.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"\
    bacd\", \"cde\", \"array\"], \"ab\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"ba\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"bc\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"e\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"f\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"g\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"h\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"i\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"j\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"k\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"l\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"m\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"n\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"o\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"p\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc0ont4ww.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpc0ont4ww.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<text>\nfilter_by_substring()\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp89utckyd.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp89utckyd.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmps56xvycu.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Array{String,1}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Function, ::Any) at array.jl:2024\n \
    \   findall(!Matched::Union{Regex, AbstractString}, ::AbstractString; overlap)\
    \ at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n   [1]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmps56xvycu.jl:9\n\
    \   [2] top-level scope at /tmp/tmps56xvycu.jl:17\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmps56xvycu.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmps56xvycu.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Function, ::Any)\
    \ at array.jl:2024\n    findall(!Matched::Union{Regex, AbstractString}, ::AbstractString;\
    \ overlap) at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmps56xvycu.jl:9\n\
    \   [2] top-level scope at /tmp/tmps56xvycu.jl:18\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmps56xvycu.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmps56xvycu.jl:19\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Function, ::Any)\
    \ at array.jl:2024\n    findall(!Matched::Union{Regex, AbstractString}, ::AbstractString;\
    \ overlap) at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmps56xvycu.jl:9\n\
    \   [2] top-level scope at /tmp/tmps56xvycu.jl:19\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmps56xvycu.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmps56xvycu.jl:20\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  MethodError: no method matching findall(::Array{String,1}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Function, ::Any) at array.jl:2024\n \
    \   findall(!Matched::Union{Regex, AbstractString}, ::AbstractString; overlap)\
    \ at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n   [1]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmps56xvycu.jl:9\n\
    \   [2] top-level scope at /tmp/tmps56xvycu.jl:20\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmps56xvycu.jl:16\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps56xvycu.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2: Filtering by substrings\nWrite a function\
    \ that filters input strings based on a list of substrings\nWrite a function that\
    \ filters input strings based on a list of substrings\nWrite a function that filters\
    \ input strings based on a list of substrings\nWrite a function that filters input\
    \ strings based on a list of substrings\nWrite a function that filters input strings\
    \ based on a list of substrings\nWrite a function that filters input strings based\
    \ on a list of substrings\nWrite a function that filters input strings based on\
    \ a list of substrings\nWrite a function that filters input strings based on a\
    \ list of substrings\nWrite a function that filters input strings based on a list\
    \ of substrings\nWrite a function that filters input strings based on a list of\
    \ substrings\nWrite a function that filters input strings based on a list of substrings\n\
    Write a function that filters input strings based on a list of substrings\nWrite\
    \ a function that filters input strings based on a list of substrings\nWrite a\
    \ function that filters input strings based on a list of substrings\nWrite a function\
    \ that filters input strings based on a list of substrings\nWrite a function that\
    \ filters input strings based on a list of substrings\nWrite a function that filters\
    \ input strings based on a list of substrings\nWrite a function that filters input\
    \ strings based on a list of substrings\nWrite a function that filters input strings\
    \ based on a list of substrings\nWrite a function that filters input strings based\
    \ on a list of substrings\nWrite a function that filters input strings based on\
    \ a list of substrings\nWrite a function that filters input strings based on a\
    \ list of substrings\nWrite a function that filters input strings based on a list\
    \ of substrings\nWrite a function that filters input strings based on a list of\
    \ substrings\nWrite a function that filters input strings based on a list of substrings\n\
    Write a function that filters input strings based on a list of substrings\nWrite\
    \ a function that filters input strings based on a list of substrings\nWrite a\
    \ function that filters input strings based on a list of substrings\nWrite a function\
    \ that filters input strings based on a list of substrings\nWrite a function that\
    \ filters input strings based on a list of substrings\nWrite a function that filters\
    \ input strings based on a list of substrings\nWrite a function that filters input\
    \ strings based on a list of substrings\nWrite a function that filters input strings\
    \ based on a list of substrings\nWrite a function that filters input strings based\
    \ on a list of substrings\nWrite a function that filters input strings based on\
    \ a list of substrings\nWrite a function that filters input strings \nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4iaxfemk.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4iaxfemk.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.contains(substring)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise 4\nWrite a\
    \ function that filters an input list of strings only for those that contain given\
    \ substring\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoikmne4n.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpoikmne4n.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp999xrh55.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Array{String,1}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Function, ::Any) at array.jl:2024\n \
    \   findall(!Matched::Union{Regex, AbstractString}, ::AbstractString; overlap)\
    \ at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n   [1]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp999xrh55.jl:9\n\
    \   [2] top-level scope at /tmp/tmp999xrh55.jl:17\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp999xrh55.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmp999xrh55.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Function, ::Any)\
    \ at array.jl:2024\n    findall(!Matched::Union{Regex, AbstractString}, ::AbstractString;\
    \ overlap) at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp999xrh55.jl:9\n\
    \   [2] top-level scope at /tmp/tmp999xrh55.jl:18\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp999xrh55.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmp999xrh55.jl:19\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Function, ::Any)\
    \ at array.jl:2024\n    findall(!Matched::Union{Regex, AbstractString}, ::AbstractString;\
    \ overlap) at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp999xrh55.jl:9\n\
    \   [2] top-level scope at /tmp/tmp999xrh55.jl:19\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp999xrh55.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmp999xrh55.jl:20\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  MethodError: no method matching findall(::Array{String,1}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Function, ::Any) at array.jl:2024\n \
    \   findall(!Matched::Union{Regex, AbstractString}, ::AbstractString; overlap)\
    \ at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n   [1]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp999xrh55.jl:9\n\
    \   [2] top-level scope at /tmp/tmp999xrh55.jl:20\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp999xrh55.jl:16\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp999xrh55.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\n</cell>\n<text>\nExercise 2: Filtering by substring\nWrite a function that\
    \ filters an input list of strings only for ones that contain given substring\n\
    Write a test that checks that your function works as expected\nWrite a function\
    \ that filters an input list of strings only for ones that do not contain given\
    \ substring\nWrite a test that checks that your function works as expected\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl2u1bpqd.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpl2u1bpqd.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpznitcmgp.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpznitcmgp.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 2: filter_by_substring\nWrite a function that filters an input list of\
    \ strings only for ones that contain a given substring.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpntrcgy_l.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpntrcgy_l.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that filters an input list\
    \ of strings only for ones that do not contain given substring\n    >>> filter_by_not_substring([],\
    \ 'a')\n    []\n    >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'],\
    \ 'a')\n    ['cde', 'array']\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2ll2uhhr.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2ll2uhhr.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter_by_substring(strings, substring, true)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9yte17ta.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching filter_by_substring(::Array{String,1}, ::String,\
    \ ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp9yte17ta.jl:8\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp9yte17ta.jl:8\n   [2] top-level scope at /tmp/tmp9yte17ta.jl:15\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9yte17ta.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp9yte17ta.jl:16\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching filter_by_substring(::Array{String,1},\
    \ ::String, ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp9yte17ta.jl:8\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp9yte17ta.jl:8\n   [2] top-level scope at /tmp/tmp9yte17ta.jl:16\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9yte17ta.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp9yte17ta.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching filter_by_substring(::Array{String,1},\
    \ ::String, ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp9yte17ta.jl:8\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp9yte17ta.jl:8\n   [2] top-level scope at /tmp/tmp9yte17ta.jl:17\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9yte17ta.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp9yte17ta.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  MethodError: no method matching filter_by_substring(::Array{String,1}, ::String,\
    \ ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp9yte17ta.jl:8\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp9yte17ta.jl:8\n   [2] top-level scope at /tmp/tmp9yte17ta.jl:18\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9yte17ta.jl:14\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9yte17ta.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter_by_substring(strings, substring, true)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsgskt8mz.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching filter_by_substring(::Array{String,1}, ::String,\
    \ ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpsgskt8mz.jl:8\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpsgskt8mz.jl:8\n   [2] top-level scope at /tmp/tmpsgskt8mz.jl:15\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpsgskt8mz.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpsgskt8mz.jl:16\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching filter_by_substring(::Array{String,1},\
    \ ::String, ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpsgskt8mz.jl:8\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpsgskt8mz.jl:8\n   [2] top-level scope at /tmp/tmpsgskt8mz.jl:16\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpsgskt8mz.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpsgskt8mz.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching filter_by_substring(::Array{String,1},\
    \ ::String, ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpsgskt8mz.jl:8\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpsgskt8mz.jl:8\n   [2] top-level scope at /tmp/tmpsgskt8mz.jl:17\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpsgskt8mz.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpsgskt8mz.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  MethodError: no method matching filter_by_substring(::Array{String,1}, ::String,\
    \ ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpsgskt8mz.jl:8\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpsgskt8mz.jl:8\n   [2] top-level scope at /tmp/tmpsgskt8mz.jl:18\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpsgskt8mz.jl:14\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsgskt8mz.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring)]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2: Filter a DataFrame\
    \ for rows that contain a given substring\nWrite a function that filters a DataFrame\
    \ for rows that contain a given substring. \nThe function should return a new\
    \ DataFrame with only the rows that contain the substring.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1zli4yvy.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1zli4yvy.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring)]\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpk6r_zdbv.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Array{String,1}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Function, ::Any) at array.jl:2024\n \
    \   findall(!Matched::Union{Regex, AbstractString}, ::AbstractString; overlap)\
    \ at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n   [1]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpk6r_zdbv.jl:9\n\
    \   [2] top-level scope at /tmp/tmpk6r_zdbv.jl:17\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpk6r_zdbv.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpk6r_zdbv.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Function, ::Any)\
    \ at array.jl:2024\n    findall(!Matched::Union{Regex, AbstractString}, ::AbstractString;\
    \ overlap) at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpk6r_zdbv.jl:9\n\
    \   [2] top-level scope at /tmp/tmpk6r_zdbv.jl:18\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpk6r_zdbv.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpk6r_zdbv.jl:19\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Function, ::Any)\
    \ at array.jl:2024\n    findall(!Matched::Union{Regex, AbstractString}, ::AbstractString;\
    \ overlap) at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpk6r_zdbv.jl:9\n\
    \   [2] top-level scope at /tmp/tmpk6r_zdbv.jl:19\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpk6r_zdbv.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpk6r_zdbv.jl:20\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  MethodError: no method matching findall(::Array{String,1}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Function, ::Any) at array.jl:2024\n \
    \   findall(!Matched::Union{Regex, AbstractString}, ::AbstractString; overlap)\
    \ at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n   [1]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpk6r_zdbv.jl:9\n\
    \   [2] top-level scope at /tmp/tmpk6r_zdbv.jl:20\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpk6r_zdbv.jl:16\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk6r_zdbv.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list of\
    \ strings and a substring and returns all strings that contain that substring.\
    \ \nFor example, given [\"abc\", \"bacd\", \"cde\", \"array\"] and \"a\", it should\
    \ return [\"abc\", \"bacd\", \"array\"].\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3_fdj48c.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3_fdj48c.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of strings and a substring and returns a vector of strings that\
    \ only contain the substring.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8wpqhsrx.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8wpqhsrx.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    \n    return strings\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp82bdfahh.jl:21\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmp82bdfahh.jl:11\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp82bdfahh.jl:11\n\
    \   [4] top-level scope at /tmp/tmp82bdfahh.jl:21\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp82bdfahh.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmp82bdfahh.jl:22\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains not defined\n\
    \  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmp82bdfahh.jl:11\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp82bdfahh.jl:11\n\
    \   [4] top-level scope at /tmp/tmp82bdfahh.jl:22\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp82bdfahh.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmp82bdfahh.jl:23\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  UndefVarError: contains not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"\
    {String})(::String) at /tmp/tmp82bdfahh.jl:11\n   [2] filter(::var\"#3#4\"{String},\
    \ ::Array{String,1}) at ./array.jl:2375\n   [3] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp82bdfahh.jl:11\n   [4] top-level scope at /tmp/tmp82bdfahh.jl:23\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp82bdfahh.jl:19\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp82bdfahh.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring)]\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes a vector of strings and a substring and returns a vector\
    \ of strings that only contain the given substring. Test it on some test cases.\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkmqgbklc.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkmqgbklc.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ filters input strings based on whether they contain given substrings.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpclf38ffs.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpclf38ffs.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpb89yb0ln.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Array{String,1}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Function, ::Any) at array.jl:2024\n \
    \   findall(!Matched::Union{Regex, AbstractString}, ::AbstractString; overlap)\
    \ at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n   [1]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpb89yb0ln.jl:9\n\
    \   [2] top-level scope at /tmp/tmpb89yb0ln.jl:17\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpb89yb0ln.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpb89yb0ln.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Function, ::Any)\
    \ at array.jl:2024\n    findall(!Matched::Union{Regex, AbstractString}, ::AbstractString;\
    \ overlap) at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpb89yb0ln.jl:9\n\
    \   [2] top-level scope at /tmp/tmpb89yb0ln.jl:18\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpb89yb0ln.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpb89yb0ln.jl:19\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Function, ::Any)\
    \ at array.jl:2024\n    findall(!Matched::Union{Regex, AbstractString}, ::AbstractString;\
    \ overlap) at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpb89yb0ln.jl:9\n\
    \   [2] top-level scope at /tmp/tmpb89yb0ln.jl:19\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpb89yb0ln.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpb89yb0ln.jl:20\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  MethodError: no method matching findall(::Array{String,1}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Function, ::Any) at array.jl:2024\n \
    \   findall(!Matched::Union{Regex, AbstractString}, ::AbstractString; overlap)\
    \ at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n   [1]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpb89yb0ln.jl:9\n\
    \   [2] top-level scope at /tmp/tmpb89yb0ln.jl:20\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpb89yb0ln.jl:16\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb89yb0ln.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    \n    return\
    \ strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_pfbaf5p.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Array{String,1}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Function, ::Any) at array.jl:2024\n \
    \   findall(!Matched::Union{Regex, AbstractString}, ::AbstractString; overlap)\
    \ at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n   [1]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp_pfbaf5p.jl:9\n\
    \   [2] top-level scope at /tmp/tmp_pfbaf5p.jl:18\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp_pfbaf5p.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmp_pfbaf5p.jl:19\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Function, ::Any)\
    \ at array.jl:2024\n    findall(!Matched::Union{Regex, AbstractString}, ::AbstractString;\
    \ overlap) at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp_pfbaf5p.jl:9\n\
    \   [2] top-level scope at /tmp/tmp_pfbaf5p.jl:19\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp_pfbaf5p.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmp_pfbaf5p.jl:20\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Function, ::Any)\
    \ at array.jl:2024\n    findall(!Matched::Union{Regex, AbstractString}, ::AbstractString;\
    \ overlap) at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp_pfbaf5p.jl:9\n\
    \   [2] top-level scope at /tmp/tmp_pfbaf5p.jl:20\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp_pfbaf5p.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmp_pfbaf5p.jl:21\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  MethodError: no method matching findall(::Array{String,1}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Function, ::Any) at array.jl:2024\n \
    \   findall(!Matched::Union{Regex, AbstractString}, ::AbstractString; overlap)\
    \ at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n   [1]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp_pfbaf5p.jl:9\n\
    \   [2] top-level scope at /tmp/tmp_pfbaf5p.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp_pfbaf5p.jl:17\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_pfbaf5p.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter(x->contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.3>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2: Filter a DataFrame\
    \ for rows that contain a given substring\nWrite a function that filters a DataFrame\
    \ for rows that contain a given substring. \nThe function should return a DataFrame\
    \ with only those rows that contain the given substring.\nThe function should\
    \ accept two arguments: the DataFrame to be filtered and the substring to be filtered\
    \ for.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmonxyc_3.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmonxyc_3.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and\
    \ returns a boolean indicating whether that string is a palindrome.\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpktrhjit9.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpktrhjit9.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring)]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3lgnbskh.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3lgnbskh.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = strings[findall(strings,substring)]\n    return strings\nend\n\
    </cell>\n<code language=julia-1.4>\nfilter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters an input list of strings only for ones that do not contain given substring\n\
    e.g. filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n>>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n['bacd', 'cde']\n>>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'b')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'c')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'd')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'e')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'f')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'g')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'h')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'i')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'j')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'k')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'l')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'm')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'n')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'o')\n['abc', 'bacd', 'cde', 'array']\n>>> \nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5t1vd7al.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5t1vd7al.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    substring = lowercase(substring)\n    \n    strings = filter(x->contains(lowercase(x),\
    \ substring), strings)\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nfilter_by_substring()\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf_k2in6h.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpf_k2in6h.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter_by_substring(strings, substring, true)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpa3tzrcmo.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching filter_by_substring(::Array{String,1}, ::String,\
    \ ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpa3tzrcmo.jl:8\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpa3tzrcmo.jl:8\n   [2] top-level scope at /tmp/tmpa3tzrcmo.jl:15\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpa3tzrcmo.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpa3tzrcmo.jl:16\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching filter_by_substring(::Array{String,1},\
    \ ::String, ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpa3tzrcmo.jl:8\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpa3tzrcmo.jl:8\n   [2] top-level scope at /tmp/tmpa3tzrcmo.jl:16\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpa3tzrcmo.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpa3tzrcmo.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching filter_by_substring(::Array{String,1},\
    \ ::String, ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpa3tzrcmo.jl:8\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpa3tzrcmo.jl:8\n   [2] top-level scope at /tmp/tmpa3tzrcmo.jl:17\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpa3tzrcmo.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpa3tzrcmo.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  MethodError: no method matching filter_by_substring(::Array{String,1}, ::String,\
    \ ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpa3tzrcmo.jl:8\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpa3tzrcmo.jl:8\n   [2] top-level scope at /tmp/tmpa3tzrcmo.jl:18\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpa3tzrcmo.jl:14\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa3tzrcmo.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter_by_substring(strings, substring, true)\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"a\", \"b\", \"c\", \"d\"], \"a\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"a\", \"b\", \"c\", \"d\"], \"z\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"a\", \"b\", \"c\", \"d\"], \"z\", true)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of strings and a substring and\
    \ returns a vector of strings that only contain the substring.\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn24ywrmw.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpn24ywrmw.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ contains(string, substring)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nfilter_by_substring()\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplca5nitm.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplca5nitm.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter_by_substring(strings, substring, true)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgabszlaq.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching filter_by_substring(::Array{String,1}, ::String,\
    \ ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpgabszlaq.jl:8\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpgabszlaq.jl:8\n   [2] top-level scope at /tmp/tmpgabszlaq.jl:15\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpgabszlaq.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpgabszlaq.jl:16\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching filter_by_substring(::Array{String,1},\
    \ ::String, ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpgabszlaq.jl:8\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpgabszlaq.jl:8\n   [2] top-level scope at /tmp/tmpgabszlaq.jl:16\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpgabszlaq.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpgabszlaq.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching filter_by_substring(::Array{String,1},\
    \ ::String, ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpgabszlaq.jl:8\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpgabszlaq.jl:8\n   [2] top-level scope at /tmp/tmpgabszlaq.jl:17\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpgabszlaq.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpgabszlaq.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  MethodError: no method matching filter_by_substring(::Array{String,1}, ::String,\
    \ ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpgabszlaq.jl:8\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpgabszlaq.jl:8\n   [2] top-level scope at /tmp/tmpgabszlaq.jl:18\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpgabszlaq.jl:14\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgabszlaq.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3awk87do.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Array{String,1}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Function, ::Any) at array.jl:2024\n \
    \   findall(!Matched::Union{Regex, AbstractString}, ::AbstractString; overlap)\
    \ at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n   [1]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp3awk87do.jl:9\n\
    \   [2] top-level scope at /tmp/tmp3awk87do.jl:17\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3awk87do.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmp3awk87do.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Function, ::Any)\
    \ at array.jl:2024\n    findall(!Matched::Union{Regex, AbstractString}, ::AbstractString;\
    \ overlap) at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp3awk87do.jl:9\n\
    \   [2] top-level scope at /tmp/tmp3awk87do.jl:18\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3awk87do.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmp3awk87do.jl:19\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Function, ::Any)\
    \ at array.jl:2024\n    findall(!Matched::Union{Regex, AbstractString}, ::AbstractString;\
    \ overlap) at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp3awk87do.jl:9\n\
    \   [2] top-level scope at /tmp/tmp3awk87do.jl:19\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3awk87do.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmp3awk87do.jl:20\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  MethodError: no method matching findall(::Array{String,1}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Function, ::Any) at array.jl:2024\n \
    \   findall(!Matched::Union{Regex, AbstractString}, ::AbstractString; overlap)\
    \ at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n   [1]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp3awk87do.jl:9\n\
    \   [2] top-level scope at /tmp/tmp3awk87do.jl:20\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3awk87do.jl:16\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3awk87do.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpph3q6j2_.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Array{String,1}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Function, ::Any) at array.jl:2024\n \
    \   findall(!Matched::Union{Regex, AbstractString}, ::AbstractString; overlap)\
    \ at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n   [1]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpph3q6j2_.jl:9\n\
    \   [2] top-level scope at /tmp/tmpph3q6j2_.jl:17\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpph3q6j2_.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpph3q6j2_.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Function, ::Any)\
    \ at array.jl:2024\n    findall(!Matched::Union{Regex, AbstractString}, ::AbstractString;\
    \ overlap) at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpph3q6j2_.jl:9\n\
    \   [2] top-level scope at /tmp/tmpph3q6j2_.jl:18\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpph3q6j2_.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpph3q6j2_.jl:19\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Function, ::Any)\
    \ at array.jl:2024\n    findall(!Matched::Union{Regex, AbstractString}, ::AbstractString;\
    \ overlap) at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpph3q6j2_.jl:9\n\
    \   [2] top-level scope at /tmp/tmpph3q6j2_.jl:19\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpph3q6j2_.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpph3q6j2_.jl:20\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  MethodError: no method matching findall(::Array{String,1}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Function, ::Any) at array.jl:2024\n \
    \   findall(!Matched::Union{Regex, AbstractString}, ::AbstractString; overlap)\
    \ at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n   [1]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpph3q6j2_.jl:9\n\
    \   [2] top-level scope at /tmp/tmpph3q6j2_.jl:20\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpph3q6j2_.jl:16\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpph3q6j2_.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nFilter a list for strings\
    \ that contain a given substring\nThe function filter_by_substring takes in two\
    \ arguments:\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8q8qujpt.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8q8qujpt.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = strings[findall(x -> contains(x, substring), strings)]\n   \
    \ return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a list of strings and a substring and returns a list of\
    \ strings that contain that substring. For example, given [\"abc\", \"bacd\",\
    \ \"cde\", \"array\"], \"a\", the function should return [\"abc\", \"bacd\", \"\
    array\"].\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t\
    @test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv0o8w7na.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpv0o8w7na.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter( x -> contains(x, substring), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpv39laf7i.jl:17\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmpv39laf7i.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpv39laf7i.jl:8\n\
    \   [4] top-level scope at /tmp/tmpv39laf7i.jl:17\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpv39laf7i.jl:15\n  \ntest set: Error During\
    \ Test at /tmp/tmpv39laf7i.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains not defined\n\
    \  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmpv39laf7i.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpv39laf7i.jl:8\n\
    \   [4] top-level scope at /tmp/tmpv39laf7i.jl:18\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpv39laf7i.jl:15\n  \ntest set: Error During\
    \ Test at /tmp/tmpv39laf7i.jl:19\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  UndefVarError: contains not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"\
    {String})(::String) at /tmp/tmpv39laf7i.jl:8\n   [2] filter(::var\"#3#4\"{String},\
    \ ::Array{String,1}) at ./array.jl:2375\n   [3] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpv39laf7i.jl:8\n   [4] top-level scope at /tmp/tmpv39laf7i.jl:19\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpv39laf7i.jl:15\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv39laf7i.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters an input list of strings only for ones that do not contain given substring\n\
    >>> filter_by_substring([], 'a')\n[]\n>>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n['abc', 'bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'b')\n['abc', 'bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'c')\n['abc', 'bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'd')\n['abc', 'bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'e')\n['abc', 'bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'f')\n['abc', 'bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'g')\n['abc', 'bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'h')\n['abc', 'bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'i')\n['abc', 'bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'j')\n['abc', 'bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'k')\n['abc', 'bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'l')\n['abc', 'bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'm')\n['abc', 'bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'n')\n['abc', 'bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'o')\n['abc', 'bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'p')\n['abc', 'bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'q')\n['abc', 'ba\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwm710ns7.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwm710ns7.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ contains(string, substring)\n            remove!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nfilter_by_substring!\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbfqrjxh9.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbfqrjxh9.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    \n    return\
    \ strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqh4ncg8e.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Array{String,1}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Function, ::Any) at array.jl:2024\n \
    \   findall(!Matched::Union{Regex, AbstractString}, ::AbstractString; overlap)\
    \ at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n   [1]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpqh4ncg8e.jl:9\n\
    \   [2] top-level scope at /tmp/tmpqh4ncg8e.jl:18\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqh4ncg8e.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpqh4ncg8e.jl:19\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Function, ::Any)\
    \ at array.jl:2024\n    findall(!Matched::Union{Regex, AbstractString}, ::AbstractString;\
    \ overlap) at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpqh4ncg8e.jl:9\n\
    \   [2] top-level scope at /tmp/tmpqh4ncg8e.jl:19\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqh4ncg8e.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpqh4ncg8e.jl:20\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Function, ::Any)\
    \ at array.jl:2024\n    findall(!Matched::Union{Regex, AbstractString}, ::AbstractString;\
    \ overlap) at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpqh4ncg8e.jl:9\n\
    \   [2] top-level scope at /tmp/tmpqh4ncg8e.jl:20\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqh4ncg8e.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpqh4ncg8e.jl:21\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  MethodError: no method matching findall(::Array{String,1}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Function, ::Any) at array.jl:2024\n \
    \   findall(!Matched::Union{Regex, AbstractString}, ::AbstractString; overlap)\
    \ at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n   [1]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpqh4ncg8e.jl:9\n\
    \   [2] top-level scope at /tmp/tmpqh4ncg8e.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqh4ncg8e.jl:17\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqh4ncg8e.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkglwozly.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Array{String,1}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Function, ::Any) at array.jl:2024\n \
    \   findall(!Matched::Union{Regex, AbstractString}, ::AbstractString; overlap)\
    \ at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n   [1]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpkglwozly.jl:9\n\
    \   [2] top-level scope at /tmp/tmpkglwozly.jl:17\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkglwozly.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpkglwozly.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Function, ::Any)\
    \ at array.jl:2024\n    findall(!Matched::Union{Regex, AbstractString}, ::AbstractString;\
    \ overlap) at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpkglwozly.jl:9\n\
    \   [2] top-level scope at /tmp/tmpkglwozly.jl:18\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkglwozly.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpkglwozly.jl:19\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Function, ::Any)\
    \ at array.jl:2024\n    findall(!Matched::Union{Regex, AbstractString}, ::AbstractString;\
    \ overlap) at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpkglwozly.jl:9\n\
    \   [2] top-level scope at /tmp/tmpkglwozly.jl:19\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkglwozly.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpkglwozly.jl:20\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  MethodError: no method matching findall(::Array{String,1}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Function, ::Any) at array.jl:2024\n \
    \   findall(!Matched::Union{Regex, AbstractString}, ::AbstractString; overlap)\
    \ at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n   [1]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpkglwozly.jl:9\n\
    \   [2] top-level scope at /tmp/tmpkglwozly.jl:20\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkglwozly.jl:16\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkglwozly.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter_by_substring(strings, substring, true)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyres90zo.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching filter_by_substring(::Array{String,1}, ::String,\
    \ ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpyres90zo.jl:8\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpyres90zo.jl:8\n   [2] top-level scope at /tmp/tmpyres90zo.jl:15\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpyres90zo.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpyres90zo.jl:16\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching filter_by_substring(::Array{String,1},\
    \ ::String, ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpyres90zo.jl:8\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpyres90zo.jl:8\n   [2] top-level scope at /tmp/tmpyres90zo.jl:16\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpyres90zo.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpyres90zo.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching filter_by_substring(::Array{String,1},\
    \ ::String, ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpyres90zo.jl:8\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpyres90zo.jl:8\n   [2] top-level scope at /tmp/tmpyres90zo.jl:17\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpyres90zo.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpyres90zo.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  MethodError: no method matching filter_by_substring(::Array{String,1}, ::String,\
    \ ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpyres90zo.jl:8\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpyres90zo.jl:8\n   [2] top-level scope at /tmp/tmpyres90zo.jl:18\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpyres90zo.jl:14\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyres90zo.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nFiltering by substrings\n\
    We can also filter by substrings using the function filter_by_substrings.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjx9otwzi.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjx9otwzi.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpadmbdh4r.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpadmbdh4r.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpadmbdh4r.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of strings and a vector of strings as inputs and returns a vector\
    \ of strings as output. \nThe function should return all strings in the input\
    \ vector that do not contain any of the strings in the input vector.\nThe function\
    \ should return an empty vector if the input vectors are empty.\nThe function\
    \ should return an empty vector if the input vectors are of different lengths.\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpw3jrgh5i.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpw3jrgh5i.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = strings[findall(x -> contains(x, substring), strings)]\n   \
    \ return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmnwdbeuo.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmnwdbeuo.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter_by_substring(strings, substring, true)\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters an input list of strings only for ones\
    \ that do not contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'cde']\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnsg4t4ej.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnsg4t4ej.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter_by_substring(strings, substring, true)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpz1lwg0yh.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching filter_by_substring(::Array{String,1}, ::String,\
    \ ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpz1lwg0yh.jl:8\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpz1lwg0yh.jl:8\n   [2] top-level scope at /tmp/tmpz1lwg0yh.jl:15\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpz1lwg0yh.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpz1lwg0yh.jl:16\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching filter_by_substring(::Array{String,1},\
    \ ::String, ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpz1lwg0yh.jl:8\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpz1lwg0yh.jl:8\n   [2] top-level scope at /tmp/tmpz1lwg0yh.jl:16\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpz1lwg0yh.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpz1lwg0yh.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching filter_by_substring(::Array{String,1},\
    \ ::String, ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpz1lwg0yh.jl:8\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpz1lwg0yh.jl:8\n   [2] top-level scope at /tmp/tmpz1lwg0yh.jl:17\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpz1lwg0yh.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpz1lwg0yh.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  MethodError: no method matching filter_by_substring(::Array{String,1}, ::String,\
    \ ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpz1lwg0yh.jl:8\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpz1lwg0yh.jl:8\n   [2] top-level scope at /tmp/tmpz1lwg0yh.jl:18\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpz1lwg0yh.jl:14\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz1lwg0yh.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter(x->contains(x,substring), strings)\n    return strings\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of strings\
    \ and a substring and returns a vector of strings containing only the strings\
    \ that contain the substring. For example, given the following input vector:\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbgqymjy4.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbgqymjy4.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters input strings based on whether they\
    \ contain any of a list of substrings.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphfb4w8rb.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphfb4w8rb.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    substring = lowercase(substring)\n\
    \    \n    strings = filter((x) -> contains(lowercase(x), substring), strings)\n\
    \    \n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmgg9qetq.jl:23\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#3#4\")(::String) at /tmp/tmpmgg9qetq.jl:13\n\
    \   [2] filter(::var\"#3#4\", ::Array{String,1}) at ./array.jl:2375\n   [3] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpmgg9qetq.jl:13\n   [4] top-level scope at /tmp/tmpmgg9qetq.jl:23\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpmgg9qetq.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpmgg9qetq.jl:24\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains not defined\n\
    \  Stacktrace:\n   [1] (::var\"#3#4\")(::String) at /tmp/tmpmgg9qetq.jl:13\n \
    \  [2] filter(::var\"#3#4\", ::Array{String,1}) at ./array.jl:2375\n   [3] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpmgg9qetq.jl:13\n   [4] top-level scope at /tmp/tmpmgg9qetq.jl:24\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpmgg9qetq.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpmgg9qetq.jl:25\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  UndefVarError: contains not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"\
    )(::String) at /tmp/tmpmgg9qetq.jl:13\n   [2] filter(::var\"#3#4\", ::Array{String,1})\
    \ at ./array.jl:2375\n   [3] filter_by_substring(::Array{String,1}, ::String)\
    \ at /tmp/tmpmgg9qetq.jl:13\n   [4] top-level scope at /tmp/tmpmgg9qetq.jl:25\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpmgg9qetq.jl:21\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmgg9qetq.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpi9vokrkq.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Array{String,1}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Function, ::Any) at array.jl:2024\n \
    \   findall(!Matched::Union{Regex, AbstractString}, ::AbstractString; overlap)\
    \ at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n   [1]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpi9vokrkq.jl:9\n\
    \   [2] top-level scope at /tmp/tmpi9vokrkq.jl:17\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpi9vokrkq.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpi9vokrkq.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Function, ::Any)\
    \ at array.jl:2024\n    findall(!Matched::Union{Regex, AbstractString}, ::AbstractString;\
    \ overlap) at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpi9vokrkq.jl:9\n\
    \   [2] top-level scope at /tmp/tmpi9vokrkq.jl:18\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpi9vokrkq.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpi9vokrkq.jl:19\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Function, ::Any)\
    \ at array.jl:2024\n    findall(!Matched::Union{Regex, AbstractString}, ::AbstractString;\
    \ overlap) at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n\
    \   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpi9vokrkq.jl:9\n\
    \   [2] top-level scope at /tmp/tmpi9vokrkq.jl:19\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpi9vokrkq.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpi9vokrkq.jl:20\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  MethodError: no method matching findall(::Array{String,1}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Function, ::Any) at array.jl:2024\n \
    \   findall(!Matched::Union{Regex, AbstractString}, ::AbstractString; overlap)\
    \ at regex.jl:345\n    findall(::Any) at array.jl:2065\n  Stacktrace:\n   [1]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpi9vokrkq.jl:9\n\
    \   [2] top-level scope at /tmp/tmpi9vokrkq.jl:20\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpi9vokrkq.jl:16\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi9vokrkq.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters a list of strings based on whether they\
    \ contain a given substring. Test it on a list of strings that contains both substrings.\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpixcmb8gr.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpixcmb8gr.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter_by_substring(strings, substring, true)\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\", true)\n</cell>\n<text>\nfilter_by_substring!\nSimilar to filter_by_substring,\
    \ but modifies the input list in-place.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvvj1wrnp.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvvj1wrnp.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9l43kd36.jl:17\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmp9l43kd36.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp9l43kd36.jl:8\n\
    \   [4] top-level scope at /tmp/tmp9l43kd36.jl:17\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp9l43kd36.jl:15\n  \ntest set: Error During\
    \ Test at /tmp/tmp9l43kd36.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains not defined\n\
    \  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmp9l43kd36.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp9l43kd36.jl:8\n\
    \   [4] top-level scope at /tmp/tmp9l43kd36.jl:18\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp9l43kd36.jl:15\n  \ntest set: Error During\
    \ Test at /tmp/tmp9l43kd36.jl:19\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  UndefVarError: contains not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"\
    {String})(::String) at /tmp/tmp9l43kd36.jl:8\n   [2] filter(::var\"#3#4\"{String},\
    \ ::Array{String,1}) at ./array.jl:2375\n   [3] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp9l43kd36.jl:8\n   [4] top-level scope at /tmp/tmp9l43kd36.jl:19\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp9l43kd36.jl:15\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9l43kd36.jl:13\n"
  exit_code: 1
  status: Exception
