name: HumanEval_94_skjkasdkd
language: julia
prompt: "\"\"\"You are given a list of integers.\n    You need to find the largest\
  \ prime value and return the sum of its digits.\n\n    Examples:\n    For lst =\
  \ [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n\
  \    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n\
  \    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should\
  \ be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be\
  \ 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7]\
  \ the output should be 7\n    \"\"\"\nfunction skjkasdkd(lst::Vector{Int64})::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = skjkasdkd;\n\t@test(candidate([0,\
  \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\n\
  \t@test(candidate([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) ==\
  \ 25)\n\t@test(candidate([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32,\
  \ 30, 1, 9, 3]) == 13)\n\t@test(candidate([0, 724, 32, 71, 99, 32, 6, 0, 5, 91,\
  \ 83, 0, 5, 6]) == 11)\n\t@test(candidate([0, 81, 12, 3, 1, 21]) == 3)\n\t@test(candidate([0,\
  \ 8, 1, 2, 1, 7]) == 7)\n\t@test(candidate([8191]) == 19)\n\t@test(candidate([8191,\
  \ 123456, 127, 7]) == 19)\n\t@test(candidate([127, 97, 8192]) == 10)\nend\n"
completions: ["    \n    primes = prime_gen()\n    \n    largest = 0\n    largestPrime\
    \ = 0\n    largestSum = 0\n    \n    for prime in primes\n        \n        sum\
    \ = 0\n        \n        for element in lst\n            \n            if element\
    \ % prime == 0\n                sum += element\n            end\n        end\n\
    \        \n        if sum > largestSum\n            largestSum = sum\n       \
    \     largestPrime = prime\n            largest = largestSum\n        end\n  \
    \  end\n    \n    return largest\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([3,0,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0,81,12,3,1,21])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0,8,1,2,1,7])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([3,0,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0,81,12,3,1,21])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0,8,1,2,1,7])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([3,0,2,1,3,5,7,4,5,", "    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    primes = primes(length(lst))\n    \n    largest = 0\n    \n    for p\
    \ in primes\n        if lst.contains(p)\n            largest = max(p, largest)\n\
    \        end\n    end\n    \n    return largest\nend\n</cell>\n<code language=julia-1.5>\n\
    @time skjkasdkd(lst)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of integers and returns the number of prime numbers less than or equal\
    \ to the length of the vector.", "    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    primes = primes(lst)\n    \n    largest = primes[end]\n\
    \    \n    sum = 0\n    \n    for el in lst\n        if el == largest\n      \
    \      sum += el\n        else\n            largest = el\n        end\n    end\n\
    \    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([3,0,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0,81,12,3,1,21])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0,8,1,2,1,7])\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a vector of integers and returns the number of unique\
    \ elements in the vector.", "    \n    primes = primes(lst)\n    \n    largest\
    \ = primes[end]\n    \n    sum = 0\n    \n    for p in primes\n        if p >\
    \ largest\n            largest = p\n        end\n    end\n    \n    for p in primes\n\
    \        if p <= largest\n            sum += p\n        end\n    end\n    \n \
    \   return sum\nend\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(lst)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector.", "    \n\
    \    primes = primes(lst)\n    \n    largest = primes[end]\n    \n    sum = 0\n\
    \    \n    for p in primes\n        if p > largest\n            largest = p\n\
    \        end\n    end\n    \n    for p in primes\n        if p != largest\n  \
    \          sum += p\n        end\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\n@time skjkasdkd(lst);\n</cell>\n<text>\nExercise 2\n\
    Write a function that will take a list of integers and return the sum of the squares\
    \ of the integers in the list.", "    \n    primes = primes(lst)\n    \n    largest\
    \ = 0\n    \n    for p in primes\n        if lst.contains(p)\n            largest\
    \ = largest+p\n        end\n    end\n    \n    return largest\nend\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0,81,12,3,1,21])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0,8,1,2,1,7])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([0,81,12,3,1,21])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0,8,1,2,1,7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([1,3,1,32,5107,34,8", "    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    primes = primes(lst)\n    \n    largest\
    \ = 0\n    \n    for p in primes\n        if lst.contains(p)\n            largest\
    \ = largest+p\n        end\n    end\n    \n    return largest\nend", "    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    largest = 0\n \
    \   largestPrime = 0\n    largestSum = 0\n    largestSumDigits = 0\n    largestSumDigitsPrime\
    \ = 0\n    largestSumDigitsPrime2 = 0\n    largestSumDigitsPrime3 = 0\n    largestSumDigitsPrime4\
    \ = 0\n    largestSumDigitsPrime5 = 0\n    largestSumDigitsPrime6 = 0\n    largestSumDigitsPrime7\
    \ = 0\n    largestSumDigitsPrime8 = 0\n    largestSumDigitsPrime9 = 0\n    largestSumDigitsPrime10\
    \ = 0\n    largestSumDigitsPrime11 = 0\n    largestSumDigitsPrime12 = 0\n    largestSumDigitsPrime13\
    \ = 0\n    largestSumDigitsPrime14 = 0\n    largestSumDigitsPrime15 = 0\n    largestSumDigitsPrime16\
    \ = 0\n    largestSumDigitsPrime17 = 0\n    largestSumDigitsPrime18 = 0\n    largestSumDigitsPrime19\
    \ = 0\n    largestSumDigitsPrime20 = 0\n    largestSumDigitsPrime21 = 0\n    largestSumDigitsPrime22\
    \ = 0\n    largestSumDigitsPrime23 = 0\n    largestSumDigitsPrime24 = 0\n    largestSumDigitsPrime25\
    \ = 0\n    largestSumDigitsPrime26 = 0\n    largestSumDigitsPrime27 = 0\n    largestSumDigitsPrime28\
    \ = 0\n    largestSumDigitsPrime29 = 0\n    largestSumDigitsPrime30 = 0\n    largestSumDigitsPrime31\
    \ = 0\n    largestSumDigitsPrime32 = 0\n    largestSumDigitsPrime33 = 0\n    largestSumDigitsPrime34\
    \ = 0\n    largestSumDigitsPrime35 = 0\n    largestSumDigitsPrime36 = 0\n    largestSumDigitsPrime37\
    \ = 0\n    largestSumDigitsPrime38 = 0\n    largestSumDigitsPrime39 = 0\n    largestSumDigitsPrime40\
    \ = 0\n    largestSumDigitsPrime41 = 0\n    largestSumDigitsPrime42 = 0\n    largestSumDigitsPrime43\
    \ = 0\n    largestSumDigitsPrime44 = 0\n    lar", "    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    primes = primes(lst)\n    \n    largest\
    \ = primes[end]\n    \n    sum = 0\n    \n    for p in primes\n        if p >\
    \ largest\n            largest = p\n        end\n    end\n    \n    for p in primes\n\
    \        if p < largest\n            sum += p\n        end\n    end\n    \n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0,81,12,3,1,21])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0,8,1,2,1,7])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([0,81,12,3,1,21])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0,8,1,2,1,7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    primes = primes(lst)\n    \n\
    \    largest = primes[end]\n    \n    sum = 0\n    \n    for p in primes\n   \
    \     if p > largest\n            largest = p\n        end\n    end\n    \n  \
    \  for p in primes\n        if p > largest\n            sum += p\n        end\n\
    \    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ skjkasdkd(lst)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ number of prime numbers less than a given number n.", "    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    largest = 0\n    largestPrime\
    \ = 0\n    largestSum = 0\n    largestSumOfDigits = 0\n    \n    for x in lst\n\
    \        if x % 2 == 0\n            largestPrime = largestPrime + 1\n        end\n\
    \        if x % 3 == 0\n            largestPrime = largestPrime + 1\n        end\n\
    \        if x % 5 == 0\n            largestPrime = largestPrime + 1\n        end\n\
    \        if x % 7 == 0\n            largestPrime = largestPrime + 1\n        end\n\
    \        if x % 11 == 0\n            largestPrime = largestPrime + 1\n       \
    \ end\n        if x % 13 == 0\n            largestPrime = largestPrime + 1\n \
    \       end\n        if x % 17 == 0\n            largestPrime = largestPrime +\
    \ 1\n        end\n        if x % 19 == 0\n            largestPrime = largestPrime\
    \ + 1\n        end\n        if x % 23 == 0\n            largestPrime = largestPrime\
    \ + 1\n        end\n        if x % 29 == 0\n            largestPrime = largestPrime\
    \ + 1\n        end\n        if x % 31 == 0\n            largestPrime = largestPrime\
    \ + 1\n        end\n        if x % 37 == 0\n            largestPrime = largestPrime\
    \ + 1\n        end\n        if x % 41 == 0\n            largestPrime = largestPrime\
    \ + 1\n        end\n        if x % 43 == 0\n            largestPrime = largestPrime\
    \ + 1\n        end\n        if x % 47 == 0\n            largestPrime = largestPrime\
    \ + 1\n        end\n        if x % 53 == 0\n            largestPrime = largestPrime\
    \ + 1\n        end\n        if x % 59 == 0\n            largestPrime = largestPrime\
    \ + 1\n        end\n        if x % 61 == 0\n            largestPrime = largestPrime\
    \ + 1\n        end\n        if x % 67 == 0\n            largestPrime = largestPrime\
    \ + 1\n        end\n        if x % 71 == 0\n            largestPrime = largestPrime\
    \ + 1\n        end\n        if x % 73 == 0\n            largestPrime = largestPrime\
    \ + 1\n        end\n        if x % 79 == 0\n            largestPrime = largestPrime\
    \ + 1\n        end\n        if x % 83 == 0\n            largestPrime = largestPrime\
    \ + 1\n        end\n        if x % 89 == 0\n            largestPrime = largestPrime\
    \ + 1", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    primes = primes(lst)\n\
    \    \n    largest = primes[end]\n    \n    sum = 0\n    \n    for p in primes\n\
    \        if p > largest\n            largest = p\n        end\n    end\n    \n\
    \    for p in primes\n        if p > largest\n            sum += p\n        end\n\
    \    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ skjkasdkd(lst);\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of prime numbers less than a given integer n.", "    primes = primes(length(lst))\n\
    \    largest = primes[end]\n    sum = 0\n    for p in primes\n        if p > largest\n\
    \            largest = p\n        end\n    end\n    for p in primes\n        if\
    \ p > largest\n            sum += lst[p]\n        end\n    end\n    return sum\n\
    end\n</code>\n<|/ a tags=julia,primes |>\n<| c |>\nThanks for your answer! I didn't\
    \ know about `primes`. However, I still don't understand why my code doesn't work.\
    \ Could you please explain why my code doesn't work?\n<|/ c |>\n<| c |>\nI added\
    \ my code to the question. Could you please explain why my code doesn't work?\n\
    <|/ c |>\n<| c |>\nI added my code to the question. Could you please explain why\
    \ my code doesn't work?\n<|/ c |>\n<| c |>\nI added my code to the question. Could\
    \ you please explain why my code doesn't work?\n<|/ c |>\n<| c |>\nI added my\
    \ code to the question. Could you please explain why my code doesn't work?\n<|/\
    \ c |>\n<| a dscore=2 |>\nThe code below is based on a previous answer by and\
    \ I thought it would be useful to post it here as well.\n<code>", "    \n    primes\
    \ = primes(lst)\n    \n    largest = primes[end]\n    \n    sum = 0\n    \n  \
    \  for el in primes\n        if el > largest\n            largest = el\n     \
    \   end\n    end\n    \n    for el in primes\n        if el == largest\n     \
    \       sum += el\n        end\n    end\n    \n    return sum\nend", "    \n \
    \   primes = primes(lst)\n    \n    largest = primes[end]\n    \n    sum = 0\n\
    \    \n    for p in primes\n        if p > largest\n            largest = p\n\
    \        end\n    end\n    \n    for p in primes\n        if p != largest\n  \
    \          sum += digits(p)[end]\n        end\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(lst)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the digits of an integer.",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    primes =\
    \ primes(lst)\n    \n    largest = primes[end]\n    \n    sum = 0\n    \n    for\
    \ p in primes\n        if p > largest\n            largest = p\n        end\n\
    \    end\n    \n    for p in primes\n        if p != largest\n            if lst.index(p)\
    \ == lst.index(largest)\n                sum += lst.index(p)\n            end\n\
    \        end\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @time skjkasdkd(lst)\n</cell>\n<text>\nProblem 2\nWrite a function that takes\
    \ a vector of integers and returns the number of integers in the vector that are\
    \ divisible by 3.", "    \n    largest = 0\n    largestPrime = 0\n    largestSum\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigitDigit = 0\n    \n    for x\
    \ in lst\n        if x == largestPrime\n            largestPrime = largestPrime\
    \ + 1\n            largestSum = largestSum + x\n            largestSumDigit =\
    \ largestSumDigit + x\n            largestSumDigitDigit = largestSumDigitDigit\
    \ + x\n        else\n            if largestPrime == 0\n                largestPrime\
    \ = x\n                largestSum = x\n                largestSumDigit = x\n \
    \               largestSumDigitDigit = x\n            else\n                if\
    \ largestPrime > x\n                    largestPrime = x\n                   \
    \ largestSum = x\n                    largestSumDigit = x\n                  \
    \  largestSumDigitDigit = x\n                else\n                    if largestSum\
    \ > x\n                        largestSum = x\n                        largestSumDigit\
    \ = x\n                        largestSumDigitDigit = x\n                    else\n\
    \                        if largestSumDigit > x\n                            largestSumDigit\
    \ = x\n                            largestSumDigitDigit = x\n                \
    \        else\n                            if largestSumDigitDigit > x\n     \
    \                           largestSumDigitDigit = x\n                       \
    \     else\n                                largestPrime = x\n               \
    \                 largestSum = x\n                                largestSumDigit\
    \ = x\n                                largestSumDigitDigit = x\n            \
    \                end\n                        end\n                    end\n \
    \               end\n            end\n        end\n    end\n    \n    return largestPrime\
    \ + largestSum + largestSumDigit + largestSumDigitDigit\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([0,81,12,3,1,21])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd(", "    \n    primes = primes(lst)\n    \n    largest = primes[end]\n\
    \    \n    sum = 0\n    \n    for el in lst\n        if el == largest\n      \
    \      sum += el\n        else\n            largest = primes[end]\n          \
    \  sum += el\n        end\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time skjkasdkd(lst)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of all prime numbers less than a given number\
    \ n.", "    \n    primes = primes(lst)\n    \n    largest = primes[end]\n    \n\
    \    sum = 0\n    \n    for p in primes\n        if p > largest\n            largest\
    \ = p\n        end\n    end\n    \n    for p in primes\n        if p != largest\n\
    \            sum += p\n        end\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    primes =\
    \ primes(length(lst))\n    largest = primes[end]\n    sum = 0\n    for p in primes\n\
    \        if p > largest\n            largest = p\n        end\n    end\n    for\
    \ p in primes\n        if p > largest\n            sum += lst[p]\n        end\n\
    \    end\n    return sum\nend", "    \n    primes = primes(lst)\n    \n    largest\
    \ = primes[end]\n    \n    sum = 0\n    \n    for p in primes\n        if p >\
    \ largest\n            largest = p\n        end\n    end\n    \n    for p in primes\n\
    \        if p > largest\n            sum += p\n        end\n    end\n    \n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0,81,12,3,1,21])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0,8,1,2,1,7])\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a vector of integers and returns the number of prime\
    \ numbers less than or equal to the length of the vector.", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    primes = primes(lst)\n    \n\
    \    largest = primes[end]\n    \n    sum = 0\n    \n    for n in primes\n   \
    \     if n <= largest\n            sum += n\n        end\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(lst);\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of integers and returns\
    \ the sum of the squares of the integers in the vector.", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    largest = findmax(lst)\n  \
    \  largest = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n\
    \    largest = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n\
    \    largest = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n\
    \    largest = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n\
    \    largest = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n\
    \    largest = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n\
    \    largest = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n\
    \    largest = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n\
    \    largest = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n\
    \    largest = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n\
    \    largest = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n\
    \    largest = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n\
    \    largest = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n\
    \    largest = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n\
    \    largest = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n\
    \    largest = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n\
    \    largest = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n\
    \    largest = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n\
    \    largest = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n\
    \    largest = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n\
    \    largest = largest[1]\n    largest = largest[1]\n    largest = lar", "   \
    \ \n    primes = primes(lst)\n    \n    largest = primes[end]\n    \n    sum =\
    \ 0\n    \n    for p in primes\n        if p > largest\n            largest =\
    \ p\n        end\n    end\n    \n    for p in primes\n        if p > largest\n\
    \            sum += p\n        end\n    end\n    \n    return sum\nend", "   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    largest = minimum(lst)\n  \
    \  largestPrime = primes[largest]\n    largestPrimeSum = 0\n    for x in lst\n\
    \        if x % largestPrime == 0\n            largestPrimeSum += x % largestPrime\n\
    \        end\n    end\n    return largestPrimeSum\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>", "    \n    primes = primes(lst)\n    \n    largest\
    \ = primes[end]\n    \n    sum = 0\n    \n    for p in primes\n        if p >\
    \ largest\n            largest = p\n        end\n    end\n    \n    for p in primes\n\
    \        if p > largest\n            sum += p\n        end\n    end\n    \n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(lst)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of prime\
    \ numbers less than a given number n.", "    \n    primes = primes(lst)\n    largest\
    \ = primes[end]\n    sum = 0\n    for p in primes\n        if p > largest\n  \
    \          largest = p\n        end\n    end\n    for p in primes\n        if\
    \ p > largest\n            sum += p\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\n@time skjkasdkd(lst)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of prime numbers less than a given\
    \ integer n.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    primes = primes(length(lst))\n  \
    \  largest = primes[end]\n    largest = largest.digits(10)\n    largest = sum(largest)\n\
    \    return largest\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your\
    \ answer! I tried to run your code, but I got this error `ERROR: LoadError: UndefVarError:\
    \ primes not defined`. Do you know what could be the problem?\n<|/ c |>\n<| c\
    \ |>\nI edited my answer. Now it works. I tested it on Julia 0.6.2\n<|/ c |>\n\
    <| c |>\nThanks for your answer! I tried to run your code, but I got this error\
    \ `ERROR: LoadError: UndefVarError: primes not defined`. Do you know what could\
    \ be the problem?\n<|/ c |>\n<| c |>\nI edited my answer. Now it works. I tested\
    \ it on Julia 0.6.2\n<|/ c |>\n<| c |>\nThanks for your answer! I tried to run\
    \ your code, but I got this error `ERROR: LoadError: UndefVarError: primes not\
    \ defined`. Do you know what could be the problem?\n<|/ c |>\n<| a tags=primes,julia\
    \ |>\nI wrote a Julia package to solve this problem (https://github.com/kamens/primes.jl).\n\
    <code>\nusing Primes", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    primes = primes(lst)\n    \n    largest = primes[end]\n    \n    sum\
    \ = 0\n    \n    for p in primes\n        if p > largest\n            largest\
    \ = p\n        end\n    end\n    \n    for p in primes\n        if p != largest\n\
    \            sum += digits(p)[end]\n        end\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(lst);\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that checks if a number is prime or not. \nThe function\
    \ should take one integer as input and return true or false.", "    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    primes = primes(lst)\n\
    \    \n    largest = primes[end]\n    \n    sum = 0\n    \n    for el in lst\n\
    \        if el == largest\n            sum += el\n        end\n    end\n    \n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(lst)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that checks if a number is prime\
    \ or not. \nThe function should take one integer as argument and return a boolean.",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    largest = 0\n    largestPrime = 0\n    largestSum = 0\n    \n    for\
    \ x in lst\n        if isPrime(x)\n            if x > largestPrime\n         \
    \       largestPrime = x\n                largestSum = 0\n            else\n \
    \               largestPrime = largestPrime + x\n                largestSum =\
    \ largestSum + x\n            end\n        end\n    end\n    \n    return largestSum\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `[1,2,3]`\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added a test case to my answer.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added a test case to my answer.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added a test case to my answer.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added a test case to my answer.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    largest = 0\n    largestPrime = 0\n    largestSum\
    \ = 0\n    \n    for x in lst\n        if isPrime(x)\n            if x > largestPrime\n\
    \                largestPrime = x\n                largestSum = 0\n          \
    \  else\n                largestSum += x\n            end\n        end\n    end\n\
    \    \n    return largestSum + largestPrime\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([0,81,12,3,1,21])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0,8,1,2,1,7])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of integers and returns the sum of the squares of the integers in the\
    \ vector. \nThe function should work for both vectors of integers and vectors\
    \ of floating point numbers.", "    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    primes = primes(lst)\n    \n    largest = primes[end]\n\
    \    \n    largest = largest.digits[1]\n    \n    largest = largest.digits[2]\n\
    \    \n    largest = largest.digits[3]\n    \n    largest = largest.digits[4]\n\
    \    \n    largest = largest.digits[5]\n    \n    largest = largest.digits[6]\n\
    \    \n    largest = largest.digits[7]\n    \n    largest = largest.digits[8]\n\
    \    \n    largest = largest.digits[9]\n    \n    largest = largest.digits[10]\n\
    \    \n    largest = largest.digits[11]\n    \n    largest = largest.digits[12]\n\
    \    \n    largest = largest.digits[13]\n    \n    largest = largest.digits[14]\n\
    \    \n    largest = largest.digits[15]\n    \n    largest = largest.digits[16]\n\
    \    \n    largest = largest.digits[17]\n    \n    largest = largest.digits[18]\n\
    \    \n    largest = largest.digits[19]\n    \n    largest = largest.digits[20]\n\
    \    \n    largest = largest.digits[21]\n    \n    largest = largest.digits[22]\n\
    \    \n    largest = largest.digits[23]\n    \n    largest = largest.digits[24]\n\
    \    \n    largest = largest.digits[25]\n    \n    largest = largest.digits[26]\n\
    \    \n    largest = largest.digits[27]\n    \n    largest = largest.digits[28]\n\
    \    \n    largest = largest.digits[29]\n    \n    largest = largest.digits[30]\n\
    \    \n    largest = largest.digits[31]\n    \n    largest = largest.digits[32]\n\
    \    \n    largest = largest.digits[33]\n    \n    largest = largest.digits[34]\n\
    \    \n    largest = largest.digits[35]\n    \n    largest = largest.digits[36]\n\
    \    \n    ", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    primes =\
    \ primes(lst)\n    \n    largest = primes[end]\n    \n    largest = largest.digits[1]\n\
    \    \n    largest = largest.digits[2]\n    \n    largest = largest.digits[3]\n\
    \    \n    largest = largest.digits[4]\n    \n    largest = largest.digits[5]\n\
    \    \n    largest = largest.digits[6]\n    \n    largest = largest.digits[7]\n\
    \    \n    largest = largest.digits[8]\n    \n    largest = largest.digits[9]\n\
    \    \n    largest = largest.digits[10]\n    \n    largest = largest.digits[11]\n\
    \    \n    largest = largest.digits[12]\n    \n    largest = largest.digits[13]\n\
    \    \n    largest = largest.digits[14]\n    \n    largest = largest.digits[15]\n\
    \    \n    largest = largest.digits[16]\n    \n    largest = largest.digits[17]\n\
    \    \n    largest = largest.digits[18]\n    \n    largest = largest.digits[19]\n\
    \    \n    largest = largest.digits[20]\n    \n    largest = largest.digits[21]\n\
    \    \n    largest = largest.digits[22]\n    \n    largest = largest.digits[23]\n\
    \    \n    largest = largest.digits[24]\n    \n    largest = largest.digits[25]\n\
    \    \n    largest = largest.digits[26]\n    \n    largest = largest.digits[27]\n\
    \    \n    largest = largest.digits[28]\n    \n    largest = largest.digits[29]\n\
    \    \n    largest = largest.digits[30]\n    \n    largest = largest.digits[31]\n\
    \    \n    largest = largest.digits[32]\n    \n    largest = largest.digits[33]\n\
    \    \n    largest = largest.digits[34]\n    \n    largest = largest.digits[35]\n\
    \    \n    largest = largest.digits[36]\n    \n    ", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    primes = primes(lst)\n    \n    largest\
    \ = primes[end]\n    \n    sum = 0\n    \n    for p in primes\n        if p >\
    \ largest\n            largest = p\n        end\n    end\n    \n    for p in primes\n\
    \        if p <= largest\n            sum += p\n        end\n    end\n    \n \
    \   return sum\nend\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(lst);\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the number of unique elements in the vector.", "    primes = primes(lst)\n\
    \    largest = primes[end]\n    sum = 0\n    for p in primes\n        if p > largest\n\
    \            largest = p\n        end\n    end\n    for p in primes\n        if\
    \ p > largest\n            sum += p\n        end\n    end\n    return sum\nend\n\
    </code>\n<|/ a tags=julia,primes |>\n<| c |>\nI like your solution, but I wonder\
    \ if there is a way to avoid the for loops. I mean the for loops are the main\
    \ bottleneck of my code. I am looking for a way to avoid them and still get the\
    \ correct answer.\n<|/ c |>\n<| c |>\nI added a solution that avoids the for loops.\
    \ I hope it helps.\n<|/ c |>\n<| c |>\nThank you very much for your answer. I\
    \ tried your solution and it works perfectly fine. I will try to understand your\
    \ solution and try to understand how it works. Thank you very much for your help!\n\
    <|/ c |>\n<| c |>\nI added a solution that avoids the for loops. I hope it helps.\n\
    <|/ c |>\n<| c |>\nThank you very much for your answer. I tried your solution\
    \ and it works perfectly fine. I will try to understand your solution and try\
    \ to understand how it works. Thank you very much for your help!\n<|/ c |>\n<|\
    \ a dscore=1 |>\nI believe that your algorithm is correct, but you are not using\
    \ it correctly. \nThe function primes returns a list of all prime numbers less\
    \ than a given number. \n<code>\njulia> primes(10)\n2-element Array{Int64,1}:\n\
    \ 2\n 3\n</code>\nSo your algorithm is correct but you are not using it correctly.\
    \ \n<code>", "    \n    largest = minimum(lst)\n    largestPrime = primes[largest]\n\
    \    largestSum = sum(digits[largestPrime])\n    \n    for el in lst\n       \
    \ if el == largest\n            largestPrime = primes[el]\n            largestSum\
    \ = sum(digits[largestPrime])\n        else\n            largestPrime = primes[el]\n\
    \            largestSum = largestSum + sum(digits[largestPrime])\n        end\n\
    \    end\n    \n    return largestSum\nend\n</cell>\n<code language=julia-1.5>\n\
    @time skjkasdkd(lst)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of the digits of an integer.", "    \n    primes = primes(lst)\n   \
    \ largest = primes[end]\n    sum = 0\n    for p in primes\n        if p > largest\n\
    \            largest = p\n        end\n    end\n    for p in primes\n        if\
    \ p > largest\n            sum += p\n        end\n    end\n    return sum\nend\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work. `primes(lst)` returns\
    \ `[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97]`. `largest` should be `primes[end]`, not `primes[end]-1`.\n\
    <|/ c |>\n<| c |>\nThanks for pointing that out. I fixed the code accordingly.\n\
    <|/ c |>\n<| a tags=algorithm,primes,julia |>\nThe most efficient way is to use\
    \ Sieve of Eratosthenes algorithm. \nThe algorithm is quite simple: you just need\
    \ to find all prime numbers less than the number you are looking for, store them\
    \ in an array and iterate over them until you find the number you are looking\
    \ for. \nThe complexity of the algorithm is O(n) where n is the number of prime\
    \ numbers less than the number you are looking for. \nThe code below is written\
    \ in Julia language. \n<code>", "    \n    primes = primes(lst)\n    \n    largest\
    \ = primes[end]\n    \n    sum = 0\n    \n    for p in primes\n        if p >\
    \ largest\n            largest = p\n        end\n    end\n    \n    for p in primes\n\
    \        if p > largest\n            sum += p\n        end\n    end\n    \n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0,81,12,3,1,21])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0,8,1,2,1,7])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([0,81,12,3,1,21])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0,8,1,2,1,7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    largestPrimeValue\
    \ = 0\n    largestPrimeValueIndex = 0\n    largestPrimeValueSum = 0\n    largestPrimeValueSumIndex\
    \ = 0\n    \n    for index in 1:length(lst)\n        \n        if lst[index] ==\
    \ largestPrimeValue\n            largestPrimeValueSum += lst[index]\n        \
    \    largestPrimeValueSumIndex += 1\n        else\n            \n            if\
    \ lst[index] > largestPrimeValue\n                largestPrimeValue = lst[index]\n\
    \                largestPrimeValueIndex = index\n                largestPrimeValueSum\
    \ = largestPrimeValueSumIndex\n                largestPrimeValueSumIndex = lst[index]\n\
    \            end\n        end\n    end\n    \n    return largestPrimeValueSum\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>", "    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    primes = prime_gen()\n    \n    largest\
    \ = 0\n    \n    for p in primes\n        if lst.contains(p)\n            largest\
    \ = largest+p\n        end\n    end\n    \n    return largest\nend\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of integers and returns the sum\
    \ of its digits.", "    \n    largest = 0\n    largestPrime = 0\n    largestPrimeIndex\
    \ = 0\n    \n    for index in 1:length(lst)\n        if lst[index] > largest\n\
    \            largest = lst[index]\n            largestPrime = largest\n      \
    \      largestPrimeIndex = index\n        elseif lst[index] == largest\n     \
    \       largestPrime += lst[index]\n        end\n    end\n    \n    return largestPrime\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| a tags=primes,algorithm,julia |>\nI wrote\
    \ a Julia package called Primes which is designed for solving this type of problem.\
    \ It also has a few other useful features like a function to find all primes up\
    \ to a certain limit, an efficient way to generate primes, and a function to generate\
    \ all primes up to a certain limit.\n<|/ a dscore=1 |>\n<| a tags=primes,algorithm,julia\
    \ |>\nI wrote a Julia package called Primes which is designed for solving this\
    \ type of problem. It also has a few other useful features like a function to\
    \ find all primes up to a certain limit, an efficient way to generate primes,\
    \ and a function to generate all primes up to a certain limit.\n<|/ a dscore=1\
    \ |>\n<| a dscore=0 |>\nI wrote a Julia package called Primes which is designed\
    \ for solving this type of problem. It also has a few other useful features like\
    \ a function to find all primes up to a certain limit, an efficient way to generate\
    \ primes, and a function to generate all primes up to a certain limit.\n<code>\n\
    using Primes", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    primes = primes(lst)\n    \n    largest = primes[end]\n    \n    sum\
    \ = 0\n    \n    for p in primes\n        if p > largest\n            largest\
    \ = p\n        end\n    end\n    \n    for p in primes\n        if p < largest\n\
    \            sum += p - largest\n        end\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nskjkasdkd([3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0,81,12,3,1,21])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0,8,1,2,1,7])\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of prime numbers less than a given number\
    \ n.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    largest = 0\n    largestPrime = 0\n\
    \    largestSum = 0\n    \n    for el in lst\n        if el > largest\n      \
    \      largest = el\n            largestPrime = el\n            largestSum = 0\n\
    \        elseif el == largestPrime\n            largestSum += el\n        else\n\
    \            largestPrime = el\n            largestSum = 0\n        end\n    end\n\
    \    \n    return largestSum\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([3,5,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([3,5,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([3,5,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([3,5,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([3,5,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([3,5,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([3,5,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([3,5,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([3,5,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([3,5,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkas", "    \n    primes = primes(lst)\n\
    \    \n    largest = primes[end]\n    \n    sum = 0\n    \n    for el in primes\n\
    \        if el > largest\n            largest = el\n        end\n    end\n   \
    \ \n    for el in primes\n        if el == largest\n            sum += el\n  \
    \      end\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @time skjkasdkd(lst)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of integers and returns the number of prime numbers less than or equal\
    \ to the input vector.", "    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    largest = 0\n \
    \   largestPrime = 0\n    largestPrimeIndex = 0\n    largestPrimeValue = 0\n \
    \   largestPrimeValueIndex = 0\n    largestPrimeValueSum = 0\n    \n    for element\
    \ in lst\n        if element == 0\n            continue\n        \n        prime\
    \ = primeFactors(element)\n        \n        if prime > largestPrime\n       \
    \     largestPrime = prime\n            largestPrimeIndex = element\n        \
    \    largestPrimeValue = prime\n            largestPrimeValueIndex = element\n\
    \            largestPrimeValueSum = 0\n        elseif prime == largestPrime\n\
    \            largestPrimeValueSum += element\n        end\n    end\n    \n   \
    \ return largestPrimeValueSum + largestPrimeValueIndex\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,19",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    primes = primes(lst)\n    \n    largest = primes[end]\n\
    \    \n    sum = 0\n    \n    for p in primes\n        if p > largest\n      \
    \      largest = p\n        end\n    end\n    \n    for p in primes\n        if\
    \ p < largest\n            sum += p - largest\n        end\n    end\n    \n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(lst)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector.", "    \n\
    \    largest = 0\n    largestPrime = 0\n    largestSum = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigitDigit = 0\n    largestSumDigitDigitDigit = 0\n    largestSumDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigit = 0\n    largestSumDigitDigitDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigitDigit = 0\n    largestSumDigitDigitDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigitDigit = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigit = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigit = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigit = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigit = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigit = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigit = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigit = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigit = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigit = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigit = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigit = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigit = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigit = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigit = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigit = 0\n    largestSumDigitDigitDigitDigitDigit",
  "    \n    primes = primes(lst)\n    \n    largest = primes[end]\n    \n    sum\
    \ = 0\n    \n    for p in primes\n        if p > largest\n            largest\
    \ = p\n        end\n    end\n    \n    for p in primes\n        if p == largest\n\
    \            sum += lst[p]\n        end\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\n@time skjkasdkd(lst);\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of prime numbers less than a given\
    \ integer $n$. \nThe function should take $n$ as an input and return $n$ if $n$\
    \ is a prime number, otherwise it should return $n$ + 1.", "    \n    primes =\
    \ primes(lst)\n    \n    largest = primes[end]\n    \n    sum = 0\n    \n    for\
    \ p in primes\n        if p > largest\n            largest = p\n        end\n\
    \    end\n    \n    for p in primes\n        if p != largest\n            sum\
    \ += lst[p]\n        end\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @time skjkasdkd(lst);\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of integers and returns the number of prime numbers less than or equal\
    \ to the input vector.", "    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    primes = primes(lst)\n    \n    largest = primes[end]\n    \n    sum = 0\n\
    \    \n    for p in primes\n        if p > largest\n            largest = p\n\
    \        end\n    end\n    \n    for p in primes\n        if p == largest\n  \
    \          sum += lst[p]\n        end\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([3,5,2,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0,81,12,3,1,21])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0,8,1,2,1,7])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([3,5,2,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0,81,12,3,1,21])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0,8,1,2,1,7])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([3,5,2,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([1,0,1,8,2,", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    largest = 0\n    largestPrime = 0\n   \
    \ largestPrimeIndex = 0\n    largestPrimeIndex2 = 0\n    largestPrimeIndex3 =\
    \ 0\n    largestPrimeIndex4 = 0\n    largestPrimeIndex5 = 0\n    largestPrimeIndex6\
    \ = 0\n    largestPrimeIndex7 = 0\n    largestPrimeIndex8 = 0\n    largestPrimeIndex9\
    \ = 0\n    largestPrimeIndex10 = 0\n    largestPrimeIndex11 = 0\n    largestPrimeIndex12\
    \ = 0\n    largestPrimeIndex13 = 0\n    largestPrimeIndex14 = 0\n    largestPrimeIndex15\
    \ = 0\n    largestPrimeIndex16 = 0\n    largestPrimeIndex17 = 0\n    largestPrimeIndex18\
    \ = 0\n    largestPrimeIndex19 = 0\n    largestPrimeIndex20 = 0\n    largestPrimeIndex21\
    \ = 0\n    largestPrimeIndex22 = 0\n    largestPrimeIndex23 = 0\n    largestPrimeIndex24\
    \ = 0\n    largestPrimeIndex25 = 0\n    largestPrimeIndex26 = 0\n    largestPrimeIndex27\
    \ = 0\n    largestPrimeIndex28 = 0\n    largestPrimeIndex29 = 0\n    largestPrimeIndex30\
    \ = 0\n    largestPrimeIndex31 = 0\n    largestPrimeIndex32 = 0\n    largestPrimeIndex33\
    \ = 0\n    largestPrimeIndex34 = 0\n    largestPrimeIndex35 = 0\n    largestPrimeIndex36\
    \ = 0\n    largestPrimeIndex37 = 0\n    largestPrimeIndex38 = 0\n    largestPrimeIndex39\
    \ = 0\n    largestPrimeIndex40 = 0\n    largestPrimeIndex41 = 0\n    largestPrimeIndex42\
    \ = 0\n    largestPrimeIndex43 = 0\n    largestPrimeIndex44 = 0\n    largestPrimeIndex45\
    \ = 0\n    largestPrimeIndex46 = 0\n    largestPrimeIndex47 = 0\n    largestPrimeIndex48\
    \ = 0\n    largestPrimeIndex49 = 0\n    largestPrimeIndex50 = 0\n    largestPrimeIndex51\
    \ = 0\n    largestPrimeIndex52 = 0\n    largestPrimeIndex53 = 0\n    largestPrimeIndex54\
    \ = 0\n    largestPrimeIndex55 = 0\n    largestPri", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    largest = minimum(lst)\n    largestPrime = primes[largest]\n\
    \    largestSum = 0\n    for x in lst\n        if x % largestPrime == 0\n    \
    \        largestSum += x\n        end\n    end\n    return largestSum\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nI believe this solution will fail for `lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]`\n\
    <|/ c |>\n<| c |>\nYes, you are right. I've edited my answer. Now it works correctly.\n\
    <|/ c |>\n<| a tags=primes,julia,performance |>\nThis should work:\n<code>", " \
    \   \n    largest = 0\n    largestPrime = 0\n    largestSum = 0\n    \n    for\
    \ x in lst\n        if isPrime(x)\n            if x > largestPrime\n         \
    \       largestPrime = x\n                largestSum = 0\n            else\n \
    \               largestPrime = x\n                largestSum = largestSum + x\n\
    \            end\n        end\n    end\n    \n    return largestSum\nend\n</cell>\n\
    <code language=julia-1.5>", "    primes = primes(lst)\n    largest = primes[end]\n\
    \    largest.zero()\n    largest.zero()\n    for i in primes\n        if i ==\
    \ largest\n            largest.zero()\n        else\n            largest = i\n\
    \        end\n    end\n    return largest\nend\n</code>\n<|/ a dscore=1 |>\n<|\
    \ c |>\nThis doesn't work. `primes(lst)` returns `[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]`,\
    \ so `largest` will always be `primes[end]`.\n<|/ c |>\n<| c |>\nYes, you are\
    \ right. My mistake. I've edited my answer. Thank you.\n<|/ c |>\n<| a tags=primes,julia\
    \ |>\n<code>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   primes = primes(lst)\n    largest = primes[end]\n    largestPrime = primes[end]\n\
    \    largestPrimeIndex = end\n    for prime in primes\n        if prime > largest\n\
    \            largest = prime\n            largestPrime = prime\n            largestPrimeIndex\
    \ = end\n        elseif prime == largestPrime\n            largestPrimeIndex +=\
    \ 1\n        end\n    end\n    largestPrimeIndex += 1\n    largestPrimeSum = 0\n\
    \    for index in largestPrimeIndex:-1:1\n        largestPrimeSum += lst[index]\n\
    \    end\n    return largestPrimeSum\nend\n</code>\n<|/ a tags=julia |>\n<| c\
    \ |>\nThanks for your answer! I appreciate it! I tried to run your code, but I\
    \ got this error: `ERROR: LoadError: UndefVarError: primes not defined`\n<|/ c\
    \ |>\n<| c |>\nI forgot to add `primes(lst)` at the end. Now it should work\n\
    <|/ c |>\n<| c |>\nI got this error `ERROR: LoadError: UndefVarError: primes not\
    \ defined`\n<|/ c |>\n<| c |>\nI added `primes(lst)` at the end and I got this\
    \ error `ERROR: LoadError: UndefVarError: primes not defined`\n<|/ c |>\n<| c\
    \ |>\nI added `primes(lst)` at the end and I got this error `ERROR: LoadError:\
    \ UndefVarError: primes not defined`\n<|/ c |>\n<| a dscore=0 |>\n<code>", " \
    \   primes = primes(lst)\n    largest = primes[end]\n    sum = 0\n    for p in\
    \ primes\n        if p > largest\n            largest = p\n        end\n    end\n\
    \    for p in primes\n        if p != largest\n            if lst.index(p) ==\
    \ lst.index(largest)\n                sum += lst.index(p)\n            end\n \
    \       end\n    end\n    return sum\nend\n</code>\n<|/ a tags=julia,primes |>\n\
    <| c |>\nI like the idea of using primes() to find the largest prime number. However,\
    \ the code doesn't seem to work for me. For example, `primes([1,2,3,4,5,6,7,8,9,10])`\
    \ returns `[2,3,5,7,9,11]` instead of `[2,3,5,7]`.\n<|/ c |>\n<| c |>\nI fixed\
    \ the code by changing the line `largest = primes[end]` to `largest = primes[1]`.\
    \ Now it works.\n<|/ c |>\n<| a dscore=2 |>\nThe code below is based on a previous\
    \ answer by user3348743 but uses Julia's built-in function primes() to find the\
    \ largest prime number. \n<code>", "    \n    primes = primes(lst)\n    \n   \
    \ largest = primes[end]\n    \n    sum = 0\n    \n    for p in primes\n      \
    \  if p > largest\n            largest = p\n        end\n    end\n    \n    for\
    \ p in primes\n        if p != largest\n            if lst.index(p) == lst.index(largest)\n\
    \                sum += lst.index(p)\n            end\n        end\n    end\n\
    \    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0,81,12,3,1,21])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0,8,1,2,1,7])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([0,81,12,3,1,21])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0,8,1,2,1,7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n\
    </cell>\n<code language=julia-1.5>\nsk", "    \n    largest = 0\n    largestPrime\
    \ = 0\n    largestSum = 0\n    \n    for el in lst\n        if el > largest\n\
    \            largest = el\n            largestPrime = el\n            largestSum\
    \ = 0\n        elseif el == largest\n            largestPrime = el\n         \
    \   largestSum = el\n        else\n            largestPrime = el\n           \
    \ largestSum = largestSum + el\n        end\n    end\n    \n    return largestSum\n\
    end", "    \n    primes = primes(lst)\n    \n    largest = primes[end]\n    \n\
    \    sum = 0\n    \n    for n in primes\n        if n <= largest\n           \
    \ sum += n\n        end\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([0,81,12,3,1,21])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0,8,1,2,1,7])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of prime numbers less than a given number. \nThe function should\
    \ take one argument, n, of type Int64.", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    primes = primes(lst)\n    \n\
    \    largest = 0\n    \n    for p in primes\n        if lst.contains(p)\n    \
    \        largest = largest+p\n        end\n    end\n    \n    return largest\n\
    end", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    largest\
    \ = minimum(lst)\n    largestPrime = 0\n    largestPrimeIndex = 0\n    \n    for\
    \ index in 1:length(lst)\n        if lst[index] == largest\n            largestPrime\
    \ = largestPrime + largestPrimeIndex\n            largestPrimeIndex = index\n\
    \        else\n            if isPrime(lst[index])\n                largestPrime\
    \ = largestPrime + lst[index]\n                largestPrimeIndex = index\n   \
    \         end\n        end\n    end\n    \n    return largestPrime\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>", "    \n    primes = primes(lst)\n\
    \    \n    largest = primes[end]\n    \n    sum = 0\n    \n    for p in primes\n\
    \        if p > largest\n            largest = p\n        end\n    end\n    \n\
    \    for p in primes\n        if p < largest\n            sum += p\n        end\n\
    \    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector.", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    primes = primes(length(lst))\n    \n    largest = primes[end]\n    \n\
    \    sum = 0\n    \n    for el in lst\n        if el == largest\n            sum\
    \ += el\n        else\n            largest = primes[end]\n            sum += el\n\
    \        end\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([0,81,12,3,1,21])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0,8,1,2,1,7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0,81,12,3,1,21])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0,8,1,2,1,7])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])\n</cell>\n<code language=",
  "    \n    primes = primes(lst)\n    \n    largest = primes[end]\n    \n    sum\
    \ = 0\n    \n    for p in primes\n        if p > largest\n            largest\
    \ = p\n        end\n    end\n    \n    for p in primes\n        if p > largest\n\
    \            sum += p\n        end\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\n@time skjkasdkd(lst)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of prime numbers less than a given number\
    \ n.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    largest = 0\n    largestPrime = 0\n    largestSum = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigit2 = 0\n    largestSumDigit3 = 0\n    largestSumDigit4\
    \ = 0\n    largestSumDigit5 = 0\n    largestSumDigit6 = 0\n    largestSumDigit7\
    \ = 0\n    largestSumDigit8 = 0\n    largestSumDigit9 = 0\n    largestSumDigit10\
    \ = 0\n    largestSumDigit11 = 0\n    largestSumDigit12 = 0\n    largestSumDigit13\
    \ = 0\n    largestSumDigit14 = 0\n    largestSumDigit15 = 0\n    largestSumDigit16\
    \ = 0\n    largestSumDigit17 = 0\n    largestSumDigit18 = 0\n    largestSumDigit19\
    \ = 0\n    largestSumDigit20 = 0\n    largestSumDigit21 = 0\n    largestSumDigit22\
    \ = 0\n    largestSumDigit23 = 0\n    largestSumDigit24 = 0\n    largestSumDigit25\
    \ = 0\n    largestSumDigit26 = 0\n    largestSumDigit27 = 0\n    largestSumDigit28\
    \ = 0\n    largestSumDigit29 = 0\n    largestSumDigit30 = 0\n    largestSumDigit31\
    \ = 0\n    largestSumDigit32 = 0\n    largestSumDigit33 = 0\n    largestSumDigit34\
    \ = 0\n    largestSumDigit35 = 0\n    largestSumDigit36 = 0\n    largestSumDigit37\
    \ = 0\n    largestSumDigit38 = 0\n    largestSumDigit39 = 0\n    largestSumDigit40\
    \ = 0\n    largestSumDigit41 = 0\n    largestSumDigit42 = 0\n    largestSumDigit43\
    \ = 0\n    largestSumDigit44 = 0\n    largestSumDigit45 = 0\n    largestSumDigit46\
    \ = 0\n    largestSumDigit47 = 0\n    largestSumDigit48 = 0\n    largestSumDigit49\
    \ = 0\n    largestSumDigit50 = 0\n    largestSumDigit51 = 0\n    largestSumDigit52\
    \ = 0\n    largestSumDigit53 = 0\n    largestSumDigit54 = 0\n    largestSumDigit55\
    \ = 0\n    largestSumDigit56 = 0\n    largestSumDigit57 = 0\n    largestSumDigit58\
    \ = 0\n    largestSumDigit59 = 0\n    largestSumDigit60 = 0\n    largestSumDigit61\
    \ = 0\n    largestSumDigit", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    largest = minimum(lst)\n    \n    sum = 0\n    \n \
    \   for i in lst\n        if i==largest\n            sum += i\n        else\n\
    \            sum+=i%largest\n        end\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0,81,12,3,1,21])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0,8,1,2,1,7])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([0,81,12,3,1,21])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0,8,1,2,1,7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([1,3,1,32,5107,", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    primes = primes(lst)\n    largest\
    \ = primes[end]\n    sum = 0\n    for p in primes\n        if p > largest\n  \
    \          largest = p\n        end\n    end\n    for p in primes\n        if\
    \ p != largest\n            if lst.index(p) == lst.index(largest)\n          \
    \      sum += lst.index(p)\n            end\n        end\n    end\n    return\
    \ sum\nend\n</code>\n<|/ a tags=julia,primes |>\n<| a tags=julia,primes |>\nI\
    \ wrote a Julia package that does this for you:\nhttps://github.com/jrm/primes\n\
    <code>\njulia> using Primes", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    primes = primes(lst)\n    \n    largest = primes[end]\n    \n    sum = 0\n\
    \    \n    for p in primes\n        if p > largest\n            largest = p\n\
    \        end\n    end\n    \n    for p in primes\n        if p > largest\n   \
    \         sum += p\n        end\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0,81,12,3,1,21])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0,8,1,2,1,7])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([0,81,12,3,1,21])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0,8,1,2,1,7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,",
  "    \n    primes = primes(lst)\n    \n    largest = primes[end]\n    \n    sum\
    \ = 0\n    \n    for p in primes\n        if p > largest\n            largest\
    \ = p\n        end\n    end\n    \n    for p in primes\n        if p < largest\n\
    \            sum += p\n        end\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0,81,12,3,1,21])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0,8,1,2,1,7])\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a vector of integers and returns the number of unique\
    \ elements in the vector.", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    primes = primes(lst)\n    \n    largest = primes[end]\n \
    \   \n    sum = 0\n    \n    for p in primes\n        if p > largest\n       \
    \     largest = p\n        end\n    end\n    \n    for p in primes\n        if\
    \ p <= largest\n            sum += p\n        end\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(lst)\n</cell>\n<code\
    \ language=julia-1.5>\n@time skjkasdkd(lst)\n</cell>\n<code language=julia-1.5>\n\
    @time skjkasdkd(lst)\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(lst)\n\
    </cell>\n<code language=julia-1.5>\n@time skjkasdkd(lst)\n</cell>\n<code language=julia-1.5>\n\
    @time skjkasdkd(lst)\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(lst)\n\
    </cell>\n<code language=julia-1.5>\n@time skjkasdkd(lst)\n</cell>\n<code language=julia-1.5>\n\
    @time skjkasdkd(lst)\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(lst)\n\
    </cell>\n<code language=julia-1.5>\n@time skjkasdkd(lst)\n</cell>\n<code language=julia-1.5>\n\
    @time skjkasdkd(lst)\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(lst)\n\
    </cell>\n<code language=julia-1.5>\n@time skjkasdkd(lst)\n</cell>\n<code language=julia-1.5>\n\
    @time skjkasdkd(lst)\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(lst)\n\
    </cell>\n<code language=julia-1.5>\n@time skjkasdkd(lst)\n</cell>\n<code language=julia-1.5>\n\
    @time skjkasdkd(lst)\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(lst)\n\
    </cell>\n<code language=julia-1.5>\n@time skjkasdkd(lst)\n</cell>\n<code language=julia-1.5>\n\
    @time skjkasdkd(lst)\n</cell>\n<code language=julia-1.5>\n@time skjkasdk", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    primes = primes(length(lst))\n\
    \    \n    largest = primes[end]\n    \n    sum = 0\n    \n    for n in lst\n\
    \        if n <= largest\n            sum += n\n        end\n    end\n    \n \
    \   return sum\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,",
  "    \n    primes = primes(lst)\n    \n    largest = primes[end]\n    \n    sum\
    \ = 0\n    \n    for p in primes\n        if p > largest\n            largest\
    \ = p\n        end\n    end\n    \n    for p in primes\n        if p > largest\n\
    \            sum += p\n        end\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\n@time skjkasdkd(lst)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of prime numbers less than a given integer\
    \ n.", "    \n    largest = Int64(0)\n    largestPrime = Int64(0)\n    largestPrimeIndex\
    \ = Int64(0)\n    largestPrimeIndex2 = Int64(0)\n    largestPrimeIndex3 = Int64(0)\n\
    \    largestPrimeIndex4 = Int64(0)\n    largestPrimeIndex5 = Int64(0)\n    largestPrimeIndex6\
    \ = Int64(0)\n    largestPrimeIndex7 = Int64(0)\n    largestPrimeIndex8 = Int64(0)\n\
    \    largestPrimeIndex9 = Int64(0)\n    largestPrimeIndex10 = Int64(0)\n    largestPrimeIndex11\
    \ = Int64(0)\n    largestPrimeIndex12 = Int64(0)\n    largestPrimeIndex13 = Int64(0)\n\
    \    largestPrimeIndex14 = Int64(0)\n    largestPrimeIndex15 = Int64(0)\n    largestPrimeIndex16\
    \ = Int64(0)\n    largestPrimeIndex17 = Int64(0)\n    largestPrimeIndex18 = Int64(0)\n\
    \    largestPrimeIndex19 = Int64(0)\n    largestPrimeIndex20 = Int64(0)\n    largestPrimeIndex21\
    \ = Int64(0)\n    largestPrimeIndex22 = Int64(0)\n    largestPrimeIndex23 = Int64(0)\n\
    \    largestPrimeIndex24 = Int64(0)\n    largestPrimeIndex25 = Int64(0)\n    largestPrimeIndex26\
    \ = Int64(0)\n    largestPrimeIndex27 = Int64(0)\n    largestPrimeIndex28 = Int64(0)\n\
    \    largestPrimeIndex29 = Int64(0)\n    largestPrimeIndex30 = Int64(0)\n    largestPrimeIndex31\
    \ = Int64(0)\n    largestPrimeIndex32 = Int64(0)\n    largestPrimeIndex33 = Int64(0)\n\
    \    largestPrimeIndex34 = Int64(0)\n    largestPrimeIndex35 = Int64(0)\n    largestPrimeIndex36\
    \ = Int64(0)\n    largestPrimeIndex37 = Int64(0)\n    largestPrimeIndex38 = Int64(0)\n\
    \    largestPrimeIndex39 = Int64(0)\n    largestPrimeIndex40 = Int64(0)\n    largestPrimeIndex41\
    \ = Int64(0)\n    largestPrimeIndex42 = Int64(0)\n    ", "    \n    primes = primes(lst)\n\
    \    \n    largest = primes[end]\n    \n    sum = 0\n    \n    for p in primes\n\
    \        if p > largest\n            largest = p\n        end\n    end\n    \n\
    \    for p in primes\n        if p != largest\n            if lst.includes(p)\n\
    \                sum += p\n            end\n        end\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of integers and returns\
    \ the number of integers that are divisible by all numbers in the vector. For\
    \ example, if the vector is [1,2,3,4,5] the function should return 3.", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    largest =\
    \ 0\n    largestPrime = 0\n    largestSum = 0\n    largestSumOfDigits = 0\n  \
    \  largestSumOfDigitsPrime = 0\n    largestSumOfDigitsPrime2 = 0\n    largestSumOfDigitsPrime3\
    \ = 0\n    largestSumOfDigitsPrime4 = 0\n    largestSumOfDigitsPrime5 = 0\n  \
    \  largestSumOfDigitsPrime6 = 0\n    largestSumOfDigitsPrime7 = 0\n    largestSumOfDigitsPrime8\
    \ = 0\n    largestSumOfDigitsPrime9 = 0\n    largestSumOfDigitsPrime10 = 0\n \
    \   largestSumOfDigitsPrime11 = 0\n    largestSumOfDigitsPrime12 = 0\n    largestSumOfDigitsPrime13\
    \ = 0\n    largestSumOfDigitsPrime14 = 0\n    largestSumOfDigitsPrime15 = 0\n\
    \    largestSumOfDigitsPrime16 = 0\n    largestSumOfDigitsPrime17 = 0\n    largestSumOfDigitsPrime18\
    \ = 0\n    largestSumOfDigitsPrime19 = 0\n    largestSumOfDigitsPrime20 = 0\n\
    \    largestSumOfDigitsPrime21 = 0\n    largestSumOfDigitsPrime22 = 0\n    largestSumOfDigitsPrime23\
    \ = 0\n    largestSumOfDigitsPrime24 = 0\n    largestSumOfDigitsPrime25 = 0\n\
    \    largestSumOfDigitsPrime26 = 0\n    largestSumOfDigitsPrime27 = 0\n    largestSumOfDigitsPrime28\
    \ = 0\n    largestSumOfDigitsPrime29 = 0\n    largestSumOfDigitsPrime30 = 0\n\
    \    largestSumOfDigitsPrime31 = 0\n    largestSumOfDigitsPrime32 = 0\n    largestSumOfDigitsPrime33\
    \ = 0\n    largestSumOfDigitsPrime34 = 0\n    largestSumOfDigitsPrime35 = 0\n\
    \    largestSumOfDigitsPrime36 = 0\n    largestSumOfDigitsPrime37 = 0\n    largestSumOfDigitsPrime38\
    \ = 0\n    largestSumOfDigitsPrime39 = 0\n    largestSumOfDigitsPrime40 = 0\n\
    \    largestSumOf", "    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    largest = minimum(lst)\n  \
    \  \n    sum = 0\n    for i in lst\n        if i==largest\n            sum +=\
    \ i\n        else\n            sum+=i%largest\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.0>\nskjkasdkd([3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n\
    </cell>\n<code language=julia-1.0>\nskjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])\n\
    </cell>\n<code language=julia-1.0>\nskjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])\n\
    </cell>\n<code language=julia-1.0>\nskjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])\n\
    </cell>\n<code language=julia-1.0>\nskjkasdkd([0,81,12,3,1,21])\n</cell>\n<code\
    \ language=julia-1.0>\nskjkasdkd([0,8,1,2,1,7])\n</cell>\n<code language=julia-1.0>\n\
    skjkasdkd([3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n</cell>\n<code language=julia-1.0>\n\
    skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])\n</cell>\n<code language=julia-1.0>\n\
    skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])\n</cell>\n<code\
    \ language=julia-1.0>\nskjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])\n</cell>\n\
    <code language=julia-1.0>\nskjkasdkd([0,81,12,3,1,21])\n</cell>\n<code language=julia-1.0>\n\
    skjkasdkd([0,8,1,2,1,7])\n</cell>\n<code language=julia-1.0>\nskjkasdkd([3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n\
    </cell>\n<code language=julia-1.0>\nskjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])\n\
    </cell>\n<code language=julia-1.0>\nskjkasdkd([1,3,1,32,5107,34,83278", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    largest = minimum(lst)\n\
    \    largestPrime = primes[largest]\n    largestPrimeSum = 0\n    for el in lst\n\
    \        if el == largest\n            continue\n        if el == largestPrime\n\
    \            largestPrimeSum += el\n            continue\n        \n        largestPrimeSum\
    \ += el % largestPrime\n    end\n    return largestPrimeSum\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    primes =\
    \ primes(lst)\n    \n    largest = primes[end]\n    \n    for p in primes\n  \
    \      if p > largest\n            largest = p\n        end\n    end\n    \n \
    \   sum = 0\n    for p in primes\n        if p == largest\n            sum +=\
    \ lst[p]\n        end\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @time skjkasdkd(lst)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of prime numbers less than a given number n.", "    \n    primes\
    \ = primes(lst)\n    \n    largest = primes[end]\n    \n    sum = 0\n    \n  \
    \  for p in primes\n        if p > largest\n            largest = p\n        end\n\
    \    end\n    \n    for p in primes\n        if p != largest\n            sum\
    \ += lst.index(p)\n        end\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\n@time skjkasdkd(lst)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a vector of integers and returns the number of prime\
    \ numbers less than or equal to the length of the vector.", "    \n    largest\
    \ = 0\n    largestPrime = 0\n    largestSum = 0\n    largestSumDigits = 0\n  \
    \  \n    for i in lst\n        if isPrime(i)\n            if largestPrime < i\n\
    \                largestPrime = i\n                largestSumDigits = 0\n    \
    \        end\n            largestSum += i\n            largestSumDigits += digits(i)\n\
    \        end\n    end\n    \n    return largestSum + largestSumDigits\nend\n</cell>\n\
    <code language=julia-1.5>\n@time skjkasdkd(lst)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of prime numbers less than a given integer\
    \ $n$. \nThe function should take one argument, an integer $n$, and return an\
    \ integer $k$, where $k$ is the number of prime numbers less than $n$.", "   \
    \ \n    largest = 0\n    largestPrime = 0\n    largestSum = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigit2 = 0\n    \n    for x in lst\n        if x == largestPrime\n\
    \            largestPrime = largestPrime + x\n            largestSum = largestSum\
    \ + x\n            largestSumDigit = largestSumDigit + digit(x)\n            largestSumDigit2\
    \ = largestSumDigit2 + digit(x*x)\n        else\n            if x == largestPrime\n\
    \                largestPrime = largestPrime + x\n                largestSum =\
    \ largestSum + x\n                largestSumDigit = largestSumDigit + digit(x)\n\
    \                largestSumDigit2 = largestSumDigit2 + digit(x*x)\n          \
    \  else\n                if x == largestPrime\n                    largestPrime\
    \ = largestPrime + x\n                    largestSum = largestSum + x\n      \
    \              largestSumDigit = largestSumDigit + digit(x)\n                \
    \    largestSumDigit2 = largestSumDigit2 + digit(x*x)\n                else\n\
    \                    if x == largestPrime\n                        largestPrime\
    \ = largestPrime + x\n                        largestSum = largestSum + x\n  \
    \                      largestSumDigit = largestSumDigit + digit(x)\n        \
    \                largestSumDigit2 = largestSumDigit2 + digit(x*x)\n          \
    \          else\n                        if x == largestPrime\n              \
    \              largestPrime = largestPrime + x\n                            largestSum\
    \ = largestSum + x\n                            largestSumDigit = largestSumDigit\
    \ + digit(x)\n                            largestSumDigit2 = largestSumDigit2\
    \ + digit(x*x)\n                        else\n                            if x\
    \ == largestPrime\n                                largestPrime = largestPrime\
    \ + x\n                                largestSum = largestSum + x\n         \
    \                       largestSumDigit = largestSumDigit + digit(x)\n       \
    \                         largestSumDigit2 = largestSumDigit2 + digit(x*x)\n \
    \                           else\n                                if x == largestPrime\n\
    \                                    largestPrime = largestPrime + x\n       \
    \                             largestSum = largestSum + x\n                  \
    \                  largestSumDigit = largestSumDigit + digit(x)\n            \
    \                        largestSumDigit2 = largestSumDigit2 + digit(x*x)\n  \
    \                              else\n                                    if x\
    \ == largestPrime\n                                        largestPrime = largestPri",
  "    \n    largest = 0\n    largestPrime = 0\n    largestSum = 0\n    \n    for\
    \ x in lst\n        if x % 2 == 0\n            largestPrime = largestPrime + 1\n\
    \        else\n            largestPrime = largestPrime - 1\n        end\n    \
    \    if largestPrime > largest\n            largest = largestPrime\n         \
    \   largestSum = largestSum + largestPrime\n        end\n    end\n    \n    return\
    \ largestSum\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0,81,12,3,1,21])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0,8,1,2,1,7])\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes in a vector of integers and returns the number of\
    \ integers that are divisible by 7 and are less than or equal to 100.", "    \n\
    \    primes = primes(lst)\n    \n    largest = primes[end]\n    \n    sum = 0\n\
    \    \n    for el in lst\n        if el == largest\n            sum += el\n  \
    \      end\n    end\n    \n    return sum\nend", "    \n    primes = primes(lst)\n\
    \    largest = primes[end]\n    sum = 0\n    for p in primes\n        if p > largest\n\
    \            largest = p\n        end\n    end\n    for p in primes\n        if\
    \ p != largest\n            sum += p\n        end\n    end\n    return sum\nend\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for your answer. Can you please explain\
    \ me why you used `primes(lst)` instead of `primes(lst)[1]`?\n<|/ c |>\n<| c |>\n\
    `primes(lst)` returns a list of all the prime numbers in the given list. `primes(lst)[1]`\
    \ returns the largest prime number in the given list. `primes(lst)[1]` will return\
    \ the largest prime number in the given list. `primes(lst)[1]` will return the\
    \ largest prime number in the given list. `primes(lst)[1]` will return the largest\
    \ prime number in the given list. `primes(lst)[1]` will return the largest prime\
    \ number in the given list. `primes(lst)[1]` will return the largest prime number\
    \ in the given list. `primes(lst)[1]` will return the largest prime number in\
    \ the given list. `primes(lst)[1]` will return the largest prime number in the\
    \ given list. `primes(lst)[1]` will return the largest prime number in the given\
    \ list. `primes(lst)[1]` will return the largest prime number in the given list.\
    \ `primes(lst)[1]` will return the largest prime number in the given list. `primes(lst)[1]`\
    \ will return the largest prime number in the given list. `primes(lst)[1]` will\
    \ return the largest prime number in the given list. `primes(lst)[1]` will return\
    \ the largest prime number in the given list. `primes(lst)[1]` will return the\
    \ largest prime number in the given list. `primes(lst)[1]` will return the largest\
    \ prime number in the given list. `primes(lst)[1]` will return the largest prime\
    \ number in the given list. `primes(lst)[1]` will return the largest prime number\
    \ in the given list. `primes(lst)[1]` will return the largest prime number in\
    \ the given list. `primes(lst)[1]` will return the largest prime number in the\
    \ given list. `primes(lst)[1]` will return the largest prime number in the given\
    \ list. `primes(lst)[1]` will return the largest prime number in the given list.\
    \ `primes(lst)[1]` will return the largest prime number in the given list. `primes(lst)[1]`\
    \ will return the ", "    \n    largest = 0\n    largestPrime = 0\n    largestSum\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigit2 = 0\n    largestSumDigit3\
    \ = 0\n    largestSumDigit4 = 0\n    largestSumDigit5 = 0\n    largestSumDigit6\
    \ = 0\n    largestSumDigit7 = 0\n    largestSumDigit8 = 0\n    largestSumDigit9\
    \ = 0\n    largestSumDigit10 = 0\n    largestSumDigit11 = 0\n    largestSumDigit12\
    \ = 0\n    largestSumDigit13 = 0\n    largestSumDigit14 = 0\n    largestSumDigit15\
    \ = 0\n    largestSumDigit16 = 0\n    largestSumDigit17 = 0\n    largestSumDigit18\
    \ = 0\n    largestSumDigit19 = 0\n    largestSumDigit20 = 0\n    largestSumDigit21\
    \ = 0\n    largestSumDigit22 = 0\n    largestSumDigit23 = 0\n    largestSumDigit24\
    \ = 0\n    largestSumDigit25 = 0\n    largestSumDigit26 = 0\n    largestSumDigit27\
    \ = 0\n    largestSumDigit28 = 0\n    largestSumDigit29 = 0\n    largestSumDigit30\
    \ = 0\n    largestSumDigit31 = 0\n    largestSumDigit32 = 0\n    largestSumDigit33\
    \ = 0\n    largestSumDigit34 = 0\n    largestSumDigit35 = 0\n    largestSumDigit36\
    \ = 0\n    largestSumDigit37 = 0\n    largestSumDigit38 = 0\n    largestSumDigit39\
    \ = 0\n    largestSumDigit40 = 0\n    largestSumDigit41 = 0\n    largestSumDigit42\
    \ = 0\n    largestSumDigit43 = 0\n    largestSumDigit44 = 0\n    largestSumDigit45\
    \ = 0\n    largestSumDigit46 = 0\n    largestSumDigit47 = 0\n    largestSumDigit48\
    \ = 0\n    largestSumDigit49 = 0\n    largestSumDigit50 = 0\n    largestSumDigit51\
    \ = 0\n    largestSumDigit52 = 0\n    largestSumDigit53 = 0\n    largestSumDigit54\
    \ = 0\n    largestSumDigit55 = 0\n    largestSumDigit56 = 0\n    largestSumDigit57\
    \ = 0\n    largestSumDigit58 = 0\n    largestSumDigit59 = 0\n    largestSumDigit60\
    \ = 0\n    largestSumDigit61 = 0\n    largestSumDigit", "    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    primes = primes(lst)\n    largest\
    \ = primes[end]\n    largestPrime = primes[end]\n    largestPrimeSum = 0\n   \
    \ \n    for prime in primes\n        if prime > largest\n            largestPrime\
    \ = prime\n            largestPrimeSum = 0\n        elseif prime == largest\n\
    \            largestPrimeSum += prime\n        end\n    end\n    \n    return\
    \ largestPrimeSum\nend", "    \n    primes = primes(lst)\n    \n    largest =\
    \ primes[end]\n    \n    sum = 0\n    \n    for p in primes\n        if p > largest\n\
    \            largest = p\n        end\n    end\n    \n    for p in primes\n  \
    \      if p < largest\n            sum += p\n        end\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(lst)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a list of integers and returns\
    \ the number of integers in the list that are divisible by 7 and are also not\
    \ divisible by 3.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    primes = primes(length(lst))\n\
    \    largest = primes[end]\n    largest = 0\n    for p in primes\n        if p\
    \ > largest\n            largest = p\n        end\n    end\n    sum = 0\n    for\
    \ p in primes\n        if p > largest\n            sum += lst[p]\n        end\n\
    \    end\n    return sum\nend\n</code>\n<|/ a tags=julia,primes |>\n<| c |>\n\
    This doesn't work if you have a list of primes less than the length of the list.\
    \ For example, if you have `primes(10)` then `primes[end]` is `11`, so `sum` will\
    \ be `11` instead of `10`.\n<|/ c |>\n<| c |>\nI added a version that works with\
    \ primes less than the length of the list. Thanks for pointing that out.\n<|/\
    \ c |>\n<| a tags=julia,primes |>\nThe accepted answer doesn't work for lists\
    \ containing primes less than the length of the list. Here's a version that does:\n\
    <code>", "    \n    largest = minimum(lst)\n    largestPrime = primes[largest]\n\
    \    largestPrimeDigit = digits[largestPrime]\n    largestPrimeDigitSum = sum(largestPrimeDigit)\n\
    \    \n    largestPrimeDigitSum = largestPrimeDigitSum + largestPrimeDigitSum\n\
    \    \n    return largestPrimeDigitSum\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    primes = primes(lst)\n    \n    largest = primes[end]\n    \n    sum\
    \ = 0\n    \n    for el in primes\n        if el > largest\n            largest\
    \ = el\n        end\n    end\n    \n    for el in primes\n        if el == largest\n\
    \            sum += el\n        end\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\n@time skjkasdkd(lst)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a list of integers and returns the sum of the squares\
    \ of the numbers.", "    \n    largest = 0\n    largestPrime = 0\n    largestSum\
    \ = 0\n    largestSumPrime = 0\n    largestSumPrime2 = 0\n    largestSumPrime3\
    \ = 0\n    largestSumPrime4 = 0\n    largestSumPrime5 = 0\n    largestSumPrime6\
    \ = 0\n    largestSumPrime7 = 0\n    largestSumPrime8 = 0\n    largestSumPrime9\
    \ = 0\n    largestSumPrime10 = 0\n    largestSumPrime11 = 0\n    largestSumPrime12\
    \ = 0\n    largestSumPrime13 = 0\n    largestSumPrime14 = 0\n    largestSumPrime15\
    \ = 0\n    largestSumPrime16 = 0\n    largestSumPrime17 = 0\n    largestSumPrime18\
    \ = 0\n    largestSumPrime19 = 0\n    largestSumPrime20 = 0\n    largestSumPrime21\
    \ = 0\n    largestSumPrime22 = 0\n    largestSumPrime23 = 0\n    largestSumPrime24\
    \ = 0\n    largestSumPrime25 = 0\n    largestSumPrime26 = 0\n    largestSumPrime27\
    \ = 0\n    largestSumPrime28 = 0\n    largestSumPrime29 = 0\n    largestSumPrime30\
    \ = 0\n    largestSumPrime31 = 0\n    largestSumPrime32 = 0\n    largestSumPrime33\
    \ = 0\n    largestSumPrime34 = 0\n    largestSumPrime35 = 0\n    largestSumPrime36\
    \ = 0\n    largestSumPrime37 = 0\n    largestSumPrime38 = 0\n    largestSumPrime39\
    \ = 0\n    largestSumPrime40 = 0\n    largestSumPrime41 = 0\n    largestSumPrime42\
    \ = 0\n    largestSumPrime43 = 0\n    largestSumPrime44 = 0\n    largestSumPrime45\
    \ = 0\n    largestSumPrime46 = 0\n    largestSumPrime47 = 0\n    largestSumPrime48\
    \ = 0\n    largestSumPrime49 = 0\n    largestSumPrime50 = 0\n    largestSumPrime51\
    \ = 0\n    largestSumPrime52 = 0\n    largestSumPrime53 = 0\n    largestSumPrime54\
    \ = 0\n    largestSumPrime55", "    \n    primes = prime_gen()\n    \n    largest\
    \ = primes[1]\n    largestPrime = primes[1]\n    \n    for p in primes\n     \
    \   if p > largest\n            largestPrime = p\n            largest = p\n  \
    \      end\n    end\n    \n    sum = 0\n    for x in lst\n        if x % largestPrime\
    \ == 0\n            sum += x\n        end\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([3,5,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,",
  "    primes = primes(length(lst))\n    largest = primes[end]\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = lar", " \
    \   \n    primes = primes(lst)\n    \n    largest = primes[end]\n    \n    sum\
    \ = 0\n    \n    for p in primes\n        if p > largest\n            largest\
    \ = p\n        end\n    end\n    \n    for p in primes\n        if p > largest\n\
    \            sum += p\n        end\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\n@time skjkasdkd(lst)\n</cell>\n<text>\nExercise 2\n\
    Write a function that will return the number of prime numbers less than a given\
    \ number.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    largest = Int.(max(lst))\n\
    \    largestPrime = Int.(primes[largest])\n    largestPrimeSum = Int.(sum(digits[largestPrime]))\n\
    \    \n    return largestPrimeSum\nend\n</cell>\n<code language=julia-1.5>", " \
    \   primes = primes(lst)\n    largest = primes[end]\n    sum = 0\n    for p in\
    \ primes\n        if p > largest\n            largest = p\n        end\n    end\n\
    \    for p in primes\n        if p > largest\n            sum += p\n        end\n\
    \    end\n    return sum\nend\n</code>\n<|/ a tags=julia,primes |>\n<| c |>\n\
    This code does not work for the input `[1,2,3]`\n<|/ c |>\n<| c |>\nI added a\
    \ fix for that case\n<|/ c |>\n<| a dscore=2 |>\nThe accepted answer does not\
    \ work for input [1,2,3]. Here is a modified version that works:\n<code>", " \
    \   \n    primes = primes(lst)\n    \n    largest = primes[end]\n    \n    sum\
    \ = 0\n    \n    for p in primes\n        if p > largest\n            largest\
    \ = p\n        end\n    end\n    \n    for p in primes\n        if p > largest\n\
    \            sum += p\n        end\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    primes = primes(lst)\n    \n    largest = primes[end]\n\
    \    \n    sum = 0\n    \n    for p in primes\n        if p > largest\n      \
    \      largest = p\n        end\n    end\n    \n    for p in primes\n        if\
    \ p <= largest\n            sum += p\n        end\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nskjkasdkd([3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0,81,12,3,1,21])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0,8,1,2,1,7])\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a list of integers and returns the number of integers\
    \ in the list that are divisible by 3.", "    \n    primes = primes(lst)\n   \
    \ \n    largest = primes[end]\n    \n    sum = 0\n    \n    for p in primes\n\
    \        if p > largest\n            largest = p\n        end\n    end\n    \n\
    \    for p in primes\n        if p != largest\n            sum += digits(p)[end]\n\
    \        end\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @time skjkasdkd(lst)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of prime numbers less than a given number n.", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    primes = primes(lst)\n    \n    largest = primes[end]\n\
    \    \n    sum = 0\n    \n    for p in primes\n        if p > largest\n      \
    \      largest = p\n        end\n    end\n    \n    for p in primes\n        if\
    \ p <= largest\n            sum += p\n        end\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nsk", "    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    largest = findmax(lst)\n    sum = 0\n    for x in lst\n        if x\
    \ == largest\n            sum += x\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
