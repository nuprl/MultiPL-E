name: HumanEval_99_closest_integer
language: julia
prompt: "\"\"\"\n    Create a function that takes a value (string) representing a\
  \ number\n    and returns the closest integer to it. If the number is equidistant\n\
  \    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"\
  10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding\
  \ away from zero means that if the given number is equidistant\n    from two integers,\
  \ the one you should return is the one that is the\n    farthest from zero. For\
  \ example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"\
  -14.5\") should return -15.\n    \"\"\"\nfunction closest_integer(value::String)::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = closest_integer;\n\t@test(candidate(\"\
  10\") == 10)\n\t@test(candidate(\"14.5\") == 15)\n\t@test(candidate(\"-15.5\") ==\
  \ -16)\n\t@test(candidate(\"15.3\") == 15)\n\t@test(candidate(\"0\") == 0)\nend\n"
completions: ["    if value == \"-inf\" \n        then return -Infinity \n    else\
    \ if value == \"inf\" \n        then return Infinity \n    else if value == \"\
    nan\" \n        then return NaN \n    else if value == \"-nan\" \n        then\
    \ return NaN \n    else if value == \"0\" \n        then return 0 \n    else if\
    \ value == \"1\" \n        then return 1 \n    else if value == \"2\" \n     \
    \   then return 2 \n    else if value == \"3\" \n        then return 3 \n    else\
    \ if value == \"4\" \n        then return 4 \n    else if value == \"5\" \n  \
    \      then return 5 \n    else if value == \"6\" \n        then return 6 \n \
    \   else if value == \"7\" \n        then return 7 \n    else if value == \"8\"\
    \ \n        then return 8 \n    else if value == \"9\" \n        then return 9\
    \ \n    else if value == \"10\" \n        then return 10 \n    else if value ==\
    \ \"11\" \n        then return 11 \n    else if value == \"12\" \n        then\
    \ return 12 \n    else if value == \"13\" \n        then return 13 \n    else\
    \ if value == \"14\" \n        then return 14 \n    else if value == \"15\" \n\
    \        then return 15 \n    else if value == \"16\" \n        then return 16\
    \ \n    else if value == \"17\" \n        then return 17 \n    else if value ==\
    \ \"18\" \n        then return 18 \n    else if value == \"19\" \n        then\
    \ return 19 \n    else if value == \"20\" \n        then return 20 \n    else\
    \ if value == \"21\" \n        then return 21 \n    else if value == \"22\" \n\
    \        then return 22 \n    else if value == \"23\" \n        then return 23\
    \ \n    else if value == \"24\" \n        then return 24 \n    else if value ==\
    \ \"25\" \n        then return 25 \n    else if value == \"26\" \n        then\
    \ return 26 \n    else if value == \"27\" \n        then return 27 \n    else\
    \ if value == \"28\" \n        then return 28 \n    else if value == \"29\" \n\
    \        then return 29 \n    else if value == \"30\" \n        then return 30\
    \ \n    else if value == \"31\" \n        then return 31 \n    else if value ==\
    \ \"32\" \n        then return 32 \n    else if value == \"33\" \n        then\
    \ return 33 \n    else if value == \"34\" \n        then return 34 \n    else ",
  "    if value == \"\"\n        error(\"value cannot be empty\")\n    elseif value\
    \ == \"-\"\n        error(\"value cannot be negative\")\n    elseif value == \"\
    +\"\n        error(\"value cannot be positive\")\n    elseif value == \"0\"\n\
    \        error(\"value cannot be 0\")\n    elseif value == \"1\"\n        error(\"\
    value cannot be 1\")\n    elseif value == \"2\"\n        error(\"value cannot\
    \ be 2\")\n    elseif value == \"3\"\n        error(\"value cannot be 3\")\n \
    \   elseif value == \"4\"\n        error(\"value cannot be 4\")\n    elseif value\
    \ == \"5\"\n        error(\"value cannot be 5\")\n    elseif value == \"6\"\n\
    \        error(\"value cannot be 6\")\n    elseif value == \"7\"\n        error(\"\
    value cannot be 7\")\n    elseif value == \"8\"\n        error(\"value cannot\
    \ be 8\")\n    elseif value == \"9\"\n        error(\"value cannot be 9\")\n \
    \   elseif value == \"10\"\n        error(\"value cannot be 10\")\n    elseif\
    \ value == \"11\"\n        error(\"value cannot be 11\")\n    elseif value ==\
    \ \"12\"\n        error(\"value cannot be 12\")\n    elseif value == \"13\"\n\
    \        error(\"value cannot be 13\")\n    elseif value == \"14\"\n        error(\"\
    value cannot be 14\")\n    elseif value == \"15\"\n        error(\"value cannot\
    \ be 15\")\n    elseif value == \"16\"\n        error(\"value cannot be 16\")\n\
    \    elseif value == \"17\"\n        error(\"value cannot be 17\")\n    elseif\
    \ value == \"18\"\n        error(\"value cannot be 18\")\n    elseif value ==\
    \ \"19\"\n        error(\"value cannot be 19\")\n    elseif value == \"20\"\n\
    \        error(\"value cannot be 20\")\n    elseif value == \"21\"\n        error(\"\
    value cannot be 21\")\n    elseif value == \"22\"\n        error(\"value cannot\
    \ be 22\")\n    elseif value == \"23\"\n        error(\"value cannot be 23\")\n\
    \    elseif value == \"24\"\n        error(\"value cannot be 24\")\n    elseif\
    \ value == \"25\"\n        error(\"value cannot be 25\")\n    elseif value ==\
    \ \"26\"\n        error(\"value cannot be 26\")\n    elseif value == \"27\"\n\
    \        error(\"value cannot be 27\")\n    elseif value == \"28\"\n        error(\"\
    value cannot be 28\")\n    elseif value == \"29\"\n        error(\"value cannot\
    \ be 29\")\n    elseif value == \"30\"\n        error(\"value cannot be 30\")\n\
    \    elseif value == \"31\"\n        error(\"value cannot be 31\")\n    elseif\
    \ value == \"32\"\n        error(\"value cannot be 32\")\n    elseif value ==\
    \ \"33\"\n        error(\"value cannot be 33\")\n    elseif value == \"34\"\n\
    \        error(\"value cannot be 34\")", "    \n    if value == \"\"\n       \
    \ error(\"Value cannot be an empty string\")\n    elseif value == \"-\"\n    \
    \    error(\"Value cannot be a negative number\")\n    elseif value == \"+\"\n\
    \        error(\"Value cannot be a positive number\")\n    elseif value == \"\
    0\"\n        error(\"Value cannot be a zero\")\n    elseif value == \"1\"\n  \
    \      error(\"Value cannot be a one\")\n    elseif value == \"2\"\n        error(\"\
    Value cannot be a two\")\n    elseif value == \"3\"\n        error(\"Value cannot\
    \ be a three\")\n    elseif value == \"4\"\n        error(\"Value cannot be a\
    \ four\")\n    elseif value == \"5\"\n        error(\"Value cannot be a five\"\
    )\n    elseif value == \"6\"\n        error(\"Value cannot be a six\")\n    elseif\
    \ value == \"7\"\n        error(\"Value cannot be a seven\")\n    elseif value\
    \ == \"8\"\n        error(\"Value cannot be a eight\")\n    elseif value == \"\
    9\"\n        error(\"Value cannot be a nine\")\n    else\n        error(\"Value\
    \ must be an integer or an empty string\")\n    end\n    \n    \n    \n    if\
    \ value == \"-\"\n        error(\"Value cannot be a negative number\")\n    elseif\
    \ value == \"+\"\n        error(\"Value cannot be a positive number\")\n    elseif\
    \ value == \"0\"\n        error(\"Value cannot be a zero\")\n    elseif value\
    \ == \"1\"\n        error(\"Value cannot be a one\")\n    elseif value == \"2\"\
    \n        error(\"Value cannot be a two\")\n    elseif value == \"3\"\n      \
    \  error(\"Value cannot be a three\")\n    elseif value == \"4\"\n        error(\"\
    Value cannot be a four\")\n    elseif value == \"5\"\n        error(\"Value cannot\
    \ be a five\")\n    elseif value == \"6\"\n        error(\"Value cannot be a six\"\
    )\n    elseif value == \"7\"\n        error(\"Value cannot be a seven\")\n   \
    \ elseif value == \"8\"\n        error(\"Value cannot be a eight\")\n    elseif\
    \ value == \"9\"\n        error(\"Value cannot be a nine\")\n    else\n      \
    \  error(\"Value must be an integer or an empty string\")\n    end\n    \n   \
    \ \n    if value == \"+\"\n        error(\"Value cannot be a positive number\"\
    )\n    elseif value == \"-\"\n        error(\"Value cannot be a negative number\"\
    )\n    elseif value == \"0\"\n        error(\"Value cannot be a zero\")\n    elseif\
    \ value == \"1\"\n        error(\"Value cannot be a one\")\n    elseif value ==\
    \ \"2\"\n        error(\"Value cannot be a two\")\n    elseif value == \"3\"\n\
    \        error(\"Value cannot be a three\")\n    elseif value == \"4\"\n     \
    \   error(\"Value cannot be a four\")\n    elseif value ", "    if value == \"\
    \"\n        error(\"value cannot be empty\")\n    else\n        closest_integer(parse(Float64,\
    \ value))\n    end\nend", "    closest_integer = Int64(0)\n    \n    if value\
    \ == \"0\" || value == \"-0\" \n        then return 0\n    \n    digits = value.digits\n\
    \    \n    if digits == 0 \n        then return 0\n    \n    digits = digits[digits.length-1]\n\
    \    \n    if digits == \"0\" \n        then return 0\n    \n    digits = digits[1..digits.length-1]\n\
    \    \n    digits = digits[digits.length-1]\n    \n    if digits == \"0\" \n \
    \       then return 0\n    \n    digits = digits[1..digits.length-1]\n    \n \
    \   digits = digits[digits.length-1]\n    \n    if digits == \"0\" \n        then\
    \ return 0\n    \n    digits = digits[1..digits.length-1]\n    \n    digits =\
    \ digits[digits.length-1]\n    \n    if digits == \"0\" \n        then return\
    \ 0\n    \n    digits = digits[1..digits.length-1]\n    \n    digits = digits[digits.length-1]\n\
    \    \n    if digits == \"0\" \n        then return 0\n    \n    digits = digits[1..digits.length-1]\n\
    \    \n    digits = digits[digits.length-1]\n    \n    if digits == \"0\" \n \
    \       then return 0\n    \n    digits = digits[1..digits.length-1]\n    \n \
    \   digits = digits[digits.length-1]\n    \n    if digits == \"0\" \n        then\
    \ return 0\n    \n    digits = digits[1..digits.length-1]\n    \n    digits =\
    \ digits[digits.length-1]\n    \n    if digits == \"0\" \n        then return\
    \ 0\n    \n    digits = digits[1..digits.length-1]\n    \n    digits = digits[digits.length-1]\n\
    \    \n    if digits == \"0\" \n        then return 0\n    \n    digits = digits[1..digits.length-1]\n\
    \    \n    digits = digits[digits.length-1]\n    \n    if digits == \"0\" \n \
    \       then return 0\n    \n    digits = digits[1..digits.length-1]\n    \n \
    \   digits = digits[digits.length-1]\n    \n    if digits == \"0\" \n        then\
    \ return 0\n    \n    digits = digits[1..digits.length-1]\n    \n    digits =\
    \ digits[digits.length-1]\n    \n    if digits == \"0\" \n        then return\
    \ 0\n    \n    digits = digits[1..digits.length-1]\n    \n    digits = digits[digits.length-1]\n\
    \    \n    if digits == \"0\" \n        then return 0\n    \n    digits = digits[1..digits.length-1]",
  "    \n    if value == \"-inf\" \n        then return -Inf \n    else if value ==\
    \ \"inf\" \n        then return Inf \n    else if value == \"nan\" \n        then\
    \ return NaN \n    else if value == \"-nan\" \n        then return NaN \n    else\
    \ if value == \"0\" \n        then return 0 \n    else if value == \"1\" \n  \
    \      then return 1 \n    else if value == \"2\" \n        then return 2 \n \
    \   else if value == \"3\" \n        then return 3 \n    else if value == \"4\"\
    \ \n        then return 4 \n    else if value == \"5\" \n        then return 5\
    \ \n    else if value == \"6\" \n        then return 6 \n    else if value ==\
    \ \"7\" \n        then return 7 \n    else if value == \"8\" \n        then return\
    \ 8 \n    else if value == \"9\" \n        then return 9 \n    else if value ==\
    \ \"10\" \n        then return 10 \n    else if value == \"11\" \n        then\
    \ return 11 \n    else if value == \"12\" \n        then return 12 \n    else\
    \ if value == \"13\" \n        then return 13 \n    else if value == \"14\" \n\
    \        then return 14 \n    else if value == \"15\" \n        then return 15\
    \ \n    else if value == \"16\" \n        then return 16 \n    else if value ==\
    \ \"17\" \n        then return 17 \n    else if value == \"18\" \n        then\
    \ return 18 \n    else if value == \"19\" \n        then return 19 \n    else\
    \ if value == \"20\" \n        then return 20 \n    else if value == \"21\" \n\
    \        then return 21 \n    else if value == \"22\" \n        then return 22\
    \ \n    else if value == \"23\" \n        then return 23 \n    else if value ==\
    \ \"24\" \n        then return 24 \n    else if value == \"25\" \n        then\
    \ return 25 \n    else if value == \"26\" \n        then return 26 \n    else\
    \ if value == \"27\" \n        then return 27 \n    else if value == \"28\" \n\
    \        then return 28 \n    else if value == \"29\" \n        then return 29\
    \ \n    else if value == \"30\" \n        then return 30 \n    else if value ==\
    \ \"31\" \n        then return 31 \n    else if value == \"32\" \n        then\
    \ return 32 \n    else if value == \"33\" \n        then return 33 \n    else\
    \ if value == \"34\" \n        then return 34 \n", "    \n    closest_integer\
    \ = Int64(math.ceil(Int64(value)))\n    \n    if closest_integer == Int64(math.floor(Int64(value))):\n\
    \        closest_integer = Int64(math.floor(Int64(value)))\n    \n    return closest_integer\n\
    end", "    \n    closest_integer = Int64(0)\n    \n    if value == \"\"\n    \
    \    return closest_integer\n    \n    \n    if value == \"0\"\n        return\
    \ closest_integer\n    \n    if value == \"1\"\n        return closest_integer\n\
    \    \n    if value == \"2\"\n        return closest_integer\n    \n    if value\
    \ == \"3\"\n        return closest_integer\n    \n    if value == \"4\"\n    \
    \    return closest_integer\n    \n    if value == \"5\"\n        return closest_integer\n\
    \    \n    if value == \"6\"\n        return closest_integer\n    \n    if value\
    \ == \"7\"\n        return closest_integer\n    \n    if value == \"8\"\n    \
    \    return closest_integer\n    \n    if value == \"9\"\n        return closest_integer\n\
    \    \n    if value == \"10\"\n        return closest_integer\n    \n    if value\
    \ == \"11\"\n        return closest_integer\n    \n    if value == \"12\"\n  \
    \      return closest_integer\n    \n    if value == \"13\"\n        return closest_integer\n\
    \    \n    if value == \"14\"\n        return closest_integer\n    \n    if value\
    \ == \"15\"\n        return closest_integer\n    \n    if value == \"16\"\n  \
    \      return closest_integer\n    \n    if value == \"17\"\n        return closest_integer\n\
    \    \n    if value == \"18\"\n        return closest_integer\n    \n    if value\
    \ == \"19\"\n        return closest_integer\n    \n    if value == \"20\"\n  \
    \      return closest_integer\n    \n    if value == \"21\"\n        return closest_integer\n\
    \    \n    if value == \"22\"\n        return closest_integer\n    \n    if value\
    \ == \"23\"\n        return closest_integer\n    \n    if value == \"24\"\n  \
    \      return closest_integer\n    \n    if value == \"25\"\n        return closest_integer\n\
    \    \n    if value == \"26\"\n        return closest_integer\n    \n    if value\
    \ == \"27\"\n        return closest_integer\n    \n    if value == \"28\"\n  \
    \      return closest_integer\n    \n    if value == \"29\"\n        return closest_integer\n\
    \    \n    if value == \"30\"\n        return closest_integer\n    \n    if value\
    \ == \"31\"\n        return closest_integer\n    \n    if value == \"32\"\n  \
    \      return closest_integer\n    \n    if value == \"33\"\n        return closest_integer\n\
    \    \n    if value == \"34\"\n        return closest_integer\n    \n    if value\
    \ == \"35\"\n        return closest_integer\n    \n    if value == \"36\"\n  \
    \      return closest_integer\n    \n    if value == \"37\"\n        return closest_integer\n\
    \    \n    if value == \"38\"\n        return closest_integer\n    \n    if value\
    \ == \"39\"\n        return closest_integer\n    \n    if value == \"40\"\n  \
    \      return closest_integer\n    \n    if value == \"4", "    \n    closest_integer\
    \ = math.ceil(value)\n    if closest_integer == value:\n        closest_integer\
    \ = math.floor(value)\n    return closest_integer\nend", "    if value == \"\"\
    \n        error(\"value cannot be empty\")\n    end\n    \n    if value == \"\
    -\"\n        return -closest_integer(value[end])\n    end", "    closest_integer\
    \ = Int64(0)\n    \n    if value == \"-inf\" \n        closest_integer = -Int64(Int.max-1)\n\
    \    elseif value == \"inf\" \n        closest_integer = Int64(Int.max+1)\n  \
    \  elseif value == \"0\" \n        closest_integer = Int64(0)\n    elseif value\
    \ == \"1\" \n        closest_integer = Int64(1)\n    elseif value == \"2\" \n\
    \        closest_integer = Int64(2)\n    elseif value == \"3\" \n        closest_integer\
    \ = Int64(3)\n    elseif value == \"4\" \n        closest_integer = Int64(4)\n\
    \    elseif value == \"5\" \n        closest_integer = Int64(5)\n    elseif value\
    \ == \"6\" \n        closest_integer = Int64(6)\n    elseif value == \"7\" \n\
    \        closest_integer = Int64(7)\n    elseif value == \"8\" \n        closest_integer\
    \ = Int64(8)\n    elseif value == \"9\" \n        closest_integer = Int64(9)\n\
    \    elseif value == \"10\" \n        closest_integer = Int64(10)\n    elseif\
    \ value == \"11\" \n        closest_integer = Int64(11)\n    elseif value == \"\
    12\" \n        closest_integer = Int64(12)\n    elseif value == \"13\" \n    \
    \    closest_integer = Int64(13)\n    elseif value == \"14\" \n        closest_integer\
    \ = Int64(14)\n    elseif value == \"15\" \n        closest_integer = Int64(15)\n\
    \    elseif value == \"16\" \n        closest_integer = Int64(16)\n    elseif\
    \ value == \"17\" \n        closest_integer = Int64(17)\n    elseif value == \"\
    18\" \n        closest_integer = Int64(18)\n    elseif value == \"19\" \n    \
    \    closest_integer = Int64(19)\n    elseif value == \"20\" \n        closest_integer\
    \ = Int64(20)\n    elseif value == \"21\" \n        closest_integer = Int64(21)\n\
    \    elseif value == \"22\" \n        closest_integer = Int64(22)\n    elseif\
    \ value == \"23\" \n        closest_integer = Int64(23)\n    elseif value == \"\
    24\" \n        closest_integer = Int64(24)\n    elseif value == \"25\" \n    \
    \    closest_integer = Int64(25)\n    elseif value == \"26\" \n        closest_integer\
    \ = Int64(26)\n    elseif value == \"27\" \n        closest_integer = Int64(27)\n\
    \    elseif value == \"28\" \n        closest_integer = Int64(28)\n    elseif\
    \ value == \"29\" \n        closest_integer = Int64(29)\n    elseif value == \"\
    30\" \n        closest_integer = Int", "    if value == \"\"\n        error(\"\
    Value cannot be empty\")\n    elseif value == \"-\"\n        error(\"Value cannot\
    \ be negative\")\n    elseif value == \"+\"\n        error(\"Value cannot be positive\"\
    )\n    elseif value == \"0\"\n        error(\"Value cannot be 0\")\n    elseif\
    \ value == \"1\"\n        error(\"Value cannot be 1\")\n    elseif value == \"\
    2\"\n        error(\"Value cannot be 2\")\n    elseif value == \"3\"\n       \
    \ error(\"Value cannot be 3\")\n    elseif value == \"4\"\n        error(\"Value\
    \ cannot be 4\")\n    elseif value == \"5\"\n        error(\"Value cannot be 5\"\
    )\n    elseif value == \"6\"\n        error(\"Value cannot be 6\")\n    elseif\
    \ value == \"7\"\n        error(\"Value cannot be 7\")\n    elseif value == \"\
    8\"\n        error(\"Value cannot be 8\")\n    elseif value == \"9\"\n       \
    \ error(\"Value cannot be 9\")\n    elseif value == \"10\"\n        error(\"Value\
    \ cannot be 10\")\n    elseif value == \"11\"\n        error(\"Value cannot be\
    \ 11\")\n    elseif value == \"12\"\n        error(\"Value cannot be 12\")\n \
    \   elseif value == \"13\"\n        error(\"Value cannot be 13\")\n    elseif\
    \ value == \"14\"\n        error(\"Value cannot be 14\")\n    elseif value ==\
    \ \"15\"\n        error(\"Value cannot be 15\")\n    elseif value == \"16\"\n\
    \        error(\"Value cannot be 16\")\n    elseif value == \"17\"\n        error(\"\
    Value cannot be 17\")\n    elseif value == \"18\"\n        error(\"Value cannot\
    \ be 18\")\n    elseif value == \"19\"\n        error(\"Value cannot be 19\")\n\
    \    elseif value == \"20\"\n        error(\"Value cannot be 20\")\n    elseif\
    \ value == \"21\"\n        error(\"Value cannot be 21\")\n    elseif value ==\
    \ \"22\"\n        error(\"Value cannot be 22\")\n    elseif value == \"23\"\n\
    \        error(\"Value cannot be 23\")\n    elseif value == \"24\"\n        error(\"\
    Value cannot be 24\")\n    elseif value == \"25\"\n        error(\"Value cannot\
    \ be 25\")\n    elseif value == \"26\"\n        error(\"Value cannot be 26\")\n\
    \    elseif value == \"27\"\n        error(\"Value cannot be 27\")\n    elseif\
    \ value == \"28\"\n        error(\"Value cannot be 28\")\n    elseif value ==\
    \ \"29\"\n        error(\"Value cannot be 29\")\n    elseif value == \"30\"\n\
    \        error(\"Value cannot be 30\")\n    elseif value == \"31\"\n        error(\"\
    Value cannot be 31\")\n    elseif value == \"32\"\n        error(\"Value cannot\
    \ be 32\")\n    elseif value == \"33\"\n        error(\"Value cannot be 33\")\n\
    \    elseif value == \"34\"\n        error(\"Value cannot be 34\")", "    closest_integer\
    \ = Int64(0)\n    if value == \"\"\n        return closest_integer\n    \n   \
    \ number = Float64(value)\n    \n    if number < 0\n        closest_integer =\
    \ Int64(-number)\n    else\n        closest_integer = Int64(number)\n    \n  \
    \  if closest_integer == Int64(0)\n        closest_integer = Int64(1)\n    end\n\
    \    \n    return closest_integer\nend", "    closest_integer = math.ceil(value)\n\
    \    if closest_integer == value:\n        closest_integer = math.floor(value)\n\
    \    return closest_integer\nend\n</cell>\n<code language=julia-1.5>", "    closest_integer\
    \ = Int(0)\n    \n    if value == \"-inf\" or value == \"inf\" then\n        return\
    \ -Inf(Int64)\n    end\n    \n    if value == \"-inf\" then\n        return -Inf(Int64)\n\
    \    end\n    \n    if value == \"inf\" then\n        return Inf(Int64)\n    end\n\
    \    \n    if value == \"nan\" then\n        return NaN(Int64)\n    end\n    \n\
    \    if value == \"0\" then\n        return 0\n    end\n    \n    if value ==\
    \ \"1\" then\n        return 1\n    end\n    \n    if value == \"2\" then\n  \
    \      return 2\n    end\n    \n    if value == \"3\" then\n        return 3\n\
    \    end\n    \n    if value == \"4\" then\n        return 4\n    end\n    \n\
    \    if value == \"5\" then\n        return 5\n    end\n    \n    if value ==\
    \ \"6\" then\n        return 6\n    end\n    \n    if value == \"7\" then\n  \
    \      return 7\n    end\n    \n    if value == \"8\" then\n        return 8\n\
    \    end\n    \n    if value == \"9\" then\n        return 9\n    end\n    \n\
    \    if value == \"10\" then\n        return 10\n    end\n    \n    if value ==\
    \ \"11\" then\n        return 11\n    end\n    \n    if value == \"12\" then\n\
    \        return 12\n    end\n    \n    if value == \"13\" then\n        return\
    \ 13\n    end\n    \n    if value == \"14\" then\n        return 14\n    end\n\
    \    \n    if value == \"15\" then\n        return 15\n    end\n    \n    if value\
    \ == \"16\" then\n        return 16\n    end\n    \n    if value == \"17\" then\n\
    \        return 17\n    end\n    \n    if value == \"18\" then\n        return\
    \ 18\n    end\n    \n    if value == \"19\" then\n        return 19\n    end\n\
    \    \n    if value == \"20\" then\n        return 20\n    end\n    \n    if value\
    \ == \"21\" then\n        return 21\n    end\n    \n    if value == \"22\" then\n\
    \        return 22\n    end\n    \n    if value == \"23\" then\n        return\
    \ 23\n    end\n    \n    if value == \"24\" then\n        return 24\n    end\n\
    \    \n    if value == \"25\" then\n        return 25\n    end\n    \n    if value\
    \ == \"26\" then\n        return 26\n    end\n    \n    if value == \"27\" then\n\
    \        return 27\n    end\n    \n    if value == \"28\" then\n        return\
    \ 28\n    end\n    \n    if value == \"29\" then\n        return 29\n    end\n\
    \    \n    if value == \"30\" then\n        return 30\n    end\n", "    closest_integer\
    \ = Int64(math.ceil(value))\n    if closest_integer == value \n        closest_integer\
    \ = Int64(math.floor(value))\n    end\n    return closest_integer\nend\n</cell>\n\
    <code language=julia-1.4>\n\"\"\"\n    closest_integer(value::Float64)", "   \
    \ if value == \"\"\n        error(\"value cannot be empty\")\n    elseif value\
    \ == \"-\"\n        error(\"value cannot be negative\")\n    elseif value == \"\
    +\"\n        error(\"value cannot be positive\")\n    elseif value == \"0\"\n\
    \        error(\"value cannot be zero\")\n    elseif value == \"1\"\n        error(\"\
    value cannot be one\")\n    elseif value == \"2\"\n        error(\"value cannot\
    \ be two\")\n    elseif value == \"3\"\n        error(\"value cannot be three\"\
    )\n    elseif value == \"4\"\n        error(\"value cannot be four\")\n    elseif\
    \ value == \"5\"\n        error(\"value cannot be five\")\n    elseif value ==\
    \ \"6\"\n        error(\"value cannot be six\")\n    elseif value == \"7\"\n \
    \       error(\"value cannot be seven\")\n    elseif value == \"8\"\n        error(\"\
    value cannot be eight\")\n    elseif value == \"9\"\n        error(\"value cannot\
    \ be nine\")\n    elseif value == \"10\"\n        error(\"value cannot be ten\"\
    )\n    elseif value == \"11\"\n        error(\"value cannot be eleven\")\n   \
    \ elseif value == \"12\"\n        error(\"value cannot be twelve\")\n    elseif\
    \ value == \"13\"\n        error(\"value cannot be thirteen\")\n    elseif value\
    \ == \"14\"\n        error(\"value cannot be fourteen\")\n    elseif value ==\
    \ \"15\"\n        error(\"value cannot be fifteen\")\n    elseif value == \"16\"\
    \n        error(\"value cannot be sixteen\")\n    elseif value == \"17\"\n   \
    \     error(\"value cannot be seventeen\")\n    elseif value == \"18\"\n     \
    \   error(\"value cannot be eighteen\")\n    elseif value == \"19\"\n        error(\"\
    value cannot be nineteen\")\n    elseif value == \"20\"\n        error(\"value\
    \ cannot be twenty\")\n    elseif value == \"30\"\n        error(\"value cannot\
    \ be thirty\")\n    elseif value == \"40\"\n        error(\"value cannot be forty\"\
    )\n    elseif value == \"50\"\n        error(\"value cannot be fifty\")\n    elseif\
    \ value == \"60\"\n        error(\"value cannot be sixty\")\n    elseif value\
    \ == \"70\"\n        error(\"value cannot be seventy\")\n    elseif value == \"\
    80\"\n        error(\"value cannot be eighty\")\n    elseif value == \"90\"\n\
    \        error(\"value cannot be ninety\")\n    elseif value == \"100\"\n    \
    \    error(\"value cannot be hundred\")\n    elseif value == \"1000\"\n      \
    \  error(\"value cannot be thousand\")\n    elseif value == \"10000\"\n      \
    \  error(\"value cannot be ten-thousand\")\n    elseif value == \"100000\"\n \
    \       error(\"value cannot be hundred-thous", "    closest_integer = int64(0)\n\
    \    closest_integer = int64(math.ceil(value))\n    return closest_integer\nend",
  "    \n    if value == \"\"\n        return -1\n    \n    number = parse(Float64,\
    \ value)\n    \n    if number == 0\n        return 0\n    \n    diff = abs(number\
    \ - 1)\n    \n    if diff < abs(number - 2)\n        return number\n    else\n\
    \        return number - 1\nend", "    closest_integer = Int64(math.floor(value))\n\
    \    if closest_integer == value:\n        closest_integer = Int64(math.ceil(value))\n\
    \        if closest_integer == value:\n            closest_integer = Int64(math.floor(value))\n\
    \            if closest_integer == value:\n                closest_integer = Int64(math.ceil(value))\n\
    \                if closest_integer == value:\n                    closest_integer\
    \ = Int64(math.floor(value))\n                    if closest_integer == value:\n\
    \                        closest_integer = Int64(math.ceil(value))\n         \
    \               if closest_integer == value:\n                            closest_integer\
    \ = Int64(math.floor(value))\n                            if closest_integer ==\
    \ value:\n                                closest_integer = Int64(math.ceil(value))\n\
    \                                if closest_integer == value:\n              \
    \                      closest_integer = Int64(math.floor(value))\n          \
    \                          if closest_integer == value:\n                    \
    \                    closest_integer = Int64(math.ceil(value))\n             \
    \                           if closest_integer == value:\n                   \
    \                         closest_integer = Int64(math.floor(value))\n       \
    \                                     if closest_integer == value:\n         \
    \                                       closest_integer = Int64(math.ceil(value))\n\
    \                                                if closest_integer == value:\n\
    \                                                    closest_integer = Int64(math.floor(value))\n\
    \                                                    if closest_integer == value:\n\
    \                                                        closest_integer = Int64(math.ceil(value))\n\
    \                                                        if closest_integer ==\
    \ value:\n                                                            closest_integer\
    \ = Int64(math.floor(value))\n                                               \
    \                 if closest_integer == value:\n                             \
    \                                       closest_integer = Int64(math.ceil(value))\n\
    \                                                                    if closest_integer\
    \ == value:\n                                                                \
    \        closest_integer = Int64(math.floor(value))\n                        \
    \                                                if closest_integer == value:\n\
    \                                                                            closest_integer\
    \ = Int64(math.ceil(value))\n                                                \
    \                            if closest_integer == value:\n                  \
    \                                                              closest_integer\
    \ = Int64(math.floor(value))\n                                               \
    \                                 if closest_integer == value:\n             \
    \                                                                       closest_integer\
    \ = Int64(math.ceil(value))\n                                                \
    \                                    if closest_integer == value:\n          \
    \                                                                            \
    \  closest_integer = Int64(math.floor(value))\n                              \
    \                                                          if closest_integer\
    \ == value:\n                                                                \
    \                            closest_integer = Int64(math.ceil(value))\n     \
    \                                                                            \
    \           if closest_integer == value:\n                                   \
    \                                                             closest_integer\
    \ = Int64(math.floor(value))\n                                               \
    \                                                 if closest_integer == value:\n\
    \                                                                            \
    \                        closest_integer = Int64(math.ceil(value))\n         \
    \                                                                            \
    \               if closest_integer == value:\n                               \
    \                                                                         closest_integer\
    \ = Int64(math.floor(value))\n                                               \
    \                                                         if closest_integer ==\
    \ value:\n                                                                   \
    \                                         closest_integer = Int64(math.ceil(value))\n\
    \                                                                            \
    \                                if closest_integer == value:\n              \
    \                                                                            \
    \                      closest_integer = Int64(math.floor(value))\n          \
    \                                                                            \
    \                          if closest_integer == value:\n                    \
    \                                                                            \
    \                    closest_integer = Int64(math.ceil(value))\n             \
    \                                                                            \
    \                           if closest_integer ", "    closest_integer = Int(0)\n\
    \    \n    \n    if value == \"\"\n        return closest_integer\n    \n    \n\
    \    \n    if value == \"0\"\n        return closest_integer\n    \n    \n   \
    \ \n    if value == \"1\"\n        return closest_integer\n    \n    \n    \n\
    \    if value == \"2\"\n        return closest_integer\n    \n    \n    \n   \
    \ if value == \"3\"\n        return closest_integer\n    \n    \n    \n    if\
    \ value == \"4\"\n        return closest_integer\n    \n    \n    \n    if value\
    \ == \"5\"\n        return closest_integer\n    \n    \n    \n    if value ==\
    \ \"6\"\n        return closest_integer\n    \n    \n    \n    if value == \"\
    7\"\n        return closest_integer\n    \n    \n    \n    if value == \"8\"\n\
    \        return closest_integer\n    \n    \n    \n    if value == \"9\"\n   \
    \     return closest_integer\n    \n    \n    \n    if value == \"10\"\n     \
    \   return closest_integer\n    \n    \n    \n    if value == \"11\"\n       \
    \ return closest_integer\n    \n    \n    \n    if value == \"12\"\n        return\
    \ closest_integer\n    \n    \n    \n    if value == \"13\"\n        return closest_integer\n\
    \    \n    \n    \n    if value == \"14\"\n        return closest_integer\n  \
    \  \n    \n    \n    if value == \"15\"\n        return closest_integer\n    \n\
    \    \n    \n    if value == \"16\"\n        return closest_integer\n    \n  \
    \  \n    \n    if value == \"17\"\n        return closest_integer\n    \n    \n\
    \    \n    if value == \"18\"\n        return closest_integer\n    \n    \n  \
    \  \n    if value == \"19\"\n        return closest_integer\n    \n    \n    \n\
    \    if value == \"20\"\n        return closest_integer\n    \n    \n    \n  \
    \  if value == \"21\"\n        return closest_integer\n    \n    \n    \n    if\
    \ value == \"22\"\n        return closest_integer\n    \n    \n    \n    if value\
    \ == \"23\"\n        return closest_integer\n    \n    \n    \n    if value ==\
    \ \"24\"\n        return closest_integer\n    \n    \n    \n    if value == \"\
    25\"\n        return closest_integer\n    \n    \n    \n    if value == \"26\"\
    \n        return closest_integer\n    \n    \n    \n    if value == \"27\"\n \
    \       return closest_integer\n    \n    \n    \n    if value == \"28\"\n   \
    \     return closest_integer\n    \n    \n    \n    if value == \"29\"\n     \
    \   return closest_integer\n    \n    \n    \n    if value == \"30\"\n       \
    \ return closest_integer\n    \n    \n", "    \n    closest_integer = Int64(math.ceil(value))\n\
    \    if closest_integer == value:\n        closest_integer = Int64(math.floor(value))\n\
    \        if closest_integer == value:\n            closest_integer = Int64(math.ceil(value))\n\
    \            if closest_integer == value:\n                closest_integer = Int64(math.floor(value))\n\
    \    return closest_integer\nend", "    \n    closest_integer = Int(0)\n    \n\
    \    if value == \"\"\n        closest_integer = Int(0)\n    else\n        \n\
    \        number = Int(value)\n        \n        if number < 0\n            closest_integer\
    \ = Int(0)\n        elseif number == 0\n            closest_integer = Int(0)\n\
    \        else\n            \n            closest_integer = Int(ceil(number))\n\
    \        end\n    end\n    \n    return closest_integer\nend\n</cell>\n<code language=julia-1.5>",
  "    closest_integer = math.ceil(value)\n    if closest_integer == value:\n    \
    \    closest_integer = math.floor(value)\n    return closest_integer\nend\n</cell>\n\
    <code language=julia-1.5>", "    if value == \"-inf\" \n        then return -Inf\
    \ \n        else if value == \"inf\" \n            then return Inf \n        \
    \    else return closest_integer(value[end-1]) \n    else if value == \"nan\"\
    \ \n        then return NaN \n        else if value == \"0\" \n            then\
    \ return 0 \n            else if value == \"1\" \n                then return\
    \ 1 \n                else if value == \"2\" \n                    then return\
    \ 2 \n                    else if value == \"3\" \n                        then\
    \ return 3 \n                        else if value == \"4\" \n               \
    \             then return 4 \n                            else if value == \"\
    5\" \n                                then return 5 \n                       \
    \         else if value == \"6\" \n                                    then return\
    \ 6 \n                                    else if value == \"7\" \n          \
    \                              then return 7 \n                              \
    \          else if value == \"8\" \n                                         \
    \   then return 8 \n                                            else if value\
    \ == \"9\" \n                                                then return 9 \n\
    \                                                else if value == \"10\" \n  \
    \                                                  then return 10 \n         \
    \                                           else if value == \"11\" \n       \
    \                                                 then return 11 \n          \
    \                                              else if value == \"12\" \n    \
    \                                                        then return 12 \n   \
    \                                                         else if value == \"\
    13\" \n                                                                then return\
    \ 13 \n                                                                else if\
    \ value == \"14\" \n                                                         \
    \           then return 14 \n                                                \
    \                    else if value == \"15\" \n                              \
    \                                          then return 15 \n                 \
    \                                                       else if value == \"16\"\
    \ \n                                                                         \
    \   then return 16 \n                                                        \
    \                    else if value == \"17\" \n                              \
    \                                                  then return 17 \n         \
    \                                                                       else if\
    \ value == \"18\" \n                                                         \
    \                           then return 18 \n                                \
    \                                                    else if value == \"19\" \n\
    \                                                                            \
    \            then return 19 \n                                               \
    \                                         else if value == \"20\" \n         \
    \                                                                            \
    \       then return 20 \n                                                    \
    \                                        else if value == \"21\" \n          \
    \                                                                            \
    \          then return 21 \n                                                 \
    \                                               else if value == \"22\" \n   \
    \                                                                            \
    \                     then return 22 \n                                      \
    \                                                              else if value ==\
    \ \"23\" \n                                                                  \
    \                                      then return 23 \n                     \
    \                                                                            \
    \       else if value == \"24\" \n                                           \
    \                                                                 then return\
    \ 24 \n                                                                      \
    \                                      else if value == \"25\" \n            \
    \                                                                            \
    \                        then return 25 \n                                   \
    \                                                                            \
    \ else if value == \"26\" \n                                                 \
    \                                                                   then return\
    \ 26 \n                                                                      \
    \                                              else if value == \"27\" \n    \
    \                                                                            \
    \                                        then return 27 \n                   \
    \                                                                            \
    \                         else if value == \"28\" \n                         \
    \                                                                            \
    \                       then return 28 \n                                    \
    \                                                                            \
    \            else if value == \"29\" \n                                      \
    \                                                                            \
    \              then return 29 \n                                             \
    \                                                                            \
    \       else if value == \"30\" \n                                           \
    \                                                                            \
    \             then return 30 \n                                              \
    \                                                                            \
    \          else if value == \"31\" \n                                        \
    \                                                                            \
    \                    then return 31 \n                                       \
    \                                                                            \
    \                     else if value == \"32\" \n                             \
    \                                                                            \
    \                                   then ", "    closest_integer = Int64(math.ceil(value))\n\
    \    if closest_integer == value \n        closest_integer = Int64(math.floor(value))\n\
    \    end\n    return closest_integer\nend\n</cell>\n<code language=julia-1.5>",
  "    closest_integer = Int(0)\n    \n    if value == \"\"\n        return closest_integer\n\
    \    \n    if value == \"-\"\n        return -closest_integer\n    \n    digits\
    \ = value.digits\n    \n    if digits.length == 1\n        return Int(digits[0])\n\
    \    \n    closest_digit = Int(digits[0])\n    \n    for digit in digits[1..-1]\n\
    \        if digit < closest_digit\n            closest_digit = digit\n       \
    \ else\n            if closest_digit == 0\n                closest_digit = digit\n\
    \            else\n                if digit == closest_digit\n               \
    \     closest_digit = Int(closest_digit)\n                else\n             \
    \       closest_digit = Int(closest_digit)\n                    closest_digit\
    \ = closest_digit + 1\n    \n    return closest_digit\nend", "    if value ==\
    \ \"\"\n        error(\"Value cannot be empty\")\n    else\n        local number\
    \ = tonumber(value)\n        if number == 0\n            error(\"Value cannot\
    \ be 0\")\n        else\n            local closest = 0\n            local closestDiff\
    \ = math.abs(number - closest)\n            for i = 1, 10 do\n               \
    \ local diff = math.abs(number - i)\n                if diff < closestDiff then\n\
    \                    closestDiff = diff\n                    closest = i\n   \
    \             end\n            end\n            return closest\n        end\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ representing a number and returns the number of characters in the string.",
  "    if value == \"\"\n        error(\"value cannot be empty\")\n    else\n    \
    \    closest_integer(parse(Float64, value))\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    closest_integer = Int64(math.ceil(value))\n    if closest_integer == value:\n\
    \        closest_integer = Int64(math.floor(value))\n    return closest_integer\n\
    end\n</cell>\n<code language=julia-1.5>", "    closest_integer = Int64(math.ceil(value))\n\
    \    if closest_integer == value:\n        closest_integer = Int64(math.floor(value))\n\
    \    return closest_integer\nend", "    closest_integer = Int64(math.floor(Int64(value)))\n\
    \    if closest_integer == Int64(value) \n        closest_integer = Int64(value)\
    \ \n    end\n    return closest_integer\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    closest_integer_with_error(value::String)::Int64", "    \n    if value\
    \ == \"\"\n        error(\"value cannot be empty\")\n    else\n        if isnumeric(value)\n\
    \            error(\"value cannot be a number\")\n        else\n            if\
    \ value == \"-\"\n                error(\"value cannot be a negative number\"\
    )\n            else\n                let x = tofloat(value)\n                let\
    \ y = tofloat(value)\n                let z = tofloat(value)\n               \
    \ let d = abs(x - y)\n                let e = abs(x - z)\n                if d\
    \ < e\n                    then return x\n                    else return y\n\
    \                else\n                    let f = abs(y - z)\n              \
    \      if f < d\n                        then return y\n                     \
    \   else return z\n                end\n            end\n        end\n    end\n\
    end\n</cell>\n<text>\nThe function closest_integer will take a value (string)\
    \ representing a number and return the closest integer to it. If the number is\
    \ equidistant from two integers, round it away from zero.", "    \n    if value\
    \ == \"\"\n        error(\"The value cannot be an empty string\")\n    elseif\
    \ value == \"-\"\n        error(\"The value cannot be a negative number\")\n \
    \   elseif value == \"+\"\n        error(\"The value cannot be a positive number\"\
    )\n    elseif value == \"0\"\n        error(\"The value cannot be a zero\")\n\
    \    elseif value == \"1\"\n        error(\"The value cannot be a one\")\n   \
    \ elseif value == \"2\"\n        error(\"The value cannot be a two\")\n    elseif\
    \ value == \"3\"\n        error(\"The value cannot be a three\")\n    elseif value\
    \ == \"4\"\n        error(\"The value cannot be a four\")\n    elseif value ==\
    \ \"5\"\n        error(\"The value cannot be a five\")\n    elseif value == \"\
    6\"\n        error(\"The value cannot be a six\")\n    elseif value == \"7\"\n\
    \        error(\"The value cannot be a seven\")\n    elseif value == \"8\"\n \
    \       error(\"The value cannot be a eight\")\n    elseif value == \"9\"\n  \
    \      error(\"The value cannot be a nine\")\n    elseif value == \".\"\n    \
    \    error(\"The value cannot be a decimal point\")\n    elseif value == \"e\"\
    \n        error(\"The value cannot be an exponent\")\n    elseif value == \"E\"\
    \n        error(\"The value cannot be an exponent with capital E\")\n    elseif\
    \ value == \"+\"\n        error(\"The value cannot be a plus sign\")\n    elseif\
    \ value == \"-\"\n        error(\"The value cannot be a minus sign\")\n    elseif\
    \ value == \"*\"\n        error(\"The value cannot be a multiplication sign\"\
    )\n    elseif value == \"/\"\n        error(\"The value cannot be a division sign\"\
    )\n    elseif value == \"%\"\n        error(\"The value cannot be a modulo sign\"\
    )\n    elseif value == \"^\"\n        error(\"The value cannot be an exponent\
    \ with capital E\")\n    elseif value == \"~\"\n        error(\"The value cannot\
    \ be a tilde sign\")\n    elseif value == \"(\"\n        error(\"The value cannot\
    \ be a left parenthesis\")\n    elseif value == \")\"\n        error(\"The value\
    \ cannot be a right parenthesis\")\n    elseif value == \"[\"\n        error(\"\
    The value cannot be a left square bracket\")\n    elseif value == \"]\"\n    \
    \    error(\"The value cannot be a right square bracket\")\n    elseif value ==\
    \ \"{\"\n        error(\"The value cannot be a left curly bracket\")\n    elseif\
    \ value == \"}\"\n        error(\"The value cannot be a right curly bracket\"\
    )\n    elseif value == \"<\"\n        error(\"The value cannot be a left angle\
    \ bracket\")\n    elseif value == \">\"\n        error(\"The ", "    \n    if\
    \ value == \"\"\n        error(\"value cannot be empty\")\n    elseif value ==\
    \ \"0\"\n        error(\"value cannot be 0\")\n    elseif value == \"1\"\n   \
    \     error(\"value cannot be 1\")\n    elseif value == \"-1\"\n        error(\"\
    value cannot be -1\")\n    elseif value == \"-2\"\n        error(\"value cannot\
    \ be -2\")\n    elseif value == \"-3\"\n        error(\"value cannot be -3\")\n\
    \    elseif value == \"-4\"\n        error(\"value cannot be -4\")\n    elseif\
    \ value == \"-5\"\n        error(\"value cannot be -5\")\n    elseif value ==\
    \ \"-6\"\n        error(\"value cannot be -6\")\n    elseif value == \"-7\"\n\
    \        error(\"value cannot be -7\")\n    elseif value == \"-8\"\n        error(\"\
    value cannot be -8\")\n    elseif value == \"-9\"\n        error(\"value cannot\
    \ be -9\")\n    elseif value == \"-10\"\n        error(\"value cannot be -10\"\
    )\n    elseif value == \"-11\"\n        error(\"value cannot be -11\")\n    elseif\
    \ value == \"-12\"\n        error(\"value cannot be -12\")\n    elseif value ==\
    \ \"-13\"\n        error(\"value cannot be -13\")\n    elseif value == \"-14\"\
    \n        error(\"value cannot be -14\")\n    elseif value == \"-15\"\n      \
    \  error(\"value cannot be -15\")\n    elseif value == \"-16\"\n        error(\"\
    value cannot be -16\")\n    elseif value == \"-17\"\n        error(\"value cannot\
    \ be -17\")\n    elseif value == \"-18\"\n        error(\"value cannot be -18\"\
    )\n    elseif value == \"-19\"\n        error(\"value cannot be -19\")\n    elseif\
    \ value == \"-20\"\n        error(\"value cannot be -20\")\n    elseif value ==\
    \ \"-21\"\n        error(\"value cannot be -21\")\n    elseif value == \"-22\"\
    \n        error(\"value cannot be -22\")\n    elseif value == \"-23\"\n      \
    \  error(\"value cannot be -23\")\n    elseif value == \"-24\"\n        error(\"\
    value cannot be -24\")\n    elseif value == \"-25\"\n        error(\"value cannot\
    \ be -25\")\n    elseif value == \"-26\"\n        error(\"value cannot be -26\"\
    )\n    elseif value == \"-27\"\n        error(\"value cannot be -27\")\n    elseif\
    \ value == \"-28\"\n        error(\"value cannot be -28\")\n    elseif value ==\
    \ \"-29\"\n        error(\"value cannot be -29\")\n    elseif value == \"-30\"\
    \n        error(\"value cannot be -30\")\n    elseif value == \"-31\"\n      \
    \  error(\"value cannot be -31\")\n    elseif value == \"-32\"\n        error(\"\
    value cannot be -32\")\n    elseif value == \"-33\"\n        ", "    if value\
    \ == \"\"\n        error(\"value cannot be empty\")\n    else\n        local num\
    \ = tonumber(value)\n        if num == nil\n            error(\"value cannot be\
    \ converted to a number\")\n        else\n            local closest\n        \
    \    if num < 0\n                closest = -num\n            else\n          \
    \      closest = num\n            end\n            if closest == 0\n         \
    \       error(\"value cannot be equidistant from two integers\")\n           \
    \ else\n                local closestInt\n                if closest < 0\n   \
    \                 closestInt = -closest\n                else\n              \
    \      closestInt = closest\n                end\n                if closestInt\
    \ < 0\n                    closestInt = -closestInt\n                end\n   \
    \             return closestInt\n            end\n        end\n    end\nend\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=julia,string,type-conversion |>\nThe other\
    \ answers here are all great, but I thought I'd add my own solution, since I find\
    \ it more readable and easier to understand.\n<code>", "    if value == \"\"\n\
    \        error(\"Value cannot be an empty string\")\n    else\n        closest_integer(parse(Int64,\
    \ value))\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    closest_integer(value::Float64)",
  "    if value == \"\"\n        error(\"value cannot be empty\")\n    end\n    \n\
    \    local num = tonumber(value)\n    if num == nil\n        error(\"value must\
    \ be a number\")\n    end\n    \n    if num == 0.0\n        error(\"value cannot\
    \ be 0\")\n    end\n    \n    local closest\n    local closestDistance = math.abs(num\
    \ - closest)\n    \n    if closestDistance < math.abs(num - closest)\n       \
    \ closest = num\n    else\n        closest = closest\n    end\n    \n    return\
    \ closest\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ representing a number and returns the closest float to it. If the number is\
    \ equidistant from two floats, round it away from zero.", "    closest_integer\
    \ = Int64(math.ceil(value))\n    if closest_integer == value:\n        closest_integer\
    \ = Int64(math.floor(value))\n    return closest_integer\nend", "    if value\
    \ == \"\"\n        error(\"value cannot be empty\")\n    elseif value == \"-\"\
    \n        error(\"value cannot be negative\")\n    elseif value == \"+\"\n   \
    \     error(\"value cannot be positive\")\n    else\n        local value = tonumber(value)\n\
    \        if value == 0\n            error(\"value cannot be zero\")\n        else\n\
    \            local closest = 0\n            local closestDiff = abs(value - closest)\n\
    \            for i = 1, 10 do\n                local diff = abs(value - closest)\n\
    \                if diff < closestDiff then\n                    closestDiff =\
    \ diff\n                    closest = i\n                end\n            end\n\
    \            return closest\n        end\n    end\nend\n</cell>\n<text>\nNow let's\
    \ test the function by passing it a bunch of different inputs:", "    closest_integer\
    \ = Int64(math.floor(value))\n    if closest_integer == value \n        closest_integer\
    \ = Int64(math.ceil(value))\n    end\n    return closest_integer\nend\n</cell>\n\
    <code language=julia-1.4>\nclosest_integer(\"10\")\n</cell>\n<code language=julia-1.4>\n\
    closest_integer(\"15.3\")\n</cell>\n<code language=julia-1.4>\nclosest_integer(\"\
    14.5\")\n</cell>\n<code language=julia-1.4>\nclosest_integer(\"-14.5\")\n</cell>\n\
    <text>\nExercise\nWrite a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    \    from two integers, round it away from zero.", "    if value == \"\"\n   \
    \     error(\"value cannot be empty\")\n    else\n        local value = tonumber(value)\n\
    \        if value == 0\n            error(\"value cannot be 0\")\n        else\n\
    \            local closest = 0\n            local closestDiff = abs(value - closest)\n\
    \            local closestDiffInt = closestDiff\n            local closestDiffIntInt\
    \ = closestDiffInt\n            while closestDiff > 0 and closestDiffInt > 0 and\
    \ closestDiffIntInt > 0\n                do\n                    local closestDiffIntInt\
    \ = closestDiffIntInt\n                    local closestDiffInt = closestDiffInt\n\
    \                    local closest = closest\n                    local closestDiff\
    \ = abs(value - closest)\n                end\n            end\n            return\
    \ closest\n        end\n    end\nend\n\"\"\"\n    Create a function that takes\
    \ a value (string) representing a number\n    and returns the closest real number\
    \ to it. If the number is equidistant\n    from two numbers, round it away from\
    \ zero.", "    \n    closest_integer = Int64(math.ceil(value))\n    if closest_integer\
    \ == value:\n        closest_integer = Int64(math.floor(value))\n    return closest_integer\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test it out\nclosest_integer(\"10\"\
    )\nclosest_integer(\"15.3\")\nclosest_integer(\"14.5\")\nclosest_integer(\"-14.5\"\
    )\nclosest_integer(\"0\")\nclosest_integer(\"-1\")\nclosest_integer(\"-2\")\n\
    closest_integer(\"-3\")\nclosest_integer(\"-4\")\nclosest_integer(\"-5\")\nclosest_integer(\"\
    -6\")\nclosest_integer(\"-7\")\nclosest_integer(\"-8\")\nclosest_integer(\"-9\"\
    )\nclosest_integer(\"-10\")\nclosest_integer(\"-11\")\nclosest_integer(\"-12\"\
    )\nclosest_integer(\"-13\")\nclosest_integer(\"-14\")\nclosest_integer(\"-15\"\
    )\nclosest_integer(\"-16\")\nclosest_integer(\"17\")\nclosest_integer(\"18\")\n\
    closest_integer(\"19\")\nclosest_integer(\"20\")\nclosest_integer(\"21\")\nclosest_integer(\"\
    22\")\nclosest_integer(\"23\")\nclosest_integer(\"24\")\nclosest_integer(\"25\"\
    )\nclosest_integer(\"26\")\nclosest_integer(\"27\")\nclosest_integer(\"28\")\n\
    closest_integer(\"29\")\nclosest_integer(\"30\")\nclosest_integer(\"31\")\nclosest_integer(\"\
    32\")\nclosest_integer(\"33\")\nclosest_integer(\"34\")\nclosest_integer(\"35\"\
    )\nclosest_integer(\"36\")\nclosest_integer(\"37\")\nclosest_integer(\"38\")\n\
    closest_integer(\"39\")\nclosest_integer(\"40\")\nclosest_integer(\"41\")\nclosest_integer(\"\
    42\")\nclosest_integer(\"43\")\nclosest_integer(\"44\")\nclosest_integer(\"45\"\
    )\nclosest_integer(\"46\")\nclosest_integer(\"47\")\nclosest_integer(\"48\")\n\
    closest_integer(\"49\")\nclosest_integer(\"50\")\nclosest_integer(\"51\")\nclosest_integer(\"\
    52\")\nclosest_integer(\"53\")\nclosest_integer(\"54\")\nclosest_integer(\"55\"\
    )\nclosest_integer(\"56\")\nclosest_integer(\"57\")\nclosest_integer(\"58\")\n\
    closest_integer(\"59\")\nclosest_integer(\"60\")\nclosest_integer(\"61\")\nclosest_integer(\"\
    62\")\nclosest_integer(\"63\")\nclosest_integer(\"64\")\nclosest_integer(\"65\"\
    )\nclosest_integer(\"66\")\nclosest_integer(\"67\")\nclosest_integer(\"68\")\n\
    closest_integer(\"69\")\nclosest_integer(\"70\")\nclosest_integer(\"71\")\nclosest_integer(\"\
    72\")", "    if value == \"-inf\" || value == \"inf\" \n        then return value\n\
    \    else \n        local num = tonumber(value)\n        if num == 0 \n      \
    \      then return 0\n        else \n            local closest = 0\n         \
    \   local closestDiff = abs(num - closest)\n            for i = 1, 10 do\n   \
    \             local diff = abs(num - i)\n                if diff < closestDiff\
    \ then\n                    closestDiff = diff\n                    closest =\
    \ i\n                end\n            end\n            return closest\n      \
    \  end\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    closest_integer(value::String)::Int64",
  "    closest_integer = Int64(math.ceil(value))\n    if closest_integer == value:\n\
    \        closest_integer = Int64(math.floor(value))\n    return closest_integer\n\
    end\n</cell>\n<code language=julia-1.1>\n\"\"\"\n    closest_integer(value::Float64)",
  "    closest_integer = Int64(0)\n    closest_integer = Int64(math.ceil(Int64(value)))\n\
    \    return closest_integer\nend\n</cell>\n<code language=julia-1.5>", "    \n\
    \    if value == \"-inf\" \n        then return -Inf \n    else if value == \"\
    inf\" \n        then return Inf \n    else if value == \"nan\" \n        then\
    \ return NaN \n    else if value == \"-nan\" \n        then return NaN \n    else\
    \ if value == \"0\" \n        then return 0 \n    else if value == \"1\" \n  \
    \      then return 1 \n    else if value == \"2\" \n        then return 2 \n \
    \   else if value == \"3\" \n        then return 3 \n    else if value == \"4\"\
    \ \n        then return 4 \n    else if value == \"5\" \n        then return 5\
    \ \n    else if value == \"6\" \n        then return 6 \n    else if value ==\
    \ \"7\" \n        then return 7 \n    else if value == \"8\" \n        then return\
    \ 8 \n    else if value == \"9\" \n        then return 9 \n    else if value ==\
    \ \"10\" \n        then return 10 \n    else if value == \"11\" \n        then\
    \ return 11 \n    else if value == \"12\" \n        then return 12 \n    else\
    \ if value == \"13\" \n        then return 13 \n    else if value == \"14\" \n\
    \        then return 14 \n    else if value == \"15\" \n        then return 15\
    \ \n    else if value == \"16\" \n        then return 16 \n    else if value ==\
    \ \"17\" \n        then return 17 \n    else if value == \"18\" \n        then\
    \ return 18 \n    else if value == \"19\" \n        then return 19 \n    else\
    \ if value == \"20\" \n        then return 20 \n    else if value == \"21\" \n\
    \        then return 21 \n    else if value == \"22\" \n        then return 22\
    \ \n    else if value == \"23\" \n        then return 23 \n    else if value ==\
    \ \"24\" \n        then return 24 \n    else if value == \"25\" \n        then\
    \ return 25 \n    else if value == \"26\" \n        then return 26 \n    else\
    \ if value == \"27\" \n        then return 27 \n    else if value == \"28\" \n\
    \        then return 28 \n    else if value == \"29\" \n        then return 29\
    \ \n    else if value == \"30\" \n        then return 30 \n    else if value ==\
    \ \"31\" \n        then return 31 \n    else if value == \"32\" \n        then\
    \ return 32 \n    else if value == \"33\" \n        then return 33 \n    else\
    \ if value == \"34\" \n        then return 34 \n", "    \n    if value == \"-inf\"\
    \ \n        then return -Inf \n    else if value == \"inf\" \n        then return\
    \ Inf \n    else if value == \"nan\" \n        then return NaN \n    else if value\
    \ == \"-nan\" \n        then return NaN \n    else if value == \"0\" \n      \
    \  then return 0 \n    else if value == \"1\" \n        then return 1 \n    else\
    \ if value == \"2\" \n        then return 2 \n    else if value == \"3\" \n  \
    \      then return 3 \n    else if value == \"4\" \n        then return 4 \n \
    \   else if value == \"5\" \n        then return 5 \n    else if value == \"6\"\
    \ \n        then return 6 \n    else if value == \"7\" \n        then return 7\
    \ \n    else if value == \"8\" \n        then return 8 \n    else if value ==\
    \ \"9\" \n        then return 9 \n    else if value == \"10\" \n        then return\
    \ 10 \n    else if value == \"11\" \n        then return 11 \n    else if value\
    \ == \"12\" \n        then return 12 \n    else if value == \"13\" \n        then\
    \ return 13 \n    else if value == \"14\" \n        then return 14 \n    else\
    \ if value == \"15\" \n        then return 15 \n    else if value == \"16\" \n\
    \        then return 16 \n    else if value == \"17\" \n        then return 17\
    \ \n    else if value == \"18\" \n        then return 18 \n    else if value ==\
    \ \"19\" \n        then return 19 \n    else if value == \"20\" \n        then\
    \ return 20 \n    else if value == \"21\" \n        then return 21 \n    else\
    \ if value == \"22\" \n        then return 22 \n    else if value == \"23\" \n\
    \        then return 23 \n    else if value == \"24\" \n        then return 24\
    \ \n    else if value == \"25\" \n        then return 25 \n    else if value ==\
    \ \"26\" \n        then return 26 \n    else if value == \"27\" \n        then\
    \ return 27 \n    else if value == \"28\" \n        then return 28 \n    else\
    \ if value == \"29\" \n        then return 29 \n    else if value == \"30\" \n\
    \        then return 30 \n    else if value == \"31\" \n        then return 31\
    \ \n    else if value == \"32\" \n        then return 32 \n    else if value ==\
    \ \"33\" \n        then return 33 \n    else if value == \"34\" \n        then\
    \ return 34 \n", "    closest_integer = math.ceil(value)\n    if closest_integer\
    \ == value:\n        closest_integer = math.floor(value)\n    return closest_integer\n\
    end\n</cell>\n<code language=julia-1.4>\n# Test it out\nclosest_integer(\"10\"\
    )\nclosest_integer(\"15.3\")\nclosest_integer(\"14.5\")\nclosest_integer(\"-14.5\"\
    )\nclosest_integer(\"0\")\nclosest_integer(\"-10\")\nclosest_integer(\"-10.0\"\
    )\nclosest_integer(\"-10.05\")\nclosest_integer(\"-10.055\")\nclosest_integer(\"\
    -10.0551\")\nclosest_integer(\"-10.05515\")\nclosest_integer(\"-10.055151\")\n\
    closest_integer(\"-10.0551515\")\nclosest_integer(\"-10.05515151\")\nclosest_integer(\"\
    -10.055151515\")\nclosest_integer(\"-10.0551515151\")\nclosest_integer(\"-10.05515151515\"\
    )\nclosest_integer(\"-10.055151515151\")\nclosest_integer(\"-10.0551515151515\"\
    )\nclosest_integer(\"-10.05515151515151\")\nclosest_integer(\"-10.055151515151515\"\
    )\nclosest_integer(\"-10.0551515151515151\")\nclosest_integer(\"-10.05515151515151515\"\
    )\nclosest_integer(\"-10.055151515151515151\")\nclosest_integer(\"-10.0551515151515151515\"\
    )\nclosest_integer(\"-10.05515151515151515151\")\nclosest_integer(\"-10.055151515151515151515\"\
    )\nclosest_integer(\"-10.0551515151515151515151\")\nclosest_integer(\"-10.05515151515151515151515\"\
    )\nclosest_integer(\"-10.055151515151515151515151\")\nclosest_integer(\"-10.0551515151515151515151515\"\
    )\nclosest_integer(\"-10.05515151515151515151515151\")\nclosest_integer(\"-10.055151515151515151515151515\"\
    )\nclosest_integer(\"-10.055151515151515151515151515151\")\nclosest_integer(\"\
    -10.0551515151515151515151515151515\")\nclosest_integer(\"-10.055151515151515151515151515151515151\"\
    )\nclosest_integer(\"-10.05515", "    closest_integer = Int(0)\n    \n    closest_integer\
    \ = if value == \"0\" then 0 else Int(value)\n    \n    closest_integer = if closest_integer\
    \ == 0 then 1 else closest_integer\n    \n    closest_integer = if closest_integer\
    \ == 1 then 1 else closest_integer\n    \n    closest_integer = if closest_integer\
    \ == 2 then 2 else closest_integer\n    \n    closest_integer = if closest_integer\
    \ == 3 then 3 else closest_integer\n    \n    closest_integer = if closest_integer\
    \ == 4 then 4 else closest_integer\n    \n    closest_integer = if closest_integer\
    \ == 5 then 5 else closest_integer\n    \n    closest_integer = if closest_integer\
    \ == 6 then 6 else closest_integer\n    \n    closest_integer = if closest_integer\
    \ == 7 then 7 else closest_integer\n    \n    closest_integer = if closest_integer\
    \ == 8 then 8 else closest_integer\n    \n    closest_integer = if closest_integer\
    \ == 9 then 9 else closest_integer\n    \n    closest_integer = if closest_integer\
    \ == 10 then 10 else closest_integer\n    \n    closest_integer = if closest_integer\
    \ == 11 then 11 else closest_integer\n    \n    closest_integer = if closest_integer\
    \ == 12 then 12 else closest_integer\n    \n    closest_integer = if closest_integer\
    \ == 13 then 13 else closest_integer\n    \n    closest_integer = if closest_integer\
    \ == 14 then 14 else closest_integer\n    \n    closest_integer = if closest_integer\
    \ == 15 then 15 else closest_integer\n    \n    closest_integer = if closest_integer\
    \ == 16 then 16 else closest_integer\n    \n    closest_integer = if closest_integer\
    \ == 17 then 17 else closest_integer\n    \n    closest_integer = if closest_integer\
    \ == 18 then 18 else closest_integer\n    \n    closest_integer = if closest_integer\
    \ == 19 then 19 else closest_integer\n    \n    closest_integer = if closest_integer\
    \ == 20 then 20 else closest_integer\n    \n    closest_integer = if closest_integer\
    \ == 21 then 21 else closest_integer\n    \n    closest_integer = if closest_integer\
    \ == 22 then 22 else closest_integer\n    \n    closest_integer = if closest_integer\
    \ == 23 then 23 else closest_integer\n    \n    closest_integer = if closest_integer\
    \ == 24 then 24 else closest_integer\n    \n    closest_integer = if closest_integer\
    \ == 25 then 25 else closest_integer\n    \n    closest_integer = if closest_integer\
    \ == 26 then 26 else closest_integer\n    \n    closest_integer = if closest_integer\
    \ == 27 then 27 else closest_integer\n    \n    closest_integer = if closest_integer\
    \ == 28 then 28 else closest_integer\n", "    if value == \"-inf\" \n    then\
    \ return -Inf \n    else if value == \"inf\" \n    then return Inf \n    else\
    \ if value == \"nan\" \n    then return NaN \n    else if value == \"0\" \n  \
    \  then return 0 \n    else if value == \"1\" \n    then return 1 \n    else if\
    \ value == \"2\" \n    then return 2 \n    else if value == \"3\" \n    then return\
    \ 3 \n    else if value == \"4\" \n    then return 4 \n    else if value == \"\
    5\" \n    then return 5 \n    else if value == \"6\" \n    then return 6 \n  \
    \  else if value == \"7\" \n    then return 7 \n    else if value == \"8\" \n\
    \    then return 8 \n    else if value == \"9\" \n    then return 9 \n    else\
    \ if value == \"10\" \n    then return 10 \n    else if value == \"11\" \n   \
    \ then return 11 \n    else if value == \"12\" \n    then return 12 \n    else\
    \ if value == \"13\" \n    then return 13 \n    else if value == \"14\" \n   \
    \ then return 14 \n    else if value == \"15\" \n    then return 15 \n    else\
    \ if value == \"16\" \n    then return 16 \n    else if value == \"17\" \n   \
    \ then return 17 \n    else if value == \"18\" \n    then return 18 \n    else\
    \ if value == \"19\" \n    then return 19 \n    else if value == \"20\" \n   \
    \ then return 20 \n    else if value == \"21\" \n    then return 21 \n    else\
    \ if value == \"22\" \n    then return 22 \n    else if value == \"23\" \n   \
    \ then return 23 \n    else if value == \"24\" \n    then return 24 \n    else\
    \ if value == \"25\" \n    then return 25 \n    else if value == \"26\" \n   \
    \ then return 26 \n    else if value == \"27\" \n    then return 27 \n    else\
    \ if value == \"28\" \n    then return 28 \n    else if value == \"29\" \n   \
    \ then return 29 \n    else if value == \"30\" \n    then return 30 \n    else\
    \ if value == \"31\" \n    then return 31 \n    else if value == \"32\" \n   \
    \ then return 32 \n    else if value == \"33\" \n    then return 33 \n    else\
    \ if value == \"34\" \n    then return 34 \n    else if value == \"35\" \n   \
    \ then return 35 \n    else if value ", "    closest_integer = Int64(math.floor(value))\n\
    \    if closest_integer == value:\n        closest_integer = Int64(math.ceil(value))\n\
    \        if closest_integer == value:\n            closest_integer = Int64(math.round(value))\n\
    \            if closest_integer == value:\n                raise Exception(\"\
    Cannot determine closest integer from \" + value)\n    return closest_integer\n\
    end\n</cell>\n<code language=julia-1.5>", "    if value == \"-inf\" \n       \
    \ then return -Infinity \n    else if value == \"inf\" \n        then return Infinity\
    \ \n    else if value == \"nan\" \n        then return NaN \n    else if value\
    \ == \"-nan\" \n        then return NaN \n    else if value == \"0\" \n      \
    \  then return 0 \n    else if value == \"1\" \n        then return 1 \n    else\
    \ if value == \"2\" \n        then return 2 \n    else if value == \"3\" \n  \
    \      then return 3 \n    else if value == \"4\" \n        then return 4 \n \
    \   else if value == \"5\" \n        then return 5 \n    else if value == \"6\"\
    \ \n        then return 6 \n    else if value == \"7\" \n        then return 7\
    \ \n    else if value == \"8\" \n        then return 8 \n    else if value ==\
    \ \"9\" \n        then return 9 \n    else if value == \"10\" \n        then return\
    \ 10 \n    else if value == \"11\" \n        then return 11 \n    else if value\
    \ == \"12\" \n        then return 12 \n    else if value == \"13\" \n        then\
    \ return 13 \n    else if value == \"14\" \n        then return 14 \n    else\
    \ if value == \"15\" \n        then return 15 \n    else if value == \"16\" \n\
    \        then return 16 \n    else if value == \"17\" \n        then return 17\
    \ \n    else if value == \"18\" \n        then return 18 \n    else if value ==\
    \ \"19\" \n        then return 19 \n    else if value == \"20\" \n        then\
    \ return 20 \n    else if value == \"21\" \n        then return 21 \n    else\
    \ if value == \"22\" \n        then return 22 \n    else if value == \"23\" \n\
    \        then return 23 \n    else if value == \"24\" \n        then return 24\
    \ \n    else if value == \"25\" \n        then return 25 \n    else if value ==\
    \ \"26\" \n        then return 26 \n    else if value == \"27\" \n        then\
    \ return 27 \n    else if value == \"28\" \n        then return 28 \n    else\
    \ if value == \"29\" \n        then return 29 \n    else if value == \"30\" \n\
    \        then return 30 \n    else if value == \"31\" \n        then return 31\
    \ \n    else if value == \"32\" \n        then return 32 \n    else if value ==\
    \ \"33\" \n        then return 33 \n    else if value == \"34\" \n        then\
    \ return 34 \n    else ", "    closest_integer = Int64(math.ceil(value))\n   \
    \ if closest_integer == value \n        closest_integer = Int64(math.floor(value))\n\
    \    end\n    return closest_integer\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    closest_integer(value::Float64)", "    \n    closest_integer = Int64(math.ceil(value))\n\
    \    \n    if closest_integer == value or closest_integer == Int64(math.floor(value)):\n\
    \        closest_integer = Int64(math.floor(value))\n    \n    return closest_integer\n\
    end", "    closest_integer = math.ceil(value)\n    if closest_integer == value:\n\
    \        closest_integer = math.floor(value)\n    return closest_integer\nend\n\
    </cell>\n<code language=julia-1.1>\n\"\"\"\n    closest_integer_with_ifelse(value::String)::Int64",
  "    closest_integer = Int(0)\n    closest_integer = Int(value) \n    closest_integer\
    \ = Int(closest_integer) \n    closest_integer = Int(closest_integer) \n    closest_integer\
    \ = Int(closest_integer) \n    closest_integer = Int(closest_integer) \n    closest_integer\
    \ = Int(closest_integer) \n    closest_integer = Int(closest_integer) \n    closest_integer\
    \ = Int(closest_integer) \n    closest_integer = Int(closest_integer) \n    closest_integer\
    \ = Int(closest_integer) \n    closest_integer = Int(closest_integer) \n    closest_integer\
    \ = Int(closest_integer) \n    closest_integer = Int(closest_integer) \n    closest_integer\
    \ = Int(closest_integer) \n    closest_integer = Int(closest_integer) \n    closest_integer\
    \ = Int(closest_integer) \n    closest_integer = Int(closest_integer) \n    closest_integer\
    \ = Int(closest_integer) \n    closest_integer = Int(closest_integer) \n    closest_integer\
    \ = Int(closest_integer) \n    closest_integer = Int(closest_integer) \n    closest_integer\
    \ = Int(closest_integer) \n    closest_integer = Int(closest_integer) \n    closest_integer\
    \ = Int(closest_integer) \n    closest_integer = Int(closest_integer) \n    closest_integer\
    \ = Int(closest_integer) \n    closest_integer = Int(closest_integer) \n    closest_integer\
    \ = Int(closest_integer) \n    closest_integer = Int(closest_integer) \n    closest_integer\
    \ = Int(closest_integer) \n    closest_integer = Int(closest_integer) \n    closest_integer\
    \ = Int(closest_integer) \n    closest_integer = Int(closest_integer) \n    closest_integer\
    \ = Int(closest_integer) \n    closest_integer = Int(closest_integer) \n    closest_integer\
    \ = Int(closest_integer) \n    closest_integer = Int(closest_integer) \n    closest_integer\
    \ = Int(closest_integer) \n    closest_integer = Int(closest_integer) \n    closest_integer\
    \ = Int(closest_integer) \n    closest_integer = Int(closest_integer) \n    closest_integer\
    \ = Int(closest_integer) \n    closest_integer = Int(closest_integer) \n    closest_integer\
    \ = Int(closest_integer) \n    closest_integer = Int(closest_integer) \n    closest_integer\
    \ = Int(closest_integer) \n    closest_integer = Int(closest_integer) \n    closest_integer\
    \ = Int(closest_integer) \n    closest_integer = Int(closest_integer) \n    closest_integer\
    \ = Int(closest_integer) \n    closest_integer = Int(closest_integer) \n    closest_integer\
    \ = Int(closest_integer) \n    closest_integer = Int(closest_integer) \n    closest_integer\
    \ = Int(closest_integer) \n    closest_integer = Int(closest_integer) \n    closest_integer\
    \ = Int(closest_integer) \n    closest_", "    closest_integer = int64(0)\n  \
    \  \n    if value == \"\"\n        return int64(0)\n    \n    split_value = value.split(\"\
    .\")\n    \n    if split_value[1] == \"0\"\n        return int64(0)\n    \n  \
    \  split_value = split_value[0].split(\"-\")\n    \n    if split_value[1] == \"\
    0\"\n        return int64(0)\n    \n    split_value = split_value[0].split(\"\
    +\")\n    \n    if split_value[1] == \"0\"\n        return int64(0)\n    \n  \
    \  split_value = split_value[0].split(\"x\")\n    \n    if split_value[1] == \"\
    0\"\n        return int64(0)\n    \n    split_value = split_value[0].split(\"\
    -\")\n    \n    if split_value[1] == \"0\"\n        return int64(0)\n    \n  \
    \  split_value = split_value[0].split(\"+\")\n    \n    if split_value[1] == \"\
    0\"\n        return int64(0)\n    \n    split_value = split_value[0].split(\"\
    x\")\n    \n    if split_value[1] == \"0\"\n        return int64(0)\n    \n  \
    \  split_value = split_value[0].split(\"e\")\n    \n    if split_value[1] == \"\
    0\"\n        return int64(0)\n    \n    split_value = split_value[0].split(\"\
    p\")\n    \n    if split_value[1] == \"0\"\n        return int64(0)\n    \n  \
    \  split_value = split_value[0].split(\"n\")\n    \n    if split_value[1] == \"\
    0\"\n        return int64(0)\n    \n    split_value = split_value[0].split(\"\
    a\")\n    \n    if split_value[1] == \"0\"\n        return int64(0)\n    \n  \
    \  split_value = split_value[0].split(\"o\")\n    \n    if split_value[1] == \"\
    0\"\n        return int64(0)\n    \n    split_value = split_value[0].split(\"\
    i\")\n    \n    if split_value[1] == \"0\"\n        return int64(0)\n    \n  \
    \  split_value = split_value[0].split(\"l\")\n    \n    if split_value[1] == \"\
    0\"\n        return int64(0)\n    \n    split_value = split_value[0].split(\"\
    s\")\n    \n    if split_value[1] == \"0\"\n        return int64(0)\n    \n  \
    \  split_value = split_value[0].split(\"c\")\n    \n    if split_value[1] == \"\
    0\"\n        return int64(0)\n    \n    split_value = split_value[0].split(\"\
    e\")\n    \n    if split_value[1] == \"0\"\n        return int64(0)\n    \n  \
    \  split_value = split_value[0].split(\"d\")\n    \n    if split_value[1] == \"\
    0\"\n        return int64(0)\n    \n    split_value = split_value[0].split(\"\
    m\")\n    \n    if split_value[1] == \"0\"\n        return int64(0)\n    \n  \
    \  split_value = split_value[0].split(\"u\")\n    \n    if split_value[1] == \"\
    0\"\n        return int64(0)\n    \n    split_value = split_value", "    closest_integer\
    \ = Int64(math.ceil(value))\n    if closest_integer == value:\n        closest_integer\
    \ = Int64(math.floor(value))\n        if closest_integer == value:\n         \
    \   closest_integer = Int64(math.round(value))\n    return closest_integer\nend\n\
    </cell>\n<code language=julia-1.5>", "    closest_integer = Int(0)\n    closest_integer\
    \ = if value == \"0\" then 0 else Int(value)\n    closest_integer = if closest_integer\
    \ == 0 then 1 else Int(closest_integer - 1)\n    closest_integer = if closest_integer\
    \ == 0 then 0 else Int(closest_integer + 1)\n    return closest_integer\nend\n\
    </cell>\n<code language=julia-1.4>\n\"\"\"\n    Create a function that takes a\
    \ value (string) representing a number\n    and returns the closest float to it.\
    \ If the number is equidistant\n    from two floats, round it away from zero.",
  "    closest_integer = int64(0)\n    \n    if value == \"\"\n        closest_integer\
    \ = int64(0)\n    elseif value == \"-\"\n        closest_integer = int64(0)\n\
    \    elseif value == \"0\"\n        closest_integer = int64(0)\n    elseif value\
    \ == \"1\"\n        closest_integer = int64(1)\n    elseif value == \"2\"\n  \
    \      closest_integer = int64(2)\n    elseif value == \"3\"\n        closest_integer\
    \ = int64(3)\n    elseif value == \"4\"\n        closest_integer = int64(4)\n\
    \    elseif value == \"5\"\n        closest_integer = int64(5)\n    elseif value\
    \ == \"6\"\n        closest_integer = int64(6)\n    elseif value == \"7\"\n  \
    \      closest_integer = int64(7)\n    elseif value == \"8\"\n        closest_integer\
    \ = int64(8)\n    elseif value == \"9\"\n        closest_integer = int64(9)\n\
    \    elseif value == \"10\"\n        closest_integer = int64(10)\n    elseif value\
    \ == \"11\"\n        closest_integer = int64(11)\n    elseif value == \"12\"\n\
    \        closest_integer = int64(12)\n    elseif value == \"13\"\n        closest_integer\
    \ = int64(13)\n    elseif value == \"14\"\n        closest_integer = int64(14)\n\
    \    elseif value == \"15\"\n        closest_integer = int64(15)\n    elseif value\
    \ == \"16\"\n        closest_integer = int64(16)\n    elseif value == \"17\"\n\
    \        closest_integer = int64(17)\n    elseif value == \"18\"\n        closest_integer\
    \ = int64(18)\n    elseif value == \"19\"\n        closest_integer = int64(19)\n\
    \    elseif value == \"20\"\n        closest_integer = int64(20)\n    elseif value\
    \ == \"21\"\n        closest_integer = int64(21)\n    elseif value == \"22\"\n\
    \        closest_integer = int64(22)\n    elseif value == \"23\"\n        closest_integer\
    \ = int64(23)\n    elseif value == \"24\"\n        closest_integer = int64(24)\n\
    \    elseif value == \"25\"\n        closest_integer = int64(25)\n    elseif value\
    \ == \"26\"\n        closest_integer = int64(26)\n    elseif value == \"27\"\n\
    \        closest_integer = int64(27)\n    elseif value == \"28\"\n        closest_integer\
    \ = int64(28)\n    elseif value == \"29\"\n        closest_integer = int64(29)\n\
    \    elseif value == \"30\"\n        closest_integer = int64(30)\n    elseif value\
    \ == \"31\"\n        closest_integer = int64(31)\n    elseif value == \"32\"\n",
  "    \n    if value == \"\"\n        error(\"Value cannot be empty\")\n    elseif\
    \ value == \"-\"\n        error(\"Value cannot be negative\")\n    elseif value\
    \ == \"+\"\n        error(\"Value cannot be positive\")\n    elseif value == \"\
    0\"\n        error(\"Value cannot be 0\")\n    elseif value == \"1\"\n       \
    \ error(\"Value cannot be 1\")\n    elseif value == \"2\"\n        error(\"Value\
    \ cannot be 2\")\n    elseif value == \"3\"\n        error(\"Value cannot be 3\"\
    )\n    elseif value == \"4\"\n        error(\"Value cannot be 4\")\n    elseif\
    \ value == \"5\"\n        error(\"Value cannot be 5\")\n    elseif value == \"\
    6\"\n        error(\"Value cannot be 6\")\n    elseif value == \"7\"\n       \
    \ error(\"Value cannot be 7\")\n    elseif value == \"8\"\n        error(\"Value\
    \ cannot be 8\")\n    elseif value == \"9\"\n        error(\"Value cannot be 9\"\
    )\n    else\n        error(\"Value must be an integer or float\")\n    end\n \
    \   \n    digits = value.digits\n    \n    if length(digits) < 2\n        error(\"\
    Value must be an integer or float\")\n    elseif digits[1] == \"-\"\n        error(\"\
    Value cannot be negative\")\n    elseif digits[1] == \"+\"\n        error(\"Value\
    \ cannot be positive\")\n    elseif digits[1] == \"0\"\n        error(\"Value\
    \ cannot be 0\")\n    elseif digits[1] == \"1\"\n        error(\"Value cannot\
    \ be 1\")\n    elseif digits[1] == \"2\"\n        error(\"Value cannot be 2\"\
    )\n    elseif digits[1] == \"3\"\n        error(\"Value cannot be 3\")\n    elseif\
    \ digits[1] == \"4\"\n        error(\"Value cannot be 4\")\n    elseif digits[1]\
    \ == \"5\"\n        error(\"Value cannot be 5\")\n    elseif digits[1] == \"6\"\
    \n        error(\"Value cannot be 6\")\n    elseif digits[1] == \"7\"\n      \
    \  error(\"Value cannot be 7\")\n    elseif digits[1] == \"8\"\n        error(\"\
    Value cannot be 8\")\n    elseif digits[1] == \"9\"\n        error(\"Value cannot\
    \ be 9\")\n    else\n        error(\"Value must be an integer or float\")\n  \
    \  end\n    \n    if digits[1] == \"-\"\n        digits = digits[2:end]\n    elseif\
    \ digits[1] == \"+\"\n        digits = digits[2:end]\n    elseif digits[1] ==\
    \ \"0\"\n        digits = digits[2:end]\n    elseif digits[1] == \"1\"\n     \
    \   digits = digits[2:end]\n    elseif digits[1] == \"2\"\n        digits = digits[2:end]\n\
    \    elseif digits[1] == \"3\"\n        digits = digits[2:end]\n    elseif digits[1]\
    \ == \"4\"\n        digits = digits[2:end]\n    elseif digits[1] == \"5\"\n  \
    \      digits = digits[2:end]\n    elseif digits[1]", "    closest_integer = Int(0)\n\
    \    \n    if value == \"0\" || value == \"-0\" \n        then return 0\n    \n\
    \    digits = split(value, \".\")\n    \n    if digits.length == 0 || digits.length\
    \ == 1\n        then return Int(value)\n    \n    digits_int = digits[1]\n   \
    \ \n    if digits_int == \"0\"\n        then return Int(digits[0])\n    \n   \
    \ digits_int = digits_int.toInt()\n    \n    if digits_int == 0\n        then\
    \ return Int(digits[0])\n    \n    digits_int = digits_int - 1\n    \n    if digits_int\
    \ == 0\n        then return Int(digits[0])\n    \n    digits_int = digits_int\
    \ + 1\n    \n    if digits_int == 0\n        then return Int(digits[0])\n    \n\
    \    digits_int = digits_int - 1\n    \n    if digits_int == 0\n        then return\
    \ Int(digits[0])\n    \n    digits_int = digits_int + 1\n    \n    if digits_int\
    \ == 0\n        then return Int(digits[0])\n    \n    digits_int = digits_int\
    \ - 1\n    \n    if digits_int == 0\n        then return Int(digits[0])\n    \n\
    \    digits_int = digits_int + 1\n    \n    if digits_int == 0\n        then return\
    \ Int(digits[0])\n    \n    digits_int = digits_int - 1\n    \n    if digits_int\
    \ == 0\n        then return Int(digits[0])\n    \n    digits_int = digits_int\
    \ + 1\n    \n    if digits_int == 0\n        then return Int(digits[0])\n    \n\
    \    digits_int = digits_int - 1\n    \n    if digits_int == 0\n        then return\
    \ Int(digits[0])\n    \n    digits_int = digits_int + 1\n    \n    if digits_int\
    \ == 0\n        then return Int(digits[0])\n    \n    digits_int = digits_int\
    \ - 1\n    \n    if digits_int == 0\n        then return Int(digits[0])\n    \n\
    \    digits_int = digits_int + 1\n    \n    if digits_int == 0\n        then return\
    \ Int(digits[0])\n    \n    digits_int = digits_int - 1\n    \n    if digits_int\
    \ == 0\n        then return Int(digits[0])\n    \n    digits_int = digits_int\
    \ + 1\n    \n    if digits_int == 0\n        then return Int(digits[0])\n    \n\
    \    digits_int = digits_int - 1\n    \n    if digits_int == 0\n        then return\
    \ Int(digits[0])\n    \n", "    closest_integer = Int64(math.ceil(Int64(value)))\n\
    \    if closest_integer == Int64(value)\n        closest_integer = Int64(0)\n\
    \    end\n    return closest_integer\nend", "    closest_integer = Int(0)\n  \
    \  if value == \"0\" \n        closest_integer = Int(0)\n    else if value ==\
    \ \"1\" \n        closest_integer = Int(1)\n    else if value == \"2\" \n    \
    \    closest_integer = Int(2)\n    else if value == \"3\" \n        closest_integer\
    \ = Int(3)\n    else if value == \"4\" \n        closest_integer = Int(4)\n  \
    \  else if value == \"5\" \n        closest_integer = Int(5)\n    else if value\
    \ == \"6\" \n        closest_integer = Int(6)\n    else if value == \"7\" \n \
    \       closest_integer = Int(7)\n    else if value == \"8\" \n        closest_integer\
    \ = Int(8)\n    else if value == \"9\" \n        closest_integer = Int(9)\n  \
    \  else if value == \"10\" \n        closest_integer = Int(10)\n    else if value\
    \ == \"11\" \n        closest_integer = Int(11)\n    else if value == \"12\" \n\
    \        closest_integer = Int(12)\n    else if value == \"13\" \n        closest_integer\
    \ = Int(13)\n    else if value == \"14\" \n        closest_integer = Int(14)\n\
    \    else if value == \"15\" \n        closest_integer = Int(15)\n    else if\
    \ value == \"16\" \n        closest_integer = Int(16)\n    else if value == \"\
    17\" \n        closest_integer = Int(17)\n    else if value == \"18\" \n     \
    \   closest_integer = Int(18)\n    else if value == \"19\" \n        closest_integer\
    \ = Int(19)\n    else if value == \"20\" \n        closest_integer = Int(20)\n\
    \    else if value == \"21\" \n        closest_integer = Int(21)\n    else if\
    \ value == \"22\" \n        closest_integer = Int(22)\n    else if value == \"\
    23\" \n        closest_integer = Int(23)\n    else if value == \"24\" \n     \
    \   closest_integer = Int(24)\n    else if value == \"25\" \n        closest_integer\
    \ = Int(25)\n    else if value == \"26\" \n        closest_integer = Int(26)\n\
    \    else if value == \"27\" \n        closest_integer = Int(27)\n    else if\
    \ value == \"28\" \n        closest_integer = Int(28)\n    else if value == \"\
    29\" \n        closest_integer = Int(29)\n    else if value == \"30\" \n     \
    \   closest_integer = Int(30)\n    else if value == \"31\" \n        closest_integer\
    \ = Int(31)\n    else if value == \"32\" \n        closest_integer = Int(32)\n\
    \    else if value == \"33\" \n", "    \n    if value == \"\"\n        return\
    \ -1\n    \n    number = parse_value(value)\n    \n    if number == -1\n     \
    \   return -1\n    \n    diff = abs(number - 1)\n    \n    if diff < abs(number\
    \ - 2)\n        return number - 1\n    \n    return number - 2\nend", "    \n\
    \    if value == \"\"\n        error(\"The value cannot be empty\")\n    \n  \
    \  number = parse_value(value)\n    \n    if number == 0\n        error(\"The\
    \ value cannot be 0\")\n    \n    diff = abs(number - 1)\n    \n    if diff <\
    \ abs(number - 2)\n        diff = abs(number - 2)\n    \n    if diff < abs(number\
    \ - 3)\n        diff = abs(number - 3)\n    \n    if diff < abs(number - 4)\n\
    \        diff = abs(number - 4)\n    \n    if diff < abs(number - 5)\n       \
    \ diff = abs(number - 5)\n    \n    if diff < abs(number - 6)\n        diff =\
    \ abs(number - 6)\n    \n    if diff < abs(number - 7)\n        diff = abs(number\
    \ - 7)\n    \n    if diff < abs(number - 8)\n        diff = abs(number - 8)\n\
    \    \n    if diff < abs(number - 9)\n        diff = abs(number - 9)\n    \n \
    \   if diff < abs(number - 10)\n        diff = abs(number - 10)\n    \n    if\
    \ diff < abs(number - 11)\n        diff = abs(number - 11)\n    \n    if diff\
    \ < abs(number - 12)\n        diff = abs(number - 12)\n    \n    if diff < abs(number\
    \ - 13)\n        diff = abs(number - 13)\n    \n    if diff < abs(number - 14)\n\
    \        diff = abs(number - 14)\n    \n    if diff < abs(number - 15)\n     \
    \   diff = abs(number - 15)\n    \n    if diff < abs(number - 16)\n        diff\
    \ = abs(number - 16)\n    \n    if diff < abs(number - 17)\n        diff = abs(number\
    \ - 17)\n    \n    if diff < abs(number - 18)\n        diff = abs(number - 18)\n\
    \    \n    if diff < abs(number - 19)\n        diff = abs(number - 19)\n    \n\
    \    if diff < abs(number - 20)\n        diff = abs(number - 20)\n    \n    if\
    \ diff < abs(number - 21)\n        diff = abs(number - 21)\n    \n    if diff\
    \ < abs(number - 22)\n        diff = abs(number - 22)\n    \n    if diff < abs(number\
    \ - 23)\n        diff = abs(number - 23)\n    \n    if diff < abs(number - 24)\n\
    \        diff = abs(number - 24)\n    \n    if diff < abs(number - 25)\n     \
    \   diff = abs(number - 25)\n    \n    if diff < abs(number - 26)\n        diff\
    \ = abs(number - 26)\n    \n    if diff < abs(number - 27)\n        diff = abs(number\
    \ - 27)\n    \n    if diff < abs(number - 28)\n        diff = abs(number - 28",
  "    if value == \"\"\n        error(\"value cannot be empty\")\n    else\n    \
    \    closest_integer(parse(Float64, value))\n    end\nend", "    \n    closest_integer\
    \ = Int64(math.ceil(Int64(value)))\n    \n    if closest_integer == Int64(value)\n\
    \        closest_integer = Int64(0)\n    end\n    \n    return closest_integer\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    closest_integers(values::Vector{String})",
  "    closest_integer = Int64(math.ceil(value))\n    if closest_integer == value:\n\
    \        closest_integer = Int64(math.floor(value))\n    return closest_integer\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    if value == \"-inf\" or value\
    \ == \"inf\" then\n        return math.nan\n    end", "    \n    closest_integer\
    \ = Int64(0)\n    \n    if value == \"-inf\" \n        closest_integer = -Int64(Int.max)\
    \ \n    else if value == \"inf\" \n        closest_integer = Int64(Int.max) \n\
    \    else if value == \"0\" \n        closest_integer = Int64(0) \n    else if\
    \ value == \"1\" \n        closest_integer = Int64(1) \n    else if value == \"\
    2\" \n        closest_integer = Int64(2) \n    else if value == \"3\" \n     \
    \   closest_integer = Int64(3) \n    else if value == \"4\" \n        closest_integer\
    \ = Int64(4) \n    else if value == \"5\" \n        closest_integer = Int64(5)\
    \ \n    else if value == \"6\" \n        closest_integer = Int64(6) \n    else\
    \ if value == \"7\" \n        closest_integer = Int64(7) \n    else if value ==\
    \ \"8\" \n        closest_integer = Int64(8) \n    else if value == \"9\" \n \
    \       closest_integer = Int64(9) \n    else if value == \"10\" \n        closest_integer\
    \ = Int64(10) \n    else if value == \"11\" \n        closest_integer = Int64(11)\
    \ \n    else if value == \"12\" \n        closest_integer = Int64(12) \n    else\
    \ if value == \"13\" \n        closest_integer = Int64(13) \n    else if value\
    \ == \"14\" \n        closest_integer = Int64(14) \n    else if value == \"15\"\
    \ \n        closest_integer = Int64(15) \n    else if value == \"16\" \n     \
    \   closest_integer = Int64(16) \n    else if value == \"17\" \n        closest_integer\
    \ = Int64(17) \n    else if value == \"18\" \n        closest_integer = Int64(18)\
    \ \n    else if value == \"19\" \n        closest_integer = Int64(19) \n    else\
    \ if value == \"20\" \n        closest_integer = Int64(20) \n    else if value\
    \ == \"21\" \n        closest_integer = Int64(21) \n    else if value == \"22\"\
    \ \n        closest_integer = Int64(22) \n    else if value == \"23\" \n     \
    \   closest_integer = Int64(23) \n    else if value == \"24\" \n        closest_integer\
    \ = Int64(24) \n    else if value == \"25\" \n        closest_integer = Int64(25)\
    \ \n    else if value == \"26\" \n        closest_integer = Int64(26) \n    else\
    \ if value == \"27\" \n        closest_integer = Int64(27) ", "    if value ==\
    \ \"\"\n        error(\"value cannot be empty\")\n    else\n        local closest_integer\
    \ = math.floor(math.abs(value))\n        if closest_integer == value\n       \
    \     error(\"value cannot be equidistant from two integers\")\n        else\n\
    \            return closest_integer\n        end\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a value (string) representing a number\n\
    and returns the closest float to it. If the number is equidistant\nfrom two floats,\
    \ round it away from zero.", "    \n    closest_integer = Int(0)\n    \n    if\
    \ value == \"-inf\" or value == \"inf\" or value == \"\"\n        closest_integer\
    \ = Int(0)\n    else\n        \n        digits = split(value, \".\")\n       \
    \ \n        if length(digits) == 2\n            \n            digit1 = digits[1]\n\
    \            digit2 = digits[2]\n            \n            if digit1 == \"\"\n\
    \                digit1 = \"0\"\n            \n            if digit2 == \"\"\n\
    \                digit2 = \"0\"\n            \n            digit1 = digit1\n \
    \           digit2 = digit2\n            \n            digit1 = digit1\n     \
    \       digit2 = digit2\n            \n            digit1 = digit1\n         \
    \   digit2 = digit2\n            \n            digit1 = digit1\n            digit2\
    \ = digit2\n            \n            digit1 = digit1\n            digit2 = digit2\n\
    \            \n            digit1 = digit1\n            digit2 = digit2\n    \
    \        \n            digit1 = digit1\n            digit2 = digit2\n        \
    \    \n            digit1 = digit1\n            digit2 = digit2\n            \n\
    \            digit1 = digit1\n            digit2 = digit2\n            \n    \
    \        digit1 = digit1\n            digit2 = digit2\n            \n        \
    \    digit1 = digit1\n            digit2 = digit2\n            \n            digit1\
    \ = digit1\n            digit2 = digit2\n            \n            digit1 = digit1\n\
    \            digit2 = digit2\n            \n            digit1 = digit1\n    \
    \        digit2 = digit2\n            \n            digit1 = digit1\n        \
    \    digit2 = digit2\n            \n            digit1 = digit1\n            digit2\
    \ = digit2\n            \n            digit1 = digit1\n            digit2 = digit2\n\
    \            \n            digit1 = digit1\n            digit2 = digit2\n    \
    \        \n            digit1 = digit1\n            digit2 = digit2\n        \
    \    \n            digit1 = digit1\n            digit2 = digit2\n            \n\
    \            digit1 = digit1\n            digit2 = digit2\n            \n    \
    \        digit1 = digit1\n            digit2 = digit2\n            \n        \
    \    digit1 = digit1\n            digit2 = digit2\n            \n            digit1\
    \ = digit1\n            digit2 = digit2\n            \n            digit1 = digit1\n\
    \            digit2 = digit2\n            \n            digit1 = digit1\n    \
    \        digit2 = digit2\n            \n            digit1 = digit1\n        \
    \    digit2 = digit2\n            \n            digit1 = digit1\n            digit2\
    \ = digit2\n            \n            digit1 = digit1\n            digit2 = digit2\n\
    \            \n            digit1 = digit1\n            digit2 = digit2\n    \
    \        ", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    closest_integer\
    \ = Int64(0)\n    \n    for number in value.split(\".\"):\n        number = number.replace(\"\
    ,\",\"\")\n        number = number.replace(\"+\",\"\")\n        number = number.replace(\"\
    -\",\"\")\n        number = number.replace(\"%\",\"\")\n        number = number.replace(\"\
    *\",\"\")\n        number = number.replace(\"/\",\"\")\n        number = number.replace(\"\
    +\",\"\")\n        number = number.replace(\"-\",\"\")\n        number = number.replace(\"\
    %\",\"\")\n        number = number.replace(\"*\",\"\")\n        number = number.replace(\"\
    /\",\"\")\n        number = number.replace(\"+\",\"\")\n        number = number.replace(\"\
    *\",\"\")\n        number = number.replace(\"/\",\"\")\n        number = number.replace(\"\
    +\",\"\")\n        number = number.replace(\"*\",\"\")\n        number = number.replace(\"\
    /\",\"\")\n        number = number.replace(\"+\",\"\")\n        number = number.replace(\"\
    *\",\"\")\n        number = number.replace(\"/\",\"\")\n        number = number.replace(\"\
    +\",\"\")\n        number = number.replace(\"*\",\"\")\n        number = number.replace(\"\
    /\",\"\")\n        number = number.replace(\"+\",\"\")\n        number = number.replace(\"\
    *\",\"\")\n        number = number.replace(\"/\",\"\")\n        number = number.replace(\"\
    +\",\"\")\n        number = number.replace(\"*\",\"\")\n        number = number.replace(\"\
    /\",\"\")\n        number = number.replace(\"+\",\"\")\n        number = number.replace(\"\
    *\",\"\")\n        number = number.replace(\"/\",\"\")\n        number = number.replace(\"\
    +\",\"\")\n        number = number.replace(\"*\",\"\")\n        number = number.replace(\"\
    /\",\"\")\n        number = number.replace(\"+\",\"\")\n        number = number.replace(\"\
    *\",\"\")\n        number = number.replace(\"/\",\"\")\n        number = number.replace(\"\
    +\",\"\")\n        number = number.replace(\"*\",\"\")\n        number = number.replace(\"\
    /\",\"\")\n        number = number.replace(\"+\",\"\")\n        number = number.replace(\"\
    *\",\"\")\n        number = number.replace(\"/\",\"\")\n        number = number.replace(\"\
    +\",\"\")\n        number = number.replace(\"*\",\"\")\n        number = number.replace(\"\
    /\",\"\")\n        number = number.replace(\"+\",\"\")\n        number = number.replace(\"\
    *\",\"\")\n        number = number.replace(\"/\",\"\")\n        number = number.replace(\"\
    +\",\"\")\n        number = number.replace(\"*\",\"\")\n        number = number.replace(\"\
    /\",\"\")\n        number = number.replace(\"+\",\"\")\n        number = number.replace(\"\
    *\",\"\")\n        number = number.replace(\"/\",\"\")\n        number = number.replace(\"\
    +\",\"\")\n        number = number.replace(\"*\",\"\")\n        number = number.replace(\"\
    /\",\"\")\n        number = number.replace(\"+\",\"\")\n        number = number.replace(\"\
    *\",\"\")\n        number = number.replace(\"/\",\"\")\n        number = number.replace(\"\
    +\",\"\")\n        number = number.replace(\"*\",\"\")\n        number = ", " \
    \   closest_integer = Int(0)\n    \n    \n    if value == \"\"\n        return\
    \ closest_integer\n    \n    \n    if value == \"-\"\n        return -closest_integer\n\
    \    \n    \n    if value == \"+\"\n        return closest_integer\n    \n   \
    \ \n    if value == \"0\"\n        return 0\n    \n    \n    if value == \"1\"\
    \n        return 1\n    \n    \n    if value == \"2\"\n        return 2\n    \n\
    \    \n    if value == \"3\"\n        return 3\n    \n    \n    if value == \"\
    4\"\n        return 4\n    \n    \n    if value == \"5\"\n        return 5\n \
    \   \n    \n    if value == \"6\"\n        return 6\n    \n    \n    if value\
    \ == \"7\"\n        return 7\n    \n    \n    if value == \"8\"\n        return\
    \ 8\n    \n    \n    if value == \"9\"\n        return 9\n    \n    \n    if value\
    \ == \"10\"\n        return 10\n    \n    \n    if value == \"11\"\n        return\
    \ 11\n    \n    \n    if value == \"12\"\n        return 12\n    \n    \n    if\
    \ value == \"13\"\n        return 13\n    \n    \n    if value == \"14\"\n   \
    \     return 14\n    \n    \n    if value == \"15\"\n        return 15\n    \n\
    \    \n    if value == \"16\"\n        return 16\n    \n    \n    if value ==\
    \ \"17\"\n        return 17\n    \n    \n    if value == \"18\"\n        return\
    \ 18\n    \n    \n    if value == \"19\"\n        return 19\n    \n    \n    if\
    \ value == \"20\"\n        return 20\n    \n    \n    if value == \"21\"\n   \
    \     return 21\n    \n    \n    if value == \"22\"\n        return 22\n    \n\
    \    \n    if value == \"23\"\n        return 23\n    \n    \n    if value ==\
    \ \"24\"\n        return 24\n    \n    \n    if value == \"25\"\n        return\
    \ 25\n    \n    \n    if value == \"26\"\n        return 26\n    \n    \n    if\
    \ value == \"27\"\n        return 27\n    \n    \n    if value == \"28\"\n   \
    \     return 28\n    \n    \n    if value == \"29\"\n        return 29\n    \n\
    \    \n    if value == \"30\"\n        return 30\n    \n    \n    if value ==\
    \ \"31\"\n        return 31\n    \n    \n    if value == \"32\"\n        return\
    \ 32\n    \n    \n    if value == \"33\"\n        return 33\n    \n    \n    if\
    \ value == \"34\"\n        return 34\n    \n    \n    if value == \"35\"\n   \
    \     return 35\n    \n    \n    if value == \"36", "    closest_integer = Int(0)\n\
    \    \n    if value == \"-inf\" or value == \"inf\" or value == \"nan\" then return\
    \ closest_integer\n    \n    \n    if value == \"-inf\" then return -Inf \n  \
    \  if value == \"inf\" then return Inf \n    if value == \"nan\" then return Inf\
    \ \n    \n    if value == \"0\" then return 0 \n    \n    if value == \"1\" then\
    \ return 1 \n    \n    if value == \"2\" then return 2 \n    \n    if value ==\
    \ \"3\" then return 3 \n    \n    if value == \"4\" then return 4 \n    \n   \
    \ if value == \"5\" then return 5 \n    \n    if value == \"6\" then return 6\
    \ \n    \n    if value == \"7\" then return 7 \n    \n    if value == \"8\" then\
    \ return 8 \n    \n    if value == \"9\" then return 9 \n    \n    if value ==\
    \ \"10\" then return 10 \n    \n    if value == \"11\" then return 11 \n    \n\
    \    if value == \"12\" then return 12 \n    \n    if value == \"13\" then return\
    \ 13 \n    \n    if value == \"14\" then return 14 \n    \n    if value == \"\
    15\" then return 15 \n    \n    if value == \"16\" then return 16 \n    \n   \
    \ if value == \"17\" then return 17 \n    \n    if value == \"18\" then return\
    \ 18 \n    \n    if value == \"19\" then return 19 \n    \n    if value == \"\
    20\" then return 20 \n    \n    if value == \"21\" then return 21 \n    \n   \
    \ if value == \"22\" then return 22 \n    \n    if value == \"23\" then return\
    \ 23 \n    \n    if value == \"24\" then return 24 \n    \n    if value == \"\
    25\" then return 25 \n    \n    if value == \"26\" then return 26 \n    \n   \
    \ if value == \"27\" then return 27 \n    \n    if value == \"28\" then return\
    \ 28 \n    \n    if value == \"29\" then return 29 \n    \n    if value == \"\
    30\" then return 30 \n    \n    if value == \"31\" then return 31 \n    \n   \
    \ if value == \"32\" then return 32 \n    \n    if value == \"33\" then return\
    \ 33 \n    \n    if value == \"34\" then return 34 \n    \n    if value == \"\
    35\" then return 35 \n    \n    if value == \"36\" then return 36 \n    \n   \
    \ if value == \"37\" then return 37 \n    \n    if value == \"38\" then return\
    \ 38 \n    \n    if value == \"39\" then return 39 \n    \n    if value == \"\
    40\" then ", "    if value == \"\"\n        error(\"value cannot be empty\")\n\
    \    else\n        closest_integer(parse(Float64, value))\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    closest_integer = Int(0)\n    closest_integer\
    \ = closest_integer + Int(value) \n    closest_integer = closest_integer - Int(value)\
    \ \n    closest_integer = closest_integer + Int(value) \n    closest_integer =\
    \ closest_integer - Int(value) \n    closest_integer = closest_integer + Int(value)\
    \ \n    closest_integer = closest_integer - Int(value) \n    closest_integer =\
    \ closest_integer + Int(value) \n    closest_integer = closest_integer - Int(value)\
    \ \n    closest_integer = closest_integer + Int(value) \n    closest_integer =\
    \ closest_integer - Int(value) \n    closest_integer = closest_integer + Int(value)\
    \ \n    closest_integer = closest_integer - Int(value) \n    closest_integer =\
    \ closest_integer + Int(value) \n    closest_integer = closest_integer - Int(value)\
    \ \n    closest_integer = closest_integer + Int(value) \n    closest_integer =\
    \ closest_integer - Int(value) \n    closest_integer = closest_integer + Int(value)\
    \ \n    closest_integer = closest_integer - Int(value) \n    closest_integer =\
    \ closest_integer + Int(value) \n    closest_integer = closest_integer - Int(value)\
    \ \n    closest_integer = closest_integer + Int(value) \n    closest_integer =\
    \ closest_integer - Int(value) \n    closest_integer = closest_integer + Int(value)\
    \ \n    closest_integer = closest_integer - Int(value) \n    closest_integer =\
    \ closest_integer + Int(value) \n    closest_integer = closest_integer - Int(value)\
    \ \n    closest_integer = closest_integer + Int(value) \n    closest_integer =\
    \ closest_integer - Int(value) \n    closest_integer = closest_integer + Int(value)\
    \ \n    closest_integer = closest_integer - Int(value) \n    closest_integer =\
    \ closest_integer + Int(value) \n    closest_integer = closest_integer - Int(value)\
    \ \n    closest_integer = closest_integer + Int(value) \n    closest_integer =\
    \ closest_integer - Int(value) \n    closest_integer = closest_integer + Int(value)\
    \ \n    closest_integer = closest_integer - Int(value) \n    closest_integer =\
    \ closest_integer + Int(value) \n    closest_integer = closest_integer - Int(value)\
    \ \n    closest_integer = closest_integer + Int(value) \n    closest_integer =\
    \ closest_integer - Int(value) \n    closest_integer = closest_integer + Int(value)\
    \ \n    closest_integer = closest_integer - Int(value) \n    closest_integer =\
    \ closest_integer + Int(value) \n    closest_integer = closest_integer - Int(value)\
    \ \n    closest_integer = closest_integer + Int(value) \n    closest_integer =\
    \ closest_integer - Int(value) ", "    if value == \"\"\n        error(\"The value\
    \ cannot be empty\")\n    else\n        closest_integer(parse(Float64, value))\n\
    \    end\nend", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   closest_integer = Int64(math.ceil(value))\n    if closest_integer == value:\n\
    \        closest_integer = Int64(math.floor(value))\n    return closest_integer\n\
    end", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    if\
    \ value == \"\"\n        return -1\n    \n    number = parse(Float64, value)\n\
    \    \n    if number == 0.0\n        return -1\n    \n    diff = abs(number -\
    \ 1)\n    \n    if diff < abs(number - 2)\n        return number\n    \n    diff\
    \ = abs(number - 2)\n    \n    if diff < abs(number - 3)\n        return number\
    \ + 1\n    \n    diff = abs(number - 3)\n    \n    if diff < abs(number - 4)\n\
    \        return number + 2\n    \n    diff = abs(number - 4)\n    \n    if diff\
    \ < abs(number - 5)\n        return number + 3\n    \n    diff = abs(number -\
    \ 5)\n    \n    if diff < abs(number - 6)\n        return number + 4\n    \n \
    \   diff = abs(number - 6)\n    \n    if diff < abs(number - 7)\n        return\
    \ number + 5\n    \n    diff = abs(number - 7)\n    \n    if diff < abs(number\
    \ - 8)\n        return number + 6\n    \n    diff = abs(number - 8)\n    \n  \
    \  if diff < abs(number - 9)\n        return number + 7\n    \n    diff = abs(number\
    \ - 9)\n    \n    if diff < abs(number - 10)\n        return number + 8\n    \n\
    \    diff = abs(number - 10)\n    \n    if diff < abs(number - 11)\n        return\
    \ number + 9\n    \n    diff = abs(number - 11)\n    \n    if diff < abs(number\
    \ - 12)\n        return number + 10\n    \n    diff = abs(number - 12)\n    \n\
    \    if diff < abs(number - 13)\n        return number + 11\n    \n    diff =\
    \ abs(number - 13)\n    \n    if diff < abs(number - 14)\n        return number\
    \ + 12\n    \n    diff = abs(number - 14)\n    \n    if diff < abs(number - 15)\n\
    \        return number + 13\n    \n    diff = abs(number - 15)\n    \n    if diff\
    \ < abs(number - 16)\n        return number + 14\n    \n    diff = abs(number\
    \ - 16)\n    \n    if diff < abs(number - 17)\n        return number + 15\n  \
    \  \n    diff = abs(number - 17)\n    \n    if diff < abs(number - 18)\n     \
    \   return number + 16\n    \n    diff = abs(number - 18)\n    \n    if diff <\
    \ abs(number - 19)\n        return number + 17\n    \n    diff = abs(number -\
    \ 19)\n    \n    if diff < abs(number - 20)\n        return number + 18\n    \n\
    \    diff = abs(number - 20)\n    \n    if diff < abs(number - 21)\n        return\
    \ number + 19\n    \n    diff = abs(", "    closest_integer = Int(0)\n    \n \
    \   if value == \"-inf\" \n        closest_integer = Int(-Inf)\n    else if value\
    \ == \"inf\" \n        closest_integer = Int(Inf)\n    else if value == \"nan\"\
    \ \n        closest_integer = Int(NaN)\n    else if value == \"0\" \n        closest_integer\
    \ = Int(0)\n    else if value == \"1\" \n        closest_integer = Int(1)\n  \
    \  else if value == \"2\" \n        closest_integer = Int(2)\n    else if value\
    \ == \"3\" \n        closest_integer = Int(3)\n    else if value == \"4\" \n \
    \       closest_integer = Int(4)\n    else if value == \"5\" \n        closest_integer\
    \ = Int(5)\n    else if value == \"6\" \n        closest_integer = Int(6)\n  \
    \  else if value == \"7\" \n        closest_integer = Int(7)\n    else if value\
    \ == \"8\" \n        closest_integer = Int(8)\n    else if value == \"9\" \n \
    \       closest_integer = Int(9)\n    else if value == \"10\" \n        closest_integer\
    \ = Int(10)\n    else if value == \"11\" \n        closest_integer = Int(11)\n\
    \    else if value == \"12\" \n        closest_integer = Int(12)\n    else if\
    \ value == \"13\" \n        closest_integer = Int(13)\n    else if value == \"\
    14\" \n        closest_integer = Int(14)\n    else if value == \"15\" \n     \
    \   closest_integer = Int(15)\n    else if value == \"16\" \n        closest_integer\
    \ = Int(16)\n    else if value == \"17\" \n        closest_integer = Int(17)\n\
    \    else if value == \"18\" \n        closest_integer = Int(18)\n    else if\
    \ value == \"19\" \n        closest_integer = Int(19)\n    else if value == \"\
    20\" \n        closest_integer = Int(20)\n    else if value == \"21\" \n     \
    \   closest_integer = Int(21)\n    else if value == \"22\" \n        closest_integer\
    \ = Int(22)\n    else if value == \"23\" \n        closest_integer = Int(23)\n\
    \    else if value == \"24\" \n        closest_integer = Int(24)\n    else if\
    \ value == \"25\" \n        closest_integer = Int(25)\n    else if value == \"\
    26\" \n        closest_integer = Int(26)\n    else if value == \"27\" \n     \
    \   closest_integer = Int(27)\n    else if value == \"28\" \n        closest_integer\
    \ = Int(28)\n    else if value == \"29\" \n        closest_integer = Int(29)\n\
    \    else ", "    closest_integer = int64(0)\n    closest_integer = int64(math.ceil(float64(value)))\n\
    \    if closest_integer == int64(0) || closest_integer == int64(1) || closest_integer\
    \ == int64(-1) || closest_integer == int64(-2)\n        closest_integer = int64(math.floor(float64(value)))\n\
    \    end\n    return closest_integer\nend\n</cell>\n<code language=julia-1.5>",
  "    closest_integer = Int64(math.ceil(value))\n    if closest_integer == value:\n\
    \        closest_integer = Int64(math.floor(value))\n        if closest_integer\
    \ == value:\n            closest_integer = Int64(math.round(value))\n        \
    \    if closest_integer == value:\n                closest_integer = Int64(math.trunc(value))\n\
    \                if closest_integer == value:\n                    closest_integer\
    \ = Int64(math.floor(value))\n                    if closest_integer == value:\n\
    \                        closest_integer = Int64(math.ceil(value))\n         \
    \               if closest_integer == value:\n                            closest_integer\
    \ = Int64(math.round(value))\n                            if closest_integer ==\
    \ value:\n                                closest_integer = Int64(math.trunc(value))\n\
    \                                if closest_integer == value:\n              \
    \                      closest_integer = Int64(math.floor(value))\n          \
    \                          if closest_integer == value:\n                    \
    \                    closest_integer = Int64(math.ceil(value))\n             \
    \                           if closest_integer == value:\n                   \
    \                         closest_integer = Int64(math.round(value))\n       \
    \                                     if closest_integer == value:\n         \
    \                                       closest_integer = Int64(math.trunc(value))\n\
    \                                                if closest_integer == value:\n\
    \                                                    closest_integer = Int64(math.floor(value))\n\
    \                                                    if closest_integer == value:\n\
    \                                                        closest_integer = Int64(math.ceil(value))\n\
    \                                                        if closest_integer ==\
    \ value:\n                                                            closest_integer\
    \ = Int64(math.round(value))\n                                               \
    \             if closest_integer == value:\n                                 \
    \                               closest_integer = Int64(math.trunc(value))\n \
    \                                                               if closest_integer\
    \ == value:\n                                                                \
    \    closest_integer = Int64(math.floor(value))\n                            \
    \                                        if closest_integer == value:\n      \
    \                                                                  closest_integer\
    \ = Int64(math.ceil(value))\n                                                \
    \        if closest_integer == value:\n                                      \
    \                      closest_integer = Int64(math.round(value))\n          \
    \                                                  if closest_integer == value:\n\
    \                                                                closest_integer\
    \ = Int64(math.trunc(value))\n                                               \
    \                 if closest_integer == value:\n                             \
    \                                       closest_integer = Int64(math.floor(value))\n\
    \                                                                    if closest_integer\
    \ == value:\n                                                                \
    \        closest_integer = Int64(math.ceil(value))\n                         \
    \                               if closest_integer == value:\n               \
    \                                             closest_integer = Int64(math.round(value))\n\
    \                                                            if closest_integer\
    \ == value:\n                                                                closest_integer\
    \ = Int64(math.trunc(value))\n                                               \
    \                 if closest_integer == value:\n                             \
    \                                       closest_integer = Int64(math.floor(value))\n\
    \                                                                    if closest_integer\
    \ == value:\n                                                                \
    \        closest_integer = Int64(math.ceil(value))\n                         \
    \                               if closest_integer == value:\n               \
    \                                             closest_integer = Int64(math.round(value))\n\
    \                                                            if closest_integer\
    \ == value:\n                                                                closest_integer\
    \ = Int64(math.trunc(value))\n                                               \
    \                 if closest_integer == value:\n                             \
    \                                       closest_integer = Int64(", "    closest_integer\
    \ = math.ceil(value)\n    if closest_integer == value:\n        closest_integer\
    \ = math.floor(value)\n    return closest_integer\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    closest_integer(value::Float64)", "    closest_integer = Int64(math.ceil(value))\n\
    \    if closest_integer == value:\n        closest_integer = Int64(math.floor(value))\n\
    \    return closest_integer\nend", "    closest_integer = Int(0)\n    \n    if\
    \ value == \"0\" || value == \"-0\" \n        then return Int(0)\n    \n    if\
    \ value == \"1\" || value == \"-1\" \n        then return Int(1)\n    \n    if\
    \ value == \"2\" || value == \"-2\" \n        then return Int(2)\n    \n    if\
    \ value == \"3\" || value == \"-3\" \n        then return Int(3)\n    \n    if\
    \ value == \"4\" || value == \"-4\" \n        then return Int(4)\n    \n    if\
    \ value == \"5\" || value == \"-5\" \n        then return Int(5)\n    \n    if\
    \ value == \"6\" || value == \"-6\" \n        then return Int(6)\n    \n    if\
    \ value == \"7\" || value == \"-7\" \n        then return Int(7)\n    \n    if\
    \ value == \"8\" || value == \"-8\" \n        then return Int(8)\n    \n    if\
    \ value == \"9\" || value == \"-9\" \n        then return Int(9)\n    \n    if\
    \ value == \"10\" || value == \"-10\" \n        then return Int(10)\n    \n  \
    \  if value == \"11\" || value == \"-11\" \n        then return Int(11)\n    \n\
    \    if value == \"12\" || value == \"-12\" \n        then return Int(12)\n  \
    \  \n    if value == \"13\" || value == \"-13\" \n        then return Int(13)\n\
    \    \n    if value == \"14\" || value == \"-14\" \n        then return Int(14)\n\
    \    \n    if value == \"15\" || value == \"-15\" \n        then return Int(15)\n\
    \    \n    if value == \"16\" || value == \"-16\" \n        then return Int(16)\n\
    \    \n    if value == \"17\" || value == \"-17\" \n        then return Int(17)\n\
    \    \n    if value == \"18\" || value == \"-18\" \n        then return Int(18)\n\
    \    \n    if value == \"19\" || value == \"-19\" \n        then return Int(19)\n\
    \    \n    if value == \"20\" || value == \"-20\" \n        then return Int(20)\n\
    \    \n    if value == \"21\" || value == \"-21\" \n        then return Int(21)\n\
    \    \n    if value == \"22\" || value == \"-22\" \n        then return Int(22)\n\
    \    \n    if value == \"23\" || value == \"-23\" \n        then return Int(23)\n\
    \    \n    if value == \"24\" || value == \"-24\" \n        then return Int(24)\n\
    \    \n    if value == \"25\" || value == \"-25\" \n        then return Int(25)\n\
    \    \n    if value == \"26\" || value == \"-26\" \n        then return Int(26)\n\
    \    \n    if value == \"27\" || value == \"-27", "    if value == \"-inf\" \n\
    \    then return -Inf \n    else if value == \"inf\" \n    then return Inf \n\
    \    else if value == \"nan\" \n    then return NaN \n    else \n        local\
    \ closest::Int64 = Inf \n        local diff::Int64 = Inf \n        local digits::Int64\
    \ = 0 \n        local digit::Int64 = 0 \n        local digits::Int64 = 0 \n  \
    \      local digit::Int64 = 0 \n        local digits::Int64 = 0 \n        local\
    \ digit::Int64 = 0 \n        local digits::Int64 = 0 \n        local digit::Int64\
    \ = 0 \n        local digits::Int64 = 0 \n        local digit::Int64 = 0 \n  \
    \      local digits::Int64 = 0 \n        local digit::Int64 = 0 \n        local\
    \ digits::Int64 = 0 \n        local digit::Int64 = 0 \n        local digits::Int64\
    \ = 0 \n        local digit::Int64 = 0 \n        local digits::Int64 = 0 \n  \
    \      local digit::Int64 = 0 \n        local digits::Int64 = 0 \n        local\
    \ digit::Int64 = 0 \n        local digits::Int64 = 0 \n        local digit::Int64\
    \ = 0 \n        local digits::Int64 = 0 \n        local digit::Int64 = 0 \n  \
    \      local digits::Int64 = 0 \n        local digit::Int64 = 0 \n        local\
    \ digits::Int64 = 0 \n        local digit::Int64 = 0 \n        local digits::Int64\
    \ = 0 \n        local digit::Int64 = 0 \n        local digits::Int64 = 0 \n  \
    \      local digit::Int64 = 0 \n        local digits::Int64 = 0 \n        local\
    \ digit::Int64 = 0 \n        local digits::Int64 = 0 \n        local digit::Int64\
    \ = 0 \n        local digits::Int64 = 0 \n        local digit::Int64 = 0 \n  \
    \      local digits::Int64 = 0 \n        local digit::Int64 = 0 \n        local\
    \ digits::Int64 = 0 \n        local digit::Int64 = 0 \n        local digits::Int64\
    \ = 0 \n        local digit::Int64 = 0 \n        local digits::Int64 = 0 \n  \
    \      local digit::Int64 = 0 \n        local digits::Int64 = 0 \n        local\
    \ digit::Int64 = 0 \n        local digits::Int64 = 0 \n        local digit::Int64\
    \ = 0 \n        local digits::Int64 = 0 \n        local digit::Int64 = 0 \n  \
    \      local digits::Int64 = 0 \n        local digit::Int64 = 0 \n        local\
    \ digits::Int64 = 0 \n        local digit::Int64 = 0 ", "    closest_integer =\
    \ int64(0)\n    \n    for x in value.split(\".\"):\n        closest_integer =\
    \ int64(closest_integer * 10 + int64(x))\n    \n    if closest_integer == int64(0):\n\
    \        closest_integer = int64(1)\n    \n    return closest_integer\nend\n</cell>\n\
    <code language=julia-1.4>\n\"\"\"\n    closest_integers(value::String)::Vector{Int64}",
  "    if value == \"\"\n        error(\"value cannot be empty\")\n    elseif value\
    \ == \"-\"\n        error(\"value cannot be negative\")\n    elseif value == \"\
    +\"\n        error(\"value cannot be positive\")\n    elseif value == \"0\"\n\
    \        error(\"value cannot be 0\")\n    elseif value == \"1\"\n        error(\"\
    value cannot be 1\")\n    elseif value == \"2\"\n        error(\"value cannot\
    \ be 2\")\n    elseif value == \"3\"\n        error(\"value cannot be 3\")\n \
    \   elseif value == \"4\"\n        error(\"value cannot be 4\")\n    elseif value\
    \ == \"5\"\n        error(\"value cannot be 5\")\n    elseif value == \"6\"\n\
    \        error(\"value cannot be 6\")\n    elseif value == \"7\"\n        error(\"\
    value cannot be 7\")\n    elseif value == \"8\"\n        error(\"value cannot\
    \ be 8\")\n    elseif value == \"9\"\n        error(\"value cannot be 9\")\n \
    \   else\n        error(\"value cannot be converted to Int64\")\n    end\n   \
    \ \n    digits = value.digits\n    \n    if digits[1] == \"\"\n        error(\"\
    value cannot be empty\")\n    elseif digits[1] == \"-\"\n        error(\"value\
    \ cannot be negative\")\n    elseif digits[1] == \"+\"\n        error(\"value\
    \ cannot be positive\")\n    elseif digits[1] == \"0\"\n        error(\"value\
    \ cannot be 0\")\n    elseif digits[1] == \"1\"\n        error(\"value cannot\
    \ be 1\")\n    elseif digits[1] == \"2\"\n        error(\"value cannot be 2\"\
    )\n    elseif digits[1] == \"3\"\n        error(\"value cannot be 3\")\n    elseif\
    \ digits[1] == \"4\"\n        error(\"value cannot be 4\")\n    elseif digits[1]\
    \ == \"5\"\n        error(\"value cannot be 5\")\n    elseif digits[1] == \"6\"\
    \n        error(\"value cannot be 6\")\n    elseif digits[1] == \"7\"\n      \
    \  error(\"value cannot be 7\")\n    elseif digits[1] == \"8\"\n        error(\"\
    value cannot be 8\")\n    elseif digits[1] == \"9\"\n        error(\"value cannot\
    \ be 9\")\n    else\n        error(\"value cannot be converted to Int64\")\n \
    \   end\n    \n    digits[1] = digits[1].toInt64()\n    \n    if digits[1] ==\
    \ -1\n        error(\"value cannot be negative\")\n    elseif digits[1] == +1\n\
    \        error(\"value cannot be positive\")\n    elseif digits[1] == 0\n    \
    \    error(\"value cannot be 0\")\n    elseif digits[1] == 1\n        error(\"\
    value cannot be 1\")\n    elseif digits[1] == 2\n        error(\"value cannot\
    \ be 2\")\n    elseif digits[1] == 3\n        error(\"value cannot be 3\")\n \
    \   elseif digits[1] == 4\n        error(\"value cannot be 4\")\n    elseif digits[1]\
    \ == 5\n        error(\"value cannot be 5\")\n    elseif digits[1] == 6\n    \
    \    error(\"value cannot be 6\")\n    elseif digit", "    closest_integer = Int64(math.ceil(value))\n\
    \    if closest_integer == value \n        closest_integer = Int64(math.floor(value))\n\
    \    else \n        closest_integer = Int64(math.floor(closest_integer))\n   \
    \ return closest_integer\nend\n</cell>\n<code language=julia-1.4>", "    closest_integer\
    \ = Int64(math.ceil(value))\n    if closest_integer == value\n        closest_integer\
    \ = Int64(math.floor(value))\n    end\n    return closest_integer\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    closest_integer(value::Float64)", "   \
    \ closest_integer = Int64(math.ceil(value))\n    if closest_integer == value:\n\
    \        closest_integer = Int64(math.floor(value))\n    return closest_integer\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    closest_integers(values::Vector{String})",
  "    \n    if value == \"\"\n        return -1\n    \n    number = tofloat(value)\n\
    \    \n    if number == 0\n        return 0\n    \n    diff = abs(number - floor(number))\n\
    \    \n    if diff < abs(number - ceil(number))\n        return floor(number)\n\
    \    else\n        return ceil(number)\nend", "    if value == \"\"\n        error(\"\
    value cannot be empty\")\n    elseif value == \"-\"\n        error(\"value cannot\
    \ be negative\")\n    elseif value == \"+\"\n        error(\"value cannot be positive\"\
    )\n    else\n        val :: String = value\n        val :: Int64 = parse(val)\n\
    \        val :: Int64 = round(val)\n        val :: Int64 = val - 1\n        val\
    \ :: Int64 = val + 1\n        val\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    Create a function that takes a value (string) representing a number\n\
    \    and returns the closest float to it. If the number is equidistant\n    from\
    \ two integers, round it away from zero.", "    if value == \"\"\n        error(\"\
    value cannot be empty\")\n    end\n    \n    if value == \"0\"\n        return\
    \ 0\n    end", "    \n    if value == \"\"\n        error(\"The value cannot be\
    \ empty\")\n    end\n    \n    if value == \"-\"\n        return -closest_integer(value[end])\n\
    \    end\n    \n    digits = split(value, \".\")\n    \n    if length(digits)\
    \ == 2\n        digits[1] = digits[1] * 10\n    end\n    \n    digits[1] = digits[1]\
    \ * 10\n    \n    if digits[1] == 0 \n        error(\"The value cannot be equidistant\
    \ from two integers\")\n    end\n    \n    digits[1] = digits[1] / 10\n    \n\
    \    if digits[1] == 0 \n        error(\"The value cannot be equidistant from\
    \ two integers\")\n    end\n    \n    digits[1] = digits[1] % 10\n    \n    if\
    \ digits[1] == 0 \n        error(\"The value cannot be equidistant from two integers\"\
    )\n    end\n    \n    digits[1] = digits[1] / 10\n    \n    if digits[1] == 0\
    \ \n        error(\"The value cannot be equidistant from two integers\")\n   \
    \ end\n    \n    digits[1] = digits[1] % 10\n    \n    if digits[1] == 0 \n  \
    \      error(\"The value cannot be equidistant from two integers\")\n    end\n\
    \    \n    digits[1] = digits[1] / 10\n    \n    if digits[1] == 0 \n        error(\"\
    The value cannot be equidistant from two integers\")\n    end\n    \n    digits[1]\
    \ = digits[1] % 10\n    \n    if digits[1] == 0 \n        error(\"The value cannot\
    \ be equidistant from two integers\")\n    end\n    \n    digits[1] = digits[1]\
    \ / 10\n    \n    if digits[1] == 0 \n        error(\"The value cannot be equidistant\
    \ from two integers\")\n    end\n    \n    digits[1] = digits[1] % 10\n    \n\
    \    if digits[1] == 0 \n        error(\"The value cannot be equidistant from\
    \ two integers\")\n    end\n    \n    digits[1] = digits[1] / 10\n    \n    if\
    \ digits[1] == 0 \n        error(\"The value cannot be equidistant from two integers\"\
    )\n    end\n    \n    digits[1] = digits[1] % 10\n    \n    if digits[1] == 0\
    \ \n        error(\"The value cannot be equidistant from two integers\")\n   \
    \ end\n    \n    digits[1] = digits[1] / 10\n    \n    if digits[1] == 0 \n  \
    \      error(\"The value cannot be equidistant from two integers\")\n    end\n\
    \    \n    digits[1] = digits[1] % 10\n    \n    if digits[1] == 0 \n        error(\"\
    The value cannot be equidistant ", "    if value == \"\"\n        error(\"value\
    \ cannot be empty\")\n    else\n        closest_integer(parse(Float64, value))\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ representing a number and returns\nthe closest float to it. If the number is\
    \ equidistant from two floats,\nround it away from zero.", "    closest_integer\
    \ = int64(0)\n    \n    if value == \"0\" || value == \"-0\" \n        then return\
    \ int64(0)\n    \n    if value == \"1\" || value == \"-1\" \n        then return\
    \ int64(1)\n    \n    if value == \"2\" || value == \"-2\" \n        then return\
    \ int64(2)\n    \n    if value == \"3\" || value == \"-3\" \n        then return\
    \ int64(3)\n    \n    if value == \"4\" || value == \"-4\" \n        then return\
    \ int64(4)\n    \n    if value == \"5\" || value == \"-5\" \n        then return\
    \ int64(5)\n    \n    if value == \"6\" || value == \"-6\" \n        then return\
    \ int64(6)\n    \n    if value == \"7\" || value == \"-7\" \n        then return\
    \ int64(7)\n    \n    if value == \"8\" || value == \"-8\" \n        then return\
    \ int64(8)\n    \n    if value == \"9\" || value == \"-9\" \n        then return\
    \ int64(9)\n    \n    if value == \"10\" || value == \"-10\" \n        then return\
    \ int64(10)\n    \n    if value == \"11\" || value == \"-11\" \n        then return\
    \ int64(11)\n    \n    if value == \"12\" || value == \"-12\" \n        then return\
    \ int64(12)\n    \n    if value == \"13\" || value == \"-13\" \n        then return\
    \ int64(13)\n    \n    if value == \"14\" || value == \"-14\" \n        then return\
    \ int64(14)\n    \n    if value == \"15\" || value == \"-15\" \n        then return\
    \ int64(15)\n    \n    if value == \"16\" || value == \"-16\" \n        then return\
    \ int64(16)\n    \n    if value == \"17\" || value == \"-17\" \n        then return\
    \ int64(17)\n    \n    if value == \"18\" || value == \"-18\" \n        then return\
    \ int64(18)\n    \n    if value == \"19\" || value == \"-19\" \n        then return\
    \ int64(19)\n    \n    if value == \"20\" || value == \"-20\" \n        then return\
    \ int64(20)\n    \n    if value == \"21\" || value == \"-21\" \n        then return\
    \ int64(21)\n    \n    if value == \"22\" || value == \"-22\" \n        then return\
    \ int64(22)\n    \n    if value == \"23\" || value == \"-23\" \n        then return\
    \ int64(23)\n    \n    if value == \"24\" || value == \"-24\" \n        then return\
    \ int64(24)\n    \n    if value == \"25\" || value == \"-25\" \n        then return\
    \ int64(25)\n    \n    if value == \"26\" || value == \"-26", "    closest_integer\
    \ = Int(0)\n    \n    if value == \"\"\n        return closest_integer\n    \n\
    \    if value == \"-\"\n        return -closest_integer\n    \n    if value ==\
    \ \"+\"\n        return closest_integer\n    \n    if value == \"0\"\n       \
    \ return 0\n    \n    if value == \"1\"\n        return 1\n    \n    if value\
    \ == \"2\"\n        return 2\n    \n    if value == \"3\"\n        return 3\n\
    \    \n    if value == \"4\"\n        return 4\n    \n    if value == \"5\"\n\
    \        return 5\n    \n    if value == \"6\"\n        return 6\n    \n    if\
    \ value == \"7\"\n        return 7\n    \n    if value == \"8\"\n        return\
    \ 8\n    \n    if value == \"9\"\n        return 9\n    \n    if value == \"10\"\
    \n        return 10\n    \n    if value == \"11\"\n        return 11\n    \n \
    \   if value == \"12\"\n        return 12\n    \n    if value == \"13\"\n    \
    \    return 13\n    \n    if value == \"14\"\n        return 14\n    \n    if\
    \ value == \"15\"\n        return 15\n    \n    if value == \"16\"\n        return\
    \ 16\n    \n    if value == \"17\"\n        return 17\n    \n    if value == \"\
    18\"\n        return 18\n    \n    if value == \"19\"\n        return 19\n   \
    \ \n    if value == \"20\"\n        return 20\n    \n    if value == \"21\"\n\
    \        return 21\n    \n    if value == \"22\"\n        return 22\n    \n  \
    \  if value == \"23\"\n        return 23\n    \n    if value == \"24\"\n     \
    \   return 24\n    \n    if value == \"25\"\n        return 25\n    \n    if value\
    \ == \"26\"\n        return 26\n    \n    if value == \"27\"\n        return 27\n\
    \    \n    if value == \"28\"\n        return 28\n    \n    if value == \"29\"\
    \n        return 29\n    \n    if value == \"30\"\n        return 30\n    \n \
    \   if value == \"31\"\n        return 31\n    \n    if value == \"32\"\n    \
    \    return 32\n    \n    if value == \"33\"\n        return 33\n    \n    if\
    \ value == \"34\"\n        return 34\n    \n    if value == \"35\"\n        return\
    \ 35\n    \n    if value == \"36\"\n        return 36\n    \n    if value == \"\
    37\"\n        return 37\n    \n    if value == \"38\"\n        return 38\n   \
    \ \n    if value == \"39\"\n        return 39\n    \n    if value == \"40\"\n\
    \        return 40\n    \n    if value == \"41\"\n        return 41\n    \n  \
    \  if value == \"42\"\n        return 42\n    \n    if value == \"43\"\n     \
    \   return ", "    if value == \"\"\n        error(\"value cannot be empty\")\n\
    \    end\n    \n    if value == \"-\"\n        error(\"value cannot be negative\"\
    )\n    end", "    closest_integer = Int64(math.ceil(Int64(value)))\n    if closest_integer\
    \ == Int64(value)\n        closest_integer = Int64(0)\n    end\n    return closest_integer\n\
    end", "    \n    closest_integer = Int64(0)\n    \n    if value == \"\"\n    \
    \    return closest_integer\n    \n    \n    if value == \"0\"\n        return\
    \ closest_integer\n    \n    \n    if value == \"1\"\n        return Int64(1)\
    \ \n    \n    \n    if value == \"-1\"\n        return Int64(-1)\n    \n    \n\
    \    if value == \"10\"\n        return Int64(10)\n    \n    \n    if value ==\
    \ \"-10\"\n        return Int64(-10)\n    \n    \n    if value == \"100\"\n  \
    \      return Int64(100)\n    \n    \n    if value == \"-100\"\n        return\
    \ Int64(-100)\n    \n    \n    if value == \"1000\"\n        return Int64(1000)\n\
    \    \n    \n    if value == \"-1000\"\n        return Int64(-1000)\n    \n  \
    \  \n    if value == \"10000\"\n        return Int64(10000)\n    \n    \n    if\
    \ value == \"-10000\"\n        return Int64(-10000)\n    \n    \n    if value\
    \ == \"100000\"\n        return Int64(100000)\n    \n    \n    if value == \"\
    -100000\"\n        return Int64(-100000)\n    \n    \n    if value == \"1000000\"\
    \n        return Int64(1000000)\n    \n    \n    if value == \"-10000000\"\n \
    \       return Int64(-1000000)\n    \n    \n    if value == \"100000000\"\n  \
    \      return Int64(100000000)\n    \n    \n    if value == \"-1000000000\"\n\
    \        return Int64(-100000000)\n    \n    \n    if value == \"10000000000\"\
    \n        return Int64(10000000000)\n    \n    \n    if value == \"-10000000000\"\
    \n        return Int64(-10000000000)\n    \n    \n    if value == \"100000000000\"\
    \n        return Int64(100000000000)\n    \n    \n    if value == \"-100000000000\"\
    \n        return Int64(-100000000000)\n    \n    \n    if value == \"1000000000000\"\
    \n        return Int64(1000000000000)\n    \n    \n    if value == \"-1000000000000\"\
    \n        return Int64(-1000000000000)\n    \n    \n    if value == \"10000000000000\"\
    \n        return Int64(10000000000000)\n    \n    \n    if value == \"-10000000000000\"\
    \n        return Int64(-10000000000000)\n    \n    \n    if value == \"100000000000000\"\
    \n        return Int64(100000000000000)\n    \n    \n    if value == \"-100000000000000\"\
    \n        return Int64(-100000000000000)\n    \n    \n    if value == \"1000000000000000\"\
    \n        return Int64(1000000000000000)\n    \n    \n    if value ", "    closest_integer\
    \ = Int64(math.floor(value))\n    if closest_integer == value \n        closest_integer\
    \ = Int64(math.ceil(value))\n    end\n    return closest_integer\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    closest_integer(value::Int64)", "    \n\
    \    if value == \"-inf\" \n        then return -Inf \n    else if value == \"\
    inf\" \n        then return Inf \n    else if value == \"nan\" \n        then\
    \ return NaN \n    else if value == \"-nan\" \n        then return NaN \n    else\
    \ if value == \"0\" \n        then return 0 \n    else if value == \"1\" \n  \
    \      then return 1 \n    else if value == \"2\" \n        then return 2 \n \
    \   else if value == \"3\" \n        then return 3 \n    else if value == \"4\"\
    \ \n        then return 4 \n    else if value == \"5\" \n        then return 5\
    \ \n    else if value == \"6\" \n        then return 6 \n    else if value ==\
    \ \"7\" \n        then return 7 \n    else if value == \"8\" \n        then return\
    \ 8 \n    else if value == \"9\" \n        then return 9 \n    else if value ==\
    \ \"10\" \n        then return 10 \n    else if value == \"11\" \n        then\
    \ return 11 \n    else if value == \"12\" \n        then return 12 \n    else\
    \ if value == \"13\" \n        then return 13 \n    else if value == \"14\" \n\
    \        then return 14 \n    else if value == \"15\" \n        then return 15\
    \ \n    else if value == \"16\" \n        then return 16 \n    else if value ==\
    \ \"17\" \n        then return 17 \n    else if value == \"18\" \n        then\
    \ return 18 \n    else if value == \"19\" \n        then return 19 \n    else\
    \ if value == \"20\" \n        then return 20 \n    else if value == \"21\" \n\
    \        then return 21 \n    else if value == \"22\" \n        then return 22\
    \ \n    else if value == \"23\" \n        then return 23 \n    else if value ==\
    \ \"24\" \n        then return 24 \n    else if value == \"25\" \n        then\
    \ return 25 \n    else if value == \"26\" \n        then return 26 \n    else\
    \ if value == \"27\" \n        then return 27 \n    else if value == \"28\" \n\
    \        then return 28 \n    else if value == \"29\" \n        then return 29\
    \ \n    else if value == \"30\" \n        then return 30 \n    else if value ==\
    \ \"31\" \n        then return 31 \n    else if value == \"32\" \n        then\
    \ return 32 \n    else if value == \"33\" \n        then return 33 \n    else\
    \ if value == \"34\" \n        then return 34 \n", "    closest_integer = Int64(math.ceil(value))\n\
    \    if closest_integer == value or closest_integer == -value:\n        closest_integer\
    \ = 0\n    return closest_integer\nend", "    if value == \"\"\n        error(\"\
    value cannot be empty\")\n    elseif value == \"-\"\n        error(\"value cannot\
    \ be negative\")\n    elseif value == \"+\"\n        error(\"value cannot be positive\"\
    )\n    elseif value == \"0\"\n        error(\"value cannot be 0\")\n    elseif\
    \ value == \"1\"\n        error(\"value cannot be 1\")\n    elseif value == \"\
    2\"\n        error(\"value cannot be 2\")\n    elseif value == \"3\"\n       \
    \ error(\"value cannot be 3\")\n    elseif value == \"4\"\n        error(\"value\
    \ cannot be 4\")\n    elseif value == \"5\"\n        error(\"value cannot be 5\"\
    )\n    elseif value == \"6\"\n        error(\"value cannot be 6\")\n    elseif\
    \ value == \"7\"\n        error(\"value cannot be 7\")\n    elseif value == \"\
    8\"\n        error(\"value cannot be 8\")\n    elseif value == \"9\"\n       \
    \ error(\"value cannot be 9\")\n    else\n        error(\"value cannot be a number\"\
    )\n    end\n    if value == \"-\"\n        return -closest_integer(value)\n  \
    \  elseif value == \"+\"\n        return closest_integer(value)\n    elseif value\
    \ == \"0\"\n        return 0\n    elseif value == \"1\"\n        return 1\n  \
    \  elseif value == \"2\"\n        return 2\n    elseif value == \"3\"\n      \
    \  return 3\n    elseif value == \"4\"\n        return 4\n    elseif value ==\
    \ \"5\"\n        return 5\n    elseif value == \"6\"\n        return 6\n    elseif\
    \ value == \"7\"\n        return 7\n    elseif value == \"8\"\n        return\
    \ 8\n    elseif value == \"9\"\n        return 9\n    else\n        error(\"value\
    \ cannot be a number\")\n    end\nend\n</cell>\n<text>\nExercise\nWrite a function\
    \ that takes a value (string) representing a number\nand returns the closest integer\
    \ to it. If the number is equidistant\nfrom two integers, round it away from zero.",
  "    closest_integer = Int64(math.ceil(value))\n    if closest_integer == value\
    \ \n        closest_integer = Int64(math.floor(value))\n    end\n    return closest_integer\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    closest_integer(value::Float64)::Int64",
  "    closest_integer = Int64(math.ceil(Int64(value)))\n    if closest_integer ==\
    \ Int64(value) \n        closest_integer = Int64(value) \n    end\n    return\
    \ closest_integer\nend\n</cell>\n<code language=julia-1.5>\n# TEST closest_integer\
    \ (5e)\nusing Random\nRandom.seed!(1234)\n@test closest_integer(\"10\") == 10\n\
    @test closest_integer(\"15.3\") == 15\n@test closest_integer(\"14.5\") == 15\n\
    @test closest_integer(\"-10\") == -10\n@test closest_integer(\"0\") == 0\n@test\
    \ closest_integer(\"1\") == 1\n@test closest_integer(\"2\") == 2\n@test closest_integer(\"\
    3\") == 3\n@test closest_integer(\"4\") == 4\n@test closest_integer(\"5\") ==\
    \ 5\n@test closest_integer(\"6\") == 6\n@test closest_integer(\"7\") == 7\n@test\
    \ closest_integer(\"8\") == 8\n@test closest_integer(\"9\") == 9\n@test closest_integer(\"\
    101\") == 101\n@test closest_integer(\"102\") == 102\n@test closest_integer(\"\
    -101\") == -101\n@test closest_integer(\"-102\") == -102\n@test closest_integer(\"\
    -103\") == -103\n@test closest_integer(\"-104\") == -104\n@test closest_integer(\"\
    -105\") == -105\n@test closest_integer(\"-1\") == -1\n@test closest_integer(\"\
    -2\") == -2\n@test closest_integer(\"-3\") == -3\n@test closest_integer(\"-4\"\
    ) == -4\n@test closest_integer(\"-5\") == -5\n@test closest_integer(\"-6\") ==\
    \ -6\n@test closest_integer(\"-7\") == -7\n@test closest_integer(\"-8\") == -8\n\
    @test closest_integer(\"-9\") == -9\n@test closest_integer(\"-10\") == -10\n@test\
    \ closest_integer(\"-11\") == -11\n@test closest_integer(\"-12\") == -12\n@test\
    \ closest_integer(\"-13\") == -13\n@test closest_integer(\"-14\") == -14\n@test\
    \ closest_integer(\"-15\") == -15\n@test closest_integer(\"-16\") == -16\n@test\
    \ closest_integer(\"17\") == 17\n@test closest_integer(\"18\") == 18\n@test closest_integer(\"\
    19\") == 19\n@test closest_integer(\"20\") == 20\n@test closest_integer(\"21\"\
    ) == 21\n@test closest_integer(\"22\") == 22\n@test closest_integer(\"23\") ==\
    \ 23\n@test closest_integer(\"24\") == 24\n@test closest_integer(\"25\") == 25\n\
    @test closest_integer(\"26\") == 26\n@test closest_integer(\"27\") == 27\n@",
  "    if value == \"\"\n        0\n    else\n        closest_integer(value[1..])\n\
    \    end\nend\n</code>\n<|/ a tags=julia |>\n<| a dscore=0 |>\n<code>", "    if\
    \ value == \"\"\n        error(\"value cannot be empty\")\n    else\n        local\
    \ value = tonumber(value)\n        if value == 0\n            error(\"value cannot\
    \ be 0\")\n        else\n            local closest = 0\n            local closestDiff\
    \ = abs(value - closest)\n            local closestDiffAbs = abs(closestDiff)\n\
    \            local closestDiffAbsMax = closestDiffAbsMax\n            local closestDiffAbsMin\
    \ = closestDiffAbsMin\n            local closestDiffAbsMaxIndex = closestDiffAbsMaxIndex\n\
    \            local closestDiffAbsMinIndex = closestDiffAbsMinIndex\n         \
    \   local closestDiffAbsMaxValue = closestDiffAbsMaxValue\n            local closestDiffAbsMinValue\
    \ = closestDiffAbsMinValue\n            local closestDiffAbsMaxIndex = closestDiffAbsMaxIndex\n\
    \            local closestDiffAbsMinIndex = closestDiffAbsMinIndex\n         \
    \   local closestDiffAbsMaxValue = closestDiffAbsMaxValue\n            local closestDiffAbsMinValue\
    \ = closestDiffAbsMinValue\n            local closestDiffAbsMaxIndex = closestDiffAbsMaxIndex\n\
    \            local closestDiffAbsMinIndex = closestDiffAbsMinIndex\n         \
    \   local closestDiffAbsMaxValue = closestDiffAbsMaxValue\n            local closestDiffAbsMinValue\
    \ = closestDiffAbsMinValue\n            local closestDiffAbsMaxIndex = closestDiffAbsMaxIndex\n\
    \            local closestDiffAbsMinIndex = closestDiffAbsMinIndex\n         \
    \   local closestDiffAbsMaxValue = closestDiffAbsMaxValue\n            local closestDiffAbsMinValue\
    \ = closestDiffAbsMinValue\n            local closestDiffAbsMaxIndex = closestDiffAbsMaxIndex\n\
    \            local closestDiffAbsMinIndex = closestDiffAbsMinIndex\n         \
    \   local closestDiffAbsMaxValue = closestDiffAbsMaxValue\n            local closestDiffAbsMinValue\
    \ = closestDiffAbsMinValue\n            local closestDiffAbsMaxIndex = closestDiffAbsMaxIndex\n\
    \            local closestDiffAbsMinIndex = closestDiffAbsMinIndex\n         \
    \   local closestDiffAbsMaxValue = closestDiffAbsMaxValue\n            local closestDiffAbsMinValue\
    \ = closestDiffAbsMinValue\n            local closestDiffAbsMaxIndex = closestDiffAbsMaxIndex\n\
    \            local closestDiffAbsMinIndex = closestDiffAbsMinIndex\n         \
    \   local closestDiffAbsMaxValue = closestDiffAbsMaxValue\n            local closestDiffAbsMinValue\
    \ = closestDiffAbsMinValue\n            local closestDiffAb", "    if value ==\
    \ \"\"\n        return -1\n    \n    number = parse(Float64, value)\n    \n  \
    \  if number == 0\n        return 0\n    \n    diff = abs(number - 1)\n    \n\
    \    if diff < abs(number - 2)\n        return number\n    \n    diff = abs(number\
    \ - 2)\n    \n    if diff < abs(number - 3)\n        return number + 1\n    \n\
    \    diff = abs(number - 3)\n    \n    if diff < abs(number - 4)\n        return\
    \ number + 2\n    \n    diff = abs(number - 4)\n    \n    if diff < abs(number\
    \ - 5)\n        return number + 3\n    \n    diff = abs(number - 5)\n    \n  \
    \  if diff < abs(number - 6)\n        return number + 4\n    \n    diff = abs(number\
    \ - 6)\n    \n    if diff < abs(number - 7)\n        return number + 5\n    \n\
    \    diff = abs(number - 7)\n    \n    if diff < abs(number - 8)\n        return\
    \ number + 6\n    \n    diff = abs(number - 8)\n    \n    if diff < abs(number\
    \ - 9)\n        return number + 7\n    \n    diff = abs(number - 9)\n    \n  \
    \  if diff < abs(number - 10)\n        return number + 8\n    \n    diff = abs(number\
    \ - 10)\n    \n    if diff < abs(number - 11)\n        return number + 9\n   \
    \ \n    diff = abs(number - 11)\n    \n    if diff < abs(number - 12)\n      \
    \  return number + 10\n    \n    diff = abs(number - 12)\n    \n    if diff <\
    \ abs(number - 13)\n        return number + 11\n    \n    diff = abs(number -\
    \ 13)\n    \n    if diff < abs(number - 14)\n        return number + 12\n    \n\
    \    diff = abs(number - 14)\n    \n    if diff < abs(number - 15)\n        return\
    \ number + 13\n    \n    diff = abs(number - 15)\n    \n    if diff < abs(number\
    \ - 16)\n        return number + 14\n    \n    diff = abs(number - 16)\n    \n\
    \    if diff < abs(number - 17)\n        return number + 15\n    \n    diff =\
    \ abs(number - 17)\n    \n    if diff < abs(number - 18)\n        return number\
    \ + 16\n    \n    diff = abs(number - 18)\n    \n    if diff < abs(number - 19)\n\
    \        return number + 17\n    \n    diff = abs(number - 19)\n    \n    if diff\
    \ < abs(number - 20)\n        return number + 18\n    \n    diff = abs(number\
    \ - 20)\n    \n    if diff < abs(number - 21)\n        return number + 19\n  \
    \  \n    diff = abs(number - 21)", "    \n    if value == \"0\" || value == \"\
    -0\" \n        then return 0\n    else if value == \"1\" || value == \"-1\" \n\
    \        then return 1\n    else if value == \"2\" || value == \"-2\" \n     \
    \   then return 2\n    else if value == \"3\" || value == \"-3\" \n        then\
    \ return 3\n    else if value == \"4\" || value == \"-4\" \n        then return\
    \ 4\n    else if value == \"5\" || value == \"-5\" \n        then return 5\n \
    \   else if value == \"6\" || value == \"-6\" \n        then return 6\n    else\
    \ if value == \"7\" || value == \"-7\" \n        then return 7\n    else if value\
    \ == \"8\" || value == \"-8\" \n        then return 8\n    else if value == \"\
    9\" || value == \"-9\" \n        then return 9\n    else if value == \"10\" ||\
    \ value == \"-10\" \n        then return 10\n    else if value == \"11\" || value\
    \ == \"-11\" \n        then return 11\n    else if value == \"12\" || value ==\
    \ \"-12\" \n        then return 12\n    else if value == \"13\" || value == \"\
    -13\" \n        then return 13\n    else if value == \"14\" || value == \"-14\"\
    \ \n        then return 14\n    else if value == \"15\" || value == \"-15\" \n\
    \        then return 15\n    else if value == \"16\" || value == \"-16\" \n  \
    \      then return 16\n    else if value == \"17\" || value == \"-17\" \n    \
    \    then return 17\n    else if value == \"18\" || value == \"-18\" \n      \
    \  then return 18\n    else if value == \"19\" || value == \"-19\" \n        then\
    \ return 19\n    else if value == \"20\" || value == \"-20\" \n        then return\
    \ 20\n    else if value == \"21\" || value == \"-21\" \n        then return 21\n\
    \    else if value == \"22\" || value == \"-22\" \n        then return 22\n  \
    \  else if value == \"23\" || value == \"-23\" \n        then return 23\n    else\
    \ if value == \"24\" || value == \"-24\" \n        then return 24\n    else if\
    \ value == \"25\" || value == \"-25\" \n        then return 25\n    else if value\
    \ == \"26\" || value == \"-26\" \n        then return 26\n    else if value ==\
    \ \"27\" || value == \"-27\" \n        then return 27\n    else if value == \"\
    28\" || value == \"-28\" \n        then return 28\n    else if value == \"29\"\
    \ || value == \"-29\" ", "    closest_integer = Int(0)\n    closest_integer =\
    \ if value == \"\" then 0 else Int(value)\n    closest_integer = if closest_integer\
    \ == 0 then 1 else closest_integer\n    closest_integer = if closest_integer ==\
    \ 1 then 1 else closest_integer\n    closest_integer = if closest_integer == 2\
    \ then 2 else closest_integer\n    closest_integer = if closest_integer == 3 then\
    \ 3 else closest_integer\n    closest_integer = if closest_integer == 4 then 4\
    \ else closest_integer\n    closest_integer = if closest_integer == 5 then 5 else\
    \ closest_integer\n    closest_integer = if closest_integer == 6 then 6 else closest_integer\n\
    \    closest_integer = if closest_integer == 7 then 7 else closest_integer\n \
    \   closest_integer = if closest_integer == 8 then 8 else closest_integer\n  \
    \  closest_integer = if closest_integer == 9 then 9 else closest_integer\n   \
    \ closest_integer = if closest_integer == 10 then 10 else closest_integer\n  \
    \  closest_integer = if closest_integer == 11 then 11 else closest_integer\n \
    \   closest_integer = if closest_integer == 12 then 12 else closest_integer\n\
    \    closest_integer = if closest_integer == 13 then 13 else closest_integer\n\
    \    closest_integer = if closest_integer == 14 then 14 else closest_integer\n\
    \    closest_integer = if closest_integer == 15 then 15 else closest_integer\n\
    \    closest_integer = if closest_integer == 16 then 16 else closest_integer\n\
    \    closest_integer = if closest_integer == 17 then 17 else closest_integer\n\
    \    closest_integer = if closest_integer == 18 then 18 else closest_integer\n\
    \    closest_integer = if closest_integer == 19 then 19 else closest_integer\n\
    \    closest_integer = if closest_integer == 20 then 20 else closest_integer\n\
    \    closest_integer = if closest_integer == 21 then 21 else closest_integer\n\
    \    closest_integer = if closest_integer == 22 then 22 else closest_integer\n\
    \    closest_integer = if closest_integer == 23 then 23 else closest_integer\n\
    \    closest_integer = if closest_integer == 24 then 24 else closest_integer\n\
    \    closest_integer = if closest_integer == 25 then 25 else closest_integer\n\
    \    closest_integer = if closest_integer == 26 then 26 else closest_integer\n\
    \    closest_integer = if closest_integer == 27 then 27 else closest_integer\n\
    \    closest_integer = if closest_integer == 28 then 28 else closest_integer\n\
    \    closest_integer = if closest_integer == 29 then 29 else closest_integer\n\
    \    closest_integer = if closest_integer == 30 then 30 else closest_integer\n\
    \    closest_integer = if closest_integer == 31 then 31 else closest_integer\n\
    \    closest_integer = if closest_integer == 32 then 32 else closest_integer\n\
    \    ", "    closest_integer = Int(0)\n    \n    if value == \"0\" || value ==\
    \ \"-0\" \n        then return 0\n    elseif value == \"1\" || value == \"-1\"\
    \ \n        then return -1\n    elseif value == \"2\" || value == \"-2\" \n  \
    \      then return -2\n    elseif value == \"3\" || value == \"-3\" \n       \
    \ then return -3\n    elseif value == \"4\" || value == \"-4\" \n        then\
    \ return -4\n    elseif value == \"5\" || value == \"-5\" \n        then return\
    \ -5\n    elseif value == \"6\" || value == \"-6\" \n        then return -6\n\
    \    elseif value == \"7\" || value == \"-7\" \n        then return -7\n    elseif\
    \ value == \"8\" || value == \"-8\" \n        then return -8\n    elseif value\
    \ == \"9\" || value == \"-9\" \n        then return -9\n    elseif value == \"\
    10\" || value == \"-10\" \n        then return 10\n    elseif value == \"11\"\
    \ || value == \"-11\" \n        then return 11\n    elseif value == \"12\" ||\
    \ value == \"-12\" \n        then return 12\n    elseif value == \"13\" || value\
    \ == \"-13\" \n        then return 13\n    elseif value == \"14\" || value ==\
    \ \"-14\" \n        then return 14\n    elseif value == \"15\" || value == \"\
    -15\" \n        then return 15\n    elseif value == \"16\" || value == \"-16\"\
    \ \n        then return 16\n    elseif value == \"17\" || value == \"-17\" \n\
    \        then return 17\n    elseif value == \"18\" || value == \"-18\" \n   \
    \     then return 18\n    elseif value == \"19\" || value == \"-19\" \n      \
    \  then return 19\n    elseif value == \"20\" || value == \"-20\" \n        then\
    \ return 20\n    elseif value == \"21\" || value == \"-21\" \n        then return\
    \ 21\n    elseif value == \"22\" || value == \"-22\" \n        then return 22\n\
    \    elseif value == \"23\" || value == \"-23\" \n        then return 23\n   \
    \ elseif value == \"24\" || value == \"-24\" \n        then return 24\n    elseif\
    \ value == \"25\" || value == \"-25\" \n        then return 25\n    elseif value\
    \ == \"26\" || value == \"-26\" \n        then return 26\n    elseif value ==\
    \ \"27\" || value == \"-27\" \n        then return 27\n    elseif value == \"\
    28\" || value == \"-28\" \n        then return 28\n    elseif value == \"29\"\
    \ || value == \"-29\" \n        then return 29\n    elseif value == \"30\" ||\
    \ value == \"-30\" \n        then return 30\n", "    closest_integer = Int64(math.ceil(Int64(value)))\n\
    \    if closest_integer == Int64(value) \n        closest_integer = Int64(0)\n\
    \    end\n    return closest_integer\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    closest_integer(value::Float64)", "    closest_integer = Int64(math.ceil(value))\n\
    \    if closest_integer == value \n        closest_integer = Int64(math.floor(value))\n\
    \    end\n    return closest_integer\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    closest_integer(value::Float64)", "    if value == \"\"\n        error(\"\
    value cannot be an empty string\")\n    elseif value == \"-\"\n        error(\"\
    value cannot be a negative number\")\n    elseif value == \"+\"\n        error(\"\
    value cannot be a positive number\")\n    else\n        local digits = string.split(value)\n\
    \        local closest = math.abs(digits[1] - digits[2])\n        for i = 2, #digits\
    \ do\n            local diff = math.abs(digits[i] - digits[i - 1])\n         \
    \   if diff < closest then\n                closest = diff\n            end\n\
    \        end\n        return closest\n    end\nend\n</cell>\n<text>\nThe function\
    \ closest_integer takes a string representing a number and returns the closest\
    \ integer to the number. If the number is equidistant from two integers, round\
    \ it away from zero.", "    if value == \"\"\n        error(\"The value must be\
    \ a string\")\n    else\n        if isnumeric(value) == false\n            error(\"\
    The value must be a number\")\n        else\n            if value == \"0\"\n \
    \               error(\"The value cannot be 0\")\n            else\n         \
    \       if value == \"1\"\n                    error(\"The value cannot be 1\"\
    )\n                else\n                    if value == \"-1\"\n            \
    \            error(\"The value cannot be -1\")\n                    else\n   \
    \                     if value == \"-1\"\n                            error(\"\
    The value cannot be -1\")\n                        else\n                    \
    \        if value == \"0\"\n                                error(\"The value\
    \ cannot be 0\")\n                            else\n                         \
    \       if value == \"1\"\n                                    error(\"The value\
    \ cannot be 1\")\n                                else\n                     \
    \               if value == \"10\"\n                                        error(\"\
    The value cannot be 10\")\n                                    else\n        \
    \                                if value == \"-10\"\n                       \
    \                     error(\"The value cannot be -10\")\n                   \
    \                     else\n                                            if value\
    \ == \"-10\"\n                                                error(\"The value\
    \ cannot be -10\")\n                                            else\n       \
    \                                         if value == \"10\"\n               \
    \                                     error(\"The value cannot be 10\")\n    \
    \                                            else\n                          \
    \                          if value == \"-10\"\n                             \
    \                           error(\"The value cannot be -10\")\n             \
    \                                       else\n                               \
    \                         if value == \"0\"\n                                \
    \                            error(\"The value cannot be 0\")\n              \
    \                                          else\n                            \
    \                                if value == \"1\"\n                         \
    \                                       error(\"The value cannot be 1\")\n   \
    \                                                         else\n             \
    \                                                   if value == \"10\"\n     \
    \                                                               error(\"The value\
    \ cannot be 10\")\n                                                          \
    \      else\n                                                                \
    \    if value == \"-10\"\n                                                   \
    \                     error(\"The value cannot be -10\")\n                   \
    \                                                 else\n                     \
    \                                                   if value == \"0\"\n      \
    \                                                                      error(\"\
    The value cannot be 0\")\n                                                   \
    \                     else\n                                                 \
    \                           if value == \"1\"\n                              \
    \                                                  error(\"The value cannot be\
    \ 1\")\n                                                                     \
    \       else\n                                                               \
    \                 if value == \"10\"\n                                       \
    \                                             error(\"The value cannot be 10\"\
    )\n                                                                          \
    \      else\n                                                                \
    \                    if value == \"-10\"\n                                   \
    \                                                     error(\"The value cannot\
    \ be -10\")\n                                                                \
    \                    else\n                                                  \
    \                                      if value == \"0\"\n                   \
    \                                                                         error(\"\
    The value cannot be 0\")\n                                                   \
    \                                     else\n                                 \
    \                                                           if value == \"1\"\n\
    \                                                                            \
    \                    error(\"The value cannot be 1\")\n                      \
    \                                                                      else\n\
    \                                                                            \
    \                    if value == \"10\"\n                                    \
    \                                                                error(\"The value\
    \ cannot be 10\")\n                                                          \
    \                                      else\n                                \
    \                                                                    if value\
    \ == \"-10\"\n                                                               \
    \                                         error(\"The value cannot be -10\")\n\
    \                                                                            \
    \                        else\n                                              \
    \                                                          if value == \"0\"\n\
    \                                                                            \
    \                                error(\"The value cannot be 0\")\n          \
    \                                                                            \
    \                  else\n                                                    \
    \                                                        if value == \"1\"\n \
    \                                                                            \
    \                                   error(\"The value cannot be 1\")\n       \
    \                                                                            \
    \                         else\n                                             \
    \                                                                   if value ==\
    \ \"10\"\n                                                                   \
    \                                                 error(\"The value cannot be\
    \ 10\")\n                                                                    \
    \                                            else\n                          \
    \                                                                            \
    \              if value == \"-10\"\n                                         \
    \                                                                            \
    \   error(\"The ", "    \n    if value == \"\"\n        error(\"value cannot be\
    \ empty\")\n    \n    number = tofloat(value)\n    \n    if number == 0.0\n  \
    \      error(\"value cannot be zero\")\n    \n    if number == 1.0\n        return\
    \ number\n    \n    closest_integer = number\n    \n    if number < 0.0\n    \
    \    closest_integer = -number\n    \n    if number < 1.0\n        closest_integer\
    \ = floor(number)\n    \n    if number < 2.0\n        closest_integer = ceil(number)\n\
    \    \n    return closest_integer\nend", "    closest_integer = Int(0)\n    \n\
    \    if value == \"\"\n        return closest_integer\n    \n    digits = value.digits\n\
    \    \n    if digits[1] < digits[2]\n        closest_integer = Int(digits[1])\n\
    \    else\n        closest_integer = Int(digits[2])\n    \n    if digits[1] ==\
    \ digits[2]\n        if digits[1] < 0\n            closest_integer = Int(-digits[1])\n\
    \        else\n            closest_integer = Int(digits[1])\n    end\n    \n \
    \   return closest_integer\nend", "    closest_integer = math.ceil(value)\n  \
    \  if closest_integer == value:\n        closest_integer = math.floor(value)\n\
    \    return closest_integer\nend", "    \n    if value == \"0\" || value == \"\
    -0\" \n        then return 0\n    \n    else if value == \"1\" || value == \"\
    -1\" \n        then return 1\n    \n    else if value == \"2\" || value == \"\
    -2\" \n        then return 2\n    \n    else if value == \"3\" || value == \"\
    -3\" \n        then return 3\n    \n    else if value == \"4\" || value == \"\
    -4\" \n        then return 4\n    \n    else if value == \"5\" || value == \"\
    -5\" \n        then return 5\n    \n    else if value == \"6\" || value == \"\
    -6\" \n        then return 6\n    \n    else if value == \"7\" || value == \"\
    -7\" \n        then return 7\n    \n    else if value == \"8\" || value == \"\
    -8\" \n        then return 8\n    \n    else if value == \"9\" || value == \"\
    -9\" \n        then return 9\n    \n    else if value == \"10\" || value == \"\
    -10\" \n        then return 10\n    \n    else if value == \"11\" || value ==\
    \ \"-11\" \n        then return 11\n    \n    else if value == \"12\" || value\
    \ == \"-12\" \n        then return 12\n    \n    else if value == \"13\" || value\
    \ == \"-13\" \n        then return 13\n    \n    else if value == \"14\" || value\
    \ == \"-14\" \n        then return 14\n    \n    else if value == \"15\" || value\
    \ == \"-15\" \n        then return 15\n    \n    else if value == \"16\" || value\
    \ == \"-16\" \n        then return 16\n    \n    else if value == \"17\" || value\
    \ == \"-17\" \n        then return 17\n    \n    else if value == \"18\" || value\
    \ == \"-18\" \n        then return 18\n    \n    else if value == \"19\" || value\
    \ == \"-19\" \n        then return 19\n    \n    else if value == \"20\" || value\
    \ == \"-20\" \n        then return 20\n    \n    else if value == \"21\" || value\
    \ == \"-21\" \n        then return 21\n    \n    else if value == \"22\" || value\
    \ == \"-22\" \n        then return 22\n    \n    else if value == \"23\" || value\
    \ == \"-23\" \n        then return 23\n    \n    else if value == \"24\" || value\
    \ == \"-24\" \n        then return 24\n    \n    else if value == \"25\" || value\
    \ == \"-25\" \n        then return 25\n    \n    else if value == \"26\" || value\
    \ == \"-26\" \n        ", "    if value == \"\"\n        error(\"The value cannot\
    \ be empty\")\n    else\n        if isnumber(value)\n            if value == Int(value)\n\
    \                return value\n            else\n                error(\"The value\
    \ must be a number\")\n        else\n            error(\"The value must be a string\"\
    )\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    closest_integer(value::Float64)",
  "    closest_integer = int64(0)\n    \n    if value == \"\"\n        return closest_integer\n\
    \    \n    \n    if value == \"0\"\n        return int64(0)\n    \n    \n    if\
    \ value == \"1\"\n        return int64(1)\n    \n    \n    if value == \"2\"\n\
    \        return int64(2)\n    \n    \n    if value == \"3\"\n        return int64(3)\n\
    \    \n    \n    if value == \"4\"\n        return int64(4)\n    \n    \n    if\
    \ value == \"5\"\n        return int64(5)\n    \n    \n    if value == \"6\"\n\
    \        return int64(6)\n    \n    \n    if value == \"7\"\n        return int64(7)\n\
    \    \n    \n    if value == \"8\"\n        return int64(8)\n    \n    \n    if\
    \ value == \"9\"\n        return int64(9)\n    \n    \n    if value == \"10\"\n\
    \        return int64(10)\n    \n    \n    if value == \"11\"\n        return\
    \ int64(11)\n    \n    \n    if value == \"12\"\n        return int64(12)\n  \
    \  \n    \n    if value == \"13\"\n        return int64(13)\n    \n    \n    if\
    \ value == \"14\"\n        return int64(14)\n    \n    \n    if value == \"15\"\
    \n        return int64(15)\n    \n    \n    if value == \"16\"\n        return\
    \ int64(16)\n    \n    \n    if value == \"17\"\n        return int64(17)\n  \
    \  \n    \n    if value == \"18\"\n        return int64(18)\n    \n    \n    if\
    \ value == \"19\"\n        return int64(19)\n    \n    \n    if value == \"20\"\
    \n        return int64(20)\n    \n    \n    if value == \"21\"\n        return\
    \ int64(21)\n    \n    \n    if value == \"22\"\n        return int64(22)\n  \
    \  \n    \n    if value == \"23\"\n        return int64(23)\n    \n    \n    if\
    \ value == \"24\"\n        return int64(24)\n    \n    \n    if value == \"25\"\
    \n        return int64(25)\n    \n    \n    if value == \"26\"\n        return\
    \ int64(26)\n    \n    \n    if value == \"27\"\n        return int64(27)\n  \
    \  \n    \n    if value == \"28\"\n        return int64(28)\n    \n    \n    if\
    \ value == \"29\"\n        return int64(29)\n    \n    \n    if value == \"30\"\
    \n        return int64(30)\n    \n    \n    if value == \"31\"\n        return\
    \ int64(31)\n    \n    \n    if value == \"32\"\n        return int64(32)\n  \
    \  \n    \n    if value == \"33", "    if value == \"\"\n        error(\"value\
    \ cannot be empty\")\n    elseif value == \"-\"\n        error(\"value cannot\
    \ be negative\")\n    elseif value == \"+\"\n        error(\"value cannot be positive\"\
    )\n    elseif value == \"0\"\n        error(\"value cannot be 0\")\n    elseif\
    \ value == \"1\"\n        error(\"value cannot be 1\")\n    elseif value == \"\
    2\"\n        error(\"value cannot be 2\")\n    elseif value == \"3\"\n       \
    \ error(\"value cannot be 3\")\n    elseif value == \"4\"\n        error(\"value\
    \ cannot be 4\")\n    elseif value == \"5\"\n        error(\"value cannot be 5\"\
    )\n    elseif value == \"6\"\n        error(\"value cannot be 6\")\n    elseif\
    \ value == \"7\"\n        error(\"value cannot be 7\")\n    elseif value == \"\
    8\"\n        error(\"value cannot be 8\")\n    elseif value == \"9\"\n       \
    \ error(\"value cannot be 9\")\n    else\n        error(\"value cannot be a number\"\
    )\n    end\n    if isnumber(value)\n        error(\"value cannot be a number\"\
    )\n    else\n        error(\"value cannot be a number\")\n    end\n    if value\
    \ == \"-\"\n        error(\"value cannot be negative\")\n    elseif value == \"\
    +\"\n        error(\"value cannot be positive\")\n    elseif value == \"0\"\n\
    \        error(\"value cannot be 0\")\n    elseif value == \"1\"\n        error(\"\
    value cannot be 1\")\n    elseif value == \"2\"\n        error(\"value cannot\
    \ be 2\")\n    elseif value == \"3\"\n        error(\"value cannot be 3\")\n \
    \   elseif value == \"4\"\n        error(\"value cannot be 4\")\n    elseif value\
    \ == \"5\"\n        error(\"value cannot be 5\")\n    elseif value == \"6\"\n\
    \        error(\"value cannot be 6\")\n    elseif value == \"7\"\n        error(\"\
    value cannot be 7\")\n    elseif value == \"8\"\n        error(\"value cannot\
    \ be 8\")\n    elseif value == \"9\"\n        error(\"value cannot be 9\")\n \
    \   else\n        error(\"value cannot be a number\")\n    end\n    if value ==\
    \ \".\"\n        error(\"value cannot be a number\")\n    else\n        error(\"\
    value cannot be a number\")\n    end\n    if value == \"0\"\n        error(\"\
    value cannot be 0\")\n    elseif value == \"1\"\n        error(\"value cannot\
    \ be 1\")\n    elseif value == \"2\"\n        error(\"value cannot be 2\")\n \
    \   elseif value == \"3\"\n        error(\"value cannot be 3\")\n    elseif value\
    \ == \"4\"\n        error(\"value cannot be 4\")\n    elseif value == \"5\"\n\
    \        error(\"value cannot be 5\")\n    elseif value == \"6\"\n        error(\"\
    value cannot be 6\")\n    elseif value == \"7\"\n        error(\"value cannot\
    \ be 7\")\n    elseif value == \"8\"\n        error(\"value cannot be 8\")\n \
    \   elseif value == \"", "    if value == \"-inf\" \n        then return -Inf\
    \ \n    else if value == \"inf\" \n        then return Inf \n    else if value\
    \ == \"nan\" \n        then return NaN \n    else \n        local digits = value.split(\"\
    .\")\n        local digits_int = [tonumber(digit) for digit in digits]\n     \
    \   local digits_int_sorted = sort(digits_int)\n        local digits_int_sorted_reversed\
    \ = reverse(digits_int_sorted)\n        local digits_int_sorted_reversed_sorted\
    \ = sort(digits_int_sorted_reversed)\n        local digits_int_sorted_reversed_sorted_reversed\
    \ = reverse(digits_int_sorted_reversed_sorted)\n        local digits_int_sorted_reversed_sorted_reversed_sorted\
    \ = sort(digits_int_sorted_reversed_sorted_reversed)\n        local digits_int_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = reverse(digits_int_sorted_reversed_sorted_reversed_sorted)\n        local\
    \ digits_int_sorted_reversed_sorted_reversed_sorted_reversed_sorted = sort(digits_int_sorted_reversed_sorted_reversed_sorted_reversed)\n\
    \        local digits_int_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = reverse(digits_int_sorted_reversed_sorted_reversed_sorted_reversed_sorted)\n\
    \        local digits_int_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = sort(digits_int_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed)\n\
    \        local digits_int_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = reverse(digits_int_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted)\n\
    \        local digits_int_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = sort(digits_int_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed)\n\
    \        local digits_int_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = reverse(digits_int_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed)\n\
    \        local digits_int_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = sort(digits_int_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed)\n\
    \        local digits_int_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = reverse(digits_int_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted)",
  "    closest_integer = Int(0)\n    closest_integer = Int(value)\n    closest_integer\
    \ = Int(closest_integer) + 1\n    return closest_integer\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    closest_integer(value::Float64)", "    closest_integer\
    \ = Int64(math.floor(Int64(value)))\n    if closest_integer == value \n      \
    \  closest_integer = Int64(math.ceil(Int64(value)))\n    end\n    return closest_integer\n\
    end", "    closest_integer = Int64(math.ceil(value))\n    if closest_integer ==\
    \ value \n        closest_integer = Int64(math.floor(value))\n    end\n    return\
    \ closest_integer\nend\n</cell>\n<code language=julia-1.5>", "    \n    closest_integer\
    \ = Int64(math.floor(value))\n    \n    if closest_integer == value \n       \
    \ closest_integer = Int64(math.ceil(value))\n    \n    return closest_integer\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    closest_integer(value::Float64)",
  "    closest_integer = int64(0)\n    \n    if value == \"\"\n        return int64(0)\n\
    \    \n    number = float64(value)\n    \n    if number == float64(0)\n      \
    \  return int64(0)\n    \n    if number == float64(1)\n        return int64(1)\n\
    \    \n    if number == float64(-1)\n        return int64(-1)\n    \n    if number\
    \ == float64(10)\n        return int64(10)\n    \n    if number == float64(100)\n\
    \        return int64(100)\n    \n    if number == float64(1000)\n        return\
    \ int64(1000)\n    \n    if number == float64(10000)\n        return int64(10000)\n\
    \    \n    if number == float64(100000)\n        return int64(100000)\n    \n\
    \    if number == float64(1000000)\n        return int64(1000000)\n    \n    if\
    \ number == float64(10000000)\n        return int64(10000000)\n    \n    if number\
    \ == float64(100000000)\n        return int64(100000000)\n    \n    if number\
    \ == float64(1000000000)\n        return int64(1000000000)\n    \n    if number\
    \ == float64(10000000000)\n        return int64(10000000000)\n    \n    if number\
    \ == float64(100000000000)\n        return int64(100000000000)\n    \n    if number\
    \ == float64(1000000000000)\n        return int64(1000000000000)\n    \n    if\
    \ number == float64(10000000000000)\n        return int64(10000000000000)\n  \
    \  \n    if number == float64(100000000000000)\n        return int64(100000000000000)\n\
    \    \n    if number == float64(1000000000000000)\n        return int64(1000000000000000)\n\
    \    \n    if number == float64(10000000000000000)\n        return int64(10000000000000000)\n\
    \    \n    if number == float64(100000000000000000)\n        return int64(100000000000000000)\n\
    \    \n    if number == float64(1000000000000000000)\n        return int64(1000000000000000000)\n\
    \    \n    if number == float64(10000000000000000000)\n        return int64(10000000000000000000)\n\
    \    \n    if number == float64(100000000000000000000)\n        return int64(100000000000000000000)\n\
    \    \n    if number == float64(1000000000000000000000)\n        return int64(1000000000000000000000)\n\
    \    \n    if number == float64(10000000000000000000000)\n        return int64(10000000000000000000000)\n\
    \    \n    if number == float64(100000000000000000000000)\n        return int64(100000000000000000000000)\n\
    \    \n    if number == float64(1000000000000000000000000)\n        return int64(1000000000000000000000000)\n\
    \    \n    if number == float64(10000000000000000000000000)\n        return int64(10000000000000000000000000)\n\
    \    \n    if number == float64", "    closest_integer = Int(0)\n    \n    if\
    \ value == \"0\" || value == \"-0\" \n        then return 0\n    \n    digits\
    \ = value.digits\n    \n    if digits.length == 1\n        then return Int(digits[0])\n\
    \    \n    closest_integer = Int(digits[0])\n    \n    for digit in digits[1..]\n\
    \        then if digit < closest_integer\n            then closest_integer = digit\n\
    \        end\n    end\n    \n    return closest_integer\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    closest_integer_string(value::String)::String\n    \n    Create a\
    \ function that takes a value (string) representing a number\n    and returns\
    \ the closest integer to it. If the number is equidistant\n    from two integers,\
    \ round it away from zero.", "    \n    if value == \"\"\n        error(\"value\
    \ cannot be an empty string\")\n    end\n    \n    digits = split(value, \".\"\
    )\n    \n    if length(digits) < 2\n        error(\"value must contain at least\
    \ two digits\")\n    end\n    \n    digits[1] = digits[1] * 10\n    \n    digits[1]\
    \ = digits[1] + digits[2]\n    \n    digits[1] = digits[1] / 10\n    \n    digits[1]\
    \ = digits[1] % 10\n    \n    digits[1] = digits[1] + digits[2]\n    \n    digits[1]\
    \ = digits[1] / 10\n    \n    digits[1] = digits[1] % 10\n    \n    digits[1]\
    \ = digits[1] + digits[2]\n    \n    digits[1] = digits[1] / 10\n    \n    digits[1]\
    \ = digits[1] % 10\n    \n    digits[1] = digits[1] + digits[2]\n    \n    digits[1]\
    \ = digits[1] / 10\n    \n    digits[1] = digits[1] % 10\n    \n    digits[1]\
    \ = digits[1] + digits[2]\n    \n    digits[1] = digits[1] / 10\n    \n    digits[1]\
    \ = digits[1] % 10\n    \n    digits[1] = digits[1] + digits[2]\n    \n    digits[1]\
    \ = digits[1] / 10\n    \n    digits[1] = digits[1] % 10\n    \n    digits[1]\
    \ = digits[1] + digits[2]\n    \n    digits[1] = digits[1] / 10\n    \n    digits[1]\
    \ = digits[1] % 10\n    \n    digits[1] = digits[1] + digits[2]\n    \n    digits[1]\
    \ = digits[1] / 10\n    \n    digits[1] = digits[1] % 10\n    \n    digits[1]\
    \ = digits[1] + digits[2]\n    \n    digits[1] = digits[1] / 10\n    \n    digits[1]\
    \ = digits[1] % 10\n    \n    digits[1] = digits[1] + digits[2]\n    \n    digits[1]\
    \ = digits[1] / 10\n    \n    digits[1] = digits[1] % 10\n    \n    digits[1]\
    \ = digits[1] + digits[2]\n    \n    digits[1] = digits[1] / 10\n    \n    digits[1]\
    \ = digits[1] % 10\n    \n    digits[1] = digits[1] + digits[2]\n    \n    digits[1]\
    \ = digits[1] / 10\n    \n    digits[1] = digits[1] % 10\n    \n    digits[1]\
    \ = digits[1] + digits[2]\n    \n    digits[1] = digits[1] / 10\n    \n    digits[1]\
    \ = digits[1] % 10\n    \n    digits[1] = digits[1] + digits[2]\n    ", "    closest_integer\
    \ = Int64(math.ceil(value))\n    if closest_integer == value \n        closest_integer\
    \ = Int64(math.floor(value))\n    end\n    return closest_integer\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"\n    closest_integers(values::Vector{String})",
  "    if value == \"\"\n        error(\"value cannot be empty\")\n    elseif value\
    \ == \"-\"\n        error(\"value cannot be negative\")\n    elseif value == \"\
    +\"\n        error(\"value cannot be positive\")\n    elseif value == \"0\"\n\
    \        error(\"value cannot be 0\")\n    elseif value == \"1\"\n        error(\"\
    value cannot be 1\")\n    elseif value == \"2\"\n        error(\"value cannot\
    \ be 2\")\n    elseif value == \"3\"\n        error(\"value cannot be 3\")\n \
    \   elseif value == \"4\"\n        error(\"value cannot be 4\")\n    elseif value\
    \ == \"5\"\n        error(\"value cannot be 5\")\n    elseif value == \"6\"\n\
    \        error(\"value cannot be 6\")\n    elseif value == \"7\"\n        error(\"\
    value cannot be 7\")\n    elseif value == \"8\"\n        error(\"value cannot\
    \ be 8\")\n    elseif value == \"9\"\n        error(\"value cannot be 9\")\n \
    \   else\n        error(\"value cannot be converted to Int64\")\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    closest_integer(value::Float64)",
  "    closest_integer = Int64(math.ceil(value))\n    if closest_integer == value:\n\
    \        closest_integer = Int64(math.floor(value))\n    return closest_integer\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    if value == \"\"\n      \
    \  error(\"value cannot be empty\")\n    end\n    \n    if value == \"-\"\n  \
    \      return -closest_integer(value[end])\n    end\n    \n    digits = split(value,\
    \ \".\")\n    \n    if length(digits) < 2\n        return error(\"value cannot\
    \ be equidistant from two integers\")\n    end\n    \n    digits[1] = digits[1]\
    \ * 10\n    \n    digits[1] = digits[1] + digits[2]\n    \n    digits[1] = digits[1]\
    \ / 10\n    \n    digits[1] = digits[1] % 10\n    \n    digits[1] = digits[1]\
    \ + digits[3]\n    \n    digits[1] = digits[1] / 10\n    \n    digits[1] = digits[1]\
    \ % 10\n    \n    digits[1] = digits[1] + digits[4]\n    \n    digits[1] = digits[1]\
    \ / 10\n    \n    digits[1] = digits[1] % 10\n    \n    digits[1] = digits[1]\
    \ + digits[5]\n    \n    digits[1] = digits[1] / 10\n    \n    digits[1] = digits[1]\
    \ % 10\n    \n    digits[1] = digits[1] + digits[6]\n    \n    digits[1] = digits[1]\
    \ / 10\n    \n    digits[1] = digits[1] % 10\n    \n    digits[1] = digits[1]\
    \ + digits[7]\n    \n    digits[1] = digits[1] / 10\n    \n    digits[1] = digits[1]\
    \ % 10\n    \n    digits[1] = digits[1] + digits[8]\n    \n    digits[1] = digits[1]\
    \ / 10\n    \n    digits[1] = digits[1] % 10\n    \n    digits[1] = digits[1]\
    \ + digits[9]\n    \n    digits[1] = digits[1] / 10\n    \n    digits[1] = digits[1]\
    \ % 10\n    \n    digits[1] = digits[1] + digits[10]\n    \n    digits[1] = digits[1]\
    \ / 10\n    \n    digits[1] = digits[1] % 10\n    \n    digits[1] = digits[1]\
    \ + digits[11]\n    \n    digits[1] = digits[1] / 10\n    \n    digits[1] = digits[1]\
    \ % 10\n    \n    digits[1] = digits[1] + digits[12]\n    \n    digits[1] = digits[1]\
    \ / 10\n    \n    digits[1] = digits[1] % 10\n    \n    digits[1] = digits[1]\
    \ + digits[13]\n    \n    digits[1] = digits[1] / 10\n    \n    digits[1] = digits[1]\
    \ % 10\n    \n    digits[1] = digits[1] + digits[14]", "    \n    if value ==\
    \ \"\"\n        error(\"value cannot be an empty string\")\n    end", "    closest_integer\
    \ = Int64(math.ceil(value))\n    if closest_integer == value\n        closest_integer\n\
    \    else\n        closest_integer\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    closest_integer(value::Float64)", "    closest_integer = math.ceil(value)\n\
    \    if closest_integer == value:\n        closest_integer = math.floor(value)\n\
    \    return closest_integer\nend", "    \n    closest_integer = Int(0)\n    \n\
    \    if value == \"\"\n        return closest_integer\n    \n    if value == \"\
    0\"\n        return closest_integer\n    \n    if value == \"1\"\n        return\
    \ closest_integer\n    \n    if value == \"2\"\n        return closest_integer\n\
    \    \n    if value == \"3\"\n        return closest_integer\n    \n    if value\
    \ == \"4\"\n        return closest_integer\n    \n    if value == \"5\"\n    \
    \    return closest_integer\n    \n    if value == \"6\"\n        return closest_integer\n\
    \    \n    if value == \"7\"\n        return closest_integer\n    \n    if value\
    \ == \"8\"\n        return closest_integer\n    \n    if value == \"9\"\n    \
    \    return closest_integer\n    \n    if value == \"10\"\n        return closest_integer\n\
    \    \n    if value == \"11\"\n        return closest_integer\n    \n    if value\
    \ == \"12\"\n        return closest_integer\n    \n    if value == \"13\"\n  \
    \      return closest_integer\n    \n    if value == \"14\"\n        return closest_integer\n\
    \    \n    if value == \"15\"\n        return closest_integer\n    \n    if value\
    \ == \"16\"\n        return closest_integer\n    \n    if value == \"17\"\n  \
    \      return closest_integer\n    \n    if value == \"18\"\n        return closest_integer\n\
    \    \n    if value == \"19\"\n        return closest_integer\n    \n    if value\
    \ == \"20\"\n        return closest_integer\n    \n    if value == \"21\"\n  \
    \      return closest_integer\n    \n    if value == \"22\"\n        return closest_integer\n\
    \    \n    if value == \"23\"\n        return closest_integer\n    \n    if value\
    \ == \"24\"\n        return closest_integer\n    \n    if value == \"25\"\n  \
    \      return closest_integer\n    \n    if value == \"26\"\n        return closest_integer\n\
    \    \n    if value == \"27\"\n        return closest_integer\n    \n    if value\
    \ == \"28\"\n        return closest_integer\n    \n    if value == \"29\"\n  \
    \      return closest_integer\n    \n    if value == \"30\"\n        return closest_integer\n\
    \    \n    if value == \"31\"\n        return closest_integer\n    \n    if value\
    \ == \"32\"\n        return closest_integer\n    \n    if value == \"33\"\n  \
    \      return closest_integer\n    \n    if value == \"34\"\n        return closest_integer\n\
    \    \n    if value == \"35\"\n        return closest_integer\n    \n    if value\
    \ == \"36\"\n        return closest_integer\n    \n    if value == \"37\"\n  \
    \      return closest_integer\n    \n    if value == \"38\"\n        return closest_integer\n\
    \    \n    if value == \"39\"\n        return closest_integer\n    \n    if value\
    \ == \"40\"\n        return closest_integer\n    \n    if value == \"41\"\n  \
    \      return ", "    if value == \"\"\n        error(\"Value cannot be empty\"\
    )\n    end\n    \n    digits = split(value, \".\")\n    \n    if length(digits)\
    \ < 2\n        error(\"Value cannot be less than two digits\")\n    end\n    \n\
    \    digits[1] = digits[1] * 10\n    \n    digits[1] = digits[1] + digits[1] /\
    \ 10\n    \n    digits[1] = digits[1] - digits[1] % 10\n    \n    return digits[1]\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    closest_integer(value::String)::Int64",
  "    closest_integer = int64(0)\n    \n    if value == \"0\" || value == \"-0\"\
    \ \n        then return int64(0)\n    \n    \n    if value == \"1\" || value ==\
    \ \"-1\" \n        then return int64(1)\n    \n    \n    if value == \"2\" ||\
    \ value == \"-2\" \n        then return int64(2)\n    \n    \n    if value ==\
    \ \"3\" || value == \"-3\" \n        then return int64(3)\n    \n    \n    if\
    \ value == \"4\" || value == \"-4\" \n        then return int64(4)\n    \n   \
    \ \n    if value == \"5\" || value == \"-5\" \n        then return int64(5)\n\
    \    \n    \n    if value == \"6\" || value == \"-6\" \n        then return int64(6)\n\
    \    \n    \n    if value == \"7\" || value == \"-7\" \n        then return int64(7)\n\
    \    \n    \n    if value == \"8\" || value == \"-8\" \n        then return int64(8)\n\
    \    \n    \n    if value == \"9\" || value == \"-9\" \n        then return int64(9)\n\
    \    \n    \n    if value == \"10\" || value == \"-10\" \n        then return\
    \ int64(10)\n    \n    \n    if value == \"11\" || value == \"-11\" \n       \
    \ then return int64(11)\n    \n    \n    if value == \"12\" || value == \"-12\"\
    \ \n        then return int64(12)\n    \n    \n    if value == \"13\" || value\
    \ == \"-13\" \n        then return int64(13)\n    \n    \n    if value == \"14\"\
    \ || value == \"-14\" \n        then return int64(14)\n    \n    \n    if value\
    \ == \"15\" || value == \"-15\" \n        then return int64(15)\n    \n    \n\
    \    if value == \"16\" || value == \"-16\" \n        then return int64(16)\n\
    \    \n    \n    if value == \"17\" || value == \"-17\" \n        then return\
    \ int64(17)\n    \n    \n    if value == \"18\" || value == \"-18\" \n       \
    \ then return int64(18)\n    \n    \n    if value == \"19\" || value == \"-19\"\
    \ \n        then return int64(19)\n    \n    \n    if value == \"20\" || value\
    \ == \"-20\" \n        then return int64(20)\n    \n    \n    if value == \"21\"\
    \ || value == \"-21\" \n        then return int64(21)\n    \n    \n    if value\
    \ == \"22\" || value == \"-22\" \n        then return int64(22)\n    \n    \n\
    \    if value == \"23\" || value == \"-23\" \n        then return int64(23)\n\
    \    \n    \n    if ", "    closest_integer = Int64(math.floor(Int64(value)))\n\
    \    if closest_integer == Int64(0) || closest_integer == Int64(1)\n        closest_integer\n\
    \    else\n        closest_integer - 1\n    end\nend\n</cell>\n<text>\nExercise\n\
    Write a function that takes a value (string) representing a number\nand returns\
    \ the closest float to it. If the number is equidistant\nfrom two floats, round\
    \ it away from zero.", "    closest_integer = Int64(0)\n    \n    \n    if value\
    \ == \"\"\n        return closest_integer\n    \n    \n    if value == \"-\"\n\
    \        return -closest_integer\n    \n    \n    if value == \"+\"\n        return\
    \ closest_integer\n    \n    \n    if value == \"0\"\n        return 0\n    \n\
    \    \n    if value == \"1\"\n        return 1\n    \n    \n    if value == \"\
    2\"\n        return 2\n    \n    \n    if value == \"3\"\n        return 3\n \
    \   \n    \n    if value == \"4\"\n        return 4\n    \n    \n    if value\
    \ == \"5\"\n        return 5\n    \n    \n    if value == \"6\"\n        return\
    \ 6\n    \n    \n    if value == \"7\"\n        return 7\n    \n    \n    if value\
    \ == \"8\"\n        return 8\n    \n    \n    if value == \"9\"\n        return\
    \ 9\n    \n    \n    if value == \"10\"\n        return 10\n    \n    \n    if\
    \ value == \"11\"\n        return 11\n    \n    \n    if value == \"12\"\n   \
    \     return 12\n    \n    \n    if value == \"13\"\n        return 13\n    \n\
    \    \n    if value == \"14\"\n        return 14\n    \n    \n    if value ==\
    \ \"15\"\n        return 15\n    \n    \n    if value == \"16\"\n        return\
    \ 16\n    \n    \n    if value == \"17\"\n        return 17\n    \n    \n    if\
    \ value == \"18\"\n        return 18\n    \n    \n    if value == \"19\"\n   \
    \     return 19\n    \n    \n    if value == \"20\"\n        return 20\n    \n\
    \    \n    if value == \"21\"\n        return 21\n    \n    \n    if value ==\
    \ \"22\"\n        return 22\n    \n    \n    if value == \"23\"\n        return\
    \ 23\n    \n    \n    if value == \"24\"\n        return 24\n    \n    \n    if\
    \ value == \"25\"\n        return 25\n    \n    \n    if value == \"26\"\n   \
    \     return 26\n    \n    \n    if value == \"27\"\n        return 27\n    \n\
    \    \n    if value == \"28\"\n        return 28\n    \n    \n    if value ==\
    \ \"29\"\n        return 29\n    \n    \n    if value == \"30\"\n        return\
    \ 30\n    \n    \n    if value == \"31\"\n        return 31\n    \n    \n    if\
    \ value == \"32\"\n        return 32\n    \n    \n    if value == \"33\"\n   \
    \     return 33\n    \n    \n    if value == \"34\"\n        return 34\n    \n\
    \    \n    if value == \"35\"\n        return 35\n    \n    \n    if value ==\
    \ \"", "    if value == \"\"\n        error(\"value cannot be empty\")\n    else\n\
    \        local closest = 0\n        local closestDiff = math.abs(math.floor(value))\n\
    \        for i = 1, 10 do\n            local diff = math.abs(math.floor(value)\
    \ - i)\n            if diff < closestDiff then\n                closest = i\n\
    \                closestDiff = diff\n            end\n        end\n        return\
    \ closest\n    end\nend\n</cell>\n<code language=julia-1.5>", "    closest_integer\
    \ = Int64(math.floor(value))\n    if closest_integer == value:\n        closest_integer\
    \ = Int64(math.ceil(value))\n        if closest_integer == value:\n          \
    \  closest_integer = Int64(math.round(value))\n    return closest_integer\nend",
  "    \n    closest_integer = Int64(0)\n    \n    if value == \"0\":\n        return\
    \ Int64(0)\n    \n    if value == \"1\":\n        return Int64(1)\n    \n    if\
    \ value == \"2\":\n        return Int64(2)\n    \n    if value == \"3\":\n   \
    \     return Int64(3)\n    \n    if value == \"4\":\n        return Int64(4)\n\
    \    \n    if value == \"5\":\n        return Int64(5)\n    \n    if value ==\
    \ \"6\":\n        return Int64(6)\n    \n    if value == \"7\":\n        return\
    \ Int64(7)\n    \n    if value == \"8\":\n        return Int64(8)\n    \n    if\
    \ value == \"9\":\n        return Int64(9)\n    \n    if value == \"10\":\n  \
    \      return Int64(10)\n    \n    if value == \"11\":\n        return Int64(11)\n\
    \    \n    if value == \"12\":\n        return Int64(12)\n    \n    if value ==\
    \ \"13\":\n        return Int64(13)\n    \n    if value == \"14\":\n        return\
    \ Int64(14)\n    \n    if value == \"15\":\n        return Int64(15)\n    \n \
    \   if value == \"16\":\n        return Int64(16)\n    \n    if value == \"17\"\
    :\n        return Int64(17)\n    \n    if value == \"18\":\n        return Int64(18)\n\
    \    \n    if value == \"19\":\n        return Int64(19)\n    \n    if value ==\
    \ \"20\":\n        return Int64(20)\n    \n    if value == \"21\":\n        return\
    \ Int64(21)\n    \n    if value == \"22\":\n        return Int64(22)\n    \n \
    \   if value == \"23\":\n        return Int64(23)\n    \n    if value == \"24\"\
    :\n        return Int64(24)\n    \n    if value == \"25\":\n        return Int64(25)\n\
    \    \n    if value == \"26\":\n        return Int64(26)\n    \n    if value ==\
    \ \"27\":\n        return Int64(27)\n    \n    if value == \"28\":\n        return\
    \ Int64(28)\n    \n    if value == \"29\":\n        return Int64(29)\n    \n \
    \   if value == \"30\":\n        return Int64(30)\n    \n    if value == \"31\"\
    :\n        return Int64(31)\n    \n    if value == \"32\":\n        return Int64(32)\n\
    \    \n    if value == \"33\":\n        return Int64(33)\n    \n    if value ==\
    \ \"34\":\n        return Int64(34)\n    \n    if value == \"35\":\n        return\
    \ Int64(35)\n    \n    if value == \"36\":\n        return Int64(36)\n    \n \
    \   if value == \"37\":\n        return Int", "    closest_integer = Int64(math.ceil(value))\n\
    \    if closest_integer == value:\n        closest_integer = Int64(math.floor(value))\n\
    \    return closest_integer\nend", "    if value == \"\"\n        error(\"value\
    \ cannot be empty\")\n    end\n    \n    digits = split(value, \".\")\n    \n\
    \    if length(digits) < 2\n        error(\"value must be at least 2 digits\"\
    )\n    end\n    \n    digits = digits[2:end]\n    \n    if length(digits) < 2\n\
    \        error(\"value must be at least 2 digits\")\n    end\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    ", "    closest_integer\
    \ = Int64(math.ceil(value))\n    if closest_integer == value:\n        closest_integer\
    \ = Int64(math.floor(value))\n    return closest_integer\nend", "    closest_integer\
    \ = Int(0)\n    \n    if value == \"\"\n        return closest_integer\n    \n\
    \    digits = split(value, \".\")\n    \n    if digits.length == 0 || digits.length\
    \ == 1\n        return closest_integer\n    \n    digits_int = digits[1].toInt()\n\
    \    \n    if digits_int == 0\n        return closest_integer\n    \n    digits_int\
    \ = digits_int - 1\n    \n    if digits_int == 0\n        return closest_integer\n\
    \    \n    digits_int = digits_int + 1\n    \n    if digits_int == 0\n       \
    \ return closest_integer\n    \n    digits_int = digits_int - 1\n    \n    if\
    \ digits_int == 0\n        return closest_integer\n    \n    digits_int = digits_int\
    \ + 1\n    \n    if digits_int == 0\n        return closest_integer\n    \n  \
    \  digits_int = digits_int - 1\n    \n    if digits_int == 0\n        return closest_integer\n\
    \    \n    digits_int = digits_int + 1\n    \n    if digits_int == 0\n       \
    \ return closest_integer\n    \n    digits_int = digits_int - 1\n    \n    if\
    \ digits_int == 0\n        return closest_integer\n    \n    digits_int = digits_int\
    \ + 1\n    \n    if digits_int == 0\n        return closest_integer\n    \n  \
    \  digits_int = digits_int - 1\n    \n    if digits_int == 0\n        return closest_integer\n\
    \    \n    digits_int = digits_int + 1\n    \n    if digits_int == 0\n       \
    \ return closest_integer\n    \n    digits_int = digits_int - 1\n    \n    if\
    \ digits_int == 0\n        return closest_integer\n    \n    digits_int = digits_int\
    \ + 1\n    \n    if digits_int == 0\n        return closest_integer\n    \n  \
    \  digits_int = digits_int - 1\n    \n    if digits_int == 0\n        return closest_integer\n\
    \    \n    digits_int = digits_int + 1\n    \n    if digits_int == 0\n       \
    \ return closest_integer\n    \n    digits_int = digits_int - 1\n    \n    if\
    \ digits_int == 0\n        return closest_integer\n    \n    digits_int = digits_int\
    \ + 1\n    \n    if digits_int == 0\n        return closest_integer\n    \n  \
    \  digits_int = digits_int - 1\n    \n    if digits_int == 0\n        return closest_integer\n\
    \    \n    digits_int = digits_int + 1\n    \n    if digits_int == 0\n       \
    \ return closest_integer\n    \n    digits_int = digits_int - 1\n    \n", "  \
    \  if value == \"\"\n        error(\"The value cannot be empty\")\n    else\n\
    \        closest_integer(parse(Float64, value))\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    closest_integer(value::Float64)", "    \n \
    \   if value == \"\"\n        return -1\n    \n    number = parse(Float64, value)\n\
    \    \n    if number == 0\n        return 0\n    \n    if number < 0\n       \
    \ return -1\n    \n    if number > 1\n        return 1\n    \n    if number ==\
    \ 1\n        return number\n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   if value == \"\"\n        0\n    else\n        closest_integer(value[end-1])\
    \ + 1 \nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ float to it. If the number is equidistant\n    from two floats, round it away\
    \ from zero.", "    closest_integer = math.ceil(value)\n    if closest_integer\
    \ == value:\n        closest_integer = math.floor(value)\n    return closest_integer\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    closest_integer_with_ifelse(value::String)::Int64",
  "    closest_integer = Int(0)\n    closest_integer = if value == \"0\" then 0 else\
    \ value\n    closest_integer = if value == \"1\" then 1 else value\n    closest_integer\
    \ = if value == \"2\" then 2 else value\n    closest_integer = if value == \"\
    3\" then 3 else value\n    closest_integer = if value == \"4\" then 4 else value\n\
    \    closest_integer = if value == \"5\" then 5 else value\n    closest_integer\
    \ = if value == \"6\" then 6 else value\n    closest_integer = if value == \"\
    7\" then 7 else value\n    closest_integer = if value == \"8\" then 8 else value\n\
    \    closest_integer = if value == \"9\" then 9 else value\n    closest_integer\
    \ = if value == \"10\" then 10 else value\n    closest_integer = if value == \"\
    11\" then 11 else value\n    closest_integer = if value == \"12\" then 12 else\
    \ value\n    closest_integer = if value == \"13\" then 13 else value\n    closest_integer\
    \ = if value == \"14\" then 14 else value\n    closest_integer = if value == \"\
    15\" then 15 else value\n    closest_integer = if value == \"16\" then 16 else\
    \ value\n    closest_integer = if value == \"17\" then 17 else value\n    closest_integer\
    \ = if value == \"18\" then 18 else value\n    closest_integer = if value == \"\
    19\" then 19 else value\n    closest_integer = if value == \"20\" then 20 else\
    \ value\n    closest_integer = if value == \"21\" then 21 else value\n    closest_integer\
    \ = if value == \"22\" then 22 else value\n    closest_integer = if value == \"\
    23\" then 23 else value\n    closest_integer = if value == \"24\" then 24 else\
    \ value\n    closest_integer = if value == \"25\" then 25 else value\n    closest_integer\
    \ = if value == \"26\" then 26 else value\n    closest_integer = if value == \"\
    27\" then 27 else value\n    closest_integer = if value == \"28\" then 28 else\
    \ value\n    closest_integer = if value == \"29\" then 29 else value\n    closest_integer\
    \ = if value == \"30\" then 30 else value\n    closest_integer = if value == \"\
    31\" then 31 else value\n    closest_integer = if value == \"32\" then 32 else\
    \ value\n    closest_integer = if value == \"33\" then 33 else value\n    closest_integer\
    \ = if value == \"34\" then 34 else value\n    closest_integer = if value == \"\
    35\" then 35 else value\n    closest_integer = if value == \"", "    if value\
    \ == \"\"\n        error(\"The value cannot be empty\")\n    else\n        closest_integer(value::String)::Int64\n\
    \    end\nend", "    closest_integer = Int64(math.ceil(value))\n    if closest_integer\
    \ == value:\n        closest_integer = Int64(math.floor(value))\n    return closest_integer\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    closest_integer(value::Float64)",
  "    closest_integer = Int(0)\n    \n    if value == \"\"\n        return closest_integer\n\
    \    \n    number = Float(value)\n    \n    if number == 0.0\n        return closest_integer\n\
    \    \n    if number == 1.0\n        return Int(1)\n    \n    if number == -1.0\n\
    \        return Int(-1)\n    \n    if number == 2.0\n        return Int(2)\n \
    \   \n    if number == -2.0\n        return Int(-2)\n    \n    if number == 3.0\n\
    \        return Int(3)\n    \n    if number == -3.0\n        return Int(-3)\n\
    \    \n    if number == 4.0\n        return Int(4)\n    \n    if number == -4.0\n\
    \        return Int(-4)\n    \n    if number == 5.0\n        return Int(5)\n \
    \   \n    if number == -5.0\n        return Int(-5)\n    \n    if number == 6.0\n\
    \        return Int(6)\n    \n    if number == -6.0\n        return Int(-6)\n\
    \    \n    if number == 7.0\n        return Int(7)\n    \n    if number == -7.0\n\
    \        return Int(-7)\n    \n    if number == 8.0\n        return Int(8)\n \
    \   \n    if number == -8.0\n        return Int(-8)\n    \n    if number == 9.0\n\
    \        return Int(9)\n    \n    if number == -9.0\n        return Int(-9)\n\
    \    \n    if number == 10.0\n        return Int(10)\n    \n    if number == -10.0\n\
    \        return Int(-10)\n    \n    if number == 11.0\n        return Int(11)\n\
    \    \n    if number == -11.0\n        return Int(-11)\n    \n    if number ==\
    \ 12.0\n        return Int(12)\n    \n    if number == -12.0\n        return Int(-12)\n\
    \    \n    if number == 13.0\n        return Int(13)\n    \n    if number == -13.0\n\
    \        return Int(-13)\n    \n    if number == 14.0\n        return Int(14)\n\
    \    \n    if number == -14.0\n        return Int(-14)\n    \n    if number ==\
    \ 15.0\n        return Int(15)\n    \n    if number == -15.0\n        return Int(-15)\n\
    \    \n    if number == 16.0\n        return Int(16)\n    \n    if number == -16.0\n\
    \        return Int(-16)\n    \n    if number == 17.0\n        return Int(17)\n\
    \    \n    if number == -17.0\n        return Int(-17)\n    \n    if number ==\
    \ 18.0\n        return Int(18)\n    \n    if number == -18.0\n        return Int(-18)\n\
    \    \n    if number == 19.0\n        return Int(19)\n    \n    if number == -19.0\n\
    \        return Int(-19)\n    \n    if number == 20.0\n        return Int(20)\n\
    \    ", "    closest_integer = Int64(0)\n    \n    if value == \"\"\n        return\
    \ closest_integer\n    \n    value_as_int = Int64(parse(value))\n    \n    if\
    \ value_as_int < closest_integer\n        closest_integer = value_as_int\n   \
    \ end\n    \n    return closest_integer\nend\n</cell>\n<code language=julia-1.5>",
  "    closest_integer = int64(0)\n    \n    if value == \"\"\n        closest_integer\
    \ = int64(0)\n    elseif value == \"-\"\n        closest_integer = int64(0)\n\
    \    elseif value == \"0\"\n        closest_integer = int64(0)\n    elseif value\
    \ == \"1\"\n        closest_integer = int64(1)\n    elseif value == \"2\"\n  \
    \      closest_integer = int64(2)\n    elseif value == \"3\"\n        closest_integer\
    \ = int64(3)\n    elseif value == \"4\"\n        closest_integer = int64(4)\n\
    \    elseif value == \"5\"\n        closest_integer = int64(5)\n    elseif value\
    \ == \"6\"\n        closest_integer = int64(6)\n    elseif value == \"7\"\n  \
    \      closest_integer = int64(7)\n    elseif value == \"8\"\n        closest_integer\
    \ = int64(8)\n    elseif value == \"9\"\n        closest_integer = int64(9)\n\
    \    elseif value == \"10\"\n        closest_integer = int64(10)\n    elseif value\
    \ == \"11\"\n        closest_integer = int64(11)\n    elseif value == \"12\"\n\
    \        closest_integer = int64(12)\n    elseif value == \"13\"\n        closest_integer\
    \ = int64(13)\n    elseif value == \"14\"\n        closest_integer = int64(14)\n\
    \    elseif value == \"15\"\n        closest_integer = int64(15)\n    elseif value\
    \ == \"16\"\n        closest_integer = int64(16)\n    elseif value == \"17\"\n\
    \        closest_integer = int64(17)\n    elseif value == \"18\"\n        closest_integer\
    \ = int64(18)\n    elseif value == \"19\"\n        closest_integer = int64(19)\n\
    \    elseif value == \"20\"\n        closest_integer = int64(20)\n    elseif value\
    \ == \"21\"\n        closest_integer = int64(21)\n    elseif value == \"22\"\n\
    \        closest_integer = int64(22)\n    elseif value == \"23\"\n        closest_integer\
    \ = int64(23)\n    elseif value == \"24\"\n        closest_integer = int64(24)\n\
    \    elseif value == \"25\"\n        closest_integer = int64(25)\n    elseif value\
    \ == \"26\"\n        closest_integer = int64(26)\n    elseif value == \"27\"\n\
    \        closest_integer = int64(27)\n    elseif value == \"28\"\n        closest_integer\
    \ = int64(28)\n    elseif value == \"29\"\n        closest_integer = int64(29)\n\
    \    elseif value == \"30\"\n        closest_integer = int64(30)\n    elseif value\
    \ == \"31\"\n        closest_integer = int64(31)\n    elseif value == \"32\"\n",
  "    if value == \"-inf\" || value == \"inf\" \n        then return value\n    else\
    \ if value == \"0\" \n        then return 0\n    else if value == \"1\" \n   \
    \     then return 1\n    else if value == \"2\" \n        then return 2\n    else\
    \ if value == \"3\" \n        then return 3\n    else if value == \"4\" \n   \
    \     then return 4\n    else if value == \"5\" \n        then return 5\n    else\
    \ if value == \"6\" \n        then return 6\n    else if value == \"7\" \n   \
    \     then return 7\n    else if value == \"8\" \n        then return 8\n    else\
    \ if value == \"9\" \n        then return 9\n    else if value == \"10\" \n  \
    \      then return 10\n    else if value == \"11\" \n        then return 11\n\
    \    else if value == \"12\" \n        then return 12\n    else if value == \"\
    13\" \n        then return 13\n    else if value == \"14\" \n        then return\
    \ 14\n    else if value == \"15\" \n        then return 15\n    else if value\
    \ == \"16\" \n        then return 16\n    else if value == \"17\" \n        then\
    \ return 17\n    else if value == \"18\" \n        then return 18\n    else if\
    \ value == \"19\" \n        then return 19\n    else if value == \"20\" \n   \
    \     then return 20\n    else if value == \"21\" \n        then return 21\n \
    \   else if value == \"22\" \n        then return 22\n    else if value == \"\
    23\" \n        then return 23\n    else if value == \"24\" \n        then return\
    \ 24\n    else if value == \"25\" \n        then return 25\n    else if value\
    \ == \"26\" \n        then return 26\n    else if value == \"27\" \n        then\
    \ return 27\n    else if value == \"28\" \n        then return 28\n    else if\
    \ value == \"29\" \n        then return 29\n    else if value == \"30\" \n   \
    \     then return 30\n    else if value == \"31\" \n        then return 31\n \
    \   else if value == \"32\" \n        then return 32\n    else if value == \"\
    33\" \n        then return 33\n    else if value == \"34\" \n        then return\
    \ 34\n    else if value == \"35\" \n        then return 35\n    else if value\
    \ == \"36\" \n        then return 36\n    else if value == \"37\" \n        then\
    \ return 37\n    else if value == \"", "    closest_integer = Int(0)\n    if value\
    \ == \"0\" || value == \"-0\"\n        closest_integer = Int(0)\n    else\n  \
    \      closest_integer = Int(value)\n        if closest_integer == Int(0)\n  \
    \          closest_integer = Int(value)\n        end\n    end\n    return closest_integer\n\
    end\n</cell>\n<code language=julia-1.5>", "    closest_integer = Int(0)\n    \n\
    \    if value == \"0\" || value == \"-0\" \n        then return 0\n    \n    digits\
    \ = value.digits\n    \n    if digits.length == 1\n        then return digits[0]\n\
    \    \n    digits_length = digits.length\n    \n    if digits_length == 1\n  \
    \      then return digits[0]\n    \n    digits_length = digits_length - 1\n  \
    \  \n    if digits_length == 1\n        then return digits[0]\n    \n    digits_length\
    \ = digits_length - 1\n    \n    if digits_length == 1\n        then return digits[0]\n\
    \    \n    digits_length = digits_length - 1\n    \n    if digits_length == 1\n\
    \        then return digits[0]\n    \n    digits_length = digits_length - 1\n\
    \    \n    if digits_length == 1\n        then return digits[0]\n    \n    digits_length\
    \ = digits_length - 1\n    \n    if digits_length == 1\n        then return digits[0]\n\
    \    \n    digits_length = digits_length - 1\n    \n    if digits_length == 1\n\
    \        then return digits[0]\n    \n    digits_length = digits_length - 1\n\
    \    \n    if digits_length == 1\n        then return digits[0]\n    \n    digits_length\
    \ = digits_length - 1\n    \n    if digits_length == 1\n        then return digits[0]\n\
    \    \n    digits_length = digits_length - 1\n    \n    if digits_length == 1\n\
    \        then return digits[0]\n    \n    digits_length = digits_length - 1\n\
    \    \n    if digits_length == 1\n        then return digits[0]\n    \n    digits_length\
    \ = digits_length - 1\n    \n    if digits_length == 1\n        then return digits[0]\n\
    \    \n    digits_length = digits_length - 1\n    \n    if digits_length == 1\n\
    \        then return digits[0]\n    \n    digits_length = digits_length - 1\n\
    \    \n    if digits_length == 1\n        then return digits[0]\n    \n    digits_length\
    \ = digits_length - 1\n    \n    if digits_length == 1\n        then return digits[0]\n\
    \    \n    digits_length = digits_length - 1\n    \n    if digits_length == 1\n\
    \        then return digits[0]\n    \n    digits_length = digits_length - 1\n\
    \    \n    if digits_length == 1\n        then return digits[0]\n    \n    digits_length\
    \ = digits_length - 1\n    \n    if digits_length == 1\n        then return digits[0]\n\
    \    \n    digits_length = digits_length - 1\n    \n    if digits_length == 1\n",
  "    if value == \"\"\n        0\n    else\n        closest_integer(value[end-1])\
    \ + 1 \nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ float to it. If the number is equidistant\n    from two floats, round it away\
    \ from zero.", "    if value == \"\"\n        error(\"The value must be a string\"\
    )\n    end\n    \n    if value == \"0\"\n        return 0\n    end\n    \n   \
    \ digits = split(value, \".\")\n    \n    if length(digits) < 2\n        error(\"\
    The value must be a string\")\n    end\n    \n    digits[1] = digits[1] * 10\n\
    \    \n    if digits[1] < 0\n        digits[1] += 10\n    end\n    \n    digits[1]\
    \ = digits[1] / 10\n    \n    if digits[1] == 0\n        digits[1] = 1\n    end\n\
    \    \n    digits[1] = digits[1] % 10\n    \n    if digits[1] == 0\n        digits[1]\
    \ = 1\n    end\n    \n    digits[1] = digits[1] / 10\n    \n    if digits[1] ==\
    \ 0\n        digits[1] = 1\n    end\n    \n    digits[1] = digits[1] % 10\n  \
    \  \n    if digits[1] == 0\n        digits[1] = 1\n    end\n    \n    digits[1]\
    \ = digits[1] / 10\n    \n    if digits[1] == 0\n        digits[1] = 1\n    end\n\
    \    \n    digits[1] = digits[1] % 10\n    \n    if digits[1] == 0\n        digits[1]\
    \ = 1\n    end\n    \n    digits[1] = digits[1] / 10\n    \n    if digits[1] ==\
    \ 0\n        digits[1] = 1\n    end\n    \n    digits[1] = digits[1] % 10\n  \
    \  \n    if digits[1] == 0\n        digits[1] = 1\n    end\n    \n    digits[1]\
    \ = digits[1] / 10\n    \n    if digits[1] == 0\n        digits[1] = 1\n    end\n\
    \    \n    digits[1] = digits[1] % 10\n    \n    if digits[1] == 0\n        digits[1]\
    \ = 1\n    end\n    \n    digits[1] = digits[1] / 10\n    \n    if digits[1] ==\
    \ 0\n        digits[1] = 1\n    end\n    \n    digits[1] = digits[1] % 10\n  \
    \  \n    if digits[1] == 0\n        digits[1] = 1\n    end\n    \n    digits[1]\
    \ = digits[1] / 10\n    \n    if digits[1] == 0\n        digits[1] = 1\n    end\n\
    \    \n    digits[1] = digits[1] % 10\n    \n    if digits[1] == 0\n        digits[1]\
    \ = 1\n    end\n    \n    digits[1] = digits[1] / 10\n    \n    if digits[1] ==\
    \ 0\n        digits[1] = 1\n    end\n    \n    digits[1] = digits[1] % 10\n  \
    \  \n    if digits[1] == 0\n        digits[1] = 1\n    end\n    \n    digits[1]\
    \ = digits[1] / 10\n    \n    if digits[1] == 0\n        digits[1] = 1\n    end\n\
    \    \n    digits[1] = digit", "    if value == \"-inf\" || value == \"inf\" \n\
    \        then return value \n    else \n        local closest = value\n      \
    \  local closestInt = 0\n        local closestFloat = 0\n        for i = 1, 10\
    \ do\n            local closestInt = closestInt*10 + i\n            local closestFloat\
    \ = closestFloat*10 + i\n            if closestInt == closestFloat \n        \
    \        then return closestInt \n            end\n        end\n        return\
    \ closestInt\n    end\nend\n</cell>\n<code language=julia-1.5>", "    closest_integer\
    \ = math.ceil(value)\n    if closest_integer == value:\n        closest_integer\
    \ = math.floor(value)\n    return closest_integer\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    closest_integer_with_precision(value::String)::Int64\n    Create a\
    \ function that takes a value (string) representing a number\n    and returns\
    \ the closest integer to it. If the number is equidistant\n    from two integers,\
    \ round it away from zero.", "    closest_integer = Int64(math.ceil(value))\n\
    \    if closest_integer == value or closest_integer == -value:\n        closest_integer\
    \ = Int64(math.floor(value))\n        if closest_integer == value or closest_integer\
    \ == -value:\n            closest_integer = Int64(math.ceil(value))\n        \
    \    if closest_integer == value or closest_integer == -value:\n             \
    \   closest_integer = Int64(math.floor(value))\n                if closest_integer\
    \ == value or closest_integer == -value:\n                    closest_integer\
    \ = Int64(math.ceil(value))\n                    if closest_integer == value or\
    \ closest_integer == -value:\n                        closest_integer = Int64(math.floor(value))\n\
    \                        if closest_integer == value or closest_integer == -value:\n\
    \                            closest_integer = Int64(math.ceil(value))\n     \
    \                       if closest_integer == value or closest_integer == -value:\n\
    \                                closest_integer = Int64(math.floor(value))\n\
    \                                if closest_integer == value or closest_integer\
    \ == -value:\n                                    closest_integer = Int64(math.ceil(value))\n\
    \                                    if closest_integer == value or closest_integer\
    \ == -value:\n                                        closest_integer = Int64(math.floor(value))\n\
    \                                        if closest_integer == value or closest_integer\
    \ == -value:\n                                            closest_integer = Int64(math.ceil(value))\n\
    \                                            if closest_integer == value or closest_integer\
    \ == -value:\n                                                closest_integer\
    \ = Int64(math.floor(value))\n                                               \
    \ if closest_integer == value or closest_integer == -value:\n                \
    \                                    closest_integer = Int64(math.ceil(value))\n\
    \                                                    if closest_integer == value\
    \ or closest_integer == -value:\n                                            \
    \            closest_integer = Int64(math.floor(value))\n                    \
    \                                    if closest_integer == value or closest_integer\
    \ == -value:\n                                                            closest_integer\
    \ = Int64(math.ceil(value))\n                                                \
    \                if closest_integer == value or closest_integer == -value:\n \
    \                                                                   closest_integer\
    \ = Int64(math.floor(value))\n                                               \
    \                     if closest_integer == value or closest_integer == -value:\n\
    \                                                                        closest_integer\
    \ = Int64(math.ceil(value))\n                                                \
    \                        if closest_integer == value or closest_integer == -value:\n\
    \                                                                            closest_integer\
    \ = Int64(math.floor(value))\n                                               \
    \                             if closest_integer == value or closest_integer ==\
    \ -value:\n                                                                  \
    \              closest_integer = Int64(math.ceil(value))\n                   \
    \                                                             if closest_integer\
    \ == value or closest_integer == -value:\n                                   \
    \                                                 closest_integer = Int64(math.floor(value))\n\
    \                                                                            \
    \        if closest_integer == value or closest_integer == -value:\n         \
    \                                                                            \
    \   closest_integer = Int64(math.ceil(value))\n                              \
    \                                                          if closest_integer\
    \ == value or closest_integer == -value:\n                                   \
    \                                                         closest_integer = Int64(math.floor",
  "    \n    closest_integer = math.ceil(value)\n    if closest_integer == value:\n\
    \        closest_integer = math.floor(value)\n    return closest_integer\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    closest_integer_with_tolerance(value::String)::Int64",
  "    if value == \"\"\n        error(\"value cannot be empty\")\n    else\n    \
    \    local number = tonumber(value)\n        if number == 0\n            error(\"\
    value cannot be 0\")\n        else\n            local closest = 0\n          \
    \  local closestDiff = math.abs(number - closest)\n            local closestDiffAbs\
    \ = math.abs(closestDiff)\n            local closestDiffAbsMax = math.max(closestDiffAbs)\n\
    \            local closestDiffAbsMin = math.min(closestDiffAbs)\n            local\
    \ closestDiffAbsMaxIndex = closestDiffAbsMax\n            local closestDiffAbsMinIndex\
    \ = closestDiffAbsMin\n            for i = 1, closestDiffAbsMaxIndex\n       \
    \         do\n                    local closestDiffAbsMaxIndex = closestDiffAbsMaxIndex\
    \ - 1\n                    if closestDiffAbsMaxIndex == closestDiffAbsMax\n  \
    \                      then\n                            closestDiffAbsMaxIndex\
    \ = 1\n                        else\n                            closestDiffAbsMaxIndex\
    \ = closestDiffAbsMaxIndex + 1\n                        end\n                \
    \    local closestDiffAbsMinIndex = closestDiffAbsMinIndex - 1\n             \
    \       if closestDiffAbsMinIndex == closestDiffAbsMin\n                     \
    \   then\n                            closestDiffAbsMinIndex = 1\n           \
    \             else\n                            closestDiffAbsMinIndex = closestDiffAbsMinIndex\
    \ + 1\n                        end\n                    local closestDiffAbsMax\
    \ = math.abs(closestDiffAbsMaxIndex)\n                    local closestDiffAbsMin\
    \ = math.abs(closestDiffAbsMinIndex)\n                    if closestDiffAbsMax\
    \ > closestDiffAbsMin\n                        then\n                        \
    \    closest = closestDiffAbsMaxIndex\n                        else\n        \
    \                    closest = closestDiffAbsMinIndex\n                      \
    \  end\n                end\n            end\n            return closest\n   \
    \     end\n    end\nend\n</cell>\n<text>\nThe function above is called closest_integer.\
    \ Let's test it out on a few examples:", "    \n    if value == \"\"\n       \
    \ throw(ArgumentError(\"The value argument cannot be an empty string\"))\n   \
    \ \n    if value == \"-\"\n        return -closest_integer(value[1:end])\n   \
    \ \n    digits = value.digits\n    \n    if length(digits) == 0\n        throw(ArgumentError(\"\
    The value argument cannot be an empty string\"))\n    \n    smallest_digit = digits[1]\n\
    \    \n    if smallest_digit == \"-\"\n        smallest_digit = digits[2]\n  \
    \  \n    if smallest_digit == \"0\"\n        throw(ArgumentError(\"The value argument\
    \ cannot be an empty string\"))\n    \n    largest_digit = digits[end]\n    \n\
    \    if largest_digit == \"-\"\n        largest_digit = digits[end-1]\n    \n\
    \    if largest_digit == \"0\"\n        throw(ArgumentError(\"The value argument\
    \ cannot be an empty string\"))\n    \n    if smallest_digit == largest_digit\n\
    \        throw(ArgumentError(\"The value argument cannot be an empty string\"\
    ))\n    \n    smallest_digit = parse(smallest_digit)\n    largest_digit = parse(largest_digit)\n\
    \    \n    if smallest_digit == largest_digit\n        return parse(digits[1])\n\
    \    \n    diff = largest_digit - smallest_digit\n    \n    if diff < 0\n    \
    \    return parse(digits[end])\n    \n    return parse(digits[end-1]) + diff\n\
    end\n</cell>\n<text>\nThe function closest_integer is now available in the Julia\
    \ REPL.", "    closest_integer = Int64(math.ceil(value))\n    if closest_integer\
    \ == value:\n        closest_integer = Int64(math.floor(value))\n    return closest_integer\n\
    end\n</cell>\n<code language=julia-1.5>", "    if value == \"\"\n        error(\"\
    value cannot be empty\")\n    elseif value == \"-\"\n        error(\"value cannot\
    \ be negative\")\n    elseif value == \"+\"\n        error(\"value cannot be positive\"\
    )\n    elseif value == \"0\"\n        error(\"value cannot be zero\")\n    elseif\
    \ value == \"1\"\n        error(\"value cannot be one\")\n    elseif value ==\
    \ \"2\"\n        error(\"value cannot be two\")\n    elseif value == \"3\"\n \
    \       error(\"value cannot be three\")\n    elseif value == \"4\"\n        error(\"\
    value cannot be four\")\n    elseif value == \"5\"\n        error(\"value cannot\
    \ be five\")\n    elseif value == \"6\"\n        error(\"value cannot be six\"\
    )\n    elseif value == \"7\"\n        error(\"value cannot be seven\")\n    elseif\
    \ value == \"8\"\n        error(\"value cannot be eight\")\n    elseif value ==\
    \ \"9\"\n        error(\"value cannot be nine\")\n    elseif value == \".\"\n\
    \        error(\"value cannot be a decimal point\")\n    elseif value == \"e\"\
    \n        error(\"value cannot be an exponent\")\n    elseif value == \"E\"\n\
    \        error(\"value cannot be an exponent\")\n    elseif value == \"+\"\n \
    \       error(\"value cannot be an exponent\")\n    elseif value == \"-\"\n  \
    \      error(\"value cannot be an exponent\")\n    elseif value == \"*\"\n   \
    \     error(\"value cannot be an exponent\")\n    elseif value == \"/\"\n    \
    \    error(\"value cannot be an exponent\")\n    elseif value == \"^\"\n     \
    \   error(\"value cannot be an exponent\")\n    elseif value == \"%\"\n      \
    \  error(\"value cannot be an exponent\")\n    elseif value == \"(\"\n       \
    \ error(\"value cannot be an exponent\")\n    elseif value == \")\"\n        error(\"\
    value cannot be an exponent\")\n    elseif value == \"[\"\n        error(\"value\
    \ cannot be an exponent\")\n    elseif value == \"]\"\n        error(\"value cannot\
    \ be an exponent\")\n    elseif value == \"{\"\n        error(\"value cannot be\
    \ an exponent\")\n    elseif value == \"}\"\n        error(\"value cannot be an\
    \ exponent\")\n    elseif value == \"+\"\n        error(\"value cannot be an exponent\"\
    )\n    elseif value == \"-\"\n        error(\"value cannot be an exponent\")\n\
    \    elseif value == \"*\"\n        error(\"value cannot be an exponent\")\n \
    \   elseif value == \"/\"\n        error(\"value cannot be an exponent\")\n  \
    \  elseif value == \"^\"\n        error(\"value cannot be an exponent\")\n   \
    \ elseif value == \"%\"\n        error(\"value cannot be an exponent\")\n    elseif\
    \ value == \"(\"\n        error(\"value cannot be an exponent\")\n    elseif value\
    \ == \")\"\n        error(\"value cannot be an exponent\")\n    elseif value ==\
    \ \"[\"\n        ", "    closest_integer = Int(0)\n    \n    if value == \"-inf\"\
    \ or value == \"inf\" or value == \"nan\" then\n        return Int(0)\n    end\n\
    \    \n    if value == \"0\" then\n        return Int(0)\n    end\n    \n    if\
    \ value == \"1\" then\n        return Int(1)\n    end\n    \n    if value == \"\
    2\" then\n        return Int(2)\n    end\n    \n    if value == \"3\" then\n \
    \       return Int(3)\n    end\n    \n    if value == \"4\" then\n        return\
    \ Int(4)\n    end\n    \n    if value == \"5\" then\n        return Int(5)\n \
    \   end\n    \n    if value == \"6\" then\n        return Int(6)\n    end\n  \
    \  \n    if value == \"7\" then\n        return Int(7)\n    end\n    \n    if\
    \ value == \"8\" then\n        return Int(8)\n    end\n    \n    if value == \"\
    9\" then\n        return Int(9)\n    end\n    \n    if value == \"10\" then\n\
    \        return Int(10)\n    end\n    \n    if value == \"11\" then\n        return\
    \ Int(11)\n    end\n    \n    if value == \"12\" then\n        return Int(12)\n\
    \    end\n    \n    if value == \"13\" then\n        return Int(13)\n    end\n\
    \    \n    if value == \"14\" then\n        return Int(14)\n    end\n    \n  \
    \  if value == \"15\" then\n        return Int(15)\n    end\n    \n    if value\
    \ == \"16\" then\n        return Int(16)\n    end\n    \n    if value == \"17\"\
    \ then\n        return Int(17)\n    end\n    \n    if value == \"18\" then\n \
    \       return Int(18)\n    end\n    \n    if value == \"19\" then\n        return\
    \ Int(19)\n    end\n    \n    if value == \"20\" then\n        return Int(20)\n\
    \    end\n    \n    if value == \"21\" then\n        return Int(21)\n    end\n\
    \    \n    if value == \"22\" then\n        return Int(22)\n    end\n    \n  \
    \  if value == \"23\" then\n        return Int(23)\n    end\n    \n    if value\
    \ == \"24\" then\n        return Int(24)\n    end\n    \n    if value == \"25\"\
    \ then\n        return Int(25)\n    end\n    \n    if value == \"26\" then\n \
    \       return Int(26)\n    end\n    \n    if value == \"27\" then\n        return\
    \ Int(27)\n    end\n    \n    if value == \"28\" then\n        return Int(28)\n\
    \    end\n    \n    if value == \"29\" then\n        return Int(29)\n    end\n\
    \    \n    if value == \"30\" then\n        return Int(30)\n    end\n    \n  \
    \  if value == \"31\" then\n        return Int(31)", "    \n    if value == \"\
    \"\n        error(\"Value cannot be empty\")\n    end", "    closest_integer =\
    \ Int(0)\n    \n    if value == \"0\" || value == \"-0\"\n        closest_integer\
    \ = Int(0)\n    else\n        closest_integer = Int(value)\n        \n       \
    \ if closest_integer < Int(0)\n            closest_integer = Int(0)\n        elseif\
    \ closest_integer > Int(1)\n            closest_integer = Int(1)\n        else\n\
    \            closest_integer = Int(round(closest_integer))\n        end\n    end\n\
    \    \n    return closest_integer\nend\n</cell>\n<code language=julia-1.4>\n\"\
    \"\"\n    closest_integers(values::Vector{String})", "    closest_integer = Int(0)\n\
    \    \n    if value == \"0\" || value == \"-0\"\n        closest_integer = 0\n\
    \    elseif value == \"1\" || value == \"-1\"\n        closest_integer = 1\n \
    \   elseif value == \"2\" || value == \"-2\"\n        closest_integer = 2\n  \
    \  elseif value == \"3\" || value == \"-3\"\n        closest_integer = 3\n   \
    \ elseif value == \"4\" || value == \"-4\"\n        closest_integer = 4\n    elseif\
    \ value == \"5\" || value == \"-5\"\n        closest_integer = 5\n    elseif value\
    \ == \"6\" || value == \"-6\"\n        closest_integer = 6\n    elseif value ==\
    \ \"7\" || value == \"-7\"\n        closest_integer = 7\n    elseif value == \"\
    8\" || value == \"-8\"\n        closest_integer = 8\n    elseif value == \"9\"\
    \ || value == \"-9\"\n        closest_integer = 9\n    elseif value == \"10\"\n\
    \        closest_integer = 10\n    elseif value == \"11\"\n        closest_integer\
    \ = 11\n    elseif value == \"12\"\n        closest_integer = 12\n    elseif value\
    \ == \"13\"\n        closest_integer = 13\n    elseif value == \"14\"\n      \
    \  closest_integer = 14\n    elseif value == \"15\"\n        closest_integer =\
    \ 15\n    elseif value == \"16\"\n        closest_integer = 16\n    elseif value\
    \ == \"17\"\n        closest_integer = 17\n    elseif value == \"18\"\n      \
    \  closest_integer = 18\n    elseif value == \"19\"\n        closest_integer =\
    \ 19\n    elseif value == \"20\"\n        closest_integer = 20\n    elseif value\
    \ == \"21\"\n        closest_integer = 21\n    elseif value == \"22\"\n      \
    \  closest_integer = 22\n    elseif value == \"23\"\n        closest_integer =\
    \ 23\n    elseif value == \"24\"\n        closest_integer = 24\n    elseif value\
    \ == \"25\"\n        closest_integer = 25\n    elseif value == \"26\"\n      \
    \  closest_integer = 26\n    elseif value == \"27\"\n        closest_integer =\
    \ 27\n    elseif value == \"28\"\n        closest_integer = 28\n    elseif value\
    \ == \"29\"\n        closest_integer = 29\n    elseif value == \"30\"\n      \
    \  closest_integer = 30\n    elseif value == \"31\"\n        closest_integer =\
    \ 31\n    elseif value == \"32\"\n        closest_integer = 32\n    elseif value\
    \ == \"33\"\n        closest_integer = 33\n    elseif value == \"34\"\n      \
    \  closest_integer = 34\n    elseif value == \"35\"\n        closest_integer =\
    \ 35\n    elseif value == \"36\"", "    closest_integer = Int64(math.ceil(value))\n\
    \    if closest_integer == value \n        closest_integer = Int64(math.floor(value))\n\
    \    end\n    return closest_integer\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    closest_integer(value::Float64)", "    closest_integer = Int64(math.ceil(value))\n\
    \    if closest_integer == value:\n        closest_integer = Int64(math.floor(value))\n\
    \    return closest_integer\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n\
    \    closest_integer_with_precision(value::String)::Int64", "    if value == \"\
    -inf\" \n    then return -Infinity \n    else if value == \"inf\" \n    then return\
    \ Infinity \n    else if value == \"nan\" \n    then return NaN \n    else if\
    \ value == \"-nan\" \n    then return NaN \n    else if value == \"0\" \n    then\
    \ return 0 \n    else if value == \"1\" \n    then return 1 \n    else if value\
    \ == \"2\" \n    then return 2 \n    else if value == \"3\" \n    then return\
    \ 3 \n    else if value == \"4\" \n    then return 4 \n    else if value == \"\
    5\" \n    then return 5 \n    else if value == \"6\" \n    then return 6 \n  \
    \  else if value == \"7\" \n    then return 7 \n    else if value == \"8\" \n\
    \    then return 8 \n    else if value == \"9\" \n    then return 9 \n    else\
    \ if value == \"10\" \n    then return 10 \n    else if value == \"11\" \n   \
    \ then return 11 \n    else if value == \"12\" \n    then return 12 \n    else\
    \ if value == \"13\" \n    then return 13 \n    else if value == \"14\" \n   \
    \ then return 14 \n    else if value == \"15\" \n    then return 15 \n    else\
    \ if value == \"16\" \n    then return 16 \n    else if value == \"17\" \n   \
    \ then return 17 \n    else if value == \"18\" \n    then return 18 \n    else\
    \ if value == \"19\" \n    then return 19 \n    else if value == \"20\" \n   \
    \ then return 20 \n    else if value == \"21\" \n    then return 21 \n    else\
    \ if value == \"22\" \n    then return 22 \n    else if value == \"23\" \n   \
    \ then return 23 \n    else if value == \"24\" \n    then return 24 \n    else\
    \ if value == \"25\" \n    then return 25 \n    else if value == \"26\" \n   \
    \ then return 26 \n    else if value == \"27\" \n    then return 27 \n    else\
    \ if value == \"28\" \n    then return 28 \n    else if value == \"29\" \n   \
    \ then return 29 \n    else if value == \"30\" \n    then return 30 \n    else\
    \ if value == \"31\" \n    then return 31 \n    else if value == \"32\" \n   \
    \ then return 32 \n    else if value == \"33\" \n    then return 33 \n    else\
    \ if value == \"34\" \n    then return 34 \n    else ", "    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    if value == \"0\" || value == \"\
    -0\" \n        then return 0\n    else \n        local num = tonumber(value)\n\
    \        if num == 0 \n            then return 0\n        else if num < 0 \n \
    \           then return -closest_integer(-num)\n            else return num\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    closest_integer(value::Float64)",
  "    closest_integer = Int(0)\n    \n    if value == \"-inf\" or value == \"inf\"\
    \ or value == \"nan\" \n        then return closest_integer\n    \n    if value\
    \ == \"0\" \n        then return 0\n    \n    if value == \"1\" \n        then\
    \ return 1\n    \n    if value == \"2\" \n        then return 2\n    \n    if\
    \ value == \"3\" \n        then return 3\n    \n    if value == \"4\" \n     \
    \   then return 4\n    \n    if value == \"5\" \n        then return 5\n    \n\
    \    if value == \"6\" \n        then return 6\n    \n    if value == \"7\" \n\
    \        then return 7\n    \n    if value == \"8\" \n        then return 8\n\
    \    \n    if value == \"9\" \n        then return 9\n    \n    if value == \"\
    10\" \n        then return 10\n    \n    if value == \"11\" \n        then return\
    \ 11\n    \n    if value == \"12\" \n        then return 12\n    \n    if value\
    \ == \"13\" \n        then return 13\n    \n    if value == \"14\" \n        then\
    \ return 14\n    \n    if value == \"15\" \n        then return 15\n    \n   \
    \ if value == \"16\" \n        then return 16\n    \n    if value == \"17\" \n\
    \        then return 17\n    \n    if value == \"18\" \n        then return 18\n\
    \    \n    if value == \"19\" \n        then return 19\n    \n    if value ==\
    \ \"20\" \n        then return 20\n    \n    if value == \"21\" \n        then\
    \ return 21\n    \n    if value == \"22\" \n        then return 22\n    \n   \
    \ if value == \"23\" \n        then return 23\n    \n    if value == \"24\" \n\
    \        then return 24\n    \n    if value == \"25\" \n        then return 25\n\
    \    \n    if value == \"26\" \n        then return 26\n    \n    if value ==\
    \ \"27\" \n        then return 27\n    \n    if value == \"28\" \n        then\
    \ return 28\n    \n    if value == \"29\" \n        then return 29\n    \n   \
    \ if value == \"30\" \n        then return 30\n    \n    if value == \"31\" \n\
    \        then return 31\n    \n    if value == \"32\" \n        then return 32\n\
    \    \n    if value == \"33\" \n        then return 33\n    \n    if value ==\
    \ \"34\" \n        then return 34\n    \n    if value == \"35\" \n        then\
    \ return 35\n    \n    if value == \"36\" \n        then return 36\n    \n   \
    \ if value ", "    if value == \"-inf\" \n        then return -Inf \n    else\
    \ if value == \"inf\" \n        then return Inf \n    else if value == \"nan\"\
    \ \n        then return NaN \n    else if value == \"0\" \n        then return\
    \ 0 \n    else if value == \"1\" \n        then return 1 \n    else if value ==\
    \ \"2\" \n        then return 2 \n    else if value == \"3\" \n        then return\
    \ 3 \n    else if value == \"4\" \n        then return 4 \n    else if value ==\
    \ \"5\" \n        then return 5 \n    else if value == \"6\" \n        then return\
    \ 6 \n    else if value == \"7\" \n        then return 7 \n    else if value ==\
    \ \"8\" \n        then return 8 \n    else if value == \"9\" \n        then return\
    \ 9 \n    else if value == \"10\" \n        then return 10 \n    else if value\
    \ == \"11\" \n        then return 11 \n    else if value == \"12\" \n        then\
    \ return 12 \n    else if value == \"13\" \n        then return 13 \n    else\
    \ if value == \"14\" \n        then return 14 \n    else if value == \"15\" \n\
    \        then return 15 \n    else if value == \"16\" \n        then return 16\
    \ \n    else if value == \"17\" \n        then return 17 \n    else if value ==\
    \ \"18\" \n        then return 18 \n    else if value == \"19\" \n        then\
    \ return 19 \n    else if value == \"20\" \n        then return 20 \n    else\
    \ if value == \"21\" \n        then return 21 \n    else if value == \"22\" \n\
    \        then return 22 \n    else if value == \"23\" \n        then return 23\
    \ \n    else if value == \"24\" \n        then return 24 \n    else if value ==\
    \ \"25\" \n        then return 25 \n    else if value == \"26\" \n        then\
    \ return 26 \n    else if value == \"27\" \n        then return 27 \n    else\
    \ if value == \"28\" \n        then return 28 \n    else if value == \"29\" \n\
    \        then return 29 \n    else if value == \"30\" \n        then return 30\
    \ \n    else if value == \"31\" \n        then return 31 \n    else if value ==\
    \ \"32\" \n        then return 32 \n    else if value == \"33\" \n        then\
    \ return 33 \n    else if value == \"34\" \n        then return 34 \n    else\
    \ if value == \"35\" \n        then return 35 \n    else if value ", "    if value\
    \ == \"\"\n        error(\"value cannot be empty\")\n    else\n        closest_integer(value::Int64)\n\
    \    end\nend", "    if value == \"-inf\" \n        then return -Inf \n    else\
    \ if value == \"inf\" \n        then return Inf \n    else if value == \"0\" \n\
    \        then return 0 \n    else if value == \"1\" \n        then return 1 \n\
    \    else if value == \"2\" \n        then return 2 \n    else if value == \"\
    3\" \n        then return 3 \n    else if value == \"4\" \n        then return\
    \ 4 \n    else if value == \"5\" \n        then return 5 \n    else if value ==\
    \ \"6\" \n        then return 6 \n    else if value == \"7\" \n        then return\
    \ 7 \n    else if value == \"8\" \n        then return 8 \n    else if value ==\
    \ \"9\" \n        then return 9 \n    else if value == \"10\" \n        then return\
    \ 10 \n    else if value == \"11\" \n        then return 11 \n    else if value\
    \ == \"12\" \n        then return 12 \n    else if value == \"13\" \n        then\
    \ return 13 \n    else if value == \"14\" \n        then return 14 \n    else\
    \ if value == \"15\" \n        then return 15 \n    else if value == \"16\" \n\
    \        then return 16 \n    else if value == \"17\" \n        then return 17\
    \ \n    else if value == \"18\" \n        then return 18 \n    else if value ==\
    \ \"19\" \n        then return 19 \n    else if value == \"20\" \n        then\
    \ return 20 \n    else if value == \"21\" \n        then return 21 \n    else\
    \ if value == \"22\" \n        then return 22 \n    else if value == \"23\" \n\
    \        then return 23 \n    else if value == \"24\" \n        then return 24\
    \ \n    else if value == \"25\" \n        then return 25 \n    else if value ==\
    \ \"26\" \n        then return 26 \n    else if value == \"27\" \n        then\
    \ return 27 \n    else if value == \"28\" \n        then return 28 \n    else\
    \ if value == \"29\" \n        then return 29 \n    else if value == \"30\" \n\
    \        then return 30 \n    else if value == \"31\" \n        then return 31\
    \ \n    else if value == \"32\" \n        then return 32 \n    else if value ==\
    \ \"33\" \n        then return 33 \n    else if value == \"34\" \n        then\
    \ return 34 \n    else if value == \"35\" \n        then return 35 \n    else\
    \ if value == \"36\" \n        then return 36 \n    else if value == \"", "  \
    \  closest_integer = math.ceil(value)\n    if closest_integer == value:\n    \
    \    closest_integer = math.floor(value)\n    return closest_integer\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    closest_integer(value::Float64)", "   \
    \ closest_integer = int64(0)\n    closest_integer = int64(math.floor(value))\n\
    \    if closest_integer == int64(0)\n        closest_integer = int64(math.ceil(value))\n\
    \    end\n    return closest_integer\nend\n</cell>\n<code language=julia-1.5>",
  "    if value == \"\"\n        error(\"value cannot be empty\")\n    else\n    \
    \    local value = tonumber(value)\n        if value == 0\n            error(\"\
    value cannot be 0\")\n        elseif value == 1\n            return value\n  \
    \      elseif value == -1\n            return -value\n        elseif value ==\
    \ -2\n            return -value\n        elseif value == -2\n            return\
    \ -value\n        elseif value == -3\n            return -value\n        elseif\
    \ value == -4\n            return -value\n        elseif value == -5\n       \
    \     return -value\n        elseif value == -6\n            return -value\n \
    \       elseif value == -7\n            return -value\n        elseif value ==\
    \ -8\n            return -value\n        elseif value == -9\n            return\
    \ -value\n        elseif value == -10\n            return -value\n        elseif\
    \ value == -11\n            return -value\n        elseif value == -12\n     \
    \       return -value\n        elseif value == -13\n            return -value\n\
    \        elseif value == -14\n            return -value\n        elseif value\
    \ == -15\n            return -value\n        elseif value == -16\n           \
    \ return -value\n        elseif value == -17\n            return -value\n    \
    \    elseif value == -18\n            return -value\n        elseif value == -19\n\
    \            return -value\n        elseif value == -20\n            return -value\n\
    \        elseif value == -21\n            return -value\n        elseif value\
    \ == -22\n            return -value\n        elseif value == -23\n           \
    \ return -value\n        elseif value == -24\n            return -value\n    \
    \    elseif value == -25\n            return -value\n        elseif value == -26\n\
    \            return -value\n        elseif value == -27\n            return -value\n\
    \        elseif value == -28\n            return -value\n        elseif value\
    \ == -29\n            return -value\n        elseif value == -30\n           \
    \ return -value\n        elseif value == -31\n            return -value\n    \
    \    elseif value == -32\n            return -value\n        elseif value == -33\n\
    \            return -value\n        elseif value == -34\n            return -value\n\
    \        elseif value == -35\n            return -value\n        elseif value\
    \ == -36\n            return -value\n        elseif value == -37\n           \
    \ return -value\n        elseif value == -38\n            return -value\n    \
    \    elseif value == -39\n            return -value\n        elseif value == -40\n\
    \            return -value\n        elseif value == -41\n            return -value\n\
    \        elseif value == -42\n            return -value\n        elseif value\
    \ == -43\n            return -value\n        elseif value == -44\n           \
    \ return -value\n        elseif value == -45\n            return -value\n    \
    \    elseif value == -46\n            return -value\n        elseif value == -47\n\
    \            return -value\n        elseif value == -48\n            return -value\n\
    \        elseif value == -49\n            return -value\n        elseif value\
    \ == -50\n            return -value\n        elseif value == -51\n           \
    \ return -value\n        elseif value == -52\n            return -value\n    \
    \    elseif value == -53\n            return -value\n        elseif value == -54\n\
    \            return -value\n        else", "    \n    if value == \"\"\n     \
    \   error(\"value cannot be empty\")\n    else\n        \n        local closest\
    \ = 0\n        local difference = 0\n        \n        for number in string.gmatch(value,\
    \ \"%d+\") do\n            difference = math.abs(number - closest)\n         \
    \   if difference < difference then\n                closest = number\n      \
    \      end\n        end\n        \n        return closest\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    closest_integer = Int64(0)\n    \n    if value\
    \ == \"0\" || value == \"-0\"\n        return Int64(0)\n    \n    if value ==\
    \ \"1\" || value == \"-1\"\n        return Int64(-1)\n    \n    if value == \"\
    2\" || value == \"-2\"\n        return Int64(-2)\n    \n    if value == \"3\"\
    \ || value == \"-3\"\n        return Int64(-3)\n    \n    if value == \"4\" ||\
    \ value == \"-4\"\n        return Int64(-4)\n    \n    if value == \"5\" || value\
    \ == \"-5\"\n        return Int64(-5)\n    \n    if value == \"6\" || value ==\
    \ \"-6\"\n        return Int64(-6)\n    \n    if value == \"7\" || value == \"\
    -7\"\n        return Int64(-7)\n    \n    if value == \"8\" || value == \"-8\"\
    \n        return Int64(-8)\n    \n    if value == \"9\" || value == \"-9\"\n \
    \       return Int64(-9)\n    \n    if value == \"10\" || value == \"-10\"\n \
    \       return Int64(-10)\n    \n    if value == \"11\" || value == \"-11\"\n\
    \        return Int64(-11)\n    \n    if value == \"12\" || value == \"-12\"\n\
    \        return Int64(-12)\n    \n    if value == \"13\" || value == \"-13\"\n\
    \        return Int64(-13)\n    \n    if value == \"14\" || value == \"-14\"\n\
    \        return Int64(-14)\n    \n    if value == \"15\" || value == \"-15\"\n\
    \        return Int64(-15)\n    \n    if value == \"16\" || value == \"-16\"\n\
    \        return Int64(-16)\n    \n    if value == \"17\" || value == \"-17\"\n\
    \        return Int64(-17)\n    \n    if value == \"18\" || value == \"-18\"\n\
    \        return Int64(-18)\n    \n    if value == \"19\" || value == \"-19\"\n\
    \        return Int64(-19)\n    \n    if value == \"20\" || value == \"-20\"\n\
    \        return Int64(-20)\n    \n    if value == \"21\" || value == \"-21\"\n\
    \        return Int64(-21)\n    \n    if value == \"22\" || value == \"-22\"\n\
    \        return Int64(-22)\n    \n    if value == \"23\" || value == \"-23\"\n\
    \        return Int64(-23)\n    \n    if value == \"24\" || value == \"-24\"\n\
    \        return Int64(-24)\n    \n    if value == \"25\" || value == \"-25\"\n\
    \        return Int64(-25)\n    \n    if value == \"26\" || value == \"-26\"\n\
    \        return Int64(-26)\n    \n    if value == \"27\" || value == \"-27\"\n",
  "    closest_integer = int64(0)\n    \n    if value == \"\"\n        closest_integer\
    \ = int64(0)\n    elseif value == \"-\"\n        closest_integer = int64(0)\n\
    \    elseif value == \"0\"\n        closest_integer = int64(0)\n    elseif value\
    \ == \"1\"\n        closest_integer = int64(1)\n    elseif value == \"2\"\n  \
    \      closest_integer = int64(2)\n    elseif value == \"3\"\n        closest_integer\
    \ = int64(3)\n    elseif value == \"4\"\n        closest_integer = int64(4)\n\
    \    elseif value == \"5\"\n        closest_integer = int64(5)\n    elseif value\
    \ == \"6\"\n        closest_integer = int64(6)\n    elseif value == \"7\"\n  \
    \      closest_integer = int64(7)\n    elseif value == \"8\"\n        closest_integer\
    \ = int64(8)\n    elseif value == \"9\"\n        closest_integer = int64(9)\n\
    \    elseif value == \"10\"\n        closest_integer = int64(10)\n    elseif value\
    \ == \"11\"\n        closest_integer = int64(11)\n    elseif value == \"12\"\n\
    \        closest_integer = int64(12)\n    elseif value == \"13\"\n        closest_integer\
    \ = int64(13)\n    elseif value == \"14\"\n        closest_integer = int64(14)\n\
    \    elseif value == \"15\"\n        closest_integer = int64(15)\n    elseif value\
    \ == \"16\"\n        closest_integer = int64(16)\n    elseif value == \"17\"\n\
    \        closest_integer = int64(17)\n    elseif value == \"18\"\n        closest_integer\
    \ = int64(18)\n    elseif value == \"19\"\n        closest_integer = int64(19)\n\
    \    elseif value == \"20\"\n        closest_integer = int64(20)\n    elseif value\
    \ == \"21\"\n        closest_integer = int64(21)\n    elseif value == \"22\"\n\
    \        closest_integer = int64(22)\n    elseif value == \"23\"\n        closest_integer\
    \ = int64(23)\n    elseif value == \"24\"\n        closest_integer = int64(24)\n\
    \    elseif value == \"25\"\n        closest_integer = int64(25)\n    elseif value\
    \ == \"26\"\n        closest_integer = int64(26)\n    elseif value == \"27\"\n\
    \        closest_integer = int64(27)\n    elseif value == \"28\"\n        closest_integer\
    \ = int64(28)\n    elseif value == \"29\"\n        closest_integer = int64(29)\n\
    \    elseif value == \"30\"\n        closest_integer = int64(30)\n    elseif value\
    \ == \"31\"\n        closest_integer = int64(31)\n    elseif value == \"32\"\n",
  "    closest_integer = Int64(0)\n    if value == \"0\" || value == \"-0\" \n   \
    \     then return 0\n    else if value == \"1\" || value == \"-1\" \n        then\
    \ return 1\n    else if value == \"2\" || value == \"-2\" \n        then return\
    \ 2\n    else if value == \"3\" || value == \"-3\" \n        then return 3\n \
    \   else if value == \"4\" || value == \"-4\" \n        then return 4\n    else\
    \ if value == \"5\" || value == \"-5\" \n        then return 5\n    else if value\
    \ == \"6\" || value == \"-6\" \n        then return 6\n    else if value == \"\
    7\" || value == \"-7\" \n        then return 7\n    else if value == \"8\" ||\
    \ value == \"-8\" \n        then return 8\n    else if value == \"9\" || value\
    \ == \"-9\" \n        then return 9\n    else if value == \"10\" || value == \"\
    -10\" \n        then return 10\n    else if value == \"11\" || value == \"-11\"\
    \ \n        then return 11\n    else if value == \"12\" || value == \"-12\" \n\
    \        then return 12\n    else if value == \"13\" || value == \"-13\" \n  \
    \      then return 13\n    else if value == \"14\" || value == \"-14\" \n    \
    \    then return 14\n    else if value == \"15\" || value == \"-15\" \n      \
    \  then return 15\n    else if value == \"16\" || value == \"-16\" \n        then\
    \ return 16\n    else if value == \"17\" || value == \"-17\" \n        then return\
    \ 17\n    else if value == \"18\" || value == \"-18\" \n        then return 18\n\
    \    else if value == \"19\" || value == \"-19\" \n        then return 19\n  \
    \  else if value == \"20\" || value == \"-20\" \n        then return 20\n    else\
    \ if value == \"21\" || value == \"-21\" \n        then return 21\n    else if\
    \ value == \"22\" || value == \"-22\" \n        then return 22\n    else if value\
    \ == \"23\" || value == \"-23\" \n        then return 23\n    else if value ==\
    \ \"24\" || value == \"-24\" \n        then return 24\n    else if value == \"\
    25\" || value == \"-25\" \n        then return 25\n    else if value == \"26\"\
    \ || value == \"-26\" \n        then return 26\n    else if value == \"27\" ||\
    \ value == \"-27\" \n        then return 27\n    else if value == \"28\" || value\
    \ == \"-28\" \n        then return 28\n    else if value == \"29"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
