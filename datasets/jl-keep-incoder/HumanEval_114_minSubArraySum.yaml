name: HumanEval_114_minSubArraySum
language: julia
prompt: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
  \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1,\
  \ 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
  \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
  \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
  \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3, 10,\
  \ -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
  \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
  \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
  \ -1]) == -1)\nend\n"
completions: ["    \n    sum = 0\n    \n    for n in nums\n        sum += n\n    end\n\
    \    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2,\
    \ -3])\n</cell>\n<text>\nExercise\nWrite a function that takes an array of integers\
    \ and returns the sum of the squares of the integers in the array.", "    sum\
    \ = 0\n    for x in nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of times each unique element appears\
    \ in an array.", "    \n    sum = 0\n    for x in nums\n        sum += x\n   \
    \ end\n    return sum\nend\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ returns the sum of the squares of the numbers in a given vector.", "    \n \
    \   sum = 0\n    \n    for n in nums\n        sum += n\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>", "    \n    sum = 0\n    for x\
    \ in nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the squares of the numbers in an array.", "    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    sum = 0\n    \n    for num in nums\n        sum += num\n    end\n   \
    \ \n    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2,\
    \ -3])\n</cell>\n<text>\nProblem 3\nGiven an array of integers nums, find the\
    \ maximum sum of any non-empty sub-array\n    of nums.\n    Example\n    maxSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 6\n    maxSubArraySum([-1, -2, -3]) == -3\n    \"\"\"", " \
    \   \n    sum = 0\n    for n in nums\n        sum += n\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number of\
    \ times a given value appears in an array.", "    \n    sum = 0\n    \n    for\
    \ num in nums\n        sum += num\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of times a given value appears in\
    \ a given array.", "    \n    sum = 0\n    \n    for x in nums\n        sum +=\
    \ x\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of positive integers less than or equal to n.", "    sum = 0\n    for x in nums\n\
    \        sum += x\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of times a given value appears in an\
    \ array.", "    sum::Int64 = 0\n    \n    for n in nums\n        sum += n\n  \
    \  end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of times a given element appears in an array.", "    \n    sum =\
    \ 0\n    for x in nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.4>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.4>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem\
    \ 7\nGiven an array of integers nums, find the maximum sum of any non-empty sub-array\n\
    \    of nums.\n    Example\n    maxSubArraySum([2, 3, 4, 1, 2, 4]) == 5\n    maxSubArraySum([-1,\
    \ -2, -3]) == 6\n    \"\"\"", "    \n    sum = 0\n    \n    for x in nums\n  \
    \      sum += x\n    end\n    \n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of positive integers less than or\
    \ equal to n.", "    \n    sum = 0\n    \n    for n in nums\n        sum += n\n\
    \    end\n    \n    return sum\nend", "    sum = 0\n    for n in nums\n      \
    \  sum += n\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    sum = 0\n    \n    for n in nums\n        sum += n\n    end\n    \n \
    \   return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ number of integers in the array that are less than the given value.", "    \n\
    \    sum = 0\n    \n    for n in nums\n        sum += n\n    end\n    \n    return\
    \ sum\nend", "    sum = 0\n    for x in nums\n        sum += x\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2,\
    \ 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n\
    <text>\nExercise\nWrite a function that takes in an array of integers and returns\
    \ the number of elements that are less than or equal to zero.", "    \n    sum\
    \ = 0\n    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\n\
    Problem 7\nGiven an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"", "    sum = 0\n  \
    \  for x in nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    sum = 0\n    \n    for n in nums\n        sum\
    \ += n\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the numbers in the array nums.\nExample\nsumOfArray([1, 2, 3]) == 6\nsumOfArray([-1,\
    \ -2, -3]) == 6\nsumOfArray([-1, -2, -3, -4, -5]) == 10\nsumOfArray([-1, -2, -3,\
    \ -4, -5, -6, -7, -8, -9]) == 21\nsumOfArray([-1, -2, -3, -4, -5, -6, -7, -8,\
    \ -9, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, ",
  "    \n    sum = 0\n    \n    for n in nums\n        sum += n\n    end\n    \n \
    \   return sum\nend", "    \n    sum::Int64 = 0\n    \n    for num in nums\n \
    \       \n        if num > 0\n            \n            sum += num\n         \
    \   \n        else\n            \n            sum -= num\n            \n     \
    \   end\n        \n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of positive integers less than or equal to n.", "    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    sum::Int64 = nums.reduce(_ + _)\n    \n\
    \    for num in nums\n        sum += num\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of times a given\
    \ element appears in a given array.", "    \n    sum = 0\n    for x in nums\n\
    \        sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nProblem 7\nGiven an array of integers nums, find\
    \ the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n    maxSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 6\n    maxSubArraySum([-1, -2, -3]) == -3\n    \"\"\"", " \
    \   sum = 0\n    for i in nums\n        sum += i\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.0>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <code language=julia-1.0>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem\
    \ 7: Find the sum of all the numbers in the array nums.\nExample\nsumArray([-1,\
    \ -2, -3]) == -6", "    sum = 0\n    for x in nums\n        sum += x\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.0>", "    \n    sum = 0\n\
    \    \n    for num in nums\n        sum += num\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of positive integers less\
    \ than or equal to n.", "    sum::Int64 = 0\n    for i in nums\n        sum +=\
    \ i\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.4>", "    sum\
    \ = 0\n    for x in nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of positive integers less\
    \ than or equal to n.", "    \n    sum = 0\n    \n    for n in nums\n        sum\
    \ += n\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of positive integers in an array.", "    \n    sum = 0\n    \n    for num in\
    \ nums\n        sum += num\n    end\n    \n    return sum\nend", "    \n    sum\
    \ = 0\n    for n in nums\n        sum += n\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of times each element appears in\
    \ an array. \nExample\ncountElements([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 3, 4,\
    \ 4, 5]\ncountElements([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 3, 4, 4, 5]\ncountElements([1,\
    \ 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 3, 4, 4, 5]\ncountElements([1, 1, 2, 3, 4, 4,\
    \ 5]) == [1, 1, 2, 3, 4, 4, 5]\ncountElements([1, 1, 2, 3, 4, 4, 5]) == [1, 1,\
    \ 2, 3, 4, 4, 5]\ncountElements([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 3, 4, 4, 5]\n\
    countElements([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 3, 4, 4, 5]\ncountElements([1,\
    \ 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 3, 4, 4, 5]\ncountElements([1, 1, 2, 3, 4, 4,\
    \ 5]) == [1, 1, 2, 3, 4, 4, 5]\ncountElements([1, 1, 2, 3, 4, 4, 5]) == [1, 1,\
    \ 2, 3, 4, 4, 5]\ncountElements([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 3, 4, 4, 5]\n\
    countElements([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 3, 4, 4, 5]\ncountElements([1,\
    \ 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 3, 4, 4, 5]\ncountElements([1, 1, 2, 3, 4, 4,\
    \ 5]) == [1, 1, 2, 3, 4, 4, 5]\ncountElements([1, 1, 2, 3, 4, 4, 5]) == [1, 1,\
    \ 2, 3, 4, 4, 5]\ncountElements([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 3, 4, 4, 5]\n\
    countElements([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 3, 4, 4, 5]\ncountElements([1,\
    \ 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 3, 4, 4, 5]\ncountElements([1, 1, 2, 3, 4, 4,\
    \ 5]) == [1, 1, 2, 3, 4, 4, 5]\ncountElements([1, 1, 2, 3, 4, 4, 5]) == [1, 1,\
    \ 2, 3, 4, 4, 5]\ncountElements([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 3, 4, 4, 5]\n\
    countElements([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 3, 4, 4, 5]\ncountElements([1,\
    \ 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 3, 4, 4, 5]\ncountElements([1, 1, 2, 3, 4, 4,\
    \ 5]) == [1, 1, 2, 3, 4, 4, 5]\ncountElements([1, 1, 2, 3, 4, 4, 5]) == [1, 1,\
    \ 2, 3, 4, 4, 5]\ncountElements([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 3, 4, 4, 5]\n\
    countElements([1, 1, 2, 3, 4, 4, 5]", "    \n    sum = 0\n    for x in nums\n\
    \        sum += x\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes an array of integers and returns the number of elements\
    \ that are less than the given value.", "    \n    sum::Int64 = 0\n    \n    for\
    \ num in nums\n        sum += num\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem\
    \ 7", "    \n    sum = 0\n    \n    for n in nums\n        sum += n\n    end\n\
    \    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2,\
    \ -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of times each unique element appears in an array.", "    \n    sum = 0\n   \
    \ \n    for x in nums\n        sum += x\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    sum = 0\n    \n    for n in nums\n\
    \        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of times each element appears in an array.", "    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem 4\nWrite a function that\
    \ returns the number of times a given element appears in an array.", "    \n \
    \   sum = 0\n    \n    for x in nums\n        sum += x\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>", "    \n    sum = 0\n    \n  \
    \  for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of times a given value appears in\
    \ an array. For example, the number of times 3 appears in [3, 3, 3, 3] is 3.",
  "    \n    sum = 0\n    \n    for num in nums\n        sum += num\n    end\n   \
    \ \n    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2,\
    \ -3])\n</cell>\n<text>\nProblem 7\nWrite a function that returns the number of\
    \ prime numbers less than or equal to n.", "    \n    sum = 0\n    \n    for num\
    \ in nums\n        sum += num\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of elements in a vector that are less than a given value.",
  "    \n    sum = 0\n    for x in nums\n        sum += x\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of positive integers less\
    \ than or equal to n.", "    \n    sum = 0\n    \n    for n in nums\n        sum\
    \ += n\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    sum = 0\n    \n    for n in nums\n        sum += n\n    end\n    \n \
    \   return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n\
    </cell>\n<text>\nProblem 7\nGiven an array of integers nums, find the minimum\
    \ sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"", " \
    \   \n    sum = 0\n    \n    for x in nums\n        sum += x\n    end\n    \n\
    \    return sum\nend", "    \n    sum = 0\n    \n    for n in nums\n        sum\
    \ += n\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nProblem 7\nWrite a function that returns the number\
    \ of times a given value appears in an array.", "    \n    sum = 0\n    for n\
    \ in nums\n        sum += n\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of positive integers less than or equal to n. \nExample\npositives(5) == 3\n\
    positives(10) == 5\npositives(0) == 0\npositives(-1) == 1\npositives(-2) == 0\n\
    positives(-3) == 0\npositives(-4) == 0\npositives(-5) == 0\npositives(-6) == 0\n\
    positives(-7) == 0\npositives(-8) == 0\npositives(-9) == 0\npositives(-10) ==\
    \ 0\npositives(-11) == 0\npositives(-12) == 0\npositives(-13) == 0\npositives(-14)\
    \ == 0\npositives(-15) == 0\npositives(-16) == 0\npositives(-17) == 0\npositives(-18)\
    \ == 0\npositives(-19) == 0\npositives(-20) == 0\npositives(-21) == 0\npositives(-22)\
    \ == 0\npositives(-23) == 0\npositives(-24) == 0\npositives(-25) == 0\npositives(-26)\
    \ == 0\npositives(-27) == 0\npositives(-28) == 0\npositives(-29) == 0\npositives(-30)\
    \ == 0\npositives(-31) == 0\npositives(-32) == 0\npositives(-33) == 0\npositives(-34)\
    \ == 0\npositives(-35) == 0\npositives(-36) == 0\npositives(-37) == 0\npositives(-38)\
    \ == 0\npositives(-39) == 0\npositives(-40) == 0\npositives(-41) == 0\npositives(-42)\
    \ == 0\npositives(-43) == 0\npositives(-44) == 0\npositives(-45) == 0\npositives(-46)\
    \ == 0\npositives(-47) == 0\npositives(-48) == 0\npositives(-49) == 0\npositives(-50)\
    \ == 0\npositives(-51) == 0\npositives(-52) == 0\npositives(-53) == 0\npositives(-54)\
    \ == 0\npositives(-55) == 0\npositives(-56) == 0\npositives(-57) == 0\npositives(-58)\
    \ == 0\npositives(-59) == 0\npositives(-60) == 0\npositives(-61) == 0\npositives(-62)\
    \ == 0\npositives(-63) == 0\npositives(-64) == 0\npositives(-65) == 0\npositives(-66)\
    \ == 0\npositives(-67) == 0\npositives(-68) == 0\npositives(-69) == 0\npositives(-70)\
    \ == 0\npositives(-71) == 0\npositives(-", "    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    sum = 0\n    \n    for n in nums\n    \
    \    sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of times a given value appears in an array.", "    \n    sum = 0\n    \n   \
    \ for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of times a given\
    \ value appears in an array.", "    sum = 0\n    for n in nums\n        sum +=\
    \ n\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.3>", "    sum\
    \ = 0\n    for x in nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of positive integers less than or\
    \ equal to n.", "    sum = 0\n    for n in nums\n        sum += n\n    end\n \
    \   return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of positive\
    \ integers less than or equal to n.", "    sum = 0\n    for num in nums\n    \
    \    sum += num\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    sum = 0\n    \n    for n in nums\n        sum += n\n    end\n    \n \
    \   return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n\
    </cell>\n<text>\nProblem 7\nGiven an array of integers nums, find the maximum\
    \ sum of any non-empty sub-array\n    of nums.\n    Example\n    maxSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 6\n    maxSubArraySum([-1, -2, -3]) == -3\n    \"\"\"", " \
    \   \n    sum = 0\n    \n    for x in nums\n        \n        if sum < x\n   \
    \         \n            sum = x\n            \n        end\n    end\n    \n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n\
    </cell>\n<text>\nProblem 7: Find the minimum number in a given array of integers\n\
    Given an array of integers nums, find the minimum number in the array.\nExample\n\
    min([2, 3, 4, 1, 2, 4]) == 4\nmin([-1, -2, -3]) == -3\nmin([-100, -10, -1, 0,\
    \ 1, 10, 100]) == -1\nmin([-100, -10, -1, 0, 1, 10, 100]) == -1\nmin([-100, -10,\
    \ -1, 0, 1, 10, 100]) == -1\nmin([-100, -10, -1, 0, 1, 10, 100]) == -1\nmin([-100,\
    \ -10, -1, 0, 1, 10, 100]) == -1\nmin([-100, -10, -1, 0, 1, 10, 100]) == -1\n\
    min([-100, -10, -1, 0, 1, 10, 100]) == -1\nmin([-100, -10, -1, 0, 1, 10, 100])\
    \ == -1\nmin([-100, -10, -1, 0, 1, 10, 100]) == -1\nmin([-100, -10, -1, 0, 1,\
    \ 10, 100]) == -1\nmin([-100, -10, -1, 0, 1, 10, 100]) == -1\nmin([-100, -10,\
    \ -1, 0, 1, 10, 100]) == -1\nmin([-100, -10, -1, 0, 1, 10, 100]) == -1\nmin([-100,\
    \ -10, -1, 0, 1, 10, 100]) == -1\nmin([-100, -10, -1, 0, 1, 10, 100]) == -1\n\
    min([-100, -10, -1, 0, 1, 10, 100]) == -1\nmin([-100, -10, -1, 0, 1, 10, 100])\
    \ == -1\nmin([-100, -10, -1, 0, 1, 10, 100]) == -1\nmin([-100, -10, -1, 0, 1,\
    \ 10, 100]) == -1\nmin([-100, -10, -1, 0, 1, 10, 100]) == -1\nmin([-100, -10,\
    \ -1, 0, 1, 10, 100]) == -1\nmin([-100, -10, -1, 0, 1, 10, 100]) == -1\nmin([-100,\
    \ -10, -1, 0, 1, 10, 100]) == -1\nmin([-100, -10, -1, 0, 1, 10, 100]) == -1\n\
    min([-100, -10, -1, 0, 1, 10, 100]) == -1\nmin([-100, -10, -1, 0, 1, 10, 100])\
    \ == -1\nmin([-100, -10, -1, 0, 1, 10, 100]) == -1\nmin([-100, -", "    \n   \
    \ sum = 0\n    \n    for num in nums\n        sum += num\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2,\
    \ 4])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number of\
    \ times a given value appears in an array.", "    sum = 0\n    for x in nums\n\
    \        sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of times a given value appears in an array.", "    \n    sum = 0\n    \n   \
    \ for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of times a given number appears\
    \ in an array.", "    sum::Int64 = 0\n    for i in nums\n        sum += i\n  \
    \  end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2,\
    \ -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of times each unique element appears in an array. For example, if the input\
    \ array is [1, 1, 2, 3], the function should return [1, 1, 2, 3] as its output.",
  "    sum = 0\n    for n in nums\n        sum += n\n    end\n    return sum\nend",
  "    \n    sum = 0\n    for x in nums\n        sum += x\n    end\n    return sum\n\
    end", "    sum = 0\n    for n in nums\n        sum += n\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the squares of the numbers\
    \ in an array.", "    sum = 0\n    for n in nums\n        sum += n\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of times a given number appears in an array.", "    sum = 0\n   \
    \ for x in nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    sum::Int64 = 0\n    for n in nums\n        sum +=\
    \ n\n    end\n    return sum\nend", "    \n    sum = 0\n    for x in nums\n  \
    \      sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of times a given element appears in an array.", "    \n    sum = 0\n    \n \
    \   for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes an array of integers and returns\
    \ the sum of the squares of the numbers.", "    \n    sum = 0\n    \n    for x\
    \ in nums\n        sum += x\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of times each element appears in an array. For example, if\
    \ the input array is [1, 1, 2, 3], the function should return [1, 1, 2, 3] as\
    \ its output. Your function should work for any type of array (including vectors\
    \ and matrices).", "    sum = 0\n    for x in nums\n        sum += x\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.0>\nminSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n</cell>\n<code language=julia-1.0>\nminSubArraySum([-1, -2, -3])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of positive\
    \ integers less than or equal to n.", "    sum = 0\n    for x in nums\n      \
    \  sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.0>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nProblem 7\nWrite a function that returns the number\
    \ of times the number 'x' appears in the array 'nums'.\nExample\ncountNums([1,\
    \ 2, 3, 1, 2, 3]) == 3\ncountNums([1, 2, 3, 1, 2, 3, 1]) == 1\ncountNums([1, 4,\
    \ 3, 1, 2, 3, 1]) == 2\ncountNums([1, 4, 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4,\
    \ 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4, 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4,\
    \ 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4, 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4,\
    \ 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4, 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4,\
    \ 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4, 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4,\
    \ 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4, 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4,\
    \ 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4, 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4,\
    \ 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4, 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4,\
    \ 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4, 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4,\
    \ 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4, 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4,\
    \ 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4, 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4,\
    \ 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4, 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4,\
    \ 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4, 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4,\
    \ 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4, 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4,\
    \ 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4, 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4,\
    \ 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4, 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4,\
    \ 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4, 3, 1, 2, 3, ", "    \n    sum = 0\n \
    \   for x in nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of times each element appears in an array. For example, given\
    \ [1, 1, 2, 2], your function should return [1, 1, 2, 2]. Your function should\
    \ return an empty array if there are no elements in the array.", "    \n    sum\
    \ = 0\n    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n\
    </cell>\n<text>\nProblem 7\nWrite a function that returns the number of times\
    \ a given element appears in an array.", "    \n    sum = 0\n    \n    for num\
    \ in nums\n        sum += num\n    end\n    \n    return sum\nend", "    \n  \
    \  sum = 0\n    \n    for num in nums\n        sum += num\n    end\n    \n   \
    \ return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4,\
    \ 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of positive\
    \ integers less than or equal to n. \nExample\npositiveCount(5) == 3\npositiveCount(10)\
    \ == 4\npositiveCount(0) == 0\npositiveCount(-1) == 0\npositiveCount(-10) == 0\n\
    positiveCount(-101) == 0\npositiveCount(-102) == 0\npositiveCount(-103) == 0\n\
    positiveCount(-104) == 0\npositiveCount(-105) == 0\npositiveCount(-106) == 0\n\
    positiveCount(-107) == 0\npositiveCount(-108) == 0\npositiveCount(-109) == 0\n\
    positiveCount(-110) == 0\npositiveCount(-111) == 0\npositiveCount(-112) == 0\n\
    positiveCount(-113) == 0\npositiveCount(-114) == 0\npositiveCount(-115) == 0\n\
    positiveCount(-116) == 0\npositiveCount(-117) == 0\npositiveCount(-118) == 0\n\
    positiveCount(-119) == 0\npositiveCount(-120) == 0\npositiveCount(-121) == 0\n\
    positiveCount(-122) == 0\npositiveCount(-123) == 0\npositiveCount(-124) == 0\n\
    positiveCount(-125) == 0\npositiveCount(-126) == 0\npositiveCount(-127) == 0\n\
    positiveCount(-128) == 0\npositiveCount(-129) == 0\npositiveCount(-130) == 0\n\
    positiveCount(-131) == 0\npositiveCount(-132) == 0\npositiveCount(-133) == 0\n\
    positiveCount(-134) == 0\npositiveCount(-135) == 0\npositiveCount(-136) == 0\n\
    positiveCount(-137) == 0\npositiveCount(-138) == 0\npositiveCount(-139) == 0\n\
    positiveCount(-140) == 0\npositiveCount(-141) == 0\npositiveCount(-142) == 0\n\
    positiveCount(-143) == 0\npositiveCount(-144) == 0\npositiveCount(-145) == 0\n\
    positiveCount(-146) == 0\npositiveCount(-147) == 0\npositiveCount(-148) == 0\n\
    positiveCount(-149) == 0\npositiveCount(-150) == 0\npositiveCount(-151) == 0\n\
    positiveCount(-152) == 0\npositiveCount(-153) == 0\npositiveCount(-154) == 0\n\
    positiveCount(-155) == 0\npositiveCount(-156) == 0\npositiveCount(-157) == 0\n\
    positiveCount(-158) == 0\npositiveCount(-159) == 0\npositiveCount(-160) == 0\n\
    positiveCount(-161) == 0\npositiveCount(-162) == 0\npositiveCount(-163) == 0\n\
    positiveCount(-164) == 0\npositiveCount(-165) == 0\npositiveCount(", "    sum::Int64\
    \ = 0\n    for i in nums\n        sum += i\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem\
    \ 7", "    \n    sum = 0\n    \n    for n in nums\n        sum += n\n    end\n\
    \    \n    return sum\nend", "    sum = 0\n    for n in nums\n        sum += n\n\
    \    end\n    return sum\nend", "    \n    sum = 0\n    \n    for n in nums\n\
    \        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    sum = 0\n    \n    for n in nums\n        sum += n\n    end\n    \n \
    \   return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of positive\
    \ integers less than or equal to n.", "    \n    sum = 0\n    \n    for num in\
    \ nums\n        sum += num\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem 4\nGiven an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n\
    \    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3])\
    \ == -6\n    \"\"\"", "    \n    sum = 0\n    \n    for num in nums\n        sum\
    \ += num\n    end\n    \n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the minimum sum of any non-empty sub-array of nums.\n\
    Example\nminSubArraySum([2, 3, 4, 1, 2, 4]) == 1\nminSubArraySum([-1, -2, -3])\
    \ == -6\nHint: Use a for loop to iterate through the array.", "    \n    sum =\
    \ 0\n    for n in nums\n        sum += n\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    sum = 0\n    \n    for n in nums\n    \
    \    sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of times a given value appears in an array.", "    \n    sum = 0\n    \n   \
    \ for n in nums\n        sum += n\n    end\n    \n    return sum\nend", "    \n\
    \    sum = 0\n    \n    for x in nums\n        sum += x\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2,\
    \ 4])\n</cell>\n<text>\nProblem 7\nWrite a Julia function minSubArraySum(nums::Vector{Int64})::Int64\
    \ which returns the minimum sum of any non-empty sub-array of nums.", "    \n\
    \    sum = 0\n    \n    for n in nums\n        sum += n\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2,\
    \ 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n\
    <text>\nProblem 7", "    sum = 0\n    for i in nums\n        sum += i\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of positive integers less than or equal to a given integer n.", " \
    \   sum = 0\n    for n in nums\n        sum += n\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.0>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <code language=julia-1.0>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of times the number n appears in\
    \ the array nums.", "    \n    sum = 0\n    for n in nums\n        sum += n\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2,\
    \ -3])\n</cell>\n<text>\nProblem 4\nGiven an array of integers nums, find the\
    \ maximum sum of any non-empty sub-array\n    of nums.\n    Example\n    maxSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 6\n    maxSubArraySum([-1, -2, -3]) == -3\n    \"\"\"", " \
    \   \n    sum = 0\n    \n    for x in nums\n        sum += x\n    end\n    \n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of positive integers less than or equal to n.", "    \n    sum =\
    \ 0\n    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n\
    </cell>\n<text>\nProblem 7\nWrite a function that returns the number of times\
    \ a given element appears in an array.", "    sum = 0\n    for x in nums\n   \
    \     sum += x\n    end\n    return sum\nend", "    sum = 0\n    for n in nums\n\
    \        sum += n\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>",
  "    sum = 0\n    for x in nums\n        sum += x\n    end\n    return sum\nend",
  "    \n    sum = 0\n    \n    for num in nums\n        sum += num\n    end\n   \
    \ \n    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2,\
    \ -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the minimum\
    \ number in an array of integers nums.", "    sum = 0\n    for num in nums\n \
    \       sum += num\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>",
  "    sum = 0\n    \n    for num in nums\n        sum += num\n    end\n    \n   \
    \ return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4,\
    \ 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n\
    </cell>\n<text>\nProblem 7\nWrite a function that returns the number of times\
    \ the given element appears in the given array.", "    \n    sum = 0\n    \n \
    \   for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem\
    \ 7\nGiven an array of integers nums, find the minimum sum of any non-empty sub-array\n\
    \    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1,\
    \ -2, -3]) == -6\n    \"\"\"", "    \n    sum = 0\n    for x in nums\n       \
    \ sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of times a given element appears in an array.", "    \n    sum = 0\n    \n \
    \   for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>", "    sum = 0\n    for x in nums\n        sum += x\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>", "    \n  \
    \  sum = 0\n    \n    for num in nums\n        \n        if num > 0\n        \
    \    \n            sum += num\n            \n        else\n            \n    \
    \        sum -= num\n            \n        end\n        \n    end\n    \n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2,\
    \ 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n\
    <text>\nProblem 7\nWrite a function that returns the number of positive integers\
    \ less than or equal to n that are divisible by k.", "    \n    sum = 0\n    \n\
    \    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the squares of the numbers in nums.",
  "    \n    sum = 0\n    \n    for n in nums\n        sum += n\n    end\n    \n \
    \   return sum\nend", "    \n    sum = 0\n    \n    for n in nums\n        sum\
    \ += n\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nProblem 7\nWrite a function that returns the number\
    \ of times a given value appears in an array.", "    sum = 0\n    for num in nums\n\
    \        sum += num\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of times each element appears in an array.", "    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of positive integers less than or equal to n.", "    \n \
    \   sum = 0\n    for x in nums\n        sum += x\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    sum = 0\n    \n    for x in nums\n\
    \        sum += x\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nProblem 7\nWrite a Julia function called maxSubArraySum(nums::Vector{Int64})::Int64\
    \ which returns the maximum sum of any non-empty sub-array of nums.\nExample\n\
    maxSubArraySum([2, 3, 4, 1, 2, 4]) == 9\nmaxSubArraySum([-1, -2, -3]) == -6\n\
    maxSubArraySum([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1]) == -60\nmaxSubArraySum([-10,\
    \ -9, -8, -7, -6, -5, -4, -3, -2, -1, 0]) == -60\nmaxSubArraySum([-10, -9, -8,\
    \ -7, -6, -5, -4, -3, -2, -1, 0, 1]) == -60\nmaxSubArraySum([-10, -9, -8, -7,\
    \ -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4]) == -60\nmaxSubArraySum([-10, -9, -8,\
    \ -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == -60\nmaxSubArraySum([-10,\
    \ -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6]) == -60\nmaxSubArraySum([-10,\
    \ -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7]) == -60\nmaxSubArraySum([-10,\
    \ -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8]) == -60\nmaxSubArraySum([-10,\
    \ -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == -60\n\
    maxSubArraySum([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]) == -60\nmaxSubArraySum([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1,\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == -60\nmaxSubArraySum([-10, -9, -8,\
    \ -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == -60\n\
    maxSubArraySum([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13]) == -60\nmaxSubArray", "    \n    sum = 0\n    \n \
    \   for x in nums\n        sum += x\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem\
    \ 3\nGiven an array of integers nums, find the minimum sum of any non-empty sub-array\n\
    \    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1,\
    \ -2, -3]) == -6\n    \"\"\"", "    \n    sum = 0\n    \n    for n in nums\n \
    \       sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nProblem 3\nGiven an array of integers nums, find\
    \ the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n    maxSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 6\n    maxSubArraySum([-1, -2, -3]) == -3\n    \"\"\"", " \
    \   \n    sum = 0\n    \n    for n in nums\n        sum += n\n    end\n    \n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of elements in a given array that satisfy a given condition. For\
    \ example, given an array nums = [1, 2, 3, 4], return 2 because there are 2 elements\
    \ in the array that satisfy the condition num > 2.", "    \n    sum = 0\n    \n\
    \    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of times a given number appears\
    \ in an array. For example, given [1, 1, 2, 3], return 2.", "    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend",
  "    \n    sum = 0\n    \n    for n in nums\n        sum += n\n    end\n    \n \
    \   return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n\
    </cell>\n<text>\nProblem 7: Find the minimum number in an array that does not\
    \ occur in another array\nGiven two arrays, A and B, find the minimum number in\
    \ A that does not occur in B. \nExample\nA = [1, 2, 3, 1] B = [1, 2, 3] -> 1\n\
    A = [1, 2, 3, 1] B = [1, 3, 2] -> 3\nA = [1, 2, 3, 1] B = [1, 3, 5] -> 3\nA =\
    \ [1, 2, 3, 1] B = [1, 3, 6] -> 3\nA = [1, 2, 3, 1] B = [1, 3, 7] -> 3\nA = [1,\
    \ 2, 3, 1] B = [1, 3, 8] -> 3\nA = [1, 2, 3, 1] B = [1, 3, 9] -> 3\nA = [1, 2,\
    \ 3, 1] B = [1, 3, 10] -> 3\nA = [1, 2, 3, 1] B = [1, 3, 11] -> 3\nA = [1, 2,\
    \ 3, 1] B = [1, 3, 12] -> 3\nA = [1, 2, 3, 1] B = [1, 3, 13] -> 3\nA = [1, 2,\
    \ 3, 1] B = [1, 3, 14] -> 3\nA = [1, 2, 3, 1] B = [1, 3, 15] -> 3\nA = [1, 2,\
    \ 3, 1] B = [1, 3, 16] -> 3\nA = [1, 2, 3, 1] B = [1, 3, 17] -> 3\nA = [1, 2,\
    \ 3, 1] B = [1, 3, 18] -> 3\nA = [1, 2, 3, 1] B = [1, 3, 19] -> 3\nA = [1, 2,\
    \ 3, 1] B = [1, 3, 20] -> 3\nA = [1, 2, 3, 1] B = [1, 3, 21] -> 3\nA = [1, 2,\
    \ 3, 1] B = [1, 3, 22] -> 3\nA = [1, 2, 3, 1] B = [1, 3, 23] -> 3\nA = [1, 2,\
    \ 3, 1] B = [1, 3, 24] -> 3\nA = [1, 2, 3, 1] B = [1, 3, 25] -> 3\nA = [1, 2,\
    \ 3, 1] B = [1, 3, 26] -> 3\nA = [1, 2, 3, 1] B = [1, 3, 27] -> 3\nA = [1, 2,\
    \ 3, 1] B = [1, 3, 28] -> 3\nA = [1, 2, 3, 1] B = [1, 3, 29] -> 3\nA = [1, 2,\
    \ 3, 1] B = [1, 3, 30] -> 3\nA = [1, 2, 3, 1] B = [1, 3, 31] -> 3\nA = [", " \
    \   \n    sum = 0\n    \n    for num in nums\n        sum += num\n    end\n  \
    \  \n    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2,\
    \ -3])\n</cell>\n<text>\nProblem 7\nGiven an array of integers nums, find the\
    \ maximum sum of any non-empty sub-array\n    of nums.\n    Example\n    maxSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 6\n    maxSubArraySum([-1, -2, -3]) == -3\n    \"\"\"", " \
    \   \n    sum = 0\n    \n    for n in nums\n        sum += n\n    end\n    \n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n\
    </cell>\n<text>\nProblem 7\nGiven an array of integers nums, find the minimum\
    \ number of moves to make all numbers equal, where a move is incrementing a number\
    \ by 1 or decrementing a number by 1.", "    \n    sum = 0\n    \n    for num\
    \ in nums\n        sum += num\n    end\n    \n    return sum\nend", "    \n  \
    \  sum = 0\n    \n    for n in nums\n        sum += n\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2,\
    \ 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n\
    <text>\nProblem 7\nWrite a function that returns the number of positive integers\
    \ less than or equal to n.", "    sum = 0\n    for i in nums\n        sum += i\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>", "    sum =\
    \ 0\n    for num in nums\n        sum += num\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>", "    sum = 0\n    for x in nums\n        sum += x\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2,\
    \ -3])\n</cell>\n<text>\nProblem 7: Find all subsets of a given set\nGiven a set\
    \ of distinct integers, find all subsets (without duplicates) of that set.\nExample\n\
    subsets([1, 2, 3]) == [[1, 2, 3], [1, 2], [1], [3], [2, 3]]\nsubsets([1, 2]) ==\
    \ [[1, 2], [1], [2]]\nsubsets([1]) == [[1], [2]]\nsubsets([]) == []\n\"\"\"",
  "    \n    sum = 0\n    \n    for num in nums\n        sum += num\n    end\n   \
    \ \n    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2,\
    \ -3])\n</cell>\n<text>\nProblem 7: Find the minimum number of coins needed to\
    \ make up change for amount change.\nInput: change = amount of change in cents,\
    \ coins = [1, 2, 5, 10, 20, 50, 100, 200]\nOutput: minimum number of coins needed\
    \ to make up change\nExample\nchange = 100, coins = [1, 2, 5, 10, 20, 50, 100,\
    \ 200]\nOutput: 5\nExplanation: One way to make up change is by making 1 dollar\
    \ and 5 cents, which is worth 1 dollar and 5 cents.\nAnother way to make up change\
    \ is by making 1 dollar and 20 cents, which is worth 1 dollar and 20 cents.\n\
    Another way to make up change is by making 1 dollar and 10 cents, which is worth\
    \ 1 dollar and 10 cents.\nAnother way to make up change is by making 1 dollar\
    \ and 5 cents, which is worth 1 dollar and 5 cents.\nAnother way to make up change\
    \ is by making 1 dollar and 2 cents, which is worth 1 dollar and 2 cents.\nAnother\
    \ way to make up change is by making 1 dollar and 1 cent, which is worth 1 dollar\
    \ and 1 cent.\nAnother way to make up change is by making 1 dollar and 0 cents,\
    \ which is worth 0 dollars.\nAnother way to make up change is by making 0 dollars\
    \ and 1 cent, which is worth 0 dollars and 1 cent.\nAnother way to make up change\
    \ is by making 0 dollars and 2 cents, which is worth 0 dollars and 2 cents.\n\
    Another way to make up change is by making 0 dollars and 5 cents, which is worth\
    \ 0 dollars and 5 cents.\nAnother way to make up change is by making 0 dollars\
    \ and 10 cents, which is worth 0 dollars and 10 cents.\nAnother way to make up\
    \ change is by making 0 dollars and 20 cents, which is worth 0 dollars and 20\
    \ cents.\nAnother way to make up change is by making 0 dollars and 50 cents, which\
    \ is worth 0 dollars and 50 cents.\nAnother way to make up change is by making\
    \ 0 dollars and 100 cents, which is worth 0 dollars and 100 cents.\nAnother way\
    \ to make up change is by ", "    sum = 0\n    for num in nums\n        sum +=\
    \ num\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2,\
    \ -3])\n</cell>\n<text>\nProblem 4\nGiven an array of integers nums, find the\
    \ minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"", " \
    \   sum = 0\n    for n in nums\n        sum += n\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    sum = 0\n    \n    for num in\
    \ nums\n        sum += num\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem 7: Find the minimum number\
    \ of coins required to make up an amount\nGiven an integer amount, find the minimum\
    \ number of coins required to make up that amount. \nThe coins are dollar bills\
    \ and quarters.\nExample\nFor amount = 10, the minimum number of coins is 3.\n\
    For amount = 25, the minimum number of coins is 3.\nFor amount = 50, the minimum\
    \ number of coins is 3.\nFor amount = 100, the minimum number of coins is 3.\n\
    For amount = 200, the minimum number of coins is 2.\nFor amount = 300, the minimum\
    \ number of coins is 2.\nFor amount = 1000, the minimum number of coins is 2.\n\
    For amount = 10000, the minimum number of coins is 1.\nFor amount = 100000, the\
    \ minimum number of coins is 1.\nFor amount = 1000000, the minimum number of coins\
    \ is 1.\nFor amount = 10000000, the minimum number of coins is 0.\nFor amount\
    \ = 100000000, the minimum number of coins is 0.\nFor amount = 1000000000, the\
    \ minimum number of coins is 0.\nFor amount = 10000000000, the minimum number\
    \ of coins is 0.\nFor amount = 100000000000, the minimum number of coins is 0.\n\
    For amount = 1000000000000, the minimum number of coins is 0.\nFor amount = 10000000000000,\
    \ the minimum number of coins is 0.\nFor amount = 100000000000000, the minimum\
    \ number of coins is 0.\nFor amount = 1000000000000000, the minimum number of\
    \ coins is 0.\nFor amount = 10000000000000000, the minimum number of coins is\
    \ 0.\nFor amount = 100000000000000000, the minimum number of coins is 0.\nFor\
    \ amount = 1000000000000000000, the minimum number of coins is 0.\nFor amount\
    \ = 10000000000000000000, the minimum number of coins is 0.\nFor amount = 100000000000000000000,\
    \ the minimum number of coins is 0.\nFor amount = 1000000000000000000000, the\
    \ minimum number of coins is 0.\nFor amount = 10000000000000000000000, the minimum\
    \ number of coins is 0.\nFor amount = 100000000000000000000000, the minimum number\
    \ of coins is 0.\nFor amount = 1000000000000000000000000, the minimum number of\
    \ coins is 0.\nFor amount = 10000000000000000000000000, the minimum number of\
    \ coins is 0.\nFor amount = 100000000000000000000000000, the minimum number of\
    \ coins is 0.\nFor amount = 1000000000000000000000000000, the minimum number of\
    \ coins is 0.\nFor amount = 10000000000000000000000000000, the minimum number\
    \ of coins is 0.\nFor amount = 100000000000000000000000000000, the minimum number\
    \ of coins is 0.\nFor amount = 1000000000000000000000000000000, the minimum number\
    \ of coins is 0.", "    \n    sum = 0\n    \n    for n in nums\n        sum +=\
    \ n\n    end\n    \n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that finds the maximum sum of any non-empty sub-array of nums.\nExample\n\
    maxSubArraySum([2, 3, 4, 1, 2, 4]) == 6\nmaxSubArraySum([-1, -2, -3]) == -3\n\
    maxSubArraySum([-4, -5, -6, -7, -8]) == -8\nmaxSubArraySum([-9, -10, -11, -12,\
    \ -13]) == -13\nmaxSubArraySum([-14, -15, -16, -17, -18]) == -18\nmaxSubArraySum([-19,\
    \ 20, 21, 22, 23]) == 23\nmaxSubArraySum([-24, 25, 26, 27, 28]) == 28\nmaxSubArraySum([-29,\
    \ 30, 31, 32, 33]) == 33\nmaxSubArraySum([-34, 35, 36, 37, 38]) == 38\nmaxSubArraySum([-39,\
    \ 40, 41, 42, 43]) == 43\nmaxSubArraySum([-44, 45, 46, 47, 48]) == 48\nmaxSubArraySum([-49,\
    \ 50, 51, 52, 53]) == 53\nmaxSubArraySum([-54, 55, 56, 57, 58]) == 58\nmaxSubArraySum([-59,\
    \ 60, 61, 62, 63]) == 63\nmaxSubArraySum([-64, 65, 66, 67, 68]) == 68\nmaxSubArraySum([-69,\
    \ 70, 71, 72, 73]) == 73\nmaxSubArraySum([-74, 75, 76, 77, 78]) == 78\nmaxSubArraySum([-79,\
    \ 80, 81, 82, 83]) == 83\nmaxSubArraySum([-84, 85, 86, 87, 88]) == 88\nmaxSubArraySum([-89,\
    \ 90, 91, 92, 93]) == 93\nmaxSubArraySum([-94, 95, 96, 97, 98]) == 98\nmaxSubArraySum([-99,\
    \ 100, 101, 102, 103]) == 103\nmaxSubArraySum([-104, 105, 106, 107, 108]) == 108\n\
    maxSubArraySum([-109, 110, 111, 112, 113]) == 113\nmaxSubArraySum([-116, 117,\
    \ 118, 119, 120]) == 120\nmaxSubArraySum([-121, 122, 123, 124, 125]) == 125\n\
    maxSubArraySum([-126, 127, 128, 129, 130]) == 130\nmaxSubArraySum([-132, 133,\
    \ 134, 135, 136", "    \n    sum = 0\n    \n    for n in nums\n        sum +=\
    \ n\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nProblem 4\nGiven a binary tree, find the lowest common\
    \ ancestor (LCA) of two given nodes in the tree.", "    sum = 0\n    for x in\
    \ nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that returns the number of times a given number appears\
    \ in an array.", "    \n    sum = 0\n    \n    for n in nums\n        sum += n\n\
    \    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2,\
    \ -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of times each element appears in the input array.", "    \n    sum::Int64 =\
    \ 0\n    \n    for num in nums\n        sum += num\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<text>\nProblem 4\nWrite a function that returns the sum\
    \ of the squares of the numbers in a given vector.", "    \n    sum::Int64 = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem\
    \ 7\nWrite a Julia function minSubArraySum(nums::Vector{Int64})::Int64 which returns\
    \ the minimum sum of any non-empty sub-array of nums.", "    sum = 0\n    for\
    \ x in nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of positive integers less than or equal to n.", "    sum = 0\n    for x in nums\n\
    \        sum += x\n    end\n    return sum\nend", "    \n    sum = 0\n    for\
    \ n in nums\n        sum += n\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of times a given value appears in an array.", "    sum\
    \ = 0\n    for num in nums\n        sum += num\n    end\n    return sum\nend",
  "    sum = 0\n    for x in nums\n        sum += x\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>", "    sum = 0\n    for n in nums\n       \
    \ sum += n\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.0>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of times a given value appears in an array.", "    \n    sum = 0\n    \n   \
    \ for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem\
    \ 7: Find the maximum sum of any non-empty sub-array of nums.\nExample\nmaxSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 7\nmaxSubArraySum([-1, -2, -3]) == -3\nmaxSubArraySum([-100,\
    \ -10, -5]) == -10\nmaxSubArraySum([-100, -10, -5, -20, -5]) == -10\nmaxSubArraySum([-100,\
    \ -10, -5, -20, -5, -10, -5]) == -10\nmaxSubArraySum([-100, -10, -5, -20, -5,\
    \ -10, -5, -20, -5]) == -10\nmaxSubArraySum([-100, -10, -5, -20, -5, -10, -5,\
    \ -20, -5, -10, -5]) == -10\nmaxSubArraySum([-100, -10, -5, -20, -5, -10, -5,\
    \ -20, -5, -10, -5, -20, -5]) == -10\nmaxSubArraySum([-100, -10, -5, -20, -5,\
    \ -10, -5, -20, -5, -10, -5, -20, -5, -10, -5]) == -10\nmaxSubArraySum([-100,\
    \ -10, -5, -20, -5, -10, -5, -20, -5, -10, -5, -20, -5, -10, -5, -20, -5]) ==\
    \ -10\nmaxSubArraySum([-100, -10, -5, -20, -5, -10, -5, -20, -5, -10, -5, -20,\
    \ -5, -10, -5, -20, -5, -10, -5]) == -10\nmaxSubArraySum([-100, -10, -5, -20,\
    \ -5, -10, -5, -20, -5, -10, -5, -20, -5, -10, -5, -20, -5, -10, -5, -20, -5])\
    \ == -10\nmaxSubArraySum([-100, -10, -5, -20, -5, -10, -5, -20, -5, -10, -5, -20,\
    \ -5, -10, -5, -20, -5, -10, -5, -20, -5, -10, -5]) == -10\nmaxSubArraySum([-100,\
    \ -10, -5, -20, -5, -10, -5, -20, -5, -10, -5, ", "    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    sum = 0\n    \n    for n in nums\n\
    \        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    sum = 0\n    \n    for n in nums\n        sum += n\n    end\n    \n \
    \   return sum\nend\n</cell>\n<code language=julia-1.5>", "    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an array of integers\
    \ and returns the number of elements that are less than the given value.", " \
    \   \n    sum = 0\n    \n    for n in nums\n        sum += n\n    end\n    \n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n\
    </cell>\n<text>\nProblem 4\nGiven an array of integers nums, find the maximum\
    \ sum of any non-empty sub-array\n    of nums.\n    Example\n    maxSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 6\n    maxSubArraySum([-1, -2, -3]) == -3\n    \"\"\"", " \
    \   \n    sum = 0\n    \n    for x in nums\n        sum += x\n    end\n    \n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of positive\
    \ integers less than or equal to n.", "    \n    sum = 0\n    \n    for n in nums\n\
    \        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the minimum\
    \ sum of any non-empty sub-array of nums.\nExample\nminSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\nminSubArraySum([-1, -2, -3]) == -6\nHint: Use a for loop to iterate\
    \ through the array and sum each element.", "    \n    sum = 0\n    for n in nums\n\
    \        sum += n\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of times a given value appears in an array. For example, the number of times\
    \ 2 appears in [1,2,2,3,3,3] would be 3.", "    \n    sum = 0\n    \n    for n\
    \ in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of times a given number appears in an array.", "    \n  \
    \  sum = 0\n    \n    for n in nums\n        sum += n\n    end\n    \n    return\
    \ sum\nend", "    sum = 0\n    for n in nums\n        sum += n\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>", "    \n    sum = 0\n    \n  \
    \  for x in nums\n        sum += x\n    end\n    \n    return sum\nend", "   \
    \ sum = 0\n    for x in nums\n        sum += x\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    sum = 0\n    \n    for n in nums\n\
    \        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the minimum\
    \ number in an array that is a multiple of a given number. For example, if the\
    \ array is [4, 6, 8, 10, 12, 14, 16, 18, 20], and the given number is 3, then\
    \ the function should return 6.", "    sum = 0\n    for n in nums\n        sum\
    \ += n\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of positive integers less than or equal to n.", "  \
    \  sum = 0\n    for num in nums\n        sum += num\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the squares\
    \ of the numbers in nums.", "    sum = 0\n    for x in nums\n        sum += x\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>", "    \n  \
    \  sum = 0\n    \n    for num in nums\n        sum += num\n    end\n    \n   \
    \ return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4,\
    \ 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of positive\
    \ integers less than or equal to n.", "    \n    sum = 0\n    \n    for n in nums\n\
    \        sum += n\n    end\n    \n    return sum\nend", "    \n    sum = 0\n \
    \   for n in nums\n        sum += n\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.0>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.0>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem 3\nGiven an array of integers\
    \ nums, find the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n\
    \    maxSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n    maxSubArraySum([-1, -2, -3])\
    \ == -3\n    \"\"\"", "    \n    sum::Int64 = nums.reduce(+, 0)\n    \n    for\
    \ num in nums\n        if num > sum\n            sum = num\n        end\n    end\n\
    \    \n    return sum\nend\n</cell>\n<code language=julia-1.4>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.4>\nminSubArraySum([-1, -2,\
    \ -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of times each element appears in an array. For example,", "    \n    sum = 0\n\
    \    for x in nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.0>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.0>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem\
    \ 7: Find all subsets of a set\nGiven a set S, find all subsets of S (including\
    \ itself).", "    sum = 0\n    for n in nums\n        sum += n\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2,\
    \ 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of times a given\
    \ number appears in an array.", "    sum = 0\n    for x in nums\n        sum +=\
    \ x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.4>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.4>\nminSubArraySum([-1, -2,\
    \ -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of times each element appears in an array.", "    \n    sum::Int64 = 0\n   \
    \ \n    for num in nums\n        sum += num\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of times a given value appears in\
    \ an array.", "    sum = 0\n    for x in nums\n        sum += x\n    end\n   \
    \ return sum\nend", "    \n    sum = 0\n    \n    for x in nums\n        sum +=\
    \ x\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nProblem 7\nGiven an array of integers nums, find\
    \ the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"", " \
    \   \n    sum::Int64 = 0\n    \n    for n in nums\n        sum += n\n    end\n\
    \    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2,\
    \ -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of elements in a vector that are less than a given value.", "    \n    sum::Int64\
    \ = 0\n    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of positive integers less\
    \ than or equal to n. \nExample\npositives(10) = 3\npositives(-10) = 1\npositives(0)\
    \ = 0\npositives(1) = 1\npositives(2) = 2\npositives(3) = 3\npositives(4) = 4\n\
    positives(5) = 5\npositives(6) = 6\npositives(7) = 7\npositives(8) = 8\npositives(9)\
    \ = 9\npositives(10) = 10\npositives(11) = 1\npositives(12) = 2\npositives(13)\
    \ = 3\npositives(14) = 4\npositives(15) = 5\npositives(16) = 6\npositives(17)\
    \ = 7\npositives(18) = 8\npositives(19) = 9\npositives(20) = 10\npositives(21)\
    \ = 1\npositives(22) = 2\npositives(23) = 3\npositives(24) = 4\npositives(25)\
    \ = 5\npositives(26) = 6\npositives(27) = 7\npositives(28) = 8\npositives(29)\
    \ = 9\npositives(30) = 10\npositives(31) = 1\npositives(32) = 2\npositives(33)\
    \ = 3\npositives(34) = 4\npositives(35) = 5\npositives(36) = 6\npositives(37)\
    \ = 7\npositives(38) = 8\npositives(39) = 9\npositives(40) = 10\npositives(41)\
    \ = 1\npositives(42) = 2\npositives(43) = 3\npositives(44) = 4\npositives(45)\
    \ = 5\npositives(46) = 6\npositives(47) = 7\npositives(48) = 8\npositives(49)\
    \ = 9\npositives(50) = 10\npositives(51) = 1\npositives(52) = 2\npositives(53)\
    \ = 3\npositives(54) = 4\npositives(55) = 5\npositives(56) = 6\npositives(57)\
    \ = 7\npositives(58) = 8\npositives(59) = 9\npositives(60) = 10\npositives(61)\
    \ = 1\npositives(62) = 2\npositives(63) = 3\npositives(64) = 4\npositives(65)\
    \ = 5\npositives(66) = 6\npositives(67) = 7\npositives(68) = 8\npositives(69)\
    \ = 9\npositives(70) = 10\npositives(71) = 1\npositives(72) = 2", "    \n    sum\
    \ = 0\n    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\n\
    Problem 7: Find the maximum product of any non-empty sub-array of nums.\nExample\n\
    maxSubArrayProduct(nums) == 24\nmaxSubArrayProduct([]) == -1\nmaxSubArrayProduct([-10,\
    \ -20, -30, -40, -50, -60]) == 60\nmaxSubArrayProduct([-10, -20, -30, -40, -50,\
    \ -60, -70, -80, -90]) == -240\nmaxSubArrayProduct([-10, -20, -30, -40, -50, -60,\
    \ -70, -80, -90, -100]) == -2400\nmaxSubArrayProduct([-10, -20, -30, -40, -50,\
    \ -60, -70, -80, -90, -100, -101]) == -24000\nmaxSubArrayProduct([-10, -20, -30,\
    \ -40, -50, -60, -70, -80, -90, -100, -101, -102]) == -240000\nmaxSubArrayProduct([-10,\
    \ -20, -30, -40, -50, -60, -70, -80, -90, -100, -101, -102, -103]) == -2400000\n\
    maxSubArrayProduct([-10, -20, -30, -40, -50, -60, -70, -80, -90, -100, -101, -102,\
    \ -103, -104]) == -24000000\nmaxSubArrayProduct([-10, -20, -30, -40, -50, -60,\
    \ -70, -80, -90, -100, -101, -102, -103, -104, -105]) == -240000000\nmaxSubArrayProduct([-10,\
    \ -20, -30, -40, -50, -60, -70, -80, -90, -100, -101, -102, -103, -104, -105,\
    \ -106]) == -2400000000\nmaxSubArrayProduct([-10, -20, -30, -40, -50, -60, -70,\
    \ -80, -90, -100, -101, -102, -103, -104, -105, -106, -107]) == -24000000000\n\
    maxSubArrayProduct([-10, -20, -30, -40, -50, -60, -70, -80, -90, -100, -101, -102,\
    \ -103, -104, -105, -106, -107, -108]) == -240000000000\nmaxSubArrayProduct([-10,\
    \ -20, -30, -40, -5", "    \n    sum = 0\n    for x in nums\n        sum += x\n\
    \    end\n    return sum\nend", "    \n    sum = 0\n    \n    for num in nums\n\
    \        sum += num\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nProblem 4\nGiven an array\
    \ of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n\
    \    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1,\
    \ -2, -3]) == -6\n    \"\"\"", "    \n    sum = 0\n    for n in nums\n       \
    \ sum += n\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nProblem 7: Find the sum of all the numbers in the\
    \ array nums except the number at index i.", "    \n    sum = 0\n    \n    for\
    \ num in nums\n        sum += num\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\n\
    Write a function that returns the minimum sum of any non-empty sub-array of nums.",
  "    \n    sum = 0\n    \n    for n in nums\n        sum += n\n    end\n    \n \
    \   return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of times\
    \ a given value appears in an array.", "    \n    sum = 0\n    \n    for num in\
    \ nums\n        sum += num\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem 7\nGiven an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n\
    \    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3])\
    \ == -6\n    \"\"\"", "    sum = 0\n    for n in nums\n        sum += n\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>", "    \n    sum = 0\n\
    \    \n    for num in nums\n        sum += num\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\n\
    Problem 8\nGiven an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"", "    \n    sum::Int64\
    \ = 0\n    \n    for num in nums\n        sum += num\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2,\
    \ 4])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number of\
    \ times a given element appears in an array.", "    sum = 0\n    \n    for n in\
    \ nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the squares of the numbers in an array.", "    sum::Int64 = 0\n    for num\
    \ in nums\n        sum += num\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of times a given element appears in an array.", "    \n    sum = 0\n    \n \
    \   for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    sum = 0\n    for num in nums\n        sum\
    \ += num\n    end\n    return sum\nend", "    \n    sum = 0\n    \n    for num\
    \ in nums\n        sum += num\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem 7: Find the sum of all\
    \ numbers from 1 to N\nWrite a function that returns the sum of all numbers from\
    \ 1 to N.", "    \n    sum = 0\n    \n    for n in nums\n        sum += n\n  \
    \  end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2,\
    \ -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of positive integers less than or equal to n.", "    \n    sum = 0\n    for\
    \ n in nums\n        sum += n\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of positive integers less than or equal to n.", "    \n    sum = 0\n    \n \
    \   for num in nums\n        sum += num\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of positive integers less than or\
    \ equal to n.", "    \n    sum = 0\n    for x in nums\n        sum += x\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of times\
    \ the given value appears in an array.", "    sum = 0\n    for i in nums\n   \
    \     sum += i\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of times a given value appears in an array.",
  "    sum = 0\n    for n in nums\n        sum += n\n    end\n    return sum\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of times\
    \ a given value appears in an array.", "    sum = 0\n    for num in nums\n   \
    \     sum += num\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of times a given number appears in an\
    \ array. For example, given the array [1, 1, 2, 3], the function should return\
    \ 3.", "    sum = 0\n    for x in nums\n        sum += x\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2,\
    \ 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of elements in a\
    \ vector that are greater than a given value.", "    \n    sum = 0\n    \n   \
    \ for num in nums\n        sum += num\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem\
    \ 7\nGiven an array of integers nums, find the maximum sum of any non-empty sub-array\n\
    \    of nums.\n    Example\n    maxSubArraySum([2, 3, 4, 1, 2, 4]) == 5\n    maxSubArraySum([-1,\
    \ -2, -3]) == 3\n    \"\"\"", "    \n    sum = 0\n    \n    for num in nums\n\
    \        sum += num\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nProblem 7\nGiven an array of integers nums, find\
    \ the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n    maxSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 6\n    maxSubArraySum([-1, -2, -3]) == -3\n    \"\"\"", " \
    \   \n    sum::Int64 = nums.reduce(_ + _)\n    \n    for x in nums\n        sum\
    \ += x\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nProblem 7\nGiven a binary search tree and a key,\
    \ find the node in the BST that has the\nlargest value when searching in the subtree\
    \ rooted at that node. You may assume\nthe BST is balanced."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
