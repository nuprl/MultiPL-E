name: HumanEval_14_all_prefixes
language: julia
prompt: "\"\"\" Return list of all prefixes from shortest to longest of the input\
  \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
  \ all_prefixes(string::String)::Vector{String} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
  \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
  asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\",\
  \ \"WW\", \"WWW\"])\nend\n"
completions: ["    \n    prefix_list = Vector{String}()\n    prefix_list = prefix_list\
    \ ++ [string]\n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list ++ all_prefixes(string[end+1:end])\n    \n \
    \   return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    ab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbaca\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacaca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabb\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbbc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbcc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccca\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaaa\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbbcccaaaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbcccaaaab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbcccaaaabb\")\n</cell", "    \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes(string[1:end-1]) + [string[1:end]]\n\
    \    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"a\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbba\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacbbacc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbbaccc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbacccb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbbb\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbbbc\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacbbacccbbbcb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbbacccbbbcbc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbacccbbbcbcc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbbbcbccc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbbbcbcccb\"\
    )", "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for\
    \ i in 2:length(string)\n        prefix_list[i] = prefix_list[i-1] + string[i]\n\
    \    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n \
    \   prefix_length(prefix::String, string::String)", "    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.4>", "    prefix_list = Vector{String}()\n    prefix_list\
    \ = prefix_list ++ [string]\n    prefix_list = prefix_list ++ [string[1:end-1]]\n\
    \    prefix_list = prefix_list ++ [string[1:end-2]]\n    prefix_list = prefix_list\
    \ ++ [string[1:end-3]]\n    prefix_list = prefix_list ++ [string[1:end-4]]\n \
    \   prefix_list = prefix_list ++ [string[1:end-5]]\n    prefix_list = prefix_list\
    \ ++ [string[1:end-6]]\n    prefix_list = prefix_list ++ [string[1:end-7]]\n \
    \   prefix_list = prefix_list ++ [string[1:end-8]]\n    prefix_list = prefix_list\
    \ ++ [string[1:end-9]]\n    prefix_list = prefix_list ++ [string[1:end-10]]\n\
    \    prefix_list = prefix_list ++ [string[1:end-11]]\n    prefix_list = prefix_list\
    \ ++ [string[1:end-12]]\n    prefix_list = prefix_list ++ [string[1:end-13]]\n\
    \    prefix_list = prefix_list ++ [string[1:end-14]]\n    prefix_list = prefix_list\
    \ ++ [string[1:end-15]]\n    prefix_list = prefix_list ++ [string[1:end-16]]\n\
    \    prefix_list = prefix_list ++ [string[1:end-17]]\n    prefix_list = prefix_list\
    \ ++ [string[1:end-18]]\n    prefix_list = prefix_list ++ [string[1:end-19]]\n\
    \    prefix_list = prefix_list ++ [string[1:end-20]]\n    prefix_list = prefix_list\
    \ ++ [string[1:end-21]]\n    prefix_list = prefix_list ++ [string[1:end-22]]\n\
    \    prefix_list = prefix_list ++ [string[1:end-23]]\n    prefix_list = prefix_list\
    \ ++ [string[1:end-24]]\n    prefix_list = prefix_list ++ [string[1:end-25]]\n\
    \    prefix_list = prefix_list ++ [string[1:end-26]]\n    prefix_list = prefix_list\
    \ ++ [string[1:end-27]]\n    prefix_list = prefix_list ++ [string[1:end-28]]\n\
    \    prefix_list = prefix_list ++ [string[1:end-29]]\n    prefix_list = prefix_list\
    \ ++ [string[1:end-30]]\n    prefix_list = prefix_list ++ [string[1:end-31]]\n\
    \    prefix_list = prefix_list ++ [string[1:end-32]]\n    prefix_list = prefix_list\
    \ ++ [string[1:end-33]]\n    prefix_list = prefix_list ++ [string[1:end-34]]\n\
    \    prefix_list = prefix_list ++ [string[1:end-35]]\n    prefix_list = prefix_list\
    \ ++ [string[1:end-36]]\n    prefix_list = prefix_list ++ [string[1:end-37]]\n\
    \    prefix_list = prefix_list ++ [string[1:", "    \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes(string[1:end-1]) + [string[1:end-1]]\n\
    \    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the longest prefix that is a palindrome. For example, given the string\
    \ \"racecar\", the longest palindrome would be \"racecar\".", "    \n    prefixes\
    \ = Vector{String}()\n    \n    for c in string\n        prefixes += all_prefixes(c)\n\
    \    end\n    \n    return prefixes\nend\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the longest prefix that is a substring of the input string.\
    \ For example, all_prefixes(\"abcabc\") should return \"abc\".", "    prefixes\
    \ = Vector{String}()\n    prefix_length = 0\n    for c in string\n        if prefix_length\
    \ == 0 \n            prefixes << c\n        elseif prefix_length == length(string)\n\
    \            prefixes << c\n        else\n            prefixes << c << prefixes[prefix_length]\n\
    \        end\n        prefix_length += 1\n    end\n    return prefixes\nend\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the longest prefix that\
    \ is a substring of the input string. For example, all_prefixes(\"abcabc\") should\
    \ return \"abc\".", "    prefix_list = Vector{String}()\n    for prefix in string.split(\"\
    \")\n        prefix_list += all_prefixes(prefix) \n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    prefix_list = Vector{String}()\n    prefix_list[1]\
    \ = string\n    prefix_list[2] = string\n    prefix_list[3] = string\n    \n \
    \   for i = 4 to length(prefix_list)\n        prefix_list[i] = prefix_list[i-2]\
    \ + prefix_list[i-1]\n    end\n    \n    return prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the longest prefix of a given string.", "    prefix_list\
    \ = Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += all_prefixes(prefix) \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 4\nWrite a function that takes\
    \ a string and returns the longest prefix that is a substring of the input string.\
    \ For example, all_prefixes(\"abcabc\") should return \"abc\".", "    prefix_list\
    \ = Vector{String}()\n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list ++ all_prefixes(string[end-1:end])\n    return\
    \ prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the longest prefix\
    \ of a given string.", "    prefix_list = Vector{String}()\n    prefix_list[1]\
    \ = string\n    for i = 2:length(string)\n        prefix_list[i] = prefix_list[i-1]\
    \ + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    prefix_length(string::String)", "    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\nend", "   \
    \ prefix_list = Vector{String}()\n    for prefix in string.split(\"\")\n     \
    \   prefix_list += all_prefixes(prefix) \n    end\n    prefix_list\nend\n</cell>\n\
    <code language=julia-1.4>\nall_prefixes(\"abracadabra\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of times the\
    \ string \"ab\" appears in the string. \n>>> count_ab(\"abracadabra\")\n2\n>>>\
    \ count_ab(\"abracadabra\")\n1\n>>> count_ab(\"abracadabra\")\n0\n>>> count_ab(\"\
    abracadabra\")\n0\n>>> count_ab(\"abracadabra\")\n0\n>>> count_ab(\"abracadabra\"\
    )\n0\n>>> count_ab(\"abracadabra\")\n0\n>>> count_ab(\"abracadabra\")\n0\n>>>\
    \ count_ab(\"abracadabra\")\n0\n>>> count_ab(\"abracadabra\")\n0\n>>> count_ab(\"\
    abracadabra\")\n0\n>>> count_ab(\"abracadabra\")\n0\n>>> count_ab(\"abracadabra\"\
    )\n0\n>>> count_ab(\"abracadabra\")\n0\n>>> count_ab(\"abracadabra\")\n0\n>>>\
    \ count_ab(\"abracadabra\")\n0\n>>> count_ab(\"abracadabra\")\n0\n>>> count_ab(\"\
    abracadabra\")\n0\n>>> count_ab(\"abracadabra\")\n0\n>>> count_ab(\"abracadabra\"\
    )\n0\n>>> count_ab(\"abracadabra\")\n0\n>>> count_ab(\"abracadabra\")\n0\n>>>\
    \ count_ab(\"abracadabra\")\n0\n>>> count_ab(\"abracadabra\")\n0\n>>> count_ab(\"\
    abracadabra\")\n0\n>>> count_ab(\"abracadabra\")\n0\n>>> count_ab(\"abracadabra\"\
    )\n0\n>>> count_ab(\"abracadabra\")\n0\n>>> count_ab(\"abracadabra\")\n0\n>>>\
    \ count_ab(\"abracadabra\")\n0\n>>> count_ab(\"abracadabra\")\n0\n>>> count_ab(\"\
    abracadabra\")\n0\n>>> count_ab(\"abracadabra\")\n0", "    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += all_prefixes(prefix)\
    \ \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacc\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbbaccc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbbacccb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbacccbc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbcc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbccc\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbcccb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacbbacccbcccbc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbbacccbcccbcc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbacccbcccbccc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbacccbcccbcccb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbacccbcccbcccb", "    prefix_list = Vector{String}()\n    prefix_list[1]\
    \ = string\n    for i = 2 to length(string)\n        prefix_list[i] = prefix_list[i-2]\
    \ + string[i]\n    end\n    return prefix_list\nend", "    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2 to length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    prefix_count(string::String)::Int64", "   \
    \ prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end", "    prefix_list = Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list + all_prefixes(string[end-1:end])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+1:end+2])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+2:end+3])\n    prefix_list = prefix_list + all_prefixes(string[end+3:end+4])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+4:end+5])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+5:end+6])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+6:end+7])\n    prefix_list = prefix_list + all_prefixes(string[end+7:end+8])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+8:end+9])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+9:end+10])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+10:end+11])\n    prefix_list = prefix_list + all_prefixes(string[end+11:end+12])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+12:end+13])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+13:end+14])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+14:end+15])\n    prefix_list = prefix_list + all_prefixes(string[end+15:end+16])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+16:end+17])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+17:end+18])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+18:end+19])\n    prefix_list = prefix_list + all_prefixes(string[end+19:end+20])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+20:end+21])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+21:end+22])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+22:end+23])\n    prefix_list = prefix_list + all_prefixes(string[end+23:end+24])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+24:end+25])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+25:end+26])\n    prefix_", "    prefix_list\
    \ = Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += all_prefixes(prefix) \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbbbba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbbac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbbaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbacab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbacabc\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbbbbacabca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbbacabcab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbbacabcabc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbacabcabca\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbacabcabcab\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbbbbacabcabcabc\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbbbbacabcabcabca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbbacabcabcabcab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbbacabcabcabcabc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbacabcabcabcabca\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbacabcabcabcabcab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_", "    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    prefix_list[2] = string\n    for i = 4 to length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbcadef\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbcadefgh\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbcadefghij\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbcadefghijk\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbcadefghijkl\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbcadefghijklm\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbcadefghijklmn\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbcadefghijklmno\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbcadefghijklmnop\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbcadefghijklmnopq\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbcadefghijklmnopqrst\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbcadefghijklmnopqrstu\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbcadefghijklmnopqrstuv\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbcadefghijklmnopqrstuvw\")\n</cell>\n\
    <code language=julia-1.5>\nall_", "    prefix_list = Vector{String}()\n    prefix_list[1]\
    \ = string\n    for i in 2:length(string)\n        prefix_list[i] = prefix_list[i-1]\
    \ + string[i]\n    end\n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>",
  "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbbb\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbbbbbbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbbbbbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbbbbbbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbbbbbbb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbbbbbbbb\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbbbbbbbbbbbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbbbbbbbbbbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbbbbbbbbbbbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbbbbbbbbbbbb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbbbbbbbbbbbbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbbbbbbbbbbbbbb\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbbbbbbbbbbbbbbbbbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbbbbbbbbbbbbbbbbbbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbbbbbbbbbbbbbbbbbbbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbbbbbbbbbbbbbbbbbbbbb\")\n</cell", " \
    \   prefix_list = Vector{String}()\n    for c in string\n        prefix_list +=\
    \ all_prefixes(c) \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>", "    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    prefix_length(string::String)",
  "    \n    prefix_list = Vector{String}()\n    \n    for prefix in string.split(\"\
    \")\n        prefix_list += all_prefixes(prefix) \n    end\n    \n    return prefix_list\n\
    end", "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for\
    \ i = 2:length(string)\n        prefix_list[i] = prefix_list[i-2] + string[i]\n\
    \    end\n    return prefix_list\nend", "    prefixes = Vector{String}()\n   \
    \ prefixes << string\n    prefixes << string[1:end]\n    prefixes\nend\n</cell>\n\
    <code language=julia-1.5>\n@test all_prefixes(\"abc\") == [\"a\", \"ab\", \"abc\"\
    ]\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string. \nWrite a function that takes a string\
    \ and returns the number of words in the string. \nWrite a function that takes\
    \ a string and returns the number of sentences in the string. \nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are not spaces. \nWrite a function that takes a string and returns the number\
    \ of words in the string that are not spaces. \nWrite a function that takes a\
    \ string and returns the number of sentences in the string that are not spaces.\
    \ \nWrite a function that takes a string and returns the number of characters\
    \ in the string that are not spaces and words. \nWrite a function that takes a\
    \ string and returns the number of words in the string that are not spaces and\
    \ words. \nWrite a function that takes a string and returns the number of sentences\
    \ in the string that are not spaces and words. ", "    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    prefixes_of_string(string::String)", "    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string that are uppercase letters.", "    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes(string[1:end-1]) + [string[1:end-1]]\n\
    \    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>", "    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i in 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacaca\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaa\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbb\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbbcc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbccc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccca\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaa\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaaa\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaaaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaaaab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaaaabb\")\n</cell>\n<code\
    \ language=julia-", "    prefixes = Vector{String}()\n    for s in string\n  \
    \      prefixes += all_prefixes(s)\n    end\n    prefixes\nend\n</cell>\n<code\
    \ language=julia-1.4>\n\"\"\"\n    prefixes_from_longest(string::String)::Vector{String}\
    \ \n    Return list of all prefixes from longest to shortest of the input string\n\
    \    >>> prefixes_from_longest('abc')\n    ['abc']\n    \"\"\"", "    prefix_list\
    \ = Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += all_prefixes(prefix) \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the longest prefix that is a substring of the given string.\
    \ For example, all_prefixes(\"abcabc\") should return \"abc\".", "    prefix_list\
    \ = Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list + all_prefixes(string[end-1:end])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end:])\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.4>", "    prefix_list = Vector{String}()\n    prefix_list[1]\
    \ = string\n    for i = 2:length(string)\n        prefix_list[i] = prefix_list[i-2]\
    \ + string[i]\n    end\n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the longest prefix that is a substring of the input string.\
    \ For example, all_prefixes('abc') returns ['abc', 'ab', 'a'].", "    prefixes\
    \ = Vector{String}()\n    for c in string\n        prefixes += all_prefixes(c)\n\
    \    end\n    prefixes\nend\n</cell>\n<code language=julia-1.5>", "    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abc\")\n</cell>\n\
    <code language=julia-1.5>\n@time all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abc\")\n</cell>\n\
    <code language=julia-1.5>\n@time all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abc\")\n</cell>\n\
    <code language=julia-1.5>\n@time all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abc\")\n</cell>\n\
    <code language=julia-1.5>\n@time all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abc\")\n</cell>\n\
    <code language=julia-1.5>\n@time all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abc\")\n</cell>\n\
    <code language=julia-1.5>\n@time all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"", "    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string\n    for i = 2 to length(prefix_list)\n\
    \        prefix_list[i] = prefix_list[i-2] + prefix_list[i-1]\n    end\n    return\
    \ prefix_list\nend", "    prefix_list = Vector{String}()\n    for prefix in string.split(\"\
    \")\n        prefix_list += prefixes_of(prefix)\n    return prefix_list\nend",
  "    prefix_list = Vector{String}()\n    for s in string\n        prefix_list =\
    \ [prefix_list..s]\n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.0>\n\
    all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.0>", "    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string\n    prefix_list[2] = string\n\
    \    \n    for i = 3:length(string)\n        prefix_list[i] = prefix_list[i-2]\
    \ + string[i]\n    end\n    \n    return prefix_list\nend", "    \n    prefixes\
    \ = Vector{String}()\n    \n    for c in string\n        prefixes += all_prefixes(c)\
    \ + [c]\n    end\n    \n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the longest prefix that is a substring of the input string.\
    \ For example, all_prefixes(\"abcabc\") should return [\"abc\"].", "    prefix_list\
    \ = Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += prefixes_of(prefix)\n    return prefix_list\nend", "    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += prefixes_of_prefix(prefix)\n\
    \    return prefix_list\nend", "    prefix_list = Vector{String}()\n    prefix_list\
    \ = prefix_list ++ [string]\n    prefix_list = prefix_list ++ all_prefixes(string[1:end])\n\
    \    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbaca\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbbacac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbbacacb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbacacbba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbaca\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbacac\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbacacb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbacacbba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbacacbbac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbacacbbaca\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abba", "    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i in 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    prefix_counts(string::String)", "    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string\n    for i in 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    prefix_lengths(string::String)",
  "    \n    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    prefix_list[2]\
    \ = string[1:end-1]\n    prefix_list[3] = string[2:end]\n    \n    return prefix_list\n\
    end", "    prefix_list = Vector{String}()\n    for prefix in string.split(\"\"\
    )\n        prefix_list += all_prefixes(prefix) \n    end\n    prefix_list\nend\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbba\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacbbacc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbbaccc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbacccb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbca\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbcaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacbbacccbcaab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbbacccbcaaba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbacccbcaabac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbcaabaca\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbcaabacab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbcaabacaba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab", "    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\
    \ + [string[1:end-1]]\n    \n    return prefix_list\nend", "    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    prefix_list[2] = string\n\
    \    prefix_list[3] = string\n    prefix_list[4] = string\n    prefix_list[5]\
    \ = string\n    prefix_list[6] = string\n    prefix_list[7] = string\n    prefix_list[8]\
    \ = string\n    prefix_list[9] = string\n    prefix_list[10] = string\n    prefix_list[11]\
    \ = string\n    prefix_list[12] = string\n    prefix_list[13] = string\n    prefix_list[14]\
    \ = string\n    prefix_list[15] = string\n    prefix_list[16] = string\n    prefix_list[17]\
    \ = string\n    prefix_list[18] = string\n    prefix_list[19] = string\n    prefix_list[20]\
    \ = string\n    prefix_list[21] = string\n    prefix_list[22] = string\n    prefix_list[23]\
    \ = string\n    prefix_list[24] = string\n    prefix_list[25] = string\n    prefix_list[26]\
    \ = string\n    prefix_list[27] = string\n    prefix_list[28] = string\n    prefix_list[29]\
    \ = string\n    prefix_list[30] = string\n    prefix_list[31] = string\n    prefix_list[32]\
    \ = string\n    prefix_list[33] = string\n    prefix_list[34] = string\n    prefix_list[35]\
    \ = string\n    prefix_list[36] = string\n    prefix_list[37] = string\n    prefix_list[38]\
    \ = string\n    prefix_list[39] = string\n    prefix_list[40] = string\n    prefix_list[41]\
    \ = string\n    prefix_list[42] = string\n    prefix_list[43] = string\n    prefix_list[44]\
    \ = string\n    prefix_list[45] = string\n    prefix_list[46] = string\n    prefix_list[47]\
    \ = string\n    prefix_list[48] = string\n    prefix_list[49] = string\n    prefix_list[50]\
    \ = string\n    prefix_list[51] = string\n    prefix_list[52] = string\n    prefix_list[53]\
    \ = string\n    prefix_list[54] = string\n    prefix_list[55] = string\n    prefix_list[56]\
    \ = string\n    prefix_list[57] = string\n    prefix_list[58] = string\n    prefix_list[59]\
    \ = string\n    prefix_list[60] = string\n    prefix_list[61] = string\n    prefix_list[62]\
    \ = string\n    prefix_list[63] = string\n    prefix_list[64] = string\n    prefix_list[65]\
    \ = string\n    prefix_list[66] = string\n    prefix_list[67] = string\n    prefix_list[68]\
    \ = string\n    prefix_list[69] = string\n    prefix_list[70] = string\n    prefix_list[71]\
    \ = string\n    prefix_list[72] = string\n    prefix_", "    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    prefix_list_to_string(prefix_list::Vector{String})",
  "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the longest prefix of a given string.",
  "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for i = 2\
    \ to length(string)\n        prefix_list[i] = prefix_list[i-2] + string[i]\n \
    \   end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-", "    prefix_list = Vector{String}()\n    prefix_list\
    \ = prefix_list + prefixes(string)\n    prefix_list = prefix_list + prefixes(string,\
    \ \"-\")\n    prefix_list = prefix_list + prefixes(string, \"_\")\n    prefix_list\
    \ = prefix_list + prefixes(string, \"-\")\n    prefix_list = prefix_list + prefixes(string,\
    \ \"_\")\n    prefix_list = prefix_list + prefixes(string, \"-\")\n    prefix_list\
    \ = prefix_list + prefixes(string, \"_\")\n    prefix_list = prefix_list + prefixes(string,\
    \ \"-\")\n    prefix_list = prefix_list + prefixes(string, \"_\")\n    prefix_list\
    \ = prefix_list + prefixes(string, \"-\")\n    prefix_list = prefix_list + prefixes(string,\
    \ \"_\")\n    prefix_list = prefix_list + prefixes(string, \"-\")\n    prefix_list\
    \ = prefix_list + prefixes(string, \"_\")\n    prefix_list = prefix_list + prefixes(string,\
    \ \"-\")\n    prefix_list = prefix_list + prefixes(string, \"_\")\n    prefix_list\
    \ = prefix_list + prefixes(string, \"-\")\n    prefix_list = prefix_list + prefixes(string,\
    \ \"_\")\n    prefix_list = prefix_list + prefixes(string, \"-\")\n    prefix_list\
    \ = prefix_list + prefixes(string, \"_\")\n    prefix_list = prefix_list + prefixes(string,\
    \ \"-\")\n    prefix_list = prefix_list + prefixes(string, \"_\")\n    prefix_list\
    \ = prefix_list + prefixes(string, \"-\")\n    prefix_list = prefix_list + prefixes(string,\
    \ \"_\")\n    prefix_list = prefix_list + prefixes(string, \"-\")\n    prefix_list\
    \ = prefix_list + prefixes(string, \"_\")\n    prefix_list = prefix_list + prefixes(string,\
    \ \"-\")\n    prefix_list = prefix_list + prefixes(string, \"_\")\n    prefix_list\
    \ = prefix_list + prefixes(string, \"-\")\n    prefix_list = prefix_list + prefixes(string,\
    \ \"_\")\n    prefix_list = prefix_list + prefixes(string, \"-\")\n    prefix_list\
    \ = prefix_list + prefixes(string, \"_\")\n    prefix_list = prefix_list + prefixes(string,\
    \ \"-\")\n    prefix_list = prefix_list + prefixes(string, \"_\")\n    prefix_list\
    \ = prefix_list + prefixes(string, \"-\")\n    prefix_list = prefix_list + prefixes(string,\
    \ \"_\")\n    prefix_list = prefix_list + prefixes(string, \"-\")\n    prefix_list\
    \ = prefix_list + prefixes(string, \"_\")\n    prefix_list = prefix_list + prefixes(string,\
    \ \"-\")\n    prefix_list = prefix_list + prefixes(string, \"_\")\n    prefix_list\
    \ = prefix_list + prefixes(string, \"-\")\n    prefix_list = prefix_list + prefixes(string,\
    \ \"_\")\n    prefix_list = prefix_list + prefixes(string, \"-\")\n", "    prefix_list\
    \ = Vector{String}()\n    prefix_list = prefix_list + [string[1:i] for i in 1:length(string)]\n\
    \    prefix_list = prefix_list + [string[i+1::] for i in 1:length(string)]\n \
    \   prefix_list = prefix_list + [string[i+1::] for i in 1:length(string)]\n  \
    \  prefix_list = prefix_list + [string[i+1::] for i in 1:length(string)]\n   \
    \ prefix_list = prefix_list + [string[i+1::] for i in 1:length(string)]\n    prefix_list\
    \ = prefix_list + [string[i+1::] for i in 1:length(string)]\n    prefix_list =\
    \ prefix_list + [string[i+1::] for i in 1:length(string)]\n    prefix_list = prefix_list\
    \ + [string[i+1::] for i in 1:length(string)]\n    prefix_list = prefix_list +\
    \ [string[i+1::] for i in 1:length(string)]\n    prefix_list = prefix_list + [string[i+1::]\
    \ for i in 1:length(string)]\n    prefix_list = prefix_list + [string[i+1::] for\
    \ i in 1:length(string)]\n    prefix_list = prefix_list + [string[i+1::] for i\
    \ in 1:length(string)]\n    prefix_list = prefix_list + [string[i+1::] for i in\
    \ 1:length(string)]\n    prefix_list = prefix_list + [string[i+1::] for i in 1:length(string)]\n\
    \    prefix_list = prefix_list + [string[i+1::] for i in 1:length(string)]\n \
    \   prefix_list = prefix_list + [string[i+1::] for i in 1:length(string)]\n  \
    \  prefix_list = prefix_list + [string[i+1::] for i in 1:length(string)]\n   \
    \ prefix_list = prefix_list + [string[i+1::] for i in 1:length(string)]\n    prefix_list\
    \ = prefix_list + [string[i+1::] for i in 1:length(string)]\n    prefix_list =\
    \ prefix_list + [string[i+1::] for i in 1:length(string)]\n    prefix_list = prefix_list\
    \ + [string[i+1::] for i in 1:length(string)]\n    prefix_list = prefix_list +\
    \ [string[i+1::] for i in 1:length(string)]\n    prefix_list = prefix_list + [string[i+1::]\
    \ for i in 1:length(string)]\n    prefix_list = prefix_list + [string[i+1::] for\
    \ i in 1:length(string)]\n    prefix_list = prefix_list + [string[i+1::] for i\
    \ in 1:length(string)]\n    prefix_list = prefix_list + [string[i+1::] for i in\
    \ 1:length(string)]\n    prefix_list = prefix_list + [string[i+1::] for i in 1:length(string)]\n\
    \    prefix_list = prefix_list + [string[i+1::] for i in 1:length(string)]\n \
    \   prefix_list = prefix_list + [string[i+1::] for i in 1:length(string)]\n  \
    \  prefix_list = prefix_list + [string[i+1::", "    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[1:end-1]) \n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end-1:end])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+1:end+2])\n    prefix_list = prefix_list ++ all_prefixes(string[end+2:end+3])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+3:end+4])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+4:end+5])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+5:end+6])\n    prefix_list = prefix_list ++ all_prefixes(string[end+6:end+7])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+7:end+8])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+8:end+9])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+9:end+10])\n    prefix_list = prefix_list ++ all_prefixes(string[end+10:end+11])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+11:end+12])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+12:end+13])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+13:end+14])\n    prefix_list = prefix_list ++ all_prefixes(string[end+14:end+15])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+15:end+16])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+16:end+17])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+17:end+18])\n    prefix_list = prefix_list ++ all_prefixes(string[end+18:end+19])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+19:end+20])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+20:end+21])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+21:end+22])\n    prefix_list = prefix_list ++ all_prefixes(string[end+22:end+23])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+23:end+24])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+24:end+25])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+25:end+26])\n    prefix_", "    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += prefixes_of(prefix)\n\
    \    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the longest prefix that is a substring of the input string. For\
    \ example, all_prefixes(\"abracadabra\") should return \"abracadabra\".", "  \
    \  prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for i in 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    prefix_count(string::String)::Int64",
  "    prefix_list = Vector{String}()\n    for prefix in string.split(\"\")\n    \
    \    prefix_list += prefixes_of(prefix)\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.3>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the longest prefix that is a\
    \ substring of the input string. For example, all_prefixes(\"abcabc\") should\
    \ return \"abc\".", "    prefix_list = Vector{String}()\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[1:end-1]) \n    prefix_list = prefix_list ++ all_prefixes(string[end-1:end])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end:])\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>", "    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ [string]\n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"a\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbaba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbabab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbababa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbababaa\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbababaaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbababaaab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbababaaabb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbababaaabbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbababaaabbbb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbababaaabbbbc\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbababaaabbbbcc\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbababaaabbbbccc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbababaaabbbbcccc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbababaaabbbbccccc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbababaaabbbbcccccc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbababaaabbbbccccccc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbababaa", "    \n    prefixes\
    \ = Vector{String}()\n    \n    for char in string\n        prefixes += all_prefixes(char)\
    \ \n    end\n    \n    return prefixes\nend", "    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.4>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the number of characters in the string.\
    \ \nWrite a function that takes a string and returns the number of words in the\
    \ string. \nWrite a function that takes a string and returns the number of sentences\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of characters in the string that are capitalized. \nWrite a function that takes\
    \ a string and returns the number of words in the string that are capitalized.\
    \ \nWrite a function that takes a string and returns the number of sentences in\
    \ the string that are capitalized. \nWrite a function that takes a string and\
    \ returns the number of characters in the string that are all uppercase. \nWrite\
    \ a function that takes a string and returns the number of words in the string\
    \ that are all uppercase. \nWrite a function that takes a string and returns the\
    \ number of sentences in the string that are all uppercase. ", "    prefix_list\
    \ = Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += all_prefixes(prefix) \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>", "    prefixes\
    \ = []\n    prefix_length = 0\n    for c in string\n        if prefix_length ==\
    \ 0 \n            prefixes += [c]\n        elseif prefix_length < length(c)\n\
    \            prefixes += [c]\n        else\n            prefixes += [c(prefix_length)]\n\
    \            prefix_length = 0\n        end\n    end\n    return prefixes\nend\n\
    </cell>\n<code language=julia-1.3>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the longest prefix that\
    \ is a substring of the input string. \nFor example, for the string \"abcde\"\
    , the longest prefix is \"abc\", since \"abcde\" is a substring of \"abc\".",
  "    prefix_list = Vector{String}()\n    for prefix in string.split(\"\")\n    \
    \    prefix_list += prefixes_of(prefix)\n    end\n    prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracad", "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n \
    \   for i = 2:length(string)\n        prefix_list[i] = prefix_list[i-2] + string[i]\n\
    \    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n@test all_prefixes(\"\
    abc\") == [\"a\", \"ab\", \"abc\"]\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the longest prefix that is a substring of the\
    \ string. For example, all_prefixes(\"abcabc\") should return [\"a\", \"ab\",\
    \ \"abc\"].", "    \n    prefix_list = Vector{String}()\n    prefix_list = prefix_list\
    \ + all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_", "    prefix_list = Vector{String}()\n\
    \    for s in string\n        prefix_list += all_prefixes(s)\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaab\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccd\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdc\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdce\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbbccdcef\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbccdcefg\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdcefgj\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdcefgjh\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdcefgjhig",
  "    prefix_list = Vector{String}()\n    for s in string\n        prefix_list +=\
    \ all_prefixes(s)\n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>", "    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>", "    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\nend", "   \
    \ prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>", "    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[1:end-1]) \n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+1:end-1]) \n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+1:end]) \n    prefix_list = prefix_list ++ all_prefixes(string[1:end])\
    \ \n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>", "    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[1:end-1]) \n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end-1:end])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end-1:end-1])\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the longest prefix that is a\
    \ substring of the input string. For example, all_prefixes(\"abcabc\") should\
    \ return \"abc\".", "    prefixes = []\n    for c in string\n        prefixes\
    \ += all_prefixes(c)\n    end\n    prefixes\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the longest prefix that is a substring of the input string.\
    \ For example, all_prefixes(\"abcabc\") should return [\"abc\"].", "    prefix_list\
    \ = Vector{String}()\n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list ++ all_prefixes(string[end+1:end-1])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+1:end-1])\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of times\
    \ the string \"ab\" appears in the string. \n>>> count_ab(\"abcabcbb\")\n2\n>>>\
    \ count_ab(\"a\")\n1\n>>> count_ab(\"ab\")\n1\n>>> count_ab(\"aba\")\n0\n>>> count_ab(\"\
    abba\")\n1\n>>> count_ab(\"abbaab\")\n2\n>>> count_ab(\"abbaaba\")\n3\n>>> count_ab(\"\
    abbaabaa\")\n4\n>>> count_ab(\"abbaabaaab\")\n5\n>>> count_ab(\"abbaabaaabb\"\
    )\n5\n>>> count_ab(\"abbaabaaabbb\")\n5\n>>> count_ab(\"abbaabaaabbbb\")\n5\n\
    >>> count_ab(\"abbaabaaabbbbba\")\n5\n>>> count_ab(\"abbaabaaabbbbbaab\")\n5\n\
    >>> count_ab(\"abbaabaaabbbbbaaba\")\n5\n>>> count_ab(\"abbaabaaabbbbbaabaa\"\
    )\n5\n>>> count_ab(\"abbaabaaabbbbbaabaaa\")\n5\n>>> count_ab(\"abbaabaaabbbbbaabaaaa\"\
    )\n5\n>>> count_ab(\"abbaabaaabbbbbaabaaaaa\")\n5\n>>> count_ab(\"abbaabaaabbbbbaabaaaaaa\"\
    )\n5\n>>> count_ab(\"abbaabaaabbbbbaabaaaaaaa\")\n5\n>>> count_ab(\"abbaabaaabbbbbaabaaaaaaab\"\
    )\n5\n>>> count_ab(\"abbaabaaabbbbbaabaaaaaaaba\")\n5\n>>> count_ab(\"abbaabaaabbbbbaabaaaaaaabaa\"\
    )\n5\n>>> count_ab(\"abbaabaaabbbbbaabaaaaaaabaaa\")\n5\n>>> count_ab(\"abbaabaaabbbbbaabaaaaaaabaaaa\"\
    )\n5\n>>> count_ab", "    prefix_list = Vector{String}()\n    prefix_list[1] =\
    \ string\n    prefix_list[2] = string\n    for i = 3:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    prefix_list = Vector{String}()\n    prefix_list[1]\
    \ = string\n    \n    for i = 2:length(string)\n        prefix_list[i] = prefix_list[i-2]\
    \ + string[i]\n    end\n    \n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>", "    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i in 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    prefix_count(string::String)::Int64",
  "    prefix_list = Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\
    \ + [string[1:end-1]]\n    return prefix_list\nend", "    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += prefixes_of(prefix)\n\
    \    end\n    prefix_list\nend", "    \n    prefix_list = Vector{String}()\n \
    \   prefix_list[1] = string\n    prefix_list[2] = string\n    prefix_list[3] =\
    \ string\n    prefix_list[4] = string\n    prefix_list[5] = string\n    prefix_list[6]\
    \ = string\n    prefix_list[7] = string\n    prefix_list[8] = string\n    prefix_list[9]\
    \ = string\n    prefix_list[10] = string\n    prefix_list[11] = string\n    prefix_list[12]\
    \ = string\n    prefix_list[13] = string\n    prefix_list[14] = string\n    prefix_list[15]\
    \ = string\n    prefix_list[16] = string\n    prefix_list[17] = string\n    prefix_list[18]\
    \ = string\n    prefix_list[19] = string\n    prefix_list[20] = string\n    prefix_list[21]\
    \ = string\n    prefix_list[22] = string\n    prefix_list[23] = string\n    prefix_list[24]\
    \ = string\n    prefix_list[25] = string\n    prefix_list[26] = string\n    prefix_list[27]\
    \ = string\n    prefix_list[28] = string\n    prefix_list[29] = string\n    prefix_list[30]\
    \ = string\n    prefix_list[31] = string\n    prefix_list[32] = string\n    prefix_list[33]\
    \ = string\n    prefix_list[34] = string\n    prefix_list[35] = string\n    prefix_list[36]\
    \ = string\n    prefix_list[37] = string\n    prefix_list[38] = string\n    prefix_list[39]\
    \ = string\n    prefix_list[40] = string\n    prefix_list[41] = string\n    prefix_list[42]\
    \ = string\n    prefix_list[43] = string\n    prefix_list[44] = string\n    prefix_list[45]\
    \ = string\n    prefix_list[46] = string\n    prefix_list[47] = string\n    prefix_list[48]\
    \ = string\n    prefix_list[49] = string\n    prefix_list[50] = string\n    prefix_list[51]\
    \ = string\n    prefix_list[52] = string\n    prefix_list[53] = string\n    prefix_list[54]\
    \ = string\n    prefix_list[55] = string\n    prefix_list[56] = string\n    prefix_list[57]\
    \ = string\n    prefix_list[58] = string\n    prefix_list[59] = string\n    prefix_list[60]\
    \ = string\n    prefix_list[61] = string\n    prefix_list[62] = string\n    prefix_list[63]\
    \ = string\n    prefix_list[64] = string\n    prefix_list[65] = string\n    prefix_list[66]\
    \ = string\n    prefix_list[67] = string\n    prefix_list[68] = string\n    prefix_list[69]\
    \ = string\n    prefix_list[70] = string\n    prefix_list[71] = string\n    prefix_list[72]\
    \ = string\n", "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n\
    \    for i = 2:length(string)\n        prefix_list[i] = prefix_list[i-1] + string[i]\n\
    \    end\n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the longest prefix that is a substring of the input string. For example,\
    \ all_prefixes(\"abc\") returns [\"a\", \"ab\", \"abc\"]", "    prefix_list =\
    \ Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += all_prefixes(prefix) \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the longest prefix that is a substring of the input string.\
    \ For example, all_prefixes(\"abcabc\") should return \"abc\".", "    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    prefix_length(prefix::String)",
  "    prefix_list = Vector{String}()\n    prefix_list = prefix_list ++ [string]\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[1:end-1]) \n    return prefix_list\n\
    end", "    prefixes = Vector{String}()\n    for c in string\n        push!(prefixes,\
    \ string[1:end-c])\n    end\n    return prefixes\nend\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the longest prefix that is a substring of the original\
    \ string. For example, all_prefixes(\"abcabc\") should return \"abc\".", "   \
    \ prefix_list = Vector{String}()\n    for prefix in string.split(\"\")\n     \
    \   prefix_list += prefixes_of(prefix)\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.4>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the longest prefix that is a\
    \ substring of the input string. For example, all_prefixes(\"abcabc\") should\
    \ return \"abc\".", "    \n    prefix_list = Vector{String}()\n    prefix_list[1]\
    \ = string\n    prefix_list[2] = string\n    prefix_list[3] = string\n    prefix_list[4]\
    \ = string\n    prefix_list[5] = string\n    prefix_list[6] = string\n    prefix_list[7]\
    \ = string\n    prefix_list[8] = string\n    prefix_list[9] = string\n    prefix_list[10]\
    \ = string\n    prefix_list[11] = string\n    prefix_list[12] = string\n    prefix_list[13]\
    \ = string\n    prefix_list[14] = string\n    prefix_list[15] = string\n    prefix_list[16]\
    \ = string\n    prefix_list[17] = string\n    prefix_list[18] = string\n    prefix_list[19]\
    \ = string\n    prefix_list[20] = string\n    prefix_list[21] = string\n    prefix_list[22]\
    \ = string\n    prefix_list[23] = string\n    prefix_list[24] = string\n    prefix_list[25]\
    \ = string\n    prefix_list[26] = string\n    prefix_list[27] = string\n    prefix_list[28]\
    \ = string\n    prefix_list[29] = string\n    prefix_list[30] = string\n    prefix_list[31]\
    \ = string\n    prefix_list[32] = string\n    prefix_list[33] = string\n    prefix_list[34]\
    \ = string\n    prefix_list[35] = string\n    prefix_list[36] = string\n    prefix_list[37]\
    \ = string\n    prefix_list[38] = string\n    prefix_list[39] = string\n    prefix_list[40]\
    \ = string\n    prefix_list[41] = string\n    prefix_list[42] = string\n    prefix_list[43]\
    \ = string\n    prefix_list[44] = string\n    prefix_list[45] = string\n    prefix_list[46]\
    \ = string\n    prefix_list[47] = string\n    prefix_list[48] = string\n    prefix_list[49]\
    \ = string\n    prefix_list[50] = string\n    prefix_list[51] = string\n    prefix_list[52]\
    \ = string\n    prefix_list[53] = string\n    prefix_list[54] = string\n    prefix_list[55]\
    \ = string\n    prefix_list[56] = string\n    prefix_list[57] = string\n    prefix_list[58]\
    \ = string\n    prefix_list[59] = string\n    prefix_list[60] = string\n    prefix_list[61]\
    \ = string\n    prefix_list[62] = string\n    prefix_list[63] = string\n    prefix_list[64]\
    \ = string\n    prefix_list[65] = string\n    prefix_list[66] = string\n    prefix_list[67]\
    \ = string\n    prefix_list[68] = string\n    prefix_list[69] = string\n    prefix_list[70]\
    \ = string\n    prefix_list[71] = string\n    prefix_list[72] = string\n", " \
    \   prefix_list = Vector{String}()\n    prefix_list = prefix_list + prefixes(string)\n\
    \    prefix_list = prefix_list + prefixes(string.reverse)\n    prefix_list = prefix_list\
    \ + prefixes(string.reverse.substring(1, length(string)))\n    prefix_list = prefix_list\
    \ + prefixes(string.reverse.substring(1, length(string)-1))\n    prefix_list =\
    \ prefix_list + prefixes(string.reverse.substring(1, length(string)-2))\n    prefix_list\
    \ = prefix_list + prefixes(string.reverse.substring(1, length(string)-3))\n  \
    \  prefix_list = prefix_list + prefixes(string.reverse.substring(1, length(string)-4))\n\
    \    prefix_list = prefix_list + prefixes(string.reverse.substring(1, length(string)-5))\n\
    \    prefix_list = prefix_list + prefixes(string.reverse.substring(1, length(string)-6))\n\
    \    prefix_list = prefix_list + prefixes(string.reverse.substring(1, length(string)-7))\n\
    \    prefix_list = prefix_list + prefixes(string.reverse.substring(1, length(string)-8))\n\
    \    prefix_list = prefix_list + prefixes(string.reverse.substring(1, length(string)-9))\n\
    \    prefix_list = prefix_list + prefixes(string.reverse.substring(1, length(string)-10))\n\
    \    prefix_list = prefix_list + prefixes(string.reverse.substring(1, length(string)-11))\n\
    \    prefix_list = prefix_list + prefixes(string.reverse.substring(1, length(string)-12))\n\
    \    prefix_list = prefix_list + prefixes(string.reverse.substring(1, length(string)-13))\n\
    \    prefix_list = prefix_list + prefixes(string.reverse.substring(1, length(string)-14))\n\
    \    prefix_list = prefix_list + prefixes(string.reverse.substring(1, length(string)-15))\n\
    \    prefix_list = prefix_list + prefixes(string.reverse.substring(1, length(string)-16))\n\
    \    prefix_list = prefix_list + prefixes(string.reverse.substring(1, length(string)-17))\n\
    \    prefix_list = prefix_list + prefixes(string.reverse.substring(1, length(string)-18))\n\
    \    prefix_list = prefix_list + prefixes(string.reverse.substring(1, length(string)-19))\n\
    \    prefix_list = prefix_list + prefixes(string.reverse.substring(1, length(string)-20))\n\
    \    prefix_list = prefix_list + prefixes(string.reverse.substring(1, length(string)-21))\n\
    \    prefix_list = prefix_list + prefixes(string.reverse.substring(1, length(string)-22))\n\
    \    prefix_list = prefix_list + prefixes(string.reverse.substring(1, length(string)-23))\n\
    \    prefix_list = prefix_list + prefixes(string.reverse.substring(1, length(string)-24))\n\
    \    prefix_list = prefix_list + ", "    prefix_list = Vector{String}()\n    prefix_list[1]\
    \ = string\n    for i in 2:length(string)\n        prefix_list[i] = prefix_list[i-1]\
    \ + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.3>",
  "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the longest prefix\
    \ that is a substring of the input string. For example, for the input string \"\
    abc\", the longest prefix is \"abc\".", "    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"\n    prefix_length(string::String)", "    prefix_list\
    \ = Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += all_prefixes(prefix) \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"ab\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abba\")\n</cell>\n<code\
    \ language=julia-1.4>\nall_prefixes(\"abbac\")\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abbaca\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abbacac\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacaca\")\n</cell>\n\
    <code language=julia-1.4>\nall_prefixes(\"abbacacaa\")\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abbacacaaa\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abbacacaaab\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaabb\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaabbb\")\n</cell>\n\
    <code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbc\")\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abbacacaaabbbcc\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abbacacaaabbbccc\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbccca\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbcccaa\")\n\
    </cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbcccaaa\")\n</cell>\n\
    <code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbcccaaaa\")\n</cell>\n<code\
    \ language=julia-1.4>\nall_prefixes(\"abbacacaaabbbcccaaaab\")\n</cell>\n<code\
    \ language=julia-1.4>\nall_prefixes(\"abbacacaaabbbcccaaaabb\")\n</cell>\n<code\
    \ language=julia-1.4>\nall_prefixes(\"abbacacaaabbbcccaaaabbb\")\n</cell", " \
    \   prefix_list = Vector{String}()\n    for prefix in string.split(\"\")\n   \
    \     prefix_list += prefixes_of(prefix)\n    return prefix_list\nend", "    \n\
    \    prefixes = []\n    \n    for c in string\n        prefixes += all_prefixes(string[1:end-1])\
    \ + [c]\n    end\n    \n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the longest prefix that is a substring of the input string.\
    \ For example, all_prefixes(\"abcabc\") should return [\"abc\"].", "    prefix_list\
    \ = Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += prefixes_of(prefix)\n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns the longest prefix that is a substring of the input\
    \ string. For example, longest_prefix(\"abracadabra\") should return \"abracadabra\"\
    .", "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for\
    \ i = 2 to length(string)\n        prefix_list[i] = prefix_list[i-2] + string[i]\n\
    \    end\n    return prefix_list\nend\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abc\")\n</cell>\n<text>\nExercise 4\nWrite a function that takes a string and\
    \ returns the number of characters in the string that are uppercase letters.",
  "    prefix_list = Vector{String}()\n    for prefix in string.split(\"\")\n    \
    \    prefix_list += all_prefixes(prefix) \n    end\n    prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string as input and returns the number of times\
    \ each character appears in the string. \nFor example, for the string \"abcabcbb\"\
    \ the function should return {\"a\" => 3, \"b\" => 2, \"c\" => 3, \"b\" => 2,\
    \ \"c\" => 2, \"b\" => 2}.", "    prefix_list = Vector{String}()\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[1:end-1]) \n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end-1:end])\n    prefix_list = prefix_list ++ all_prefixes(string[end+1:end+2])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+2:end+3])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+3:end+4])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+4:end+5])\n    prefix_list = prefix_list ++ all_prefixes(string[end+5:end+6])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+6:end+7])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+7:end+8])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+8:end+9])\n    prefix_list = prefix_list ++ all_prefixes(string[end+9:end+10])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+10:end+11])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+11:end+12])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+12:end+13])\n    prefix_list = prefix_list ++ all_prefixes(string[end+13:end+14])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+14:end+15])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+15:end+16])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+16:end+17])\n    prefix_list = prefix_list ++ all_prefixes(string[end+17:end+18])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+18:end+19])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+19:end+20])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+20:end+21])\n    prefix_list = prefix_list ++ all_prefixes(string[end+21:end+22])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+22:end+23])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+23:end+24])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+24:end+25])\n    prefix_list = prefix_list ++ all_prefixes(string[end+25:end+26])\n\
    \    prefix_", "    \n    prefix_list = Vector{String}()\n    prefix_list[1] =\
    \ string\n    \n    for i = 2:length(string)\n        prefix_list[i] = prefix_list[i-2]\
    \ + string[i]\n    end\n    \n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 3: Write a function that takes\
    \ a string and returns the longest prefix that is a substring of the input string.\
    \ For example, all_prefixes(\"abcabc\") should return \"abc\".", "    prefix_list\
    \ = Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\
    \ + [string[1:end-1]]\n    return prefix_list\nend", "    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ [string[1:i] for i in length(string)]\n    prefix_list\
    \ = prefix_list ++ [string[i+1::] for i in length(string)]\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the longest prefix\
    \ that is a substring of the input string. For example, all_prefixes(\"abcabc\"\
    ) should return \"abc\".", "    \n    prefix_list = Vector{String}()\n    prefix_list[1]\
    \ = string\n    prefix_list[2] = string\n    prefix_list[3] = string\n    prefix_list[4]\
    \ = string\n    prefix_list[5] = string\n    prefix_list[6] = string\n    prefix_list[7]\
    \ = string\n    prefix_list[8] = string\n    prefix_list[9] = string\n    prefix_list[10]\
    \ = string\n    prefix_list[11] = string\n    prefix_list[12] = string\n    prefix_list[13]\
    \ = string\n    prefix_list[14] = string\n    prefix_list[15] = string\n    prefix_list[16]\
    \ = string\n    prefix_list[17] = string\n    prefix_list[18] = string\n    prefix_list[19]\
    \ = string\n    prefix_list[20] = string\n    prefix_list[21] = string\n    prefix_list[22]\
    \ = string\n    prefix_list[23] = string\n    prefix_list[24] = string\n    prefix_list[25]\
    \ = string\n    prefix_list[26] = string\n    prefix_list[27] = string\n    prefix_list[28]\
    \ = string\n    prefix_list[29] = string\n    prefix_list[30] = string\n    prefix_list[31]\
    \ = string\n    prefix_list[32] = string\n    prefix_list[33] = string\n    prefix_list[34]\
    \ = string\n    prefix_list[35] = string\n    prefix_list[36] = string\n    prefix_list[37]\
    \ = string\n    prefix_list[38] = string\n    prefix_list[39] = string\n    prefix_list[40]\
    \ = string\n    prefix_list[41] = string\n    prefix_list[42] = string\n    prefix_list[43]\
    \ = string\n    prefix_list[44] = string\n    prefix_list[45] = string\n    prefix_list[46]\
    \ = string\n    prefix_list[47] = string\n    prefix_list[48] = string\n    prefix_list[49]\
    \ = string\n    prefix_list[50] = string\n    prefix_list[51] = string\n    prefix_list[52]\
    \ = string\n    prefix_list[53] = string\n    prefix_list[54] = string\n    prefix_list[55]\
    \ = string\n    prefix_list[56] = string\n    prefix_list[57] = string\n    prefix_list[58]\
    \ = string\n    prefix_list[59] = string\n    prefix_list[60] = string\n    prefix_list[61]\
    \ = string\n    prefix_list[62] = string\n    prefix_list[63] = string\n    prefix_list[64]\
    \ = string\n    prefix_list[65] = string\n    prefix_list[66] = string\n    prefix_list[67]\
    \ = string\n    prefix_list[68] = string\n    prefix_list[69] = string\n    prefix_list[70]\
    \ = string\n    prefix_list[71] = string\n    prefix_list[72] = string\n", " \
    \   prefixes = Vector{String}()\n    prefixes << string\n    prefixes << string[1:end-1]\n\
    \    prefixes << string[2:end]\n    return prefixes\nend", "    prefix_list =\
    \ Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += prefixes_of(prefix)\n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string as input and returns a string with all prefixes of the string\
    \ in alphabetical order. For example, if the input is \"abracadabra\", the function\
    \ should return \"abracadabra\".", "    prefix_list = Vector{String}()\n    prefix_list[1]\
    \ = string\n    for i in 2:length(string)\n        prefix_list[i] = prefix_list[i-1]\
    \ + string[i]\n    end\n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the longest common prefix of two given strings.", "    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + [string[1:i] for i in 2:length(string)]\n   \
    \ prefix_list = prefix_list + [string[i-1:i] for i in 2:length(string)]\n    prefix_list\
    \ = prefix_list + [string[i-1:i] for i in 2:length(string)]\n    prefix_list =\
    \ prefix_list + [string[1:i] for i in 2:length(string)]\n    prefix_list = prefix_list\
    \ + [string[i-1:i] for i in 2:length(string)]\n    prefix_list = prefix_list +\
    \ [string[i-1:i] for i in 2:length(string)]\n    prefix_list = prefix_list + [string[1:i]\
    \ for i in 2:length(string)]\n    prefix_list = prefix_list + [string[i-1:i] for\
    \ i in 2:length(string)]\n    prefix_list = prefix_list + [string[i-1:i] for i\
    \ in 2:length(string)]\n    prefix_list = prefix_list + [string[1:i] for i in\
    \ 2:length(string)]\n    prefix_list = prefix_list + [string[i-1:i] for i in 2:length(string)]\n\
    \    prefix_list = prefix_list + [string[i-1:i] for i in 2:length(string)]\n \
    \   prefix_list = prefix_list + [string[1:i] for i in 2:length(string)]\n    prefix_list\
    \ = prefix_list + [string[i-1:i] for i in 2:length(string)]\n    prefix_list =\
    \ prefix_list + [string[i-1:i] for i in 2:length(string)]\n    prefix_list = prefix_list\
    \ + [string[1:i] for i in 2:length(string)]\n    prefix_list = prefix_list + [string[i-1:i]\
    \ for i in 2:length(string)]\n    prefix_list = prefix_list + [string[i-1:i] for\
    \ i in 2:length(string)]\n    prefix_list = prefix_list + [string[1:i] for i in\
    \ 2:length(string)]\n    prefix_list = prefix_list + [string[i-1:i] for i in 2:length(string)]\n\
    \    prefix_list = prefix_list + [string[i-1:i] for i in 2:length(string)]\n \
    \   prefix_list = prefix_list + [string[1:i] for i in 2:length(string)]\n    prefix_list\
    \ = prefix_list + [string[i-1:i] for i in 2:length(string)]\n    prefix_list =\
    \ prefix_list + [string[i-1:i] for i in 2:length(string)]\n    prefix_list = prefix_list\
    \ + [string[1:i] for i in 2:length(string)]\n    prefix_list = prefix_list + [string[i-1:i]\
    \ for i in 2:length(string)]\n    prefix_list = prefix_list + [string[i-1:i] for\
    \ i in 2:length(string)]\n    prefix_list = prefix_list + [string[1:i] for i in\
    \ 2:length(string)]\n    prefix_list = prefix_list + [string[i-1:i] for i in 2:length(string)]\n\
    \    prefix_list = prefix_list + [string[i-1:i] for i in 2:length(string)]\n \
    \   prefix_list = ", "    \n    prefixes = Vector{String}()\n    \n    for c in\
    \ string\n        prefixes += all_prefixes(c)\n    end\n    \n    return prefixes\n\
    end", "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for\
    \ i in 2:length(string)\n        prefix_list[i] = prefix_list[i-2] + string[i]\n\
    \    end\n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>", "    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += all_prefixes(prefix)\
    \ \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>", "    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string, prefix_list)\n  \
    \  prefix_list = prefix_list + all_prefixes_helper(string, prefix_list)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string, prefix_list)\n    prefix_list =\
    \ prefix_list + all_prefixes_helper(string, prefix_list)\n    prefix_list = prefix_list\
    \ + all_prefixes_helper(string, prefix_list)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string, prefix_list)\n    prefix_list = prefix_list + all_prefixes_helper(string,\
    \ prefix_list)\n    prefix_list = prefix_list + all_prefixes_helper(string, prefix_list)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string, prefix_list)\n  \
    \  prefix_list = prefix_list + all_prefixes_helper(string, prefix_list)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string, prefix_list)\n    prefix_list =\
    \ prefix_list + all_prefixes_helper(string, prefix_list)\n    prefix_list = prefix_list\
    \ + all_prefixes_helper(string, prefix_list)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string, prefix_list)\n    prefix_list = prefix_list + all_prefixes_helper(string,\
    \ prefix_list)\n    prefix_list = prefix_list + all_prefixes_helper(string, prefix_list)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string, prefix_list)\n  \
    \  prefix_list = prefix_list + all_prefixes_helper(string, prefix_list)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string, prefix_list)\n    prefix_list =\
    \ prefix_list + all_prefixes_helper(string, prefix_list)\n    prefix_list = prefix_list\
    \ + all_prefixes_helper(string, prefix_list)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string, prefix_list)\n    prefix_list = prefix_list + all_prefixes_helper(string,\
    \ prefix_list)\n    prefix_list = prefix_list + all_prefixes_helper(string, prefix_list)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string, prefix_list)\n  \
    \  prefix_list = prefix_list + all_prefixes_helper(string, prefix_list)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string, prefix_list)\n    prefix_list =\
    \ prefix_list + all_prefixes_helper(string, prefix_list)\n    prefix_list = prefix_list\
    \ + all_prefixes_helper(string, prefix_list)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string, prefix_list)\n    prefix_list = prefix_list + all_prefixes_helper(string,\
    \ prefix_list)\n    prefix_list = prefix_list + all_prefixes_helper(string, prefix_list)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string, prefix_list)\n  \
    \  prefix_list = prefix_list + all_prefix", "    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ [string]\n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    ab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abd\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abd\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abd\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abd\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abd\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abd\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abd\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abd\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abd\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abd\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abd\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abd\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abd\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abd\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abd\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abd\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abd\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abd\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abd\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abd\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abd\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abd\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abd\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abd\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abd\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes", "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n\
    \    for i = 2:length(string)\n        prefix_list[i] = prefix_list[i-2] + string[i]\n\
    \    end\n    return prefix_list\nend", "    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ [string]\n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    return prefix_list\nend", "    prefix_list = Vector{String}()\n    prefix_list[1]\
    \ = string\n    for i = 2:length(string)\n        prefix_list[i] = prefix_list[i-1]\
    \ + string[i]\n    end\n    return prefix_list\nend", "    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.3>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.3>",
  "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\n@test all_prefixes(\"abc\") == [\"a\"\
    , \"ab\", \"abc\"]\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the longest prefix that is a substring of the input string.\
    \ For example, all_prefixes(\"abcabc\") should return [\"abc\"].", "    \n   \
    \ prefix_list = Vector{String}()\n    prefix_list[1] = string\n    prefix_list[2]\
    \ = string\n    \n    for i = length(prefix_list) downto 1 \n        prefix_list[i]\
    \ = prefix_list[i-2] + prefix_list[i-1]\n    end\n    \n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the longest prefix\
    \ that is a palindrome. \nFor example, \nall_prefixes(\"abba\") returns [\"ab\"\
    , \"ba\"]", "    prefix_list = Vector{String}()\n    prefix_list = prefix_list\
    \ + all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_", "    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += all_prefixes(prefix)\
    \ \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    ab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbaca\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacaca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabbac\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacabbaca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacabbacac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacabbacaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabbacacab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabbacacaba\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacabbacacabba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacabbacacabbac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacabbacacabbaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacabbacacabbacac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacabbacacabbacaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacabbacacabbacacab\")\n</cell>\n<code language=julia-1.5", "    \n    prefixes\
    \ = []\n    \n    for char in string\n        prefixes += all_prefixes(char) \n\
    \    end\n    \n    return prefixes\nend", "    prefixes = Vector{String}()\n\
    \    prefix_length = 0\n    for character in string\n        if character == prefixes[prefix_length]\n\
    \            prefix_length += 1\n        else\n            prefix_length = 0\n\
    \            prefixes << character\n        end\n    end\n    return prefixes\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the longest prefix\
    \ that is a substring of the input string. For example, all_prefixes(\"abcabc\"\
    ) should return \"abc\".", "    prefix_list = Vector{String}()\n    prefix_list[1]\
    \ = string\n    for i = 2:length(string)\n        prefix_list[i] = prefix_list[i-2]\
    \ + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the longest prefix of a given string.", "    \n    prefixes = Vector{String}()\n\
    \    \n    for c in string\n        prefixes += all_prefixes(c) + [c]\n    end\n\
    \    \n    return prefixes\nend", "    prefix_list = Vector{String}()\n    for\
    \ prefix in string.split(\"\")\n        prefix_list += prefixes_of(prefix)\n \
    \   end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacc\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbbaccc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbbacccb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbacccbc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbca\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbcac\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbcacb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacbbacccbcacbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbbacccbcacbbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbacccbcacbbbc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbacccbcacbbbca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbacccbcacbbbcac\")\n</", "    prefix_list = Vector{String}()\n    for\
    \ s in string\n        prefix_list += all_prefixes(s)\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbcc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbccc\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbbbcccd\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbcccdd\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbcccddd\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbcccdddd\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbcccddddd\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbbbcccdddddd\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbcccddddddd\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbcccdddddddd\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbcccdddddddddd\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbcccddddddddddd\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbcccdddddddddddd\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbbbcccdddddddddddddd\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbbbcccdddddddddddddddd\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbbb", "    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ [string[1:i] | i <- 1:length(string)]\n    prefix_list\
    \ = prefix_list ++ [string[1:i] | i <- length(string):-1]\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.4>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abba\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbac\")\n</cell>\n<code\
    \ language=julia-1.4>\nall_prefixes(\"abbaca\")\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abbacaca\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaa\")\n\
    </cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaa\")\n</cell>\n<code\
    \ language=julia-1.4>\nall_prefixes(\"abbacacaaab\")\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abbacacaaabb\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abbacacaaabbb\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbc\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbcc\")\n</cell>\n\
    <code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbccc\")\n</cell>\n<code\
    \ language=julia-1.4>\nall_prefixes(\"abbacacaaabbbccca\")\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abbacacaaabbbcccaa\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abbacacaaabbbcccaaa\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbcccaaaa\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbcccaaaab\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaab", "    \n  \
    \  prefixes = Vector{String}()\n    \n    for c in string\n        prefixes +=\
    \ all_prefixes(c) + [c]\n    end\n    \n    return prefixes\nend", "    \n   \
    \ prefixes = Vector{String}()\n    \n    for c in string\n        prefixes +=\
    \ all_prefixes(string[1:end-1]) + [c]\n    end\n    \n    return prefixes\nend\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbba\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacbbacc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbbaccc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbacccba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbacca\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbacbacca\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbacbacbacca\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbacbacbacbacca\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbacbacbacbacbacca\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbacbacbacbacbacbacca\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbacbacbacbacbacbacbacca\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes", "    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += prefixes_of(prefix)\n\
    \    return prefix_list\nend", "    prefix_list = Vector{String}()\n    prefix_list\
    \ = prefix_list ++ [string]\n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    return prefix_list\nend\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    ab\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"aba\")\n</cell>\n<code\
    \ language=julia-1.3>\nall_prefixes(\"abba\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abbac\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbaca\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbacac\")\n</cell>\n<code\
    \ language=julia-1.3>\nall_prefixes(\"abbacaca\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abbacacaa\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abbacacaaa\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbacacaaab\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbacacaaabb\")\n</cell>\n\
    <code language=julia-1.3>\nall_prefixes(\"abbacacaaabbb\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abbacacaaabbbc\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abbacacaaabbbcc\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbacacaaabbbccc\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbacacaaabbbccca\")\n</cell>\n\
    <code language=julia-1.3>\nall_prefixes(\"abbacacaaabbbcccaa\")\n</cell>\n<code\
    \ language=julia-1.3>\nall_prefixes(\"abbacacaaabbbcccaaa\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abbacacaaabbbcccaaac\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abbacacaaabbbcccaaacb\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abbacacaaabbbcccaaacbb\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abbacacaaabbbcc", "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n\
    \    for i = 2 to length(string)\n        prefix_list[i] = prefix_list[i-2] +\
    \ string[i]\n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"ab\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abba\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbac\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbaca\")\n</cell>\n<code\
    \ language=julia-1.3>\nall_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abbacaca\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abbacacaa\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbacacaaa\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbacacaaab\")\n</cell>\n\
    <code language=julia-1.3>\nall_prefixes(\"abbacacaaabb\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abbacacaaabbb\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abbacacaaabbbc\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbacacaaabbbcc\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbacacaaabbbccd\")\n</cell>\n\
    <code language=julia-1.3>\nall_prefixes(\"abbacacaaabbbccdc\")\n</cell>\n<code\
    \ language=julia-1.3>\nall_prefixes(\"abbacacaaabbbccdcd\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abbacacaaabbbccdcdc\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abbacacaaabbbccdcdcc\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbacacaaabbbccdcdccd\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbacacaaabbbccdcdccdc\"\
    )\n", "    \n    prefix_list = Vector{String}()\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[1:end-1]) \n    prefix_list = prefix_list ++ all_prefixes(string[end-1:end])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+1:end+2])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+2:end+3])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+3:end+4])\n    prefix_list = prefix_list ++ all_prefixes(string[end+4:end+5])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+5:end+6])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+6:end+7])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+7:end+8])\n    prefix_list = prefix_list ++ all_prefixes(string[end+8:end+9])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+9:end+10])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+10:end+11])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+11:end+12])\n    prefix_list = prefix_list ++ all_prefixes(string[end+12:end+13])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+13:end+14])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+14:end+15])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+15:end+16])\n    prefix_list = prefix_list ++ all_prefixes(string[end+16:end+17])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+17:end+18])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+18:end+19])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+19:end+20])\n    prefix_list = prefix_list ++ all_prefixes(string[end+20:end+21])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+21:end+22])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+22:end+23])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+23:end+24])\n    prefix_list = prefix_list ++ all_prefixes(string[end+24:end+25])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+25:end+26])\n", "  \
    \  prefix_list = Vector{String}()\n    prefix_list = prefix_list ++ [string]\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[1:end-1]) \n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[2:end])\n    return prefix_list\nend",
  "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\n\
    end", "    \n    prefixes = Vector{String}()\n    \n    for c in string\n    \
    \    prefixes += all_prefixes(c) + [c]\n    end\n    \n    return prefixes\nend\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaa\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcc\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccc\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbbcccaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbcccaaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaaac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaaacb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaaacbb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccca", "  \
    \  prefix_list = Vector{String}()\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    return prefix_list\nend", " \
    \   \n    prefixes = Vector{String}()\n    \n    for c in string\n        prefixes\
    \ += all_prefixes(c) \n    end\n    \n    return prefixes\nend\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the longest prefix that is a substring\
    \ of the original string. For example, for the string \"abcabc\", the longest\
    \ prefix that is a substring would be \"abc\".", "    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>", "    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ [string]\n    prefix_list = prefix_list ++ all_prefixes(string[1:end])\n\
    \    return prefix_list\nend", "    prefixes = []\n    for c in string\n     \
    \   push!(prefixes, c)\n    end\n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>", "    \n    prefixes\
    \ = Vector{String}()\n    \n    for prefix in string.split(\"\")\n        prefixes\
    \ << prefix\n    end\n    \n    return prefixes\nend", "    prefix_list = Vector{String}()\n\
    \    prefix_list = all_prefixes_helper(string, prefix_list)\n    return prefix_list\n\
    end", "    \n    prefix_list = Vector{String}()\n    prefix_list[1] = string\n\
    \    prefix_list[2] = string[1:end-1]\n    prefix_list[3] = string[2:end]\n  \
    \  prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that returns the longest prefix\
    \ of a given string. For example, for the string \"abc\", the longest prefix is\
    \ \"abc\".", "    \n    prefixes = Vector{String}()\n    \n    for char in string\n\
    \        prefixes += all_prefixes(char) + [char]\n    end\n    \n    return prefixes\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbac\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbbbbaca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbbacab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbbacabc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbacabca\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbacabcab\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbbbbacabcabc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbbacabcabca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbbacabcabcab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbacabcabcabc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbacabcabcabca\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbacabcabcabcab\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbbbbacabcabcabcabc\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbbbbacabcabcabcabca\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes", "    prefix_list = Vector{String}()\n  \
    \  for prefix in string.split(\"\")\n        prefix_list += all_prefixes(prefix)\
    \ \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    ab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell", "    prefix_list = Vector{String}()\n    prefix_list\
    \ = prefix_list + [string[1:i] | i <- 1:length(string)]\n    prefix_list = prefix_list\
    \ + [string[1:i] | i <- length(string)+1:length(string)]\n    prefix_list = prefix_list\
    \ + [string[1:i] | i <- length(string)+2:length(string)]\n    prefix_list = prefix_list\
    \ + [string[1:i] | i <- length(string)+3:length(string)]\n    prefix_list = prefix_list\
    \ + [string[1:i] | i <- length(string)+4:length(string)]\n    prefix_list = prefix_list\
    \ + [string[1:i] | i <- length(string)+5:length(string)]\n    prefix_list = prefix_list\
    \ + [string[1:i] | i <- length(string)+6:length(string)]\n    prefix_list = prefix_list\
    \ + [string[1:i] | i <- length(string)+7:length(string)]\n    prefix_list = prefix_list\
    \ + [string[1:i] | i <- length(string)+8:length(string)]\n    prefix_list = prefix_list\
    \ + [string[1:i] | i <- length(string)+9:length(string)]\n    prefix_list = prefix_list\
    \ + [string[1:i] | i <- length(string)+10:length(string)]\n    prefix_list = prefix_list\
    \ + [string[1:i] | i <- length(string)+11:length(string)]\n    prefix_list = prefix_list\
    \ + [string[1:i] | i <- length(string)+12:length(string)]\n    prefix_list = prefix_list\
    \ + [string[1:i] | i <- length(string)+13:length(string)]\n    prefix_list = prefix_list\
    \ + [string[1:i] | i <- length(string)+14:length(string)]\n    prefix_list = prefix_list\
    \ + [string[1:i] | i <- length(string)+15:length(string)]\n    prefix_list = prefix_list\
    \ + [string[1:i] | i <- length(string)+16:length(string)]\n    prefix_list = prefix_list\
    \ + [string[1:i] | i <- length(string)+17:length(string)]\n    prefix_list = prefix_list\
    \ + [string[1:i] | i <- length(string)+18:length(string)]\n    prefix_list = prefix_list\
    \ + [string[1:i] | i <- length(string)+19:length(string)]\n    prefix_list = prefix_list\
    \ + [string[1:i] | i <- length(string)+20:length(string)]\n    prefix_list = prefix_list\
    \ + [string[1:i] | i <- length(string)+21:length(string)]\n    prefix_list = prefix_list\
    \ + [string[1:i] | i <- length(string)+22:length(string)]\n", "    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbba\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacbbacc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbbaccc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbacccb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbcb\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbcbc\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacbbacccbcbcb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbbacccbcbcbc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbacccbcbcbcb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbcbcbcbc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbcbcbcbcb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbba", "    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 3.3\nWrite a function that returns the longest prefix of a given string.",
  "    prefix_list = Vector{String}()\n    for s in string\n        prefix_list =\
    \ [prefix_list; prefix_list[1:]]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.3>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.3>",
  "    prefix_list = Vector{String}()\n    for c in string\n        prefix_list +=\
    \ all_prefixes(c)\n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.4>",
  "    \n    prefix_list = Vector{String}()\n    prefix_list = all_prefixes_helper(string,\
    \ prefix_list)\n    \n    return prefix_list\nend", "    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[1:end-1]) \n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end-1:end])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end-1:end-1])\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string. \nWrite a function that takes a string and returns the number of characters\
    \ in the string that are uppercase letters.\nWrite a function that takes a string\
    \ and returns the number of characters in the string that are lowercase letters.\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string that are digits or letters.\nWrite a function that takes a string and\
    \ returns the number of characters in the string that are spaces.\nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are punctuation.\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are alphanumeric.\nWrite a function that takes\
    \ a string and returns the number of characters in the string that are all uppercase\
    \ letters.\nWrite a function that takes a string and returns the number of characters\
    \ in the string that are all lowercase letters.\nWrite a function that takes a\
    \ string and returns the number of characters in the string that are all digits\
    \ or letters.\nWrite a function that takes a string and returns the number of\
    \ characters in the string that are all spaces.\nWrite a function that takes a\
    \ string and returns the number of characters in the string that are all punctuation.\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string that are all alphanumeric.\nWrite a function that takes a string and\
    \ returns the number of characters in the string that are all uppercase letters.\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string that are all lowercase letters.\nWrite a function that takes a string\
    \ and returns the number of characters in the string that are all digits or letters.\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string that are all spaces.\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are all punctuation.\nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are all alphanumeric.\nWrite a function that takes a string and returns the\
    \ number of characters in the string that are all uppercase letters.\nWrite a\
    \ function that takes a string and returns the number of characters in the string\
    \ that are all lowercase letters.\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are all digits or letters.\nWrite\
    \ a function that takes a string and returns the number of characters in the string\
    \ that are all spaces.\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are all punctuation.\nWrite a function that\
    \ takes a string and returns the number of characters in the string that are all\
    \ alphanumeric.\nWrite a function that takes a ", "    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    prefix_list[2] = string\n    prefix_list[3]\
    \ = string\n    prefix_list[4] = string\n    prefix_list[5] = string\n    prefix_list[6]\
    \ = string\n    prefix_list[7] = string\n    prefix_list[8] = string\n    prefix_list[9]\
    \ = string\n    prefix_list[10] = string\n    prefix_list[11] = string\n    prefix_list[12]\
    \ = string\n    prefix_list[13] = string\n    prefix_list[14] = string\n    prefix_list[15]\
    \ = string\n    prefix_list[16] = string\n    prefix_list[17] = string\n    prefix_list[18]\
    \ = string\n    prefix_list[19] = string\n    prefix_list[20] = string\n    prefix_list[21]\
    \ = string\n    prefix_list[22] = string\n    prefix_list[23] = string\n    prefix_list[24]\
    \ = string\n    prefix_list[25] = string\n    prefix_list[26] = string\n    prefix_list[27]\
    \ = string\n    prefix_list[28] = string\n    prefix_list[29] = string\n    prefix_list[30]\
    \ = string\n    prefix_list[31] = string\n    prefix_list[32] = string\n    prefix_list[33]\
    \ = string\n    prefix_list[34] = string\n    prefix_list[35] = string\n    prefix_list[36]\
    \ = string\n    prefix_list[37] = string\n    prefix_list[38] = string\n    prefix_list[39]\
    \ = string\n    prefix_list[40] = string\n    prefix_list[41] = string\n    prefix_list[42]\
    \ = string\n    prefix_list[43] = string\n    prefix_list[44] = string\n    prefix_list[45]\
    \ = string\n    prefix_list[46] = string\n    prefix_list[47] = string\n    prefix_list[48]\
    \ = string\n    prefix_list[49] = string\n    prefix_list[50] = string\n    prefix_list[51]\
    \ = string\n    prefix_list[52] = string\n    prefix_list[53] = string\n    prefix_list[54]\
    \ = string\n    prefix_list[55] = string\n    prefix_list[56] = string\n    prefix_list[57]\
    \ = string\n    prefix_list[58] = string\n    prefix_list[59] = string\n    prefix_list[60]\
    \ = string\n    prefix_list[61] = string\n    prefix_list[62] = string\n    prefix_list[63]\
    \ = string\n    prefix_list[64] = string\n    prefix_list[65] = string\n    prefix_list[66]\
    \ = string\n    prefix_list[67] = string\n    prefix_list[68] = string\n    prefix_list[69]\
    \ = string\n    prefix_list[70] = string\n    prefix_list[71] = string\n    prefix_list[72]\
    \ = string\n    prefix_", "    prefix_list = Vector{String}()\n    prefix_list[1]\
    \ = string\n    for i = 2:length(string)\n        prefix_list[i] = prefix_list[i-1]\
    \ + string[i]\n    end\n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    prefix_counts(string::String)",
  "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end", "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for\
    \ i in 2:length(string)\n        prefix_list[i] = prefix_list[i-2] + string[i]\n\
    \    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n \
    \   prefix_count(string::String)::Int64", "    prefixes = Vector{String}()\n \
    \   for c in string\n        prefixes += all_prefixes(c) \n    end\n    prefixes\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabba\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacabbac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacabbaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacabbacac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabbacaca\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabbacacab\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacabbacacaba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacabbacacabba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacabbacacabbac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacabbacacabbaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabbacacabbacac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabbacacabbacaca\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabbacacabbacacab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_", "    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_", "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n\
    \    for i in 2:length(string)\n        prefix_list[i] = prefix_list[i-2] + string[i]\n\
    \    end\n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>", "    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    prefix_list[2] = string\n    prefix_list[3]\
    \ = string\n    prefix_list[4] = string\n    prefix_list[5] = string\n    prefix_list[6]\
    \ = string\n    prefix_list[7] = string\n    prefix_list[8] = string\n    prefix_list[9]\
    \ = string\n    prefix_list[10] = string\n    prefix_list[11] = string\n    prefix_list[12]\
    \ = string\n    prefix_list[13] = string\n    prefix_list[14] = string\n    prefix_list[15]\
    \ = string\n    prefix_list[16] = string\n    prefix_list[17] = string\n    prefix_list[18]\
    \ = string\n    prefix_list[19] = string\n    prefix_list[20] = string\n    prefix_list[21]\
    \ = string\n    prefix_list[22] = string\n    prefix_list[23] = string\n    prefix_list[24]\
    \ = string\n    prefix_list[25] = string\n    prefix_list[26] = string\n    prefix_list[27]\
    \ = string\n    prefix_list[28] = string\n    prefix_list[29] = string\n    prefix_list[30]\
    \ = string\n    prefix_list[31] = string\n    prefix_list[32] = string\n    prefix_list[33]\
    \ = string\n    prefix_list[34] = string\n    prefix_list[35] = string\n    prefix_list[36]\
    \ = string\n    prefix_list[37] = string\n    prefix_list[38] = string\n    prefix_list[39]\
    \ = string\n    prefix_list[40] = string\n    prefix_list[41] = string\n    prefix_list[42]\
    \ = string\n    prefix_list[43] = string\n    prefix_list[44] = string\n    prefix_list[45]\
    \ = string\n    prefix_list[46] = string\n    prefix_list[47] = string\n    prefix_list[48]\
    \ = string\n    prefix_list[49] = string\n    prefix_list[50] = string\n    prefix_list[51]\
    \ = string\n    prefix_list[52] = string\n    prefix_list[53] = string\n    prefix_list[54]\
    \ = string\n    prefix_list[55] = string\n    prefix_list[56] = string\n    prefix_list[57]\
    \ = string\n    prefix_list[58] = string\n    prefix_list[59] = string\n    prefix_list[60]\
    \ = string\n    prefix_list[61] = string\n    prefix_list[62] = string\n    prefix_list[63]\
    \ = string\n    prefix_list[64] = string\n    prefix_list[65] = string\n    prefix_list[66]\
    \ = string\n    prefix_list[67] = string\n    prefix_list[68] = string\n    prefix_list[69]\
    \ = string\n    prefix_list[70] = string\n    prefix_list[71] = string\n    prefix_list[72]\
    \ = string\n    prefix_", "    prefix_list = Vector{String}()\n    prefix_list[1]\
    \ = string\n    for i in 2:length(string)\n        prefix_list[i] = prefix_list[i-1]\
    \ + string[i]\n    end\n    return prefix_list\nend", "    \n    prefixes = Vector{String}()\n\
    \    \n    for i = 1:length(string)\n        prefixes += string[(i+1):end]\n \
    \   end\n    \n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaab\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccd\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccde\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdef\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbbccdefg\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbccdefgh\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdefghi\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdefghij\"\
    )\n</cell>\n<code language=juli", "    prefix_list = Vector{String}()\n    for\
    \ prefix in string.split(\"\")\n        prefix_list += prefixes_of(prefix)\n \
    \   return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>", "    prefix_list = Vector{String}()\n\
    \    for s in string\n        prefix_list += all_prefixes(s)\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.4>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abba\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbac\")\n</cell>\n<code\
    \ language=julia-1.4>\nall_prefixes(\"abbaca\")\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abbacaca\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaa\")\n\
    </cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaa\")\n</cell>\n<code\
    \ language=julia-1.4>\nall_prefixes(\"abbacacaaab\")\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abbacacaaabb\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abbacacaaabbb\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbc\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbcc\")\n</cell>\n\
    <code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbccc\")\n</cell>\n<code\
    \ language=julia-1.4>\nall_prefixes(\"abbacacaaabbbccca\")\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abbacacaaabbbcccaa\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abbacacaaabbbcccaab\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbcccaabb\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbcccaabbb\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbcccaabbbc\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abba", "    prefix_list\
    \ = Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\
    \ + [string[1:end-1]]\n    return prefix_list\nend", "    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += prefixes_of(prefix)\n\
    \    return prefix_list\n</code>\n<|/ a tags=string,algorithm,language-agnostic,prefix-tree\
    \ |>\n<| a tags=string,algorithm,language-agnostic,prefix-tree |>\nHere's a solution\
    \ in Python:\n<code>\ndef prefixes(s):\n    prefixes = []\n    for c in s:\n \
    \       prefixes.extend(prefixes_of(c))\n    return prefixes", "    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string\n    for i in 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.4>", "    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.4>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.4>",
  "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    prefix_list[2]\
    \ = string\n    for i = 3:length(string)\n        prefix_list[i] = prefix_list[i-2]\
    \ + string[i]\n    end\n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>",
  "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for i in 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    prefix_length(string::String)",
  "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.4>", "    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>",
  "    prefix_list = Vector{String}()\n    for prefix in string.split(\"\")\n    \
    \    prefix_list += prefixes_of(prefix)\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacaca\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaa\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbb\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbbcc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbccd\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdce\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdcef\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdcefg\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdcefgh\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdcefghi\")\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    prefix_list = Vector{String}()\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[1:end])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+1:end-1])\n    prefix_list = prefix_list ++ all_prefixes(string[end-1:end])\n\
    \    \n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    ab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbcc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbccc\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbbcccde\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbcccdeef\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbcccdeeff\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbcccdeeffg\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbcccdeeffgg\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbbcccdeeffggh\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbcccdeeffgghh\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbcccdeeffgghhh\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbcccdeeffgghhhh\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbcccdeeffgghhhhh\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbcccdeeffgghhhhhh\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbbcccdeeffgghhhhhhh\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbbcccdeeffgghhhhhhhh\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbbcccdeeffgghhhh", "    prefix_list\
    \ = Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list + all_prefixes(string[end-1:end]) \n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+1:end+2])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+2:end+3])\n    prefix_list = prefix_list + all_prefixes(string[end+3:end+4])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+4:end+5])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+5:end+6])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+6:end+7])\n    prefix_list = prefix_list + all_prefixes(string[end+7:end+8])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+8:end+9])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+9:end+10])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+10:end+11])\n    prefix_list = prefix_list + all_prefixes(string[end+11:end+12])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+12:end+13])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+13:end+14])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+14:end+15])\n    prefix_list = prefix_list + all_prefixes(string[end+15:end+16])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+16:end+17])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+17:end+18])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+18:end+19])\n    prefix_list = prefix_list + all_prefixes(string[end+19:end+20])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+20:end+21])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+21:end+22])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+22:end+23])\n    prefix_list = prefix_list + all_prefixes(string[end+23:end+24])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+24:end+25])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+25:end+26])\n    prefix_", "    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>", "    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i in 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>",
  "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for i = 2\
    \ to length(string)\n        prefix_list[i] = prefix_list[i-2] + string[i]\n \
    \   end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>", "    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + prefixes(string)\n    prefix_list = prefix_list\
    \ + prefixes(string.reverse)\n    return prefix_list\nend", "    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_", "    prefix_list = Vector{String}()\n    prefix_list[1]\
    \ = string\n    for i = 2:length(string)\n        prefix_list[i] = prefix_list[i-2]\
    \ + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    prefix_lengths(string::String)", "    \n    prefixes = Vector{String}()\n\
    \    \n    for c in string\n        prefixes += all_prefixes(c) \n    end\n  \
    \  \n    prefixes\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\"\
    )\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the longest prefix that is a substring of the input string. For example, all_prefixes('abc')\
    \ returns ['abc', 'ab', 'a'].", "    prefix_list = Vector{String}()\n    prefix_list\
    \ = prefix_list ++ [string[1:i] for i in 1:length(string)]\n    prefix_list =\
    \ prefix_list ++ [string[i+1::] for i in 1:length(string)]\n    prefix_list =\
    \ prefix_list ++ [string[i+1::] for i in 2:length(string)]\n    prefix_list =\
    \ prefix_list ++ [string[i+1::] for i in 3:length(string)]\n    prefix_list =\
    \ prefix_list ++ [string[i+1::] for i in 4:length(string)]\n    prefix_list =\
    \ prefix_list ++ [string[i+1::] for i in 5:length(string)]\n    prefix_list =\
    \ prefix_list ++ [string[i+1::] for i in 6:length(string)]\n    prefix_list =\
    \ prefix_list ++ [string[i+1::] for i in 7:length(string)]\n    prefix_list =\
    \ prefix_list ++ [string[i+1::] for i in 8:length(string)]\n    prefix_list =\
    \ prefix_list ++ [string[i+1::] for i in 9:length(string)]\n    prefix_list =\
    \ prefix_list ++ [string[i+1::] for i in 10:length(string)]\n    prefix_list =\
    \ prefix_list ++ [string[i+1::] for i in 11:length(string)]\n    prefix_list =\
    \ prefix_list ++ [string[i+1::] for i in 12:length(string)]\n    prefix_list =\
    \ prefix_list ++ [string[i+1::] for i in 13:length(string)]\n    prefix_list =\
    \ prefix_list ++ [string[i+1::] for i in 14:length(string)]\n    prefix_list =\
    \ prefix_list ++ [string[i+1::] for i in 15:length(string)]\n    prefix_list =\
    \ prefix_list ++ [string[i+1::] for i in 16:length(string)]\n    prefix_list =\
    \ prefix_list ++ [string[i+1::] for i in 17:length(string)]\n    prefix_list =\
    \ prefix_list ++ [string[i+1::] for i in 18:length(string)]\n    prefix_list =\
    \ prefix_list ++ [string[i+1::] for i in 19:length(string)]\n    prefix_list =\
    \ prefix_list ++ [string[i+1::] for i in 20:length(string)]\n    prefix_list =\
    \ prefix_list ++ [string[i+1::] for i in 21:length(string)]\n    prefix_list =\
    \ prefix_list ++ [string[i+1::] for i in 22:length(string)]\n    prefix_list =\
    \ prefix_list ++ [string[i+1::] for i in 23:length(string)]\n    prefix_list =\
    \ prefix_list ++ [string[i+1::] for i in 24:length(string)]\n    prefix_list =\
    \ prefix_list ++ [string[i+1::] for i in 25:length(string)]\n    prefix_list =\
    \ prefix_list ++ [string[i+1::] for i in 26:length(string)]\n    prefix_list =\
    \ prefix_list ++ [string[i+1::] for i in 27:length(string)]\n    prefix_list =\
    \ prefix_list ++ [string[i+1::] for i in 28:length(string)]\n    prefix_list =\
    \ prefix_list ++ ", "    \n    prefixes = Vector{String}()\n    \n    for i =\
    \ 1:length(string)\n        prefixes += string[i..end]\n    end\n    \n    return\
    \ prefixes\nend", "    prefix_list = Vector{String}()\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[1:end])\n    prefix_list = prefix_list ++ all_prefixes(string[end+1:end-1])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end-1:end])\n    return\
    \ prefix_list\nend\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"ab\")\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the longest prefix that is a substring of the input string. For example, all_prefixes(\"\
    ab\") should return [\"a\", \"ab\"]", "    \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    prefix_list[2] = string\n    prefix_list[3]\
    \ = string\n    prefix_list[4] = string\n    prefix_list[5] = string\n    prefix_list[6]\
    \ = string\n    prefix_list[7] = string\n    prefix_list[8] = string\n    prefix_list[9]\
    \ = string\n    prefix_list[10] = string\n    prefix_list[11] = string\n    prefix_list[12]\
    \ = string\n    prefix_list[13] = string\n    prefix_list[14] = string\n    prefix_list[15]\
    \ = string\n    prefix_list[16] = string\n    prefix_list[17] = string\n    prefix_list[18]\
    \ = string\n    prefix_list[19] = string\n    prefix_list[20] = string\n    prefix_list[21]\
    \ = string\n    prefix_list[22] = string\n    prefix_list[23] = string\n    prefix_list[24]\
    \ = string\n    prefix_list[25] = string\n    prefix_list[26] = string\n    prefix_list[27]\
    \ = string\n    prefix_list[28] = string\n    prefix_list[29] = string\n    prefix_list[30]\
    \ = string\n    prefix_list[31] = string\n    prefix_list[32] = string\n    prefix_list[33]\
    \ = string\n    prefix_list[34] = string\n    prefix_list[35] = string\n    prefix_list[36]\
    \ = string\n    prefix_list[37] = string\n    prefix_list[38] = string\n    prefix_list[39]\
    \ = string\n    prefix_list[40] = string\n    prefix_list[41] = string\n    prefix_list[42]\
    \ = string\n    prefix_list[43] = string\n    prefix_list[44] = string\n    prefix_list[45]\
    \ = string\n    prefix_list[46] = string\n    prefix_list[47] = string\n    prefix_list[48]\
    \ = string\n    prefix_list[49] = string\n    prefix_list[50] = string\n    prefix_list[51]\
    \ = string\n    prefix_list[52] = string\n    prefix_list[53] = string\n    prefix_list[54]\
    \ = string\n    prefix_list[55] = string\n    prefix_list[56] = string\n    prefix_list[57]\
    \ = string\n    prefix_list[58] = string\n    prefix_list[59] = string\n    prefix_list[60]\
    \ = string\n    prefix_list[61] = string\n    prefix_list[62] = string\n    prefix_list[63]\
    \ = string\n    prefix_list[64] = string\n    prefix_list[65] = string\n    prefix_list[66]\
    \ = string\n    prefix_list[67] = string\n    prefix_list[68] = string\n    prefix_list[69]\
    \ = string\n    prefix_list[70] = string\n    prefix_list[71] = string\n    prefix_list[72]\
    \ = string\n", "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n\
    \    for i = 2:length(string)\n        prefix_list[i] = prefix_list[i-1] + string[i]\n\
    \    end\n    return prefix_list\nend", "    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    prefix_list = Vector{String}()\n    prefix_list[1]\
    \ = string\n    for i = 2 to length(string)\n        prefix_list[i] = prefix_list[i-2]\
    \ + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    prefix_sum(string::String)", "    prefix_list = Vector{String}()\n\
    \    for c in string\n        prefix_list += all_prefixes(c)\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the longest prefix\
    \ that is a substring of the original string. For example, all_prefixes(\"abc\"\
    ) returns [\"a\", \"ab\", \"abc\"] and all_prefixes(\"ab\") returns [\"ab\"].\
    \ Make sure your function works for all cases.", "    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes(string[1:end-1]) + [string[1:end-1]]\n\
    \    return prefix_list\nend\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    ab\")\n</cell>\n<text>\nExercise 4\nWrite a function that takes a string and returns\
    \ the longest prefix that is a substring of the input string. For example, all_prefixes(\"\
    ab\") should return [\"a\", \"ab\"]. Assume that all_prefixes is defined above.",
  "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of times\
    \ each character appears in the string. \nFor example, for the string \"abc\"\
    \ the function should return {\"a\" => 1, \"b\" => 1, \"c\" => 2}.", "    \n \
    \   prefix_list = Vector{String}()\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string[1:end])\n    return\
    \ prefix_list\nend", "    prefix_list = Vector{String}()\n    for prefix in string.split(\"\
    \")\n        prefix_list += prefixes_of(prefix)\n    return prefix_list\nend\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the longest prefix that\
    \ is a substring of the input string. For example, all_prefixes(\"abcabc\") should\
    \ return \"abc\"."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
