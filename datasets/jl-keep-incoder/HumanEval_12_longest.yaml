name: HumanEval_12_longest
language: julia
prompt: "\"\"\" Out of list of strings, return the longest one. Return the first one\
  \ in case of multiple\n    strings of the same length. Return None in case the input\
  \ list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n\
  \    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
  \ Nothing} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
  \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
  x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
completions: ["    if length(strings) == 0 \n        error(\"Empty list\") \n    else\
    \ \n        max_length = maximum([length(s) for s in strings]) \n        for s\
    \ in strings \n            if length(s) == max_length \n                return\
    \ s \n            end \n        end \n    end \nend \n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the longest string in a list of strings. Return\
    \ None in case the list is empty.", "    if length(strings) == 0\n        error(\"\
    Input is empty\")\n    end\n    max_length = maximum([length(s) for s in strings])\n\
    \    longest_string = nothing\n    for s in strings\n        if length(s) == max_length\n\
    \            if longest_string == nothing\n                longest_string = s\n\
    \            else\n                if length(longest_string) > length(s)\n   \
    \                 longest_string = s\n                end\n            end\n \
    \       else\n            if longest_string == nothing\n                longest_string\
    \ = s\n            else\n                if length(longest_string) < length(s)\n\
    \                    longest_string = s\n                end\n            end\n\
    \        end\n    end\n    return longest_string\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a string and returns the number of times it appears\
    \ in the string.\n    >>> count_occurrences(\"\")\n    0\n    >>> count_occurrences(\"\
    a\")\n    1\n    >>> count_occurrences(\"ab\")\n    2\n    >>> count_occurrences(\"\
    aba\")\n    3\n    >>> count_occurrences(\"aba\")\n    3\n    >>> count_occurrences(\"\
    aba\")\n    3\n    >>> count_occurrences(\"aba\")\n    3\n    >>> count_occurrences(\"\
    aba\")\n    3\n    >>> count_occurrences(\"aba\")\n    3\n    >>> count_occurrences(\"\
    aba\")\n    3\n    >>> count_occurrences(\"aba\")\n    3\n    >>> count_occurrences(\"\
    aba\")\n    3\n    >>> count_occurrences(\"aba\")\n    3\n    >>> count_occurrences(\"\
    aba\")\n    3\n    >>> count_occurrences(\"aba\")\n    3\n    >>> count_occurrences(\"\
    aba\")\n    3\n    >>> count_occurrences(\"aba\")\n    3\n    >>> count_occurrences(\"\
    aba\")\n    3\n    >>> count_occurrences(\"aba\")\n    3\n    >>> count_occurrences(\"\
    aba\")\n    3\n    >>> count_occurrences(\"aba\")\n    3\n    >>> count_occurrences(\"\
    aba\")\n    3\n    >>> count_occurrences(\"aba\")\n    3\n    >>> count_occurrences(\"\
    aba\")\n    3\n    >>> count_occurrences(\"aba\")\n    3\n    >>> count_occurrences(\"\
    aba\")\n    3\n    >>> count_occurrences(\"aba\")\n    3\n    >>> count_occurrences(\"\
    aba\")\n    3\n    >>> count_occurrences(\"aba\")\n    3\n    >>> count_occurrences(\"\
    aba\")\n    3\n    >>> count_occurrences(\"aba\")\n    3\n    >>> count_occurrences(\"\
    aba\")\n    3\n    >>> count_occurrences(\"aba\")\n    3\n    >>> count_", " \
    \   longest = Nothing\n    for s in strings\n        if longest == Nothing ||\
    \ length(longest) > length(s)\n            longest = s\n        end\n    end\n\
    \    longest\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the longest string in a list of strings.", "    longest = strings[end]\n   \
    \ for string in strings\n        if string.len > longest.len\n            longest\
    \ = string\n        end\n    end\n    longest\nend\n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the longest string in a list of strings. If the list is empty,\
    \ return None.\n    >>> longest([])\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n\
    \    'ccc'", "    if length(strings) == 0 \n        return None \n    else \n\
    \        return max(strings, key=length) \nend\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of strings and returns a vector of strings where each string\
    \ in the original vector is replaced by the string with the longest common prefix.\
    \ For example, if the input vector is [\"a\", \"bb\", \"ccc\"], then the output\
    \ vector should be [\"a\", \"a\", \"a\"].", "    if length(strings) == 0 \n  \
    \      return None \n    else \n        return max(strings, key=length) \nend\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the longest string in a list\
    \ of strings. Use this function to find the longest string in our dataset.", " \
    \   longest = strings[end-1]\n    for s in strings[2:end]\n        if length(longest)\
    \ < length(s)\n            longest = s\n        end\n    end\n    longest\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of strings and\
    \ returns a vector of the lengths of the strings in descending order.", "    longest\
    \ = strings[1]\n    for s in strings[2:end]\n        if length(longest) < length(s)\n\
    \            longest = s\n        end\n    end\n    return longest\nend", "  \
    \  if length(strings) == 0 \n        error(\"Input list is empty\") \n    else\
    \ \n        longest = strings[length(strings)-1] \n        for i in length(strings)-1\
    \ \n            if strings[i] != longest \n                longest = strings[i]\
    \ \n            end \n        end \n        return longest \n    end \nend \n\
    </cell>\n<text>\nExercise 2: Write a function that takes a string and returns\
    \ the number of occurrences of the character 'a' in that string.\n    >>> count_a(\"\
    abba\")\n    2\n    >>> count_a(\"abbaa\")\n    1\n    >>> count_a(\"abbaaa\"\
    )\n    0\n    >>> count_a(\"abbaaaa\")\n    1\n    >>> count_a(\"abbaaaaa\")\n\
    \    1\n    >>> count_a(\"abbaaaaaa\")\n    1\n    >>> count_a(\"abbaaaaaaa\"\
    )\n    0\n    >>> count_a(\"abbaaaaaaaa\")\n    0\n    >>> count_a(\"abbaaaaaaaab\"\
    )\n    1\n    >>> count_a(\"abbaaaaaaaabb\")\n    1\n    >>> count_a(\"abbaaaaaaaabbb\"\
    )\n    1\n    >>> count_a(\"abbaaaaaaaabbbb\")\n    0\n    >>> count_a(\"abbaaaaaaaabbbbb\"\
    )\n    0\n    >>> count_a(\"abbaaaaaaaabbbbba\")\n    1\n    >>> count_a(\"abbaaaaaaaabbbbbaa\"\
    )\n    1\n    >>> count_a(\"abbaaaaaaaabbbbbaaa\")\n    1\n    >>> count_a(\"\
    abbaaaaaaaabbbbbaaaa\")\n    1\n    >>> count_a(\"abbaaaaaaaabbbbbaaaaa\")\n \
    \   1\n    >>> count_a(\"abbaaaaaaaabbbbbaaaaaa\")\n    1\n    >>> count_a(\"\
    abbaaaaaaaabbbbbaaaaaaa\")\n    1\n    >>> count_a(\"abbaaaaaaaabbbbbaaaaaaaa\"\
    )\n    1\n    >>> count_a(\"abbaaaaaaaabbbbbaaaaaaaab\")\n    1\n    >>> count_a(\"\
    abbaaaaaaaabbbbbaaaaaaaabb\")\n    1\n    >>> count_a(\"abbaaaaaaaabbbbbaaaaaaaabbb\"\
    )\n    1\n    >>> count_a(\"abbaaaaaaaabbbbbaaaaaaaabbbb\")\n    1\n    >>> count_a(\"\
    abbaaaaaaaabbbbbaaaaaaaabbbbb\")\n    1\n    >>> count_a(\"abbaaaaaaaabbbbbaaaaaaaabbbbba\"\
    )\n    1\n    >>> count_a(\"abbaaaaaaaabbbb", "    longest = Nothing\n    for\
    \ s in strings\n        if longest == Nothing || length(longest) < length(s)\n\
    \            longest = s\n        end\n    end\n    return longest\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't work if you have multiple strings of\
    \ the same length. Try it with `longest([\"aa\", \"bb\", \"ccc\"])`\n<|/ c |>\n\
    <| c |>\nThanks for pointing that out. I've fixed the code accordingly.\n<|/ c\
    \ |>\n<| a dscore=2 |>\n<code>", "    longest = strings[lengths(strings)==maximum(lengths(strings))]\n\
    \    if isempty(longest)\n        error(\"No string in list has same length\"\
    )\n    end\n    return longest\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\nI came up with this solution:\n<code>", "    if length(strings) == 0 return\
    \ None \n    max_length = length(strings)\n    longest_string = strings[max_length]\n\
    \    for s in strings[2:end]\n        if length(s) < max_length\n            max_length\
    \ = length(s)\n            longest_string = s\n        end\n    end\n    return\
    \ longest_string\nend", "    longest = None \n    for s in strings \n        if\
    \ longest == None \n            longest = s \n        else if length(longest)\
    \ < length(s) \n            longest = s \n        else \n            longest =\
    \ None \n    end\n    return longest \nend\n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\"])\n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"ffff\"])\n</cell>\n<code\
    \ language=julia-1.3>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"\
    ffff\", \"ggggg\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"a\", \"bb\"\
    , \"ccc\", \"dddd\", \"eeeee\", \"ffff\", \"ggggg\", \"hhhhh\"])\n</cell>\n<code\
    \ language=julia-1.3>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"\
    ffff\", \"ggggg\", \"hhhhh\", \"iiiii\"])\n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"ffff\", \"ggggg\", \"\
    hhhhh\", \"iiiii\", \"jjjjj\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"ffff\", \"ggggg\", \"hhhhh\", \"\
    iiiii\", \"jjjjj\", \"kkkkk\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"ffff\", \"ggggg\", \"hhhhh\", \"\
    iiiii\", \"jjjjj\", \"kkkkk\", \"lllll\"])\n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"ffff\", \"ggggg\", \"\
    hhhhh\", \"iiiii\", \"jjjjj\", \"kkkkk\", \"lllll\", \"mmmmm\"])\n</cell>\n<code\
    \ language=julia-1.3>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"\
    ffff\", \"ggggg\", \"hhhhh\", \"iiiii\", \"jjjjj\", \"kkkkk\", \"lllll\", \"mmmmm\"\
    , \"nnnnn\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"a\", \"bb\", \"\
    ccc\", \"dddd\", \"eeeee\", \"ffff\", \"ggggg\", \"hhhhh\", \"ii", "    if length(strings)\
    \ == 0 \n        error(\"Input list cannot be empty\")\n    end\n    max_length\
    \ = length(strings)\n    longest_string = strings[max_length]\n    for string\
    \ in strings\n        if length(string) == max_length\n            longest_string\
    \ = string\n        else\n            break\n        end\n    end\n    return\
    \ longest_string\nend\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    bb\", \"ccc\"])\n</cell>\n<text>\nExercise\nWrite a function that returns the\
    \ longest string in a list of strings. If the input list is empty, return an empty\
    \ string. \nWrite a function that returns the longest string in a list of strings.\
    \ If the input list is empty, return an empty string. \nWrite a function that\
    \ returns the longest string in a list of strings. If the input list is empty,\
    \ return an empty string. \nWrite a function that returns the longest string in\
    \ a list of strings. If the input list is empty, return an empty string. \nWrite\
    \ a function that returns the longest string in a list of strings. If the input\
    \ list is empty, return an empty string. \nWrite a function that returns the longest\
    \ string in a list of strings. If the input list is empty, return an empty string.\
    \ \nWrite a function that returns the longest string in a list of strings. If\
    \ the input list is empty, return an empty string. \nWrite a function that returns\
    \ the longest string in a list of strings. If the input list is empty, return\
    \ an empty string. \nWrite a function that returns the longest string in a list\
    \ of strings. If the input list is empty, return an empty string. \nWrite a function\
    \ that returns the longest string in a list of strings. If the input list is empty,\
    \ return an empty string. \nWrite a function that returns the longest string in\
    \ a list of strings. If the input list is empty, return an empty string. \nWrite\
    \ a function that returns the longest string in a list of strings. If the input\
    \ list is empty, return an empty string. \nWrite a function that returns the longest\
    \ string in a list of strings. If the input list is empty, return an empty string.\
    \ \nWrite a function that returns the longest string in a list of strings. If\
    \ the input list is empty, return an empty string. \nWrite a function that returns\
    \ the longest string in a list of strings. If the input list is empty, return\
    \ an empty string. \nWrite a function that returns the longest string in a list\
    \ of strings. If the input list is empty, return an empty string. \nWrite a function\
    \ that returns the longest string in a list of strings. If the input list is empty,\
    \ return an empty string. \nWrite a function that returns the longest string in\
    \ a list of strings. If the input list is empty, return an empty string. \nWrite\
    \ a function that returns the longest string in a list of strings. If the input\
    \ list is empty, return an empty string. \nWrite a function that returns the longest\
    \ string in a list of strings. If the input list is empty, return an empty string.\
    \ \nWrite a function that returns the longest string in a list of strings. If\
    \ the input list is empty, return an empty string. \n", "    longest = strings[1]\n\
    \    for s in strings[2:end]\n        if length(longest) < length(s) \n      \
    \      longest = s\n        end\n    end\n    return longest\nend\n</cell>\n<text>\n\
    Exercise 9\nWrite a function that takes a vector of strings and returns a vector\
    \ of booleans indicating whether each string is a palindrome or not.", "    if\
    \ length(strings) == 0 \n        return None \n    else \n        longest_len\
    \ = length(strings) \n        longest_str = strings[longest_len] \n        for\
    \ str in strings[2:] \n            if length(str) == longest_len \n          \
    \      longest_str = str \n            end \n        end \n        return longest_str\
    \ \n    end \nend \n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\"\
    , \"ccc\"])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of strings and returns the longest string in that vector. Return nothing in\
    \ case the vector is empty.\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    'ccc'",
  "    longest = Nothing\n    for s in strings\n        if longest == Nothing || length(longest)\
    \ > length(s) \n            longest = s\n        end\n    end\n    return longest\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nI like using reduce for this\
    \ kind of thing:\n<code>", "    longest = Nothing\n    for s in strings\n    \
    \    if longest == Nothing || length(longest) < length(s)\n            longest\
    \ = s\n        end\n    end\n    longest\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of strings and returns a vector of the same length\
    \ with all strings replaced by '?'\n    >>> replace_all(['hello', 'world'])\n\
    \    ['hello', 'world']\n    >>> replace_all(['hello', 'world', 'hello'])\n  \
    \  ['hello', 'world', '?']\n    >>> replace_all(['hello', 'world', 'hello', 'world'])\n\
    \    ['hello', 'world', '?', '?']\n    >>> replace_all(['hello', 'world', 'hello',\
    \ 'world', 'hello'])\n    ['hello', 'world', '?', '?', '?']\n    >>> replace_all([])\n\
    \    []\n    >>> replace_all(['hello', 'world', 'hello', 'world', 'hello', 'world'])\n\
    \    ['hello', 'world', '?', '?', '?', '?']\n    \"\"\"", "    longest = strings[end-1]\n\
    \    for s in strings[2:end]\n        if length(longest) < length(s)\n       \
    \     longest = s\n        end\n    end\n    return longest\nend", "    if length(strings)\
    \ == 0 \n        return None \n    else \n        return max(strings, key=length)\
    \ \nend\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the longest string\
    \ in a list of strings.", "    longest = strings[end]\n    for s in strings[2:end]\n\
    \        if length(longest) > length(s)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n\
    <code>", "    longest = strings[end-1]\n    for s in strings[2:end]\n        if\
    \ length(longest) < length(s)\n            longest = s\n        end\n    end\n\
    \    return longest\nend", "    longest = Nothing\n    for s in strings\n    \
    \    if longest == Nothing || length(longest) > length(s)\n            longest\
    \ = s\n        end\n    end\n    return longest\nend\n</code>\n<|/ a |>\n<| a\
    \ tags=julia |>\nA simple solution is to use findfirst:\n<code>\njulia> findfirst(x\
    \ -> length(x) > 1, [\"a\", \"b\", \"c\"])\n\"a\"\n</code>\n<|/ a dscore=2 |>\n\
    <| a dscore=2 |>\nI like to use filter for this:\n<code>\njulia> filter(x -> length(x)\
    \ > 1, [\"a\", \"b\", \"c\"])\n3-element Array{String,1}:\n \"a\"\n \"b\"\n \"\
    c\"\n</code>\n<|/ a tags=julia |>\n<| a dscore=1 |>\nI like to use filter for\
    \ this:\n<code>\njulia> filter(x -> length(x) > 1, [\"a\", \"b\", \"c\"])\n3-element\
    \ Array{String,1}:\n \"a\"\n \"b\"\n \"c\"\n</code>\n<|/ a tags=julia |>\n<| a\
    \ tags=julia |>\nI like to use filter for this:\n<code>\njulia> filter(x -> length(x)\
    \ > 1, [\"a\", \"b\", \"c\"])\n3-element Array{String,1}:\n \"a\"\n \"b\"\n \"\
    c\"\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nI like to use filter for this:\n\
    <code>\njulia> filter(x -> length(x) > 1, [\"a\", \"b\", \"c\"])\n3-element Array{String,1}:\n\
    \ \"a\"\n \"b\"\n \"c\"\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\nI like\
    \ to use filter for this:\n<code>\njulia> filter(x -> length(x) > 1, [\"a\", \"\
    b\", \"c\"])\n3-element Array{String,1}:\n \"a\"\n \"b\"\n \"c\"\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=0 |>\n<code>\njulia> filter(x -> length(x) > 1, [\"\
    a\", \"b\", \"c\"])\n3-element Array{String,1}:\n \"a\"\n \"b\"\n \"c\"\n</code>\n\
    <|/ a tags=julia |>\n<| a dscore=0 |>\n<code>\njulia> filter(x -> length(x) >\
    \ 1, [\"a\", \"b\", \"c\"])\n3-element Array{String,1}:\n \"a\"\n \"b\"\n \"c\"\
    \n</code>\n<|/ a tags=julia |>\n<| a tags=julia ", "    longest = Nothing\n  \
    \  for s in strings\n        if longest == Nothing || length(longest) > length(s)\n\
    \            longest = s\n        end\n    end\n    longest\nend\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"ddd\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\",\
    \ \"fff\", \"ggg\", \"hhh\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\"])\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"ddd\",\
    \ \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\", \"jjj\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\",\
    \ \"iii\", \"jjj\", \"kkk\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\", \"\
    jjj\", \"kkk\", \"lll\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\", \"jjj\"\
    , \"kkk\", \"lll\", \"mmm\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\", \"\
    jjj\", \"kkk\", \"lll\", \"mmm\", \"nnn\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\",\
    \ \"iii\", \"jjj\", \"kkk\", \"lll\", \"mmm\", \"nnn\", \"ooo\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\"\
    , \"ggg\", \"hh", "    if length(strings) == 0 \n        error(\"Input list is\
    \ empty\")\n    end\n    max_length = length(strings)\n    longest_string = strings[max_length]\n\
    \    for string in strings\n        if length(string) == max_length\n        \
    \    longest_string = string\n        else\n            break\n        end\n \
    \   end\n    return longest_string\nend\n</code>\n<|/ a tags=julia,string |>\n\
    <| a tags=julia,string |>\n<code>", "    longest = strings[end-1]\n    for s in\
    \ strings[2:end]\n        if length(longest) < length(s) \n            longest\
    \ = s\n        end\n    end\n    return longest\nend\n</code>\n<|/ a tags=julia\
    \ |>\n<| a tags=julia |>\n<code>", "    if length(strings) == 0 \n        error(\"\
    Input list is empty\") \n    else \n        longest = strings[length(strings)-1]\
    \ \n        for string in strings \n            if string.length > longest.length\
    \ \n                longest = string \n        endfor \n        return longest\
    \ \nend", "    longest = Nothing\n    for s in strings\n        if longest ==\
    \ Nothing || length(longest) < length(s)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeeeee\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeeee\", \"ffff\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeeee\",\
    \ \"ffff\", \"gggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg",
  "    longest = Nothing\n    for s in strings\n        if longest == Nothing || length(longest)\
    \ > length(s) \n            longest = s\n        end\n    end\n    return longest\n\
    end", "    longest = Nothing\n    for s in strings\n        if longest == Nothing\
    \ || length(longest) < length(s)\n            longest = s\n        end\n    end\n\
    \    return longest\nend", "    longest = strings[lengths(strings)==maximum(lengths(strings))]\n\
    \    if isempty(longest)\n        error(\"No string in list has same length\"\
    )\n    end\n    return longest\nend\n</cell>\n<text>\nExercise 5\nWrite a function\
    \ that takes a string and returns a string with the first letter capitalized.",
  "    longest = strings[1]\n    for s in strings[2:end]\n        if length(longest)\
    \ < length(s)\n            longest = s\n        end\n    end\n    return longest\n\
    end", "    longest = strings[end-1]\n    for s in strings[2:end]\n        if length(longest)\
    \ < length(s) \n            longest = s\n        end\n    end\n    return longest\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>", "    if length(strings) ==\
    \ 0\n        error(\"Input list is empty\")\n    end\n    max_length = maximum(strings)\n\
    \    max_length == length(strings) ? return strings[end] : longest(filter(x ->\
    \ length(x) == max_length, strings))\nend\n</code>\n<|/ a tags=string,julia,list\
    \ |>\n<| c |>\nThis does not provide an answer to the question. To critique or\
    \ request clarification from an author, leave a comment below their post. - [From\
    \ Review](/review/low-quality-posts/26817498)\n<|/ c |>\n<| c |>\nI believe it\
    \ does answer the question. `longest` returns the longest string in the input\
    \ list. `longest([\"a\", \"bb\", \"ccc\"])` returns `\"ccc\"`\n<|/ c |>\n<| c\
    \ |>\nThe question was \"How to find the longest string in a list?\" not \"How\
    \ to find the longest string in a string?\" The answer is the same.\n<|/ c |>\n\
    <| c |>\nThe question was \"How to find the longest string in a list?\" not \"\
    How to find the longest string in a string?\" The answer is the same.\n<|/ c |>\n\
    <| c |>\nThe question was \"How to find the longest string in a list?\" not \"\
    How to find the longest string in a string?\" The answer is the same.\n<|/ c |>\n\
    <| a dscore=2 |>\nThe shortest way is to use maximum:\n<code>\njulia> maximum([1,2,3])\n\
    3\n</code>\n<|/ a tags=string,julia,list |>\n<| a dscore=2 |>\n<code>", "    longest\
    \ = None \n    for s in strings \n        if longest == None or length(longest)\
    \ > length(s) \n            longest = s \n        end\n    end\n    return longest\n\
    end\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"\
    , \"dddd\", \"eeee\", \"ffff\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"\
    ffff\", \"gggg\", \"hhhh\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"\
    ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"\
    , \"iiii\", \"jjjj\", \"kkkk\", \"llll\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"\
    , \"iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"\
    , \"iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\", \"nnnn\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"\
    ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\",\
    \ \"nnnn\", \"ooo\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"\
    jjjj\", \"kkkk\", \"llll\", \"mmmm\", \"nnnn\", \"ooo\", \"pppp\"])\n</cell>\n\
    <code language=julia-", "    if length(strings) == 0 \n        error(\"Input list\
    \ is empty\") \n    else \n        longest = length(strings) \n        for s in\
    \ strings \n            if length(s) > longest \n                longest = length(s)\
    \ \n            end \n        end \n        return longest == 1 ? strings[1] :\
    \ nothing\n    end\nend\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    bb\", \"ccc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of strings and returns a vector of booleans indicating whether each string starts\
    \ with \"a\".", "    longest = strings[end]\n    for s in strings[2:end]\n   \
    \     if length(longest) > length(s)\n            longest = s\n        end\n \
    \   end\n    return longest\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n\
    <code>", "    if length(strings) == 0 \n        error(\"Empty input list\")\n\
    \    end\n    max_length = maximum([length(s) for s in strings])\n    longest_string\
    \ = nothing\n    for s in strings \n        if length(s) == max_length \n    \
    \        longest_string = s\n        end\n    end\n    return longest_string\n\
    end\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of strings and returns\
    \ a vector of strings with the first letter of each string capitalized.", "  \
    \  longest = strings[lengths(strings)==maximum(lengths(strings))]\n    if isempty(longest)\n\
    \        return nothing\n    else\n        return longest[1]\n    end\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\nI like using filter for these kinds of things:\n\
    <code>", "    if length(strings) == 0 return None \n    longest_string <- strings[1]\
    \ \n    for string in strings[2:length(strings)] \n        if length(longest_string)\
    \ < length(string) \n            longest_string <- string \n        end \n   \
    \ end \n    return longest_string \nend ", "    if length(strings) == 0 return\
    \ None \n    else return strings[length(strings)-1]\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of strings and returns the longest string\
    \ in that vector. Return None in case the vector is empty.\n>>> longest(['a',\
    \ 'b', 'c'])", "    if length(strings) == 0 \n        return None \n    else \n\
    \        return max(strings, key=length) \nend\n</cell>\n<text>\nExercise 4\n\
    Write a function that takes a vector of strings and returns a vector of strings\
    \ where each string is the concatenation of all the strings in the original vector.\
    \ For example, if the input vector is [\"a\", \"b\", \"c\"], the output vector\
    \ should be [\"a\", \"ab\", \"abc\"]. Write a function that takes two vectors\
    \ of strings and returns a vector of strings where each string is the concatenation\
    \ of all the strings in the original vectors. For example, if the input vectors\
    \ are [\"a\", \"b\", \"c\"] and [\"d\", \"e\", \"f\"], the output vector should\
    \ be [\"ad\", \"ade\", \"adb\", \"adc\", \"ade\", \"adf\", \"bde\", \"bdf\", \"\
    bde\", \"bdf\", \"cd\", \"cde\", \"cdf\", \"cde\", \"cdf\", \"def\"]. Write a\
    \ function that takes three vectors of strings and returns a vector of strings\
    \ where each string is the concatenation of all the strings in the original vectors.\
    \ For example, if the input vectors are [\"a\", \"b\", \"c\"] and [\"d\", \"e\"\
    , \"f\"], the output vector should be [\"ad\", \"ade\", \"adb\", \"adc\", \"ade\"\
    , \"adf\", \"bde\", \"bdf\", \"bde\", \"bdf\", \"cd\", \"cde\", \"cdf\", \"cde\"\
    , \"cdf\", \"def\"]. Write a function that takes four vectors of strings and returns\
    \ a vector of strings where each string is the concatenation of all the strings\
    \ in the original vectors. For example, if the input vectors are [\"a\", \"b\"\
    , \"c\"] and [\"d\", \"e\", \"f\"], the output vector should be [\"ad\", \"ade\"\
    , \"adb\", \"adc\", \"ade\", \"adf\", \"bde\", \"bdf\", \"bde\", \"bdf\", \"cd\"\
    , \"cde\", \"cdf\", \"cde\", \"cdf\", \"def\"]. Write a function that takes five\
    \ vectors of strings and returns a vector of strings where each string is the\
    \ concatenation of all the strings in the original vectors. For example, if the\
    \ input vectors are [\"a\", \"b\", \"c\"] and [\"d\", \"e\", \"f\"], the output\
    \ vector should be [\"ad\", \"ade\", \"adb\", \"adc\", \"ade\", \"adf\", \"bde\"\
    , \"bdf\", \"bde\", \"bdf\", \"cd\", \"cde\", \"cdf\", \"cde\", \"cdf\", \"def\"\
    ]. Write a function that takes six vectors of strings and returns a vector of\
    \ strings where each string is the concatenation of all the strings in the original\
    \ vectors. For example, if the input vectors are [\"a\", \"b\", \"c\"] and [\"\
    d\", \"e\", \"f\"], the output vector should be [\"ad\", \"ade\", \"adb\", \"\
    adc\", \"ade\", \"adf\", \"bde\", \"bdf\", \"bde\", \"bdf\", \"cd\", \"cde\",\
    \ \"cdf\", \"cde\", \"cdf\", \"def\"]. Write a function that takes seven ", " \
    \   if length(strings)==0 \n        return None \n    else \n        return maximum(strings)\
    \ \nend\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    ])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the longest string\
    \ in an array of strings. Return None in case the input list is empty.", "   \
    \ longest = Nothing\n    for s in strings\n        if longest == Nothing || length(longest)\
    \ < length(s)\n            longest = s\n        end\n    end\n    return longest\n\
    end\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of strings and returns\
    \ a vector of strings with the longest strings removed.", "    longest = strings[lengths(strings)==maximum(lengths(strings))]\n\
    \    if isempty(longest)\n        error(\"No string in list has same length\"\
    )\n    end\n    return longest\nend\n</code>\n<|/ a tags=julia |>\n<| a dscore=2\
    \ |>\nI like using filter for this:\n<code>\njulia> function longest(L)\n    \
    \       return filter(x -> length(x)==maximum(length(x)), L)\n       end\nlongest\
    \ (generic function with 1 method)", "    longest = strings[end-1]\n    for s\
    \ in strings[2:end]\n        if length(longest) < length(s)\n            longest\
    \ = s\n        end\n    end\n    return longest\nend\n</code>\n<|/ a tags=julia\
    \ |>\n<| a tags=julia |>\nA simple and efficient solution:\n<code>", "    longest\
    \ = strings[end]\n    for s in strings[2:end]\n        if length(longest) < length(s)\
    \ \n            longest = s\n        end\n    end\n    return longest\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>", "    if length(strings) == 0\n \
    \       error(\"Input list is empty\")\n    end\n    max_length = length(strings)\n\
    \    longest_string = strings[max_length]\n    for string in strings\n       \
    \ if length(string) == max_length\n            longest_string = string\n     \
    \   else\n            break\n        end\n    end\n    return longest_string\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of strings\
    \ and returns a vector of strings with the same length. \nThe function should\
    \ return nothing in case the input vector is empty.\nThe function should return\
    \ nothing in case the input vector is empty.\nThe function should return nothing\
    \ in case the input vector is empty.\nThe function should return nothing in case\
    \ the input vector is empty.\nThe function should return nothing in case the input\
    \ vector is empty.\nThe function should return nothing in case the input vector\
    \ is empty.\nThe function should return nothing in case the input vector is empty.\n\
    The function should return nothing in case the input vector is empty.\nThe function\
    \ should return nothing in case the input vector is empty.\nThe function should\
    \ return nothing in case the input vector is empty.\nThe function should return\
    \ nothing in case the input vector is empty.\nThe function should return nothing\
    \ in case the input vector is empty.\nThe function should return nothing in case\
    \ the input vector is empty.\nThe function should return nothing in case the input\
    \ vector is empty.\nThe function should return nothing in case the input vector\
    \ is empty.\nThe function should return nothing in case the input vector is empty.\n\
    The function should return nothing in case the input vector is empty.\nThe function\
    \ should return nothing in case the input vector is empty.\nThe function should\
    \ return nothing in case the input vector is empty.\nThe function should return\
    \ nothing in case the input vector is empty.\nThe function should return nothing\
    \ in case the input vector is empty.\nThe function should return nothing in case\
    \ the input vector is empty.\nThe function should return nothing in case the input\
    \ vector is empty.\nThe function should return nothing in case the input vector\
    \ is empty.\nThe function should return nothing in case the input vector is empty.\n\
    The function should return nothing in case the input vector is empty.\nThe function\
    \ should return nothing in case the input vector is empty.\nThe function should\
    \ return nothing in case the input vector is empty.\nThe function should return\
    \ nothing in case the input vector is empty.\nThe function should return nothing\
    \ in case the input vector is empty.\nThe function should return nothing in case\
    \ the input vector is empty.\nThe function should return nothing in case the input\
    \ vector is empty.\nThe function should return nothing in case the input vector\
    \ is empty.\nThe function should return nothing in case the input vector is empty.\n\
    The function should return nothing in case the input vector is empty.\nThe function\
    \ should return nothing in case the input vector is empty.\nThe function should\
    \ return nothing in case the input vector is empty.\nThe function should return\
    \ nothing in case the input vector is empty.\nThe function should return nothing\
    \ in case ", "    if length(strings) == 0\n        error(\"Input list is empty\"\
    )\n    end\n    max_length = maximum([length(string) for string in strings])\n\
    \    longest_string = nothing\n    for string in strings\n        if length(string)\
    \ == max_length\n            longest_string = string\n        else\n         \
    \   break\n        end\n    end\n    if longest_string == nothing\n        error(\"\
    All strings have the same length\")\n    end\n    return longest_string\nend\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=julia |>\n<code>", "    if length(strings)\
    \ == 0 \n        error(\"Input list is empty\") \n    else \n        longest =\
    \ strings[length(strings)-1] \n        for s in strings \n            if length(s)\
    \ == length(longest) \n                longest = s \n            end \n      \
    \  end \n        return longest \n    end \nend \n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"\
    ffff\", \"gggg\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\"\
    , \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"\
    ffff\", \"gggg\", \"hhhh\", \"iiii\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"\
    , \"jjjj\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"\
    , \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\"\
    , \"mmmm\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"\
    , \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\"\
    , \"llll\", \"mmmm\", \"nnnn\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"\
    , \"jjjj\", \"kkkk\", \"llll\", \"mmmm\", \"nnnn\", \"oooo\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"\
    ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk", "    if length(strings)\
    \ == 0 \n        return None \n    else \n        return max(strings) \nend ",
  "    longest = Nothing\n    for s in strings\n        if longest == Nothing || length(longest)\
    \ < length(s)\n            longest = s\n        end\n    end\n    return longest\n\
    end\n</code>\n<|/ a |>\n<| a tags=julia,string |>\n<code>", "    longest = strings[end-1]\n\
    \    for s in strings[2:end]\n        if length(longest) < length(s) \n      \
    \      longest = s\n        end\n    end\n    return longest\nend\n</code>\n<|/\
    \ a dscore=2 |>\n<| c |>\nThis doesn't work if you have multiple strings of the\
    \ same length. Try `longest(['a', 'bb', 'ccc'])`\n<|/ c |>\n<| c |>\nI didn't\
    \ see that requirement in the question. I've updated the answer to handle that\
    \ case.\n<|/ c |>\n<| a dscore=2 |>\nI came up with this solution:\n<code>", " \
    \   longest = strings[end]\n    for s in strings[2:end]\n        if length(longest)\
    \ > length(s) \n            longest = s\n        end\n    end\n    return longest\n\
    end", "    if length(strings) == 0 \n        return None \n    else \n       \
    \ return maximum(strings) \nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of strings and returns the longest string in that vector.\
    \ Return None if the vector is empty.", "    longest = strings[end]\n    for s\
    \ in strings[2:end]\n        if length(longest) < length(s)\n            longest\
    \ = s\n        end\n    end\n    return longest\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>", "    longest = Nothing\n    for s in strings\n\
    \        if longest == Nothing || length(longest) < length(s)\n            longest\
    \ = s\n        end\n    end\n    return longest\nend", "    longest = None \n\
    \    for s in strings \n        if longest == None or length(longest) < length(s)\
    \ \n            longest = s \n        end\n    end\n    return longest\nend\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of strings and returns\
    \ a vector of strings of the same length with all strings replaced by \"*\". \n\
    \    >>> replaceall([\"a\", \"bb\", \"ccc\"])\n    [\"*\", \"*\", \"*\"]\n   \
    \ >>> replaceall([\"a\", \"bb\", \"ccc\", \"ddd\"])\n    [\"*\", \"*\", \"*\"\
    , \"*\"]\n    >>> replaceall([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\"])\n   \
    \ [\"*\", \"*\", \"*\", \"*\", \"*\"]\n    >>> replaceall([\"a\", \"bb\", \"ccc\"\
    , \"ddd\", \"eee\", \"fff\"])\n    [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"]\n\
    \    >>> replaceall([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\"\
    ])\n    [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\", \"*\"]\n    >>> replaceall([\"\
    a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\"])\n    [\"*\"\
    , \"*\", \"*\", \"*\", \"*\", \"*\", \"*\", \"*\"]\n    >>> replaceall([\"a\"\
    , \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\"])\n  \
    \  [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\", \"*\", \"*\", \"*\"]\n    >>> replaceall([\"\
    a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\", \"\
    jjj\"])\n    [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\", \"*\", \"*\", \"*\"]\n\
    \    >>> replaceall([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\"\
    , \"hhh\", \"iii\", \"jjj\", \"kkk\"])\n    [\"*\", \"*\", \"*\", \"*\", \"*\"\
    , \"*\", \"*\", \"*\", \"*\", \"*\"]\n    >>> replaceall([\"a\", \"bb\", \"ccc\"\
    , \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\", \"jjj\", \"kkk\", \"lll\"\
    ])\n    [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\", \"*\", \"*\", \"*\", \"*\"\
    ]\n    >>> replaceall([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\"\
    , \"hhh\", \"iii\", \"jjj\", \"kkk\", \"lll\", \"mmm\"])\n    [\"*\", \"*\", \"\
    *\", \"", "    if length(strings) == 0 \n        error(\"Input is empty\") \n\
    \    else \n        longest = strings[length(strings)-1] \n        for s in strings[2:end]\
    \ \n            if length(longest) < length(s) \n                longest = s \n\
    \            end \n        end \n        return longest \n    end \nend \n</cell>\n\
    <text>\nExercise 7\nWrite a function that takes a vector of strings and returns\
    \ the number of unique words in the vector. \nThe function should ignore case\
    \ and punctuation. \nThe function should ignore empty strings. \nThe function\
    \ should ignore punctuation at the end of a word. \nThe function should ignore\
    \ punctuation at the beginning of a word. \nThe function should ignore words that\
    \ are only one character long. \nThe function should ignore words that are only\
    \ one character long. \nThe function should ignore words that are only one character\
    \ long. \nThe function should ignore words that are only one character long. \n\
    The function should ignore words that are only one character long. \nThe function\
    \ should ignore words that are only one character long. \nThe function should\
    \ ignore words that are only one character long. \nThe function should ignore\
    \ words that are only one character long. \nThe function should ignore words that\
    \ are only one character long. \nThe function should ignore words that are only\
    \ one character long. \nThe function should ignore words that are only one character\
    \ long. \nThe function should ignore words that are only one character long. \n\
    The function should ignore words that are only one character long. \nThe function\
    \ should ignore words that are only one character long. \nThe function should\
    \ ignore words that are only one character long. \nThe function should ignore\
    \ words that are only one character long. \nThe function should ignore words that\
    \ are only one character long. \nThe function should ignore words that are only\
    \ one character long. \nThe function should ignore words that are only one character\
    \ long. \nThe function should ignore words that are only one character long. \n\
    The function should ignore words that are only one character long. \nThe function\
    \ should ignore words that are only one character long. \nThe function should\
    \ ignore words that are only one character long. \nThe function should ignore\
    \ words that are only one character long. \nThe function should ignore words that\
    \ are only one character long. \nThe function should ignore words that are only\
    \ one character long. \nThe function should ignore words that are only one character\
    \ long. \nThe function should ignore words that are only one character long. \n\
    The function should ignore words that are only one character long. \nThe function\
    \ should ignore words that are only one character long. \nThe function should\
    \ ignore words that are only one character long. \nThe function should ignore\
    \ words that are only one character long. \nThe function should ignore words that\
    \ are only one character long. \nThe function should ignore words that are only\
    \ one character long. \nThe function should ignore words that are only one character\
    \ long. ", "    if length(strings) == 0 return None \n    longest := strings[1]\n\
    \    for s in strings[2:] \n        if length(s) > length(longest) \n        \
    \    longest := s\n    return longest \nend ", "    longest = strings[end-1]\n\
    \    for s in strings[2:end]\n        if length(s)>length(longest)\n         \
    \   longest = s\n        end\n    end\n    longest\nend", "    longest = Nothing\n\
    \    for s in strings\n        if longest == Nothing || length(longest) < length(s)\n\
    \            longest = s\n        end\n    end\n    return longest\nend\n</cell>\n\
    <text>\nExercise 9: Write a function that takes a vector of strings and returns\
    \ the longest string in that vector. Return the first string in case of multiple\
    \ strings of the same length.", "    longest = Nothing\n    for s in strings\n\
    \        if longest == Nothing || length(longest) > length(s)\n            longest\
    \ = s\n        end\n    end\n    return longest\nend\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"fffff\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"\
    fffff\", \"ggggg\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\"\
    , \"ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\", \"hhhhh\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"\
    fffff\", \"ggggg\", \"hhhhh\", \"iiiii\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\", \"\
    hhhhh\", \"iiiii\", \"jjjjj\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\", \"hhhhh\", \"\
    iiiii\", \"jjjjj\", \"kkkkk\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\", \"hhhhh\", \"\
    iiiii\", \"jjjjj\", \"kkkkk\", \"lllll\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\", \"\
    hhhhh\", \"iiiii\", \"jjjjj\", \"kkkkk\", \"lllll\", \"mmmmm\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"\
    fffff\", \"ggggg\", \"hhhhh\", \"iiiii\", \"jjjjj\", \"kkkkk\", \"lllll\", \"\
    mmmmm\", \"nnnnn\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\"\
    , \"ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\", \"hhhhh\", \"iiii", "  \
    \  if length(strings) == 0 \n        error(\"Input is empty\")\n    end\n    max_length\
    \ = maximum([length(s) for s in strings])\n    longest_strings = [s for s in strings\
    \ if length(s) == max_length]\n    if length(longest_strings) == 0 \n        error(\"\
    All strings are of the same length\")\n    end\n    return longest_strings[end]\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of strings\
    \ and returns a vector of booleans indicating whether each string is a palindrome\
    \ or not. \nThe function should return an error if the input vector is empty.",
  "    if length(strings) == 0 \n        return None \n    else \n        return max(strings)\
    \ \nend", "    if length(strings) == 0\n        error(\"Input list is empty\"\
    )\n    end\n    max_length = maximum(strings, lengths)\n    max_length = if max_length\
    \ == length(strings)\n        max_length\n    else\n        max_length\n    end\n\
    \    max_length = if max_length == length(strings)\n        max_length\n    else\n\
    \        max_length\n    end\n    if max_length == length(strings)\n        max_length\n\
    \    else\n        max_length\n    end\nend\n</code>\n<|/ a dscore=2 |>\n<| c\
    \ |>\nThis does not work if you have multiple strings of the same length. For\
    \ example, `longest([\"a\", \"bb\", \"ccc\"])` returns `\"a\"`.\n<|/ c |>\n<|\
    \ c |>\nI fixed the bug, thanks for pointing it out. Also I added a more efficient\
    \ solution that doesn't require the lengths array.\n<|/ c |>\n<| c |>\nI added\
    \ a more efficient solution that doesn't require the lengths array.\n<|/ c |>\n\
    <| a dscore=2 |>\nA simple and efficient solution is to use mapslices.\n<code>",
  "    if length(strings) == 0 return None \n    longest := strings[1]\n    for s\
    \ in strings[2:end] \n        if length(s) > length(longest) \n            longest\
    \ := s\n        end\n    end\n    return longest\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\nThe most efficient way is to use an accumulator:\n<code>",
  "    longest = Nothing\n    for s in strings\n        if longest == Nothing || length(longest)\
    \ < length(s)\n            longest = s\n        end\n    end\n    return longest\n\
    end", "    if length(strings) == 0 \n        return None \n    else \n       \
    \ return max(strings) \nend\n</cell>\n<text>\nExercise: Write a function that\
    \ returns the longest string in a list of strings. Use longest() from above.",
  "    longest = strings[end]\n    for s in strings[2:end]\n        if length(longest)\
    \ > length(s) \n            longest = s\n        end\n    end\n    longest\nend\n\
    </cell>\n<text>\nExercise 4\nWrite a function that takes a vector of strings and\
    \ returns a vector of strings where each string in the input vector is repeated\
    \ a number of times equal to the number of strings in the input vector. For example,\
    \ if the input vector is [\"a\", \"b\", \"c\"], the output vector should be [\"\
    a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"c\"].", "    longest = None \n\
    \    for s in strings \n        if longest == None or length(longest) < length(s)\
    \ \n            longest = s\n        end\n    end\n    return longest\nend\n</cell>\n\
    <text>\nExercise 7\nWrite a function that takes a vector of strings and returns\
    \ a vector of strings with the first letter of each string capitalized.", "  \
    \  longest = None \n    for s in strings \n        if longest == None \n     \
    \       longest = s \n        else if length(longest) < length(s) \n         \
    \   longest = s \n        else \n            longest = None \n    return longest\
    \ \nend ", "    longest = strings[end-1]\n    for s in strings[2:end]\n      \
    \  if length(s)>length(longest)\n            longest = s\n        end\n    end\n\
    \    longest\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ vector of strings and returns a vector of strings with the first letter of each\
    \ string capitalized.", "    longest = Nothing\n    for s in strings\n       \
    \ if longest == Nothing || length(longest) > length(s)\n            longest =\
    \ s\n        end\n    end\n    return longest\nend", "    longest = strings[end-1]\n\
    \    for s in strings[2:end]\n        if length(longest) > length(s) \n      \
    \      longest = s\n        end\n    end\n    longest\nend\n</cell>\n<code language=julia-1.4>\n\
    longest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeee\"])\n</cell>\n<code language=julia-1.4>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\"])\n</cell>\n<code\
    \ language=julia-1.4>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"\
    ffff\", \"gggg\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"a\", \"bb\"\
    , \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"])\n</cell>\n<code\
    \ language=julia-1.4>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"\
    ffff\", \"gggg\", \"hhhh\", \"iiii\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"\
    , \"jjjj\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"a\", \"bb\", \"ccc\"\
    , \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\"\
    ])\n</cell>\n<code language=julia-1.4>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\"\
    ])\n</cell>\n<code language=julia-1.4>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\"\
    , \"mmmm\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"a\", \"bb\", \"ccc\"\
    , \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\"\
    , \"llll\", \"mmmm\", \"nnnn\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"\
    , \"jjjj\", \"kkkk\", \"llll\", \"mmmm\", \"nnnn\", \"oooo\"])\n</cell>\n<code\
    \ language=julia-1.4>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"\
    ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll", "    longest\
    \ = strings[1]\n    for s in strings[2:end]\n        if length(s) > length(longest)\n\
    \            longest = s\n        end\n    end\n    longest\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of strings and returns a vector\
    \ of the same length with all strings replaced by '?'", "    longest = Nothing\n\
    \    for s in strings\n        if longest == Nothing || length(longest) > length(s)\n\
    \            longest = s\n        end\n    end\n    return longest\nend", "  \
    \  longest = strings[end-1]\n    for s in strings[2:end]\n        if length(longest)\
    \ < length(s) \n            longest = s\n        end\n    end\n    return longest\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,string |>\n<code>", "    longest\
    \ = Nothing\n    for s in strings\n        if longest == Nothing || length(longest)\
    \ > length(s)\n            longest = s\n        end\n    end\n    return longest\n\
    end\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\", \"ffff\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"\
    , \"iiii\", \"jjjj\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"\
    jjjj\", \"kkkk\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\"\
    , \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\"\
    , \"kkkk\", \"llll\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"\
    jjjj\", \"kkkk\", \"llll\", \"mmmm\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"\
    , \"jjjj\", \"kkkk\", \"llll\", \"mmmm\", \"nnnn\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"\
    , \"iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\", \"nnnn\", \"oooo\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\"\
    , \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"ll", "    if length(strings)\
    \ == 0\n        error(\"Empty list\")\n    end\n    max_length = length(strings)\n\
    \    longest_string = strings[max_length]\n    for s in strings[2:end]\n     \
    \   if length(s) == max_length\n            longest_string = s\n        else\n\
    \            break\n        end\n    end\n    return longest_string\nend", " \
    \   if length(strings) == 0 \n        return None \n    else \n        longest_string\
    \ <- strings[length(strings)-1] \n        for string in strings \n           \
    \ if length(longest_string) < length(string) \n                longest_string\
    \ <- string \n        longest_string \nend \n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of strings and returns a vector of the same length with\
    \ all strings replaced by \"*\". \n    >>> replace_by_stars([\"a\", \"bb\", \"\
    ccc\"])\n    [\"a\", \"bb\", \"ccc\"]\n    >>> replace_by_stars([\"a\", \"bb\"\
    , \"ccc\", \"ddd\"])\n    [\"a\", \"bb\", \"ccc\", \"ddd\"]\n    >>> replace_by_stars([])\n\
    \    []\n    >>> replace_by_stars([\"a\", \"bb\", \"ccc\", \"ddd\"])\n    [\"\
    a\", \"bb\", \"ccc\", \"ddd\"]\n    >>> replace_by_stars([\"a\", \"bb\", \"ccc\"\
    , \"ddd\", \"eee\"])\n    [\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\"]\n    >>>\
    \ replace_by_stars([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\"])\n    [\"\
    a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\"]\n    >>> replace_by_stars([\"\
    a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\"])\n    [\"a\", \"bb\"\
    , \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\"]\n    >>> replace_by_stars([\"a\"\
    , \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\"])\n    [\"a\",\
    \ \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\"]\n    >>> replace_by_stars([\"\
    a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\"])\n\
    \    [\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\", \"\
    iii\"]\n    >>> replace_by_stars([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"\
    fff\", \"ggg\", \"hhh\", \"iii\", \"jjj\"])\n    [\"a\", \"bb\", \"ccc\", \"ddd\"\
    , \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\", \"jjj\"]\n    >>> replace_by_stars([\"\
    a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\", \"\
    jjj\", \"kkk\"])\n    [\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\"\
    , \"hhh\", \"iii\", \"jjj\", \"kkk\"]\n    >>> replace_by_stars([\"a\", \"bb\"\
    , \"ccc\", \"ddd\", \"ee", "    if length(strings) == 0 return None \n    longest\
    \ := strings[1]\n    for s in strings[2:end] \n        if length(s) > length(longest)\
    \ \n            longest := s \n    return longest \nend\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| c |>\nThis doesn't work if you have multiple strings of the same length.\
    \ Try `longest([\"a\", \"bb\", \"ccc\"])`.\n<|/ c |>\n<| c |>\nThanks for pointing\
    \ that out. I've updated the answer to account for that case.\n<|/ c |>\n<| a\
    \ |>\n<code>", "    if length(strings) == 0 \n        return None \n    else \n\
    \        longest_str = strings[length(strings)-1] \n        for str in strings\
    \ \n            if length(str) == length(longest_str) \n                longest_str\
    \ = str \n            end \n        end \n        return longest_str \n    end\
    \ \nend \n</cell>\n<code language=julia-1.0>\nlongest([\"a\", \"bb\", \"ccc\"\
    ])\n</cell>\n<code language=julia-1.0>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    ])\n</cell>\n<code language=julia-1.0>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\"])\n</cell>\n<code language=julia-1.0>\nlongest([\"a\", \"bb\", \"ccc\"\
    , \"dddd\", \"eeee\", \"ffff\"])\n</cell>\n<code language=julia-1.0>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\"])\n</cell>\n<code\
    \ language=julia-1.0>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"\
    ffff\", \"gggg\", \"hhhh\"])\n</cell>\n<code language=julia-1.0>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"\
    ])\n</cell>\n<code language=julia-1.0>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\"])\n</cell>\n<code\
    \ language=julia-1.0>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"\
    ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\"])\n</cell>\n<code language=julia-1.0>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"\
    , \"iiii\", \"jjjj\", \"kkkk\", \"llll\"])\n</cell>\n<code language=julia-1.0>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"\
    , \"iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\"])\n</cell>\n<code language=julia-1.0>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"\
    , \"iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\", \"nnnn\"])\n</cell>\n<code\
    \ language=julia-1.0>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"\
    ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\",\
    \ \"nnnn\", \"oooo\"])\n</cell>\n<code language=julia-1.0>\nlongest([\"a\", \"\
    bb\", \"", "    longest = strings[end]\n    for s in strings[2:end]\n        if\
    \ length(longest) < length(s)\n            longest = s\n        end\n    end\n\
    \    return longest\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThanks for your\
    \ answer. Your code works but it is slower than the one I posted in the question.\
    \ Do you know why that is?\n<|/ c |>\n<| c |>\nI added a benchmark test in my\
    \ answer. Your code is slower than mine because you call `length` on every iteration.\
    \ My code only calls length once.\n<|/ c |>\n<| c |>\nI added a benchmark test\
    \ in my answer. Your code is slower than mine because you call `length` on every\
    \ iteration. My code only calls length once.\n<|/ c |>\n<| c |>\nThanks for your\
    \ answer. Your code works but it is slower than the one I posted in the question.\
    \ Do you know why that is?\n<|/ c |>\n<| c |>\nI added a benchmark test in my\
    \ answer. Your code is slower than mine because you call `length` on every iteration.\
    \ My code only calls length once.\n<|/ c |>\n<| a |>\nI wrote a benchmark test\
    \ to compare the performance of different solutions. I used the code from my question.\
    \ Here are the results for my machine:\n<code>\njulia> longest([\"a\", \"b\",\
    \ \"c\", \"d\"])\n\"a\"", "    longest = Nothing\n    for s in strings\n     \
    \   if longest == Nothing || length(longest) > length(s)\n            longest\
    \ = s\n        end\n    end\n    return longest\nend", "    if length(strings)\
    \ == 0 return None \n    max_length = length(strings)\n    longest_string = strings[max_length]\n\
    \    for s in strings[2:end]\n        if length(s) > max_length \n           \
    \ max_length = length(s)\n            longest_string = s\n        end\n    end\n\
    \    return longest_string\nend\n</code>\n<|/ a tags=julia,string |>\n<| a dscore=1\
    \ |>\n<code>", "    longest = strings[1]\n    for s in strings[2:end]\n      \
    \  if length(longest) > length(s)\n            longest = s\n        end\n    end\n\
    \    return longest\nend", "    longest = strings[end]\n    for s in strings[2:end]\n\
    \        if length(longest) > length(s)\n            longest = s\n        end\n\
    \    end\n    longest\nend\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"bb\", \"ccc\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\"\
    , \"ccc\", \"dddd\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    bb\", \"ccc\", \"dddd\", \"eeeee\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"fffff\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\"])\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeeee\", \"fffff\", \"ggggg\", \"hhhhh\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\", \"\
    hhhhh\", \"iiiii\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\"\
    , \"ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\", \"hhhhh\", \"iiiii\", \"\
    jjjjj\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"\
    , \"dddd\", \"eeeee\", \"fffff\", \"ggggg\", \"hhhhh\", \"iiiii\", \"jjjjj\",\
    \ \"kkkkk\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"\
    ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\", \"hhhhh\", \"iiiii\", \"jjjjj\"\
    , \"kkkkk\", \"lllll\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\",\
    \ \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\", \"hhhhh\", \"iiiii\"\
    , \"jjjjj\", \"kkkkk\", \"lllll\", \"mmmmm\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\", \"\
    hhhhh\", \"iiiii\", \"jjjjj\", \"kkkkk\", \"lllll\", \"mmmmm\", \"nnnnn\"])\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeeee\", \"fffff\", \"ggggg\", \"hhhhh\", \"iiiii\", \"", "    longest = Nothing\n\
    \    for s in strings\n        if longest == Nothing || length(longest) > length(s)\n\
    \            longest = s\n        end\n    end\n    return longest\nend", "  \
    \  longest = Nothing\n    for s in strings\n        if longest == Nothing || length(longest)\
    \ > length(s)\n            longest = s\n        end\n    end\n    return longest\n\
    end\n</code>\n<|/ a tags=julia,string |>\n<| a |>\nA simple and efficient solution\
    \ is to use findfirst:\n<code>\njulia> findfirst(x -> length(x) > 1, [\"a\", \"\
    bb\", \"ccc\"])\n\"ccc\"\n</code>\n<|/ a tags=julia,string dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>\njulia> longest(filter(x -> length(x) > 1, [\"a\", \"bb\", \"ccc\"\
    ]))\n\"ccc\"\n</code>\n<|/ a tags=julia,string |>\n<| a dscore=1 |>\n<code>",
  "    longest = Nothing\n    for s in strings\n        if longest == Nothing || length(longest)\
    \ > length(s) \n            longest = s\n        end\n    end\n    return longest\n\
    end\n</code>\n<|/ a tags=julia,string |>\n<| c |>\nI like this solution, but I\
    \ wonder if it can be done without looping over the strings. I wonder if there\
    \ is a way to do this in one line without looping over the strings. I wonder if\
    \ there is a way to do this in one line without looping over the strings. I wonder\
    \ if there is a way to do this in one line without looping over the strings. I\
    \ wonder if there is a way to do this in one line without looping over the strings.\
    \ I wonder if there is a way to do this in one line without looping over the strings.\
    \ I wonder if there is a way to do this in one line without looping over the strings.\
    \ I wonder if there is a way to do this in one line without looping over the strings.\
    \ I wonder if there is a way to do this in one line without looping over the strings.\
    \ I wonder if there is a way to do this in one line without looping over the strings.\
    \ I wonder if there is a way to do this in one line without looping over the strings.\
    \ I wonder if there is a way to do this in one line without looping over the strings.\
    \ I wonder if there is a way to do this in one line without looping over the strings.\
    \ I wonder if there is a way to do this in one line without looping over the strings.\
    \ I wonder if there is a way to do this in one line without looping over the strings.\
    \ I wonder if there is a way to do this in one line without looping over the strings.\
    \ I wonder if there is a way to do this in one line without looping over the strings.\
    \ I wonder if there is a way to do this in one line without looping over the strings.\
    \ I wonder if there is a way to do this in one line without looping over the strings.\
    \ I wonder if there is a way to do this in one line without looping over the strings.\
    \ I wonder if there is a way to do this in one line without looping over the strings.\
    \ I wonder if there is a way to do this in one line without looping over the strings.\
    \ I wonder if there is a way to do this in one line without looping over the strings.\
    \ I wonder if there is a way to do this in one line without looping over the strings.\
    \ I wonder if there is a way to do this in one line without looping over the strings.\
    \ I wonder if there is a way to do this in one line without looping over the strings.\
    \ I wonder if there is a way to do this in one line without looping over the strings.\
    \ I wonder if there is a way to do this in one line without looping over the strings.\
    \ I wonder if there is a way to do this in one line without ", "    if length(strings)\
    \ == 0\n        error(\"empty list\")\n    end\n    max_length = maximum([length(s)\
    \ for s in strings])\n    longest_string = nothing\n    for s in strings\n   \
    \     if length(s) < max_length\n            longest_string = s\n        else\n\
    \            break\n        end\n    end\n    if longest_string == nothing\n \
    \       error(\"no strings of length $max_length\")\n    end\n    return longest_string\n\
    end", "    longest = strings[lengths(strings)==maximum(lengths(strings))]\n  \
    \  if isempty(longest)\n        error(\"No strings found\")\n    end\n    return\
    \ longest\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis doesn't work if you\
    \ have multiple strings of the same length. For example, `longest([\"a\", \"b\"\
    , \"c\", \"a\"])` returns `\"a\"` instead of `\"b\"`.\n<|/ c |>\n<| c |>\nThanks\
    \ for pointing that out. I fixed the code accordingly.\n<|/ c |>\n<| a dscore=1\
    \ |>\nI came up with this solution:\n<code>", "    if length(strings) == 0 \n\
    \        error(\"Input list is empty\") \n    else \n        longest = length(strings)\n\
    \        for s in strings \n            if length(s) > longest \n            \
    \    longest = length(s) \n            end \n        end \n        longest\n \
    \   end \nend \n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"\
    ccc\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\",\
    \ \"dddd\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"\
    , \"dddd\", \"eeee\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\"\
    , \"ffff\", \"gggg\", \"hhhh\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"\
    ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"\
    , \"iiii\", \"jjjj\", \"kkkk\", \"llll\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"\
    , \"iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"\
    , \"iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\", \"nnnn\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"\
    ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\",\
    \ \"nnnn\", \"ooo\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff", "    longest = strings[end-1]\n  \
    \  for s in strings[2:end]\n        if length(longest) > length(s) \n        \
    \    longest = s\n        end\n    end\n    longest\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=string,julia |>\n<code>", "    if length(strings) == 0 \n    \
    \    return None \n    else \n        return maximum(strings) \nend", "    longest\
    \ = strings[1]\n    for s in strings[2:end]\n        if length(longest) > length(s)\
    \ \n            longest = s\n        end\n    end\n    return longest\nend\n</code>\n\
    <|/ a tags=julia |>\n<| c |>\nThis doesn't work if you have multiple strings of\
    \ the same length. For example, `longest([\"a\", \"bb\", \"ccc\", \"ddd\"])` returns\
    \ `ddd` instead of `ccc`.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I've\
    \ fixed the code accordingly.\n<|/ c |>\n<| a dscore=2 |>\nThe shortest solution\
    \ that I came up with is:\n<code>", "    if length(strings) == 0\n        return\
    \ nothing\n    ends_with_null = ends_with(strings, \"\")\n    if ends_with_null\n\
    \        return strings[ends_with_null][1]\n    ends_with_space = ends_with(strings,\
    \ \" \")\n    if ends_with_space\n        return strings[ends_with_space][1]\n\
    \    ends_with_period = ends_with(strings, \".\")\n    if ends_with_period\n \
    \       return strings[ends_with_period][1]\n    ends_with_dash = ends_with(strings,\
    \ \"-\")\n    if ends_with_dash\n        return strings[ends_with_dash][1]\n \
    \   ends_with_underscore = ends_with(strings, \"_\")\n    if ends_with_underscore\n\
    \        return strings[ends_with_underscore][1]\n    ends_with_colon = ends_with(strings,\
    \ \":\")\n    if ends_with_colon\n        return strings[ends_with_colon][1]\n\
    \    ends_with_semicolon = ends_with(strings, \";\")\n    if ends_with_semicolon\n\
    \        return strings[ends_with_semicolon][1]\n    ends_with_comma = ends_with(strings,\
    \ \",\")\n    if ends_with_comma\n        return strings[ends_with_comma][1]\n\
    \    ends_with_colon = ends_with(strings, \":\")\n    if ends_with_colon\n   \
    \     return strings[ends_with_colon][1]\n    ends_with_equal = ends_with(strings,\
    \ \"=\")\n    if ends_with_equal\n        return strings[ends_with_equal][1]\n\
    \    ends_with_open_bracket = ends_with(strings, \"(\")\n    if ends_with_open_bracket\n\
    \        return strings[ends_with_open_bracket][1]\n    ends_with_close_bracket\
    \ = ends_with(strings, \")\")\n    if ends_with_close_bracket\n        return\
    \ strings[ends_with_close_bracket][1]\n    ends_with_open_square_bracket = ends_with(strings,\
    \ \"[\")\n    if ends_with_open_square_bracket\n        return strings[ends_with_open_square_bracket][1]\n\
    \    ends_with_close_square_bracket = ends_with(strings, \"]\")\n    if ends_with_close_square_bracket\n\
    \        return strings[ends_with_close_square_bracket][1]\n    ends_with_open_brace\
    \ = ends_with(strings, \"{\")\n    if ends_with_open_brace\n        return strings[ends_with_open_brace][1]\n\
    \    ends_with_close_brace = ends_with(strings, \"}\")\n    if ends_with_close_brace\n\
    \        return strings[ends_with_close_brace][1]\n    ends_with_open_bracket\
    \ = ends_with(strings, \"(\")\n    if ends_with_open_bracket\n        return strings[ends_with_open_bracket][1]\n\
    \    ends_with_close_bracket = ends_with(strings, \")\")\n    if end", "    if\
    \ length(strings) == 0 return None \n    else return strings[length(strings)-1]\
    \ \nend\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"ddd\"])\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"ddd\",\
    \ \"eee\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"\
    , \"ddd\", \"eee\", \"fff\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\"])\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"ddd\",\
    \ \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\",\
    \ \"iii\", \"jjj\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\"\
    , \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\", \"jjj\", \"kkk\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"ddd\"\
    , \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\", \"jjj\", \"kkk\", \"lll\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\",\
    \ \"fff\", \"ggg\", \"hhh\", \"iii\", \"jjj\", \"kkk\", \"lll\", \"mmm\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\",\
    \ \"fff\", \"ggg\", \"hhh\", \"iii\", \"jjj\", \"kkk\", \"lll\", \"mmm\", \"nnn\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"ddd\"\
    , \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\", \"jjj\", \"kkk\", \"lll\", \"mmm\"\
    , \"nnn\", \"ooo\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\"\
    , \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\", \"jjj\", \"kkk\"\
    , \"lll\", \"mmm", "    if length(strings) == 0 \n        return None \n    else\
    \ \n        return max(strings, key=length) \nend\n</cell>\n<code language=julia-1.4>\n\
    longest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of times a substring appears in a given string.", " \
    \   longest = Nothing\n    for s in strings\n        if longest == Nothing ||\
    \ length(longest) > length(s)\n            longest = s\n        end\n    end\n\
    \    longest\nend\n</cell>\n<text>\nExercise 9: longest\nWrite a function that\
    \ takes a list of strings and returns the longest string in the list.\nWrite a\
    \ function that takes a list of strings and returns the shortest string in the\
    \ list.\nWrite a function that takes a list of strings and returns the string\
    \ with the smallest alphabetical order.\nWrite a function that takes a list of\
    \ strings and returns the string with the largest alphabetical order.\nWrite a\
    \ function that takes a list of strings and returns the string with the smallest\
    \ alphabetical order and largest alphabetical order.\nWrite a function that takes\
    \ a list of strings and returns the string with the smallest alphabetical order\
    \ and shortest alphabetical order.\nWrite a function that takes a list of strings\
    \ and returns the string with the largest alphabetical order and shortest alphabetical\
    \ order.\nWrite a function that takes a list of strings and returns the string\
    \ with the smallest alphabetical order and largest alphabetical order and shortest\
    \ alphabetical order.\nWrite a function that takes a list of strings and returns\
    \ the string with the smallest alphabetical order and largest alphabetical order\
    \ and shortest alphabetical order and shortest alphabetical order.\nWrite a function\
    \ that takes a list of strings and returns the string with the smallest alphabetical\
    \ order and largest alphabetical order and shortest alphabetical order and shortest\
    \ alphabetical order and shortest alphabetical order.\nWrite a function that takes\
    \ a list of strings and returns the string with the smallest alphabetical order\
    \ and largest alphabetical order and shortest alphabetical order and shortest\
    \ alphabetical order and shortest alphabetical order and shortest alphabetical\
    \ order.\nWrite a function that takes a list of strings and returns the string\
    \ with the smallest alphabetical order and largest alphabetical order and shortest\
    \ alphabetical order and shortest alphabetical order and shortest alphabetical\
    \ order and shortest alphabetical order and shortest alphabetical order.\nWrite\
    \ a function that takes a list of strings and returns the string with the smallest\
    \ alphabetical order and largest alphabetical order and shortest alphabetical\
    \ order and shortest alphabetical order and shortest alphabetical order and shortest\
    \ alphabetical order and shortest alphabetical order and shortest alphabetical\
    \ order.\nWrite a function that takes a list of strings and returns the string\
    \ with the smallest alphabetical order and largest alphabetical order and shortest\
    \ alphabetical order and shortest alphabetical order and shortest alphabetical\
    \ order and shortest alphabetical order and shortest alphabetical order ", " \
    \   longest = strings[1]\n    for s in strings[2:end]\n        if length(longest)\
    \ < length(s)\n            longest = s\n        end\n    end\n    return longest\n\
    end\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n\
    <text>\nExercise: Write a function that takes a vector of strings and returns\
    \ a vector of booleans indicating whether each string is a palindrome. For example,\
    \ [\"a\", \"bb\", \"ccc\"] should return [true, false, true].", "    longest =\
    \ strings[end]\n    for s in strings[2:end]\n        if length(longest) < length(s)\
    \ \n            longest = s\n        end\n    end\n    return longest\nend\n</cell>\n\
    <code language=julia-1.4>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of strings and returns a vector\
    \ of booleans indicating whether each string is a palindrome or not. For example,\
    \ [\"abba\", \"aba\", \"abba\"] should return [true, false, true].", "    longest\
    \ = strings[end-1]\n    for s in strings[2:end]\n        if length(longest) <\
    \ length(s)\n            longest = s\n        end\n    end\n    longest\nend\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if there are multiple strings\
    \ of the same length. Try it with `longest([\"a\", \"bb\", \"ccc\", \"ddd\"])`.\n\
    <|/ c |>\n<| c |>\nYes, I missed that case. Thanks for pointing it out. I've updated\
    \ the answer.\n<|/ c |>\n<| a tags=julia,string |>\nA simple solution using max.\n\
    <code>\njulia> longest(L) = max(L, length=>length for L in L)\nlongest (generic\
    \ function with 1 method)", "    longest = strings[end-1]\n    for s in strings[2:end]\n\
    \        if length(longest) < length(s) \n            longest = s\n        end\n\
    \    end\n    return longest\nend\n</code>\n<|/ a |>\n<| a dscore=1 |>\n<code>",
  "    if length(strings) == 0 \n        return None \n    else \n        return max(strings)\
    \ \nend\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\",\
    \ \"dddd\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of strings and returns a vector of integers representing the number of times\
    \ each string appears in the vector. \nFor example, for the input [\"a\", \"bb\"\
    , \"ccc\", \"dddd\"] you should return the vector [1, 1, 2, 1]. \nWrite a function\
    \ that takes a vector of strings and returns a vector of booleans indicating whether\
    \ each string appears in the vector. \nFor example, for the input [\"a\", \"bb\"\
    , \"ccc\", \"dddd\"] you should return the vector [true, true, false, true].",
  "    longest = strings[1]\n    for s in strings[2:end]\n        if length(longest)\
    \ > length(s) \n            longest = s\n        end\n    end\n    return longest\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia |>\nI wanted to add another answer\
    \ that uses filter and reduce:\n<code>\nreduce(x -> length(x) > length(y) ? x\
    \ : y, filter(x -> length(x) > length(y), strings))\n</code>\n<|/ a dscore=2 |>\n\
    <| a tags=julia |>\n<code>", "    longest = strings[1]\n    for s in strings[2:end]\n\
    \        if length(longest) < length(s)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string\
    \ |>\n<code>", "    if length(strings) == 0 \n        return None \n    else \n\
    \        return maximum(strings) \nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that returns the longest string in a list of strings. Use longest() from above.",
  "    longest = strings[1]\n    for s in strings[2:end]\n        if length(longest)\
    \ > length(s)\n            longest = s\n        end\n    end\n    return longest\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>", "    longest = Nothing\n\
    \    for s in strings\n        if longest == Nothing || length(longest) > length(s)\n\
    \            longest = s\n        end\n    end\n    return longest\nend\n</code>\n\
    <|/ a dscore=3 |>\n<| c |>\nI like this solution. Just a small comment: I believe\
    \ that `longest = Nothing` should be `longest = nothing`. Otherwise you will be\
    \ assigning `nothing` to `longest` instead of `nothing`. `nothing` is an `Int64`\
    \ which is not `nothing`.\n<|/ c |>\n<| c |>\nThanks, I fixed the typo.\n<|/ c\
    \ |>\n<| a dscore=3 |>\nThe answer by is great, but I thought I'd add an alternative\
    \ that doesn't require a package:\n<code>", "    if length(strings) == 0\n   \
    \     return nothing\n    \n    longest_string = strings[1]\n    for string in\
    \ strings[2:end]\n        if string.len > longest_string.len\n            longest_string\
    \ = string\n        end\n    end\n    return longest_string\nend\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of strings and returns a vector of strings\
    \ with the first letter of each string capitalized.", "    longest = strings[end-1]\n\
    \    for s in strings[2:end]\n        if length(longest) < length(s) \n      \
    \      longest = s\n        end\n    end\n    return longest\nend\n</code>\n<|/\
    \ a dscore=2 |>\n<| a tags=julia |>\nI like using reduce:\n<code>\nreduce(max,\
    \ strings)\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\njulia> reduce(max,\
    \ strings)\n\"ccc\"\n</code>\n<|/ a tags=julia |>\n<| a |>\n<code>\njulia> reduce(max,\
    \ strings)\n\"ccc\"\n</code>\n<|/ a dscore=2 tags=julia |>\n<| a tags=julia |>\n\
    <code>\njulia> reduce(max, strings)\n\"ccc\"\n</code>\n<|/ a dscore=2 |>\n<| a\
    \ tags=julia |>\n<code>\njulia> reduce(max, strings)\n\"ccc\"\n</code>\n<|/ a\
    \ dscore=2 |>\n<| a tags=julia |>\n<code>\njulia> reduce(max, strings)\n\"ccc\"\
    \n</code>\n<|/ a dscore=2 |>\n<| a tags=julia |>\n<code>\njulia> reduce(max, strings)\n\
    \"ccc\"\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia |>\n<code>\njulia> reduce(max,\
    \ strings)\n\"ccc\"\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\njulia>\
    \ reduce(max, strings)\n\"ccc\"\n</code>\n<|/ a tags=julia |>\n<| a dscore=1 |>\n\
    <code>\njulia> reduce(max, strings)\n\"ccc\"\n</code>\n<|/ a tags=julia |>\n<|\
    \ a dscore=1 |>\n<code>\njulia> reduce(max, strings)\n\"ccc\"\n</code>\n<|/ a\
    \ tags=julia |>\n<| a tags=julia |>\n<code>\njulia> reduce(max, strings)\n\"ccc\"\
    \n</code>\n<|/ a dscore=1 |>\n<| a tags=julia |>\n<code>\njulia> reduce(max, strings)\n\
    \"ccc\"\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\njulia> reduce(max,\
    \ strings)\n\"ccc\"\n</code>\n<|/ a tags=julia |>\n<| a dscore=1 ", "    longest\
    \ = Nothing\n    for s in strings\n        if longest == Nothing || length(longest)\
    \ > length(s)\n            longest = s\n        end\n    end\n    return longest\n\
    end", "    longest = Nothing\n    for s in strings\n        if longest == Nothing\
    \ || length(longest) > length(s)\n            longest = s\n        end\n    end\n\
    \    return longest\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,string |>\n\
    <code>", "    if length(strings) == 0 \n        return None \n    else \n    \
    \    return maximum(strings) \nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of times it occurs in the string.\
    \ \nWrite a function that takes a string and returns the number of times it occurs\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of times it occurs in the string. \nWrite a function that takes a string and\
    \ returns the number of times it occurs in the string. \nWrite a function that\
    \ takes a string and returns the number of times it occurs in the string. \nWrite\
    \ a function that takes a string and returns the number of times it occurs in\
    \ the string. \nWrite a function that takes a string and returns the number of\
    \ times it occurs in the string. \nWrite a function that takes a string and returns\
    \ the number of times it occurs in the string. \nWrite a function that takes a\
    \ string and returns the number of times it occurs in the string. \nWrite a function\
    \ that takes a string and returns the number of times it occurs in the string.\
    \ \nWrite a function that takes a string and returns the number of times it occurs\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of times it occurs in the string. \nWrite a function that takes a string and\
    \ returns the number of times it occurs in the string. \nWrite a function that\
    \ takes a string and returns the number of times it occurs in the string. \nWrite\
    \ a function that takes a string and returns the number of times it occurs in\
    \ the string. \nWrite a function that takes a string and returns the number of\
    \ times it occurs in the string. \nWrite a function that takes a string and returns\
    \ the number of times it occurs in the string. \nWrite a function that takes a\
    \ string and returns the number of times it occurs in the string. \nWrite a function\
    \ that takes a string and returns the number of times it occurs in the string.\
    \ \nWrite a function that takes a string and returns the number of times it occurs\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of times it occurs in the string. \nWrite a function that takes a string and\
    \ returns the number of times it occurs in the string. \nWrite a function that\
    \ takes a string and returns the number of times it occurs in the string. \nWrite\
    \ a function that takes a string and returns the number of times it occurs in\
    \ the string. \nWrite a function that takes a string and returns the number of\
    \ times it occurs in the string. \nWrite a function that takes a string and returns\
    \ the number of times it occurs in the string. \nWrite a function that takes a\
    \ string and returns the number of times it occurs in the string. \nWrite a function\
    \ that takes a string and returns the number of times it occurs in the string.\
    \ \nWrite a function that takes a string and returns the number of times it occurs\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of times it occurs in the string. \nWrite a function that takes a string and\
    \ returns the number of times it occurs in the string. \nWrite a function that\
    \ takes a string and returns the number of times it occurs in the string. \nWrite\
    \ a function that ", "    longest = strings[end-1]\n    for s in strings[2:end]\n\
    \        if length(longest) < length(s)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\n</code>\n<|/ a tags=julia |>\n<| a dscore=1\
    \ |>\n<code>", "    longest = None \n    for s in strings \n        if longest\
    \ == None \n            longest = s \n        else \n            if length(longest)\
    \ > length(s) \n                longest = s \n            end \n    end \n   \
    \ return longest \nend \n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work\
    \ for me. `longest` returns `nothing` instead of `String`\n<|/ c |>\n<| c |>\n\
    I tested it and it works fine for me. Can you post the code you used?\n<|/ c |>\n\
    <| c |>\nI used the code from your answer, but added `longest = nothing` before\
    \ `longest = s` inside the `if` statement. Maybe that is the problem?\n<|/ c |>\n\
    <| c |>\nYes, that is the problem. `longest = nothing` should be before `longest\
    \ = s`\n<|/ c |>\n<| a dscore=2 |>\n<code>", "    longest = Nothing\n    for s\
    \ in strings\n        if longest == Nothing || length(longest) > length(s)\n \
    \           longest = s\n        end\n    end\n    return longest\nend", "   \
    \ if length(strings)==0 return None \n    else return max(strings) \nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a vector of strings and returns\
    \ a vector of strings with the first letter of each string capitalized.", "  \
    \  longest = strings[end]\n    for s in strings[2:end]\n        if length(longest)\
    \ < length(s) \n            longest = s\n        end\n    end\n    return longest\n\
    end\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\", \"ffff\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"\
    , \"iiii\", \"jjjj\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"\
    jjjj\", \"kkkk\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\"\
    , \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\"\
    , \"kkkk\", \"llll\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"\
    jjjj\", \"kkkk\", \"llll\", \"mmmm\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"\
    , \"jjjj\", \"kkkk\", \"llll\", \"mmmm\", \"nnnn\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"\
    , \"iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\", \"nnnn\", \"oooo\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\"\
    , \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\", \"", " \
    \   if length(strings) == 0 return None \n    max_length = length(strings) \n\
    \    longest_string = strings[max_length] \n    for s in strings[2:] \n      \
    \  if length(s) < max_length \n            max_length = length(s) \n         \
    \   longest_string = s \n        end \n    end \n    return longest_string \n\
    end \n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>", "    longest = strings[end-1]\n\
    \    for s in strings[2:end]\n        if length(longest) < length(s) \n      \
    \      longest = s\n        end\n    end\n    return longest\nend", "    if length(strings)\
    \ == 0\n        error(\"Input list is empty\")\n    end\n    max_length = length(strings)\n\
    \    longest_string = strings[max_length]\n    for string in strings\n       \
    \ if length(string) == max_length\n            longest_string = string\n     \
    \   end\n    end\n    return longest_string\nend", "    longest = Nothing\n  \
    \  for s in strings\n        if longest == Nothing || length(longest) > length(s)\n\
    \            longest = s\n        end\n    end\n    return longest\nend\n</code>\n\
    <|/ a tags=julia,string |>\n<| a dscore=0 |>\n<code>", "    longest = strings[end-1]\n\
    \    for s in strings[2:end]\n        if length(s)>length(longest)\n         \
    \   longest = s\n        end\n    end\n    longest\nend", "    if length(strings)\
    \ == 0\n        error(\"Empty list\")\n    end\n    max_length = maximum([length(s)\
    \ for s in strings])\n    longest_string = nothing\n    for s in strings\n   \
    \     if length(s) <= max_length\n            if longest_string == nothing\n \
    \               longest_string = s\n            else\n                if length(s)\
    \ == max_length\n                    longest_string = longest([longest_string,\
    \ s])\n                else\n                    longest_string = longest([longest_string,\
    \ s])\n                end\n            end\n        end\n    end\n    return\
    \ longest_string\nend\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    bb\", \"ccc\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"\
    ccc\", \"dddd\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\"\
    , \"ccc\", \"dddd\", \"eeee\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\"\
    , \"ffff\", \"gggg\", \"hhhh\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"\
    ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"\
    , \"iiii\", \"jjjj\", \"kkkk\", \"llll\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"\
    , \"iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"\
    , \"iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\", \"nnnn\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"",
  "    if length(strings) == 0 \n        error(\"Input list is empty\") \n    else\
    \ \n        longest = strings[length(strings)-1] \n        for string in strings\
    \ \n            if length(string) > length(longest) \n                longest\
    \ = string \n        endfor \n        return longest \n    end\n</code>\n<|/ a\
    \ tags=julia,string |>\n<| a dscore=2 |>\n<code>", "    longest = strings[end]\n\
    \    for s in strings[2:end]\n        if length(longest) > length(s)\n       \
    \     longest = s\n        end\n    end\n    return longest\nend\n</code>\n<|/\
    \ a dscore=1 |>\n<| a |>\nI like to use this solution:\n<code>", "    longest\
    \ = strings[1]\n    for s in strings[2:end]\n        if length(longest) > length(s)\
    \ \n            longest = s\n        end\n    end\n    return longest\nend\n</code>\n\
    <|/ a tags=julia,string |>\n<| c |>\nThis does not answer the question. OP wants\
    \ to find the longest string in the list of strings. Your code returns the first\
    \ string in the list that is the longest.\n<|/ c |>\n<| c |>\nI see what you mean.\
    \ I've edited my answer to reflect this.\n<|/ c |>\n<| a dscore=2 |>\n<code>",
  "    longest = strings[end-1]\n    for s in strings[2:end]\n        if length(s)>length(longest)\n\
    \            longest = s\n        end\n    end\n    longest\nend\n</code>\n<|/\
    \ a tags=julia |>\n<| a dscore=2 |>\nThe shortest answer I have found is:\n<code>\n\
    longest(collect(strings))\n</code>\n<|/ a tags=julia |>\n<| a dscore=2 |>\n<code>\n\
    longest(collect(strings))\n</code>\n<|/ a tags=julia |>\n<| a dscore=2 |>\n<code>\n\
    longest(collect(strings))\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\n\
    <code>\nlongest(collect(strings))\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia\
    \ |>\n<code>\nlongest(collect(strings))\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia\
    \ |>\n<code>\nlongest(collect(strings))\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia\
    \ |>\n<code>\nlongest(collect(strings))\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia\
    \ |>\n<code>\nlongest(collect(strings))\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia\
    \ |>\n<code>\nlongest(collect(strings))\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nlongest(collect(strings))\n</code>\n<|/ a tags=julia |>\n<| a dscore=1\
    \ |>\n<code>\nlongest(collect(strings))\n</code>\n<|/ a tags=julia |>\n<| a tags=julia\
    \ |>\n<code>\nlongest(collect(strings))\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia\
    \ |>\n<code>\nlongest(collect(strings))\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia\
    \ |>\n<code>\nlongest(collect(strings))\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nlongest(collect(strings))\n</code>\n<|/ a tags=julia |>\n<| a tags=julia\
    \ |>\n<code>\nlongest(collect(strings))\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia\
    \ |>\n<code>\nlongest(collect(strings))\n</code>\n<|/ a dscore=1 ", "    if length(strings)==0\
    \ return None \n    else return strings[length(strings)-1] \nend", "    if length(strings)\
    \ == 0 return None \n    max_length = length(strings) \n    longest_string = strings[max_length]\
    \ \n    for string in strings \n        if length(string) == max_length \n   \
    \         longest_string = string \n            break \n    else \n        return\
    \ longest_string \nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of strings and returns a vector of strings with the words reversed.",
  "    if length(strings) == 0\n        return nothing\n    max_length = length(strings)\n\
    \    longest_string = strings[max_length]\n    for string in strings\n       \
    \ if length(string) == max_length\n            return longest_string\n       \
    \ end\n    end\n    return nothing\nend", "    longest = None \n    for s in strings\
    \ \n        if longest == None or length(longest) < length(s) \n            longest\
    \ = s \n        end\n    end\n    return longest\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of strings and returns a vector of strings\
    \ where each string in the original vector is replaced by the string with the\
    \ longest length. For example, if the input vector is [\"a\", \"bb\", \"ccc\"\
    ], the output vector should be [\"a\", \"bb\", \"ccc\"].", "    longest = Nothing\n\
    \    for s in strings\n        if longest == Nothing || length(longest) < length(s)\n\
    \            longest = s\n        end\n    end\n    return longest\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThanks for your answer. I'm sorry I didn't mention\
    \ that I wanted to avoid using any external packages. I edited my question to\
    \ reflect this.\n<|/ c |>\n<| c |>\nI edited my answer to include a solution that\
    \ does not use any external packages.\n<|/ c |>\n<| c |>\nThanks for your answer.\
    \ I edited my question to reflect this. I wanted to avoid using any external packages.\n\
    <|/ c |>\n<| c |>\nI edited my answer to include a solution that does not use\
    \ any external packages.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "    if length(strings)\
    \ == 0\n        error(\"empty list\")\n    end\n    max_length = maximum([length(string)\
    \ for string in strings])\n    longest_string = nothing\n    for string in strings\n\
    \        if length(string) == max_length\n            if longest_string == nothing\n\
    \                longest_string = string\n            else\n                if\
    \ length(string) > length(longest_string)\n                    longest_string\
    \ = string\n                end\n            end\n        else\n            if\
    \ longest_string != nothing\n                longest_string = nothing\n      \
    \      end\n        end\n    end\n    return longest_string\nend", "    longest\
    \ = Nothing\n    for s in strings\n        if longest == Nothing || length(longest)\
    \ > length(s) \n            longest = s\n        end\n    end\n    return longest\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>", "    longest = strings[end-1]\n\
    \    for s in strings[2:end]\n        if length(longest) < length(s)\n       \
    \     longest = s\n        end\n    end\n    longest\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of strings and returns a vector of booleans\
    \ indicating whether each string is a palindrome or not. For example, if the input\
    \ vector is [\"abba\", \"aba\", \"abc\", \"abba\"] then the output should be [true,\
    \ false, false, true].", "    if length(strings)==0 return None \n    else return\
    \ strings[length(strings)-1]\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes a vector of strings and returns a vector of the same length with\
    \ all strings replaced by '?'.\n    >>> replace_by_question(['a', 'b', 'c'])\n\
    \    ['?', '?', '?']", "    if length(strings) == 0\n        error(\"Input list\
    \ is empty\")\n    end\n    max_length = length(strings)\n    max_length = max_length\
    \ > 1 ? max_length : 1\n    max_length = max_length < Inf ? max_length : Inf\n\
    \    max_length = max_length == Inf ? 1 : max_length\n    max_length = max_length\
    \ == 0 ? Inf : max_length\n    max_length = max_length == 1 ? 0 : max_length\n\
    \    max_length = max_length % 2 == 0 ? max_length : max_length - 1\n    max_length\
    \ = max_length == 0 ? Inf : max_length\n    max_length = max_length == 1 ? 0 :\
    \ max_length\n    max_length = max_length % 2 == 0 ? max_length : max_length -\
    \ 1\n    max_length = max_length == 0 ? Inf : max_length\n    max_length = max_length\
    \ == 1 ? 0 : max_length\n    max_length = max_length % 2 == 0 ? max_length : max_length\
    \ - 1\n    max_length = max_length == 0 ? Inf : max_length\n    max_length = max_length\
    \ == 1 ? 0 : max_length\n    max_length = max_length % 2 == 0 ? max_length : max_length\
    \ - 1\n    max_length = max_length == 0 ? Inf : max_length\n    max_length = max_length\
    \ == 1 ? 0 : max_length\n    max_length = max_length % 2 == 0 ? max_length : max_length\
    \ - 1\n    max_length = max_length == 0 ? Inf : max_length\n    max_length = max_length\
    \ == 1 ? 0 : max_length\n    max_length = max_length % 2 == 0 ? max_length : max_length\
    \ - 1\n    max_length = max_length == 0 ? Inf : max_length\n    max_length = max_length\
    \ == 1 ? 0 : max_length\n    max_length = max_length % 2 == 0 ? max_length : max_length\
    \ - 1\n    max_length = max_length == 0 ? Inf : max_length\n    max_length = max_length\
    \ == 1 ? 0 : max_length\n    max_length = max_length % 2 == 0 ? max_length : max_length\
    \ - 1\n    max_length = max_length == 0 ? Inf : max_length\n    max_length = max_length\
    \ == 1 ? 0 : max_length\n    max_length = max_length % 2 == 0 ? max_length : max_length\
    \ - 1\n    max_length = max_length == 0 ? Inf : max_length\n    max_length = max_length\
    \ == 1 ? 0 : max_length\n    max_length = max_length % 2 == 0 ? max_length : max_length\
    \ - 1\n    max_length = max_length == 0 ? Inf : max_length\n    max_length = max_length\
    \ == 1 ? 0 : max_length\n    max_length = max_length % 2 == 0 ? max_length : max_length\
    \ - 1\n    max_length = max_length == 0 ? Inf : max_length\n    max_length = max_length\
    \ == 1 ? 0 : max_length\n    max_length = max_length % 2 == 0 ? max_length : max_length\
    \ - 1\n    max_length = max_length == 0 ? Inf : max_length\n    max_length = max_length\
    \ == 1 ? 0 : max_length\n    max_length = max_length % 2 == 0 ? max_length : max_length\
    \ - 1\n    max_length = max_length == 0 ? Inf : max_length\n    max_length = max_length\
    \ == 1 ? 0 : max_length\n    max_length = max_length % 2 == 0 ? max_length : max_length\
    \ - 1\n    max_length = max_length == 0 ? Inf : ", "    longest = strings[end-1]\n\
    \    for s in strings[2:end]\n        if length(longest) < length(s) \n      \
    \      longest = s\n        end\n    end\n    return longest\nend", "    longest\
    \ = Nothing\n    for s in strings\n        if longest == Nothing || length(longest)\
    \ > length(s) \n            longest = s\n        end\n    end\n    return longest\n\
    end\n</code>\n<|/ a tags=julia,string |>\n<| a dscore=2 |>\n<code>", "    longest\
    \ = strings[end].len()\n    for s in strings[2:end]\n        if s.len()>longest\n\
    \            longest = s.len()\n        end\n    end\n    longest\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of strings and returns\
    \ a vector of integers representing the number of times each string appears in\
    \ the vector.", "    if length(strings) == 0 \n        return None \n    else\
    \ \n        max_length = length(strings) \n        longest = strings[max_length]\
    \ \n        for i in 2:length(longest) \n            if length(strings[i]) > max_length\
    \ \n                max_length = length(strings[i]) \n                longest\
    \ = strings[i] \n            end \n        end \n        return longest \nend\
    \ \n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function which returns the longest string in an array\
    \ of strings.\nWrite a function which returns the longest string in an array of\
    \ strings. Return None in case the input list is empty.\nWrite a function which\
    \ returns the longest string in an array of strings. Return None in case the input\
    \ list is empty.\nWrite a function which returns the longest string in an array\
    \ of strings. Return None in case the input list is empty.\nWrite a function which\
    \ returns the longest string in an array of strings. Return None in case the input\
    \ list is empty.\nWrite a function which returns the longest string in an array\
    \ of strings. Return None in case the input list is empty.\nWrite a function which\
    \ returns the longest string in an array of strings. Return None in case the input\
    \ list is empty.\nWrite a function which returns the longest string in an array\
    \ of strings. Return None in case the input list is empty.\nWrite a function which\
    \ returns the longest string in an array of strings. Return None in case the input\
    \ list is empty.\nWrite a function which returns the longest string in an array\
    \ of strings. Return None in case the input list is empty.\nWrite a function which\
    \ returns the longest string in an array of strings. Return None in case the input\
    \ list is empty.\nWrite a function which returns the longest string in an array\
    \ of strings. Return None in case the input list is empty.\nWrite a function which\
    \ returns the longest string in an array of strings. Return None in case the input\
    \ list is empty.\nWrite a function which returns the longest string in an array\
    \ of strings. Return None in case the input list is empty.\nWrite a function which\
    \ returns the longest string in an array of strings. Return None in case the input\
    \ list is empty.\nWrite a function which returns the longest string in an array\
    \ of strings. Return None in case the input list is empty.\nWrite a function which\
    \ returns the longest string in an array of strings. Return None in case the input\
    \ list is empty.\nWrite a function which returns the longest string in an array\
    \ of strings. Return None in case the input list is empty.\nWrite a function which\
    \ returns the longest string in an array of strings. Return None in case the input\
    \ list is empty.\nWrite a function which returns the longest string in an array\
    \ of strings. Return None in case the input list is empty.\nWrite a function which\
    \ returns the longest string in an array of strings. Return None in case the input\
    \ list is empty.\nWrite a function which returns the longest string in an array\
    \ of strings. Return None in case the input list is empty.\nWrite a function which\
    \ returns the longest string in an array of strings. Return None in case the input\
    \ list is empty.\nWrite a function which returns the longest string in an array\
    \ of ", "    if length(strings) == 0\n        error(\"Input list is empty\")\n\
    \    end\n    max_length = length(strings)\n    longest_string = strings[max_length]\n\
    \    for string in strings\n        if length(string) == max_length\n        \
    \    return string\n        end\n    end\n    return longest_string\nend\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of strings and returns\
    \ a vector of booleans indicating whether\neach string starts with \"a\".", " \
    \   if length(strings) == 0 \n        return None \n    else \n        return\
    \ max(strings, key=length) \nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the longest string in a list of strings. Return None in case the\
    \ list is empty.", "    if length(strings) == 0\n        error(\"Input list is\
    \ empty.\")\n    end\n    max_length = length(strings)\n    longest_string = strings[max_length]\n\
    \    for s in strings[2:end]\n        if length(s) < max_length\n            max_length\
    \ = length(s)\n            longest_string = s\n        end\n    end\n    return\
    \ longest_string\nend\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    bb\", \"ccc\"])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of strings and returns a vector of the lengths of the strings in that vector.\
    \ \nThe function should return an error if the input vector is empty.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element and the\
    \ first element is not an integer.\nThe function should return an error if the\
    \ input vector has more than one element and the first element is an integer and\
    \ the second element is not an integer.\nThe function should return an error if\
    \ the input vector has more than one element and the first element is an integer\
    \ and the second element is an integer.\nThe function should return an error if\
    \ the input vector has more than one element and the first element is an integer\
    \ and the second element is an integer and the third element is not an integer.\n\
    The function should return an error if the input vector has more than one element\
    \ and the first element is an integer and the second element is an integer and\
    \ the third element is an integer.\nThe function should return an error if the\
    \ input vector has more than one element and the first element is an integer and\
    \ the second element is an integer and the third element is an integer and the\
    \ fourth element is not an integer.\nThe function should return an error if the\
    \ input vector has more than one element and the first element is an integer and\
    \ the second element is an integer and the third element is an integer and the\
    \ fourth element is an integer.\nThe function should return an error if the input\
    \ vector has more than one element and the first element is an integer and the\
    \ second element is an integer and the third element is an integer and the fourth\
    \ element is an integer and the fifth element is not an integer.\nThe function\
    \ should return an error if the input vector has more than one element and the\
    \ first element is an integer and the second element is an integer and the third\
    \ element is an integer and the fourth element is an integer and the fifth element\
    \ is an integer.\nThe function should return an error if the input vector has\
    \ more than one element and the first element is an integer and the second element\
    \ is an integer and the third element is an integer and the fourth element is\
    \ an integer and the fifth element is an integer and the sixth element is not\
    \ an integer.\nThe function should return an error if the input vector has more\
    \ than one element and the first element is an integer and the second element\
    \ is an integer and the third element is an integer and the fourth element is\
    \ an integer and the fifth element is an integer and the sixth element is an integer.\n\
    The function should return an error if the input vector has more than one element\
    \ and the first element is an integer and the second element is an ", "    if\
    \ length(strings) == 0 return None \n    else return strings[length(strings)]\
    \ \nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes a vector of\
    \ strings and returns a vector of strings with the first letter of each string\
    \ capitalized.", "    longest = Nothing\n    for s in strings\n        if longest\
    \ == Nothing || length(longest) > length(s) \n            longest = s\n      \
    \  end\n    end\n    return longest\nend", "    longest = strings[end-1]\n   \
    \ for s in strings[2:end]\n        if length(s)>length(longest)\n            longest\
    \ = s\n        end\n    end\n    longest\nend\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a |>\n<code>", "    longest = strings[end]\n    for s in strings[2:end]\n  \
    \      if length(longest) < length(s)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like\
    \ this solution, but I wonder if it can be made more efficient.\n<|/ c |>\n<|\
    \ c |>\nI added a more efficient solution\n<|/ c |>\n<| c |>\nI added a more efficient\
    \ solution\n<|/ c |>\n<| a tags=julia |>\nHere is a solution that uses no loops\
    \ and is quite efficient:\n<code>", "    if length(strings) == 0 \n        return\
    \ None \n    else \n        return max(strings, key=length) \nend", "    longest\
    \ = Nothing\n    for s in strings\n        if longest == Nothing || length(longest)\
    \ > length(s)\n            longest = s\n        end\n    end\n    return longest\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like this solution. One thing I noticed\
    \ is that it only works if you have a list of strings. If you have a list of vectors,\
    \ it won't work. Also, I think it would be better to use a `for` loop instead\
    \ of a `foreach` loop. `foreach` doesn't return anything, so you can't use it\
    \ to return the longest string.\n<|/ c |>\n<| c |>\nI agree with you, `foreach`\
    \ doesn't return anything. I've edited my answer to reflect your comments.\n<|/\
    \ c |>\n<| c |>\nI like the `for` loop solution. I've edited my answer to reflect\
    \ your comments.\n<|/ c |>\n<| a dscore=2 |>\nA simple solution:\n<code>", " \
    \   if length(strings) == 0 return None \n    else return strings[length(strings)-1]\n\
    end", "    if length(strings) == 0\n        error(\"Input list is empty\")\n \
    \   end\n    max_length = length(strings)\n    longest_string = strings[max_length]\n\
    \    for s in strings[2:end]\n        if length(s) == max_length\n           \
    \ longest_string = s\n        else\n            break\n        end\n    end\n\
    \    return longest_string\nend", "    if length(strings) == 0 \n        return\
    \ None \n    else \n        longest_string = strings[length(strings)-1] \n   \
    \     for s in strings \n            if length(s) == length(longest_string) \n\
    \                longest_string = s \n            end \n        end \n       \
    \ return longest_string \n    end \nend \n</cell>\n<text>\nExercise 4\nWrite a\
    \ function that takes a vector of strings and returns a vector of strings with\
    \ the same length. \nThe function should return None in case the vector is empty.\n\
    The function should return the same vector in case the vector has only one element.\n\
    The function should return the longest string in the vector in case there are\
    \ multiple strings of the same length.", "    if length(strings) == 0\n      \
    \  error(\"Input list is empty\")\n    end\n    max_length = maximum(strings)\n\
    \    max_length_str = strings[findfirst(isequal(max_length))]\n    if max_length_str\
    \ == max_length\n        max_length_str = strings[findfirst(isequal(max_length))]\n\
    \    end\n    return max_length_str\nend\n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\"])\n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\"])\n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\"])\n</cell>\n<code\
    \ language=julia-1.3>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"\
    ffff\", \"gggg\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"a\", \"bb\"\
    , \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"])\n</cell>\n<code\
    \ language=julia-1.3>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"\
    ffff\", \"gggg\", \"hhhh\", \"iiii\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"\
    , \"jjjj\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"a\", \"bb\", \"ccc\"\
    , \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\"\
    ])\n</cell>\n<code language=julia-1.3>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\"\
    ])\n</cell>\n<code language=julia-1.3>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\"\
    , \"mmmm\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"a\", \"bb\", \"ccc\"\
    , \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\"\
    , \"llll\", \"mmmm\", \"nnnn\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"\
    , \"jjjj\", \"kkkk\", \"llll\", \"mmmm\", \"nnnn\", \"oooo\"])\n</cell>\n<code\
    \ language=julia-1.3>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"\
    ffff\", \"gggg\", \"hhhh\", \"", "    if length(strings) == 0 \n        return\
    \ None \n    else \n        return maximum(strings) \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of strings and returns a vector of the\
    \ lengths of the strings. \nThe function should return an empty vector in case\
    \ the vector is empty.\nThe function should return the same vector in case the\
    \ vector is not empty.\nThe function should return the same vector in case the\
    \ vector is empty.\nThe function should return the same vector in case the vector\
    \ is empty.\nThe function should return the same vector in case the vector is\
    \ empty.\nThe function should return the same vector in case the vector is empty.\n\
    The function should return the same vector in case the vector is empty.\nThe function\
    \ should return the same vector in case the vector is empty.\nThe function should\
    \ return the same vector in case the vector is empty.\nThe function should return\
    \ the same vector in case the vector is empty.\nThe function should return the\
    \ same vector in case the vector is empty.\nThe function should return the same\
    \ vector in case the vector is empty.\nThe function should return the same vector\
    \ in case the vector is empty.\nThe function should return the same vector in\
    \ case the vector is empty.\nThe function should return the same vector in case\
    \ the vector is empty.\nThe function should return the same vector in case the\
    \ vector is empty.\nThe function should return the same vector in case the vector\
    \ is empty.\nThe function should return the same vector in case the vector is\
    \ empty.\nThe function should return the same vector in case the vector is empty.\n\
    The function should return the same vector in case the vector is empty.\nThe function\
    \ should return the same vector in case the vector is empty.\nThe function should\
    \ return the same vector in case the vector is empty.\nThe function should return\
    \ the same vector in case the vector is empty.\nThe function should return the\
    \ same vector in case the vector is empty.\nThe function should return the same\
    \ vector in case the vector is empty.\nThe function should return the same vector\
    \ in case the vector is empty.\nThe function should return the same vector in\
    \ case the vector is empty.\nThe function should return the same vector in case\
    \ the vector is empty.\nThe function should return the same vector in case the\
    \ vector is empty.\nThe function should return the same vector in case the vector\
    \ is empty.\nThe function should return the same vector in case the vector is\
    \ empty.\nThe function should return the same vector in case the vector is empty.\n\
    The function should return the same vector in case the vector is empty.\nThe function\
    \ should return the same vector in case the vector is empty.\nThe function should\
    \ return the same vector in case the vector is empty.\nThe function should return\
    \ the same vector in case the vector is empty.\nThe function should return the\
    \ same vector in case the vector is empty.\nThe function should return the same\
    \ vector in case the vector is empty.\nThe function should return the same vector\
    \ in case the vector is empty.\n", "    if length(strings) == 0\n        error(\"\
    Input is empty\")\n    end\n    max_length = maximum(strings)\n    for i in strings\n\
    \        if length(i) == max_length\n            return i\n        end\n    end\n\
    \    return nothing\nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't seem to work.\
    \ `longest([\"a\", \"bb\", \"ccc\"])` returns `nothing` instead of `\"ccc\"`.\n\
    <|/ c |>\n<| c |>\nYes, it does. I tested it before posting it. I just edited\
    \ my answer to fix the bug. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nI\
    \ tested it again and it works. I edited my answer to fix the bug. Thanks for\
    \ pointing it out.\n<|/ c |>\n<| c |>\nI tested it again and it works. I edited\
    \ my answer to fix the bug. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nI\
    \ tested it again and it works. I edited my answer to fix the bug. Thanks for\
    \ pointing it out.\n<|/ c |>\n<| a |>\nThe most efficient way is to use mapcat:\n\
    <code>\nlongest(mapcat(x->[x], [\"a\", \"bb\", \"ccc\"]))\n</code>\n<|/ a dscore=1\
    \ tags=julia |>\n<| c |>\nThis doesn't seem to work. `longest([\"a\", \"bb\",\
    \ \"ccc\"])` returns `nothing` instead of `\"ccc\"`.\n<|/ c |>\n<| c |>\nIt does\
    \ work. `longest([\"a\", \"bb\", \"ccc\"])` returns `\"ccc\"`\n<|/ c |>\n<| c\
    \ |>\nI tested it again and it works. I edited my answer to fix the bug. Thanks\
    \ for pointing it out.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nlongest(collect([\"\
    a\", \"bb\", \"ccc\"]))\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis doesn't seem\
    \ to work. `longest(collect([\"a\", \"bb\", \"ccc\"]))` returns `nothing` instead\
    \ of `\"ccc\"`.\n<|/ c |>\n<| c |>\nI tested it again and it works. I edited my\
    \ answer to fix the bug. Thanks for pointing it out.\n<|/ c |>\n<| a |>\n<code>\n\
    longest(collect([\"a\", \"bb\", \"ccc\"]))\n</code>\n<|/ a dscore=1 tags=julia\
    \ |>\n<| c |>\nThis ", "    if length(strings) == 0 \n        return None \n \
    \   else \n        return max(strings, key=length) \nend\n</cell>\n<text>\nExercise\n\
    Write a function that returns the longest string in a list of strings. Write a\
    \ function that returns the longest string in a list of strings. Write a function\
    \ that returns the longest string in a list of strings. Write a function that\
    \ returns the longest string in a list of strings. Write a function that returns\
    \ the longest string in a list of strings. Write a function that returns the longest\
    \ string in a list of strings. Write a function that returns the longest string\
    \ in a list of strings. Write a function that returns the longest string in a\
    \ list of strings. Write a function that returns the longest string in a list\
    \ of strings. Write a function that returns the longest string in a list of strings.\
    \ Write a function that returns the longest string in a list of strings. Write\
    \ a function that returns the longest string in a list of strings. Write a function\
    \ that returns the longest string in a list of strings. Write a function that\
    \ returns the longest string in a list of strings. Write a function that returns\
    \ the longest string in a list of strings. Write a function that returns the longest\
    \ string in a list of strings. Write a function that returns the longest string\
    \ in a list of strings. Write a function that returns the longest string in a\
    \ list of strings. Write a function that returns the longest string in a list\
    \ of strings. Write a function that returns the longest string in a list of strings.\
    \ Write a function that returns the longest string in a list of strings. Write\
    \ a function that returns the longest string in a list of strings. Write a function\
    \ that returns the longest string in a list of strings. Write a function that\
    \ returns the longest string in a list of strings. Write a function that returns\
    \ the longest string in a list of strings. Write a function that returns the longest\
    \ string in a list of strings. Write a function that returns the longest string\
    \ in a list of strings. Write a function that returns the longest string in a\
    \ list of strings. Write a function that returns the longest string in a list\
    \ of strings. Write a function that returns the longest string in a list of strings.\
    \ Write a function that returns the longest string in a list of strings. Write\
    \ a function that returns the longest string in a list of strings. Write a function\
    \ that returns the longest string in a list of strings. Write a function that\
    \ returns the longest string in a list of strings. Write a function that returns\
    \ the longest string in a list of strings. Write a function that returns the longest\
    \ string in a list of strings. Write a function that returns the longest string\
    \ in a list of strings. Write a function that returns the longest string in a\
    \ list of strings. Write a function that returns the longest string in a list\
    \ of strings. Write a function that returns the longest string in a list of strings.\
    \ Write a function that returns the longest string in a list of strings. Write\
    \ a function that returns the longest string in a list of strings. Write a function\
    \ that returns the longest string in a list of strings. Write a function that\
    \ returns the longest string in a list of ", "    longest = strings[1]\n    for\
    \ s in strings[2:end]\n        if length(longest) > length(s)\n            longest\
    \ = s\n        end\n    end\n    return longest\nend", "    if length(strings)==0\
    \ return None \n    else return strings[length(strings)-1] \nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the longest string in a list of strings.",
  "    if length(strings) == 0 \n        return None \n    else \n        return max(strings,\
    \ key=length) \nend ", "    if length(strings) == 0 return None \n    else return\
    \ strings[length(strings)-1]\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of characters in it.", "    longest\
    \ = Nothing\n    for s in strings\n        if longest == Nothing || length(longest)\
    \ > length(s) \n            longest = s\n        end\n    end\n    return longest\n\
    end\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    ])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of strings\
    \ and returns the longest string in that vector. \nWrite a function that takes\
    \ a vector of strings and returns the shortest string in that vector. \nWrite\
    \ a function that takes a vector of strings and returns the average string in\
    \ that vector. \nWrite a function that takes a vector of strings and returns the\
    \ median string in that vector. \nWrite a function that takes a vector of strings\
    \ and returns the mode string in that vector. \nWrite a function that takes a\
    \ vector of strings and returns the number of strings in that vector. \nWrite\
    \ a function that takes a vector of strings and returns the number of strings\
    \ that are not empty in that vector. \nWrite a function that takes a vector of\
    \ strings and returns the number of strings that are not empty and are the same\
    \ length as another string in that vector. \nWrite a function that takes a vector\
    \ of strings and returns the number of strings that are not empty and are the\
    \ same length as another string in that vector. \nWrite a function that takes\
    \ a vector of strings and returns the number of strings that are not empty and\
    \ are the same length as another string in that vector. \nWrite a function that\
    \ takes a vector of strings and returns the number of strings that are not empty\
    \ and are the same length as another string in that vector. \nWrite a function\
    \ that takes a vector of strings and returns the number of strings that are not\
    \ empty and are the same length as another string in that vector. \nWrite a function\
    \ that takes a vector of strings and returns the number of strings that are not\
    \ empty and are the same length as another string in that vector. \nWrite a function\
    \ that takes a vector of strings and returns the number of strings that are not\
    \ empty and are the same length as another string in that vector. \nWrite a function\
    \ that takes a vector of strings and returns the number of strings that are not\
    \ empty and are the same length as another string in that vector. \nWrite a function\
    \ that takes a vector of strings and returns the number of strings that are not\
    \ empty and are the same length as another string in that vector. \nWrite a function\
    \ that takes a vector of strings and returns the number of strings that are not\
    \ empty and are the same length as another string in that vector. \nWrite a function\
    \ that takes a vector of strings and returns the number of strings that are not\
    \ empty and are the same length as another string in that vector. \nWrite a function\
    \ that takes a vector of strings and returns the number of strings that are not\
    \ empty and are the same length as another string in that vector. \nWrite a function\
    \ that takes a vector of strings and returns the number of strings that are not\
    \ empty and are the same length as another string in that vector. \nWrite a function\
    \ that takes a vector of strings and returns the number of string", "    longest\
    \ = Nothing\n    for s in strings\n        if longest == Nothing || length(longest)\
    \ > length(s) \n            longest = s\n        end\n    end\n    return longest\n\
    end", "    if length(strings) == 0 return None \n    else return strings[length(strings)-1]\n\
    end\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of strings\
    \ and returns a vector of strings with the same length as the input. \nIf the\
    \ input vector is empty, return an empty vector.\nIf the input vector has only\
    \ one element, return that element.\nIf the input vector has more than one element,\
    \ return the first element of the vector.\nIf the input vector has more than two\
    \ elements, return the first two elements of the vector.\nIf the input vector\
    \ has more than three elements, return the first three elements of the vector.\n\
    If the input vector has more than four elements, return the first four elements\
    \ of the vector.\nIf the input vector has more than five elements, return the\
    \ first five elements of the vector.\nIf the input vector has more than six elements,\
    \ return the first six elements of the vector.\nIf the input vector has more than\
    \ seven elements, return the first seven elements of the vector.\nIf the input\
    \ vector has more than eight elements, return the first eight elements of the\
    \ vector.\nIf the input vector has more than nine elements, return the first nine\
    \ elements of the vector.\nIf the input vector has more than ten elements, return\
    \ the first ten elements of the vector.\nIf the input vector has more than eleven\
    \ elements, return the first eleven elements of the vector.\nIf the input vector\
    \ has more than twelve elements, return the first twelve elements of the vector.\n\
    If the input vector has more than thirteen elements, return the first thirteen\
    \ elements of the vector.\nIf the input vector has more than fourteen elements,\
    \ return the first fourteen elements of the vector.\nIf the input vector has more\
    \ than fifteen elements, return the first fifteen elements of the vector.\nIf\
    \ the input vector has more than sixteen elements, return the first sixteen elements\
    \ of the vector.\nIf the input vector has more than seventeen elements, return\
    \ the first seventeen elements of the vector.\nIf the input vector has more than\
    \ eighteen elements, return the first eighteen elements of the vector.\nIf the\
    \ input vector has more than nineteen elements, return the first nineteen elements\
    \ of the vector.\nIf the input vector has more than twenty elements, return the\
    \ first twenty elements of the vector.\nIf the input vector has more than twenty\
    \ elements, return the first twenty elements of the vector.\nIf the input vector\
    \ has more than twenty elements, return the first twenty elements of the vector.\n\
    If the input vector has more than twenty elements, return the first twenty elements\
    \ of the vector.\nIf the input vector has more than twenty elements, return the\
    \ first twenty elements of the vector.\nIf the input vector has more than twenty\
    \ elements, return the first twenty elements of the vector.\nIf the input ", " \
    \   if length(strings) == 0\n        error(\"Input list is empty\")\n    end\n\
    \    max_length = length(strings)\n    max_length_str = strings[max_length]\n\
    \    for s in strings[2:end]\n        if length(s) < max_length\n            max_length\
    \ = length(s)\n            max_length_str = s\n        end\n    end\n    return\
    \ max_length_str\nend\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    bb\", \"ccc\", \"dddd\"])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of elements in the input list that satisfy a given predicate.",
  "    if length(strings) == 0 \n        return None \n    else \n        return max(strings,\
    \ key=length) \nend\n</cell>\n<code language=julia-1.1>\nlongest([\"a\", \"bb\"\
    , \"ccc\"])\n</cell>\n<code language=julia-1.1>\nlongest([\"a\", \"bb\", \"ccc\"\
    , \"dddd\"])\n</cell>\n<code language=julia-1.1>\nlongest([\"a\", \"bb\", \"ccc\"\
    , \"dddd\", \"eeeee\"])\n</cell>\n<code language=julia-1.1>\nlongest([\"a\", \"\
    bb\", \"ccc\", \"dddd\", \"eeeee\", \"fffff\"])\n</cell>\n<code language=julia-1.1>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\"])\n\
    </cell>\n<code language=julia-1.1>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeeee\", \"fffff\", \"ggggg\", \"hhhhh\"])\n</cell>\n<code language=julia-1.1>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\", \"\
    hhhhh\", \"iiiii\"])\n</cell>\n<code language=julia-1.1>\nlongest([\"a\", \"bb\"\
    , \"ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\", \"hhhhh\", \"iiiii\", \"\
    jjjjj\"])\n</cell>\n<code language=julia-1.1>\nlongest([\"a\", \"bb\", \"ccc\"\
    , \"dddd\", \"eeeee\", \"fffff\", \"ggggg\", \"hhhhh\", \"iiiii\", \"jjjjj\",\
    \ \"kkkkk\"])\n</cell>\n<code language=julia-1.1>\nlongest([\"a\", \"bb\", \"\
    ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\", \"hhhhh\", \"iiiii\", \"jjjjj\"\
    , \"kkkkk\", \"lllll\"])\n</cell>\n<code language=julia-1.1>\nlongest([\"a\",\
    \ \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\", \"hhhhh\", \"iiiii\"\
    , \"jjjjj\", \"kkkkk\", \"lllll\", \"mmmmm\"])\n</cell>\n<code language=julia-1.1>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\", \"\
    hhhhh\", \"iiiii\", \"jjjjj\", \"kkkkk\", \"lllll\", \"mmmmm\", \"nnnnn\"])\n\
    </cell>\n<code language=julia-1.1>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeeee\", \"fffff\", \"ggggg\", \"hhhhh\", \"iiiii\", \"jjjjj\", \"kkkkk\"\
    , \"lllll\", \"mmmm", "    longest = Nothing\n    for s in strings\n        if\
    \ longest == Nothing || length(longest) < length(s)\n            longest = s\n\
    \        end\n    end\n    return longest\nend", "    longest = strings[end-1]\n\
    \    for s in strings[2:end]\n        if length(longest) < length(s) \n      \
    \      longest = s\n        end\n    end\n    return longest\nend", "    longest\
    \ = strings[lengths(strings)==maximum(lengths(strings))]\n    if isempty(longest)\n\
    \        error(\"No string in list has same length\")\n    end\n    return longest\n\
    end\n</code>\n<|/ a tags=julia |>\n<| c |>\n`longest = strings[lengths(strings)==maximum(lengths(strings))]`\
    \ can be simplified to `longest = strings[lengths(strings)==maximum(lengths(strings))[1]]`\n\
    <|/ c |>\n<| c |>\nThanks for the suggestion. I've edited my answer to include\
    \ your suggestion.\n<|/ c |>\n<| a tags=julia |>\n<code>", "    if length(strings)\
    \ == 0 \n        return None \n    else \n        max_length = length(strings)\n\
    \        longest_string = strings[max_length]\n        for s in strings[2:end]\n\
    \            if length(s) == max_length\n                longest_string = s\n\
    \            else\n                break\n        end\n        return longest_string\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"\
    ccc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the longest\
    \ substring of a given string.", "    longest = strings[end]\n    for s in strings[2:end]\n\
    \        if length(s) > length(longest)\n            longest = s\n        end\n\
    \    end\n    longest\nend\n</code>\n<|/ a tags=julia,string |>\n<| a dscore=1\
    \ |>\n<code>", "    if length(strings) == 0 \n        error(\"Input list is empty\"\
    ) \n    else \n        longest = strings[length(strings)-1] \n        for s in\
    \ strings \n            if length(s) > length(longest) \n                longest\
    \ = s \n        return longest \nend ", "    longest = strings[1]\n    for string\
    \ in strings[2:end]\n        if string.length() > longest.length()\n         \
    \   longest = string\n        end\n    end\n    longest\nend\n</cell>\n<text>\n\
    Exercise: Write a function that takes a vector of strings and returns the longest\
    \ string in that vector. Return nothing if the vector is empty.\nHint: Use the\
    \ function longest.", "    if length(strings) == 0 \n        return None \n  \
    \  else \n        max_length = length(strings) \n        longest_string = strings[max_length]\
    \ \n        for string in strings \n            if length(string) == max_length\
    \ \n                longest_string = string \n            end \n        end \n\
    \        return longest_string \n    end \nend \n</cell>\n<code language=julia-1.1>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\"])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the longest substring of a given string. For example,\
    \ the longest substring of the string \"abcabcbb\" would be \"abc\", while the\
    \ longest substring of the string \"bbbbb\" would be \"b\".", "    longest = strings[1]\n\
    \    for s in strings[2:end]\n        if length(longest) > length(s) \n      \
    \      longest = s\n        end\n    end\n    return longest\nend\n</cell>\n<code\
    \ language=julia-1.4>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the longest string in a list of strings. If\
    \ the list is empty, return an empty string. \nWrite a function that returns the\
    \ longest string in a list of strings. If the list is empty, return an empty string.\
    \ \nWrite a function that returns the longest string in a list of strings. If\
    \ the list is empty, return an empty string. \nWrite a function that returns the\
    \ longest string in a list of strings. If the list is empty, return an empty string.\
    \ \nWrite a function that returns the longest string in a list of strings. If\
    \ the list is empty, return an empty string. \nWrite a function that returns the\
    \ longest string in a list of strings. If the list is empty, return an empty string.\
    \ \nWrite a function that returns the longest string in a list of strings. If\
    \ the list is empty, return an empty string. \nWrite a function that returns the\
    \ longest string in a list of strings. If the list is empty, return an empty string.\
    \ \nWrite a function that returns the longest string in a list of strings. If\
    \ the list is empty, return an empty string. \nWrite a function that returns the\
    \ longest string in a list of strings. If the list is empty, return an empty string.\
    \ \nWrite a function that returns the longest string in a list of strings. If\
    \ the list is empty, return an empty string. \nWrite a function that returns the\
    \ longest string in a list of strings. If the list is empty, return an empty string.\
    \ \nWrite a function that returns the longest string in a list of strings. If\
    \ the list is empty, return an empty string. \nWrite a function that returns the\
    \ longest string in a list of strings. If the list is empty, return an empty string.\
    \ \nWrite a function that returns the longest string in a list of strings. If\
    \ the list is empty, return an empty string. \nWrite a function that returns the\
    \ longest string in a list of strings. If the list is empty, return an empty string.\
    \ \nWrite a function that returns the longest string in a list of strings. If\
    \ the list is empty, return an empty string. \nWrite a function that returns the\
    \ longest string in a list of strings. If the list is empty, return an empty string.\
    \ \nWrite a function that returns the longest string in a list of strings. If\
    \ the list is empty, return an empty string. \nWrite a function that returns the\
    \ longest string in a list of strings. If the list is empty, return an empty string.\
    \ \nWrite a function that returns the longest string in a list of strings. If\
    \ the list is empty, return an empty string. \nWrite a function that returns the\
    \ longest string in a list of strings. If the list is empty, return an empty string.\
    \ \nWrite a function that returns the longest string in a list of strings. If\
    \ the list is empty, return an empty string. \nWrite a function that returns the\
    \ longest string in a list of strings. If the ", "    longest = Nothing\n    for\
    \ s in strings\n        if longest == Nothing || length(longest) < length(s)\n\
    \            longest = s\n        end\n    end\n    return longest\nend", "  \
    \  longest = strings[end-1]\n    for s in strings[2:end]\n        if length(longest)\
    \ < length(s) \n            longest = s\n        end\n    end\n    longest\nend\n\
    </code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string |>\n<code>", "   \
    \ longest = strings[end].len()\n    for s in strings[2:end]\n        if s.len()>longest\n\
    \            longest = s.len()\n        end\n    end\n    longest\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of strings and returns\
    \ the longest string in that vector. Return None if the vector is empty.\n>>>\
    \ longest(['a', 'b', 'c'])", "    longest = strings[end-1]\n    for s in strings[2:end]\n\
    \        if length(longest) < length(s) \n            longest = s\n        end\n\
    \    end\n    return longest\nend\n</code>\n<|/ a |>\n<| a tags=julia |>\n<code>",
  "    longest = strings[end]\n    for s in strings[2:end]\n        if length(s) >\
    \ length(longest)\n            longest = s\n        end\n    end\n    return longest\n\
    end", "    if length(strings) == 0 \n        return None \n    else \n       \
    \ return max(strings) \nend\n</cell>\n<text>\nExercise: Write a function that\
    \ returns the longest string in a list of strings. Use this function to find the\
    \ longest string in our list of strings.", "    longest = strings[1]\n    for\
    \ s in strings[2:end]\n        if length(longest) > length(s) \n            longest\
    \ = s\n        end\n    end\n    return longest\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\n<code>", "    longest = Nothing\n    for s in strings\n\
    \        if longest == Nothing || length(longest) > length(s) \n            longest\
    \ = s\n        end\n    end\n    return longest\nend", "    longest = strings[end]\n\
    \    for s in strings[2:end]\n        if length(longest) < length(s)\n       \
    \     longest = s\n        end\n    end\n    return longest\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that returns the longest string in a list of strings.\n\
    Write a function that returns the longest string in a list of lists of strings.\n\
    Write a function that returns the longest string in a list of lists of lists of\
    \ strings.\nWrite a function that returns the longest string in a list of lists\
    \ of lists of lists of strings.", "    if length(strings) == 0 \n        return\
    \ None \n    else \n        return max(strings, key=length) \nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that returns the longest string in a list of strings.\
    \ Return None in case the list is empty.", "    longest = strings[end]\n    for\
    \ s in strings[2:end]\n        if length(s) > length(longest)\n            longest\
    \ = s\n        end\n    end\n    return longest\nend\n</code>\n<|/ a tags=julia\
    \ |>\n<| c |>\nThanks for your answer. Could you please explain how it works?\n\
    <|/ c |>\n<| c |>\nI added some explanation. Hope it helps.\n<|/ c |>\n<| c |>\n\
    Thanks for your answer. Could you please explain how it works?\n<|/ c |>\n<| c\
    \ |>\nI added some explanation. Hope it helps.\n<|/ c |>\n<| a dscore=2 |>\nI\
    \ wrote a package called longest-string that does this for you:\n<code>\njulia>\
    \ using longest-string", "    longest = strings[end-1]\n    for s in strings[2:end]\n\
    \        if length(s) > length(longest)\n            longest = s\n        end\n\
    \    end\n    longest\nend", "    longest = strings[end-1]\n    for string in\
    \ strings[2:end]\n        if string.length() > longest.length()\n            longest\
    \ = string\n        end\n    end\n    longest\nend", "    if length(strings) ==\
    \ 0 \n        error(\"Input list is empty\")\n    end\n    max_length = maximum([length(s)\
    \ for s in strings])\n    longest_string = nothing\n    for s in strings \n  \
    \      if length(s) == max_length \n            longest_string = s\n        end\n\
    \    end\n    if longest_string == nothing \n        error(\"All strings have\
    \ the same length\")\n    end\n    return longest_string\nend", "    if length(strings)\
    \ == 0\n        error(\"Input list is empty\")\n    end\n    max_length = 0\n\
    \    for string in strings\n        if length(string) > max_length\n         \
    \   max_length = length(string)\n        end\n    end\n    if max_length > 0\n\
    \        longest_string = strings[max_length]\n        for string in strings\n\
    \            if length(string) == max_length\n                if string != longest_string\n\
    \                    longest_string = string\n                end\n          \
    \  end\n        end\n        return longest_string\n    else\n        return nothing\n\
    \    end\nend", "    if length(strings) == 0\n        error(\"Input list is empty\"\
    )\n    end\n    max_length = length(strings)\n    longest_string = strings[max_length]\n\
    \    for s in strings[2:end]\n        if length(s) == max_length\n           \
    \ longest_string = s\n        else\n            break\n        end\n    end\n\
    \    return longest_string\nend\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeee\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"\
    ffff\", \"gggg\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\"\
    , \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"\
    ffff\", \"gggg\", \"hhhh\", \"iiii\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"\
    , \"jjjj\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"\
    , \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\"\
    , \"mmmm\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"\
    , \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\"\
    , \"llll\", \"mmmm\", \"nnnn\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"\
    , \"jjjj\", \"kkkk\", \"llll\", \"mmmm\", \"nnnn\", \"oooo\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"\
    ffff\", \"gggg\", \"hhhh\", \"iiii", "    longest = Nothing\n    for s in strings\n\
    \        if longest == Nothing || length(longest) > length(s)\n            longest\
    \ = s\n        end\n    end\n    return longest\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\nI like using map for this:\n<code>", "    if length(strings)\
    \ == 0 return None \n    max_length = length(strings)\n    max_length = max_length\
    \ > 1 ? max_length : 1\n    longest = strings[max_length]\n    for s in strings[2:end]\n\
    \        if length(s) < max_length \n            max_length = length(s)\n    \
    \        longest = s\n        end\n    end\n    return longest\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>", "    longest = strings[end-1]\n\
    \    for s in strings[2:end]\n        if length(s)>length(longest)\n         \
    \   longest = s\n        end\n    end\n    longest\nend", "    if length(strings)\
    \ == 0 return None \n    max_length = length(strings)\n    longest_string = strings[max_length]\n\
    \    for string in strings\n        if length(string) == max_length\n        \
    \    return longest_string\n        end\n    end\n    return longest_string\n\
    end", "    longest = strings[lengths(strings)==maximum(lengths(strings))]\n  \
    \  if isempty(longest)\n        error(\"No strings contain same length\")\n  \
    \  end\n    return longest\nend\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    bb\", \"ccc\", \"dddd\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"bb\", \"ccc\", \"dddd\", \"eeee\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"\
    ffff\", \"gggg\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\"\
    , \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"\
    ffff\", \"gggg\", \"hhhh\", \"iiii\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"\
    , \"jjjj\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"\
    , \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\"\
    , \"mmmm\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"\
    , \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\"\
    , \"llll\", \"mmmm\", \"nnnn\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"\
    , \"jjjj\", \"kkkk\", \"llll\", \"mmmm\", \"nnnn\", \"ooo\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"\
    ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \""]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
