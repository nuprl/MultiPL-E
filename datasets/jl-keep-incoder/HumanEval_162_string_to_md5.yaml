name: HumanEval_162_string_to_md5
language: julia
prompt: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
  \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
  \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
  \ Nothing} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
  Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
  ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
  )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
completions: ["    if text == \"\" \n        then return None \n    else \n      \
    \  md5 = Digest.new(\"md5\")\n        md5.update(text)\n        return md5.digest().hex\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>", "    if text == \"\" \n  \
    \      then return None \n    else \n        md5 = Digest.new(\"md5\") \n    \
    \    md5.update(text) \n        return md5.digest() \nend\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    \")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\") \u2260\
    \ string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\") \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\")\
    \ \u2260 string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"\
    Hello world\") \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\")\
    \ \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\")\
    \ \u2260 string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"\
    Hello world\") \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello\
    \ world\") \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\")\
    \ \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\")\
    \ \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\")\
    \ \u2260 string_to_md5(\"Hello world\")\n</cell>\n<code language=", "    if text\
    \ == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if text == \"\" \n        return None \n    else\
    \ \n        digest = md5(text) \n        return digest.hexdigest() \nend \n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a string 'text', return its md5 hash\
    \ equivalent string.\n    If 'text' is an empty string, return None.", "    if\
    \ text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if text == \"\" \n        then return None \n\
    \    else \n        md5_hash = md5(text) \n        md5_hash_string = md5_hash.hexdigest\
    \ \n        return md5_hash_string \nend\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes in a string and returns the number of characters in the string.",
  "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>", "    if text == \"\"\n        Nothing\n \
    \   else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n  \
    \  If 'text' is an empty string, return None.", "    if text == \"\"\n       \
    \ Nothing\n    else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n  \
    \  If 'text' is an empty string, return None.", "    if text == \"\" \n      \
    \  then return None \n    else \n        md5 = Digest.new(\"md5\") \n        md5.update(text)\
    \ \n        return md5.digest() \nend\n</cell>\n<code language=julia-1.5>\n\"\"\
    \"\n    Given a string 'text', return its sha1 hash equivalent string.\n    If\
    \ 'text' is an empty string, return None.", "    if text == \"\" \n        then\
    \ return None \n        else return md5(text) \n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n  \
    \  If 'text' is an empty string, return None.", "    if text == \"\" \n      \
    \  return None \n    else \n        return md5(text) \nend \n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    md5_hash_to_string(md5hash::String)", "    if text == \"\"\n     \
    \   Nothing\n    else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    md5(text::String)", "    if text == \"\" \n        then return None\
    \ \n        else return md5(text) \n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    md5(text::String)", "    if text == \"\" \n        return None \n\
    \    else \n        md5hash = md5(text) \n        return md5hash.hexdigest() \n\
    end \n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\")\n</cell>\n\
    <code language=julia-1.5>\nstring_to_md5(\"\")\n</cell>\n<text>\nExercise: Write\
    \ a function that takes a string as input and returns the md5 hash of the string\
    \ converted to lowercase. Test it on several strings and print the results.",
  "    if text == \"\" \n        then return None \n    else \n        md5 = digest.MD5()\n\
    \        md5.update(text)\n        return md5.digest()\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"\n    Given a string 'text', return its sha1\
    \ hash equivalent string.\n    If 'text' is an empty string, return None.", " \
    \   if text == \"\" \n        return None \n    else \n        md5 = Digest.new(\"\
    md5\") \n        md5.update(text) \n        return md5.digest() \nend\n</cell>\n\
    <code language=julia-1.4>\nstring_to_md5(\"Hello world\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as input and returns the md5 hash equivalent\
    \ string of the text converted to lowercase. \nIf 'text' is an empty string, return\
    \ None.", "    if text == \"\"\n        Nothing\n    else\n        Digest(text).hexdigest\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.", "    if text == \"\" \n        then return None \n        else\
    \ return md5(text) \n    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n\
    \    Given a string 'text', return its md5 hash equivalent string.\n    If 'text'\
    \ is an empty string, return None.", "    if text == \"\" \n        then return\
    \ None \n    else \n        md5(text) \n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if text == \"\" \n        return None \n    else \n        digest = digest(text)\
    \ \n        return digest.hex \nend ", "    if text == \"\" \n        then return\
    \ None \n    else \n        md5 = Digest.new(\"md5\") \n        md5.update(text)\
    \ \n        return md5.digest() \nend\n</cell>\n<code language=julia-1.5>", " \
    \   if text == \"\" \n        then return None \n    else \n        md5 = Digest.new(\"\
    md5\") \n        md5.update(text) \n        return md5.digest() \nend\n</cell>\n\
    <code language=julia-1.5>", "    if text == \"\"\n        Nothing\n    else\n\
    \        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    Given a string 'text', return its md5 hash equivalent string.\n    If 'text'\
    \ is an empty string, return None.", "    if text == \"\"\n        Nothing\n \
    \   else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.1>",
  "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n\
    </cell>\n<code language=julia-1.4>", "    if text == \"\"\n        Nothing\n \
    \   else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n  \
    \  If 'text' is an empty string, return None.", "    if text == \"\"\n       \
    \ Nothing\n    else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n  \
    \  If 'text' is an empty string, return None.", "    if text == \"\" \n      \
    \  then return None \n        else return md5(text) \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a string 'text', return its md5 hash\
    \ equivalent string.\n    If 'text' is an empty string, return None.", "    if\
    \ text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\n\"\"\"\n    Given a string 'text', return its md5 hash\
    \ equivalent string.\n    If 'text' is an empty string, return None.", "    if\
    \ text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if text == \"\"\n        Nothing\n    else\n\
    \        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    Given a string 'text', return its sha1 hash equivalent string.\n    If 'text'\
    \ is an empty string, return None.", "    if text == \"\"\n        Nothing\n \
    \   else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n  \
    \  If 'text' is an empty string, return None.", "    if text == \"\"\n       \
    \ Nothing\n    else\n        Digest(text).hexdigest\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"\n    Given a string 'text', return its md5 hash\
    \ equivalent string.\n    If 'text' is an empty string, return None.", "    if\
    \ text == \"\" \n        return None \n    else \n        digest = digest(text)\
    \ \n        return digest.hex \nend ", "    if text == \"\" \n        then return\
    \ None \n    else \n        md5 = digest.MD5()\n        md5.update(text)\n   \
    \     return md5.digest()\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\")\n</cell>\n<text>\nExercise\nWrite a function that\
    \ takes a string and returns the md5 hash equivalent of the string if it exists\
    \ or None if it doesn't.", "    if text == \"\"\n        Nothing\n    else\n \
    \       Digest(text).hexdigest\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n  \
    \  If 'text' is an empty string, return None.", "    if text == \"\" \n      \
    \  then return None \n    else \n        md5 = digest.MD5()\n        md5.update(text)\n\
    \        return md5.digest()\nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ text == \"\" \n        then return None \n    else \n        md5 = digest(text)\
    \ \n        return md5\nend\n</cell>\n<code language=julia-1.5>", "    if text\
    \ == \"\" \n        then return None \n        else return md5(text) \n    end\n\
    end\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Given a string 'text', return\
    \ its md5 hash equivalent string.\n    If 'text' is an empty string, return None.",
  "    if text == \"\" \n        then return None \n    else \n        md5 = digest.MD5()\n\
    \        md5.update(text)\n        return md5.digest()\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a string 'text', return its sha1\
    \ hash equivalent string.\n    If 'text' is an empty string, return None.", " \
    \   if text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string 'text', return\
    \ its sha1 hash equivalent string.\n    If 'text' is an empty string, return None.",
  "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>", "    if text == \"\"\n        Nothing\n \
    \   else\n        Digest.MD5.hexdigest(text)\n    end\nend\n</cell>\n<code language=julia-1.3>",
  "    if text == \"\" \n        return None \n    else \n        digest = digest.MD5()\n\
    \        digest.update(text)\n        return digest.hexdigest()\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"\n    Given a filename 'filename', return the\
    \ md5 hash equivalent string.\n    If 'filename' is an empty string, return None.",
  "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n\
    </cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string 'text', return\
    \ its md5 hash equivalent string.\n    If 'text' is an empty string, return None.",
  "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>", "    if text == \"\" \n        then return\
    \ None \n        else return md5(text) \n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n  \
    \  If 'text' is an empty string, return None.", "    if text == \"\"\n       \
    \ Nothing\n    else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n  \
    \  If 'text' is an empty string, return None.", "    if text == \"\" \n      \
    \  then return None \n    else \n        md5 = Digest.new(\"md5\")\n        md5.update(text)\n\
    \        return md5.digest().hex\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if text == \"\" \n        then return None \n        else return md5(text)\
    \ \n    end\nend\n</cell>\n<code language=julia-1.3>\nstring_to_md5(\"Hello world\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the md5 hash equivalent of the string in hexadecimal format.", " \
    \   if text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n\
    </cell>\n<code language=julia-1.4>", "    if text == \"\"\n        Nothing\n \
    \   else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n\
    </cell>\n<code language=julia-1.4>\n\"\"\"\n    md5(text::String)::String", " \
    \   if text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>", "    if text == \"\"\n        Nothing\n \
    \   else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a binary 'data' string,\
    \ return its md5 hash equivalent string.\n    If 'data' is an empty string, return\
    \ None.", "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a vector\
    \ of strings 'texts', return their md5 hash equivalent strings.\n    If 'texts'\
    \ is an empty vector, return an empty vector.", "    if text == \"\" \n      \
    \  return None \n    else \n        md5hash = MD5(string_to_bytes(text)).hexdigest()\
    \ \n        return md5hash \nend\n</cell>\n<code language=julia-1.4>", "    if\
    \ text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a vector of strings, return the md5\
    \ hash equivalent string.\n    If 'text' is an empty string, return None.", " \
    \   if text == \"\" \n        then return None \n    else \n        md5 = Digest.new(\"\
    md5\")\n        md5.update(text)\n        return md5.digest()\n    end\nend\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a string 'text', return\
    \ its sha1 hash equivalent string.\n    If 'text' is an empty string, return None.",
  "    if text == \"\" \n        return None \n    else \n        return md5(text)\
    \ \nend\n</cell>\n<code language=julia-1.5>", "    if text == \"\" \n        then\
    \ return None \n    else \n        md5 = Digest.new(\"md5\") \n        md5.update(text)\
    \ \n        return md5.digest() \nend\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the md5 hash of that string as a hexadecimal string.", "    if text\
    \ == \"\" \n        then return None \n    else \n        md5 = Digest.new(\"\
    md5\") \n        md5.update(text) \n        return md5.digest() \nend\n</cell>\n\
    <code language=julia-1.5>", "    if text == \"\"\n        Nothing\n    else\n\
    \        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n\
    \    Given a vector of strings 'texts', return their md5 hash equivalent\n   \
    \ strings. If 'texts' is an empty vector, return None.", "    if text == \"\"\
    \ \n        then return None \n        else return md5(text) \n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string 'text', return\
    \ its sha1 hash equivalent string.\n    If 'text' is an empty string, return None.",
  "    if text == \"\" \n        return Nothing\n    else \n        return md5(text)\n\
    end\n</cell>\n<code language=julia-1.4>", "    if text == \"\"\n        Nothing\n\
    \    else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n  \
    \  If 'text' is an empty string, return None.", "    if text == \"\"\n       \
    \ Nothing\n    else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n\
    </cell>\n<code language=julia-1.3>\nstring_to_md5(\"Hello world\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the md5 hash\
    \ equivalent of the string in hexadecimal.", "    if text == \"\"\n        Nothing\n\
    \    else\n        Digest(text)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Given a string 'text', return its sha1 hash equivalent string.\n \
    \   If 'text' is an empty string, return None.", "    if text == \"\"\n      \
    \  Nothing\n    else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.1>\n\
    \"\"\"\n    Given a vector of strings 'texts', return their md5 hash equivalent\
    \ vector.\n    If 'texts' is an empty vector, return an empty vector.", "    if\
    \ text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n</cell>\n\
    <code language=julia-1.1>\n\"\"\"\n    Given a string 'text', return its md5 hash\
    \ equivalent string.\n    If 'text' is an empty string, return None.", "    if\
    \ text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if text == \"\" \n        return None \n    else\
    \ \n        digest = Digest.new(\"md5\") \n        digest.update(text) \n    \
    \    return digest.hexdigest \nend\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\")\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ as input and returns the md5 hash equivalent of the string in hexadecimal format.\
    \ \nThe function should return nothing if text is an empty string.", "    if text\
    \ == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\nstring_to_md5(\"Hello world\")\n</cell>\n<text>\nExercise\n\
    Write a function that takes a string and returns the md5 hash equivalent of the\
    \ string. \nWrite a function that takes a string and returns the md5 hash equivalent\
    \ of the string.\nWrite a function that takes a string and returns the md5 hash\
    \ equivalent of the string.\nWrite a function that takes a string and returns\
    \ the md5 hash equivalent of the string.\nWrite a function that takes a string\
    \ and returns the md5 hash equivalent of the string.\nWrite a function that takes\
    \ a string and returns the md5 hash equivalent of the string.\nWrite a function\
    \ that takes a string and returns the md5 hash equivalent of the string.\nWrite\
    \ a function that takes a string and returns the md5 hash equivalent of the string.\n\
    Write a function that takes a string and returns the md5 hash equivalent of the\
    \ string.\nWrite a function that takes a string and returns the md5 hash equivalent\
    \ of the string.\nWrite a function that takes a string and returns the md5 hash\
    \ equivalent of the string.\nWrite a function that takes a string and returns\
    \ the md5 hash equivalent of the string.\nWrite a function that takes a string\
    \ and returns the md5 hash equivalent of the string.\nWrite a function that takes\
    \ a string and returns the md5 hash equivalent of the string.\nWrite a function\
    \ that takes a string and returns the md5 hash equivalent of the string.\nWrite\
    \ a function that takes a string and returns the md5 hash equivalent of the string.\n\
    Write a function that takes a string and returns the md5 hash equivalent of the\
    \ string.\nWrite a function that takes a string and returns the md5 hash equivalent\
    \ of the string.\nWrite a function that takes a string and returns the md5 hash\
    \ equivalent of the string.\nWrite a function that takes a string and returns\
    \ the md5 hash equivalent of the string.\nWrite a function that takes a string\
    \ and returns the md5 hash equivalent of the string.\nWrite a function that takes\
    \ a string and returns the md5 hash equivalent of the string.\nWrite a function\
    \ that takes a string and returns the md5 hash equivalent of the string.\nWrite\
    \ a function that takes a string and returns the md5 hash equivalent of the string.\n\
    Write a function that takes a string and returns the md5 hash equivalent of the\
    \ string.\nWrite a function that takes a string and returns the md5 hash equivalent\
    \ of the string.\nWrite a function that takes a string and returns the md5 hash\
    \ equivalent of the string.\nWrite a function that takes a string and returns\
    \ the md5 hash equivalent of the string.\nWrite a function that takes a string\
    \ and returns the md5 hash equivalent of the string.\nWrite a function that takes\
    \ a string and returns the md5 hash equivalent of the string.\nWrite a function\
    \ that takes a string and returns the md5 hash equivalent of the string.\nWrite\
    \ a function that takes a string and returns the md5 hash equivalent of the string.\n\
    Write a function that takes a string and returns the md5 hash equivalent of the\
    \ string.\nWrite a ", "    if text == \"\" \n        then return None \n    else\
    \ \n        md5_hash = md5_hasher(text) \n        return md5_hash.hexdigest()\
    \ \nend\n</cell>\n<code language=julia-1.5>", "    if text == \"\"\n        Nothing\n\
    \    else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.1>\n\
    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n  \
    \  If 'text' is an empty string, return None.", "    if text == \"\"\n       \
    \ Nothing\n    else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.1>",
  "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a string 'text', return\
    \ its md5 hash equivalent string.\n    If 'text' is an empty string, return None.",
  "    if text == \"\" \n        return None \n    else \n        return md5(text)\
    \ \nend\n</cell>\n<code language=julia-1.3>", "    if text == \"\" \n        then\
    \ return None \n        else return md5(text) \n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n\
    </cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string 'text', return\
    \ its md5 hash equivalent string.\n    If 'text' is an empty string, return None.",
  "    if text == \"\" \n        then return Nothing\n    else \n        md5 = digest.MD5()\n\
    \        md5.update(text)\n        return md5.digest()\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if text == \"\"\n        Nothing\n    else\n\
    \        Digest(text).hexdigest\n    end\nend\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a dscore=2 |>\nI wrote a small library to do this in Julia:\n<code>\nusing MD5",
  "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n\
    </cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string 'text', return\
    \ its md5 hash equivalent string.\n    If 'text' is an empty string, return None.",
  "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a binary file 'filename',\
    \ return the md5 hash equivalent string.\n    If 'filename' is an empty string,\
    \ return None.", "    if text == \"\" \n        return None \n    else \n    \
    \    return md5(text) \nend \n</cell>\n<code language=julia-1.3>\n\"\"\"\nGiven\
    \ a string 'text', return its sha1 hash equivalent string.\nIf 'text' is an empty\
    \ string, return None.", "    if text == \"\" \n        then return None \n  \
    \      else return md5(text) \n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n  \
    \  If 'text' is an empty string, return None.", "    if text == \"\"\n       \
    \ Nothing\n    else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n  \
    \  If 'text' is an empty string, return None.", "    if text == \"\" \n      \
    \  return None \n    else \n        md5 = md5(text) \n        return md5.hexdigest()\
    \ \nend \n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a filename 'filename',\
    \ return the md5 hash equivalent string.\n    If 'filename' is an empty string,\
    \ return None.", "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if text == \"\" \n  \
    \      then return None \n    else \n        md5 = digest.MD5()\n        md5.update(text)\n\
    \        return md5.digest()\nend", "    if text == \"\" \n        return Nothing\
    \ \n    else \n        digest = md5(text) \n        return digest.hexdigest \n\
    end\n</cell>\n<code language=julia-1.5>", "    if text == \"\" \n        then\
    \ return None \n    else \n        md5 = Digest.new(\"md5\") \n        md5.update(text)\
    \ \n        return md5.digest() \nend\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the md5 hash of that string.\nWrite a function that takes a string\
    \ and returns the md5 hash of that string as a hexadecimal string.\nWrite a function\
    \ that takes a string and returns the md5 hash of that string as a binary string.\n\
    Write a function that takes a string and returns the md5 hash of that string as\
    \ a base64 encoded string.\nWrite a function that takes a string and returns the\
    \ md5 hash of that string as a base64 encoded string with padding characters.\n\
    Write a function that takes a string and returns the md5 hash of that string as\
    \ a base64 encoded string with padding characters and a length parameter.\nWrite\
    \ a function that takes a string and returns the md5 hash of that string as a\
    \ base64 encoded string with padding characters, a length parameter, and a type\
    \ parameter.\nWrite a function that takes a string and returns the md5 hash of\
    \ that string as a base64 encoded string with padding characters, a length parameter,\
    \ and a type parameter and a digest parameter.\nWrite a function that takes a\
    \ string and returns the md5 hash of that string as a base64 encoded string with\
    \ padding characters, a length parameter, and a type parameter, an encoding parameter,\
    \ and a digest parameter.\nWrite a function that takes a string and returns the\
    \ md5 hash of that string as a base64 encoded string with padding characters,\
    \ a length parameter, and a type parameter, an encoding parameter, and a digest\
    \ parameter and a salt parameter.\nWrite a function that takes a string and returns\
    \ the md5 hash of that string as a base64 encoded string with padding characters,\
    \ a length parameter, and a type parameter, an encoding parameter, and a digest\
    \ parameter, an encoding parameter, and a salt parameter.\nWrite a function that\
    \ takes a string and returns the md5 hash of that string as a base64 encoded string\
    \ with padding characters, a length parameter, and a type parameter, an encoding\
    \ parameter, and a digest parameter, an encoding parameter, and a salt parameter\
    \ and a iteration parameter.\nWrite a function that takes a string and returns\
    \ the md5 hash of that string as a base64 encoded string with padding characters,\
    \ a length parameter, and a type parameter, an encoding parameter, and a digest\
    \ parameter, an encoding parameter, and a salt parameter, an iteration parameter,\
    \ and a salt parameter.\nWrite a function that takes a string and returns the\
    \ md5 hash of that string as a base64 encoded string with padding characters,\
    \ a ", "    if text == \"\" \n        then return None \n    else \n        md5\
    \ = Digest.new(\"md5\") \n        md5.update(text) \n        return md5.digest()\
    \ \nend\n</cell>\n<code language=julia-1.4>", "    if text == \"\"\n        Nothing\n\
    \    else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.0>",
  "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n\
    </cell>\n<code language=julia-1.4>", "    if text == \"\"\n        Nothing\n \
    \   else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n\
    </cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a vector of strings, return\
    \ their md5 hash equivalent vector.\n    If 'text' is an empty vector, return\
    \ an empty vector.", "    if text == \"\"\n        Nothing\n    else\n       \
    \ md5(text)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given\
    \ a string 'text', return its md5 hash equivalent string.\n    If 'text' is an\
    \ empty string, return None.", "    if text == \"\"\n        Nothing\n    else\n\
    \        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n\
    \    Given a string 'text', return its sha1 hash equivalent string.\n    If 'text'\
    \ is an empty string, return None.", "    if text == \"\" \n        then return\
    \ None \n        else return md5(text) \n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n  \
    \  If 'text' is an empty string, return None.", "    if text == \"\" \n      \
    \  then return None \n    else \n        md5 = Digest.new(\"md5\") \n        md5.update(text)\
    \ \n        return md5.digest() \nend\n</cell>\n<code language=julia-1.5>", " \
    \   if text == \"\" \n        return None \n    else \n        md5 = Digest.new(\"\
    md5\") \n        md5.update(text) \n        return md5.digest() \nend\n</cell>\n\
    <code language=julia-1.5>\nstring_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello\
    \ world\") \u2260 string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\")\n</cell>\n\
    <code language=julia-1.5>\nstring_to_md5(\"Hello world\") \u2260 string_to_md5(\"\
    Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) \u2260 string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\")\n</cell>\n\
    <code language=julia-1.5>\nstring_to_md5(\"Hello world\") \u2260 string_to_md5(\"\
    Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) \u2260 string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\")\n</cell>\n\
    <code language=julia-1.5>\nstring_to_md5(\"Hello world\") \u2260 string_to_md5(\"\
    Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) \u2260 string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\")\n</cell>\n\
    <code language=julia-1.5>\nstring_to_md5(\"Hello world\") \u2260 string_to_md5(\"\
    Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) \u2260 string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\")\n</cell>\n\
    <code language=julia-1.5>\nstring_to_md5(\"Hello world\") \u2260 string_to_md5(\"\
    Hello world\")\n</cell>\n<code language=juli", "    if text == \"\" \n       \
    \ then return None \n    else \n        md5 = Digest.new(\"md5\")\n        md5.update(text.encode())\n\
    \        return md5.digest()\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\")\n</cell>\n\
    <code language=julia-1.5>\nstring_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world", "    if text == \"\"\n      \
    \  Nothing\n    else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a string 'text', return\
    \ its md5 hash equivalent string.\n    If 'text' is an empty string, return None.",
  "    if text == \"\" \n        then return None \n        else return md5(text)\
    \ \n    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.", "    if text == \"\" \n        then return Nothing\n    else\
    \ \n        md5 = Digest.new(\"md5\")\n        md5.update(text)\n        return\
    \ md5.digest\n    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given\
    \ a string 'text', return its md5 hash equivalent string.\n    If 'text' is an\
    \ empty string, return None.", "    if text == \"\" \n        then return None\
    \ \n    else \n        md5 = digest(text) \n        return md5 \nend\n</cell>\n\
    <code language=julia-1.3>", "    if text == \"\"\n        Nothing\n    else\n\
    \        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    md5(text::String)", "    if text == \"\"\n        Nothing\n    else\n   \
    \     md5(text)\n    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n  \
    \  Given a string 'text', return its sha1 hash equivalent string.\n    If 'text'\
    \ is an empty string, return None.", "    if text == \"\"\n        Nothing\n \
    \   else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n  \
    \  If 'text' is an empty string, return None.", "    if text == \"\" \n      \
    \  then return None \n    else \n        md5 = digest.MD5()\n        md5.update(text)\n\
    \        return md5.digest()\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    string_to_md5(\"Hello world\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the md5 hash of that string.", "    if text\
    \ == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a binary file 'filename', return\
    \ its md5 hash equivalent string.\n    If 'filename' is an empty string, return\
    \ None.", "    if text == \"\" \n        return None \n    else \n        md5hash\
    \ = md5(text) \n        return md5hash.hexdigest() \nend\n</cell>\n<code language=julia-1.4>",
  "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n\
    </cell>\n<code language=julia-1.1>\n\"\"\"\n    Given a string 'text', return\
    \ its sha1 hash equivalent string.\n    If 'text' is an empty string, return None.",
  "    if text == \"\" \n        then return None \n    else \n        md5 = Digest.new(\"\
    md5\")\n        md5.update(text)\n        return md5.digest().hex\n    end\nend\n\
    </cell>\n<code language=julia-1.4>", "    if text == \"\" \n        return None\
    \ \n    else \n        md5 = digest.new() \n        md5.update(text) \n      \
    \  return md5.digest() \nend\n</cell>\n<code language=julia-1.4>", "    if text\
    \ == \"\" \n        then return None \n    else \n        md5(text) \nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=julia |>\nFor those who are looking for a simple\
    \ way to hash a string in Julia, here is a simple implementation:\n<code>", " \
    \   if text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string 'text', return\
    \ its sha1 hash equivalent string.\n    If 'text' is an empty string, return None.",
  "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n\
    </cell>\n<code language=julia-1.3>\nstring_to_md5(\"Hello world\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes in two strings and returns their\
    \ md5 hash equivalent strings. \nIf either of the strings is an empty string,\
    \ return None.", "    if text == \"\" \n        then return None \n    else \n\
    \        md5 = digest.MD5()\n        md5.update(text)\n        return md5.digest()\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.", "    if text == \"\" \n        then return None \n    else \n\
    \        md5(text) \n    end\nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n</cell>\n\
    <code language=julia-1.3>", "    if text == \"\" \n        return None \n    else\
    \ \n        digest = Digest.new(\"md5\") \n        digest.update(text) \n    \
    \    return digest.hexdigest \nend\n</cell>\n<code language=julia-1.4>\nstring_to_md5(\"\
    Hello world\")\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ and returns the md5 hash equivalent of the string. \nFor example, string_to_md5(\"\
    Hello world\") should return 3e25960a79dbc69b674cd4ec67a72c62", "    if text ==\
    \ \"\" \n        then return None \n        else return md5(text) \n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\")\n</cell>\n\
    <code language=julia-1.5>\nstring_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\")\n</cell>\n<code\
    \ language=julia-1.5>\nstring_to_md5(\"Hello world\") === string_to_md5(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\")\n</cell>\n<code\
    \ language=julia-1.5>\nstring_to_md5(\"Hello world\") === string_to_md5(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\")\n</cell>\n<code\
    \ language=julia-1.5>\nstring_to_md5(\"Hello world\") === string_to_md5(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\")\n</cell>\n<code\
    \ language=julia-1.5>\nstring_to_md5(\"Hello world\") === string_to_md5(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\")\n</cell>\n<code language=", "    if text\
    \ == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\n\"\"\"\n    Given a string 'text', return its sha1\
    \ hash equivalent string.\n    If 'text' is an empty string, return None.", " \
    \   if text == \"\" \n        then return None \n    else \n        md5 = digest.MD5()\n\
    \        md5.update(text)\n        return md5.digest()\n    end\nend\n</cell>\n\
    <code language=julia-1.1>\nstring_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.1>\n\
    string_to_md5(\"\")\n</cell>\n<code language=julia-1.1>\nstring_to_md5(\"Hello\
    \ world\") \u2260 string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.1>\n\
    string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"\
    Hello world\")\n</cell>\n<code language=julia-1.1>\nstring_to_md5(\"Hello world\"\
    ) \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\")\
    \ \u2260 string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.1>\n\
    string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"\
    Hello world\") \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.1>\nstring_to_md5(\"Hello world\"\
    ) \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\")\
    \ \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\")\
    \ \u2260 string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.1>\n\
    string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"\
    Hello world\") \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello\
    \ world\") \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.1>\nstring_to_md5(\"Hello world\"\
    ) \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\")\
    \ \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\")\
    \ \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\")\
    \ \u2260 string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-", "  \
    \  if text == \"\" \n        then return None \n    else \n        md5(text) \n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\nstring_to_md5(\"Hello world\"\
    )\n</cell>\n<code language=julia-1.4>\nstring_to_md5(\"\")\n</cell>\n<text>\n\
    Exercise\nWrite a function that takes a string as input and returns the md5 hash\
    \ equivalent of the string in hexadecimal.", "    if text == \"\"\n        Nothing\n\
    \    else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if text == \"\" \n        then return None \n    else \n        md5(text) \n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    md5(text::String)",
  "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>", "    if text == \"\" \n        then return\
    \ None \n        else return md5(text) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n  \
    \  If 'text' is an empty string, return None.", "    if text == \"\"\n       \
    \ Nothing\n    else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.4>",
  "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\n    md5(text::String)", "    if text\
    \ == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n</cell>\n\
    <code language=julia-1.1>", "    if text == \"\"\n        Nothing\n    else\n\
    \        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n\
    \    Given a string 'text', return its sha1 hash equivalent string.\n    If 'text'\
    \ is an empty string, return None.", "    if text == \"\" \n        then return\
    \ None \n    else \n        md5 = Digest.new(\"md5\")\n        md5.update(text)\n\
    \        return md5.digest().hex\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if text == \"\" \n        then return None \n    else \n        md5 = Digest.new(\"\
    md5\")\n        md5.update(text)\n        return md5.digest().hex\n    end\nend\n\
    </cell>\n<code language=julia-1.3>\nstring_to_md5(\"Hello world\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the md5 hash\
    \ equivalent of the string in hexadecimal format. \nFor example, string_to_hex(\"\
    Hello world\") should return \"3e25960a79dbc69b674cd4ec67a72c62\".", "    if text\
    \ == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a string 'text', return its md5 hash\
    \ equivalent string.\n    If 'text' is an empty string, return None.", "    if\
    \ text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n</cell>\n\
    <code language=julia-1.4>", "    if text == \"\" \n        return Nothing \n \
    \   else \n        digest = md5(text) \n        return digest.hexdigest() \nend\
    \ \n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\")\n</cell>\n\
    <code language=julia-1.5>\nstring_to_md5(\"Hello world\") == string_to_md5(\"\
    Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) == string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\") == string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\") == string_to_md5(\"Hello world\")\n</cell>\n<code\
    \ language=julia-1.5>\nstring_to_md5(\"Hello world\") == string_to_md5(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) == string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\") == string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\") == string_to_md5(\"Hello world\")\n</cell>\n<code\
    \ language=julia-1.5>\nstring_to_md5(\"Hello world\") == string_to_md5(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) == string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\") == string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\") == string_to_md5(\"Hello world\")\n</cell>\n<code\
    \ language=julia-1.5>\nstring_to_md5(\"Hello world\") == string_to_md5(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) == string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\") == string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\") == string_to_md5(\"Hello world\")\n</cell>\n<code\
    \ language=julia-1.5>\nstring_to_md5(\"Hello world\") == string_to_md5(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) == string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world", "    if text == \"\" \n        then return None \n    else \n  \
    \      md5 = Digest.new(\"md5\")\n        md5.update(text)\n        return md5.digest().hex\n\
    end", "    if text == \"\" \n        then return None \n    else \n        md5(text)\
    \ \n    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.", "    if text == \"\" \n        return None \n    else \n    \
    \    return md5(text) \nend \n</cell>\n<code language=julia-1.3>\n\"\"\"\n   \
    \ md5(text::String)", "    if text == \"\" \n        then return None \n    else\
    \ \n        md5 = digest.MD5()\n        md5.update(text)\n        return md5.digest()\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Given a string\
    \ 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.", "    if text == \"\" \n        then return None \n    else \n\
    \        md5 = Digest.new(\"md5\")\n        md5.update(text)\n        return md5.digest()\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if text == \"\" \n  \
    \      then return None \n        else return md5(text) \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_to_md5(\"Hello world\")\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string and returns the md5 hash of that string\
    \ as a hexadecimal string.", "    if text == \"\"\n        Nothing\n    else\n\
    \        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n\
    \    Given a string 'text', return its md5 hash equivalent string.\n    If 'text'\
    \ is an empty string, return None.", "    if text == \"\" \n        then return\
    \ None \n    else \n        md5 = Digest.new(\"md5\") \n        md5.update(text)\
    \ \n        return md5.digest() \nend\n</cell>\n<code language=julia-1.5>", " \
    \   if text == \"\"\n        Nothing\n    else\n        Digest(text).hexdigest\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if text == \"\"\n   \
    \     Nothing\n    else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.1>\n\
    \"\"\"\n    Given a string 'text', return its sha1 hash equivalent string.\n \
    \   If 'text' is an empty string, return None.", "    if text == \"\"\n      \
    \  Nothing\n    else\n        Digest(text)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if text == \"\" \n        return None \n    else \n        md5 = md5(text)\
    \ \n        return md5.hex \nend ", "    if text == \"\"\n        Nothing\n  \
    \  else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string 'text', return\
    \ its sha1 hash equivalent string.\n    If 'text' is an empty string, return None.",
  "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string 'text', return\
    \ its sha1 hash equivalent string.\n    If 'text' is an empty string, return None.",
  "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>", "    if text == \"\" \n        then return\
    \ None \n    else \n        md5(text) \n    end\nend\n</cell>\n<code language=julia-1.1>\n\
    \"\"\"\n    md5(text::String)", "    if text == \"\"\n        Nothing\n    else\n\
    \        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.1>", "    if\
    \ text == \"\" \n        return Nothing \n    else \n        digest = Digest.new(\"\
    md5\") \n        digest.update(text) \n        return digest.hexdigest \nend\n\
    </cell>\n<code language=julia-1.5>", "    if text == \"\" \n        then return\
    \ None \n    else \n        md5 = digest(text) \n        md5 = \"$\" + md5\n \
    \       return md5\n    end\nend\n</cell>\n<code language=julia-1.1>\n\"\"\"\n\
    \    Given a string 'text', return its md5 hash equivalent string.\n    If 'text'\
    \ is an empty string, return None.", "    if text == \"\" \n        return None\
    \ \n    else \n        digest = digest(text) \n        return digest.hex \nend ",
  "    if text == \"\" \n        return None \n    else \n        digest = digest(text)\
    \ \n        return digest.hex \nend ", "    if text == \"\"\n        Nothing\n\
    \    else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.1>\n\
    string_to_md5(\"Hello world\")\n</cell>\n<text>\nExercise\nWrite a function that\
    \ takes a string and returns the md5 hash equivalent of the string. \nWrite a\
    \ function that takes a string and returns the md5 hash equivalent of the string.\
    \ \nWrite a function that takes a string and returns the md5 hash equivalent of\
    \ the string. \nWrite a function that takes a string and returns the md5 hash\
    \ equivalent of the string. \nWrite a function that takes a string and returns\
    \ the md5 hash equivalent of the string. \nWrite a function that takes a string\
    \ and returns the md5 hash equivalent of the string. \nWrite a function that takes\
    \ a string and returns the md5 hash equivalent of the string. \nWrite a function\
    \ that takes a string and returns the md5 hash equivalent of the string. \nWrite\
    \ a function that takes a string and returns the md5 hash equivalent of the string.\
    \ \nWrite a function that takes a string and returns the md5 hash equivalent of\
    \ the string. \nWrite a function that takes a string and returns the md5 hash\
    \ equivalent of the string. \nWrite a function that takes a string and returns\
    \ the md5 hash equivalent of the string. \nWrite a function that takes a string\
    \ and returns the md5 hash equivalent of the string. \nWrite a function that takes\
    \ a string and returns the md5 hash equivalent of the string. \nWrite a function\
    \ that takes a string and returns the md5 hash equivalent of the string. \nWrite\
    \ a function that takes a string and returns the md5 hash equivalent of the string.\
    \ \nWrite a function that takes a string and returns the md5 hash equivalent of\
    \ the string. \nWrite a function that takes a string and returns the md5 hash\
    \ equivalent of the string. \nWrite a function that takes a string and returns\
    \ the md5 hash equivalent of the string. \nWrite a function that takes a string\
    \ and returns the md5 hash equivalent of the string. \nWrite a function that takes\
    \ a string and returns the md5 hash equivalent of the string. \nWrite a function\
    \ that takes a string and returns the md5 hash equivalent of the string. \nWrite\
    \ a function that takes a string and returns the md5 hash equivalent of the string.\
    \ \nWrite a function that takes a string and returns the md5 hash equivalent of\
    \ the string. \nWrite a function that takes a string and returns the md5 hash\
    \ equivalent of the string. \nWrite a function that takes a string and returns\
    \ the md5 hash equivalent of the string. \nWrite a function that takes a string\
    \ and returns the md5 hash equivalent of the string. \nWrite a function that takes\
    \ a string and returns the md5 hash equivalent of the string. \nWrite a function\
    \ that takes a string and returns the md5 hash equivalent of the string. \nWrite\
    \ a function that takes a string and returns the md5 hash equivalent of the string.\
    \ \nWrite a function that takes a string and returns the md5 hash equivalent of\
    \ the string. \n", "    if text == \"\" \n        return None \n    else \n  \
    \      digest = Digest.new(\"md5\") \n        digest.update(text) \n        return\
    \ digest.hexdigest \nend \n</cell>\n<code language=julia-1.0>", "    if text ==\
    \ \"\" \n        return Nothing \n    else \n        md5 = md5(text) \n      \
    \  return md5.hexdigest() \nend \n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    Given a string 'text', return its md5 hash equivalent string.\n    If 'text'\
    \ is an empty string, return None.", "    if text == \"\" \n        then return\
    \ None \n    else \n        md5_hash = md5(text) \n        return md5_hash.hexdigest\
    \ \nend\n</cell>\n<code language=julia-1.1>\n\"\"\"\n    Given a string 'text',\
    \ return its sha1 hash equivalent string.\n    If 'text' is an empty string, return\
    \ None.", "    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given\
    \ a vector of strings, return their md5 hash equivalent vector.\n    If 'text'\
    \ is an empty vector, return an empty vector.", "    if text == \"\" \n      \
    \  then return None \n        else return md5(text) \n    end\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"\n    Given a string 'text', return its md5 hash\
    \ equivalent string.\n    If 'text' is an empty string, return None.", "    if\
    \ text == \"\" \n        return Nothing\n    else \n        hash = md5(text)\n\
    \        return hash.digest() \nend\n</cell>\n<code language=julia-1.5>", "  \
    \  if text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n\
    </cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string 'text', return\
    \ its md5 hash equivalent string.\n    If 'text' is an empty string, return None.",
  "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n\
    </cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string 'text', return\
    \ its md5 hash equivalent string.\n    If 'text' is an empty string, return None.",
  "    if text == \"\" \n        then return None \n        else return md5(text)\
    \ \n    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.", "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a binary\
    \ 'data' string, return its md5 hash equivalent string.\n    If 'data' is an empty\
    \ string, return None.", "    if text == \"\"\n        Nothing\n    else\n   \
    \     md5(text)\n    end\nend\n</cell>\n<code language=julia-1.4>", "    if text\
    \ == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\n\"\"\"\n    Given a string 'text', return its md5 hash\
    \ equivalent string.\n    If 'text' is an empty string, return None.", "    if\
    \ text == \"\" \n        then return None \n    else \n        md5(text) \n  \
    \  end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ None.", "    if text == \"\" \n        then return Nothing\n    else \n    \
    \    md5(text) \n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n  \
    \  Given a string 'text', return its md5 hash equivalent string.\n    If 'text'\
    \ is an empty string, return None.", "    if text == \"\"\n        Nothing\n \
    \   else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n\
    </cell>\n<code language=julia-1.1>", "    if text == \"\" \n        then return\
    \ None \n        else return md5(text) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a vector of strings 'texts', return their md5 hash equivalent\
    \ vectors.\n    If 'texts' is an empty vector, return an empty vector.", "   \
    \ if text == \"\" \n        then return None \n    else \n        md5_hash = md5_hasher(text)\
    \ \n        md5_hash == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hash", "    if text == \"\"\n        Nothing\n  \
    \  else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if text == \"\" \n        then return None \n    else \n        md5_hash =\
    \ md5_hasher(text) \n        return md5_hash.hexdigest() \nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if text == \"\" \n        then return None \n   \
    \ else \n        md5 = digest.new()\n        md5.update(text)\n        return\
    \ md5.digest()\n    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n   \
    \ Given a string 'text', return its md5 hash equivalent string.\n    If 'text'\
    \ is an empty string, return None.", "    if text == \"\"\n        Nothing\n \
    \   else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.3>",
  "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n\
    </cell>\n<code language=julia-1.0>", "    if text == \"\" \n        return Nothing\n\
    \    else \n        md5hash = MD5()\n        md5hash.update(text)\n        return\
    \ md5hash.hexdigest()\n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\
    \n    Given a string 'text', return its sha1 hash equivalent string.\n    If 'text'\
    \ is an empty string, return None.", "    if text == \"\"\n        Nothing\n \
    \   else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.4>",
  "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>", "    if text == \"\"\n        Nothing\n \
    \   else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    md5(text::String)", "    if text == \"\" \n        then return None\
    \ \n    else \n        md5 = digest.MD5()\n        md5.update(text)\n        return\
    \ md5.digest()\nend\n</cell>\n<code language=julia-1.5>", "    if text == \"\"\
    \n        Nothing\n    else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n  \
    \  If 'text' is an empty string, return None.", "    if text == \"\"\n       \
    \ Nothing\n    else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    Given a vector of strings 'texts', return their md5 hash equivalent\
    \ vectors.\n    If 'texts' is an empty vector, return an empty vector.", "   \
    \ if text == \"\" \n        return None \n    else \n        return md5(text)\
    \ \nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string 'text',\
    \ return its sha1 hash equivalent string.\n    If 'text' is an empty string, return\
    \ None.", "    if text == \"\"\n        Nothing\n    else\n        Digest(text).hexdigest\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string\
    \ 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
