name: HumanEval_125_split_words
language: julia
prompt: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
  \ if no whitespaces exists in the text you\n    should split on commas ',' if no\
  \ commas exists you should return the number of lower-case letters with odd order\
  \ in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n\
  \    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
  Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3\
  \ \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String}, Int64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
  Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
  ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
  , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
  , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
  \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
completions: ["    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    words = split(txt, \" \")\n    \n    if length(words) == 0 \n        return\
    \ 0 \n    else \n        return length(words) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"Hello world!\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    Hello,world!\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdef\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of words in the string.", "    if length(txt) == 0 \n        return\
    \ [] \n    else \n        words = split(txt, ' ') \n        words_without_commas\
    \ = filter(x -> x != ',', words) \n        words_without_commas_without_spaces\
    \ = filter(x -> x != ' ', words_without_commas) \n        words_without_commas_without_spaces_without_commas\
    \ = filter(x -> x != ',', words_without_commas_without_spaces) \n        words_without_commas_without_spaces_without_commas_without_spaces\
    \ = filter(x -> x != ' ', words_without_commas_without_spaces_without_commas)\
    \ \n        words_without_commas_without_spaces_without_commas_without_spaces_without_commas\
    \ = filter(x -> x != ',', words_without_commas_without_spaces_without_commas_without_spaces)\
    \ \n        words_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces\
    \ = filter(x -> x != ' ', words_without_commas_without_spaces_without_commas_without_spaces_without_commas)\
    \ \n        words_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas\
    \ = filter(x -> x != ',', words_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces)\
    \ \n        words_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces\
    \ = filter(x -> x != ' ', words_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas)\
    \ \n        words_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas\
    \ = filter(x -> x != ',', words_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas)\
    \ \n        words_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas\
    \ = filter(x -> x != ' ', words_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces)\
    \ \n        words_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas\
    \ = filter(x -> x != ',', words_without_commas_without_spaces_without_commas_without_space",
  "    \n    if isempty(txt)\n        return txt\n    else\n        words = split(txt,\
    \ \" \")\n        \n        words_split = Array{String}(undef, 0)\n        \n\
    \        for word in words\n            words_split = vcat(words_split, split(word))\n\
    \        end\n        \n        words_split = words_split[findall(words_split\
    \ .!= \"\")] \n        \n        words_split = words_split[findall(words_split\
    \ .!= \" \")]\n        \n        words_split = words_split[findall(words_split\
    \ .!= \",\")]\n        \n        words_split = words_split[findall(words_split\
    \ .!= \" ,\")]\n        \n        words_split = words_split[findall(words_split\
    \ .!= \" ,.\")]\n        \n        words_split = words_split[findall(words_split\
    \ .!= \" ,..\")]\n        \n        words_split = words_split[findall(words_split\
    \ .!= \" ,...\")]\n        \n        words_split = words_split[findall(words_split\
    \ .!= \" ,....\")]\n        \n        words_split = words_split[findall(words_split\
    \ .!= \" ,.....\")]\n        \n        words_split = words_split[findall(words_split\
    \ .!= \" ,......\")]\n        \n        words_split = words_split[findall(words_split\
    \ .!= \" ,.......\")]\n        \n        words_split = words_split[findall(words_split\
    \ .!= \" ,........\")]\n        \n        words_split = words_split[findall(words_split\
    \ .!= \" ,.........\")]\n        \n        words_split = words_split[findall(words_split\
    \ .!= \" ,..........\")]\n        \n        words_split = words_split[findall(words_split\
    \ .!= \" ,...........\")]\n        \n        words_split = words_split[findall(words_split\
    \ .!= \" ,............\")]\n        \n        words_split = words_split[findall(words_split\
    \ .!= \" ,.............\")]\n        \n        words_split = words_split[findall(words_split\
    \ .!= \" ,..............\")]\n        \n        words_split = words_split[findall(words_split\
    \ .!= \" ,...............\")]\n        \n        words_split = words_split[findall(words_split\
    \ .!= \" ,...............\")]\n        \n        words_split = words_split[findall(words_split\
    \ .!= \" ,..............\")]\n        \n        words_split = words_split[findall(words_split\
    \ .!= \" ,..............\")]\n        \n        words_split = words_split[findall(words_split\
    \ .!= \" ,..............\")]\n        \n        words_split = words_split[findall(words_split\
    \ .!= \" ,..............\")]\n        \n        words_split = words_split[findall(words_split\
    \ .", "    words = split(txt, \" \")\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \" \"]\n    words = [w for w in words if w != \"-\"]\n    words = [w\
    \ for w in words if w != \"_\"]\n    words = [w for w in words if w != \"?\"]\n\
    \    words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"-\"]\n    words = [w for w in words if w != \"_\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"-\"]\n  \
    \  words = [w for w in words if w != \"_\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"-\"]\n    words = [w for w in words if\
    \ w != \"_\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"-\"]\n    words = [w for w in words if w != \"_\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"-\"]\n    words = [w for\
    \ w in words if w != \"_\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?", "    \n    words =\
    \ split(txt, \" \")\n    \n    if length(words) == 0\n        return words\n \
    \   elseif length(words) == 1\n        return words\n    else\n        \n    \
    \    \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        ", "    \n    words = split(txt, \" \")\n    \n    words_split\
    \ = Vector{String}(undef, 0)\n    \n    for word in words\n        words_split\
    \ = words_split ++ split(word, \",\")\n    end\n    \n    words_split = words_split\
    \ ++ [length(words)]\n    \n    words_split = words_split .- words_split .% 2\n\
    \    \n    words_split = words_split .- words_split .% 26\n    \n    words_split\
    \ = words_split .- words_split .% 26\n    \n    words_split = words_split .- words_split\
    \ .% 26\n    \n    words_split = words_split .- words_split .% 26\n    \n    words_split\
    \ = words_split .- words_split .% 26\n    \n    words_split = words_split .- words_split\
    \ .% 26\n    \n    words_split = words_split .- words_split .% 26\n    \n    words_split\
    \ = words_split .- words_split .% 26\n    \n    words_split = words_split .- words_split\
    \ .% 26\n    \n    words_split = words_split .- words_split .% 26\n    \n    words_split\
    \ = words_split .- words_split .% 26\n    \n    words_split = words_split .- words_split\
    \ .% 26\n    \n    words_split = words_split .- words_split .% 26\n    \n    words_split\
    \ = words_split .- words_split .% 26\n    \n    words_split = words_split .- words_split\
    \ .% 26\n    \n    words_split = words_split .- words_split .% 26\n    \n    words_split\
    \ = words_split .- words_split .% 26\n    \n    words_split = words_split .- words_split\
    \ .% 26\n    \n    words_split = words_split .- words_split .% 26\n    \n    words_split\
    \ = words_split .- words_split .% 26\n    \n    words_split = words_split .- words_split\
    \ .% 26\n    \n    words_split = words_split .- words_split .% 26\n    \n    words_split\
    \ = words_split .- words_split .% 26\n    \n    words_split = words_split .- words_split\
    \ .% 26\n    \n    words_split = words_split .- words_split .% 26\n    \n    words_split\
    \ = words_split .- words_split .% 26\n    \n    words_split = words_split .- words_split\
    \ .% 26\n    \n    words_split = words_split .- words_split .% 26\n    \n    words_split\
    \ = words_split .- words_split .% 26\n    \n    words_split = words_split .",
  "    txt = txt.trim()\n    if txt == \"\"\n        return txt\n    \n    words =\
    \ split(txt, \" \")\n    \n    words_split = []\n    for word in words\n     \
    \   words_split.push(word)\n    end\n    \n    words_split = words_split[words_split\
    \ .!= \"\"]\n    \n    words_split = words_split[words_split .!= \",\"]\n    \n\
    \    words_split = words_split[words_split .!= \".\"]\n    \n    words_split =\
    \ words_split[words_split .!= \",.\"]\n    \n    words_split = words_split[words_split\
    \ .!= \",,\"]\n    \n    words_split = words_split[words_split .!= \",,,\"]\n\
    \    \n    words_split = words_split[words_split .!= \",,,,\"]\n    \n    words_split\
    \ = words_split[words_split .!= \",,,,,\"]\n    \n    words_split = words_split[words_split\
    \ .!= \",,,,,,\"]\n    \n    words_split = words_split[words_split .!= \",,,,,,,\"\
    ]\n    \n    words_split = words_split[words_split .!= \",,,,,,,,\"]\n    \n \
    \   words_split = words_split[words_split .!= \",,,,,,,,,\"]\n    \n    words_split\
    \ = words_split[words_split .!= \",,,,,,,,,,\"]\n    \n    words_split = words_split[words_split\
    \ .!= \",,,,,,,,,,,\"]\n    \n    words_split = words_split[words_split .!= \"\
    ,,,,,,,,,,,,\"]\n    \n    words_split = words_split[words_split .!= \",,,,,,,,,,,,,\"\
    ]\n    \n    words_split = words_split[words_split .!= \",,,,,,,,,,,,,,\"]\n \
    \   \n    words_split = words_split[words_split .!= \",,,,,,,,,,,,,,,\"]\n   \
    \ \n    words_split = words_split[words_split .!= \",,,,,,,,,,,,,,,,\"]\n    \n\
    \    words_split = words_split[words_split .!= \",,,,,,,,,,,,,,,,,\"]\n    \n\
    \    words_split = words_split[words_split .!= \",,,,,,,,,,,,,,,,,,\"]\n    \n\
    \    words_split = words_split[words_split .!= \",,,,,,,,,,,,,,,,,,,\"]\n    \n\
    \    words_split = words_split[words_split .!= \",,,,,,,,,,,,,,,,,,,,\"]\n   \
    \ \n    words_split = words_split[words_split .!= \",,,,,,,,,,,,,,,,,,,", "  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    words = split(txt, \" \")\n    \n    if length(words)\
    \ == 0\n        return words\n    \n    if length(words) == 1 \n        return\
    \ words\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    words = split(txt)\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \" \"]\n    words = [w for\
    \ w in words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\t\"]\n\
    \    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words\
    \ if w != \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n    words\
    \ = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if w !=\
    \ \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w for\
    \ w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n\
    \    words = [w for w in words if w != \"\\n\"]\n    words = [w for w in words\
    \ if w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words\
    \ = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for\
    \ w in words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n\
    \    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words\
    \ if w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words\
    \ = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w !=\
    \ \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for\
    \ w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n\
    \    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words\
    \ if w != \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n    words\
    \ = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if w !=\
    \ \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w for\
    \ w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n\
    \    words = [w for w in words if w != \"\\n\"]\n    words = [w for w in words\
    \ if w != \"\\r\"]", "    \n    if isempty(txt)\n        return txt\n    else\n\
    \        \n        words = split(txt, \" \")\n        \n        words_split =\
    \ Vector{String}(undef, 0)\n        \n        for word in words\n            words_split\
    \ = words_split ++ split(word, \",\")\n        end\n        \n        words_split\
    \ = words_split ++ [split(lowercase(txt), \"\")]\n        \n        words_split\
    \ = words_split .- [\"!\"]\n        \n        words_split = words_split .- [\"\
    ?\"]\n        \n        words_split = words_split .- [\".\"]\n        \n     \
    \   words_split = words_split .- [\"-\"]\n        \n        words_split = words_split\
    \ .- [\"_\"]\n        \n        words_split = words_split .- [\":\"]\n       \
    \ \n        words_split = words_split .- [\";\"]\n        \n        words_split\
    \ = words_split .- [\"/\"]\n        \n        words_split = words_split .- [\"\
    \\\\\"]\n        \n        words_split = words_split .- [\"[\"]\n        \n  \
    \      words_split = words_split .- [\"]\"]\n        \n        words_split = words_split\
    \ .- [\"{\"]\n        \n        words_split = words_split .- [\"}\"]\n       \
    \ \n        words_split = words_split .- [\"(\"]\n        \n        words_split\
    \ = words_split .- [\")\"]\n        \n        words_split = words_split .- [\"\
    [\"]\n        \n        words_split = words_split .- [\"]\"]\n        \n     \
    \   words_split = words_split .- [\"{\"]\n        \n        words_split = words_split\
    \ .- [\"}\"]\n        \n        words_split = words_split .- [\":\"]\n       \
    \ \n        words_split = words_split .- [\";\"]\n        \n        words_split\
    \ = words_split .- [\"/\"]\n        \n        words_split = words_split .- [\"\
    \\\\\"]\n        \n        words_split = words_split .- [\"[\"]\n        \n  \
    \      words_split = words_split .- [\"]\"]\n        \n        words_split = words_split\
    \ .- [\"{\"]\n        \n        words_split = words_split .- [\"}\"]\n       \
    \ \n        words_split = words_split .- [\"(\"]\n        \n        words_split\
    \ = words_split .- [\")\"]\n        \n        words_split = words_split .- [\"\
    [\"]\n        \n        words_split = words_split .- [\"]\"]\n        \n     \
    \   words_split = words_split .- [\"{\"]\n        \n        words_split = words_split\
    \ .- [\"}\"]\n        \n        words_split = words_split .- [\"", "    words\
    \ = split(txt, \" \")\n    words_split = Vector{String}(undef, 0)\n    for word\
    \ in words\n        if !isempty(word)\n            words_split = words_split ++\
    \ [word]\n        end\n    end\n    words_split = words_split ++ [split(txt, \"\
    ,\")]\n    words_split = words_split ++ [split(txt, \" \")]\n    words_split =\
    \ words_split ++ [split(txt, \";\")]\n    words_split = words_split ++ [split(txt,\
    \ \":\")]\n    words_split = words_split ++ [split(txt, \",;:\")]\n    words_split\
    \ = words_split ++ [split(txt, \",;\")]\n    words_split = words_split ++ [split(txt,\
    \ \":;\")]\n    words_split = words_split ++ [split(txt, \":;\")]\n    words_split\
    \ = words_split ++ [split(txt, \":\")]\n    words_split = words_split ++ [split(txt,\
    \ \":;\")]\n    words_split = words_split ++ [split(txt, \":;\")]\n    words_split\
    \ = words_split ++ [split(txt, \":;\")]\n    words_split = words_split ++ [split(txt,\
    \ \":;\")]\n    words_split = words_split ++ [split(txt, \":;\")]\n    words_split\
    \ = words_split ++ [split(txt, \":;\")]\n    words_split = words_split ++ [split(txt,\
    \ \":;\")]\n    words_split = words_split ++ [split(txt, \":;\")]\n    words_split\
    \ = words_split ++ [split(txt, \":;\")]\n    words_split = words_split ++ [split(txt,\
    \ \":;\")]\n    words_split = words_split ++ [split(txt, \":;\")]\n    words_split\
    \ = words_split ++ [split(txt, \":;\")]\n    words_split = words_split ++ [split(txt,\
    \ \":;\")]\n    words_split = words_split ++ [split(txt, \":;\")]\n    words_split\
    \ = words_split ++ [split(txt, \":;\")]\n    words_split = words_split ++ [split(txt,\
    \ \":;\")]\n    words_split = words_split ++ [split(txt, \":;\")]\n    words_split\
    \ = words_split ++ [split(txt, \":;\")]\n    words_split = words_split ++ [split(txt,\
    \ \":;\")]\n    words_split = words_split ++ [split(txt, \":;\")]\n    words_split\
    \ = words_split ++ [split(txt, \":;\")]\n    words_split = words_split ++ [split(txt,\
    \ \":;\")]\n    words_split = words_split ++ [split(txt, \":;\")]\n    words_split\
    \ = words_split ++ [split(txt, \":;\")]\n    words_split = words_split ++ [split(txt, ",
  "    txt = txt.trim()\n    if isempty(txt)\n        return txt\n    elseif isequal(txt,\
    \ \"\")\n        return txt\n    elseif isequal(txt, \"\\n\")\n        return\
    \ txt\n    elseif isequal(txt, \" \")\n        return txt\n    elseif isequal(txt,\
    \ \"\\t\")\n        return txt\n    elseif isequal(txt, \"\\r\")\n        return\
    \ txt\n    elseif isequal(txt, \"\\n\")\n        return txt\n    elseif isequal(txt,\
    \ \"\\r\\n\")\n        return txt\n    elseif isequal(txt, \"\\t\")\n        return\
    \ txt\n    elseif isequal(txt, \"\\n\")\n        return txt\n    elseif isequal(txt,\
    \ \"\\r\\n\")\n        return txt\n    elseif isequal(txt, \"\\r\")\n        return\
    \ txt\n    elseif isequal(txt, \"\\t\")\n        return txt\n    elseif isequal(txt,\
    \ \"\\n\")\n        return txt\n    elseif isequal(txt, \"\\r\\n\")\n        return\
    \ txt\n    elseif isequal(txt, \"\\r\")\n        return txt\n    elseif isequal(txt,\
    \ \"\\t\")\n        return txt\n    elseif isequal(txt, \"\\n\")\n        return\
    \ txt\n    elseif isequal(txt, \"\\r\\n\")\n        return txt\n    elseif isequal(txt,\
    \ \"\\r\")\n        return txt\n    elseif isequal(txt, \"\\t\")\n        return\
    \ txt\n    elseif isequal(txt, \"\\n\")\n        return txt\n    elseif isequal(txt,\
    \ \"\\r\\n\")\n        return txt\n    elseif isequal(txt, \"\\r\")\n        return\
    \ txt\n    elseif isequal(txt, \"\\t\")\n        return txt\n    elseif isequal(txt,\
    \ \"\\n\")\n        return txt\n    elseif isequal(txt, \"\\r\\n\")\n        return\
    \ txt\n    elseif isequal(txt, \"\\r\")\n        return txt\n    elseif isequal(txt,\
    \ \"\\t\")\n        return txt\n    elseif isequal(txt, \"\\n\")\n        return\
    \ txt\n    elseif isequal(txt, \"\\r\\n\")\n        return txt\n    elseif isequal(txt,\
    \ \"\\r\")\n        return txt\n    elseif isequal(txt, \"\\t\")\n        return\
    \ txt\n    elseif isequal(txt, \"\\n\")\n        return txt\n    elseif isequal(txt,\
    \ \"\\r\\n\")\n        return txt\n    elseif isequal(txt, \"\\r\")\n        return\
    \ txt\n    elseif isequal(txt, \"\\t\")\n        return txt\n    elseif isequal(txt,\
    \ \"\\n\")\n        return txt\n    elseif isequal(txt, \"\\r\\n\")\n        return\
    \ txt\n    elseif isequal(txt, \"\\r\")\n        return txt\n    elseif isequal(txt,\
    \ \"\\t\")\n        return txt\n    elseif isequal(txt, \"\\n\")\n        return\
    \ txt\n    elseif isequal(txt, \"\\r\\n\")\n        return txt\n    elseif ",
  "    words = split(txt, \" \")\n    words_split = split(txt, \",\")\n    words_split2\
    \ = split(txt, \",\")\n    words_split3 = split(txt, \",\")\n    words_split4\
    \ = split(txt, \",\")\n    words_split5 = split(txt, \",\")\n    words_split6\
    \ = split(txt, \",\")\n    words_split7 = split(txt, \",\")\n    words_split8\
    \ = split(txt, \",\")\n    words_split9 = split(txt, \",\")\n    words_split10\
    \ = split(txt, \",\")\n    words_split11 = split(txt, \",\")\n    words_split12\
    \ = split(txt, \",\")\n    words_split13 = split(txt, \",\")\n    words_split14\
    \ = split(txt, \",\")\n    words_split15 = split(txt, \",\")\n    words_split16\
    \ = split(txt, \",\")\n    words_split17 = split(txt, \",\")\n    words_split18\
    \ = split(txt, \",\")\n    words_split19 = split(txt, \",\")\n    words_split20\
    \ = split(txt, \",\")\n    words_split21 = split(txt, \",\")\n    words_split22\
    \ = split(txt, \",\")\n    words_split23 = split(txt, \",\")\n    words_split24\
    \ = split(txt, \",\")\n    words_split25 = split(txt, \",\")\n    words_split26\
    \ = split(txt, \",\")\n    words_split27 = split(txt, \",\")\n    words_split28\
    \ = split(txt, \",\")\n    words_split29 = split(txt, \",\")\n    words_split30\
    \ = split(txt, \",\")\n    words_split31 = split(txt, \",\")\n    words_split32\
    \ = split(txt, \",\")\n    words_split33 = split(txt, \",\")\n    words_split34\
    \ = split(txt, \",\")\n    words_split35 = split(txt, \",\")\n    words_split36\
    \ = split(txt, \",\")\n    words_split37 = split(txt, \",\")\n    words_split38\
    \ = split(txt, \",\")\n    words_split39 = split(txt, \",\")\n    words_split40\
    \ = split(txt, \",\")\n    words_split41 = split(txt, \",\")\n    words_split42\
    \ = split(txt, \",\")\n    words_split43 = split(txt, \",\")\n    words_split44\
    \ = split(txt, \",\")\n    words_split45 = split(txt, \",\")\n    words_split46\
    \ = split(txt, \",\")\n    words_split47 = split(txt, \",\")\n    ", "    \n \
    \   txt = txt.trim()\n    if txt == \"\"\n        return txt\n    elseif txt ==\
    \ \"\\n\"\n        return txt\n    elseif txt == \"\\t\"\n        return txt\n\
    \    elseif txt == \"\\r\"\n        return txt\n    elseif txt == \"\\t\"\n  \
    \      return txt\n    elseif txt == \"\\n\"\n        return txt\n    elseif txt\
    \ == \"\\r\"\n        return txt\n    elseif txt == \"\\n\"\n        return txt\n\
    \    elseif txt == \"\\t\"\n        return txt\n    elseif txt == \"\\r\"\n  \
    \      return txt\n    elseif txt == \"\\n\"\n        return txt\n    elseif txt\
    \ == \"\\t\"\n        return txt\n    elseif txt == \"\\r\"\n        return txt\n\
    \    elseif txt == \"\\n\"\n        return txt\n    elseif txt == \"\\t\"\n  \
    \      return txt\n    elseif txt == \"\\r\"\n        return txt\n    elseif txt\
    \ == \"\\n\"\n        return txt\n    elseif txt == \"\\t\"\n        return txt\n\
    \    elseif txt == \"\\r\"\n        return txt\n    elseif txt == \"\\n\"\n  \
    \      return txt\n    elseif txt == \"\\t\"\n        return txt\n    elseif txt\
    \ == \"\\r\"\n        return txt\n    elseif txt == \"\\n\"\n        return txt\n\
    \    elseif txt == \"\\t\"\n        return txt\n    elseif txt == \"\\r\"\n  \
    \      return txt\n    elseif txt == \"\\n\"\n        return txt\n    elseif txt\
    \ == \"\\t\"\n        return txt\n    elseif txt == \"\\r\"\n        return txt\n\
    \    elseif txt == \"\\n\"\n        return txt\n    elseif txt == \"\\t\"\n  \
    \      return txt\n    elseif txt == \"\\r\"\n        return txt\n    elseif txt\
    \ == \"\\n\"\n        return txt\n    elseif txt == \"\\t\"\n        return txt\n\
    \    elseif txt == \"\\r\"\n        return txt\n    elseif txt == \"\\n\"\n  \
    \      return txt\n    elseif txt == \"\\t\"\n        return txt\n    elseif txt\
    \ == \"\\r\"\n        return txt\n    elseif txt == \"\\n\"\n        return txt\n\
    \    elseif txt == \"\\t\"\n        return txt\n    elseif txt == \"\\r\"\n  \
    \      return txt\n    elseif txt == \"\\n\"\n        return txt\n    elseif txt\
    \ == \"\\t\"\n        return txt\n    elseif txt == \"\\r\"\n        return txt\n\
    \    elseif txt == \"\\n\"\n        return txt\n    elseif txt == \"\\t\"\n  \
    \      return txt\n    elseif txt == \"\\r\"\n        return txt\n    elseif txt\
    \ == \"\\n\"\n        return txt\n    elseif txt == \"\\t\"\n        return txt\n\
    \    elseif txt == \"\\r\"\n        return txt\n    elseif txt == \"\\n\"\n  \
    \      return txt\n    elseif txt == \"\\t\"\n        return txt\n    elseif txt\
    \ == \"\\r\"\n        return txt\n    else", "    \n    words = split(txt, \"\
    \ \")\n    \n    if length(words) == 0 \n        return 0 \n    else \n      \
    \  \n        words = [w for w in words if w != \"\"]\n        \n        if length(words)\
    \ == 0 \n            return 0 \n        else \n            \n            words\
    \ = [w for w in words if w != \",\"]\n            \n            if length(words)\
    \ == 0 \n                return 0 \n            else \n                \n    \
    \            words = [w for w in words if w != \"a\" and w != \"b\" and w != \"\
    c\" and w != \"d\" and w != \"e\" and w != \"f\" and w != \"g\" and w != \"h\"\
    \ and w != \"i\" and w != \"j\" and w != \"k\" and w != \"l\" and w != \"m\" and\
    \ w != \"n\" and w != \"o\" and w != \"p\" and w != \"q\" and w != \"r\" and w\
    \ != \"s\" and w != \"t\" and w != \"u\" and w != \"v\" and w != \"w\" and w !=\
    \ \"x\" and w != \"y\" and w != \"z\"]\n                \n                if length(words)\
    \ == 0 \n                    return 0 \n                else \n              \
    \      \n                    words = [w for w in words if w != \"\"]\n       \
    \             \n                    if length(words) == 0 \n                 \
    \       return 0 \n                    else \n                        \n     \
    \                   words = [w for w in words if w != \",\"]\n               \
    \         \n                        if length(words) == 0 \n                 \
    \           return 0 \n                        else \n                       \
    \     \n                            words = [w for w in words if w != \"a\" and\
    \ w != \"b\" and w != \"c\" and w != \"d\" and w != \"e\" and w != \"f\" and w\
    \ != \"g\" and w != \"h\" and w != \"i\" and w != \"j\" and w != \"k\" and w !=\
    \ \"l\" and w != \"m\" and w != \"n\" and w != \"o\" and w != \"p\" and w != \"\
    q\" and w != \"r\" and w != \"s\" and w != \"t\" and w != \"u\" and w != \"v\"\
    \ and w != \"w\" and w != \"x\" and w != \"y\" and w != \"z\"]\n             \
    \               \n                            if length(words) == 0 \n       \
    \                         return 0 \n                            else \n     \
    \                           \n                                words = [w for w\
    \ in words if w != \"\"]\n                                \n                 \
    \               if length(words) == 0 \n                                    return\
    \ 0 \n                                else \n                                \
    \    \n                                    words = [w for w in words if w != \"\
    ,\"]\n                                    \n                                 \
    \   if length(words) == 0 \n                                        return 0 \n\
    \                                    else \n                                 \
    \       \n                                        words = [w for w in words if\
    \ w != \"a\" and w != \"b\" and w != \"c\" and w != \"d\" and w != \"e\" and w\
    \ != \"f\" and w != \"g\" and w != \"h\" and w != \"i\" and w != \"j\" and w !=\
    \ \"k\" and w != \"", "    txt = txt.trim()\n    if txt == \"\"\n        return\
    \ Vector{String}()\n    elseif txt == \"\\n\"\n        return txt\n    else\n\
    \        words = split(txt, \" \")\n        words = words[2:end]\n        words\
    \ = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:", "    \n    words = split(txt, \" \")\n    \n    if\
    \ length(words) == 0 \n        return words\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    txt = txt.trim()\n    if txt\
    \ == \"\"\n        return txt\n    words = split(txt, \" \")\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"-\"]\n    words = [w for w in words if w\
    \ != \"_\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"-\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"-\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"-\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"-\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"-\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"-\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"-\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"-\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"-\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"-\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"-\"]\n  \
    \  words = [w for w in words if ", "    \n    words = split(txt)\n    \n    if\
    \ length(words) == 0 \n        return 0 \n    \n    words = [w for w in words\
    \ if w != \"\"]\n    \n    if length(words) == 1 \n        return length(words)\
    \ \n    \n    words = [w for w in words if w != \",\"]\n    \n    if length(words)\
    \ == 1 \n        return length(words) \n    \n    words = [w for w in words if\
    \ w != \"-\"]\n    \n    if length(words) == 1 \n        return length(words)\
    \ \n    \n    words = [w for w in words if w != \"_\"]\n    \n    if length(words)\
    \ == 1 \n        return length(words) \n    \n    words = [w for w in words if\
    \ w != \"!\"]\n    \n    if length(words) == 1 \n        return length(words)\
    \ \n    \n    words = [w for w in words if w != \"?\"]\n    \n    if length(words)\
    \ == 1 \n        return length(words) \n    \n    words = [w for w in words if\
    \ w != \"!\"]\n    \n    if length(words) == 1 \n        return length(words)\
    \ \n    \n    words = [w for w in words if w != \"?\"]\n    \n    if length(words)\
    \ == 1 \n        return length(words) \n    \n    words = [w for w in words if\
    \ w != \"-\"]\n    \n    if length(words) == 1 \n        return length(words)\
    \ \n    \n    words = [w for w in words if w != \"_\"]\n    \n    if length(words)\
    \ == 1 \n        return length(words) \n    \n    words = [w for w in words if\
    \ w != \"?\"]\n    \n    if length(words) == 1 \n        return length(words)\
    \ \n    \n    words = [w for w in words if w != \"!\"]\n    \n    if length(words)\
    \ == 1 \n        return length(words) \n    \n    words = [w for w in words if\
    \ w != \"?\"]\n    \n    if length(words) == 1 \n        return length(words)\
    \ \n    \n    words = [w for w in words if w != \"-\"]\n    \n    if length(words)\
    \ == 1 \n        return length(words) \n    \n    words = [w for w in words if\
    \ w != \"_\"]\n    \n    if length(words) == 1 \n        return length(words)\
    \ \n    \n    words = [w for w in words if w != \"?\"]\n    \n    if length(words)\
    \ == 1 \n        return length(words) \n    \n    words = [w for w in words if\
    \ w != \"!\"]\n    \n    if length(words) == 1 \n        return length(words)\
    \ \n    \n    words = [w for w in words if w != \"?\"]\n    \n", "    txt = txt.trim()\n\
    \    if isempty(txt)\n        return txt\n    else\n        words = split(txt,\
    \ \" \")\n        words = words[words != \"\"]\n        words = words[words !=\
    \ \",\"]\n        words = words[words != \".\"]\n        words = words[words !=\
    \ \"?\"]\n        words = words[words != \"!\"]\n        words = words[words !=\
    \ \"-\"]\n        words = words[words != \"(\"]\n        words = words[words !=\
    \ \")\"]\n        words = words[words != \"[\"]\n        words = words[words !=\
    \ \"]\"]\n        words = words[words != \"[\"]\n        words = words[words !=\
    \ \"]\"]\n        words = words[words != \"[\"]\n        words = words[words !=\
    \ \"]\"]\n        words = words[words != \"]\"]\n        words = words[words !=\
    \ \"]\"]\n        words = words[words != \"]\"]\n        words = words[words !=\
    \ \"]\"]\n        words = words[words != \"]\"]\n        words = words[words !=\
    \ \"]\"]\n        words = words[words != \"]\"]\n        words = words[words !=\
    \ \"]\"]\n        words = words[words != \"]\"]\n        words = words[words !=\
    \ \"]\"]\n        words = words[words != \"]\"]\n        words = words[words !=\
    \ \"]\"]\n        words = words[words != \"]\"]\n        words = words[words !=\
    \ \"]\"]\n        words = words[words != \"]\"]\n        words = words[words !=\
    \ \"]\"]\n        words = words[words != \"]\"]\n        words = words[words !=\
    \ \"]\"]\n        words = words[words != \"]\"]\n        words = words[words !=\
    \ \"]\"]\n        words = words[words != \"]\"]\n        words = words[words !=\
    \ \"]\"]\n        words = words[words != \"]\"]\n        words = words[words !=\
    \ \"]\"]\n        words = words[words != \"]\"]\n        words = words[words !=\
    \ \"]\"]\n        words = words[words != \"]\"]\n        words = words[words !=\
    \ \"]\"]\n        words = words[words != \"]\"]\n        words = words[words !=\
    \ \"]\"]\n        words = words[words != \"]\"]\n        words = words[words !=\
    \ \"]\"]\n        words = words[words != \"]\"]\n        words = words[words !=\
    \ \"]\"]\n        words = words[words != \"]\"]\n        words = words[words !=\
    \ \"]\"]\n        words = words[words != \"]\"]\n        words = words[words !=\
    \ \"]\"]\n        words = words[words != \"]\"]\n", "    txt = txt.trim()\n  \
    \  if txt == \"\"\n        return txt\n    \n    if txt.includes(\",\")\n    \
    \    words = txt.split(\",\")\n    else\n        words = txt.split(\" \")\n  \
    \  end\n    \n    words = [w for w in words if w != \"\"]\n    \n    words = [w\
    \ for w in words if w != \",\"]\n    \n    words = [w for w in words if w != \"\
    \ \"]\n    \n    words = [w for w in words if w != \"\\n\"]\n    \n    words =\
    \ [w for w in words if w != \"\\t\"]\n    \n    words = [w for w in words if w\
    \ != \"\\r\"]\n    \n    words = [w for w in words if w != \"\\t\"]\n    \n  \
    \  words = [w for w in words if w != \"\\r\"]\n    \n    words = [w for w in words\
    \ if w != \"\\n\"]\n    \n    words = [w for w in words if w != \"\\t\"]\n   \
    \ \n    words = [w for w in words if w != \"\\r\"]\n    \n    words = [w for w\
    \ in words if w != \"\\n\"]\n    \n    words = [w for w in words if w != \"\\\
    t\"]\n    \n    words = [w for w in words if w != \"\\r\"]\n    \n    words =\
    \ [w for w in words if w != \"\\n\"]\n    \n    words = [w for w in words if w\
    \ != \"\\t\"]\n    \n    words = [w for w in words if w != \"\\r\"]\n    \n  \
    \  words = [w for w in words if w != \"\\n\"]\n    \n    words = [w for w in words\
    \ if w != \"\\t\"]\n    \n    words = [w for w in words if w != \"\\r\"]\n   \
    \ \n    words = [w for w in words if w != \"\\n\"]\n    \n    words = [w for w\
    \ in words if w != \"\\t\"]\n    \n    words = [w for w in words if w != \"\\\
    r\"]\n    \n    words = [w for w in words if w != \"\\n\"]\n    \n    words =\
    \ [w for w in words if w != \"\\t\"]\n    \n    words = [w for w in words if w\
    \ != \"\\r\"]\n    \n    words = [w for w in words if w != \"\\n\"]\n    \n  \
    \  words = [w for w in words if w != \"\\t\"]\n    \n    words = [w for w in words\
    \ if w != \"\\r\"]\n    \n    words = [w for w in words if w != \"\\n\"]\n   \
    \ \n    words = [w for w in words if w != \"\\t\"]\n    \n    words = [", "  \
    \  txt = txt.trim()\n    if txt == \"\"\n        return txt\n    \n    words =\
    \ split(txt, \" \")\n    \n    words_splitted = []\n    for word in words\n  \
    \      words_splitted = words_splitted ++ split(word, \",\")\n    end\n    \n\
    \    words_splitted = [word for word in words_splitted if word != \"\"]\n    \n\
    \    words_splitted = [word for word in words_splitted if !islower(word)]\n  \
    \  \n    words_splitted = [word for word in words_splitted if !isupper(word)]\n\
    \    \n    words_splitted = [word for word in words_splitted if !isdigit(word)]\n\
    \    \n    words_splitted = [word for word in words_splitted if !isspace(word)]\n\
    \    \n    words_splitted = [word for word in words_splitted if !isalnum(word)]\n\
    \    \n    words_splitted = [word for word in words_splitted if !isascii(word)]\n\
    \    \n    words_splitted = [word for word in words_splitted if !isblank(word)]\n\
    \    \n    words_splitted = [word for word in words_splitted if !isspace(word)]\n\
    \    \n    words_splitted = [word for word in words_splitted if !isascii(word)]\n\
    \    \n    words_splitted = [word for word in words_splitted if !isblank(word)]\n\
    \    \n    words_splitted = [word for word in words_splitted if !isspace(word)]\n\
    \    \n    words_splitted = [word for word in words_splitted if !isascii(word)]\n\
    \    \n    words_splitted = [word for word in words_splitted if !isblank(word)]\n\
    \    \n    words_splitted = [word for word in words_splitted if !isspace(word)]\n\
    \    \n    words_splitted = [word for word in words_splitted if !isascii(word)]\n\
    \    \n    words_splitted = [word for word in words_splitted if !isblank(word)]\n\
    \    \n    words_splitted = [word for word in words_splitted if !isspace(word)]\n\
    \    \n    words_splitted = [word for word in words_splitted if !isascii(word)]\n\
    \    \n    words_splitted = [word for word in words_splitted if !isblank(word)]\n\
    \    \n    words_splitted = [word for word in words_splitted if !isspace(word)]\n\
    \    \n    words_splitted = [word for word in words_splitted if !isascii(word)]\n",
  "    \n    if isempty(txt)\n        return txt\n    else\n        words = split(txt,\
    \ \" \")\n        \n        words_splitted = []\n        for word in words\n \
    \           words_splitted = append(words_splitted, split(word, \",\"))\n    \
    \    end\n        \n        words_splitted = [word for word in words_splitted\
    \ if !isempty(word)]\n        \n        words_splitted = [word for word in words_splitted\
    \ if !islower(word)]\n        \n        words_splitted = [word for word in words_splitted\
    \ if !isupper(word)]\n        \n        words_splitted = [word for word in words_splitted\
    \ if !isdigit(word)]\n        \n        words_splitted = [word for word in words_splitted\
    \ if !isspace(word)]\n        \n        words_splitted = [word for word in words_splitted\
    \ if !issymbol(word)]\n        \n        words_splitted = [word for word in words_splitted\
    \ if !isascii(word)]\n        \n        words_splitted = [word for word in words_splitted\
    \ if !isascii(word)]\n        \n        words_splitted = [word for word in words_splitted\
    \ if !isascii(word)]\n        \n        words_splitted = [word for word in words_splitted\
    \ if !isascii(word)]\n        \n        words_splitted = [word for word in words_splitted\
    \ if !isascii(word)]\n        \n        words_splitted = [word for word in words_splitted\
    \ if !isascii(word)]\n        \n        words_splitted = [word for word in words_splitted\
    \ if !isascii(word)]\n        \n        words_splitted = [word for word in words_splitted\
    \ if !isascii(word)]\n        \n        words_splitted = [word for word in words_splitted\
    \ if !isascii(word)]\n        \n        words_splitted = [word for word in words_splitted\
    \ if !isascii(word)]\n        \n        words_splitted = [word for word in words_splitted\
    \ if !isascii(word)]\n        \n        words_splitted = [word for word in words_splitted\
    \ if !isascii(word)]\n        \n        words_splitted = [word for word in words_splitted\
    \ if !isascii(word)]\n        \n        words_splitted = [word for word in words_splitted\
    \ if !isascii(word)]\n        \n        words_splitted = [word for word in words_splitted\
    \ if !isascii(word)]\n        \n        words_splitted = [word for word in words_splitted\
    \ if !isascii(word)]\n        ", "    txt = txt.trim()\n    if txt == \"\"\n \
    \       return txt\n    if txt.includes(\",\")\n        words = txt.split(\",\"\
    )\n    else\n        words = txt.split(\" \")\n    end\n    words = [w for w in\
    \ words if w != \"\"]\n    words = [w for w in words if w !~ \"^[a-z]+$\"]\n \
    \   words = [w for w in words if w !~ \"^[a-z]+$\"]\n    words = [w for w in words\
    \ if w !~ \"^[a-z]+$\"]\n    words = [w for w in words if w !~ \"^[a-z]+$\"]\n\
    \    words = [w for w in words if w !~ \"^[a-z]+$\"]\n    words = [w for w in\
    \ words if w !~ \"^[a-z]+$\"]\n    words = [w for w in words if w !~ \"^[a-z]+$\"\
    ]\n    words = [w for w in words if w !~ \"^[a-z]+$\"]\n    words = [w for w in\
    \ words if w !~ \"^[a-z]+$\"]\n    words = [w for w in words if w !~ \"^[a-z]+$\"\
    ]\n    words = [w for w in words if w !~ \"^[a-z]+$\"]\n    words = [w for w in\
    \ words if w !~ \"^[a-z]+$\"]\n    words = [w for w in words if w !~ \"^[a-z]+$\"\
    ]\n    words = [w for w in words if w !~ \"^[a-z]+$\"]\n    words = [w for w in\
    \ words if w !~ \"^[a-z]+$\"]\n    words = [w for w in words if w !~ \"^[a-z]+$\"\
    ]\n    words = [w for w in words if w !~ \"^[a-z]+$\"]\n    words = [w for w in\
    \ words if w !~ \"^[a-z]+$\"]\n    words = [w for w in words if w !~ \"^[a-z]+$\"\
    ]\n    words = [w for w in words if w !~ \"^[a-z]+$\"]\n    words = [w for w in\
    \ words if w !~ \"^[a-z]+$\"]\n    words = [w for w in words if w !~ \"^[a-z]+$\"\
    ]\n    words = [w for w in words if w !~ \"^[a-z]+$\"]\n    words = [w for w in\
    \ words if w !~ \"^[a-z]+$\"]\n    words = [w for w in words if w !~ \"^[a-z]+$\"\
    ]\n    words = [w for w in words if w ", "    \n    words = split(txt, \" \")\n\
    \    \n    if length(words) == 0\n        return words\n    else\n        \n \
    \       words_split = split(txt, \",\")\n        \n        if length(words_split)\
    \ == 0\n            return words\n        else\n            \n            words_split\
    \ = split(txt, \" \")\n            \n            if length(words_split) == 0\n\
    \                return words\n            else\n                \n          \
    \      words_split = split(txt, \",\")\n                \n                if length(words_split)\
    \ == 0\n                    return words\n                else\n             \
    \       \n                    words_split = split(txt, \" \")\n              \
    \      \n                    if length(words_split) == 0\n                   \
    \     return words\n                    else\n                        \n     \
    \                   words_split = split(txt, \",\")\n                        \n\
    \                        if length(words_split) == 0\n                       \
    \     return words\n                        else\n                           \
    \ \n                            words_split = split(txt, \" \")\n            \
    \                \n                            if length(words_split) == 0\n \
    \                               return words\n                            else\n\
    \                                \n                                words_split\
    \ = split(txt, \",\")\n                                \n                    \
    \            if length(words_split) == 0\n                                   \
    \ return words\n                                else\n                       \
    \             \n                                    words_split = split(txt, \"\
    \ \")\n                                    \n                                \
    \    if length(words_split) == 0\n                                        return\
    \ words\n                                    else\n                          \
    \              \n                                        words_split = split(txt,\
    \ \",\")\n                                        \n                         \
    \               if length(words_split) == 0\n                                \
    \            return words\n                                        else\n    \
    \                                        \n                                  \
    \          words_split = split(txt, \" \")\n                                 \
    \           \n                                            if length(words_split)\
    \ == 0\n                                                return words\n       \
    \                                     else\n                                 \
    \               \n                                                words_split\
    \ = split(txt, \",\")\n                                                \n    \
    \                                            if length(words_split) == 0\n   \
    \                                                 return words\n             \
    \                                   else\n                                   \
    \                 \n                                                    words_split\
    \ = split(txt, \" \")\n                                                    \n\
    \                                                    if length(words_split) ==\
    \ 0\n                                                        return words\n  \
    \                                                  else\n                    \
    \                                    \n                                      \
    \                  words_split = split(txt, \",\")\n                         \
    \                               \n                                           \
    \             if length(words_split) == 0\n                                  \
    \                          return words\n                                    \
    \                    else\n                                                  \
    \          \n                                                            words_split\
    \ = split(txt, \" \")\n                                                      \
    \      \n                                                            if length(words_split)\
    \ == 0\n                                                                return\
    \ words\n                                                            else\n  \
    \                                                              \n            \
    \                                                    words_split = split(txt,\
    \ \",\")\n                                                                \n \
    \                                                               if length(words_split)\
    \ == 0\n                                                                    return\
    \ words\n                                                                else\n\
    \                                                                    \n      \
    \                                                              words_split = split(txt,\
    \ \" \")\n                                                                   \
    \ \n                                                                    if length(words_split)\
    \ == 0\n                                                                     \
    \   return words\n                                                           \
    \         else\n                                                             \
    \           \n                                                               \
    \         words_split = split(txt, \",\")\n                                  \
    \                                      \n                                    \
    \                                    if length(words_split) == 0\n           \
    \                                                                 return words\n\
    \                                                                        else\n\
    \                                                                            \n\
    \                                                                            words_split\
    \ = split(txt, \" \")\n                                                      \
    \                      \n                                                    \
    \                        if length(words_split) == 0\n                       \
    \                                                         return words\n     \
    \                                                                       else\n\
    \                                                                            \
    \    \n                                                                      \
    \          words_split = split(txt, ", "    \n    words = split(txt, \" \")\n\
    \    \n    words = [w for w in words if w != \"\"]\n    \n    words = [w for w\
    \ in words if w != \",\"]\n    \n    words = [w for w in words if w != \"\"]\n\
    \    \n    words = [w for w in words if w != \",\"]\n    \n    words = [w for\
    \ w in words if w != \"\"]\n    \n    words = [w for w in words if w != \",\"\
    ]\n    \n    words = [w for w in words if w != \"\"]\n    \n    words = [w for\
    \ w in words if w != \",\"]\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    words = [w for w in words if w != \",\"]\n    \n    words = [w for\
    \ w in words if w != \"\"]\n    \n    words = [w for w in words if w != \",\"\
    ]\n    \n    words = [w for w in words if w != \"\"]\n    \n    words = [w for\
    \ w in words if w != \",\"]\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    words = [w for w in words if w != \",\"]\n    \n    words = [w for\
    \ w in words if w != \"\"]\n    \n    words = [w for w in words if w != \",\"\
    ]\n    \n    words = [w for w in words if w != \"\"]\n    \n    words = [w for\
    \ w in words if w != \",\"]\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    words = [w for w in words if w != \",\"]\n    \n    words = [w for\
    \ w in words if w != \"\"]\n    \n    words = [w for w in words if w != \",\"\
    ]\n    \n    words = [w for w in words if w != \"\"]\n    \n    words = [w for\
    \ w in words if w != \",\"]\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    words = [w for w in words if w != \",\"]\n    \n    words = [w for\
    \ w in words if w != \"\"]\n    \n    words = [w for w in words if w != \",\"\
    ]\n    \n    words = [w for w in words if w != \"\"]\n    \n    words = [w for\
    \ w in words if w != \",\"]\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    words = [w for w in ", "    words = split(txt, \" \")\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"", "    txt = txt.trim()\n\
    \    if txt == \"\"\n        return txt\n    \n    words = split(txt, \" \")\n\
    \    \n    words = [w for w in words if w != \"\"]\n    \n    words = [w for w\
    \ in words if w != \",\"]\n    \n    words = [w for w in words if w != \"\\n\"\
    ]\n    \n    words = [w for w in words if w != \"\\r\"]\n    \n    words = [w\
    \ for w in words if w != \"\\t\"]\n    \n    words = [w for w in words if w !=\
    \ \"-\"]\n    \n    words = [w for w in words if w != \"!\"]\n    \n    words\
    \ = [w for w in words if w != \"?\"]\n    \n    words = [w for w in words if w\
    \ != \"-\"]\n    \n    words = [w for w in words if w != \"-\"]\n    \n    words\
    \ = [w for w in words if w != \"-\"]\n    \n    words = [w for w in words if w\
    \ != \"-\"]\n    \n    words = [w for w in words if w != \"-\"]\n    \n    words\
    \ = [w for w in words if w != \"-\"]\n    \n    words = [w for w in words if w\
    \ != \"-\"]\n    \n    words = [w for w in words if w != \"-\"]\n    \n    words\
    \ = [w for w in words if w != \"-\"]\n    \n    words = [w for w in words if w\
    \ != \"-\"]\n    \n    words = [w for w in words if w != \"-\"]\n    \n    words\
    \ = [w for w in words if w != \"-\"]\n    \n    words = [w for w in words if w\
    \ != \"-\"]\n    \n    words = [w for w in words if w != \"-\"]\n    \n    words\
    \ = [w for w in words if w != \"-\"]\n    \n    words = [w for w in words if w\
    \ != \"-\"]\n    \n    words = [w for w in words if w != \"-\"]\n    \n    words\
    \ = [w for w in words if w != \"-\"]\n    \n    words = [w for w in words if w\
    \ != \"-\"]\n    \n    words = [w for w in words if w != \"-\"]\n    \n    words\
    \ = [w for w in words if w != \"-\"]\n    \n    words = [w for w in words if w\
    \ != \"-\"]\n    \n    words = [w for w in words if w != \"-\"]\n    \n    words\
    \ = [w for w in words if w != \"-\"]\n    \n    words = [w for ", "    \n    words\
    \ = split(txt, \" \")\n    \n    words_split = Vector{String}(undef, 0)\n    \n\
    \    for word in words\n        words_split = words_split ++ split(word, \",\"\
    )\n    end\n    \n    words_split = words_split ++ [length(words)]\n    \n   \
    \ words_split = words_split .- words_split .% 2\n    \n    words_split = words_split\
    \ .- words_split .% 2 .+ 1\n    \n    words_split = words_split .- words_split\
    \ .% 2 .+ 1\n    \n    words_split = words_split .- words_split .% 2 .+ 1\n  \
    \  \n    words_split = words_split .- words_split .% 2 .+ 1\n    \n    words_split\
    \ = words_split .- words_split .% 2 .+ 1\n    \n    words_split = words_split\
    \ .- words_split .% 2 .+ 1\n    \n    words_split = words_split .- words_split\
    \ .% 2 .+ 1\n    \n    words_split = words_split .- words_split .% 2 .+ 1\n  \
    \  \n    words_split = words_split .- words_split .% 2 .+ 1\n    \n    words_split\
    \ = words_split .- words_split .% 2 .+ 1\n    \n    words_split = words_split\
    \ .- words_split .% 2 .+ 1\n    \n    words_split = words_split .- words_split\
    \ .% 2 .+ 1\n    \n    words_split = words_split .- words_split .% 2 .+ 1\n  \
    \  \n    words_split = words_split .- words_split .% 2 .+ 1\n    \n    words_split\
    \ = words_split .- words_split .% 2 .+ 1\n    \n    words_split = words_split\
    \ .- words_split .% 2 .+ 1\n    \n    words_split = words_split .- words_split\
    \ .% 2 .+ 1\n    \n    words_split = words_split .- words_split .% 2 .+ 1\n  \
    \  \n    words_split = words_split .- words_split .% 2 .+ 1\n    \n    words_split\
    \ = words_split .- words_split .% 2 .+ 1\n    \n    words_split = words_split\
    \ .- words_split .% 2 .+ 1\n    \n    words_split = words_split .- words_split\
    \ .% 2 .+ 1\n    \n    words_split = words_split .- words_split .% 2 .+ 1\n  \
    \  \n    words_split = words_split .- words_split .% 2 .+ 1\n    \n    words_split\
    \ = words_split .- words_split .% 2 .+ 1\n    \n    words_split = words_split\
    \ .- words_split .% 2 .+ 1\n    ", "    words = split(txt, \" \")\n    words =\
    \ [w for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"\
    ]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"", "    \n    txt\
    \ = txt.trim()\n    \n    if txt == \"\"\n        return txt\n    \n    words\
    \ = split(txt, \" \")\n    \n    if length(words) == 0\n        return txt\n \
    \   \n    words_split = split(txt, \",\")\n    \n    if length(words_split) ==\
    \ 0\n        return txt\n    \n    words_split = split(txt, \",\")\n    \n   \
    \ words_split = split(txt, \",\")\n    \n    words_split = split(txt, \",\")\n\
    \    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")", "    \n    words = split(txt, \" \")\n    \n    if length(words) ==\
    \ 0\n        return words\n    end\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    words = split(txt, \" \")\n    \n    words_splitted\
    \ = []\n    \n    for w in words\n        if w != \"\"\n            words_splitted\
    \ = words_splitted ++ split(w, \",\")\n        end\n    end\n    \n    words_splitted\
    \ = words_splitted ++ split(split(txt, \",\")[1], \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(split(txt, \",\")[2], \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(split(txt, \",\")[3], \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(split(txt, \",\")[4], \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(split(txt, \",\")[5], \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(split(txt, \",\")[6], \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(split(txt, \",\")[7], \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(split(txt, \",\")[8], \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(split(txt, \",\")[9], \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(split(txt, \",\")[10], \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(split(txt, \",\")[11], \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(split(txt, \",\")[12], \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(split(txt, \",\")[13], \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(split(txt, \",\")[14], \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(split(txt, \",\")[15], \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(split(txt, \",\")[16], \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(split(txt, \",\")[17], \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(split(txt, \",\")[18], \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(split(txt, \",\")[19], \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(split(txt, \",\")[20], \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(split(txt, \",\")[21], \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(split(txt, \",\")[22], \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(split(txt, \",\")[23], \" \")", "    \n    if isempty(txt)\n\
    \        return txt\n    else\n        words = split(txt, \" \")\n        words_split\
    \ = split(txt, \",\")\n        words_split2 = split(txt, \",\")\n        words_split3\
    \ = split(txt, \",\")\n        words_split4 = split(txt, \",\")\n        words_split5\
    \ = split(txt, \",\")\n        words_split6 = split(txt, \",\")\n        words_split7\
    \ = split(txt, \",\")\n        words_split8 = split(txt, \",\")\n        words_split9\
    \ = split(txt, \",\")\n        words_split10 = split(txt, \",\")\n        words_split11\
    \ = split(txt, \",\")\n        words_split12 = split(txt, \",\")\n        words_split13\
    \ = split(txt, \",\")\n        words_split14 = split(txt, \",\")\n        words_split15\
    \ = split(txt, \",\")\n        words_split16 = split(txt, \",\")\n        words_split17\
    \ = split(txt, \",\")\n        words_split18 = split(txt, \",\")\n        words_split19\
    \ = split(txt, \",\")\n        words_split20 = split(txt, \",\")\n        words_split21\
    \ = split(txt, \",\")\n        words_split22 = split(txt, \",\")\n        words_split23\
    \ = split(txt, \",\")\n        words_split24 = split(txt, \",\")\n        words_split25\
    \ = split(txt, \",\")\n        words_split26 = split(txt, \",\")\n        words_split27\
    \ = split(txt, \",\")\n        words_split28 = split(txt, \",\")\n        words_split29\
    \ = split(txt, \",\")\n        words_split30 = split(txt, \",\")\n        words_split31\
    \ = split(txt, \",\")\n        words_split32 = split(txt, \",\")\n        words_split33\
    \ = split(txt, \",\")\n        words_split34 = split(txt, \",\")\n        words_split35\
    \ = split(txt, \",\")\n        words_split36 = split(txt, \",\")\n        words_split37\
    \ = split(txt, \",\")\n        words_split38 = split(txt, \",\")\n        words_split39\
    \ = split(txt, \",\")\n        words_split40 = split(txt, \",\")\n        words_split41\
    \ = split(txt, \",\")\n        words_split42 = split(txt, \",\")\n        words_split43\
    \ = split(txt, \",\")\n        words_split44 = split(txt, \",\")\n        words_split45\
    \ = split(txt, \",\")\n        words_split46 = split(txt, ", "    \n    if isempty(txt)\n\
    \        return txt\n    else\n        words = split(txt, \" \")\n        \n \
    \       words_split = Vector{String}(undef, 0)\n        \n        for word in\
    \ words\n            words_split = vcat(words_split, split(word))\n        end\n\
    \        \n        words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \        \n        words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \        \n        words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \        \n        words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \        \n        words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \        \n        words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \        \n        words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \        \n        words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \        \n        words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \        \n        words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \        \n        words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \        \n        words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \        \n        words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \        \n        words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \        \n        words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \        \n        words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \        \n        words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \        \n        words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \        \n        words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \        \n        words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \        \n        words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \        \n        words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \        \n        words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \        \n        words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \        \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    words = split(txt, \" \")\n    \n    if length(words) == 0 \n      \
    \  return words\n    \n    words_split = split(txt, \",\")\n    \n    if length(words_split)\
    \ == 0 \n        return words\n    \n    words_split = split(txt, \",\")\n   \
    \ \n    if length(words_split) == 0 \n        return words\n    \n    words_split\
    \ = split(txt, \",\")\n    \n    if length(words_split) == 0 \n        return\
    \ words\n    \n    words_split = split(txt, \",\")\n    \n    if length(words_split)\
    \ == 0 \n        return words\n    \n    words_split = split(txt, \",\")\n   \
    \ \n    if length(words_split) == 0 \n        return words\n    \n    words_split\
    \ = split(txt, \",\")\n    \n    if length(words_split) == 0 \n        return\
    \ words\n    \n    words_split = split(txt, \",\")\n    \n    if length(words_split)\
    \ == 0 \n        return words\n    \n    words_split = split(txt, \",\")\n   \
    \ \n    if length(words_split) == 0 \n        return words\n    \n    words_split\
    \ = split(txt, \",\")\n    \n    if length(words_split) == 0 \n        return\
    \ words\n    \n    words_split = split(txt, \",\")\n    \n    if length(words_split)\
    \ == 0 \n        return words\n    \n    words_split = split(txt, \",\")\n   \
    \ \n    if length(words_split) == 0 \n        return words\n    \n    words_split\
    \ = split(txt, \",\")\n    \n    if length(words_split) == 0 \n        return\
    \ words\n    \n    words_split = split(txt, \",\")\n    \n    if length(words_split)\
    \ == 0 \n        return words\n    \n    words_split = split(txt, \",\")\n   \
    \ \n    if length(words_split) == 0 \n        return words\n    \n    words_split\
    \ = split(txt, \",\")\n    \n    if length(words_split) == 0 \n        return\
    \ words\n    \n    words_split = split(txt, \",\")\n    \n    if length(words_split)\
    \ == 0 \n        return words\n    \n    words_split = split(txt, \",\")\n   \
    \ \n    if length(words_split) == 0 \n        return words\n    \n    words_split\
    \ = split(txt, \",\")\n    \n    if length(words_split) == 0 \n        return\
    \ words\n    \n    words_split = split(txt, \",\")\n    \n    if length(words_split)\
    \ == 0 \n        return words\n    \n    words_split = split(txt, \",\")\n   \
    \ \n    if length(words_split) == 0 \n        return words\n    \n    words_split\
    \ = split(txt, \",\")\n    \n    if length(words_split) == 0 \n        return\
    \ words\n    \n    words_split = split(txt, \",", "    \n    if isempty(txt)\n\
    \        return txt\n    else\n        words = split(txt, \" \")\n        words_without_commas\
    \ = filter(x -> x != \",\", words)\n        words_without_commas = filter(x ->\
    \ x != \"\", words_without_commas)\n        words_without_commas = map(x -> lowercase(x),\
    \ words_without_commas)\n        words_without_commas = sort(words_without_commas)\n\
    \        words_without_commas = words_without_commas[findall(x -> x % 2 == 1,\
    \ words_without_commas)]\n        words_without_commas = words_without_commas[findall(x\
    \ -> x % 2 == 0, words_without_commas)]\n        words_without_commas = words_without_commas[findall(x\
    \ -> x % 2 == 1, words_without_commas)]\n        words_without_commas = words_without_commas[findall(x\
    \ -> x % 2 == 0, words_without_commas)]\n        return words_without_commas\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world!\"\
    )\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello,world!\")\n</cell>\n\
    <code language=julia-1.5>\nsplit_words(\"abcdef\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdefgh\"\
    )\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdefghij\")\n</cell>\n\
    <code language=julia-1.5>\nsplit_words(\"abcdefghijk\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"abcdefghijkl\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    abcdefghijklm\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdefghijklmn\"\
    )\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdefghijklmn\")\n</cell>\n\
    <code language=julia-1.5>\nsplit_words(\"abcdefghijklmn\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"abcdefghijklmn\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    abcdefghijklmn\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdefghijklmn\"\
    )\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdefghijklmn\")\n</cell>\n\
    <code language=julia-1.5>\nsplit_words(\"abcdefghijklmn\")\n", "    \n    txt\
    \ = txt.trim()\n    if txt == \"\"\n        return txt\n    \n    words = split(txt,\
    \ \" \")\n    \n    words_without_commas = filter(x->!contains(x, \",\"), words)\n\
    \    \n    words_without_commas = filter(x->!contains(x, \"!\"), words_without_commas)\n\
    \    \n    words_without_commas = filter(x->!contains(x, \"?\"), words_without_commas)\n\
    \    \n    words_without_commas = filter(x->!contains(x, \".\"), words_without_commas)\n\
    \    \n    words_without_commas = filter(x->!contains(x, \"-\"), words_without_commas)\n\
    \    \n    words_without_commas = filter(x->!contains(x, \"(\"), words_without_commas)\n\
    \    \n    words_without_commas = filter(x->!contains(x, \")\"), words_without_commas)\n\
    \    \n    words_without_commas = filter(x->!contains(x, \"[\"), words_without_commas)\n\
    \    \n    words_without_commas = filter(x->!contains(x, \"]\"), words_without_commas)\n\
    \    \n    words_without_commas = filter(x->!contains(x, \"{\"), words_without_commas)\n\
    \    \n    words_without_commas = filter(x->!contains(x, \"|\"), words_without_commas)\n\
    \    \n    words_without_commas = filter(x->!contains(x, \"\\\\\"), words_without_commas)\n\
    \    \n    words_without_commas = filter(x->!contains(x, \"@\"), words_without_commas)\n\
    \    \n    words_without_commas = filter(x->!contains(x, \"#\"), words_without_commas)\n\
    \    \n    words_without_commas = filter(x->!contains(x, \"$\"), words_without_commas)\n\
    \    \n    words_without_commas = filter(x->!contains(x, \"%\"), words_without_commas)\n\
    \    \n    words_without_commas = filter(x->!contains(x, \"^\"), words_without_commas)\n\
    \    \n    words_without_commas = filter(x->!contains(x, \"&\"), words_without_commas)\n\
    \    \n    words_without_commas = filter(x->!contains(x, \"*\"), words_without_commas)\n\
    \    \n    words_without_commas = filter(x->!contains(x, \"(\"), words_without_commas)\n\
    \    \n    words_without_commas = filter(x->!contains(x, \")\"), words_without_commas)\n\
    \    \n    words_without_commas = filter(x->!contains(", "    if isempty(txt)\n\
    \        return txt\n    elseif isequal(txt, \"\")\n        return txt\n    elseif\
    \ isequal(txt, \"\\n\")\n        return txt\n    elseif isequal(txt, \"\\r\")\n\
    \        return txt\n    elseif isequal(txt, \"\\t\")\n        return txt\n  \
    \  elseif isequal(txt, \" \")\n        return txt\n    elseif isequal(txt, \"\
    ,\")\n        return txt\n    else\n        words = split(txt, \" \")\n      \
    \  words_split = split(txt, \",\")\n        words_split2 = split(txt, \"\\n\"\
    )\n        words_split3 = split(txt, \"\\r\")\n        words_split4 = split(txt,\
    \ \"\\t\")\n        words_split5 = split(txt, \" \")\n        words_split6 = split(txt,\
    \ \",\")\n        words_split7 = split(txt, \"\\n\")\n        words_split8 = split(txt,\
    \ \"\\r\")\n        words_split9 = split(txt, \"\\t\")\n        words_split10\
    \ = split(txt, \" \")\n        words_split11 = split(txt, \",\")\n        words_split12\
    \ = split(txt, \"\\n\")\n        words_split13 = split(txt, \"\\r\")\n       \
    \ words_split14 = split(txt, \"\\t\")\n        words_split15 = split(txt, \" \"\
    )\n        words_split16 = split(txt, \",\")\n        words_split17 = split(txt,\
    \ \"\\n\")\n        words_split18 = split(txt, \"\\r\")\n        words_split19\
    \ = split(txt, \"\\t\")\n        words_split20 = split(txt, \" \")\n        words_split21\
    \ = split(txt, \",\")\n        words_split22 = split(txt, \"\\n\")\n        words_split23\
    \ = split(txt, \"\\r\")\n        words_split24 = split(txt, \"\\t\")\n       \
    \ words_split25 = split(txt, \" \")\n        words_split26 = split(txt, \",\"\
    )\n        words_split27 = split(txt, \"\\n\")\n        words_split28 = split(txt,\
    \ \"\\r\")\n        words_split29 = split(txt, \"\\t\")\n        words_split30\
    \ = split(txt, \" \")\n        words_split31 = split(txt, \",\")\n        words_split32\
    \ = split(txt, \"\\n\")\n        words_split33 = split(txt, \"\\r\")\n       \
    \ words_split34 = split(txt, \"\\t\")\n        words_split35 = split(txt, \" \"\
    )\n        words_split36 = split(txt, \",\")\n        words_split37 = split(txt,\
    \ \"\\n\")\n        words_split38 = split(txt, \"\\r\")\n        words_split39\
    \ = split(txt, \"\\t\")\n        words_split40 = split(txt, \" \")\n        words_split41\
    \ = split(txt, \",\")\n        ", "    \n    words = split(txt, \" \")\n    \n\
    \    if length(words) == 0\n        return words\n    else\n        \n       \
    \ words_split = split(txt, \",\")\n        \n        if length(words_split) ==\
    \ 0\n            return words\n        else\n            \n            words_split\
    \ = split(txt, \",\")\n            \n            if length(words_split) == 0\n\
    \                return words\n            else\n                \n          \
    \      words_split = split(txt, \",\")\n                \n                if length(words_split)\
    \ == 0\n                    return words\n                else\n             \
    \       \n                    words_split = split(txt, \",\")\n              \
    \      \n                    if length(words_split) == 0\n                   \
    \     return words\n                    else\n                        \n     \
    \                   words_split = split(txt, \",\")\n                        \n\
    \                        if length(words_split) == 0\n                       \
    \     return words\n                        else\n                           \
    \ \n                            words_split = split(txt, \",\")\n            \
    \                \n                            if length(words_split) == 0\n \
    \                               return words\n                            else\n\
    \                                \n                                words_split\
    \ = split(txt, \",\")\n                                \n                    \
    \            if length(words_split) == 0\n                                   \
    \ return words\n                                else\n                       \
    \             \n                                    words_split = split(txt, \"\
    ,\")\n                                    \n                                 \
    \   if length(words_split) == 0\n                                        return\
    \ words\n                                    else\n                          \
    \              \n                                        words_split = split(txt,\
    \ \",\")\n                                        \n                         \
    \               if length(words_split) == 0\n                                \
    \            return words\n                                        else\n    \
    \                                        \n                                  \
    \          words_split = split(txt, \",\")\n                                 \
    \           \n                                            if length(words_split)\
    \ == 0\n                                                return words\n       \
    \                                     else\n                                 \
    \               \n                                                words_split\
    \ = split(txt, \",\")\n                                                \n    \
    \                                            if length(words_split) == 0\n   \
    \                                                 return words\n             \
    \                                   else\n                                   \
    \                 \n                                                    words_split\
    \ = split(txt, \",\")\n                                                    \n\
    \                                                    if length(words_split) ==\
    \ 0\n                                                        return words\n  \
    \                                                  else\n                    \
    \                                    \n                                      \
    \                  words_split = split(txt, \",\")\n                         \
    \                               \n                                           \
    \             if length(words_split) == 0\n                                  \
    \                          return words\n                                    \
    \                    else\n                                                  \
    \          \n                                                            words_split\
    \ = split(txt, \",\")\n                                                      \
    \      \n                                                            if length(words_split)\
    \ == 0\n                                                                return\
    \ words\n                                                            else\n  \
    \                                                              \n            \
    \                                                    words_split = split(txt,\
    \ \",\")\n                                                                \n \
    \                                                               if length(words_split)\
    \ == 0\n                                                                    return\
    \ words\n                                                                else\n\
    \                                                                    \n      \
    \                                                              words_split = split(txt,\
    \ \",\")\n                                                                   \
    \ \n                                                                    if length(words_split)\
    \ == 0\n                                                                     \
    \   return words\n                                                           \
    \         else\n                                                             \
    \           \n                                                               \
    \         words_split = split(txt, \",\")\n                                  \
    \                                      \n                                    \
    \                                    if length(words_split) == 0\n           \
    \                                                                 return words\n\
    \                                                                        else\n\
    \                                                                            \n\
    \                                                                            words_split\
    \ = split(txt, \",\")\n                                                      \
    \                      \n                                                    \
    \                        if length(words_split) == 0\n                       \
    \                                                         return words\n     \
    \                                                                       else\n\
    \                                                                ", "    \n  \
    \  words = split(txt, \" \")\n    \n    if length(words) == 0\n        return\
    \ words\n    \n    if length(words) == 1\n        return words\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    words = split(txt, \" \")\n    \n\
    \    if length(words) == 0\n        return length(words)\n    end\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    ", "    words = split(txt,\
    \ \" \")\n    words = [w for w in words if w != \"\"]\n    words = [w for w in\
    \ words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"", "    words = split(txt, \" \")\n    words_without_commas = filter(x -> x\
    \ != \",\", words)\n    words_without_commas_without_spaces = filter(x -> x !=\
    \ \" \", words_without_commas)\n    words_without_commas_without_spaces_without_comma\
    \ = filter(x -> x != \",\", words_without_commas_without_spaces)\n    words_without_commas_without_spaces_without_comma_without_space\
    \ = filter(x -> x != \" \", words_without_commas_without_spaces_without_comma)\n\
    \    words_without_commas_without_spaces_without_comma_without_space_without_comma\
    \ = filter(x -> x != \",\", words_without_commas_without_spaces_without_comma_without_space)\n\
    \    words_without_commas_without_spaces_without_comma_without_space_without_comma_without_space\
    \ = filter(x -> x != \" \", words_without_commas_without_spaces_without_comma_without_space_without_comma)\n\
    \    words_without_commas_without_spaces_without_comma_without_space_without_comma_without_space_without_comma\
    \ = filter(x -> x != \",\", words_without_commas_without_spaces_without_comma_without_space_without_comma_without_space)\n\
    \    words_without_commas_without_spaces_without_comma_without_space_without_comma_without_space_without_comma_without_space\
    \ = filter(x -> x != \" \", words_without_commas_without_spaces_without_comma_without_space_without_comma_without_space_without_comma)\n\
    \    words_without_commas_without_spaces_without_comma_without_space_without_comma_without_space_without_comma_without_space_without_comma\
    \ = filter(x -> x != \",\", words_without_commas_without_spaces_without_comma_without_space_without_comma_without_space_without_comma_without_space_without_comma)\n\
    \    words_without_commas_without_spaces_without_comma_without_space_without_comma_without_space_without_comma_without_space_without_comma_without_space\
    \ = filter(x -> x != \" \", words_without_commas_without_spaces_without_comma_without_space_without_comma_without_space_without_comma_without_space_without_comma_without_space)\n\
    \    words_without_commas_without_spaces_without_comma_without_space_without_comma_without_space_without_comma_without_space_without_comma_without_space_without_comma\
    \ = filter(x -> x != \",\", words_without_commas_without_spaces_without_comma_without_space_without_comma_without_space_without_comma_without_space_without_comma_without_space_without_comma)\n\
    \    words_without_commas_without_spaces_without_comma_without_space_without_comma_without_space_without_comma_without_space_without_comma_without_space_without_comma_without_space\
    \ = filter(x -> x != \" \", words_without_commas_", "    words = split(txt, \"\
    \ \")\n    words_split = Vector{String}(undef, 0)\n    for word in words\n   \
    \     if !contains(words_split, word)\n            words_split += word\n     \
    \   end\n    end\n    return words_split\nend", "    if isempty(txt)\n       \
    \ return Vector{String}()\n    elseif length(txt) == 1 \n        return txt\n\
    \    elseif length(txt) == 2 \n        return txt\n    elseif length(txt) == 3\
    \ \n        return txt\n    elseif length(txt) == 4 \n        return txt\n   \
    \ elseif length(txt) == 5 \n        return txt\n    elseif length(txt) == 6 \n\
    \        return txt\n    elseif length(txt) == 7 \n        return txt\n    elseif\
    \ length(txt) == 8 \n        return txt\n    elseif length(txt) == 9 \n      \
    \  return txt\n    elseif length(txt) == 10 \n        return txt\n    elseif length(txt)\
    \ == 11 \n        return txt\n    elseif length(txt) == 12 \n        return txt\n\
    \    elseif length(txt) == 13 \n        return txt\n    elseif length(txt) ==\
    \ 14 \n        return txt\n    elseif length(txt) == 15 \n        return txt\n\
    \    elseif length(txt) == 16 \n        return txt\n    elseif length(txt) ==\
    \ 17 \n        return txt\n    elseif length(txt) == 18 \n        return txt\n\
    \    elseif length(txt) == 19 \n        return txt\n    elseif length(txt) ==\
    \ 20 \n        return txt\n    elseif length(txt) == 21 \n        return txt\n\
    \    elseif length(txt) == 22 \n        return txt\n    elseif length(txt) ==\
    \ 23 \n        return txt\n    elseif length(txt) == 24 \n        return txt\n\
    \    elseif length(txt) == 25 \n        return txt\n    elseif length(txt) ==\
    \ 26 \n        return txt\n    elseif length(txt) == 27 \n        return txt\n\
    \    elseif length(txt) == 28 \n        return txt\n    elseif length(txt) ==\
    \ 29 \n        return txt\n    elseif length(txt) == 30 \n        return txt\n\
    \    elseif length(txt) == 31 \n        return txt\n    elseif length(txt) ==\
    \ 32 \n        return txt\n    elseif length(txt) == 33 \n        return txt\n\
    \    elseif length(txt) == 34 \n        return txt\n    elseif length(txt) ==\
    \ 35 \n        return txt\n    elseif length(txt) == 36 \n        return txt\n\
    \    elseif length(txt) == 37 \n        return txt\n    elseif length(txt) ==\
    \ 38 \n        return txt\n    elseif length(txt) == 39 \n        return txt\n\
    \    elseif length(txt) == 40 \n        return txt\n    elseif length(txt) ==\
    \ 41 \n        return txt\n    elseif length(txt) == 42 \n        return txt\n\
    \    elseif length(txt) == 43 \n        return txt\n    elseif length(txt) ==\
    \ 44 \n        return txt\n    elseif length(txt) == 45 \n        return txt\n\
    \    elseif length(txt) == 46 \n        return txt\n    elseif length(txt) ==\
    \ 47 \n        return txt\n    elseif length(txt) == 48 \n        return txt\n\
    \    elseif length(txt) == 49 \n", "    \n    words = split(txt)\n    \n    words_split\
    \ = []\n    \n    for word in words\n        \n        if isempty(word)\n    \
    \        words_split.push(\",\")\n        elseif isempty(word[1])\n          \
    \  words_split.push(word)\n        else\n            words_split.push(word[1])\n\
    \        end\n    end\n    \n    return words_split\nend", "    txt = txt.trim()\n\
    \    if txt == \"\"\n        return Vector{String}()\n    else\n        words\
    \ = split(txt, \" \")\n        words = [w for w in words if w != \"\"]\n     \
    \   words = [w for w in words if w != \",\"]\n        words = [w for w in words\
    \ if w != \".\"]\n        words = [w for w in words if w != \"?\"]\n        words\
    \ = [w for w in words if w != \"!\"]\n        words = [w for w in words if w !=\
    \ \"-\"]\n        words = [w for w in words if w != \"_\"]\n        words = [w\
    \ for w in words if w != \"&\"]\n        words = [w for w in words if w != \"\
    #\"]\n        words = [w for w in words if w != \"$\"]\n        words = [w for\
    \ w in words if w != \"%\"]\n        words = [w for w in words if w != \"^\"]\n\
    \        words = [w for w in words if w != \"&\"]\n        words = [w for w in\
    \ words if w != \"*\"]\n        words = [w for w in words if w != \"(\"]\n   \
    \     words = [w for w in words if w != \")\"]\n        words = [w for w in words\
    \ if w != \"[\"]\n        words = [w for w in words if w != \"]\"]\n        words\
    \ = [w for w in words if w != \"{\"]\n        words = [w for w in words if w !=\
    \ \"}\"]\n        words = [w for w in words if w != \"|\"]\n        words = [w\
    \ for w in words if w != \"\\\\\"]\n        words = [w for w in words if w !=\
    \ \"^\"]\n        words = [w for w in words if w != \"~\"]\n        words = [w\
    \ for w in words if w != \"`\"]\n        words = [w for w in words if w != \"\xB4\
    \"]\n        words = [w for w in words if w != \"\xA8\"]\n        words = [w for\
    \ w in words if w != \"\xBB\"]\n        words = [w for w in words if w != \"\xAB\
    \"]\n        words = [w for w in words if w != \"\xBB\"]\n        words = [w for\
    \ w in words if w != \"\xAB\"]\n        words = [w for w in words if w != \"\xBB\
    \"]\n        words = [w for w in words if w != \"\xAB\"]\n        words = [w for\
    \ w in words if w != \"\xBB\"]\n        words = [w for w in words if w != \"\xAB\
    \"]\n        words = [w for w in words if w != \"\xBB\"]\n        words = [w ",
  "    \n    txt = txt.trim()\n    if txt == \"\"\n        return txt\n    \n    words\
    \ = split(txt, \" \")\n    \n    words_splitted = [split(word, \",\") for word\
    \ in words]\n    \n    words_splitted = [word for words_splitted in words_splitted\
    \ for word in words_splitted if word != \"\"]\n    \n    words_splitted = [word\
    \ for word in words_splitted if islower(word)]\n    \n    words_splitted = [word\
    \ for word in words_splitted if isupper(word)]\n    \n    words_splitted = [word\
    \ for word in words_splitted if isdigit(word)]\n    \n    words_splitted = [word\
    \ for word in words_splitted if isalpha(word)]\n    \n    words_splitted = [word\
    \ for word in words_splitted if isalnum(word)]\n    \n    words_splitted = [word\
    \ for word in words_splitted if isspace(word)]\n    \n    words_splitted = [word\
    \ for word in words_splitted if isupper(word)]\n    \n    words_splitted = [word\
    \ for word in words_splitted if islower(word)]\n    \n    words_splitted = [word\
    \ for word in words_splitted if isdigit(word)]\n    \n    words_splitted = [word\
    \ for word in words_splitted if isalpha(word)]\n    \n    words_splitted = [word\
    \ for word in words_splitted if isalnum(word)]\n    \n    words_splitted = [word\
    \ for word in words_splitted if isspace(word)]\n    \n    words_splitted = [word\
    \ for word in words_splitted if isupper(word)]\n    \n    words_splitted = [word\
    \ for word in words_splitted if islower(word)]\n    \n    words_splitted = [word\
    \ for word in words_splitted if isdigit(word)]\n    \n    words_splitted = [word\
    \ for word in words_splitted if isalpha(word)]\n    \n    words_splitted = [word\
    \ for word in words_splitted if isalnum(word)]\n    \n    words_splitted = [word\
    \ for word in words_splitted if isspace(word)]\n    \n    words_splitted = [word\
    \ for word in words_splitted if isupper(word)]\n    \n    words_splitted = [word\
    \ for word in words_splitted if islower(word)]\n    \n    words_splitted = [word\
    \ for word in words_splitted if isdigit(word)]\n    \n    words_splitted = [word\
    \ for word in words_splitted if isalpha(word)]\n    \n    words_split", "    \n\
    \    words = split(txt)\n    \n    words_splitted = []\n    \n    for word in\
    \ words\n        \n        if isempty(word)\n            words_splitted = words_splitted\
    \ \n        else\n            words_splitted = words_splitted ++ split(word)\n\
    \        end\n    end\n    \n    return words_splitted\nend\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"Hello world!\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    Hello,world!\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdef\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ a vector of strings with all words separated by commas. \nExamples\nsplit_words(\"\
    Hello world!\") \u279E [\"Hello\", \"world!\"]\nsplit_words(\"Hello,world!\")\
    \ \u279E [\"Hello\", \"world!\"]\nsplit_words(\"abcdef\") == 3 \nHint: use split()\
    \ function from Strings package", "    txt = txt.trim()\n    if isempty(txt)\n\
    \        return Vector{String}()\n    else\n        words = split(txt, \" \")\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[",
  "    words = split(txt, \" \")\n    \n    if length(words) == 0\n        return\
    \ words\n    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    txt = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\t\"\n        return Vector{String}()\n    elseif txt == \"\\r\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\t\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\r\"\n        return Vector{String}()\n    elseif txt == \"\\t\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\n\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\r\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\t\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\r\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\t\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\n\"\n        return Vector{String}()\n    elseif txt == \"\\r\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\t\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\r\"\n        return Vector{String}()\n    elseif txt == \"\\t\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\n\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\r\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\t\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\r\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\t\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\n\"\n        return Vector{String}()\n    elseif txt == \"\\r\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\t\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\r\"\n        return Vector{String}()\n    elseif txt == \"\\t\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\n\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\r\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\t\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\r\"\n        return Vector{String}()\n",
  "    if isempty(txt)\n        return txt\n    else\n        words = split(txt, \"\
    \ \")\n        words_without_commas = filter(x -> !contains(x, \",\"), words)\n\
    \        words_without_commas_with_odd_order = filter(x -> contains(x, \",\"),\
    \ words_without_commas)\n        words_without_commas_with_odd_order = sort(words_without_commas_with_odd_order)\n\
    \        words_without_commas_with_odd_order = words_without_commas_with_odd_order[end-1:end]\n\
    \        words_without_commas_with_odd_order = words_without_commas_with_odd_order[end-1:end]\n\
    \        words_without_commas_with_odd_order = words_without_commas_with_odd_order[end-1:end]\n\
    \        words_without_commas_with_odd_order = words_without_commas_with_odd_order[end-1:end]\n\
    \        words_without_commas_with_odd_order = words_without_commas_with_odd_order[end-1:end]\n\
    \        words_without_commas_with_odd_order = words_without_commas_with_odd_order[end-1:end]\n\
    \        words_without_commas_with_odd_order = words_without_commas_with_odd_order[end-1:end]\n\
    \        words_without_commas_with_odd_order = words_without_commas_with_odd_order[end-1:end]\n\
    \        words_without_commas_with_odd_order = words_without_commas_with_odd_order[end-1:end]\n\
    \        words_without_commas_with_odd_order = words_without_commas_with_odd_order[end-1:end]\n\
    \        words_without_commas_with_odd_order = words_without_commas_with_odd_order[end-1:end]\n\
    \        words_without_commas_with_odd_order = words_without_commas_with_odd_order[end-1:end]\n\
    \        words_without_commas_with_odd_order = words_without_commas_with_odd_order[end-1:end]\n\
    \        words_without_commas_with_odd_order = words_without_commas_with_odd_order[end-1:end]\n\
    \        words_without_commas_with_odd_order = words_without_commas_with_odd_order[end-1:end]\n\
    \        words_without_commas_with_odd_order = words_without_commas_with_odd_order[end-1:end]\n\
    \        words_without_commas_with_odd_order = words_without_commas_with_odd_order[end-1:end]\n\
    \        words_without_commas_with_odd_order = words_without_commas_with_odd_order[end-1:end]\n\
    \        words_without_commas_with_odd_order = words_without_commas_with_odd_order[end-1:end]\n\
    \        words_without_commas_with_odd_order = words_without_commas_with_odd_order",
  "    if isempty(txt)\n        return txt\n    else\n        words = split(txt, \"\
    \ \")\n        words_without_commas = filter(x -> !contains(x, \",\"), words)\n\
    \        words_without_commas = filter(x -> !contains(x, \".\"), words_without_commas)\n\
    \        words_without_commas = filter(x -> !contains(x, \"!\"), words_without_commas)\n\
    \        words_without_commas = filter(x -> !contains(x, \"?\"), words_without_commas)\n\
    \        words_without_commas = filter(x -> !contains(x, \"-\"), words_without_commas)\n\
    \        words_without_commas = filter(x -> !contains(x, \"(\"), words_without_commas)\n\
    \        words_without_commas = filter(x -> !contains(x, \")\"), words_without_commas)\n\
    \        words_without_commas = filter(x -> !contains(x, \"[\"), words_without_commas)\n\
    \        words_without_commas = filter(x -> !contains(x, \"]\"), words_without_commas)\n\
    \        words_without_commas = filter(x -> !contains(x, \"{\"), words_without_commas)\n\
    \        words_without_commas = filter(x -> !contains(x, \"}\"), words_without_commas)\n\
    \        words_without_commas = filter(x -> !contains(x, \"|\"), words_without_commas)\n\
    \        words_without_commas = filter(x -> !contains(x, \"\\\\\"), words_without_commas)\n\
    \        words_without_commas = filter(x -> !contains(x, \"^\"), words_without_commas)\n\
    \        words_without_commas = filter(x -> !contains(x, \"$\"), words_without_commas)\n\
    \        words_without_commas = filter(x -> !contains(x, \"*\"), words_without_commas)\n\
    \        words_without_commas = filter(x -> !contains(x, \"?\"), words_without_commas)\n\
    \        words_without_commas = filter(x -> !contains(x, \"=\"), words_without_commas)\n\
    \        words_without_commas = filter(x -> !contains(x, \"-\"), words_without_commas)\n\
    \        words_without_commas = filter(x -> !contains(x, \"~\"), words_without_commas)\n\
    \        words_without_commas = filter(x -> !contains(x, \"`\"), words_without_commas)\n\
    \        words_without_commas = filter(x -> !contains(x, \"!\"), words_without_commas)\n\
    \        words_without_commas = filter(x -> !contains(x, \"@\"), words_without_commas)\n\
    \        words_without_commas = filter(x -> !contains(x, \"#\"), words_without_comm",
  "    \n    words = split(txt, \" \")\n    \n    if length(words) == 0\n        return\
    \ words\n    \n    if length(words) == 1 \n        return words\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    ", "    if isempty(txt)\n        return txt\n   \
    \ else\n        words = split(txt, \" \")\n        words = words[words != \"\"\
    ]\n        words = words[words != \",\"]\n        words = words[words != \".\"\
    ]\n        words = words[words != \"!\"]\n        words = words[words != \"?\"\
    ]\n        words = words[words != \"!\"]\n        words = words[words != \"?\"\
    ]\n        words = words[words != \"!\"]\n        words = words[words != \"?\"\
    ]\n        words = words[words != \"!\"]\n        words = words[words != \"?\"\
    ]\n        words = words[words != \"!\"]\n        words = words[words != \"?\"\
    ]\n        words = words[words != \"!\"]\n        words = words[words != \"?\"\
    ]\n        words = words[words != \"!\"]\n        words = words[words != \"?\"\
    ]\n        words = words[words != \"!\"]\n        words = words[words != \"?\"\
    ]\n        words = words[words != \"!\"]\n        words = words[words != \"?\"\
    ]\n        words = words[words != \"!\"]\n        words = words[words != \"?\"\
    ]\n        words = words[words != \"!\"]\n        words = words[words != \"?\"\
    ]\n        words = words[words != \"!\"]\n        words = words[words != \"?\"\
    ]\n        words = words[words != \"!\"]\n        words = words[words != \"?\"\
    ]\n        words = words[words != \"!\"]\n        words = words[words != \"?\"\
    ]\n        words = words[words != \"!\"]\n        words = words[words != \"?\"\
    ]\n        words = words[words != \"!\"]\n        words = words[words != \"?\"\
    ]\n        words = words[words != \"!\"]\n        words = words[words != \"?\"\
    ]\n        words = words[words != \"!\"]\n        words = words[words != \"?\"\
    ]\n        words = words[words != \"!\"]\n        words = words[words != \"?\"\
    ]\n        words = words[words != \"!\"]\n        words = words[words != \"?\"\
    ]\n        words = words[words != \"!\"]\n        words = words[words != \"?\"\
    ]\n        words = words[words != \"!\"]\n        words = words[words != \"?\"\
    ]\n        words = words[words != \"!\"]\n        words = words[words != \"?\"\
    ]\n        words = words[word", "    \n    words = split(txt, \" \")\n    \n \
    \   if isempty(words)\n        return words\n    else\n        \n        words\
    \ = [w for w in words if w != \"\"]\n        \n        if isempty(words)\n   \
    \         return words\n        else\n            \n            words_split =\
    \ split(words, \",\")\n            \n            if isempty(words_split)\n   \
    \             return words\n            else\n                \n             \
    \   words_split = [w for w in words_split if w != \"\"]\n                \n  \
    \              if isempty(words_split)\n                    return words\n   \
    \             else\n                    \n                    words_split = [w\
    \ for w in words_split if w != \"\"]\n                    \n                 \
    \   if isempty(words_split)\n                        return words\n          \
    \          else\n                        \n                        words_split\
    \ = [w for w in words_split if w != \"\"]\n                        \n        \
    \                if isempty(words_split)\n                            return words\n\
    \                        else\n                            \n                \
    \            words_split = [w for w in words_split if w != \"\"]\n           \
    \                 \n                            if isempty(words_split)\n    \
    \                            return words\n                            else\n\
    \                                \n                                words_split\
    \ = [w for w in words_split if w != \"\"]\n                                \n\
    \                                if isempty(words_split)\n                   \
    \                 return words\n                                else\n       \
    \                             \n                                    words_split\
    \ = [w for w in words_split if w != \"\"]\n                                  \
    \  \n                                    if isempty(words_split)\n           \
    \                             return words\n                                 \
    \   else\n                                        \n                         \
    \               words_split = [w for w in words_split if w != \"\"]\n        \
    \                                \n                                        if\
    \ isempty(words_split)\n                                            return words\n\
    \                                        else\n                              \
    \              \n                                            words_split = [w\
    \ for w in words_split if w != \"\"]\n                                       \
    \     \n                                            if isempty(words_split)\n\
    \                                                return words\n              \
    \                              else\n                                        \
    \        \n                                                words_split = [w for\
    \ w in words_split if w != \"\"]\n                                           \
    \     \n                                                if isempty(words_split)\n\
    \                                                    return words\n          \
    \                                      else\n                                \
    \                    \n                                                    words_split\
    \ = [w for w in words_split if w != \"\"]\n                                  \
    \                  \n                                                    if isempty(words_split)\n\
    \                                                        return words\n      \
    \                                              else\n                        \
    \                                \n                                          \
    \              words_split = [w for w in words_split if w != \"\"]\n         \
    \                                               \n                           \
    \                             return words_split\n                           \
    \                     end\n                                            end\n \
    \                                       end\n                                \
    \    end\n                                end\n                            end\n\
    \                        end\n                    end\n                end\n \
    \           end\n        end\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of characters in the string",
  "    words = split(txt, \" \")\n    \n    if length(words) == 0 \n        return\
    \ 0 \n    else \n        return length(words) \n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    words = split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n  \
    \  words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"", "    \n    words = split(txt, \" \")\n    \n    if\
    \ isempty(words)\n        return words\n    end\n    \n    words_split = split(words,\
    \ \",\")\n    \n    if isempty(words_split)\n        return words\n    end\n \
    \   \n    words_split = words_split[findall(words_split)]\n    \n    if isempty(words_split)\n\
    \        return words\n    end\n    \n    words_split = words_split[findall(words_split)]\n\
    \    \n    if isempty(words_split)\n        return words\n    end\n    \n    words_split\
    \ = words_split[findall(words_split)]\n    \n    if isempty(words_split)\n   \
    \     return words\n    end\n    \n    words_split = words_split[findall(words_split)]\n\
    \    \n    if isempty(words_split)\n        return words\n    end\n    \n    words_split\
    \ = words_split[findall(words_split)]\n    \n    if isempty(words_split)\n   \
    \     return words\n    end\n    \n    words_split = words_split[findall(words_split)]\n\
    \    \n    if isempty(words_split)\n        return words\n    end\n    \n    words_split\
    \ = words_split[findall(words_split)]\n    \n    if isempty(words_split)\n   \
    \     return words\n    end\n    \n    words_split = words_split[findall(words_split)]\n\
    \    \n    if isempty(words_split)\n        return words\n    end\n    \n    words_split\
    \ = words_split[findall(words_split)]\n    \n    if isempty(words_split)\n   \
    \     return words\n    end\n    \n    words_split = words_split[findall(words_split)]\n\
    \    \n    if isempty(words_split)\n        return words\n    end\n    \n    words_split\
    \ = words_split[findall(words_split)]\n    \n    if isempty(words_split)\n   \
    \     return words\n    end\n    \n    words_split = words_split[findall(words_split)]\n\
    \    \n    if isempty(words_split)\n        return words\n    end\n    \n    words_split\
    \ = words_split[findall(words_split)]\n    \n    if isempty(words_split)\n   \
    \     return words\n    end\n    \n    words_split = words_split[findall(words_split)]\n\
    \    \n    if isempty(words_split)\n        return words\n    end\n    \n    words_split\
    \ = words_split[findall(words_split)]\n    \n    if isempty(words_split)\n   \
    \     return words\n    end\n    \n    words_split = words_split[findall(words_split)]\n\
    \    \n    if isempty(words_split)\n        return words\n    end", "    words\
    \ = split(txt, \" \")\n    words_split = Vector{String}(undef, 0)\n    words_split\
    \ = [word for word in words if word != \"\"]\n    words_split = sort(words_split)\n\
    \    words_split = words_split[words_split .!= \"\"]\n    words_split = words_split[words_split\
    \ .!= \" \"]\n    words_split = words_split[words_split .!= \",\"]\n    words_split\
    \ = words_split[words_split .!= \".\"]\n    words_split = words_split[words_split\
    \ .!= \"]\"]\n    words_split = words_split[words_split .!= \"]\"]\n    words_split\
    \ = words_split[words_split .!= \"]\"]\n    words_split = words_split[words_split\
    \ .!= \"]\"]\n    words_split = words_split[words_split .!= \"]\"]\n    words_split\
    \ = words_split[words_split .!= \"]\"]\n    words_split = words_split[words_split\
    \ .!= \"]\"]\n    words_split = words_split[words_split .!= \"]\"]\n    words_split\
    \ = words_split[words_split .!= \"]\"]\n    words_split = words_split[words_split\
    \ .!= \"]\"]\n    words_split = words_split[words_split .!= \"]\"]\n    words_split\
    \ = words_split[words_split .!= \"]\"]\n    words_split = words_split[words_split\
    \ .!= \"]\"]\n    words_split = words_split[words_split .!= \"]\"]\n    words_split\
    \ = words_split[words_split .!= \"]\"]\n    words_split = words_split[words_split\
    \ .!= \"]\"]\n    words_split = words_split[words_split .!= \"]\"]\n    words_split\
    \ = words_split[words_split .!= \"]\"]\n    words_split = words_split[words_split\
    \ .!= \"]\"]\n    words_split = words_split[words_split .!= \"]\"]\n    words_split\
    \ = words_split[words_split .!= \"]\"]\n    words_split = words_split[words_split\
    \ .!= \"]\"]\n    words_split = words_split[words_split .!= \"]\"]\n    words_split\
    \ = words_split[words_split .!= \"]\"]\n    words_split = words_split[words_split\
    \ .!= \"]\"]\n    words_split = words_split[words_split .!= \"]\"]\n    words_split\
    \ = words_split[words_split .!= \"]\"]\n    words_split = words_split[words_split\
    \ .!= \"]\"]\n    words_split = words_split[words_split .!= \"]\"]\n    words_split\
    \ = words_split[words_split .!= \"]\"]\n    words_split = words_split[words_split\
    \ .!= \"]\"]\n    words_split = words_split[words_split .!= \"]\"]\n    words_split\
    \ = words_", "    \n    words = split(txt, \" \")\n    \n    if isempty(words)\n\
    \        return words\n    end\n    \n    words_split = split(words, \",\")\n\
    \    \n    if isempty(words_split)\n        return words\n    end\n    \n    words_split2\
    \ = split(words_split[1], \" \")\n    \n    if isempty(words_split2)\n       \
    \ return words\n    end\n    \n    words_split3 = split(words_split2[1], \",\"\
    )\n    \n    if isempty(words_split3)\n        return words\n    end\n    \n \
    \   words_split4 = split(words_split3[1], \" \")\n    \n    if isempty(words_split4)\n\
    \        return words\n    end\n    \n    words_split5 = split(words_split4[1],\
    \ \",\")\n    \n    if isempty(words_split5)\n        return words\n    end\n\
    \    \n    words_split6 = split(words_split5[1], \" \")\n    \n    if isempty(words_split6)\n\
    \        return words\n    end\n    \n    words_split7 = split(words_split6[1],\
    \ \",\")\n    \n    if isempty(words_split7)\n        return words\n    end\n\
    \    \n    words_split8 = split(words_split7[1], \" \")\n    \n    if isempty(words_split8)\n\
    \        return words\n    end\n    \n    words_split9 = split(words_split8[1],\
    \ \",\")\n    \n    if isempty(words_split9)\n        return words\n    end\n\
    \    \n    words_split10 = split(words_split9[1], \" \")\n    \n    if isempty(words_split10)\n\
    \        return words\n    end\n    \n    words_split11 = split(words_split10[1],\
    \ \",\")\n    \n    if isempty(words_split11)\n        return words\n    end\n\
    \    \n    words_split12 = split(words_split11[1], \" \")\n    \n    if isempty(words_split12)\n\
    \        return words\n    end\n    \n    words_split13 = split(words_split12[1],\
    \ \",\")\n    \n    if isempty(words_split13)\n        return words\n    end\n\
    \    \n    words_split14 = split(words_split13[1], \" \")\n    \n    if isempty(words_split14)\n\
    \        return words\n    end\n    \n    words_split15 = split(words_split14[1],\
    \ \",\")\n    \n    if isempty(words_split15)\n        return words\n    end\n\
    \    \n    words_split16 = split(words_split15[1], \" \")\n    \n    if isempty(words_split16)\n\
    \        return words\n    end\n    \n    words_split17 = split(words_split16[1],\
    \ \",\")\n    \n    if ", "    \n    txt = txt.trim()\n    \n    if txt == \"\"\
    \n        return txt\n    \n    words = split(txt, \" \")\n    \n    words_split\
    \ = Vector{String}()\n    \n    for word in words\n        words_split = words_split\
    \ ++ split(word, \",\")\n    end\n    \n    words_split = words_split ++ split(txt,\
    \ \" \")\n    \n    words_split = words_split ++ split(txt, \",\")\n    \n   \
    \ words_split = words_split ++ split(txt, \" \")\n    \n    words_split = words_split\
    \ ++ split(txt, \",\")\n    \n    words_split = words_split ++ split(txt, \" \"\
    )\n    \n    words_split = words_split ++ split(txt, \",\")\n    \n    words_split\
    \ = words_split ++ split(txt, \" \")\n    \n    words_split = words_split ++ split(txt,\
    \ \",\")\n    \n    words_split = words_split ++ split(txt, \" \")\n    \n   \
    \ words_split = words_split ++ split(txt, \",\")\n    \n    words_split = words_split\
    \ ++ split(txt, \" \")\n    \n    words_split = words_split ++ split(txt, \",\"\
    )\n    \n    words_split = words_split ++ split(txt, \" \")\n    \n    words_split\
    \ = words_split ++ split(txt, \",\")\n    \n    words_split = words_split ++ split(txt,\
    \ \" \")\n    \n    words_split = words_split ++ split(txt, \",\")\n    \n   \
    \ words_split = words_split ++ split(txt, \" \")\n    \n    words_split = words_split\
    \ ++ split(txt, \",\")\n    \n    words_split = words_split ++ split(txt, \" \"\
    )\n    \n    words_split = words_split ++ split(txt, \",\")\n    \n    words_split\
    \ = words_split ++ split(txt, \" \")\n    \n    words_split = words_split ++ split(txt,\
    \ \",\")\n    \n    words_split = words_split ++ split(txt, \" \")\n    \n   \
    \ words_split = words_split ++ split(txt, \",\")\n    \n    words_split = words_split\
    \ ++ split(txt, \" \")\n    \n    words_split = words_split ++ split(txt, \",\"\
    )\n    \n    words_split = words_split ++ split(txt, \" \")\n    \n    words_split\
    \ = words_split ++ split(txt, \",\")\n    \n    words_split = words_split ++ split(txt,\
    \ \" \")\n    \n    words_split = words_split ++ split(txt, \",\")\n    \n   \
    \ words_split = words_split ++ split(txt, \" \")\n    \n    words_split = words_split\
    \ ++ split(txt, \",\")\n    \n    words_split = words_split ++ split(txt, \" \"\
    )\n    \n    words_split = words_split ++ ", "    txt = txt.trim()\n    txt =\
    \ txt.split(\" \") \n    txt = txt.filter(x -> x != \"\")\n    txt = txt.map(x\
    \ -> lowercase(x))\n    txt = txt.filter(x -> x != \"\")\n    txt = txt.map(x\
    \ -> lowercase(x))\n    txt = txt.filter(x -> x != \"\")\n    txt = txt.map(x\
    \ -> lowercase(x))\n    txt = txt.filter(x -> x != \"\")\n    txt = txt.map(x\
    \ -> lowercase(x))\n    txt = txt.filter(x -> x != \"\")\n    txt = txt.map(x\
    \ -> lowercase(x))\n    txt = txt.filter(x -> x != \"\")\n    txt = txt.map(x\
    \ -> lowercase(x))\n    txt = txt.filter(x -> x != \"\")\n    txt = txt.map(x\
    \ -> lowercase(x))\n    txt = txt.filter(x -> x != \"\")\n    txt = txt.map(x\
    \ -> lowercase(x))\n    txt = txt.filter(x -> x != \"\")\n    txt = txt.map(x\
    \ -> lowercase(x))\n    txt = txt.filter(x -> x != \"\")\n    txt = txt.map(x\
    \ -> lowercase(x))\n    txt = txt.filter(x -> x != \"\")\n    txt = txt.map(x\
    \ -> lowercase(x))\n    txt = txt.filter(x -> x != \"\")\n    txt = txt.map(x\
    \ -> lowercase(x))\n    txt = txt.filter(x -> x != \"\")\n    txt = txt.map(x\
    \ -> lowercase(x))\n    txt = txt.filter(x -> x != \"\")\n    txt = txt.map(x\
    \ -> lowercase(x))\n    txt = txt.filter(x -> x != \"\")\n    txt = txt.map(x\
    \ -> lowercase(x))\n    txt = txt.filter(x -> x != \"\")\n    txt = txt.map(x\
    \ -> lowercase(x))\n    txt = txt.filter(x -> x != \"\")\n    txt = txt.map(x\
    \ -> lowercase(x))\n    txt = txt.filter(x -> x != \"\")\n    txt = txt.map(x\
    \ -> lowercase(x))\n    txt = txt.filter(x -> x != \"\")\n    txt = txt.map(x\
    \ -> lowercase(x))\n    txt = txt.filter(x -> x != \"\")\n    txt = txt.map(x\
    \ -> lowercase(x))\n    txt = txt.filter(x -> x != \"\")\n    txt = txt.map(x\
    \ -> lowercase(x))\n    txt = txt.filter(x -> x != \"\")\n", "    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    if isempty(txt)\n        return\
    \ txt\n    else\n        words = split(txt, \" \")\n        words = [w for w in\
    \ words if w != \"\"]\n        words = [w for w in words if w != \",\"]\n    \
    \    words = [w for w in words if w != \" \"]\n        words = [w for w in words\
    \ if w != \"\\n\"]\n        words = [w for w in words if w != \"\\t\"]\n     \
    \   words = [w for w in words if w != \"\\r\"]\n        words = [w for w in words\
    \ if w != \"\\t\"]\n        words = [w for w in words if w != \"\\r\"]\n     \
    \   words = [w for w in words if w != \"\\t\"]\n        words = [w for w in words\
    \ if w != \"\\r\"]\n        words = [w for w in words if w != \"\\t\"]\n     \
    \   words = [w for w in words if w != \"\\r\"]\n        words = [w for w in words\
    \ if w != \"\\t\"]\n        words = [w for w in words if w != \"\\r\"]\n     \
    \   words = [w for w in words if w != \"\\t\"]\n        words = [w for w in words\
    \ if w != \"\\r\"]\n        words = [w for w in words if w != \"\\t\"]\n     \
    \   words = [w for w in words if w != \"\\r\"]\n        words = [w for w in words\
    \ if w != \"\\t\"]\n        words = [w for w in words if w != \"\\r\"]\n     \
    \   words = [w for w in words if w != \"\\t\"]\n        words = [w for w in words\
    \ if w != \"\\r\"]\n        words = [w for w in words if w != \"\\t\"]\n     \
    \   words = [w for w in words if w != \"\\r\"]\n        words = [w for w in words\
    \ if w != \"\\t\"]\n        words = [w for w in words if w != \"\\r\"]\n     \
    \   words = [w for w in words if w != \"\\t\"]\n        words = [w for w in words\
    \ if w != \"\\r\"]\n        words = [w for w in words if w != \"\\t\"]\n     \
    \   words = [w for w in words if w != \"\\r\"]\n        words = [w for w in words\
    \ if w != \"\\t\"]\n        words = [w for w in words if w != \"\\r\"]\n     \
    \   words = [w for w in words if w != \"\\t\"]\n        words = [w for w in words\
    \ if w != \"\\r\"]\n        words = [w for w in words if w != \"\\t\"]\n     \
    \   words = [w for w in words if w != \"\\r\"]\n        words = [w for w in words\
    \ if w != \"\\t\"]\n        words = [w for w in words if w != \"\\r", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    txt = txt.trim()\n\
    \    if txt == \"\"\n        return txt\n    \n    words = split(txt, \" \")\n\
    \    \n    words_split = Vector{String}(undef, 0)\n    \n    for word in words\n\
    \        words_split = words_split ++ split(word, \",\")\n    end\n    \n    words_split\
    \ = words_split ++ split(split(txt, \".\"), \",\")\n    \n    words_split = words_split\
    \ ++ split(split(txt, \"!\"), \",\")\n    \n    words_split = words_split ++ split(split(txt,\
    \ \"?\"), \",\")\n    \n    words_split = words_split ++ split(split(txt, \";\"\
    ), \",\")\n    \n    words_split = words_split ++ split(split(txt, \":\"), \"\
    ,\")\n    \n    words_split = words_split ++ split(split(txt, \",\"), \",\")\n\
    \    \n    words_split = words_split ++ split(split(txt, \"-\"), \",\")\n    \n\
    \    words_split = words_split ++ split(split(txt, \"/\"), \",\")\n    \n    words_split\
    \ = words_split ++ split(split(txt, \"\\\\\"), \",\")\n    \n    words_split =\
    \ words_split ++ split(split(txt, \"'\"), \",\")\n    \n    words_split = words_split\
    \ ++ split(split(txt, \"\\\"\"), \",\")\n    \n    words_split = words_split ++\
    \ split(split(txt, \"[\"), \",\")\n    \n    words_split = words_split ++ split(split(txt,\
    \ \"]\"), \",\")\n    \n    words_split = words_split ++ split(split(txt, \"(\"\
    ), \",\")\n    \n    words_split = words_split ++ split(split(txt, \")\"), \"\
    ,\")\n    \n    words_split = words_split ++ split(split(txt, \"{\"), \",\")\n\
    \    \n    words_split = words_split ++ split(split(txt, \"}\"), \",\")\n    \n\
    \    words_split = words_split ++ split(split(txt, \"[\"), \",\")\n    \n    words_split\
    \ = words_split ++ split(split(txt, \"]\"), \",\")\n    \n    words_split = words_split\
    \ ++ split(split(txt, \"(\"), \",\")\n    \n    words_split = words_split ++ split(split(txt,\
    \ \")\"), \",\")\n    \n    words_split = words_split ++ split(split(txt, \"{\"\
    ), \",\")\n    \n    words_split = words_split ++ split(split(txt, \"}\"), \"\
    ,\")\n    \n    words_split = words_split ++ split(split(txt, \"[\"), \",\")\n\
    \    \n    words_split = words_split ++ split(split(txt, \"]\"), \",\")\n    \n\
    \    words_split = words_split ++ split(split(txt, \"(\"), \",\")\n    \n    words_split\
    \ = words_split ++ split(split(txt", "    words = split(txt, \" \")\n    \n  \
    \  words_splitted = []\n    \n    for word in words\n        words_splitted =\
    \ words_splitted ++ split(word, \",\")\n    end\n    \n    words_splitted = words_splitted\
    \ ++ split(split(txt, \",\")[1], \" \")\n    \n    words_splitted = words_splitted\
    \ ++ split(split(txt, \",\")[2], \" \")\n    \n    words_splitted = words_splitted\
    \ ++ split(split(txt, \",\")[3], \" \")\n    \n    words_splitted = words_splitted\
    \ ++ split(split(txt, \",\")[4], \" \")\n    \n    words_splitted = words_splitted\
    \ ++ split(split(txt, \",\")[5], \" \")\n    \n    words_splitted = words_splitted\
    \ ++ split(split(txt, \",\")[6], \" \")\n    \n    words_splitted = words_splitted\
    \ ++ split(split(txt, \",\")[7], \" \")\n    \n    words_splitted = words_splitted\
    \ ++ split(split(txt, \",\")[8], \" \")\n    \n    words_splitted = words_splitted\
    \ ++ split(split(txt, \",\")[9], \" \")\n    \n    words_splitted = words_splitted\
    \ ++ split(split(txt, \",\")[10], \" \")\n    \n    words_splitted = words_splitted\
    \ ++ split(split(txt, \",\")[11], \" \")\n    \n    words_splitted = words_splitted\
    \ ++ split(split(txt, \",\")[12], \" \")\n    \n    words_splitted = words_splitted\
    \ ++ split(split(txt, \",\")[13], \" \")\n    \n    words_splitted = words_splitted\
    \ ++ split(split(txt, \",\")[14], \" \")\n    \n    words_splitted = words_splitted\
    \ ++ split(split(txt, \",\")[15], \" \")\n    \n    words_splitted = words_splitted\
    \ ++ split(split(txt, \",\")[16], \" \")\n    \n    words_splitted = words_splitted\
    \ ++ split(split(txt, \",\")[17], \" \")\n    \n    words_splitted = words_splitted\
    \ ++ split(split(txt, \",\")[18], \" \")\n    \n    words_splitted = words_splitted\
    \ ++ split(split(txt, \",\")[19], \" \")\n    \n    words_splitted = words_splitted\
    \ ++ split(split(txt, \",\")[20], \" \")\n    \n    words_splitted = words_splitted\
    \ ++ split(split(txt, \",\")[21], \" \")\n    \n    words_splitted = words_splitted\
    \ ++ split(split(txt, \",\")[22], \" \")\n    \n    words_splitted = words_splitted\
    \ ++ split(split(txt, \",\")[23], \" \")\n    \n    words_splitted = words_split",
  "    \n    words = split(txt)\n    \n    words_splitted = []\n    \n    for w in\
    \ words\n        \n        if w == \"\"\n            words_splitted = words_splitted\
    \ ++ [\"\"]\n        elseif w == \"\\n\"\n            words_splitted = words_splitted\
    \ ++ [\"\"]\n        elseif w == \",\"\n            words_splitted = words_splitted\
    \ ++ [\"\"]\n        else\n            words_splitted = words_splitted ++ split(w)\n\
    \        end\n    end\n    \n    return words_splitted\nend\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"Hello world!\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    Hello,world!\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdef\")\n\
    </cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world!\")\n</cell>\n<code\
    \ language=julia-1.5>\nsplit_words(\"Hello,world!\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"abcdef\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello\
    \ world!\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello,world!\"\
    )\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdef\")\n</cell>\n<code\
    \ language=julia-1.5>\nsplit_words(\"Hello world!\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"Hello,world!\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    abcdef\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world!\")\n\
    </cell>\n<code language=julia-1.5>\nsplit_words(\"Hello,world!\")\n</cell>\n<code\
    \ language=julia-1.5>\nsplit_words(\"abcdef\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"Hello world!\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    Hello,world!\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdef\")\n\
    </cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world!\")\n</cell>\n<code\
    \ language=julia-1.5>\nsplit_words(\"Hello,world!\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"abcdef\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello\
    \ world!\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello,world!\"\
    )\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdef\")\n</", "    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    if isempty(txt)\n   \
    \     return txt\n    else\n        words = split(txt, \" \")\n        words =\
    \ [w for w in words if w != \"\"]\n        words = [w for w in words if w != \"\
    ,\"]\n        words = [w for w in words if w != \"abcdef\"]\n        words = [w\
    \ for w in words if w != \"abcdefghijklmnopqrstuvwxyz\"]\n        words = [w for\
    \ w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ]\n        words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\"\
    ]\n        words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ]\n        words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    ]\n        words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefgh",
  "    words = split(txt, \" \")\n    words_split = split(txt, \",\")\n    if length(words_split)\
    \ == length(words)\n        return words\n    else\n        return words_split\n\
    \    end\nend\n</code>\n<|/ a |>\n<| a tags=julia,string |>\nI came up with this\
    \ solution:\n<code>", "    words = split(txt, \" \")\n    \n    if length(words)\
    \ == 0 \n        return 0 \n    else \n        \n        words = [w for w in words\
    \ if w != \"\"]\n        \n        if length(words) == 0 \n            return\
    \ 0 \n        else \n            \n            words = [w for w in words if w\
    \ != \",\"]\n            \n            if length(words) == 0 \n              \
    \  return 0 \n            else \n                \n                words = [w\
    \ for w in words if w != \"a\" and w != \"b\" and w != \"c\" and w != \"d\" and\
    \ w != \"e\" and w != \"f\" and w != \"g\" and w != \"h\" and w != \"i\" and w\
    \ != \"j\" and w != \"k\" and w != \"l\" and w != \"m\" and w != \"n\" and w !=\
    \ \"o\" and w != \"p\" and w != \"q\" and w != \"r\" and w != \"s\" and w != \"\
    t\" and w != \"u\" and w != \"v\" and w != \"w\" and w != \"x\" and w != \"y\"\
    \ and w != \"z\"]\n                \n                if length(words) == 0 \n\
    \                    return 0 \n                else \n                    \n\
    \                    words = [w for w in words if w != \"A\" and w != \"B\" and\
    \ w != \"C\" and w != \"D\" and w != \"E\" and w != \"F\" and w != \"G\" and w\
    \ != \"H\" and w != \"I\" and w != \"J\" and w != \"K\" and w != \"L\" and w !=\
    \ \"M\" and w != \"N\" and w != \"O\" and w != \"P\" and w != \"Q\" and w != \"\
    R\" and w != \"S\" and w != \"T\" and w != \"U\" and w != \"V\" and w != \"W\"\
    \ and w != \"X\" and w != \"Y\" and w != \"Z\"]\n                    \n      \
    \              if length(words) == 0 \n                        return 0 \n   \
    \                 else \n                        \n                        words\
    \ = [w for w in words if w != \"0\" and w != \"1\" and w != \"2\" and w != \"\
    3\" and w != \"4\" and w != \"5\" and w != \"6\" and w != \"7\" and w != \"8\"\
    \ and w != \"9\"]\n                        \n                        if length(words)\
    \ == 0 \n                            return 0 \n                        else \n\
    \                            \n                            words = [w for w in\
    \ words if w != \"a\" and w != \"b\" and w != \"c\" and w != \"d\" and w != \"\
    e\" and w != \"f\" and w != \"g\" and w != \"h\" and w != \"i\" and w != \"j\"\
    \ and w != \"k\" and w != \"l\" and w != \"m\" and w != \"n\" and w != \"o\" and\
    \ w != \"p\" and w != \"q\" and w != \"r\" and w != \"s\" and w != \"t\" and w\
    \ != \"u\" and w != \"v\" and w != \"w\" and w != \"x\" and w != \"y\" and w !=\
    \ \"z", "    txt = txt.trim()\n    txt = txt.strip(\",\")\n    txt = txt.strip(\"\
    \\n\")\n    txt = txt.strip(\"\\r\")\n    txt = txt.strip(\"\\t\")\n    txt =\
    \ txt.strip(\"\\t\")\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"\\t\"\
    )\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"\
    \\t\")\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"\\t\")\n    txt =\
    \ txt.strip(\"\\t\")\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"\\t\"\
    )\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"\
    \\t\")\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"\\t\")\n    txt =\
    \ txt.strip(\"\\t\")\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"\\t\"\
    )\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"\
    \\t\")\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"\\t\")\n    txt =\
    \ txt.strip(\"\\t\")\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"\\t\"\
    )\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"\
    \\t\")\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"\\t\")\n    txt =\
    \ txt.strip(\"\\t\")\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"\\t\"\
    )\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"\
    \\t\")\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"\\t\")\n    txt =\
    \ txt.strip(\"\\t\")\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"\\t\"\
    )\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"\
    \\t\")\n    txt = txt.", "    \n    words = split(txt, \" \")\n    \n    if length(words)\
    \ == 0 \n        return 0 \n    else \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        ", "    \n    words = split(txt, \" \")\n   \
    \ \n    words_split = []\n    \n    for word in words\n        \n        if !isnothing(word)\n\
    \            \n            words_split = words_split ++ split(word,\",\")\n  \
    \          \n        end\n    end\n    \n    words_split = words_split ++ split(split(txt,\"\
    ,\")[1],\" \")\n    \n    words_split = words_split ++ split(split(txt,\",\")[2],\"\
    \ \")\n    \n    words_split = words_split ++ split(split(txt,\",\")[3],\" \"\
    )\n    \n    words_split = words_split ++ split(split(txt,\",\")[4],\" \")\n \
    \   \n    words_split = words_split ++ split(split(txt,\",\")[5],\" \")\n    \n\
    \    words_split = words_split ++ split(split(txt,\",\")[6],\" \")\n    \n   \
    \ words_split = words_split ++ split(split(txt,\",\")[7],\" \")\n    \n    words_split\
    \ = words_split ++ split(split(txt,\",\")[8],\" \")\n    \n    words_split = words_split\
    \ ++ split(split(txt,\",\")[9],\" \")\n    \n    words_split = words_split ++\
    \ split(split(txt,\",\")[10],\" \")\n    \n    words_split = words_split ++ split(split(txt,\"\
    ,\")[11],\" \")\n    \n    words_split = words_split ++ split(split(txt,\",\"\
    )[12],\" \")\n    \n    words_split = words_split ++ split(split(txt,\",\")[13],\"\
    \ \")\n    \n    words_split = words_split ++ split(split(txt,\",\")[14],\" \"\
    )\n    \n    words_split = words_split ++ split(split(txt,\",\")[15],\" \")\n\
    \    \n    words_split = words_split ++ split(split(txt,\",\")[16],\" \")\n  \
    \  \n    words_split = words_split ++ split(split(txt,\",\")[17],\" \")\n    \n\
    \    words_split = words_split ++ split(split(txt,\",\")[18],\" \")\n    \n  \
    \  words_split = words_split ++ split(split(txt,\",\")[19],\" \")\n    \n    words_split\
    \ = words_split ++ split(split(txt,\",\")[20],\" \")\n    \n    words_split =\
    \ words_split ++ split(split(txt,\",\")[21],\" \")\n    \n    words_split = words_split\
    \ ++ split(split(txt,\",\")[22],\" \")\n    \n    words_split = words_split ++\
    \ split(split(txt,\",\")[23],\" \")\n    \n    words_split = words_split ++ split(split(txt,\"\
    ,\")[24],\" \")\n    \n    words_split = words_split ++ split(split(txt,\",\"\
    )[25],\" \")\n    ", "    txt = txt.trim()\n    if txt == \"\"\n        return\
    \ Vector{String}()\n    else\n        words = split(txt, \" \")\n        words\
    \ = [w for w in words if w != \"\"]\n        words = [w for w in words if w !=\
    \ \",\"]\n        words = [w for w in words if w != \" \"]\n        words = [w\
    \ for w in words if w != \"\\n\"]\n        words = [w for w in words if w != \"\
    \\t\"]\n        words = [w for w in words if w != \"\\r\"]\n        words = [w\
    \ for w in words if w != \"\\t\"]\n        words = [w for w in words if w != \"\
    \\r\"]\n        words = [w for w in words if w != \"\\t\"]\n        words = [w\
    \ for w in words if w != \"\\r\"]\n        words = [w for w in words if w != \"\
    \\t\"]\n        words = [w for w in words if w != \"\\r\"]\n        words = [w\
    \ for w in words if w != \"\\t\"]\n        words = [w for w in words if w != \"\
    \\r\"]\n        words = [w for w in words if w != \"\\t\"]\n        words = [w\
    \ for w in words if w != \"\\r\"]\n        words = [w for w in words if w != \"\
    \\t\"]\n        words = [w for w in words if w != \"\\r\"]\n        words = [w\
    \ for w in words if w != \"\\t\"]\n        words = [w for w in words if w != \"\
    \\r\"]\n        words = [w for w in words if w != \"\\t\"]\n        words = [w\
    \ for w in words if w != \"\\r\"]\n        words = [w for w in words if w != \"\
    \\t\"]\n        words = [w for w in words if w != \"\\r\"]\n        words = [w\
    \ for w in words if w != \"\\t\"]\n        words = [w for w in words if w != \"\
    \\r\"]\n        words = [w for w in words if w != \"\\t\"]\n        words = [w\
    \ for w in words if w != \"\\r\"]\n        words = [w for w in words if w != \"\
    \\t\"]\n        words = [w for w in words if w != \"\\r\"]\n        words = [w\
    \ for w in words if w != \"\\t\"]\n        words = [w for w in words if w != \"\
    \\r\"]\n        words = [w for w in words if w != \"\\t\"]\n        words = [w\
    \ for w in words if w != \"\\r\"]\n        words = [w for w in words if w != \"\
    \\t\"]\n        words = [w for w in words if w != \"\\r\"]\n        words = [w\
    \ for w in words if w != \"\\t\"]\n        word", "    \n    words = split(txt,\
    \ \" \")\n    \n    words_split = Vector{String}(undef, 0)\n    \n    for word\
    \ in words\n        words_split = words_split ++ [word]\n    end\n    \n    words_split\
    \ = words_split ++ [word]\n    \n    words_split = words_split ++ [word]\n   \
    \ \n    words_split = words_split ++ [word]\n    \n    words_split = words_split\
    \ ++ [word]\n    \n    words_split = words_split ++ [word]\n    \n    words_split\
    \ = words_split ++ [word]\n    \n    words_split = words_split ++ [word]\n   \
    \ \n    words_split = words_split ++ [word]\n    \n    words_split = words_split\
    \ ++ [word]\n    \n    words_split = words_split ++ [word]\n    \n    words_split\
    \ = words_split ++ [word]\n    \n    words_split = words_split ++ [word]\n   \
    \ \n    words_split = words_split ++ [word]\n    \n    words_split = words_split\
    \ ++ [word]\n    \n    words_split = words_split ++ [word]\n    \n    words_split\
    \ = words_split ++ [word]\n    \n    words_split = words_split ++ [word]\n   \
    \ \n    words_split = words_split ++ [word]\n    \n    words_split = words_split\
    \ ++ [word]\n    \n    words_split = words_split ++ [word]\n    \n    words_split\
    \ = words_split ++ [word]\n    \n    words_split = words_split ++ [word]\n   \
    \ \n    words_split = words_split ++ [word]\n    \n    words_split = words_split\
    \ ++ [word]\n    \n    words_split = words_split ++ [word]\n    \n    words_split\
    \ = words_split ++ [word]\n    \n    words_split = words_split ++ [word]\n   \
    \ \n    words_split = words_split ++ [word]\n    \n    words_split = words_split\
    \ ++ [word]\n    \n    words_split = words_split ++ [word]\n    \n    words_split\
    \ = words_split ++ [word]\n    \n    words_split = words_split ++ [word]\n   \
    \ \n    words_split = words_split ++ [word]\n    \n    words_split = words_split\
    \ ++ [word]\n    \n    words_split = words_split ++ [word]\n    \n    words_split\
    \ = words_split ++ [word]\n    \n    words_split = words_split ++ [word]\n   \
    \ \n    words_split = words_split ++ [word]\n    \n    words_split = words_split\
    \ ++ [word]\n    \n    words_", "    words = split(txt)\n    words_split = split(words)\n\
    \    words_split = [w for w in words_split if w != \"\"]\n    words_split = [w\
    \ for w in words_split if w != \",\"]\n    words_split = [w for w in words_split\
    \ if w != \" \"]\n    words_split = [w for w in words_split if w != \"\\t\"]\n\
    \    words_split = [w for w in words_split if w != \"\\n\"]\n    words_split =\
    \ [w for w in words_split if w != \"\\r\"]\n    words_split = [w for w in words_split\
    \ if w != \"\\t\"]\n    words_split = [w for w in words_split if w != \"\\r\"\
    ]\n    words_split = [w for w in words_split if w != \"\\n\"]\n    words_split\
    \ = [w for w in words_split if w != \"\\t\"]\n    words_split = [w for w in words_split\
    \ if w != \"\\r\"]\n    words_split = [w for w in words_split if w != \"\\n\"\
    ]\n    words_split = [w for w in words_split if w != \"\\t\"]\n    words_split\
    \ = [w for w in words_split if w != \"\\r\"]\n    words_split = [w for w in words_split\
    \ if w != \"\\n\"]\n    words_split = [w for w in words_split if w != \"\\t\"\
    ]\n    words_split = [w for w in words_split if w != \"\\r\"]\n    words_split\
    \ = [w for w in words_split if w != \"\\n\"]\n    words_split = [w for w in words_split\
    \ if w != \"\\t\"]\n    words_split = [w for w in words_split if w != \"\\r\"\
    ]\n    words_split = [w for w in words_split if w != \"\\n\"]\n    words_split\
    \ = [w for w in words_split if w != \"\\t\"]\n    words_split = [w for w in words_split\
    \ if w != \"\\r\"]\n    words_split = [w for w in words_split if w != \"\\n\"\
    ]\n    words_split = [w for w in words_split if w != \"\\t\"]\n    words_split\
    \ = [w for w in words_split if w != \"\\r\"]\n    words_split = [w for w in words_split\
    \ if w != \"\\n\"]\n    words_split = [w for w in words_split if w != \"\\t\"\
    ]\n    words_split = [w for w in words_split if w != \"\\r\"]\n    words_split\
    \ = [w for w in words_split if w != \"\\n\"]\n    words_split = [w for w in words_split\
    \ if w != \"\\t\"]\n    words_split = [w for w in words_split if w != \"\\r\"\
    ]\n    words_split = [w for w in words_split if w != \"\\n\"]\n    words_split\
    \ = [w ", "    txt = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n\
    \    elseif txt.chars.filter(x -> x != ' ').length == 0\n        return txt.split(\"\
    \ \") \n    elseif txt.chars.filter(x -> x != ',').length == 0\n        return\
    \ txt.split(\",\")\n    else\n        return txt.chars.filter(x -> x != ' ').length\n\
    \    end\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia |>\n<code>", "    \n\
    \    txt = txt.trim()\n    \n    if txt == \"\"\n        return txt\n    else\n\
    \        \n        words = split(txt, \" \")\n        \n        words_splitted\
    \ = []\n        \n        for word in words\n            \n            if word\
    \ == \"\"\n                continue\n            \n            words_splitted\
    \ = words_splitted ++ split(word, \",\")\n            \n        end\n        \n\
    \        words_splitted = words_splitted ++ split(txt, \",\")\n        \n    \
    \    words_splitted = words_splitted ++ split(txt, \" \")\n        \n        words_splitted\
    \ = words_splitted ++ split(txt, \" \")\n        \n        words_splitted = words_splitted\
    \ ++ split(txt, \" \")\n        \n        words_splitted = words_splitted ++ split(txt,\
    \ \" \")\n        \n        words_splitted = words_splitted ++ split(txt, \" \"\
    )\n        \n        words_splitted = words_splitted ++ split(txt, \" \")\n  \
    \      \n        words_splitted = words_splitted ++ split(txt, \" \")\n      \
    \  \n        words_splitted = words_splitted ++ split(txt, \" \")\n        \n\
    \        words_splitted = words_splitted ++ split(txt, \" \")\n        \n    \
    \    words_splitted = words_splitted ++ split(txt, \" \")\n        \n        words_splitted\
    \ = words_splitted ++ split(txt, \" \")\n        \n        words_splitted = words_splitted\
    \ ++ split(txt, \" \")\n        \n        words_splitted = words_splitted ++ split(txt,\
    \ \" \")\n        \n        words_splitted = words_splitted ++ split(txt, \" \"\
    )\n        \n        words_splitted = words_splitted ++ split(txt, \" \")\n  \
    \      \n        words_splitted = words_splitted ++ split(txt, \" \")\n      \
    \  \n        words_splitted = words_splitted ++ split(txt, \" \")\n        \n\
    \        words_splitted = words_splitted ++ split(txt, \" \")\n        \n    \
    \    words_splitted = words_splitted ++ split(txt, \" \")\n        \n        words_splitted\
    \ = words_splitted ++ split(txt, \" \")\n        \n        words_splitted = words_splitted\
    \ ++ split(txt, \" \")\n        \n        words_splitted = words_splitted ++ split(txt,\
    \ \" \")\n        \n        words_splitted = words_splitted ++ split(txt, \" \"\
    )\n        \n        words_splitted = words_splitted ++ split(txt, \" \")\n  \
    \      \n        words_splitted = words_splitted ++ split(txt, \" \")\n      \
    \  \n        words_splitted = words_splitted ++ split(txt, \" \")\n        \n\
    \        words_splitted = words_splitted ++ split(txt, \" \")\n        \n    \
    \    words_splitted = words_splitted ++ split(txt, \" \")\n        \n        ",
  "    \n    words = split(txt, \" \")\n    \n    if length(words) == 0\n        return\
    \ txt\n    else\n        \n        words = [w for w in words if w != \"\"]\n \
    \       \n        if length(words) == 0\n            return txt\n        else\n\
    \            \n            words = [w for w in words if w != \",\"]\n        \
    \    \n            if length(words) == 0\n                return length(words)\n\
    \            else\n                \n                words = [w for w in words\
    \ if w != \",\"]\n                \n                if length(words) == 0\n  \
    \                  return length(words)\n                else\n              \
    \      \n                    words = [w for w in words if w != \",\"]\n      \
    \              \n                    if length(words) == 0\n                 \
    \       return length(words)\n                    else\n                     \
    \   \n                        words = [w for w in words if w != \",\"]\n     \
    \                   \n                        if length(words) == 0\n        \
    \                    return length(words)\n                        else\n    \
    \                        \n                            words = [w for w in words\
    \ if w != \",\"]\n                            \n                            if\
    \ length(words) == 0\n                                return length(words)\n \
    \                           else\n                                \n         \
    \                       words = [w for w in words if w != \",\"]\n           \
    \                     \n                                if length(words) == 0\n\
    \                                    return length(words)\n                  \
    \              else\n                                    \n                  \
    \                  words = [w for w in words if w != \",\"]\n                \
    \                    \n                                    if length(words) ==\
    \ 0\n                                        return length(words)\n          \
    \                          else\n                                        \n  \
    \                                      words = [w for w in words if w != \",\"\
    ]\n                                        \n                                \
    \        if length(words) == 0\n                                            return\
    \ length(words)\n                                        else\n              \
    \                              \n                                            words\
    \ = [w for w in words if w != \",\"]\n                                       \
    \     \n                                            if length(words) == 0\n  \
    \                                              return length(words)\n        \
    \                                    else\n                                  \
    \              \n                                                words = [w for\
    \ w in words if w != \",\"]\n                                                \n\
    \                                                if length(words) == 0\n     \
    \                                               return length(words)\n       \
    \                                         else\n                             \
    \                       \n                                                   \
    \ words = [w for w in words if w != \",\"]\n                                 \
    \                   \n                                                    if length(words)\
    \ == 0\n                                                        return length(words)\n\
    \                                                    else\n                  \
    \                                      \n                                    \
    \                    words = [w for w in words if w != \",\"]\n              \
    \                                          \n                                \
    \                        if length(words) == 0\n                             \
    \                               return length(words)\n                       \
    \                                 else\n                                     \
    \                       \n                                                   \
    \         words = [w for w in words if w != \",\"]\n                         \
    \                                   \n                                       \
    \                     if length(words) == 0\n                                \
    \                                return length(words)\n                      \
    \                                      else\n                                \
    \                                \n                                          \
    \                      words = [w for w in words if w != \",\"]\n            \
    \                                                    \n                      \
    \                                          if length(words) == 0\n           \
    \                                                         return length(words)\n\
    \                                                                else\n      \
    \                                                              \n            \
    \                                                        words = [w for w in words\
    \ if w != \",\"]\n                                                           \
    \         \n                                                                 \
    \   if ", "    \n    words = split(txt, \" \")\n    \n    if length(words) ==\
    \ 0\n        return words\n    end\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    txt = txt.trim()\n    if isempty(txt)\n     \
    \   return Vector{String}()\n    end\n    \n    words = split(txt, \" \")\n  \
    \  \n    if length(words) == 0\n        return Vector{String}()\n    end\n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    \n    txt =\
    \ txt.trim()\n    \n    if txt == \"\"\n        return txt\n    \n    words =\
    \ split(txt, \" \")\n    \n    words_split = Vector{String}()\n    \n    for word\
    \ in words\n        words_split += split(word, \",\")\n    end\n    \n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    \n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    \n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    \n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    \n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    \n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    \n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    \n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    \n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    \n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    \n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    \n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    \n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    \n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    \n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    \n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    \n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    \n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    \n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    \n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    \n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    \n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    \n    words_split\
    \ = words_split[findall(x -> !isempty", "    if isempty(txt)\n        return Vector{String}()\n\
    \    end\n    \n    words = split(txt, \" \")\n    \n    if length(words) == 0\n\
    \        return Vector{String}()\n    end\n    \n    words_split = Vector{String}()\n\
    \    \n    for word in words\n        if isempty(word)\n            continue\n\
    \        end\n        \n        words_split = push!(words_split, word)\n    end\n\
    \    \n    return words_split\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    count_letters(txt::String)", "    txt = txt.trim()\n    if txt == \"\"\n\
    \        return txt\n    words = split(txt, \" \")\n    words_split = split(txt,\
    \ \",\")\n    if length(words) == length(words_split)\n        return words\n\
    \    else\n        return words_split\n    end\nend\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=0 |>\n<code>", "    \n    words = split(txt, \" \")\n    \n    if\
    \ length(words) == 0\n        return txt\n    else\n        \n        words_split\
    \ = split(txt, \",\")\n        \n        if length(words_split) == 0\n       \
    \     return txt\n        else\n            \n            words_split = split(words_split[1],\
    \ \",\")\n            \n            if length(words_split) == 0\n            \
    \    return words_split[1]\n            else\n                \n             \
    \   words_split = split(words_split[1], \",\")\n                \n           \
    \     if length(words_split) == 0\n                    return words_split[1]\n\
    \                else\n                    \n                    words_split =\
    \ split(words_split[1], \",\")\n                    \n                    if length(words_split)\
    \ == 0\n                        return words_split[1]\n                    else\n\
    \                        \n                        words_split = split(words_split[1],\
    \ \",\")\n                        \n                        if length(words_split)\
    \ == 0\n                            return words_split[1]\n                  \
    \      else\n                            \n                            words_split\
    \ = split(words_split[1], \",\")\n                            \n             \
    \               if length(words_split) == 0\n                                return\
    \ words_split[1]\n                            else\n                         \
    \       \n                                words_split = split(words_split[1],\
    \ \",\")\n                                \n                                if\
    \ length(words_split) == 0\n                                    return words_split[1]\n\
    \                                else\n                                    \n\
    \                                    words_split = split(words_split[1], \",\"\
    )\n                                    \n                                    if\
    \ length(words_split) == 0\n                                        return words_split[1]\n\
    \                                    else\n                                  \
    \      \n                                        words_split = split(words_split[1],\
    \ \",\")\n                                        \n                         \
    \               if length(words_split) == 0\n                                \
    \            return words_split[1]\n                                        else\n\
    \                                            \n                              \
    \              words_split = split(words_split[1], \",\")\n                  \
    \                          \n                                            if length(words_split)\
    \ == 0\n                                                return words_split[1]\n\
    \                                            else\n                          \
    \                      \n                                                words_split\
    \ = split(words_split[1], \",\")\n                                           \
    \     \n                                                if length(words_split)\
    \ == 0\n                                                    return words_split[1]\n\
    \                                                else\n                      \
    \                              \n                                            \
    \        words_split = split(words_split[1], \",\")\n                        \
    \                            \n                                              \
    \      if length(words_split) == 0\n                                         \
    \               return words_split[1]\n                                      \
    \              else\n                                                        \n\
    \                                                        words_split = split(words_split[1],\
    \ \",\")\n                                                        \n         \
    \                                               return words_split[1]\n      \
    \                          end\n                            end\n            \
    \            end\n                    end\n                end\n            end\n\
    \        end\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns the number of words in the string. \nExamples\ncount_words(\"\
    Hello world!\") \u279E 7\ncount_words(\"Hello,world!\") \u279E 5\ncount_words(\"\
    abcdef\") == 3 \nHint: Use split() to split a string into an array of words.",
  "    if isempty(txt)\n        return txt\n    else\n        words = split(txt, \"\
    \ \")\n        words_split = split(words, \",\")\n        words_split = words_split[findall(@isaval,\
    \ words_split, String)]\n        words_split = words_split[findall(@isaval, words_split,\
    \ Int64)]\n        words_split = words_split[findall(@isaval, words_split, Char)]\n\
    \        return words_split\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    count_letters(txt::String)\n    Count the number of lower-case letters\
    \ in the given text\n    Examples\n    count_letters(\"Hello world!\") \u279E\
    \ 6\n    count_letters(\"Hello,world!\") \u279E 3\n    count_letters(\"abcdef\"\
    ) == 3 \n    \"\"\"", "    words = split(txt, \" \")\n    words_split = Vector{String}(undef,\
    \ 0)\n    words_split = [word for word in words if word != \"\"]\n    words_split\
    \ = sort(words_split)\n    words_split = words_split[findall(words_split .!= \"\
    \")]\n    words_split = words_split[findall(words_split .!= \" \")]\n    words_split\
    \ = words_split[findall(words_split .!= \",\")]\n    words_split = words_split[findall(words_split\
    \ .!= \" ,\")]\n    words_split = words_split[findall(words_split .!= \" ,.\"\
    )]\n    words_split = words_split[findall(words_split .!= \" ,..\")]\n    words_split\
    \ = words_split[findall(words_split .!= \" ,...\")]\n    words_split = words_split[findall(words_split\
    \ .!= \" ,....\")]\n    words_split = words_split[findall(words_split .!= \" ,.....\"\
    )]\n    words_split = words_split[findall(words_split .!= \" ,......\")]\n   \
    \ words_split = words_split[findall(words_split .!= \" ,.......\")]\n    words_split\
    \ = words_split[findall(words_split .!= \" ,........\")]\n    words_split = words_split[findall(words_split\
    \ .!= \" ,.........\")]\n    words_split = words_split[findall(words_split .!=\
    \ \" ,........\")]\n    words_split = words_split[findall(words_split .!= \" ,.........\"\
    )]\n    words_split = words_split[findall(words_split .!= \" ,.........\")]\n\
    \    words_split = words_split[findall(words_split .!= \" ,.........\")]\n   \
    \ words_split = words_split[findall(words_split .!= \" ,.........\")]\n    words_split\
    \ = words_split[findall(words_split .!= \" ,.........\")]\n    words_split = words_split[findall(words_split\
    \ .!= \" ,.........\")]\n    words_split = words_split[findall(words_split .!=\
    \ \" ,.........\")]\n    words_split = words_split[findall(words_split .!= \"\
    \ ,.........\")]\n    words_split = words_split[findall(words_split .!= \" ,.........\"\
    )]\n    words_split = words_split[findall(words_split .!= \" ,.........\")]\n\
    \    words_split = words_split[findall(words_split .!= \" ,.........\")]\n   \
    \ words_split = words_split[findall(words_split .!= \" ,.........\")]\n    words_split\
    \ = words_split[findall(words_split .!= \" ,.........\")]\n    words_split = words_split[findall(words_split\
    \ .!= \" ,.........\")]\n    words_split = words_split[findall(words_split .!=\
    \ \" ,", "    txt = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n\
    \    else\n        words = split(txt, \" \")\n        words = [w for w in words\
    \ if w != \"\"]\n        words = [w for w in words if w != \",\"]\n        words\
    \ = [w for w in words if w != \".\"]\n        words = [w for w in words if w !=\
    \ \"?\"]\n        words = [w for w in words if w != \"!\"]\n        words = [w\
    \ for w in words if w != \"-\"]\n        words = [w for w in words if w != \"\
    _\"]\n        words = [w for w in words if w != \"(\"]\n        words = [w for\
    \ w in words if w != \")\"]\n        words = [w for w in words if w != \"[\"]\n\
    \        words = [w for w in words if w != \"]\"]\n        words = [w for w in\
    \ words if w != \"{\"]\n        words = [w for w in words if w != \"}\"]\n   \
    \     words = [w for w in words if w != \"|\"]\n        words = [w for w in words\
    \ if w != \"\\\\\"]\n        words = [w for w in words if w != \"^\"]\n      \
    \  words = [w for w in words if w != \"~\"]\n        words = [w for w in words\
    \ if w != \"`\"]\n        words = [w for w in words if w != \"!\"]\n        words\
    \ = [w for w in words if w != \"@\"]\n        words = [w for w in words if w !=\
    \ \"#\"]\n        words = [w for w in words if w != \"$\"]\n        words = [w\
    \ for w in words if w != \"%\"]\n        words = [w for w in words if w != \"\
    ^\"]\n        words = [w for w in words if w != \"&\"]\n        words = [w for\
    \ w in words if w != \"*\"]\n        words = [w for w in words if w != \"(\"]\n\
    \        words = [w for w in words if w != \")\"]\n        words = [w for w in\
    \ words if w != \"[\"]\n        words = [w for w in words if w != \"]\"]\n   \
    \     words = [w for w in words if w != \"{\"]\n        words = [w for w in words\
    \ if w != \"}\"]\n        words = [w for w in words if w != \"|\"]\n        words\
    \ = [w for w in words if w != \"\\\\\"]\n        words = [w for w in words if\
    \ w != \"^\"]\n        words = [w for w in words if w != \"~\"]\n        words\
    \ = [w for w in words if w != \"`\"]\n        word", "    \n    words = split(txt,\
    \ \" \")\n    \n    word_counts = Dict()\n    for word in words\n        word_counts[word]\
    \ = get(word_counts, word, 0) + 1\n    end\n    \n    sorted_word_counts = sort(collect(values(word_counts)),\
    \ by=x->x)\n    \n    word_counts = Dict()\n    for word in sorted_word_counts\n\
    \        word_counts[word] = get(word_counts, word, 0) + 1\n    end\n    \n  \
    \  sorted_word_counts = sort(collect(values(word_counts)), by=x->x)\n    \n  \
    \  word_counts = Dict()\n    for word in sorted_word_counts\n        word_counts[word]\
    \ = get(word_counts, word, 0) + 1\n    end\n    \n    sorted_word_counts = sort(collect(values(word_counts)),\
    \ by=x->x)\n    \n    word_counts = Dict()\n    for word in sorted_word_counts\n\
    \        word_counts[word] = get(word_counts, word, 0) + 1\n    end\n    \n  \
    \  sorted_word_counts = sort(collect(values(word_counts)), by=x->x)\n    \n  \
    \  word_counts = Dict()\n    for word in sorted_word_counts\n        word_counts[word]\
    \ = get(word_counts, word, 0) + 1\n    end\n    \n    sorted_word_counts = sort(collect(values(word_counts)),\
    \ by=x->x)\n    \n    word_counts = Dict()\n    for word in sorted_word_counts\n\
    \        word_counts[word] = get(word_counts, word, 0) + 1\n    end\n    \n  \
    \  sorted_word_counts = sort(collect(values(word_counts)), by=x->x)\n    \n  \
    \  word_counts = Dict()\n    for word in sorted_word_counts\n        word_counts[word]\
    \ = get(word_counts, word, 0) + 1\n    end\n    \n    sorted_word_counts = sort(collect(values(word_counts)),\
    \ by=x->x)\n    \n    word_counts = Dict()\n    for word in sorted_word_counts\n\
    \        word_counts[word] = get(word_counts, word, 0) + 1\n    end\n    \n  \
    \  sorted_word_counts = sort(collect(values(word_counts)), by=x->x)\n    \n  \
    \  word_counts = Dict()\n    for word in sorted_word_counts\n        word_counts[word]\
    \ = get(word_counts, word, 0) + 1\n    end\n    \n    sorted_word_counts = sort(collect(values(word_counts)),\
    \ by=x->x)\n    \n    word_counts = Dict()\n    for word in sorted_word_counts\n\
    \        word_counts[word] = get(word_counts, word, 0) + 1", "    \n    if isempty(txt)\n\
    \        return txt\n    else\n        words = split(txt, \" \")\n        \n \
    \       words_splitted = []\n        for word in words\n            words_splitted\
    \ += split(word, \",\")\n        end\n        \n        words_splitted = [word\
    \ for word in words_splitted if !isempty(word)]\n        \n        words_splitted\
    \ = [word for word in words_splitted if !islower(word)]\n        \n        words_splitted\
    \ = [word for word in words_splitted if !isupper(word)]\n        \n        words_splitted\
    \ = [word for word in words_splitted if !isdigit(word)]\n        \n        words_splitted\
    \ = [word for word in words_splitted if !isspace(word)]\n        \n        words_splitted\
    \ = [word for word in words_splitted if !issymbol(word)]\n        \n        words_splitted\
    \ = [word for word in words_splitted if !isascii(word)]\n        \n        words_splitted\
    \ = [word for word in words_splitted if !isascii(word)]\n        \n        words_splitted\
    \ = [word for word in words_splitted if !isascii(word)]\n        \n        words_splitted\
    \ = [word for word in words_splitted if !isascii(word)]\n        \n        words_splitted\
    \ = [word for word in words_splitted if !isascii(word)]\n        \n        words_splitted\
    \ = [word for word in words_splitted if !isascii(word)]\n        \n        words_splitted\
    \ = [word for word in words_splitted if !isascii(word)]\n        \n        words_splitted\
    \ = [word for word in words_splitted if !isascii(word)]\n        \n        words_splitted\
    \ = [word for word in words_splitted if !isascii(word)]\n        \n        words_splitted\
    \ = [word for word in words_splitted if !isascii(word)]\n        \n        words_splitted\
    \ = [word for word in words_splitted if !isascii(word)]\n        \n        words_splitted\
    \ = [word for word in words_splitted if !isascii(word)]\n        \n        words_splitted\
    \ = [word for word in words_splitted if !isascii(word)]\n        \n        words_splitted\
    \ = [word for word in words_splitted if !isascii(word)]\n        \n        words_splitted\
    \ = [word for word in words_splitted if !isascii(word)]\n        \n        words_splitted\
    \ = [word for word in words_splitted if !isascii(word)]\n        \n        words_",
  "    txt = txt.trim()\n    if txt == \"\"\n        return txt\n    \n    words =\
    \ split(txt, \" \")\n    \n    words_splitted = []\n    for word in words\n  \
    \      words_splitted = words_splitted ++ split(word, \",\")\n    end\n    \n\
    \    words_splitted = words_splitted ++ split(txt, \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(txt, \",\")\n    \n    words_splitted = words_splitted\
    \ ++ split(txt, \" \")\n    \n    words_splitted = words_splitted ++ split(txt,\
    \ \",\")\n    \n    words_splitted = words_splitted ++ split(txt, \" \")\n   \
    \ \n    words_splitted = words_splitted ++ split(txt, \",\")\n    \n    words_splitted\
    \ = words_splitted ++ split(txt, \" \")\n    \n    words_splitted = words_splitted\
    \ ++ split(txt, \",\")\n    \n    words_splitted = words_splitted ++ split(txt,\
    \ \" \")\n    \n    words_splitted = words_splitted ++ split(txt, \",\")\n   \
    \ \n    words_splitted = words_splitted ++ split(txt, \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(txt, \",\")\n    \n    words_splitted = words_splitted\
    \ ++ split(txt, \" \")\n    \n    words_splitted = words_splitted ++ split(txt,\
    \ \",\")\n    \n    words_splitted = words_splitted ++ split(txt, \" \")\n   \
    \ \n    words_splitted = words_splitted ++ split(txt, \",\")\n    \n    words_splitted\
    \ = words_splitted ++ split(txt, \" \")\n    \n    words_splitted = words_splitted\
    \ ++ split(txt, \",\")\n    \n    words_splitted = words_splitted ++ split(txt,\
    \ \" \")\n    \n    words_splitted = words_splitted ++ split(txt, \",\")\n   \
    \ \n    words_splitted = words_splitted ++ split(txt, \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(txt, \",\")\n    \n    words_splitted = words_splitted\
    \ ++ split(txt, \" \")\n    \n    words_splitted = words_splitted ++ split(txt,\
    \ \",\")\n    \n    words_splitted = words_splitted ++ split(txt, \" \")\n   \
    \ \n    words_splitted = words_splitted ++ split(txt, \",\")\n    \n    words_splitted\
    \ = words_splitted ++ split(txt, \" \")\n    \n    words_splitted = words_splitted\
    \ ++ split(txt, \",\")\n    \n    words_splitted = words_splitted ++ split(txt,\
    \ \" \")\n    \n    words_splitted = words_splitted ++ split(", "    \n    words\
    \ = split(txt)\n    \n    if length(words) == 0\n        return words\n    end\n\
    \    \n    if all(isspace(word) for word in words)\n        words = split(txt,\
    \ \",\")\n    end\n    \n    if length(words) == 0\n        return words\n   \
    \ end\n    \n    if all(islower(word) for word in words)\n        words = split(txt,\
    \ \" \")\n    end\n    \n    if length(words) == 0\n        return words\n   \
    \ end\n    \n    if all(isupper(word) for word in words)\n        words = split(txt,\
    \ \" \")\n    end\n    \n    if length(words) == 0\n        return words\n   \
    \ end\n    \n    if all(isdigit(word) for word in words)\n        words = split(txt,\
    \ \" \")\n    end\n    \n    if length(words) == 0\n        return words\n   \
    \ end\n    \n    if all(isalnum(word) for word in words)\n        words = split(txt,\
    \ \" \")\n    end\n    \n    if length(words) == 0\n        return words\n   \
    \ end\n    \n    if all(isascii(word) for word in words)\n        words = split(txt,\
    \ \" \")\n    end\n    \n    if length(words) == 0\n        return words\n   \
    \ end\n    \n    if all(isunicode(word) for word in words)\n        words = split(txt,\
    \ \" \")\n    end\n    \n    if length(words) == 0\n        return words\n   \
    \ end\n    \n    if all(isunicode(word) for word in words)\n        words = split(txt,\
    \ \" \")\n    end\n    \n    if length(words) == 0\n        return words\n   \
    \ end\n    \n    if all(isunicode(word) for word in words)\n        words = split(txt,\
    \ \" \")\n    end\n    \n    if length(words) == 0\n        return words\n   \
    \ end\n    \n    if all(isunicode(word) for word in words)\n        words = split(txt,\
    \ \" \")\n    end\n    \n    if length(words) == 0\n        return words\n   \
    \ end\n    \n    if all(isunicode(word) for word in words)\n        words = split(txt,\
    \ \" \")\n    end\n    \n    if length(words) == 0\n        return words\n   \
    \ end\n    \n    if all(isunicode(word) for word in words)\n        words = split(txt,\
    \ \" \")\n    end\n    \n    if length(words) == 0\n        return words\n   \
    \ end\n    \n    if all(isunicode(word) for word in words)\n        words = split(txt,\
    \ \" \")\n    end\n    \n    if length(words) == 0\n        return words\n   \
    \ end\n    \n    if all(isunicode(word) for word in words)\n        words = split(txt,\
    \ \" \")\n    end\n    \n    if length(words) == 0\n        return words\n   \
    \ end\n    \n    if all(isunicode(word) for word in words)\n        words = split(txt,\
    \ \" \")\n    end\n    \n", "    words = split(txt, \" \")\n    words_split =\
    \ Vector{String}(undef, 0)\n    for word in words\n        words_split = words_split\
    \ ++ [word]\n    end\n    return words_split\nend\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"Hello world!\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    Hello,world!\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdef\")\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ a vector of strings where each string is a word in the string separated by spaces.",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    txt = txt.trim()\n\
    \    \n    if txt == \"\"\n        return txt\n    else\n        \n        words\
    \ = split(txt, \" \")\n        \n        words_split = split(txt, \",\")\n   \
    \     \n        words_split2 = split(txt, \",\")\n        \n        words_split3\
    \ = split(txt, \",\")\n        \n        words_split4 = split(txt, \",\")\n  \
    \      \n        words_split5 = split(txt, \",\")\n        \n        words_split6\
    \ = split(txt, \",\")\n        \n        words_split7 = split(txt, \",\")\n  \
    \      \n        words_split8 = split(txt, \",\")\n        \n        words_split9\
    \ = split(txt, \",\")\n        \n        words_split10 = split(txt, \",\")\n \
    \       \n        words_split11 = split(txt, \",\")\n        \n        words_split12\
    \ = split(txt, \",\")\n        \n        words_split13 = split(txt, \",\")\n \
    \       \n        words_split14 = split(txt, \",\")\n        \n        words_split15\
    \ = split(txt, \",\")\n        \n        words_split16 = split(txt, \",\")\n \
    \       \n        words_split17 = split(txt, \",\")\n        \n        words_split18\
    \ = split(txt, \",\")\n        \n        words_split19 = split(txt, \",\")\n \
    \       \n        words_split20 = split(txt, \",\")\n        \n        words_split21\
    \ = split(txt, \",\")\n        \n        words_split22 = split(txt, \",\")\n \
    \       \n        words_split23 = split(txt, \",\")\n        \n        words_split24\
    \ = split(txt, \",\")\n        \n        words_split25 = split(txt, \",\")\n \
    \       \n        words_split26 = split(txt, \",\")\n        \n        words_split27\
    \ = split(txt, \",\")\n        \n        words_split28 = split(txt, \",\")\n \
    \       \n        words_split29 = split(txt, \",\")\n        \n        words_split30\
    \ = split(txt, \",\")\n        \n        words_split31 = split(txt, \",\")\n \
    \       \n        words_split32 = split(txt, \",\")\n        \n        words_split33\
    \ = split(txt, \",\")\n        \n        words_split34 = split(txt, \",\")\n \
    \       \n        words_split35 = split(txt, \",\")\n        \n        words_split36\
    \ = split(txt, \",\")\n        \n        words_split37 = split(txt, \",\")\n \
    \       \n        words_split38 = split(txt, \",\")\n        \n", "    \n    words\
    \ = split(txt)\n    \n    words_splitted = []\n    \n    for word in words\n \
    \       \n        if isempty(word)\n            words_splitted = words_splitted\
    \ \n        else\n            words_splitted = words_splitted ++ split(word)\n\
    \        end\n    end\n    \n    words_splitted = words_splitted |> Vector{String}\n\
    \    \n    words_splitted = words_splitted |> sort() |> unique() |> length\n \
    \   \n    if words_splitted == 1\n        \n        return words_splitted\n  \
    \      \n    else\n        \n        return words_splitted |> collect\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world!\")\n</cell>\n\
    <code language=julia-1.5>\nsplit_words(\"Hello,world!\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"abcdef\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdef\"\
    )\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdef\")\n</cell>\n<code\
    \ language=julia-1.5>\nsplit_words(\"abcdef\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"abcdef\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdef\"\
    )\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdef\")\n</cell>\n<code\
    \ language=julia-1.5>\nsplit_words(\"abcdef\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"abcdef\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdef\"\
    )\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdef\")\n</cell>\n<code\
    \ language=julia-1.5>\nsplit_words(\"abcdef\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"abcdef\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdef\"\
    )\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdef\")\n</cell>\n<code\
    \ language=julia-1.5>\nsplit_words(\"abcdef\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"abcdef\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdef\"\
    )\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdef\")\n</cell>\n<code\
    \ language=julia-1.5>\nsplit_words(\"abcdef\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"abcdef\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdef",
  "    \n    words = split(txt, \" \")\n    \n    if length(words) == 0\n        return\
    \ words\n    end\n    \n    words_split = split(words, \",\")\n    \n    if length(words_split)\
    \ == 0\n        return words\n    end\n    \n    words_split = split(words_split,\
    \ \"-\")\n    \n    if length(words_split) == 0\n        return words\n    end\n\
    \    \n    words_split = split(words_split, \"/\")\n    \n    if length(words_split)\
    \ == 0\n        return words\n    end\n    \n    words_split = split(words_split,\
    \ \"\\\\\")\n    \n    if length(words_split) == 0\n        return words\n   \
    \ end\n    \n    words_split = split(words_split, \":\")\n    \n    if length(words_split)\
    \ == 0\n        return words\n    end\n    \n    words_split = split(words_split,\
    \ \";\")\n    \n    if length(words_split) == 0\n        return words\n    end\n\
    \    \n    words_split = split(words_split, \"!\")\n    \n    if length(words_split)\
    \ == 0\n        return words\n    end\n    \n    words_split = split(words_split,\
    \ \"?\")\n    \n    if length(words_split) == 0\n        return words\n    end\n\
    \    \n    words_split = split(words_split, \"\\\"\")\n    \n    if length(words_split)\
    \ == 0\n        return words\n    end\n    \n    words_split = split(words_split,\
    \ \"'\")\n    \n    if length(words_split) == 0\n        return words\n    end\n\
    \    \n    words_split = split(words_split, \"#\")\n    \n    if length(words_split)\
    \ == 0\n        return words\n    end\n    \n    words_split = split(words_split,\
    \ \"$\")\n    \n    if length(words_split) == 0\n        return words\n    end\n\
    \    \n    words_split = split(words_split, \"%\")\n    \n    if length(words_split)\
    \ == 0\n        return words\n    end\n    \n    words_split = split(words_split,\
    \ \"^\")\n    \n    if length(words_split) == 0\n        return words\n    end\n\
    \    \n    words_split = split(words_split, \"&\")\n    \n    if length(words_split)\
    \ == 0\n        return words\n    end\n    \n    words_split = split(words_split,\
    \ \"*\")\n    \n    if length(words_split) == 0\n        return words\n    end\n\
    \    \n    words_split = split(words_split, \"(\")\n    \n    if length(words_split)\
    \ == 0\n        return words\n    end\n    \n    words_split = split(words_split,\
    \ \")\")\n    \n    if length(words_split) == 0\n        return words\n    end\n\
    \    \n    words_split = split(words_split, \"-\")\n    \n    if length(words_split)\
    \ == 0\n        return words\n    end\n    \n    words_split = split(words_split,\
    \ \"+\")\n    \n    if length(words_split) == 0\n        return words\n    end\n\
    \    \n    words_split = ", "    words = split(txt, \" \")\n    words_without_whitespace\
    \ = filter(x -> !isspace(x), words)\n    words_without_commas = filter(x -> !iscomma(x),\
    \ words_without_whitespace)\n    words_without_commas = filter(x -> !islower(x),\
    \ words_without_commas)\n    words_without_commas = filter(x -> !isupper(x), words_without_commas)\n\
    \    words_without_commas = filter(x -> !isdigit(x), words_without_commas)\n \
    \   words_without_commas = filter(x -> !isalnum(x), words_without_commas)\n  \
    \  words_without_commas = filter(x -> !isascii(x), words_without_commas)\n   \
    \ words_without_commas = filter(x -> !isblank(x), words_without_commas)\n    words_without_commas\
    \ = filter(x -> !isspace(x), words_without_commas)\n    words_without_commas =\
    \ filter(x -> !isblank(x), words_without_commas)\n    words_without_commas = filter(x\
    \ -> !isspace(x), words_without_commas)\n    words_without_commas = filter(x ->\
    \ !isblank(x), words_without_commas)\n    words_without_commas = filter(x -> !isspace(x),\
    \ words_without_commas)\n    words_without_commas = filter(x -> !isspace(x), words_without_commas)\n\
    \    words_without_commas = filter(x -> !isspace(x), words_without_commas)\n \
    \   words_without_commas = filter(x -> !isspace(x), words_without_commas)\n  \
    \  words_without_commas = filter(x -> !isspace(x), words_without_commas)\n   \
    \ words_without_commas = filter(x -> !isspace(x), words_without_commas)\n    words_without_commas\
    \ = filter(x -> !isspace(x), words_without_commas)\n    words_without_commas =\
    \ filter(x -> !isspace(x), words_without_commas)\n    words_without_commas = filter(x\
    \ -> !isspace(x), words_without_commas)\n    words_without_commas = filter(x ->\
    \ !isspace(x), words_without_commas)\n    words_without_commas = filter(x -> !isspace(x),\
    \ words_without_commas)\n    words_without_commas = filter(x -> !isspace(x), words_without_commas)\n\
    \    words_without_commas = filter(x -> !isspace(x), words_without_commas)\n \
    \   words_without_commas = filter(x -> !isspace(x), words_without_commas)\n  \
    \  words_without_commas = filter(x -> !isspace(x), words_without_comm", "    \n\
    \    words = split(txt, \" \")\n    \n    if length(words) == 0\n        return\
    \ length(txt)\n    end\n    \n    words_no_spaces = filter(x -> !isspace(x), words)\n\
    \    \n    if length(words_no_spaces) == 0\n        return length(txt)\n    end\n\
    \    \n    words_no_commas = filter(x -> !iscomma(x), words_no_spaces)\n    \n\
    \    if length(words_no_commas) == 0\n        return length(txt)\n    end\n  \
    \  \n    words_no_commas_odd = filter(x -> isodd(x), words_no_commas)\n    \n\
    \    if length(words_no_commas_odd) == 0\n        return length(txt)\n    end\n\
    \    \n    words_no_commas_odd_count = count(words_no_commas_odd)\n    \n    if\
    \ words_no_commas_odd_count % 2 == 1\n        return length(txt)\n    end\n  \
    \  \n    words_no_commas_odd_count_with_odd_order = words_no_commas_odd_count\
    \ - 1\n    \n    return words_no_commas_odd_count_with_odd_order\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns a string\
    \ with all the characters in lower case and spaces replaced by underscores.\n\
    Examples\n    to_underscore(\"Hello world!\") \u279E \"hello_world!\"\n    to_underscore(\"\
    Hello,world!\") \u279E \"hello_world!\"\n    to_underscore(\"abcdef\") == 3 \n\
    \"\"\"", "    \n    words = split(txt, \" \")\n    \n    if length(words) == 0\
    \ \n        return 0 \n    else \n        return length(words) \n    end\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    words = split(txt, \" \")\n  \
    \  \n    if length(words) == 0 \n        return words\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    words = split(txt, \" \")\n    words =\
    \ [w for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"\
    ]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"", "    words = split(txt,\
    \ \" \")\n    words_split = split(txt, \",\")\n    if length(words_split) == length(words)\n\
    \        return words_split\n    else\n        return words\n    end\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=julia,string |>\n<code>", "    words = split(txt,\
    \ \" \")\n    words = [w for w in words if w != \"\"]\n    words = [w for w in\
    \ words if w != \",\"]\n    words = [w for w in words if w != \" \"]\n    words\
    \ = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if w !=\
    \ \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for\
    \ w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n\
    \    words = [w for w in words if w != \"\\n\"]\n    words = [w for w in words\
    \ if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words\
    \ = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if w !=\
    \ \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for\
    \ w in words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\t\"]\n\
    \    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words\
    \ if w != \"\\n\"]\n    words = [w for w in words if w != \"\\t\"]\n    words\
    \ = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if w !=\
    \ \"\\n\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for\
    \ w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n\
    \    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words\
    \ if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n    words\
    \ = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w for\
    \ w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n\
    \    words = [w for w in words if w != \"\\n\"]\n    words = [w for w in words\
    \ if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words\
    \ = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if w !=\
    \ \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for\
    \ w in words if w != \"\\n", "    if length(txt) == 0 \n        return [] \n \
    \   else \n        words = split(txt, \" \") \n        words_without_commas =\
    \ filter(x->!iscomma(x), words) \n        words_without_commas = filter(x->!islower(x),\
    \ words_without_commas) \n        words_without_commas = filter(x->!isupper(x),\
    \ words_without_commas) \n        words_without_commas = filter(x->!isdigit(x),\
    \ words_without_commas) \n        words_without_commas = filter(x->!isspace(x),\
    \ words_without_commas) \n        words_without_commas = filter(x->!issymbol(x),\
    \ words_without_commas) \n        words_without_commas = filter(x->!isascii(x),\
    \ words_without_commas) \n        words_without_commas = filter(x->!isalnum(x),\
    \ words_without_commas) \n        words_without_commas = filter(x->!isasciilower(x),\
    \ words_without_commas) \n        words_without_commas = filter(x->!isasciiupper(x),\
    \ words_without_commas) \n        words_without_commas = filter(x->!isasciidigit(x),\
    \ words_without_commas) \n        words_without_commas = filter(x->!isasciispace(x),\
    \ words_without_commas) \n        words_without_commas = filter(x->!isasciisymbol(x),\
    \ words_without_commas) \n        words_without_commas = filter(x->!isasciiascii(x),\
    \ words_without_commas) \n        words_without_commas = filter(x->!isasciialnum(x),\
    \ words_without_commas) \n        words_without_commas = filter(x->!isasciiasciilower(x),\
    \ words_without_commas) \n        words_without_commas = filter(x->!isasciiasciiupper(x),\
    \ words_without_commas) \n        words_without_commas = filter(x->!isasciiasciidigit(x),\
    \ words_without_commas) \n        words_without_commas = filter(x->!isasciiasciispace(x),\
    \ words_without_commas) \n        words_without_commas = filter(x->!isasciiasciisymbol(x),\
    \ words_without_commas) \n        words_without_commas = filter(x->!isasciiasciiascii(x),\
    \ words_without_commas) \n        words_without_commas = filter(x->!isasciiasciialnum(x),\
    \ words_without_commas) \n        words_without_commas = filter(x->!isasciiasciiasciilower(x),\
    \ words_without_commas) \n        words_without_commas = filter(x->!isasciiasciiasciiupper(x),\
    \ words_without_commas) \n        words_without_commas = filter(x->", "    \n\
    \    txt = txt.trim()\n    \n    if txt == \"\"\n        return txt\n    \n  \
    \  words = split(txt, \" \")\n    \n    words_splitted = Vector{String}(undef,\
    \ 0)\n    \n    for word in words\n        words_splitted = words_splitted ++\
    \ [word]\n    end\n    \n    words_splitted = words_splitted ++ [txt]\n    \n\
    \    words_splitted = words_splitted |> Vector{String}(undef, 0)\n    \n    words_splitted\
    \ = words_splitted |> Vector{String}(undef, 0)\n    \n    words_splitted = words_splitted\
    \ |> Vector{String}(undef, 0)\n    \n    words_splitted = words_splitted |> Vector{String}(undef,\
    \ 0)\n    \n    words_splitted = words_splitted |> Vector{String}(undef, 0)\n\
    \    \n    words_splitted = words_splitted |> Vector{String}(undef, 0)\n    \n\
    \    words_splitted = words_splitted |> Vector{String}(undef, 0)\n    \n    words_splitted\
    \ = words_splitted |> Vector{String}(undef, 0)\n    \n    words_splitted = words_splitted\
    \ |> Vector{String}(undef, 0)\n    \n    words_splitted = words_splitted |> Vector{String}(undef,\
    \ 0)\n    \n    words_splitted = words_splitted |> Vector{String}(undef, 0)\n\
    \    \n    words_splitted = words_splitted |> Vector{String}(undef, 0)\n    \n\
    \    words_splitted = words_splitted |> Vector{String}(undef, 0)\n    \n    words_splitted\
    \ = words_splitted |> Vector{String}(undef, 0)\n    \n    words_splitted = words_splitted\
    \ |> Vector{String}(undef, 0)\n    \n    words_splitted = words_splitted |> Vector{String}(undef,\
    \ 0)\n    \n    words_splitted = words_splitted |> Vector{String}(undef, 0)\n\
    \    \n    words_splitted = words_splitted |> Vector{String}(undef, 0)\n    \n\
    \    words_splitted = words_splitted |> Vector{String}(undef, 0)\n    \n    words_splitted\
    \ = words_splitted |> Vector{String}(undef, 0)\n    \n    words_splitted = words_splitted\
    \ |> Vector{String}(undef, 0)\n    \n    words_splitted = words_splitted |> Vector{String}(undef,\
    \ 0)\n    \n    words_splitted = words_splitted |> Vector{String}(undef", "  \
    \  \n    txt = txt.trim()\n    \n    if txt == \"\"\n        return txt\n    \n\
    \    words = split(txt, \" \")\n    \n    words_splitted = Vector{String}(undef,\
    \ 0)\n    \n    for word in words\n        if word != \"\"\n            words_splitted\
    \ = words_splitted ++ [word]\n        end\n    end\n    \n    words_splitted =\
    \ words_splitted ++ [\"\"]\n    \n    words_splitted = words_splitted .- [\"\"\
    ]\n    \n    words_splitted = words_splitted .- [\"\"]\n    \n    words_splitted\
    \ = words_splitted .- [\"\"]\n    \n    words_splitted = words_splitted .- [\"\
    \"]\n    \n    words_splitted = words_splitted .- [\"\"]\n    \n    words_splitted\
    \ = words_splitted .- [\"\"]\n    \n    words_splitted = words_splitted .- [\"\
    \"]\n    \n    words_splitted = words_splitted .- [\"\"]\n    \n    words_splitted\
    \ = words_splitted .- [\"\"]\n    \n    words_splitted = words_splitted .- [\"\
    \"]\n    \n    words_splitted = words_splitted .- [\"\"]\n    \n    words_splitted\
    \ = words_splitted .- [\"\"]\n    \n    words_splitted = words_splitted .- [\"\
    \"]\n    \n    words_splitted = words_splitted .- [\"\"]\n    \n    words_splitted\
    \ = words_splitted .- [\"\"]\n    \n    words_splitted = words_splitted .- [\"\
    \"]\n    \n    words_splitted = words_splitted .- [\"\"]\n    \n    words_splitted\
    \ = words_splitted .- [\"\"]\n    \n    words_splitted = words_splitted .- [\"\
    \"]\n    \n    words_splitted = words_splitted .- [\"\"]\n    \n    words_splitted\
    \ = words_splitted .- [\"\"]\n    \n    words_splitted = words_splitted .- [\"\
    \"]\n    \n    words_splitted = words_splitted .- [\"\"]\n    \n    words_splitted\
    \ = words_splitted .- [\"\"]\n    \n    words_splitted = words_splitted .- [\"\
    \"]\n    \n    words_splitted = words_splitted .- [\"\"]\n    \n    words_splitted\
    \ = words_splitted .- [\"\"]\n    \n    words_splitted = words_splitted .- [\"\
    \"]\n    \n    words_splitted = words_split", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    words = split(txt)\n    \n    words_split\
    \ = []\n    \n    for word in words\n        \n        if !contains(word, \" \"\
    )\n            \n            words_split = [word]\n            \n        else\n\
    \            \n            words_split = split(word)\n            \n        end\n\
    \        \n    end\n    \n    return words_split\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    words = split(txt,\
    \ \" \")\n    \n    words_split = Vector{String}(undef, 0)\n    \n    for word\
    \ in words\n        words_split = words_split ++ split(word, \",\")\n    end\n\
    \    \n    words_split = words_split ++ [word]\n    \n    words_split = words_split\
    \ ++ [word for word in words_split if !islower(word)]\n    \n    words_split =\
    \ words_split ++ [word for word in words_split if islower(word)]\n    \n    words_split\
    \ = words_split ++ [word for word in words_split if islower(word)]\n    \n   \
    \ words_split = words_split ++ [word for word in words_split if islower(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if islower(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if islower(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if islower(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if islower(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if islower(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if islower(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if islower(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if islower(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if islower(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if islower(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if islower(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if islower(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if islower(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if islower(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if islower(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if islower(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if islower(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if islower(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if islower(word)]\n",
  "    \n    words = split(txt, \" \")\n    \n    words_without_commas = filter(x\
    \ -> x != \",\", words)\n    \n    words_without_commas = sort(words_without_commas)\n\
    \    \n    words_without_commas = words_without_commas[words_without_commas[end-1]\
    \ \u2260 \",\"]\n    \n    words_without_commas = words_without_commas[words_without_commas[end-1]\
    \ \u2260 \",\"]\n    \n    words_without_commas = words_without_commas[words_without_commas[end-1]\
    \ \u2260 \",\"]\n    \n    words_without_commas = words_without_commas[words_without_commas[end-1]\
    \ \u2260 \",\"]\n    \n    words_without_commas = words_without_commas[words_without_commas[end-1]\
    \ \u2260 \",\"]\n    \n    words_without_commas = words_without_commas[words_without_commas[end-1]\
    \ \u2260 \",\"]\n    \n    words_without_commas = words_without_commas[words_without_commas[end-1]\
    \ \u2260 \",\"]\n    \n    words_without_commas = words_without_commas[words_without_commas[end-1]\
    \ \u2260 \",\"]\n    \n    words_without_commas = words_without_commas[words_without_commas[end-1]\
    \ \u2260 \",\"]\n    \n    words_without_commas = words_without_commas[words_without_commas[end-1]\
    \ \u2260 \",\"]\n    \n    words_without_commas = words_without_commas[words_without_commas[end-1]\
    \ \u2260 \",\"]\n    \n    words_without_commas = words_without_commas[words_without_commas[end-1]\
    \ \u2260 \",\"]\n    \n    words_without_commas = words_without_commas[words_without_commas[end-1]\
    \ \u2260 \",\"]\n    \n    words_without_commas = words_without_commas[words_without_commas[end-1]\
    \ \u2260 \",\"]\n    \n    words_without_commas = words_without_commas[words_without_commas[end-1]\
    \ \u2260 \",\"]\n    \n    words_without_commas = words_without_commas[words_without_commas[end-1]\
    \ \u2260 \",\"]\n    \n    words_without_commas = words_without_commas[words_without_commas[end-1]\
    \ \uFFFD", "    txt = txt.trim()\n    \n    if isempty(txt)\n        return txt\n\
    \    elseif isempty(txt.trim())\n        return txt\n    else\n        \n    \
    \    words = split(txt, \" \")\n        \n        words = [w for w in words if\
    \ w != \"\"]\n        \n        words = [w for w in words if w != \",\"]\n   \
    \     \n        words = [w for w in words if w != \"-\"]\n        \n        words\
    \ = [w for w in words if w != \"_\"]\n        \n        words = [w for w in words\
    \ if w != \"!\"]\n        \n        words = [w for w in words if w != \"?\"]\n\
    \        \n        words = [w for w in words if w != \"-\"]\n        \n      \
    \  words = [w for w in words if w != \"?\"]\n        \n        words = [w for\
    \ w in words if w != \"!\"]\n        \n        words = [w for w in words if w\
    \ != \"-\"]\n        \n        words = [w for w in words if w != \"?\"]\n    \
    \    \n        words = [w for w in words if w != \"!\"]\n        \n        words\
    \ = [w for w in words if w != \"-\"]\n        \n        words = [w for w in words\
    \ if w != \"?\"]\n        \n        words = [w for w in words if w != \"!\"]\n\
    \        \n        words = [w for w in words if w != \"-\"]\n        \n      \
    \  words = [w for w in words if w != \"?\"]\n        \n        words = [w for\
    \ w in words if w != \"!\"]\n        \n        words = [w for w in words if w\
    \ != \"-\"]\n        \n        words = [w for w in words if w != \"?\"]\n    \
    \    \n        words = [w for w in words if w != \"!\"]\n        \n        words\
    \ = [w for w in words if w != \"-\"]\n        \n        words = [w for w in words\
    \ if w != \"?\"]\n        \n        words = [w for w in words if w != \"!\"]\n\
    \        \n        words = [w for w in words if w != \"-\"]\n        \n      \
    \  words = [w for w in words if w != \"?\"]\n        \n        words = [w for\
    \ w in words if w != \"!\"]\n        \n        words = [w for w in words if w\
    \ != \"-\"]\n        \n        words = [w for w in words if w != \"?\"]\n    \
    \    \n        words = [w for w in words if w != \"!\"]\n        \n        words\
    \ = [w for w in words if w != \"-\"]\n        ", "    txt = txt.trim()\n    if\
    \ isempty(txt)\n        return Vector{String}()\n    end\n    words = split(txt,\
    \ \" \")\n    words_split = Vector{String}()\n    for word in words\n        if\
    \ isempty(word)\n            continue\n        end\n        words_split = words_split\
    \ ++ split(word, \",\")\n    end\n    words_split = words_split ++ split(words,\
    \ \" \")\n    words_split = words_split ++ split(words, \",\")\n    words_split\
    \ = words_split ++ split(words, \"-\")\n    words_split = words_split ++ split(words,\
    \ \"_\")\n    words_split = words_split ++ split(words, \"-\")\n    words_split\
    \ = words_split ++ split(words, \"_\")\n    words_split = words_split ++ split(words,\
    \ \"-\")\n    words_split = words_split ++ split(words, \"_\")\n    words_split\
    \ = words_split ++ split(words, \"-\")\n    words_split = words_split ++ split(words,\
    \ \"_\")\n    words_split = words_split ++ split(words, \"-\")\n    words_split\
    \ = words_split ++ split(words, \"_\")\n    words_split = words_split ++ split(words,\
    \ \"-\")\n    words_split = words_split ++ split(words, \"_\")\n    words_split\
    \ = words_split ++ split(words, \"-\")\n    words_split = words_split ++ split(words,\
    \ \"_\")\n    words_split = words_split ++ split(words, \"-\")\n    words_split\
    \ = words_split ++ split(words, \"_\")\n    words_split = words_split ++ split(words,\
    \ \"-\")\n    words_split = words_split ++ split(words, \"_\")\n    words_split\
    \ = words_split ++ split(words, \"-\")\n    words_split = words_split ++ split(words,\
    \ \"_\")\n    words_split = words_split ++ split(words, \"-\")\n    words_split\
    \ = words_split ++ split(words, \"_\")\n    words_split = words_split ++ split(words,\
    \ \"-\")\n    words_split = words_split ++ split(words, \"_\")\n    words_split\
    \ = words_split ++ split(words, \"-\")\n    words_split = words_split ++ split(words,\
    \ \"_\")\n    words_split = words_split ++ split(words, \"-\")\n    words_split\
    \ = words_split ++ split(words, \"_\")\n    words_split = words_split ++ split(words,\
    \ \"-\")\n    words_split = words_split ++ split(words, \"_\")\n    words_split\
    \ = words_split ++ split(words, \"-\")\n    words_split = words_split ++ split(words,\
    \ \"_\")\n    words_split = words_split ++ split(words, \"-\")\n    words_split\
    \ = words_split ++ split(words, \"_\")\n    words_split = words_split ++ split(words,\
    \ \"-\")\n    words_split = words_split ++ split(words, \"_\")\n    words_split\
    \ = words_split ++ split(words, \"-\")\n    words_split = words_split ++ split(words,\
    \ \"_\")\n    words_split = words_", "    \n    txt = txt.trim()\n    \n    if\
    \ txt == \"\"\n        return txt\n    \n    words = split(txt, \" \")\n    \n\
    \    words_without_commas = filter(x -> x != \",\", words)\n    \n    words_without_commas\
    \ = sort(words_without_commas)\n    \n    words_without_commas = words_without_commas[words_without_commas[end]\
    \ .< words_without_commas[end-1]]\n    \n    words_without_commas = words_without_commas[words_without_commas[end]\
    \ .< words_without_commas[end-1]]\n    \n    words_without_commas = words_without_commas[words_without_commas[end]\
    \ .< words_without_commas[end-1]]\n    \n    words_without_commas = words_without_commas[words_without_commas[end]\
    \ .< words_without_commas[end-1]]\n    \n    words_without_commas = words_without_commas[words_without_commas[end]\
    \ .< words_without_commas[end-1]]\n    \n    words_without_commas = words_without_commas[words_without_commas[end]\
    \ .< words_without_commas[end-1]]\n    \n    words_without_commas = words_without_commas[words_without_commas[end]\
    \ .< words_without_commas[end-1]]\n    \n    words_without_commas = words_without_commas[words_without_commas[end]\
    \ .< words_without_commas[end-1]]\n    \n    words_without_commas = words_without_commas[words_without_commas[end]\
    \ .< words_without_commas[end-1]]\n    \n    words_without_commas = words_without_commas[words_without_commas[end]\
    \ .< words_without_commas[end-1]]\n    \n    words_without_commas = words_without_commas[words_without_commas[end]\
    \ .< words_without_commas[end-1]]\n    \n    words_without_commas = words_without_commas[words_without_commas[end]\
    \ .< words_without_commas[end-1]]\n    \n    words_without_commas = words_without_commas[words_without_commas[end]\
    \ .< words_without_commas[end-1]]\n    \n    words_without_commas = words_without_commas[words_without_commas[end]\
    \ .< words_without_commas[end-1]]\n    \n    words_without_commas = words_without_commas[words_without_commas",
  "    \n    txt = txt.trim()\n    \n    if txt == \"\"\n        return txt\n    \n\
    \    words = split(txt, \" \")\n    \n    words_split = Vector{String}()\n   \
    \ \n    for word in words\n        words_split += split(word, \",\")\n    end\n\
    \    \n    words_split = words_split[findall(x -> x != \"\", words_split)]\n \
    \   \n    words_split = words_split[findall(x -> x != \"\", words_split)]\n  \
    \  \n    words_split = words_split[findall(x -> x != \"\", words_split)]\n   \
    \ \n    words_split = words_split[findall(x -> x != \"\", words_split)]\n    \n\
    \    words_split = words_split[findall(x -> x != \"\", words_split)]\n    \n \
    \   words_split = words_split[findall(x -> x != \"\", words_split)]\n    \n  \
    \  words_split = words_split[findall(x -> x != \"\", words_split)]\n    \n   \
    \ words_split = words_split[findall(x -> x != \"\", words_split)]\n    \n    words_split\
    \ = words_split[findall(x -> x != \"\", words_split)]\n    \n    words_split =\
    \ words_split[findall(x -> x != \"\", words_split)]\n    \n    words_split = words_split[findall(x\
    \ -> x != \"\", words_split)]\n    \n    words_split = words_split[findall(x ->\
    \ x != \"\", words_split)]\n    \n    words_split = words_split[findall(x -> x\
    \ != \"\", words_split)]\n    \n    words_split = words_split[findall(x -> x !=\
    \ \"\", words_split)]\n    \n    words_split = words_split[findall(x -> x != \"\
    \", words_split)]\n    \n    words_split = words_split[findall(x -> x != \"\"\
    , words_split)]\n    \n    words_split = words_split[findall(x -> x != \"\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \"\", words_split)]\n \
    \   \n    words_split = words_split[findall(x -> x != \"\", words_split)]\n  \
    \  \n    words_split = words_split[findall(x -> x != \"\", words_split)]\n   \
    \ \n    words_split = words_split[findall(x -> x != \"\", words_split)]\n    \n\
    \    words_split = words_split[findall(x -> x != \"\", words_split)]\n    \n \
    \   words_split = words_split[findall(x -> x != \"\", words_split)]\n    \n  \
    \  words_split = words_split[findall(x -> x != \"\", words_split)]\n    \n   \
    \ words_split = words_split[findall(x -> x != \"\", words_split)]\n    \n    words_split\
    \ = ", "    if length(txt) == 0 \n        return [] \n    else \n        words\
    \ = split(txt, ' ') \n        words = [w for w in words if w != \"\"] \n     \
    \   words = [w for w in words if w != \",\"]\n        words = [w for w in words\
    \ if w != \" \"]\n        words = [w for w in words if w != \"\\n\"]\n       \
    \ words = [w for w in words if w != \"\\t\"]\n        words = [w for w in words\
    \ if w != \"\\r\"]\n        words = [w for w in words if w != \"\\t\"]\n     \
    \   words = [w for w in words if w != \"\\r\"]\n        words = [w for w in words\
    \ if w != \"\\n\"]\n        words = [w for w in words if w != \"\\t\"]\n     \
    \   words = [w for w in words if w != \"\\r\"]\n        words = [w for w in words\
    \ if w != \"\\n\"]\n        words = [w for w in words if w != \"\\t\"]\n     \
    \   words = [w for w in words if w != \"\\r\"]\n        words = [w for w in words\
    \ if w != \"\\n\"]\n        words = [w for w in words if w != \"\\t\"]\n     \
    \   words = [w for w in words if w != \"\\r\"]\n        words = [w for w in words\
    \ if w != \"\\n\"]\n        words = [w for w in words if w != \"\\t\"]\n     \
    \   words = [w for w in words if w != \"\\r\"]\n        words = [w for w in words\
    \ if w != \"\\n\"]\n        words = [w for w in words if w != \"\\t\"]\n     \
    \   words = [w for w in words if w != \"\\r\"]\n        words = [w for w in words\
    \ if w != \"\\n\"]\n        words = [w for w in words if w != \"\\t\"]\n     \
    \   words = [w for w in words if w != \"\\r\"]\n        words = [w for w in words\
    \ if w != \"\\n\"]\n        words = [w for w in words if w != \"\\t\"]\n     \
    \   words = [w for w in words if w != \"\\r\"]\n        words = [w for w in words\
    \ if w != \"\\n\"]\n        words = [w for w in words if w != \"\\t\"]\n     \
    \   words = [w for w in words if w != \"\\r\"]\n        words = [w for w in words\
    \ if w != \"\\n\"]\n        words = [w for w in words if w != \"\\t\"]\n     \
    \   words = [w for w in words if w != \"\\r\"]\n        words = [w for w in words\
    \ if w != \"\\n\"]\n        words = [w for w in words if w != \"\\t\"]\n     \
    \   words = [w for w in words if w != \"\\r", "    \n    words = split(txt, \"\
    \ \")\n    \n    if length(words) == 0\n        return words\n    \n    if length(words)\
    \ == 1 \n        return words\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \
    \  if length(txt) == 0 \n        return [] \n    else \n        words = split(txt,\
    \ \" \") \n        words_without_commas = filter(x->!contains(x, \",\"), words)\
    \ \n        words_without_commas = filter(x->!contains(x, \"!\"), words_without_commas)\
    \ \n        words_without_commas = filter(x->!contains(x, \"?\"), words_without_commas)\
    \ \n        words_without_commas = filter(x->!contains(x, \".\"), words_without_commas)\
    \ \n        words_without_commas = filter(x->!contains(x, \"-\"), words_without_commas)\
    \ \n        words_without_commas = filter(x->!contains(x, \"(\"), words_without_commas)\
    \ \n        words_without_commas = filter(x->!contains(x, \")\"), words_without_commas)\
    \ \n        words_without_commas = filter(x->!contains(x, \"[\"), words_without_commas)\
    \ \n        words_without_commas = filter(x->!contains(x, \"]\"), words_without_commas)\
    \ \n        words_without_commas = filter(x->!contains(x, \"{\"), words_without_commas)\
    \ \n        words_without_commas = filter(x->!contains(x, \"|\"), words_without_commas)\
    \ \n        words_without_commas = filter(x->!contains(x, \"\\\\\"), words_without_commas)\
    \ \n        words_without_commas = filter(x->!contains(x, \"@\"), words_without_commas)\
    \ \n        words_without_commas = filter(x->!contains(x, \"#\"), words_without_commas)\
    \ \n        words_without_commas = filter(x->!contains(x, \"$\"), words_without_commas)\
    \ \n        words_without_commas = filter(x->!contains(x, \"%\"), words_without_commas)\
    \ \n        words_without_commas = filter(x->!contains(x, \"^\"), words_without_commas)\
    \ \n        words_without_commas = filter(x->!contains(x, \"&\"), words_without_commas)\
    \ \n        words_without_commas = filter(x->!contains(x, \"*\"), words_without_commas)\
    \ \n        words_without_commas = filter(x->!contains(x, \"(\"), words_without_commas)\
    \ \n        words_without_commas = filter(x->!contains(x, \")\"), words_without_commas)\
    \ \n        words_without_commas = filter(x->!contains(x, \"[\"), words_without_commas)\
    \ \n        words_without_commas = filter(x->!contains(x, \"]\"), words_without_commas)\
    \ \n        words_without_commas = filter(x->!contains(x, \"{\"), words_without_commas",
  "    \n    words = split(txt, \" \")\n    \n    \n    if isempty(words)\n      \
    \  return words\n    end\n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    ", "    words = split(txt, \" \")\n    words_split = split(txt, \"\
    ,\")\n    if length(words) == length(words_split)\n        return words\n    else\n\
    \        return words_split\n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>", "    \n    txt = txt.trim()\n    \n    if txt == \"\"\n       \
    \ return txt\n    \n    words = split(txt, \" \")\n    \n    if length(words)\
    \ == 0\n        return txt\n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    words = split(txt, \"\
    \ \")\n    \n    words_split = Vector{String}(undef, 0)\n    \n    for word in\
    \ words\n        words_split = words_split ++ [word]\n    end\n    \n    words_split\
    \ = words_split ++ [word]\n    \n    words_split = words_split ++ [word]\n   \
    \ \n    words_split = words_split ++ [word]\n    \n    words_split = words_split\
    \ ++ [word]\n    \n    words_split = words_split ++ [word]\n    \n    words_split\
    \ = words_split ++ [word]\n    \n    words_split = words_split ++ [word]\n   \
    \ \n    words_split = words_split ++ [word]\n    \n    words_split = words_split\
    \ ++ [word]\n    \n    words_split = words_split ++ [word]\n    \n    words_split\
    \ = words_split ++ [word]\n    \n    words_split = words_split ++ [word]\n   \
    \ \n    words_split = words_split ++ [word]\n    \n    words_split = words_split\
    \ ++ [word]\n    \n    words_split = words_split ++ [word]\n    \n    words_split\
    \ = words_split ++ [word]\n    \n    words_split = words_split ++ [word]\n   \
    \ \n    words_split = words_split ++ [word]\n    \n    words_split = words_split\
    \ ++ [word]\n    \n    words_split = words_split ++ [word]\n    \n    words_split\
    \ = words_split ++ [word]\n    \n    words_split = words_split ++ [word]\n   \
    \ \n    words_split = words_split ++ [word]\n    \n    words_split = words_split\
    \ ++ [word]\n    \n    words_split = words_split ++ [word]\n    \n    words_split\
    \ = words_split ++ [word]\n    \n    words_split = words_split ++ [word]\n   \
    \ \n    words_split = words_split ++ [word]\n    \n    words_split = words_split\
    \ ++ [word]\n    \n    words_split = words_split ++ [word]\n    \n    words_split\
    \ = words_split ++ [word]\n    \n    words_split = words_split ++ [word]\n   \
    \ \n    words_split = words_split ++ [word]\n    \n    words_split = words_split\
    \ ++ [word]\n    \n    words_split = words_split ++ [word]\n    \n    words_split\
    \ = words_split ++ [word]\n    \n    words_split = words_split ++ [word]\n   \
    \ \n    words_split = words_split ++ [word]\n    \n    words_split = words_split\
    \ ++ [word]\n    \n    words_", "    \n    txt = txt.trim()\n    if txt == \"\"\
    \n        return Vector{String}()\n    end\n    \n    words = split(txt, \" \"\
    )\n    \n    if length(words) == 0\n        return words\n    end\n    \n    words_split\
    \ = Vector{String}()\n    \n    for word in words\n        words_split = push!(words_split,\
    \ word)\n    end\n    \n    return words_split\nend\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"Hello world!\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    Hello,world!\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdef\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ a vector of strings of length 4 with each string containing the letters of the\
    \ string in alphabetical order.", "    \n    words = split(txt, \" \")\n    \n\
    \    word_counts = Dict()\n    for word in words\n        word_counts[word] =\
    \ get(word_counts, word, 0) + 1\n    end\n    \n    word_counts = sort(word_counts)\n\
    \    \n    word_counts = Dict([(k, v) for (k, v) in word_counts[2:end] if (k !=\
    \ words[1])])\n    \n    word_counts = sort(word_counts)\n    \n    word_counts\
    \ = Dict([(k, v) for (k, v) in word_counts[2:end] if (k != words[1])])\n    \n\
    \    word_counts = sort(word_counts)\n    \n    word_counts = Dict([(k, v) for\
    \ (k, v) in word_counts[2:end] if (k != words[1])])\n    \n    word_counts = sort(word_counts)\n\
    \    \n    word_counts = Dict([(k, v) for (k, v) in word_counts[2:end] if (k !=\
    \ words[1])])\n    \n    word_counts = sort(word_counts)\n    \n    word_counts\
    \ = Dict([(k, v) for (k, v) in word_counts[2:end] if (k != words[1])])\n    \n\
    \    word_counts = sort(word_counts)\n    \n    word_counts = Dict([(k, v) for\
    \ (k, v) in word_counts[2:end] if (k != words[1])])\n    \n    word_counts = sort(word_counts)\n\
    \    \n    word_counts = Dict([(k, v) for (k, v) in word_counts[2:end] if (k !=\
    \ words[1])])\n    \n    word_counts = sort(word_counts)\n    \n    word_counts\
    \ = Dict([(k, v) for (k, v) in word_counts[2:end] if (k != words[1])])\n    \n\
    \    word_counts = sort(word_counts)\n    \n    word_counts = Dict([(k, v) for\
    \ (k, v) in word_counts[2:end] if (k != words[1])])\n    \n    word_counts = sort(word_counts)\n\
    \    \n    word_counts = Dict([(k, v) for (k, v) in word_counts[2:end] if (k !=\
    \ words[1])])\n    \n    word_counts = sort(word_counts)\n    \n    word_counts\
    \ = Dict([(k, v) for (k, v) in word_counts[2:end] if (k != words[1])])\n    \n\
    \    word_counts = sort(word_counts)\n    \n    word_counts = Dict([(k, v) for\
    \ (k, v) in word_counts[2:end] if (k != words[1])])\n    \n    word_counts = sort(word_counts)\n\
    \    \n    word_counts = Dict", "    \n    words = split(txt, \" \")\n    \n \
    \   \n    if length(words) == 0 \n        return 0 \n    end\n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    txt = txt.trim()\n  \
    \  if txt == \"\"\n        return txt\n    else\n        words = split(txt, \"\
    \ \")\n        words = [w for w in words if w != \"\"]\n        return words\n\
    \    end\nend", "    \n    words = split(txt, \" \")\n    \n    if length(words)\
    \ == 0 \n        return 0 \n    else \n        return length(words) \n    end\n\
    end", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    txt\
    \ = txt.trim()\n    \n    if txt == \"\"\n        return Vector{String}()\n  \
    \  end\n    \n    words = split(txt, \" \")\n    \n    \n    if length(words)\
    \ == 0\n        return Vector{String}()\n    end\n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    words = split(txt)\n    \n    word_counts = Dict()\n    for\
    \ word in words\n        word_counts[word] = get(word_counts, word, 0) + 1\n \
    \   end\n    \n    word_counts = sort(word_counts, by=x->x[1], rev=true)\n   \
    \ \n    word_counts = filter(x -> x[1] % 2 != 0, word_counts)\n    \n    word_counts\
    \ = map(x -> x[1], word_counts)\n    \n    word_counts = filter(x -> x != 0, word_counts)\n\
    \    \n    word_counts = map(x -> x[1], word_counts)\n    \n    word_counts =\
    \ filter(x -> x != 0, word_counts)\n    \n    word_counts = map(x -> x[1], word_counts)\n\
    \    \n    word_counts = filter(x -> x != 0, word_counts)\n    \n    word_counts\
    \ = map(x -> x[1], word_counts)\n    \n    word_counts = filter(x -> x != 0, word_counts)\n\
    \    \n    word_counts = map(x -> x[1], word_counts)\n    \n    word_counts =\
    \ filter(x -> x != 0, word_counts)\n    \n    word_counts = map(x -> x[1], word_counts)\n\
    \    \n    word_counts = filter(x -> x != 0, word_counts)\n    \n    word_counts\
    \ = map(x -> x[1], word_counts)\n    \n    word_counts = filter(x -> x != 0, word_counts)\n\
    \    \n    word_counts = map(x -> x[1], word_counts)\n    \n    word_counts =\
    \ filter(x -> x != 0, word_counts)\n    \n    word_counts = map(x -> x[1], word_counts)\n\
    \    \n    word_counts = filter(x -> x != 0, word_counts)\n    \n    word_counts\
    \ = map(x -> x[1], word_counts)\n    \n    word_counts = filter(x -> x != 0, word_counts)\n\
    \    \n    word_counts = map(x -> x[1], word_counts)\n    \n    word_counts =\
    \ filter(x -> x != 0, word_counts)\n    \n    word_counts = map(x -> x[1], word_counts)\n\
    \    \n    word_counts = filter(x -> x != 0, word_counts)\n    \n    word_counts\
    \ = map(x -> x[1], word_counts)\n    \n    word_counts = filter(x -> x != 0, word_counts)\n\
    \    \n    word_counts = map(x -> x[1], word_counts)\n    \n    word_counts =\
    \ filter(x -> x != 0, word_counts)\n    \n    ", "    \n    words = split(txt)\n\
    \    \n    words = [w for w in words if w != \"\"]\n    \n    words = [w for w\
    \ in words if w != \",\"]\n    \n    words = [w for w in words if w != \"-\"]\n\
    \    \n    words = [w for w in words if w != \"_\"]\n    \n    words = [w for\
    \ w in words if w != \"!\"]\n    \n    words = [w for w in words if w != \"?\"\
    ]\n    \n    words = [w for w in words if w != \"-\"]\n    \n    words = [w for\
    \ w in words if w != \"?\"]\n    \n    words = [w for w in words if w != \"!\"\
    ]\n    \n    words = [w for w in words if w != \"-\"]\n    \n    words = [w for\
    \ w in words if w != \"?\"]\n    \n    words = [w for w in words if w != \"!\"\
    ]\n    \n    words = [w for w in words if w != \"-\"]\n    \n    words = [w for\
    \ w in words if w != \"?\"]\n    \n    words = [w for w in words if w != \"!\"\
    ]\n    \n    words = [w for w in words if w != \"-\"]\n    \n    words = [w for\
    \ w in words if w != \"?\"]\n    \n    words = [w for w in words if w != \"!\"\
    ]\n    \n    words = [w for w in words if w != \"-\"]\n    \n    words = [w for\
    \ w in words if w != \"?\"]\n    \n    words = [w for w in words if w != \"!\"\
    ]\n    \n    words = [w for w in words if w != \"-\"]\n    \n    words = [w for\
    \ w in words if w != \"?\"]\n    \n    words = [w for w in words if w != \"!\"\
    ]\n    \n    words = [w for w in words if w != \"-\"]\n    \n    words = [w for\
    \ w in words if w != \"?\"]\n    \n    words = [w for w in words if w != \"!\"\
    ]\n    \n    words = [w for w in words if w != \"-\"]\n    \n    words = [w for\
    \ w in words if w != \"?\"]\n    \n    words = [w for w in words if w != \"!\"\
    ]\n    \n    words = [w for w in words if w != \"-\"]\n    \n    words = [w for\
    \ w in words if w != \"?\"]\n    \n    words = [w for w in words if w != \"!\"\
    ]\n    \n    words = [w for w in word", "    txt = txt.trim()\n    if txt == \"\
    \"\n        return Vector{String}()\n    else\n        words = split(txt, \" \"\
    )\n        words = words[2:end]\n        words = words[2:end]\n        words =\
    \ words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n \
    \       words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n", "    \n    txt = txt.trim()\n    \n    if txt\
    \ == \"\"\n        return txt\n    \n    words = split(txt, \" \")\n    \n   \
    \ words_split = Vector{String}(undef, 0)\n    \n    for word in words\n      \
    \  words_split = words_split ++ split(word,\",\")\n    end\n    \n    words_split\
    \ = words_split ++ split(txt,\",\")\n    \n    words_split = words_split ++ split(txt,\"\
    \ \")\n    \n    words_split = words_split ++ split(txt,\".\")\n    \n    words_split\
    \ = words_split ++ split(txt,\",\")\n    \n    words_split = words_split ++ split(txt,\"\
    ;\")\n    \n    words_split = words_split ++ split(txt,\":\")\n    \n    words_split\
    \ = words_split ++ split(txt,\",\")\n    \n    words_split = words_split ++ split(txt,\"\
    ,\")\n    \n    words_split = words_split ++ split(txt,\".\")\n    \n    words_split\
    \ = words_split ++ split(txt,\",\")\n    \n    words_split = words_split ++ split(txt,\"\
    ,\")\n    \n    words_split = words_split ++ split(txt,\",\")\n    \n    words_split\
    \ = words_split ++ split(txt,\",\")\n    \n    words_split = words_split ++ split(txt,\"\
    ,\")\n    \n    words_split = words_split ++ split(txt,\",\")\n    \n    words_split\
    \ = words_split ++ split(txt,\",\")\n    \n    words_split = words_split ++ split(txt,\"\
    ,\")\n    \n    words_split = words_split ++ split(txt,\",\")\n    \n    words_split\
    \ = words_split ++ split(txt,\",\")\n    \n    words_split = words_split ++ split(txt,\"\
    ,\")\n    \n    words_split = words_split ++ split(txt,\",\")\n    \n    words_split\
    \ = words_split ++ split(txt,\",\")\n    \n    words_split = words_split ++ split(txt,\"\
    ,\")\n    \n    words_split = words_split ++ split(txt,\",\")\n    \n    words_split\
    \ = words_split ++ split(txt,\",\")\n    \n    words_split = words_split ++ split(txt,\"\
    ,\")\n    \n    words_split = words_split ++ split(txt,\",\")\n    \n    words_split\
    \ = words_split ++ split(txt,\",\")\n    \n    words_split = words_split ++ split(txt,\"\
    ,\")\n    \n    words_split = words_split ++ split(txt,\",\")\n    \n    words_split\
    \ = words_split ++ split(txt,\",\")\n    \n    words_split = words_split ++ split(txt,\"\
    ,\")\n    \n    ", "    \n    words = split(txt, \" \")\n    \n    if length(words)\
    \ == 0\n        return txt\n    end\n    \n    if length(words) == 1 \n      \
    \  return words\n    end\n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    txt = txt.trim()\n\
    \    if txt == \"\"\n        return Vector{String}()\n    else\n        words\
    \ = split(txt, \" \")\n        words = [w for w in words if w != \"\"]\n     \
    \   words = [w for w in words if w != \",\"]\n        words = [w for w in words\
    \ if w != \"abcdef\"]\n        return words\n    end\nend", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    words = split(txt, \" \")\n\
    \    \n    if length(words) == 0 \n        return 0 \n    \n    words_split =\
    \ split(words, \",\")\n    \n    if length(words_split) == 0 \n        return\
    \ length(words) \n    \n    words_split = split(words_split, \" \")\n    \n  \
    \  if length(words_split) == 0 \n        return length(words) \n    \n    words_split\
    \ = split(words_split, \",\")\n    \n    if length(words_split) == 0 \n      \
    \  return length(words) \n    \n    words_split = split(words_split, \" \")\n\
    \    \n    if length(words_split) == 0 \n        return length(words) \n    \n\
    \    words_split = split(words_split, \",\")\n    \n    if length(words_split)\
    \ == 0 \n        return length(words) \n    \n    words_split = split(words_split,\
    \ \" \")\n    \n    if length(words_split) == 0 \n        return length(words)\
    \ \n    \n    words_split = split(words_split, \",\")\n    \n    if length(words_split)\
    \ == 0 \n        return length(words) \n    \n    words_split = split(words_split,\
    \ \" \")\n    \n    if length(words_split) == 0 \n        return length(words)\
    \ \n    \n    words_split = split(words_split, \",\")\n    \n    if length(words_split)\
    \ == 0 \n        return length(words) \n    \n    words_split = split(words_split,\
    \ \" \")\n    \n    if length(words_split) == 0 \n        return length(words)\
    \ \n    \n    words_split = split(words_split, \",\")\n    \n    if length(words_split)\
    \ == 0 \n        return length(words) \n    \n    words_split = split(words_split,\
    \ \" \")\n    \n    if length(words_split) == 0 \n        return length(words)\
    \ \n    \n    words_split = split(words_split, \",\")\n    \n    if length(words_split)\
    \ == 0 \n        return length(words) \n    \n    words_split = split(words_split,\
    \ \" \")\n    \n    if length(words_split) == 0 \n        return length(words)\
    \ \n    \n    words_split = split(words_split, \",\")\n    \n    if length(words_split)\
    \ == 0 \n        return length(words) \n    \n    words_split = split(words_split,\
    \ \" \")\n    \n    if length(words_split) == 0 \n        return length(words)\
    \ \n    \n    words_split = split(words_split, \",\")\n    \n    if length(words_split)\
    \ == 0 \n        return length(words) \n    \n    words_split = split(words_split,\
    \ \" \")\n    \n    if length(words_split) == 0 \n        return length(words)\
    \ \n    \n    words_split = split(words_split, \",\")\n    \n    if length(words_split)\
    \ == 0 \n        return length(words) \n    \n    words_split = split(words_split,\
    \ \" \")\n    \n    if length(words_split) == 0 \n        return length(words)\
    \ \n    \n    ", "    \n    words = split(txt, \" \")\n    \n    word_counts =\
    \ Dict()\n    for w in words\n        word_counts[w] = get(word_counts, w, 0)\
    \ + 1\n    end\n    \n    word_counts = collect(values(word_counts))\n    \n \
    \   word_counts = sort(word_counts)\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[word_counts[end] .> word_counts[end-1]]\n\
    \    \n    word_counts = word_counts[word_counts[end] .> word_counts[end-1]]\n\
    \    \n    word_counts = word_counts[word_counts[end] .> word_counts[end-1]]\n\
    \    \n    word_counts = word_counts[word_counts[end] .> word_counts[end-1]]\n\
    \    \n    word_counts = word_counts[word_counts[end] .> word_counts[end-1]]\n\
    \    \n    word_counts = word_counts[word_counts[end] .> word_counts[end-1]]\n\
    \    \n    word_counts = word_counts[word_counts[end] .> word_counts[end-1]]\n\
    \    \n    word_counts = word_counts[word_counts[end] .> word_counts[end-1]]\n\
    \    \n    word_counts = word_counts[word_counts[end] .> word_counts[end-1]]\n\
    \    \n    word_counts = word_counts[word_counts[end] .> word_counts[end-1]]\n\
    \    \n    word_counts = word_counts[word_counts[end] .> word_counts[end-1]]\n\
    \    \n    word_counts = word_counts[word_counts[end] .> word_counts[end-1]]\n\
    \    \n    word_counts = word_counts[word_counts[end] .> word_counts[end-1]]\n\
    \    \n    word_counts = word_counts[word_counts[end] .> word_counts[end-1]]\n\
    \    \n    word_counts = word_counts[word_counts[end] .> word_counts[end-1]]\n\
    \    \n    word_counts = word_counts[word_counts[end] .> word_counts[end-1]]\n\
    \    \n    word_counts = word_counts[word_counts[end] .> word_counts[end-1]]\n\
    \    \n    word_counts = word_counts[word_counts[end] .> word_counts[end-1]]\n\
    \    \n    word_counts = word_counts[word_counts[end] .> word_counts[end-1]]\n\
    \    ", "    txt = txt.trim()\n    if txt == \"\"\n        return txt\n    \n\
    \    words = split(txt, \" \")\n    \n    words_splitted = []\n    \n    for word\
    \ in words\n        words_splitted = words_splitted ++ split(word, \",\")\n  \
    \  end\n    \n    words_splitted = words_splitted ++ split(words[1], \",\")\n\
    \    \n    words_splitted = words_splitted ++ split(words[2], \",\")\n    \n \
    \   words_splitted = words_splitted ++ split(words[3], \",\")\n    \n    words_splitted\
    \ = words_splitted ++ split(words[4], \",\")\n    \n    words_splitted = words_splitted\
    \ ++ split(words[5], \",\")\n    \n    words_splitted = words_splitted ++ split(words[6],\
    \ \",\")\n    \n    words_splitted = words_splitted ++ split(words[7], \",\")\n\
    \    \n    words_splitted = words_splitted ++ split(words[8], \",\")\n    \n \
    \   words_splitted = words_splitted ++ split(words[9], \",\")\n    \n    words_splitted\
    \ = words_splitted ++ split(words[10], \",\")\n    \n    words_splitted = words_splitted\
    \ ++ split(words[11], \",\")\n    \n    words_splitted = words_splitted ++ split(words[12],\
    \ \",\")\n    \n    words_splitted = words_splitted ++ split(words[13], \",\"\
    )\n    \n    words_splitted = words_splitted ++ split(words[14], \",\")\n    \n\
    \    words_splitted = words_splitted ++ split(words[15], \",\")\n    \n    words_splitted\
    \ = words_splitted ++ split(words[16], \",\")\n    \n    words_splitted = words_splitted\
    \ ++ split(words[17], \",\")\n    \n    words_splitted = words_splitted ++ split(words[18],\
    \ \",\")\n    \n    words_splitted = words_splitted ++ split(words[19], \",\"\
    )\n    \n    words_splitted = words_splitted ++ split(words[20], \",\")\n    \n\
    \    words_splitted = words_splitted ++ split(words[21], \",\")\n    \n    words_splitted\
    \ = words_splitted ++ split(words[22], \",\")\n    \n    words_splitted = words_splitted\
    \ ++ split(words[23], \",\")\n    \n    words_splitted = words_splitted ++ split(words[24],\
    \ \",\")\n    \n    words_splitted = words_splitted ++ split(words[25], \",\"\
    )\n    \n    words_splitted = words_splitted ++ split(words[26], ", "    \n  \
    \  words = split(txt)\n    \n    if length(words) == 0\n        return words\n\
    \    \n    words_split = split(txt, \" \")\n    \n    if length(words_split) ==\
    \ 0\n        return words\n    \n    words_split = split(txt, \",\")\n    \n \
    \   if length(words_split) == 0\n        return words\n    \n    words_split =\
    \ split(txt, \"-\")\n    \n    if length(words_split) == 0\n        return words\n\
    \    \n    words_split = split(txt, \";\")\n    \n    if length(words_split) ==\
    \ 0\n        return words\n    \n    words_split = split(txt, \"/\")\n    \n \
    \   if length(words_split) == 0\n        return words\n    \n    words_split =\
    \ split(txt, \"\\\\\")\n    \n    if length(words_split) == 0\n        return\
    \ words\n    \n    words_split = split(txt, \"'\")\n    \n    if length(words_split)\
    \ == 0\n        return words\n    \n    words_split = split(txt, \"\\\"\")\n \
    \   \n    if length(words_split) == 0\n        return words\n    \n    words_split\
    \ = split(txt, \"?\")\n    \n    if length(words_split) == 0\n        return words\n\
    \    \n    words_split = split(txt, \"!\")\n    \n    if length(words_split) ==\
    \ 0\n        return words\n    \n    words_split = split(txt, \"#\")\n    \n \
    \   if length(words_split) == 0\n        return words\n    \n    words_split =\
    \ split(txt, \"$\")\n    \n    if length(words_split) == 0\n        return words\n\
    \    \n    words_split = split(txt, \"%\")\n    \n    if length(words_split) ==\
    \ 0\n        return words\n    \n    words_split = split(txt, \"^\")\n    \n \
    \   if length(words_split) == 0\n        return words\n    \n    words_split =\
    \ split(txt, \"&\")\n    \n    if length(words_split) == 0\n        return words\n\
    \    \n    words_split = split(txt, \"*\")\n    \n    if length(words_split) ==\
    \ 0\n        return words\n    \n    words_split = split(txt, \"(\")\n    \n \
    \   if length(words_split) == 0\n        return words\n    \n    words_split =\
    \ split(txt, \")\")\n    \n    if length(words_split) == 0\n        return words\n\
    \    \n    words_split = split(txt, \"-\")\n    \n    if length(words_split) ==\
    \ 0\n        return words\n    \n    words_split = split(txt, \"+\")\n    \n \
    \   if length(words_split) == 0\n        return words\n    \n    words_split =\
    \ split(txt, \"=\")\n    \n    if length(words_split) == 0\n        return words\n\
    \    \n    words_split = split(txt, \"<\")\n    \n    if length(words_split) ==\
    \ 0\n        return words\n    \n    words_split = split(txt, \">\")\n    \n \
    \   if length(words_split) == 0\n        return words\n", "    \n    words = split(txt,\
    \ \" \")\n    \n    if length(words) == 0 \n        return 0 \n    else \n   \
    \     \n        words_split = split(txt, \",\")\n        \n        if length(words_split)\
    \ == 0 \n            return length(words) \n        else \n            \n    \
    \        words_split2 = split(words_split[1], \" \")\n            \n         \
    \   if length(words_split2) == 0 \n                return length(words) + length(words_split)\
    \ \n            else \n                return length(words) + length(words_split)\
    \ + length(words_split2) \n        end\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if isempty(txt)\n        return txt\n    else\n        words = split(txt, \"\
    \ \")\n        words = [w for w in words if w != \"\"]\n        words = [w for\
    \ w in words if w != \",\"]\n        words = [w for w in words if w != \".\"]\n\
    \        words = [w for w in words if w != \"?\"]\n        words = [w for w in\
    \ words if w != \"!\"]\n        words = [w for w in words if w != \"-\"]\n   \
    \     words = [w for w in words if w != \"_\"]\n        words = [w for w in words\
    \ if w != \"(\"]\n        words = [w for w in words if w != \")\"]\n        words\
    \ = [w for w in words if w != \"[\"]\n        words = [w for w in words if w !=\
    \ \"]\"]\n        words = [w for w in words if w != \"{\"]\n        words = [w\
    \ for w in words if w != \"}\"]\n        words = [w for w in words if w != \"\
    |\"]\n        words = [w for w in words if w != \"#\"]\n        words = [w for\
    \ w in words if w != \"$\"]\n        words = [w for w in words if w != \"%\"]\n\
    \        words = [w for w in words if w != \"^\"]\n        words = [w for w in\
    \ words if w != \"&\"]\n        words = [w for w in words if w != \"*\"]\n   \
    \     words = [w for w in words if w != \"(\"]\n        words = [w for w in words\
    \ if w != \")\"]\n        words = [w for w in words if w != \"[\"]\n        words\
    \ = [w for w in words if w != \"]\"]\n        words = [w for w in words if w !=\
    \ \"{\"]\n        words = [w for w in words if w != \"}\"]\n        words = [w\
    \ for w in words if w != \"|\"]\n        words = [w for w in words if w != \"\
    #\"]\n        words = [w for w in words if w != \"$\"]\n        words = [w for\
    \ w in words if w != \"%\"]\n        words = [w for w in words if w != \"^\"]\n\
    \        words = [w for w in words if w != \"&\"]\n        words = [w for w in\
    \ words if w != \"*\"]\n        words = [w for w in words if w != \"(\"]\n   \
    \     words = [w for w in words if w != \")\"]\n        words = [w for w in words\
    \ if w != \"[\"]\n        words = [w for w in words if w != \"]\"]\n        words\
    \ = [w for w in words if w != \"{", "    \n    if isempty(txt)\n        return\
    \ [] \n    end\n    \n    words = split(txt, \" \")\n    \n    words_splitted\
    \ = []\n    \n    for word in words\n        if isempty(word)\n            continue\n\
    \        end\n        \n        words_splitted = words_splitted ++ split(word,\
    \ \",\")\n    end\n    \n    words_splitted = words_splitted ++ split(txt, \"\
    \ \")\n    \n    words_splitted = words_splitted .- \"a\"\n    \n    words_splitted\
    \ = words_splitted .- \"b\"\n    \n    words_splitted = words_splitted .- \"c\"\
    \n    \n    words_splitted = words_splitted .- \"d\"\n    \n    words_splitted\
    \ = words_splitted .- \"e\"\n    \n    words_splitted = words_splitted .- \"f\"\
    \n    \n    words_splitted = words_splitted .- \"g\"\n    \n    words_splitted\
    \ = words_splitted .- \"h\"\n    \n    words_splitted = words_splitted .- \"i\"\
    \n    \n    words_splitted = words_splitted .- \"j\"\n    \n    words_splitted\
    \ = words_splitted .- \"k\"\n    \n    words_splitted = words_splitted .- \"l\"\
    \n    \n    words_splitted = words_splitted .- \"m\"\n    \n    words_splitted\
    \ = words_splitted .- \"n\"\n    \n    words_splitted = words_splitted .- \"o\"\
    \n    \n    words_splitted = words_splitted .- \"p\"\n    \n    words_splitted\
    \ = words_splitted .- \"q\"\n    \n    words_splitted = words_splitted .- \"r\"\
    \n    \n    words_splitted = words_splitted .- \"s\"\n    \n    words_splitted\
    \ = words_splitted .- \"t\"\n    \n    words_splitted = words_splitted .- \"u\"\
    \n    \n    words_splitted = words_splitted .- \"v\"\n    \n    words_splitted\
    \ = words_splitted .- \"w\"\n    \n    words_splitted = words_splitted .- \"x\"\
    \n    \n    words_splitted = words_splitted .- \"y\"\n    \n    words_splitted\
    \ = words_splitted .- \"z\"\n    \n    words_splitted = words_splitted .- \"A\"\
    \n    \n    words_splitted = words_splitted .- \"B\"\n    \n    words_splitted\
    \ = words_splitted .- \"C\"\n    \n    words_splitted = words_", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    words = split(txt)\n    \n    words_split\
    \ = Vector{String}(undef, 0)\n    \n    for word in words\n        \n        if\
    \ !isspace(word)\n            words_split = words_split ++ [word]\n        else\n\
    \            words_split = words_split ++ [word]\n        end\n    end\n    \n\
    \    return words_split\nend", "    words = split(txt, \" \")\n    words_split\
    \ = split(txt, \",\")\n    words_split2 = split(txt, \",\")\n    if length(words)\
    \ == length(words_split) || length(words) == length(words_split2) || length(words)\
    \ == length(words_split) || length(words) == length(words_split2)\n        return\
    \ words\n    else\n        return length(words)\n    end\nend", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    txt = txt.trim()\n    if txt\
    \ == \"\"\n        return txt\n    else\n        words = split(txt, \" \")\n \
    \       words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[", "    words = split(txt, \" \")\n    words_split = split(txt,\
    \ \",\")\n    if length(words_split) == 0 \n        return words\n    else\n \
    \       return words_split\n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,string\
    \ |>\n<code>", "    txt = txt.trim()\n    if txt == \"\"\n        return txt\n\
    \    \n    words = split(txt, \" \")\n    \n    words_splitted = []\n    for word\
    \ in words\n        if word != \"\"\n            words_splitted = words_splitted\
    \ ++ split(word, \",\")\n        end\n    end\n    \n    words_splitted = words_splitted\
    \ ++ split(txt, \",\")\n    \n    words_splitted = words_splitted ++ split(txt,\
    \ \" \")\n    \n    words_splitted = words_splitted ++ split(txt, \" \")\n   \
    \ \n    words_splitted = words_splitted ++ split(txt, \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(txt, \" \")\n    \n    words_splitted = words_splitted\
    \ ++ split(txt, \" \")\n    \n    words_splitted = words_splitted ++ split(txt,\
    \ \" \")\n    \n    words_splitted = words_splitted ++ split(txt, \" \")\n   \
    \ \n    words_splitted = words_splitted ++ split(txt, \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(txt, \" \")\n    \n    words_splitted = words_splitted\
    \ ++ split(txt, \" \")\n    \n    words_splitted = words_splitted ++ split(txt,\
    \ \" \")\n    \n    words_splitted = words_splitted ++ split(txt, \" \")\n   \
    \ \n    words_splitted = words_splitted ++ split(txt, \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(txt, \" \")\n    \n    words_splitted = words_splitted\
    \ ++ split(txt, \" \")\n    \n    words_splitted = words_splitted ++ split(txt,\
    \ \" \")\n    \n    words_splitted = words_splitted ++ split(txt, \" \")\n   \
    \ \n    words_splitted = words_splitted ++ split(txt, \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(txt, \" \")\n    \n    words_splitted = words_splitted\
    \ ++ split(txt, \" \")\n    \n    words_splitted = words_splitted ++ split(txt,\
    \ \" \")\n    \n    words_splitted = words_splitted ++ split(txt, \" \")\n   \
    \ \n    words_splitted = words_splitted ++ split(txt, \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(txt, \" \")\n    \n    words_splitted = words_splitted\
    \ ++ split(txt, \" \")\n    \n    words_splitted = words_splitted ++ split(txt,\
    \ \" \")\n    \n    words_splitted = words_splitted ++ split(txt, \" \")\n   \
    \ \n    words_splitted = words_splitted ++ split(txt, \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(txt, \" \")\n    \n", "    \n    words = split(txt,\
    \ \" \")\n    \n    if length(words) == 0\n        return words\n    end\n   \
    \ \n    words_split = split(txt, \",\")\n    \n    if length(words_split) == 0\n\
    \        return words\n    end\n    \n    words_split = split(words_split[1],\
    \ \",\")\n    \n    if length(words_split) == 0\n        return words\n    end\n\
    \    \n    words_split = split(words_split[1], \",\")\n    \n    if length(words_split)\
    \ == 0\n        return words\n    end\n    \n    words_split = split(words_split[1],\
    \ \",\")\n    \n    if length(words_split) == 0\n        return words\n    end\n\
    \    \n    words_split = split(words_split[1], \",\")\n    \n    if length(words_split)\
    \ == 0\n        return words\n    end\n    \n    words_split = split(words_split[1],\
    \ \",\")\n    \n    if length(words_split) == 0\n        return words\n    end\n\
    \    \n    words_split = split(words_split[1], \",\")\n    \n    if length(words_split)\
    \ == 0\n        return words\n    end\n    \n    words_split = split(words_split[1],\
    \ \",\")\n    \n    if length(words_split) == 0\n        return words\n    end\n\
    \    \n    words_split = split(words_split[1], \",\")\n    \n    if length(words_split)\
    \ == 0\n        return words\n    end\n    \n    words_split = split(words_split[1],\
    \ \",\")\n    \n    if length(words_split) == 0\n        return words\n    end\n\
    \    \n    words_split = split(words_split[1], \",\")\n    \n    if length(words_split)\
    \ == 0\n        return words\n    end\n    \n    words_split = split(words_split[1],\
    \ \",\")\n    \n    if length(words_split) == 0\n        return words\n    end\n\
    \    \n    words_split = split(words_split[1], \",\")\n    \n    if length(words_split)\
    \ == 0\n        return words\n    end\n    \n    words_split = split(words_split[1],\
    \ \",\")\n    \n    if length(words_split) == 0\n        return words\n    end\n\
    \    \n    words_split = split(words_split[1], \",\")\n    \n    if length(words_split)\
    \ == 0\n        return words\n    end\n    \n    words_split = split(words_split[1],\
    \ \",\")\n    \n    if length(words_split) == 0\n        return words\n    end\n\
    \    \n    words_split = split(words_split[1], \",\")\n    \n    if length(words_split)\
    \ == 0\n        return words\n    end\n    \n    words_split = split(words_split[1],\
    \ \",\")\n    \n    if length(words_split) == 0\n        return words\n    end\n\
    \    \n    words_split = split(words_split[1], \",\")\n    \n    if length(words_split)\
    \ == 0\n        return words\n    end\n    \n    words_split = split(words_split[1],\
    \ \",\")\n    \n    if length(", "    words = split(txt, \" \")\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"", "    txt = txt.trim()\n\
    \    words = split(txt, \" \")\n    \n    if length(words) == 0 \n        return\
    \ txt\n    elseif length(words) == 1 \n        return words\n    else\n      \
    \  \n        words_split = split(txt, \",\")\n        \n        if length(words_split)\
    \ == 0 \n            return txt\n        elseif length(words_split) == 1 \n  \
    \          return words_split\n        else\n            \n            words_split\
    \ = split(txt, \",\")\n            \n            if length(words_split) == 0 \n\
    \                return txt\n            elseif length(words_split) == 1 \n  \
    \              return words_split\n            else\n                \n      \
    \          words_split = split(txt, \",\")\n                \n               \
    \ if length(words_split) == 0 \n                    return txt\n             \
    \   elseif length(words_split) == 1 \n                    return words_split\n\
    \                else\n                    \n                    words_split =\
    \ split(txt, \",\")\n                    \n                    if length(words_split)\
    \ == 0 \n                        return txt\n                    elseif length(words_split)\
    \ == 1 \n                        return words_split\n                    else\n\
    \                        \n                        words_split = split(txt, \"\
    ,\")\n                        \n                        if length(words_split)\
    \ == 0 \n                            return txt\n                        elseif\
    \ length(words_split) == 1 \n                            return words_split\n\
    \                        else\n                            \n                \
    \            words_split = split(txt, \",\")\n                            \n \
    \                           if length(words_split) == 0 \n                   \
    \             return txt\n                            elseif length(words_split)\
    \ == 1 \n                                return words_split\n                \
    \            else\n                                \n                        \
    \        words_split = split(txt, \",\")\n                                \n \
    \                               if length(words_split) == 0 \n               \
    \                     return txt\n                                elseif length(words_split)\
    \ == 1 \n                                    return words_split\n            \
    \                    else\n                                    \n            \
    \                        words_split = split(txt, \",\")\n                   \
    \                 \n                                    if length(words_split)\
    \ == 0 \n                                        return txt\n                \
    \                    elseif length(words_split) == 1 \n                      \
    \                  return words_split\n                                    else\n\
    \                                        \n                                  \
    \      words_split = split(txt, \",\")\n                                     \
    \   \n                                        if length(words_split) == 0 \n \
    \                                           return txt\n                     \
    \                   elseif length(words_split) == 1 \n                       \
    \                     return words_split\n                                   \
    \     else\n                                            \n                   \
    \                         words_split = split(txt, \",\")\n                  \
    \                          \n                                            if length(words_split)\
    \ == 0 \n                                                return txt\n        \
    \                                    elseif length(words_split) == 1 \n      \
    \                                          return words_split\n              \
    \                              else\n                                        \
    \        \n                                                words_split = split(txt,\
    \ \",\")\n                                                \n                 \
    \                               if length(words_split) == 0 \n               \
    \                                     return txt\n                           \
    \                     elseif length(words_split) == 1 \n                     \
    \                               return words_split\n                         \
    \                       else\n                                               \
    \     \n                                                    words_split = split(txt,\
    \ \",\")\n                                                    \n             \
    \                                       if length(words_split) == 0 \n       \
    \                                                 return txt\n               \
    \                                     elseif length(words_split", "    \n    txt\
    \ = txt.trim()\n    \n    if txt == \"\"\n        return txt\n    \n    words\
    \ = split(txt, \" \")\n    \n    words_split = split(txt, \",\")\n    \n    words_split2\
    \ = split(txt, \" \")\n    \n    words_split3 = split(txt, \",\")\n    \n    words_split4\
    \ = split(txt, \" \")\n    \n    words_split5 = split(txt, \",\")\n    \n    words_split6\
    \ = split(txt, \" \")\n    \n    words_split7 = split(txt, \",\")\n    \n    words_split8\
    \ = split(txt, \" \")\n    \n    words_split9 = split(txt, \",\")\n    \n    words_split10\
    \ = split(txt, \" \")\n    \n    words_split11 = split(txt, \",\")\n    \n   \
    \ words_split12 = split(txt, \" \")\n    \n    words_split13 = split(txt, \",\"\
    )\n    \n    words_split14 = split(txt, \" \")\n    \n    words_split15 = split(txt,\
    \ \",\")\n    \n    words_split16 = split(txt, \" \")\n    \n    words_split17\
    \ = split(txt, \",\")\n    \n    words_split18 = split(txt, \" \")\n    \n   \
    \ words_split19 = split(txt, \",\")\n    \n    words_split20 = split(txt, \" \"\
    )\n    \n    words_split21 = split(txt, \",\")\n    \n    words_split22 = split(txt,\
    \ \" \")\n    \n    words_split23 = split(txt, \",\")\n    \n    words_split24\
    \ = split(txt, \" \")\n    \n    words_split25 = split(txt, \",\")\n    \n   \
    \ words_split26 = split(txt, \" \")\n    \n    words_split27 = split(txt, \",\"\
    )\n    \n    words_split28 = split(txt, \" \")\n    \n    words_split29 = split(txt,\
    \ \",\")\n    \n    words_split30 = split(txt, \" \")\n    \n    words_split31\
    \ = split(txt, \",\")\n    \n    words_split32 = split(txt, \" \")\n    \n   \
    \ words_split33 = split(txt, \",\")\n    \n    words_split34 = split(txt, \" \"\
    )\n    \n    words_split35 = split(txt, \",\")\n    \n    words_split36 = split(txt,\
    \ \" \")\n    \n    words_split37 = split(txt, \",\")\n    \n    words_split38\
    \ = split(txt, \" \")\n    \n    words_split39 = split(txt, \",\")\n    \n   \
    \ words_split40 = split(", "    txt = txt.trim()\n    if txt == \"\"\n       \
    \ return txt\n    else\n        words = split(txt, \" \")\n        words_split\
    \ = split(txt, \",\")\n        words_split = split(words_split, \" \")\n     \
    \   words_split = split(words_split, \",\")\n        words_split = split(words_split,\
    \ \" \")\n        words_split = split(words_split, \",\")\n        words_split\
    \ = split(words_split, \" \")\n        words_split = split(words_split, \",\"\
    )\n        words_split = split(words_split, \" \")\n        words_split = split(words_split,\
    \ \",\")\n        words_split = split(words_split, \" \")\n        words_split\
    \ = split(words_split, \",\")\n        words_split = split(words_split, \" \"\
    )\n        words_split = split(words_split, \",\")\n        words_split = split(words_split,\
    \ \" \")\n        words_split = split(words_split, \",\")\n        words_split\
    \ = split(words_split, \" \")\n        words_split = split(words_split, \",\"\
    )\n        words_split = split(words_split, \" \")\n        words_split = split(words_split,\
    \ \",\")\n        words_split = split(words_split, \" \")\n        words_split\
    \ = split(words_split, \",\")\n        words_split = split(words_split, \" \"\
    )\n        words_split = split(words_split, \",\")\n        words_split = split(words_split,\
    \ \" \")\n        words_split = split(words_split, \",\")\n        words_split\
    \ = split(words_split, \" \")\n        words_split = split(words_split, \",\"\
    )\n        words_split = split(words_split, \" \")\n        words_split = split(words_split,\
    \ \",\")\n        words_split = split(words_split, \" \")\n        words_split\
    \ = split(words_split, \",\")\n        words_split = split(words_split, \" \"\
    )\n        words_split = split(words_split, \",\")\n        words_split = split(words_split,\
    \ \" \")\n        words_split = split(words_split, \",\")\n        words_split\
    \ = split(words_split, \" \")\n        words_split = split(words_split, \",\"\
    )\n        words_split = split(words_split, \" \")\n        words_split = split(words_split,\
    \ \",\")\n        words_split = split(words_split, \" \")\n        words_split\
    \ = split(words_split, \",\")\n        words_split = split(words_split, \" \"\
    )\n        words_split = split(words_split, \",\")\n        words_split = split(words_split,\
    \ \" \")\n        words_split = split(words_split, \",\")\n        words_split\
    \ = split(words_split, \" \")\n        words_split = split(words_split, \",\"\
    )\n        words_split = split(words_split, \" \")\n        words_split = split(words_split,\
    \ \",\")\n        words_split = split(words_split, \" \")\n        words_split\
    \ = split(words_split, \",\")\n        words_split = split(words_split, \" \"\
    )\n        words_split = split(words_split, \",\")\n        words_split = split(words_split,\
    \ \" \")\n        words_split = split(words_split, \",\")\n        words_split\
    \ = split(words_split, \" \")\n        words_split = split(words_split, \",\"\
    )\n        words_", "    \n    txt = txt.trim()\n    \n    if txt == \"\"\n  \
    \      return txt\n    \n    words = split(txt, \" \")\n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    ", "    \n    txt = txt.trim()\n    \n    if txt\
    \ == \"\"\n        return txt\n    \n    words = split(txt, \" \")\n    \n   \
    \ words_splitted = [split(word, \",\") for word in words]\n    \n    words_splitted\
    \ = [word for sublist in words_splitted for word in sublist]\n    \n    words_splitted\
    \ = [word for word in words_splitted if word != \"\"]\n    \n    words_splitted\
    \ = [word for word in words_splitted if !islower(word)]\n    \n    words_splitted\
    \ = [word for word in words_splitted if !isupper(word)]\n    \n    words_splitted\
    \ = [word for word in words_splitted if !isdigit(word)]\n    \n    words_splitted\
    \ = [word for word in words_splitted if !isspace(word)]\n    \n    words_splitted\
    \ = [word for word in words_splitted if !issymbol(word)]\n    \n    words_splitted\
    \ = [word for word in words_splitted if !isascii(word)]\n    \n    words_splitted\
    \ = [word for word in words_splitted if !iscontrol(word)]\n    \n    words_splitted\
    \ = [word for word in words_splitted if !isascii(word)]\n    \n    words_splitted\
    \ = [word for word in words_splitted if !isascii(word)]\n    \n    words_splitted\
    \ = [word for word in words_splitted if !isascii(word)]\n    \n    words_splitted\
    \ = [word for word in words_splitted if !isascii(word)]\n    \n    words_splitted\
    \ = [word for word in words_splitted if !isascii(word)]\n    \n    words_splitted\
    \ = [word for word in words_splitted if !isascii(word)]\n    \n    words_splitted\
    \ = [word for word in words_splitted if !isascii(word)]\n    \n    words_splitted\
    \ = [word for word in words_splitted if !isascii(word)]\n    \n    words_splitted\
    \ = [word for word in words_splitted if !isascii(word)]\n    \n    words_splitted\
    \ = [word for word in words_splitted if !isascii(word)]\n    \n    words_splitted\
    \ = [word for word in words_splitted if !isascii(word)]\n    \n    words_splitted\
    \ = [word for word in words_splitted if !isascii(word)]\n    \n    words_splitted\
    \ = [word for word in words_splitted if !isascii(word)]\n    \n    words_splitted\
    \ = [word for word in ", "    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    words\
    \ = split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"", "    words = split(txt, \" \")\n    words_split = split(txt,\
    \ \",\")\n    if length(words) == length(words_split)\n        return words\n\
    \    else\n        return words_split\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"Hello world!\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    Hello,world!\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdef\")\n\
    </cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world!\")\n</cell>\n<code\
    \ language=julia-1.5>\nsplit_words(\"Hello,world!\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"abcdef\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello\
    \ world!\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello,world!\"\
    )\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdef\")\n</cell>\n<code\
    \ language=julia-1.5>\nsplit_words(\"Hello world!\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"Hello,world!\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    abcdef\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world!\")\n\
    </cell>\n<code language=julia-1.5>\nsplit_words(\"Hello,world!\")\n</cell>\n<code\
    \ language=julia-1.5>\nsplit_words(\"abcdef\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"Hello world!\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    Hello,world!\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdef\")\n\
    </cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world!\")\n</cell>\n<code\
    \ language=julia-1.5>\nsplit_words(\"Hello,world!\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"abcdef\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello\
    \ world!\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello,world!\"\
    )\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdef\")\n</cell>\n<code\
    \ language=julia-1.5>\nsplit_words(\"Hello world!\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"Hello,world!\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    abcdef\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world", " \
    \   txt = txt.trim()\n    words = split(txt, \" \")\n    words_split = split(txt,\
    \ \",\")\n    if length(words) == length(words_split)\n        return words\n\
    \    else\n        return words_split\n    end\nend\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a dscore=0 |>\n<code>", "    words = split(txt, \" \")\n    words_split\
    \ = Vector{String}(undef, 0)\n    for word in words\n        words_split = words_split\
    \ ++ [word]\n    end\n    return words_split\nend", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    txt = txt.trim()\n    if txt == \"\
    \"\n        return txt\n    else\n        words = split(txt, \" \")\n        words_without_commas\
    \ = words[words != \",\"]\n        words_without_commas = words_without_commas[words_without_commas\
    \ !=\"\"]\n        words_without_commas = words_without_commas[words_without_commas\
    \ !=\"\"]\n        words_without_commas = words_without_commas[words_without_commas\
    \ !=\"\"]\n        words_without_commas = words_without_commas[words_without_commas\
    \ !=\"\"]\n        words_without_commas = words_without_commas[words_without_commas\
    \ !=\"\"]\n        words_without_commas = words_without_commas[words_without_commas\
    \ !=\"\"]\n        words_without_commas = words_without_commas[words_without_commas\
    \ !=\"\"]\n        words_without_commas = words_without_commas[words_without_commas\
    \ !=\"\"]\n        words_without_commas = words_without_commas[words_without_commas\
    \ !=\"\"]\n        words_without_commas = words_without_commas[words_without_commas\
    \ !=\"\"]\n        words_without_commas = words_without_commas[words_without_commas\
    \ !=\"\"]\n        words_without_commas = words_without_commas[words_without_commas\
    \ !=\"\"]\n        words_without_commas = words_without_commas[words_without_commas\
    \ !=\"\"]\n        words_without_commas = words_without_commas[words_without_commas\
    \ !=\"\"]\n        words_without_commas = words_without_commas[words_without_commas\
    \ !=\"\"]\n        words_without_commas = words_without_commas[words_without_commas\
    \ !=\"\"]\n        words_without_commas = words_without_commas[words_without_commas\
    \ !=\"\"]\n        words_without_commas = words_without_commas[words_without_commas\
    \ !=\"\"]\n        words_without_commas = words_without_commas[words_without_commas\
    \ !=\"\"]\n        words_without_commas = words_without_commas[words_without_commas\
    \ !=\"\"]\n        words_without_commas = words_without_commas[words_without_commas\
    \ !=\"\"]\n        words_without_commas = words_without_commas[words_without_commas\
    \ !=\"\"]\n        words_without_commas = words_without_commas[words_without_commas\
    \ !=\"\"]\n        words_without_commas = words_without_commas[words_without_commas\
    \ !=\"\"]\n        words_without_commas = words_without_commas[words_without_commas\
    \ !", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    txt\
    \ = txt.trim()\n    \n    if txt == \"\"\n        return Vector{String}()\n  \
    \  end\n    \n    words = split(txt, \" \")\n    \n    words_no_whitespace = words\n\
    \    \n    words_no_whitespace = filter(x->!isempty(x), words_no_whitespace)\n\
    \    \n    words_no_whitespace = filter(x->!isascii(x), words_no_whitespace)\n\
    \    \n    words_no_whitespace = filter(x->!islowercase(x), words_no_whitespace)\n\
    \    \n    words_no_whitespace = filter(x->!isuppercase(x), words_no_whitespace)\n\
    \    \n    words_no_whitespace = filter(x->!isdigit(x), words_no_whitespace)\n\
    \    \n    words_no_whitespace = filter(x->!isspace(x), words_no_whitespace)\n\
    \    \n    words_no_whitespace = filter(x->!issymbol(x), words_no_whitespace)\n\
    \    \n    words_no_whitespace = filter(x->!isascii(x) && x!=' ', words_no_whitespace)\n\
    \    \n    words_no_whitespace = filter(x->!isascii(x) && x!=',', words_no_whitespace)\n\
    \    \n    words_no_whitespace = filter(x->!isascii(x) && x!='\\n', words_no_whitespace)\n\
    \    \n    words_no_whitespace = filter(x->!isascii(x) && x!='\\r', words_no_whitespace)\n\
    \    \n    words_no_whitespace = filter(x->!isascii(x) && x!='\\t', words_no_whitespace)\n\
    \    \n    words_no_whitespace = filter(x->!isascii(x) && x!='=', words_no_whitespace)\n\
    \    \n    words_no_whitespace = filter(x->!isascii(x) && x!='-', words_no_whitespace)\n\
    \    \n    words_no_whitespace = filter(x->!isascii(x) && x!='/', words_no_whitespace)\n\
    \    \n    words_no_whitespace = filter(x->!isascii(x) && x!='*', words_no_whitespace)\n\
    \    \n    words_no_whitespace = filter(x->!isascii(x) && x!='&', words_no_whitespace)\n\
    \    \n    words_no_whitespace = filter(x->!isascii(x) && x!='|', words_no_whitespace)\n\
    \    \n    words_no_whitespace = filter(x->!isascii(x) && x!='>', words_no_whitespace)\n\
    \    \n    words_no_whitespace = filter(x->!isascii(x) && x!='<', words_no_whitespace)\n\
    \    \n    words_no_whitespace = filter(x->!isascii(x) && x", "    words = split(txt,\
    \ \" \")\n    \n    if length(words) == 0 \n        return words\n    \n    words\
    \ = split(txt, \",\")\n    \n    if length(words) == 0 \n        return words\n\
    \    \n    words = split(txt, \"-\")\n    \n    if length(words) == 0 \n     \
    \   return words\n    \n    words = split(txt, \";\")\n    \n    if length(words)\
    \ == 0 \n        return words\n    \n    words = split(txt, \":\")\n    \n   \
    \ if length(words) == 0 \n        return words\n    \n    words = split(txt, \"\
    /\")\n    \n    if length(words) == 0 \n        return words\n    \n    words\
    \ = split(txt, \"\\\\\")\n    \n    if length(words) == 0 \n        return words\n\
    \    \n    words = split(txt, \"'\")\n    \n    if length(words) == 0 \n     \
    \   return words\n    \n    words = split(txt, \"\\\"\")\n    \n    if length(words)\
    \ == 0 \n        return words\n    \n    words = split(txt, \"?\")\n    \n   \
    \ if length(words) == 0 \n        return words\n    \n    words = split(txt, \"\
    !\")\n    \n    if length(words) == 0 \n        return words\n    \n    words\
    \ = split(txt, \"#\")\n    \n    if length(words) == 0 \n        return words\n\
    \    \n    words = split(txt, \"$\")\n    \n    if length(words) == 0 \n     \
    \   return words\n    \n    words = split(txt, \"%\")\n    \n    if length(words)\
    \ == 0 \n        return words\n    \n    words = split(txt, \"^\")\n    \n   \
    \ if length(words) == 0 \n        return words\n    \n    words = split(txt, \"\
    &\")\n    \n    if length(words) == 0 \n        return words\n    \n    words\
    \ = split(txt, \"*\")\n    \n    if length(words) == 0 \n        return words\n\
    \    \n    words = split(txt, \"(\")\n    \n    if length(words) == 0 \n     \
    \   return words\n    \n    words = split(txt, \")\")\n    \n    if length(words)\
    \ == 0 \n        return words\n    \n    words = split(txt, \"+\")\n    \n   \
    \ if length(words) == 0 \n        return words\n    \n    words = split(txt, \"\
    -\")\n    \n    if length(words) == 0 \n        return words\n    \n    words\
    \ = split(txt, \"=\")\n    \n    if length(words) == 0 \n        return words\n\
    \    \n    words = split(txt, \"<\")\n    \n    if length(words) == 0 \n     \
    \   return words\n    \n    words = split(txt, \">\")\n    \n    if length(words)\
    \ == 0 \n        return words\n    \n    words = split(txt, \"[\")\n    \n   \
    \ if length(words) == 0 \n        return words\n    \n", "    \n    txt = txt.trim()\n\
    \    \n    if txt == \"\"\n        return txt\n    \n    words = split(txt, \"\
    \ \")\n    \n    words_split = split(txt, \",\")\n    \n    words_split2 = split(txt,\
    \ \",\")\n    \n    words_split3 = split(txt, \",\")\n    \n    words_split4 =\
    \ split(txt, \",\")\n    \n    words_split5 = split(txt, \",\")\n    \n    words_split6\
    \ = split(txt, \",\")\n    \n    words_split7 = split(txt, \",\")\n    \n    words_split8\
    \ = split(txt, \",\")\n    \n    words_split9 = split(txt, \",\")\n    \n    words_split10\
    \ = split(txt, \",\")\n    \n    words_split11 = split(txt, \",\")\n    \n   \
    \ words_split12 = split(txt, \",\")\n    \n    words_split13 = split(txt, \",\"\
    )\n    \n    words_split14 = split(txt, \",\")\n    \n    words_split15 = split(txt,\
    \ \",\")\n    \n    words_split16 = split(txt, \",\")\n    \n    words_split17\
    \ = split(txt, \",\")\n    \n    words_split18 = split(txt, \",\")\n    \n   \
    \ words_split19 = split(txt, \",\")\n    \n    words_split20 = split(txt, \",\"\
    )\n    \n    words_split21 = split(txt, \",\")\n    \n    words_split22 = split(txt,\
    \ \",\")\n    \n    words_split23 = split(txt, \",\")\n    \n    words_split24\
    \ = split(txt, \",\")\n    \n    words_split25 = split(txt, \",\")\n    \n   \
    \ words_split26 = split(txt, \",\")\n    \n    words_split27 = split(txt, \",\"\
    )\n    \n    words_split28 = split(txt, \",\")\n    \n    words_split29 = split(txt,\
    \ \",\")\n    \n    words_split30 = split(txt, \",\")\n    \n    words_split31\
    \ = split(txt, \",\")\n    \n    words_split32 = split(txt, \",\")\n    \n   \
    \ words_split33 = split(txt, \",\")\n    \n    words_split34 = split(txt, \",\"\
    )\n    \n    words_split35 = split(txt, \",\")\n    \n    words_split36 = split(txt,\
    \ \",\")\n    \n    words_split37 = split(txt, \",\")\n    \n    words_split38\
    \ = split(txt, \",\")\n    \n", "    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    txt = txt.trim()\n    \n    if txt == \"\"\n      \
    \  return txt\n    \n    words = split(txt, \" \")\n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    ", "    txt = txt.trim()\n    if txt == \"\"\n        return\
    \ txt\n    \n    words = split(txt, \" \")\n    \n    words = [w for w in words\
    \ if w != \"\"]\n    \n    words = [w for w in words if w != \",\"]\n    \n  \
    \  words = [w for w in words if w != \"-\"]\n    \n    words = [w for w in words\
    \ if w != \"_\"]\n    \n    words = [w for w in words if w != \"!\"]\n    \n \
    \   words = [w for w in words if w != \"?\"]\n    \n    words = [w for w in words\
    \ if w != \"-\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n \
    \   words = [w for w in words if w != \"!\"]\n    \n    words = [w for w in words\
    \ if w != \"-\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n \
    \   words = [w for w in words if w != \"!\"]\n    \n    words = [w for w in words\
    \ if w != \"-\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n \
    \   words = [w for w in words if w != \"!\"]\n    \n    words = [w for w in words\
    \ if w != \"-\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n \
    \   words = [w for w in words if w != \"!\"]\n    \n    words = [w for w in words\
    \ if w != \"-\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n \
    \   words = [w for w in words if w != \"!\"]\n    \n    words = [w for w in words\
    \ if w != \"-\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n \
    \   words = [w for w in words if w != \"!\"]\n    \n    words = [w for w in words\
    \ if w != \"-\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n \
    \   words = [w for w in words if w != \"!\"]\n    \n    words = [w for w in words\
    \ if w != \"-\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n \
    \   words = [w for w in words if w != \"!\"]\n    \n    words = [w for w in words\
    \ if w != \"-\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n \
    \   words = [w for ", "    if isempty(txt)\n        return txt\n    else\n   \
    \     words = split(txt, \" \")\n        words_split = Vector{String}(undef, 0)\n\
    \        for word in words\n            if !isempty(word)\n                words_split\
    \ = push!(words_split, word)\n            end\n        end\n        return words_split\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\nsplit_words(\"Hello world!\"\
    )\n</cell>\n<code language=julia-1.0>\nsplit_words(\"Hello,world!\")\n</cell>\n\
    <code language=julia-1.0>\nsplit_words(\"abcdef\")\n</cell>\n<code language=julia-1.0>\n\
    split_words(\"Hello world!\")\n</cell>\n<code language=julia-1.0>\nsplit_words(\"\
    Hello,world!\")\n</cell>\n<code language=julia-1.0>\nsplit_words(\"abcdef\")\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a string and returns the\
    \ number of words in the string. \nExamples\ncount_words(\"Hello world!\") \u279E\
    \ 5\ncount_words(\"Hello,world!\") \u279E 3\ncount_words(\"abcdef\") \u279E 3\n\
    Hint: Use split and length", "    words = split(txt, \" \")\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"", "    \n    words = split(txt)\n\
    \    \n    if length(words) == 0\n        return words\n    \n    words_with_commas\
    \ = words\n    \n    if length(words) == 1 \n        return words\n    \n    words_with_commas\
    \ = words_with_commas[words_with_commas[end] .== \",\"]\n    \n    if length(words_with_commas)\
    \ == 1 \n        return words\n    \n    words_with_commas = words_with_commas[words_with_commas[end]\
    \ .== \".\"]\n    \n    if length(words_with_commas) == 1 \n        return words\n\
    \    \n    words_with_commas = words_with_commas[words_with_commas[end] .== \"\
    !\"]\n    \n    if length(words_with_commas) == 1 \n        return words\n   \
    \ \n    words_with_commas = words_with_commas[words_with_commas[end] .== \"?\"\
    ]\n    \n    if length(words_with_commas) == 1 \n        return words\n    \n\
    \    words_with_commas = words_with_commas[words_with_commas[end] .== \";\"]\n\
    \    \n    if length(words_with_commas) == 1 \n        return words\n    \n  \
    \  words_with_commas = words_with_commas[words_with_commas[end] .== \":\"]\n \
    \   \n    if length(words_with_commas) == 1 \n        return words\n    \n   \
    \ words_with_commas = words_with_commas[words_with_commas[end] .== \";\"]\n  \
    \  \n    if length(words_with_commas) == 1 \n        return words\n    \n    words_with_commas\
    \ = words_with_commas[words_with_commas[end] .== \"?\"]\n    \n    if length(words_with_commas)\
    \ == 1 \n        return words\n    \n    words_with_commas = words_with_commas[words_with_commas[end]\
    \ .== \"!\"]\n    \n    if length(words_with_commas) == 1 \n        return words\n\
    \    \n    words_with_commas = words_with_commas[words_with_commas[end] .== \"\
    .\"]\n    \n    if length(words_with_commas) == 1 \n        return words\n   \
    \ \n    words_with_commas = words_with_commas[words_with_commas[end] .== \",\"\
    ]\n    \n    if length(words_with_commas) == 1 \n        return words\n    \n\
    \    words_with_commas = words_with_commas[words_with_commas[end] .== \":\"]\n\
    \    \n    if length(words_with_commas) == 1 \n        return words\n    \n  \
    \  word", "    \n    words = split(txt, \" \")\n    \n    if length(words) ==\
    \ 0\n        return words\n    \n    if length(words) == 1 \n        return words\n\
    \    \n    if length(words) == 2\n        return words\n    \n    if length(words)\
    \ == 3\n        return words\n    \n    if length(words) == 4\n        return\
    \ words\n    \n    if length(words) == 5\n        return words\n    \n    if length(words)\
    \ == 6\n        return words\n    \n    if length(words) == 7\n        return\
    \ words\n    \n    if length(words) == 8\n        return words\n    \n    if length(words)\
    \ == 9\n        return words\n    \n    if length(words) == 10\n        return\
    \ words\n    \n    if length(words) == 11\n        return words\n    \n    if\
    \ length(words) == 12\n        return words\n    \n    if length(words) == 13\n\
    \        return words\n    \n    if length(words) == 14\n        return words\n\
    \    \n    if length(words) == 15\n        return words\n    \n    if length(words)\
    \ == 16\n        return words\n    \n    if length(words) == 17\n        return\
    \ words\n    \n    if length(words) == 18\n        return words\n    \n    if\
    \ length(words) == 19\n        return words\n    \n    if length(words) == 20\n\
    \        return words\n    \n    if length(words) == 21\n        return words\n\
    \    \n    if length(words) == 22\n        return words\n    \n    if length(words)\
    \ == 23\n        return words\n    \n    if length(words) == 24\n        return\
    \ words\n    \n    if length(words) == 25\n        return words\n    \n    if\
    \ length(words) == 26\n        return words\n    \n    if length(words) == 27\n\
    \        return words\n    \n    if length(words) == 28\n        return words\n\
    \    \n    if length(words) == 29\n        return words\n    \n    if length(words)\
    \ == 30\n        return words\n    \n    if length(words) == 31\n        return\
    \ words\n    \n    if length(words) == 32\n        return words\n    \n    if\
    \ length(words) == 33\n        return words\n    \n    if length(words) == 34\n\
    \        return words\n    \n    if length(words) == 35\n        return words\n\
    \    \n    if length(words) == 36\n        return words\n    \n    if length(words)\
    \ == 37\n        return words\n    \n    if length(words) == 38\n        return\
    \ words\n    \n    if length(words) == 39\n        return words\n    \n    if\
    \ length(words) == 40\n        return words\n    \n    if length(words) == 41\n\
    \        return words\n    \n    if length(words) == 42\n        return words\n\
    \    \n    if length(words) == 43\n        return words\n    \n    if length(words)\
    \ == 44\n        return words\n    \n    if length(words) == 45\n", "    txt =\
    \ txt.trim()\n    if txt == \"\"\n        return txt\n    \n    words = split(txt,\
    \ \" \")\n    \n    words_split = Vector{String}(undef, 0)\n    \n    for word\
    \ in words\n        words_split = words_split ++ split(word, \",\")\n    end\n\
    \    \n    words_split = words_split ++ split(words, \"a\")\n    words_split =\
    \ words_split ++ split(words, \"b\")\n    words_split = words_split ++ split(words,\
    \ \"c\")\n    words_split = words_split ++ split(words, \"d\")\n    words_split\
    \ = words_split ++ split(words, \"e\")\n    words_split = words_split ++ split(words,\
    \ \"f\")\n    words_split = words_split ++ split(words, \"g\")\n    words_split\
    \ = words_split ++ split(words, \"h\")\n    words_split = words_split ++ split(words,\
    \ \"i\")\n    words_split = words_split ++ split(words, \"j\")\n    words_split\
    \ = words_split ++ split(words, \"k\")\n    words_split = words_split ++ split(words,\
    \ \"l\")\n    words_split = words_split ++ split(words, \"m\")\n    words_split\
    \ = words_split ++ split(words, \"n\")\n    words_split = words_split ++ split(words,\
    \ \"o\")\n    words_split = words_split ++ split(words, \"p\")\n    words_split\
    \ = words_split ++ split(words, \"q\")\n    words_split = words_split ++ split(words,\
    \ \"r\")\n    words_split = words_split ++ split(words, \"s\")\n    words_split\
    \ = words_split ++ split(words, \"t\")\n    words_split = words_split ++ split(words,\
    \ \"u\")\n    words_split = words_split ++ split(words, \"v\")\n    words_split\
    \ = words_split ++ split(words, \"w\")\n    words_split = words_split ++ split(words,\
    \ \"x\")\n    words_split = words_split ++ split(words, \"y\")\n    words_split\
    \ = words_split ++ split(words, \"z\")\n    \n    words_split = words_split ++\
    \ split(words, \"A\")\n    words_split = words_split ++ split(words, \"B\")\n\
    \    words_split = words_split ++ split(words, \"C\")\n    words_split = words_split\
    \ ++ split(words, \"D\")\n    words_split = words_split ++ split(words, \"E\"\
    )\n    words_split = words_split ++ split(words, \"F\")\n    words_split = words_split\
    \ ++ split(words, \"G\")\n    words_split = words_split ++ split(words, \"H\"\
    )\n    words_split = words_split ++ split(words, \"I\")\n    words_split = words_split\
    \ ++ split(words, \"J\")\n    words_split = words_split ++ split(words, \"K\"\
    )\n    words_split = words_split ++ split(words, \"L\")\n    ", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    words = split(txt, \" \")\n\
    \    words_no_spaces = filter(x -> !isspace(x), words)\n    words_no_commas =\
    \ filter(x -> !iscomma(x), words_no_spaces)\n    words_no_commas_no_spaces = filter(x\
    \ -> !isspace(x) && !iscomma(x), words_no_commas)\n    words_no_commas_no_spaces_no_commas\
    \ = filter(x -> !isspace(x) && !iscomma(x) && !isspace(x), words_no_commas_no_spaces)\n\
    \    words_no_commas_no_spaces_no_commas_no_spaces = filter(x -> !isspace(x) &&\
    \ !iscomma(x) && !isspace(x) && !iscomma(x), words_no_commas_no_spaces_no_commas)\n\
    \    words_no_commas_no_spaces_no_commas_no_spaces_no_commas = filter(x -> !isspace(x)\
    \ && !iscomma(x) && !isspace(x) && !iscomma(x) && !isspace(x), words_no_commas_no_spaces_no_commas_no_spaces)\n\
    \    words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces = filter(x\
    \ -> !isspace(x) && !iscomma(x) && !isspace(x) && !iscomma(x) && !isspace(x) &&\
    \ !iscomma(x), words_no_commas_no_spaces_no_commas_no_spaces_no_commas)\n    words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas\
    \ = filter(x -> !isspace(x) && !iscomma(x) && !isspace(x) && !iscomma(x) && !isspace(x)\
    \ && !iscomma(x) && !isspace(x) && !iscomma(x), words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas)\n\
    \    words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces\
    \ = filter(x -> !isspace(x) && !iscomma(x) && !isspace(x) && !iscomma(x) && !isspace(x)\
    \ && !iscomma(x) && !isspace(x) && !iscomma(x) && !isspace(x) && !iscomma(x),\
    \ words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces)\n\
    \    words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas\
    \ = filter(x -> !isspace(x) && !iscomma(x) && !isspace(x) && !iscomma(x) && !isspace(x)\
    \ && !iscomma(x) && !isspace(x) && !iscomma(x) && !isspace(x) && !", "    \n \
    \   words = split(txt, \" \")\n    \n    words_split = Vector{String}(undef, 0)\n\
    \    \n    for word in words\n        words_split = words_split ++ split(word,\
    \ \",\")\n    end\n    \n    words_split = words_split ++ [length(words)]\n  \
    \  \n    words_split = words_split .- words_split .% 2\n    \n    words_split\
    \ = words_split .- words_split .% 2\n    \n    words_split = words_split .- words_split\
    \ .% 2\n    \n    words_split = words_split .- words_split .% 2\n    \n    words_split\
    \ = words_split .- words_split .% 2\n    \n    words_split = words_split .- words_split\
    \ .% 2\n    \n    words_split = words_split .- words_split .% 2\n    \n    words_split\
    \ = words_split .- words_split .% 2\n    \n    words_split = words_split .- words_split\
    \ .% 2\n    \n    words_split = words_split .- words_split .% 2\n    \n    words_split\
    \ = words_split .- words_split .% 2\n    \n    words_split = words_split .- words_split\
    \ .% 2\n    \n    words_split = words_split .- words_split .% 2\n    \n    words_split\
    \ = words_split .- words_split .% 2\n    \n    words_split = words_split .- words_split\
    \ .% 2\n    \n    words_split = words_split .- words_split .% 2\n    \n    words_split\
    \ = words_split .- words_split .% 2\n    \n    words_split = words_split .- words_split\
    \ .% 2\n    \n    words_split = words_split .- words_split .% 2\n    \n    words_split\
    \ = words_split .- words_split .% 2\n    \n    words_split = words_split .- words_split\
    \ .% 2\n    \n    words_split = words_split .- words_split .% 2\n    \n    words_split\
    \ = words_split .- words_split .% 2\n    \n    words_split = words_split .- words_split\
    \ .% 2\n    \n    words_split = words_split .- words_split .% 2\n    \n    words_split\
    \ = words_split .- words_split .% 2\n    \n    words_split = words_split .- words_split\
    \ .% 2\n    \n    words_split = words_split .- words_split .% 2\n    \n    words_split\
    \ = words_split .- words_split .% 2\n    \n    words_split = words_split .- words_split\
    \ .% 2\n    \n    words_split = words_split .", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    words = split(txt)\n    \n    if isempty(words)\n\
    \        return words\n    end\n    \n    words_split = split(words)\n    \n \
    \   if length(words_split) == length(words)\n        return words\n    end\n \
    \   \n    if length(words_split) > length(words)\n        return words_split\n\
    \    end\n    \n    if length(words_split) == length(words) + 1\n        return\
    \ words_split\n    end\n    \n    if words_split[1] == \"\"\n        return words\n\
    \    end\n    \n    if words_split[end] == \"\"\n        return words\n    end\n\
    \    \n    if words_split[end] == words_split[1]\n        return words\n    end\n\
    \    \n    if words_split[end] == words_split[end - 1]\n        return words\n\
    \    end\n    \n    if words_split[end] == words_split[end - 2]\n        return\
    \ words\n    end\n    \n    if words_split[end] == words_split[end - 3]\n    \
    \    return words\n    end\n    \n    if words_split[end] == words_split[end -\
    \ 4]\n        return words\n    end\n    \n    if words_split[end] == words_split[end\
    \ - 5]\n        return words\n    end\n    \n    if words_split[end] == words_split[end\
    \ - 6]\n        return words\n    end\n    \n    if words_split[end] == words_split[end\
    \ - 7]\n        return words\n    end\n    \n    if words_split[end] == words_split[end\
    \ - 8]\n        return words\n    end\n    \n    if words_split[end] == words_split[end\
    \ - 9]\n        return words\n    end\n    \n    if words_split[end] == words_split[end\
    \ - 10]\n        return words\n    end\n    \n    if words_split[end] == words_split[end\
    \ - 11]\n        return words\n    end\n    \n    if words_split[end] == words_split[end\
    \ - 12]\n        return words\n    end\n    \n    if words_split[end] == words_split[end\
    \ - 13]\n        return words\n    end\n    \n    if words_split[end] == words_split[end\
    \ - 14]\n        return words\n    end\n    \n    if words_split[end] == words_split[end\
    \ - 15]\n        return words\n    end\n    \n    if words_split[end] == words_split[end\
    \ - 16]\n        return words\n    end\n    \n    if words_split[end] == words_split[end\
    \ - 17]\n        return words\n    end\n    \n    if words_split[end] == words_split[end\
    \ - 18]\n        return words\n    end\n    \n    if words_split[end] == words_split[end\
    \ - 19]\n        return words\n    end\n    \n    if words_split[end] == words_split[end\
    \ - 20]\n        return words\n    end", "    txt = txt.trim()\n    if txt ==\
    \ \"\"\n        return Vector{String}()\n    else\n        words = split(txt,\
    \ \" \")\n        words = [w for w in words if w != \"\"]\n        words = [w\
    \ for w in words if w != \",\"]\n        words = [w for w in words if w != \"\
    .\"]\n        words = [w for w in words if w != \"?\"]\n        words = [w for\
    \ w in words if w != \"!\"]\n        words = [w for w in words if w != \"-\"]\n\
    \        words = [w for w in words if w != \"_\"]\n        words = [w for w in\
    \ words if w != \"&\"]\n        words = [w for w in words if w != \"#\"]\n   \
    \     words = [w for w in words if w != \"$\"]\n        words = [w for w in words\
    \ if w != \"%\"]\n        words = [w for w in words if w != \"^\"]\n        words\
    \ = [w for w in words if w != \"&\"]\n        words = [w for w in words if w !=\
    \ \"*\"]\n        words = [w for w in words if w != \"(\"]\n        words = [w\
    \ for w in words if w != \")\"]\n        words = [w for w in words if w != \"\
    [\"]\n        words = [w for w in words if w != \"]\"]\n        words = [w for\
    \ w in words if w != \"{\"]\n        words = [w for w in words if w != \"}\"]\n\
    \        words = [w for w in words if w != \"|\"]\n        words = [w for w in\
    \ words if w != \"~\"]\n        words = [w for w in words if w != \"`\"]\n   \
    \     words = [w for w in words if w != \"~\"]\n        words = [w for w in words\
    \ if w != \"`\"]\n        words = [w for w in words if w != \"~\"]\n        words\
    \ = [w for w in words if w != \"`\"]\n        words = [w for w in words if w !=\
    \ \"~\"]\n        words = [w for w in words if w != \"`\"]\n        words = [w\
    \ for w in words if w != \"~\"]\n        words = [w for w in words if w != \"\
    `\"]\n        words = [w for w in words if w != \"~\"]\n        words = [w for\
    \ w in words if w != \"`\"]\n        words = [w for w in words if w != \"~\"]\n\
    \        words = [w for w in words if w != \"`\"]\n        words = [w for w in\
    \ words if w != \"~\"]\n        words = [w for w in words if w != \"`\"]\n   \
    \     word", "    words = split(txt, \" \")\n    words_split = split(txt, \",\"\
    )\n    if length(words_split) == length(words)\n        return words_split\n \
    \   else\n        return length(words) - length(words_split)\n    end\nend\n</code>\n\
    <|/ a tags=julia,string |>\n<| a tags=julia,string |>\n<code>", "    txt = txt.trim()\n\
    \    if txt == \"\"\n        return txt\n    \n    words = split(txt, \" \")\n\
    \    \n    words_splitted = Vector{String}(undef, 0)\n    \n    for word in words\n\
    \        words_splitted = words_splitted ++ split(word, \",\")\n    end\n    \n\
    \    words_splitted = words_splitted ++ split(txt, \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(txt, \",\")\n    \n    words_splitted = words_splitted\
    \ ++ split(txt, \" \")\n    \n    words_splitted = words_splitted ++ split(txt,\
    \ \",\")\n    \n    words_splitted = words_splitted ++ split(txt, \" \")\n   \
    \ \n    words_splitted = words_splitted ++ split(txt, \",\")\n    \n    words_splitted\
    \ = words_splitted ++ split(txt, \" \")\n    \n    words_splitted = words_splitted\
    \ ++ split(txt, \",\")\n    \n    words_splitted = words_splitted ++ split(txt,\
    \ \" \")\n    \n    words_splitted = words_splitted ++ split(txt, \",\")\n   \
    \ \n    words_splitted = words_splitted ++ split(txt, \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(txt, \",\")\n    \n    words_splitted = words_splitted\
    \ ++ split(txt, \" \")\n    \n    words_splitted = words_splitted ++ split(txt,\
    \ \",\")\n    \n    words_splitted = words_splitted ++ split(txt, \" \")\n   \
    \ \n    words_splitted = words_splitted ++ split(txt, \",\")\n    \n    words_splitted\
    \ = words_splitted ++ split(txt, \" \")\n    \n    words_splitted = words_splitted\
    \ ++ split(txt, \",\")\n    \n    words_splitted = words_splitted ++ split(txt,\
    \ \" \")\n    \n    words_splitted = words_splitted ++ split(txt, \",\")\n   \
    \ \n    words_splitted = words_splitted ++ split(txt, \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(txt, \",\")\n    \n    words_splitted = words_splitted\
    \ ++ split(txt, \" \")\n    \n    words_splitted = words_splitted ++ split(txt,\
    \ \",\")\n    \n    words_splitted = words_splitted ++ split(txt, \" \")\n   \
    \ \n    words_splitted = words_splitted ++ split(txt, \",\")\n    \n    words_splitted\
    \ = words_splitted ++ split(txt, \" \")\n    \n    words_splitted = words_splitted\
    \ ++ split(txt, \",\")\n    \n    words_splitted = words_splitted ++ split(txt,\
    \ \" \")\n    \n    ", "    txt = txt.trim()\n    if txt == \"\"\n        return\
    \ Vector{String}()\n    \n    words = split(txt, \" \")\n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    "]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
