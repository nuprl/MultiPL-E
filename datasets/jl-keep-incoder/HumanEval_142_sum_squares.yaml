name: HumanEval_142_sum_squares
language: julia
prompt: "\"\"\"\"\n    This function will take a list of integers. For all entries\
  \ in the list, the function shall square the integer entry if its index is a \n\
  \    multiple of 3 and will cube the integer entry if its index is a multiple of\
  \ 4 and not a multiple of 3. The function will not \n    change the entries in the\
  \ list whose indexes are not a multiple of 3 or 4. The function shall then return\
  \ the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output\
  \ should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]\
  \  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
  \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
  \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
  \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
  \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t\
  @test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9,\
  \ -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
  \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
  \ == -1448)\nend\n"
completions: ["    sum = 0\n    for x in lst\n        if mod(x,3) == 0\n         \
    \   sum = sum + x^2\n        elseif mod(x,4) == 0\n            sum = sum + x^3\n\
    \        else\n            sum = sum + x^4\n        end\n    end\n    return sum\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide an answer to the\
    \ question. To critique or request clarification from an author, leave a comment\
    \ below their post. - [From Review](/review/low-quality-posts/29278294)\n<|/ c\
    \ |>\n<| c |>\nI believe it does provide an answer to the question. He asked how\
    \ to write a function which would take a list of integers and return their sum.\
    \ He also asked how to write a function which would take a list of integers and\
    \ return their sum. He also asked how to write a function which would take a list\
    \ of integers and return their sum. He also asked how to write a function which\
    \ would take a list of integers and return their sum. He also asked how to write\
    \ a function which would take a list of integers and return their sum. He also\
    \ asked how to write a function which would take a list of integers and return\
    \ their sum. He also asked how to write a function which would take a list of\
    \ integers and return their sum. He also asked how to write a function which would\
    \ take a list of integers and return their sum. He also asked how to write a function\
    \ which would take a list of integers and return their sum. He also asked how\
    \ to write a function which would take a list of integers and return their sum.\n\
    <|/ c |>\n<| c |>\nHe also asked how to write a function which would take a list\
    \ of integers and return their sum. He also asked how to write a function which\
    \ would take a list of integers and return their sum. He also asked how to write\
    \ a function which would take a list of integers and return their sum. He also\
    \ asked how to write a function which would take a list of integers and return\
    \ their sum. He also asked how to write a function which would take a list of\
    \ integers and return their sum. He also asked how to write a function which would\
    \ take a list of integers and return their sum. He also asked how to write a function\
    \ which would take a list of integers and return their sum. He also asked how\
    \ to write a function which would take a list of integers and return their sum.\
    \ He also asked how to write a function which would take a list of integers and\
    \ return their sum.\n<|/ c |>\n<| c |>\nHe also asked how to write a function\
    \ which would take a list of ", "    \n    sum = 0\n    for i in lst\n       \
    \ if i%3 == 0\n            sum = sum + i^2\n        elseif i%4 == 0\n        \
    \    sum = sum + i^3\n        else\n            sum = sum + i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([-1,-5,2,-1,-5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a list of integers and returns the sum\
    \ of the squares of the integers in the list. \n    \n    Examples:\n    For lst\
    \ = [1,2,3] the output should be 9\n    For lst = []  the output should be 0\n\
    \    For lst = [-1,-5,2,-1,-5]  the output should be -49\n    \"\"\"", "    sum\
    \ = 0\n    for i in lst\n        if i%3 == 0\n            sum+=i^2\n        elseif\
    \ i%4 == 0\n            sum+=i^3\n        else\n            sum+=i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 10\nWrite a function\
    \ that takes a list of integers and returns the sum of the squares of the integers\
    \ in the list. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nExamples:\nFor lst = [1,2,3] the output should be 6\nFor lst = []\
    \  the output should be 0\nFor lst = [-1,-5,2,-1,-5]  the output should be -126\n\
    Hint: You can use the function sum_squares() you defined earlier.", "    \n  \
    \  sum = 0\n    for i in lst\n        if i%3 == 0\n            sum = sum + i*i\n\
    \        elseif i%4 == 0\n            sum = sum + i*i*i\n        else\n      \
    \      sum = sum + i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a vector of integers and returns the sum of the squares\
    \ of the odd entries in the vector. \nThe function shall not change the entries\
    \ in the vector whose indexes are not a multiple of 3. \nThe function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the vector whose indexes are not a multiple of 4. \nThe function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the vector whose indexes are not a multiple of 5 or 6. \nThe function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the vector whose indexes are not a multiple of 7 or 8. \nThe function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the vector whose indexes are not a multiple of 9 or 10. \nThe function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the vector whose indexes are not a multiple of 11 or 12. \nThe function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the vector whose indexes are not a multiple of 13 or 14. \nThe function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the vector whose indexes are not a multiple of 15 or 16. \nThe function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the vector whose indexes are not a multiple of 17 or 18. \nThe function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the vector whose indexes are not a multiple of 19 or 20. \nThe function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the vector whose indexes are not a multiple of 21 or 22. \nThe function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the vector whose indexes are not a multiple of 23. \nThe function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the vector whose indexes are not a multiple of 24. \nThe function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the vector whose indexes are not a multiple of 25. \nThe function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the vector whose indexes are not a multiple of 26. \nThe function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the ", "    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum\
    \ = sum + i*i\n        elseif i%4 == 0\n            sum = sum + i*i*i\n      \
    \  else\n            sum = sum + i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum", "    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum = sum\
    \ + i*i\n        elseif i%4 == 0\n            sum = sum + i*i*i\n        else\n\
    \            sum = sum + i\n        end\n    end\n    return sum\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThe question was about a vectorized solution. Your\
    \ solution does not use vectorization and thus is slower than the other solutions.\n\
    <|/ c |>\n<| c |>\nI agree with you. Vectorization is very important for performance\
    \ and I thought that my solution was a good example for vectorization. Thank you\
    \ for the comment.\n<|/ c |>\n<| a tags=julia,function,for-loop,if-statement |>\n\
    <code>", "    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n       \
    \     sum += i\n        else\n            sum -= i\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([-1,-5,2,-1,-5])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that will take a list of integers and a number k.\
    \ The function will then return a list of integers whose entries are all multiples\
    \ of k. \nFor example if k = 3 and lst = [1,2,3,4,5,6,7,8,9,10] the function should\
    \ return [3,6,9,12].", "    sum = 0\n    for i in lst\n        if i%3 == 0\n \
    \           sum = sum + i*i\n        elseif i%4 == 0\n            sum = sum +\
    \ i*i*i\n        else\n            sum = sum + i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum", "    sum = 0\n    for i in lst\n   \
    \     if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n         \
    \   sum += i*i*i\n        else\n            sum += i\n        end\n    end\n \
    \   return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])", "    \n    sum = 0\n\
    \    for x in lst\n        if x % 3 == 0 || x % 4 == 0\n            sum += x\n\
    \        else\n            sum *= x\n        end\n    end\n    return sum\nend\n\
    </cell>\n<text>\nExercise 7\nWrite a function that takes a list of integers and\
    \ returns the sum of the squares of the integers in the list. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall ",
  "    sum = 0\n    for x in lst\n        if x % 3 == 0 || x % 4 == 0\n          \
    \  sum += x\n        else\n            sum *= x\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n</cell>\n\
    <code language=julia-1.0>\nsum_squares([-1,-5,2,-1,-5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that will take a list of integers and return a list of all\
    \ even numbers. \n    \n    Examples:\n    For lst = [1,2,3,4,5,6,7,8,9,10] the\
    \ output should be [2,4,6,8,10]\n    For lst = [] the output should be []\n  \
    \  \"\"\"", "    \n    sum = 0\n    for i in lst\n        if i%3 == 0\n      \
    \      sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n       \
    \ else\n            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that will take a list of integers and return a list of integers whose\
    \ entries are all positive.", "    sum = 0\n    for i = 1:length(lst)\n      \
    \  if mod(i, 3) == 0\n            sum += lst[i]^2\n        elseif mod(i, 4) ==\
    \ 0\n            sum += lst[i]^3\n        else\n            sum += lst[i]\n  \
    \      end\n    end\n    return sum\nend\n</code>\n<|/ a tags=julia,list |>\n\
    <| a dscore=1 |>\n<code>", "    \n    sum = 0\n    for i = 1:length(lst)\n   \
    \     if mod(i, 3) == 0\n            sum += lst[i]^2\n        elseif mod(i, 4)\
    \ == 0\n            sum += lst[i]^3\n        else\n            sum += lst[i]\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that will take a list of integers and a number k. The function will\
    \ return the sum of the integers in the list whose indexes are a multiple of k.\
    \ \nFor lst = [1,2,3,4,5,6,7,8,9,10] and k = 3 the output should be 15\nFor lst\
    \ = [1,2,3,4,5,6,7,8,9,10] and k = 7 the output should be 45\nFor lst = [1,2,3,4,5,6,7,8,9,10]\
    \ and k = 9 the output should be 90\nFor lst = [1,2,3,4,5,6,7,8,9,10] and k =\
    \ 10 the output should be 100\nFor lst = [1,2,3,4,5,6,7,8,9,10] and k = 11 the\
    \ output should be 110\nFor lst = [1,2,3,4,5,6,7,8,9,10] and k = 12 the output\
    \ should be 120\nFor lst = [1,2,3,4,5,6,7,8,9,10] and k = 13 the output should\
    \ be 130\nFor lst = [1,2,3,4,5,6,7,8,9,10] and k = 14 the output should be 140\n\
    For lst = [1,2,3,4,5,6,7,8,9,10] and k = 15 the output should be 150\nFor lst\
    \ = [1,2,3,4,5,6,7,8,9,10] and k = 16 the output should be 160\nFor lst = [1,2,3,4,5,6,7,8,9,10]\
    \ and k = 17 the output should be 170\nFor lst = [1,2,3,4,5,6,7,8,9,10] and k\
    \ = 18 the output should be 180\nFor lst = [1,2,3,4,5,6,7,8,9,10] and k = 19 the\
    \ output should be 190\nFor lst = [1,2,3,4,5,6,7,8,9,10] and k = 20 the output\
    \ should be 200\nFor lst = [1,2,3,4,5,6,7,8,9,10] and k = 21 the output should\
    \ be 210\nFor lst = [1,2,3,4,5,6,7,8,9,10] and k = 22 the output should be 220\n\
    For lst = [1,2,3,4,5,6,7,8,9,10] and k = 23 the output should be 230\nFor lst\
    \ = [1,2,3,4,5,6,7,8,9,10] and k = 24 the output should be 240\nFor lst = [1,2,3,4,5,6,7,8,9,10]\
    \ and k = 25 the output should be 250\nFor lst = [1,2,3,4,5,6,7,8,9,10] and k\
    \ = 26 the output should be 260\nFor lst = [1,2,3,4,5,6,7,8,9,10] and k = 27 the\
    \ output should be 270\nFor lst = [1,2,3,4,5,6,7,8,9,10] and k = 28 the output\
    \ should be 280\nFor ", "    \n    sum = 0\n    for x in lst\n        if x % 3\
    \ == 0 && x % 4 == 0\n            sum += x\n        elseif x % 3 == 0\n      \
    \      sum += x^2\n        elseif x % 4 == 0\n            sum += x^3\n       \
    \ else\n            sum += x\n        end\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a list of integers and returns\
    \ the number of elements in the list that are greater than or equal to 3.", " \
    \   \n    sum = 0\n    for index in lst\n        if index%3==0 || index%4==0\n\
    \            sum += index^2\n        else\n            sum += index\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a list as input and returns a list with the square of every number in\
    \ the list. \n    \n    Examples:\n    For lst = [1,2,3] the output should be\
    \ [1,4,9]\n    For lst = [-1,-5,2,-1,-5]  the output should be [-1,-5,4,-1,-5]\n\
    \    \"\"\"", "    \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n\
    \            sum += i\n        else\n            sum *= i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n</cell>\n", "    \n\
    \    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum = sum + i^2\n\
    \        elseif i%4 == 0\n            sum = sum + i^3\n        else\n        \
    \    sum = sum + i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that takes a vector of integers and returns a vector\
    \ of integers containing the squares of the integers in the input vector. \n \
    \   \n    Examples:\n    For lst = [1,2,3] the output should be [1,2,3]\n    For\
    \ lst = []  the output should be []\n    For lst = [-1,-5,2,-1,-5]  the output\
    \ should be [-1,-5,4,-1,-5]\n    \"\"\"", "    sum = 0\n    for i in lst\n   \
    \     if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n         \
    \   sum += i*i*i\n        else\n            sum += i\n        end\n    end\n \
    \   return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([-1,-5,2,-1,-5])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that will take a list of integers and return a list\
    \ of all integers whose squares are less than or equal to 100. \n    \n    Examples:\n\
    \    For lst = [1,2,3] the output should be [1,4,9]\n    For lst = []  the output\
    \ should be []\n    For lst = [-1,-5,2,-1,-5]  the output should be [-1,-5,2,-1,-5,-9,-16,-25]\n\
    \    \"\"\"", "    sum = 0\n    for i in lst\n        if i%3 == 0\n          \
    \  sum = sum + i*i\n        elseif i%4 == 0\n            sum = sum + i*i*i\n \
    \       else\n            sum = sum + i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum", "    sum = 0\n    for i in lst\n   \
    \     if i%3==0 || i%4==0\n            sum += i^2\n        else\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=juli", "    \n    sum = 0\n    for i in lst\n        if\
    \ i%3 == 0\n            sum = sum + i^2\n        elseif i%4 == 0\n           \
    \ sum = sum + i^3\n        else\n            sum = sum + i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a list of integers and returns the product of the entries in the list. \n  \
    \  \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst\
    \ = []  the output should be 1\n    For lst = [-1,-5,2,-1,-5]  the output should\
    \ be -36\n    \"\"\"", "    \n    sum = 0\n    for x in lst\n        if x % 3\
    \ == 0 && x % 4 == 0\n            sum += x\n        else\n            sum -= x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a list of integers and returns the sum of the squares\
    \ of the integers in the list. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4.", "    sum = 0\n    for\
    \ i in lst\n        if i%3==0 || i%4==0\n            sum += i\n        else\n\
    \            sum -= i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that will take a list of integers and return a list\
    \ of all integers whose squares are less than or equal to 100. \n    \n    Examples:\n\
    \    For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,2,3,4,5,6,7,8,9,10]\n\
    \    For lst = [-1,-5,2,-1,-5]  the output should be [-1,-5,2,-1,-5]\n    \"\"\
    \"", "    \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum\
    \ = sum + i*i\n        elseif i%4 == 0\n            sum = sum + i*i*i\n      \
    \  else\n            sum = sum + i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>",
  "    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum +=\
    \ i\n        else\n            sum *= i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise 7\nWrite a function that takes a list of integers\
    \ and returns the sum of the integers squared. \nThe function shall not change\
    \ the entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries ", "    sum = 0\n    for i in lst\n        if i%3 == 0\n           \
    \ sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n        else\n\
    \            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([-1,-5,2,-1,-5])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ will take a list of integers and return a list of all positive integers less\
    \ than or equal to the sum of the integers in the list. \n    \n    Examples:\n\
    \    For lst = [1,2,3] the output should be [1,2,3]\n    For lst = [-1,-5,2,-1,-5]\
    \  the output should be [1,2,3,4,5]\n    \"\"\"", "    sum = 0\n    for i in lst\n\
    \        if i%3==0 || i%4==0\n            sum += i\n        else\n           \
    \ sum *= i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=juli", "    sum = 0\n    for i in lst\n        if i%3\
    \ == 0\n            sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n\
    \        else\n            sum += i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])", "    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n\
    \            sum += i*i\n        else\n            sum += i*i*i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a list of integers\
    \ and return a new list with only the even numbers from the original list. \n\
    The function shall not change the original list. \nThe function shall not create\
    \ a new list. \nThe function shall not use any loops. \nThe function shall not\
    \ use any conditional statements. \nThe function shall not use any loops or conditional\
    \ statements. \nThe function shall not use any loops or conditional statements.\
    \ \nThe function shall not use any loops or conditional statements. \nThe function\
    \ shall not use any loops or conditional statements. \nThe function shall not\
    \ use any loops or conditional statements. \nThe function shall not use any loops\
    \ or conditional statements. \nThe function shall not use any loops or conditional\
    \ statements. \nThe function shall not use any loops or conditional statements.\
    \ \nThe function shall not use any loops or conditional statements. \nThe function\
    \ shall not use any loops or conditional statements. \nThe function shall not\
    \ use any loops or conditional statements. \nThe function shall not use any loops\
    \ or conditional statements. \nThe function shall not use any loops or conditional\
    \ statements. \nThe function shall not use any loops or conditional statements.\
    \ \nThe function shall not use any loops or conditional statements. \nThe function\
    \ shall not use any loops or conditional statements. \nThe function shall not\
    \ use any loops or conditional statements. \nThe function shall not use any loops\
    \ or conditional statements. \nThe function shall not use any loops or conditional\
    \ statements. \nThe function shall not use any loops or conditional statements.\
    \ \nThe function shall not use any loops or conditional statements. \nThe function\
    \ shall not use any loops or conditional statements. \nThe function shall not\
    \ use any loops or conditional statements. \nThe function shall not use any loops\
    \ or conditional statements. \nThe function shall not use any loops or conditional\
    \ statements. \nThe function shall not use any loops or conditional statements.\
    \ \nThe function shall not use any loops or conditional statements. \nThe function\
    \ shall not use any loops or conditional statements. \nThe function shall not\
    \ use any loops or conditional statements. \nThe function shall not use any loops\
    \ or conditional ", "    \n    sum = 0\n    for i in lst\n        if i%3==0 ||\
    \ i%4==0\n            sum += i\n        else\n            sum -= i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ will take a list of integers and return a list of all entries that are divisible\
    \ by 3. The function shall not change the entries in the list whose indexes are\
    \ not a multiple of 3. \nThe function shall then return the sum of all entries.\
    \ \nExamples:\nFor lst = [1,2,3] the output should be [3,3]\nFor lst = [-1,-5,2,-1,-5]\
    \  the output should be [-1,-5,2,-1,-5]\nFor lst = [1,2,3,4,5,6,7,8,9,10] the\
    \ output should be [3,7,9]\nFor lst = [-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,",
  "    sum = 0\n    for x in lst\n        if x % 3 == 0\n            sum += x^2\n\
    \        elseif x % 4 == 0\n            sum += x^3\n        else\n           \
    \ sum += x\n        end\n    end\n    return sum\nend\n</code>\n<|/ a tags=julia\
    \ |>\n<| c |>\nThanks for your answer. I am new to Julia and I do not know what\
    \ a vector is. I tried to run your code but I get an error saying \"UndefVarError:\
    \ Vector not defined\". Could you please tell me what a vector is?\n<|/ c |>\n\
    <| c |>\nA vector is a collection of numbers. In Julia a vector is defined as\
    \ `Vector{T}`, where `T` is the type of the elements in the vector. `Vector{Int}`\
    \ is a vector of `Int` elements. `Vector{Float64}` is a vector of `Float64` elements.\
    \ `Vector{String}` is a vector of `String` elements. `Vector{Any}` is a vector\
    \ of `Any` elements. `Vector{Any}` is a vector of `Any` elements. `Vector{Any}`\
    \ is a vector of `Any` elements. `Vector{Any}` is a vector of `Any` elements.\
    \ `Vector{Any}` is a vector of `Any` elements. `Vector{Any}` is a vector of `Any`\
    \ elements. `Vector{Any}` is a vector of `Any` elements. `Vector{Any}` is a vector\
    \ of `Any` elements. `Vector{Any}` is a vector of `Any` elements. `Vector{Any}`\
    \ is a vector of `Any` elements. `Vector{Any}` is a vector of `Any` elements.\
    \ `Vector{Any}` is a vector of `Any` elements. `Vector{Any}` is a vector of `Any`\
    \ elements. `Vector{Any}` is a vector of `Any` elements. `Vector{Any}` is a vector\
    \ of `Any` elements. `Vector{Any}` is a vector of `Any` elements. `Vector{Any}`\
    \ is a vector of `Any` elements. `Vector{Any}` is a vector of `Any` elements.\
    \ `Vector{Any}` is a vector of `Any` elements. `Vector{Any}` is a vector of `Any`\
    \ elements. `Vector{Any}` is a vector of `Any` elements. `Vector{Any}` is a vector\
    \ of `Any` elements. `Vector{Any}` is a vector of `Any` elements. `Vector{Any}`\
    \ is a vector of `Any` elements. `Vector{Any}` is a vector of `Any` elements.\
    \ `Vector{Any}` is a vector of `Any` elements. `Vector{Any}` is a vector of `Any`\
    \ elements. `Vector{", "    \n    sum = 0\n    for x in lst\n        if x % 3\
    \ == 0 && x % 4 == 0\n            sum += x\n        else\n            sum -= x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns the sum of the squares of the odd entries in the vector.\
    \ \nThe function shall not change the entries in the vector whose indexes are\
    \ not a multiple of 3. The function shall then return the sum of all squared odd\
    \ entries in the vector.", "    sum = 0\n    for x in lst\n        if x % 3 ==\
    \ 0 || x % 4 == 0\n            sum += x\n        else\n            sum *= x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a list\
    \ of integers and returns the sum of the squares of the integers in the list.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4.", "    \n    sum = 0\n    for i in lst\n        if i%3==0\
    \ || i%4==0\n            sum += i\n        end\n    end\n    return sum\nend",
  "    \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum = sum\
    \ + i^2\n        elseif i%4 == 0\n            sum = sum + i^3\n        else\n\
    \            sum = sum + i\n        end\n    end\n    return sum\nend", "    sum\
    \ = 0\n    for x in lst\n        if x % 3 == 0 && x % 4 == 0\n            sum\
    \ += x\n        else\n            sum -= x\n        end\n    end\n    return sum\n\
    end", "    \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n    \
    \        sum += i\n        else\n            sum *= i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 7\nWrite a function that takes\
    \ a list of integers and returns the sum of all even numbers in the list.", " \
    \   sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum +=\
    \ i\n        else\n            sum *= i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers\
    \ and returns the product of the entries in the list if they are all positive.\
    \ \nThe function shall not change the entries in the list whose entries are negative.\
    \ \nThe function shall then return the product of the entries. \nThe function\
    \ shall throw an error if the list is empty.", "    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0\n            sum += x * x\n        elseif x % 4 == 0\n\
    \            sum += x * x\n        else\n            sum += x\n        end\n \
    \   end\n    return sum\nend", "    sum = 0\n    for x in lst\n        if x %\
    \ 3 == 0\n            sum += x\n        elseif x % 4 == 0\n            sum +=\
    \ x*x\n        else\n            sum += x*x*x\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 4\nWrite a function that will take a list\
    \ of integers and return a new list where each entry is the sum of the squares\
    \ of the entries in the original list. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be [1,4,9]\n    For lst = []  the output should be []\n  \
    \  For lst = [-1,-5,2,-1,-5]  the output should be [-1,-5,4,-9,25]\n    \"\"\"",
  "    sum = 0\n    for x in lst\n        if x % 3 == 0\n            sum += x * x\n\
    \        elseif x % 4 == 0\n            sum += x * x\n        else\n         \
    \   sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that will take a list of integers and a number k. The function\
    \ shall then remove all entries in the list whose index is less than or equal\
    \ to k. \n    \n    Examples:\n    For lst = [1,2,3,4,5,6,7,8,9,10], k = 3 the\
    \ output should be [4,5,6,7,8,9,10]\n    For lst = [1,2,3,4,5,6,7,8,9,10], k =\
    \ 5 the output should be [1,2,3,4,5,6,7,8,9,10]\n    \"\"\"", "    sum = 0\n \
    \   for i in lst\n        if i%3 == 0\n            sum += i*i\n        elseif\
    \ i%4 == 0\n            sum += i*i*i\n        else\n            sum += i\n   \
    \     end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])",
  "    \n    sum = 0\n    for x in lst\n        if x % 3 == 0\n            sum +=\
    \ x*x\n        elseif x % 4 == 0\n            sum += x*x\n        else\n     \
    \       sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 4\nWrite a function that will take\
    \ a list of integers and a number k. The function will return the sum of the integers\
    \ in the list whose index is less than or equal to k. \n    \n    Examples:\n\
    \    For lst = [1,2,3,4,5,6,7] and k = 3 the output should be 15\n    For lst\
    \ = [1,2,3,4,5,6,7] and k = 7 the output should be 0\n    \"\"\"", "    sum =\
    \ 0\n    for x in lst\n        if x % 3 == 0\n            sum += x^2\n       \
    \ elseif x % 4 == 0\n            sum += x^3\n        else\n            sum +=\
    \ x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 4\n\
    Write a function that will take a list of integers and return a new list where\
    \ all entries are multiplied by 2 except for the entries whose indexes are a multiple\
    \ of 3. \n    \n    Examples:\n    For lst = [1,2,3] the output should be [2,4,6]\n\
    \    For lst = [-1,-5,2,-1,-5]  the output should be [-2,-4,-6,-6,-8]\n    \"\"\
    \"", "    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum+=i^2\n\
    \        elseif i%4 == 0\n            sum+=i^3\n        else\n            sum+=i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<text>\nExercise 3\nWrite a function that will\
    \ take a list of integers and return a list of all entries that are divisible\
    \ by 3. The function shall not change the entries in the list whose indexes are\
    \ not a multiple of 3. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    For lst = [1,2,3] the output should be [1,3]\n  \
    \  For lst = []  the output should be []\n    For lst = [-1,-5,2,-1,-5]  the output\
    \ should be [-1,-5]\n    \"\"\"", "    sum = 0\n    for i in lst\n        if i%3\
    \ == 0\n            sum = sum + i*i\n        elseif i%4 == 0\n            sum\
    \ = sum + i*i*i\n        else\n            sum = sum + i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([-1,-5,2,-1,-5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that will take a list of integers and a number k.\
    \ The function shall then return the number of entries in the list whose index\
    \ is less than or equal to k. \nFor lst = [1,2,3,4,5,6,7,8,9,10] and k = 3 the\
    \ output should be 4\nFor lst = [1,2,3,4,5,6,7,8,9,10] and k = 9 the output should\
    \ be 10\nFor lst = [1,2,3,4,5,6,7,8,9,10] and k = 11 the output should be 0\n\
    For lst = [1,2,3,4,5,6,7,8,9,10] and k = 12 the output should be 0\nFor lst =\
    \ [1,2,3,4,5,6,7,8,9,10] and k = 13 the output should be 0\nFor lst = [1,2,3,4,5,6,7,8,9,10]\
    \ and k = 14 the output should be 0\nFor lst = [1,2,3,4,5,6,7,8,9,10] and k =\
    \ 15 the output should be 0\nFor lst = [1,2,3,4,5,6,7,8,9,10] and k = 16 the output\
    \ should be 0\nFor lst = [1,2,3,4,5,6,7,8,9,10] and k = 17 the output should be\
    \ 0\nFor lst = [1,2,3,4,5,6,7,8,9,10] and k = 18 the output should be 0\nFor lst\
    \ = [1,2,3,4,5,6,7,8,9,10] and k = 19 the output should be 0\nFor lst = [1,2,3,4,5,6,7,8,9,10]\
    \ and k = 20 the output should be 0\nFor lst = [1,2,3,4,5,6,7,8,9,10] and k =\
    \ 21 the output should be 0\nFor lst = [1,2,3,4,5,6,7,8,9,10] and k = 22 the output\
    \ should be 0\nFor lst = [1,2,3,4,5,6,7,8,9,10] and k = 23 the output should be\
    \ 0\nFor lst = [1,2,3,4,5,6,7,8,9,10] and k = 24 the output should be 0\nFor lst\
    \ = [1,2,3,4,5,6,7,8,9,10] and k = 25 the output should be 0\nFor lst = [1,2,3,4,5,6,7,8,9,10]\
    \ and k = 26 the output should be 0\nFor lst = [1,2,3,4,5,6,7,8,9,10] and k =\
    \ 27 the output should be 0\nFor lst = [1,2,3,4,5,6,7,8,9,10] and k = 28 the output\
    \ should be 0\nFor lst", "    \n    sum = 0\n    for i in lst\n        if i%3\
    \ == 0\n            sum = sum + i^2\n        elseif i%4 == 0\n            sum\
    \ = sum + i^3\n        else\n            sum = sum + i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([-1,-5,2,-1,-5])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that will take a list of integers and return a new\
    \ list with only the even numbers from the original list. \nThe function shall\
    \ not change the original list.", "    \n    sum = 0\n    for i in lst\n     \
    \   if i%3 == 0\n            sum = sum + i*i\n        elseif i%4 == 0\n      \
    \      sum = sum + i*i*i\n        else\n            sum = sum + i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>", "    sum = 0\n    for i in lst\n        if\
    \ i%3 == 0\n            sum = sum + i^2\n        elseif i%4 == 0\n           \
    \ sum = sum + i^3\n        else\n            sum = sum + i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a list of integers and returns the sum of the squares of the integers in the\
    \ list. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 9\n\
    \    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the\
    \ output should be -27\n    \"\"\"", "    \n    sum = 0\n    for x in lst\n  \
    \      if x % 3 == 0 || x % 4 == 0\n            sum += x\n        else\n     \
    \       sum *= x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of integers and returns the sum\
    \ of the squares of the integers in the list. \nThe function shall not change\
    \ the entries in the list whose indexes are not a multiple of 3 or 4.", "    \n\
    \    sum = 0\n    for x in lst\n        if x % 3 == 0 && x % 4 == 0\n        \
    \    sum += x\n        else\n            sum += x*x\n        end\n    end\n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n", "    \n\
    \    sum = 0\n    for x in lst\n        if mod(x,3) == 0\n            sum = sum\
    \ + x^2\n        elseif mod(x,4) == 0\n            sum = sum + x^3\n        else\n\
    \            sum = sum + x\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([-1,-5,2,-1,-5])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ will take a list of integers and return a list of all entries that are divisible\
    \ by 3 or 4.", "    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n \
    \           sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([-1,-5,2,-1,-5])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ will take a list of integers and return a list of integers whose entries are\
    \ all positive.", "    \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n\
    \            sum += i\n        end\n    end\n    return sum\nend", "    sum =\
    \ 0\n    for x in lst\n        if mod(x,3) == 0\n            sum = sum + x^2\n\
    \        elseif mod(x,4) == 0\n            sum = sum + x^3\n        else\n   \
    \         sum = sum + x\n        end\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that will take a list of integers and a number\
    \ as input. The function shall then return the sum of the entries in the list\
    \ that \n    are divisible by the number. \n    \n    Examples:\n    For lst =\
    \ [1,2,3,4,5,6,7,8,9,10] the output should be 45\n    For lst = [-1,-5,2,-1,-5]\
    \  the output should be 0\n    \"\"\"", "    \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([", "    sum = 0\n    for x in\
    \ lst\n        if x % 3 == 0\n            sum += x*x\n        elseif x % 4 ==\
    \ 0\n            sum += x*x\n        else\n            sum += x\n        end\n\
    \    end\n    return sum\nend", "    sum = 0\n    for x in lst\n        if x %\
    \ 3 == 0\n            sum += x*x\n        elseif x % 4 == 0\n            sum +=\
    \ x*x*x\n        else\n            sum += x\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([", "    \n    sum = 0\n    for\
    \ i in lst\n        if i%3 == 0\n            sum = sum + i*i\n        elseif i%4\
    \ == 0\n            sum = sum + i*i*i\n        else\n            sum = sum + i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>", "    sum = 0\n    for\
    \ i in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 ==\
    \ 0\n            sum += i*i*i\n        else\n            sum += i\n        end\n\
    \    end\n    return sum\nend\n</code>\n<|/ a tags=julia,list |>\n<| a dscore=0\
    \ |>\n<code>", "    \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n\
    \            sum += i\n        else\n            sum *= i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n", "    \n\
    \    sum = 0\n    for x in lst\n        if x % 3 == 0\n            sum += x*x\n\
    \        elseif x % 4 == 0\n            sum += x*x*x\n        else\n         \
    \   sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squ", "    sum =\
    \ 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum += i\n   \
    \     end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([-1,-5,2,-1,-5])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers and\
    \ returns the sum of the squares of the integers except for those that are multiples\
    \ of 3 or 4.", "    \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n\
    \            sum += i\n        else\n            sum *= i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n", "    sum\
    \ = 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum += i\n \
    \       else\n            sum -= i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=juli", "    sum = 0\n    for i in\
    \ lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])", "    sum = 0\n    for\
    \ i in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 ==\
    \ 0\n            sum += i*i*i\n        else\n            sum += i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.4>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_squares([1,2,3])", "    sum = 0\n    for\
    \ i in lst\n        if i%3==0 || i%4==0\n            sum += i\n        else\n\
    \            sum -= i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of integers and returns the sum\
    \ of the squares of the integers in the list. \nThe function shall not change\
    \ the entries in the list whose indexes are not a multiple of 3 or 4.", "    sum\
    \ = 0\n    for x in lst\n        if x % 3 == 0\n            sum += x^2\n     \
    \   elseif x % 4 == 0\n            sum += x^3\n        else\n            sum +=\
    \ x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a list of integers and returns the number of positive\
    \ integers in the list. \nFor lst = [1,2,3,4,5,6,7,8,9] the output should be 9\n\
    For lst = [-1,-2,-3,-4,-5,-6,-7,-8,-9,-10] the output should be 10\nFor lst =\
    \ [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\
    \ the output should be 100\nFor lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\
    \ the output should be 100\nFor lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58",
  "    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum +=\
    \ i\n        else\n            sum -= i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a list of integers and returns the sum of the\
    \ squares of the integers in the list. The function shall not change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"", "    sum = 0\n  \
    \  for i in lst\n        if i%3==0 || i%4==0\n            sum += i\n        else\n\
    \            sum -= i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a list of integers and returns the sum\
    \ of the squares of the integers in the list. \nThe function shall not change\
    \ the entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not use any looping\
    \ constructs.", "    \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n\
    \            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of integers and returns the sum\
    \ of the squares of the integers in the list. \n    \n    Examples:\n    For lst\
    \ = [1,2,3] the output should be 9\n    For lst = []  the output should be 0\n\
    \    For lst = [-1,-5,2,-1,-5]  the output should be -27\n    \"\"\"", "    sum\
    \ = 0\n    for i in lst\n        if i%3 == 0\n            sum += i*i\n       \
    \ elseif i%4 == 0\n            sum += i*i*i\n        else\n            sum +=\
    \ i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that will take a list of integers and return the sum of all even\
    \ entries in the list. The function shall not change the entries in the list whose\
    \ indexes are not a multiple of 2. \n    \n    Examples:\n    For lst = [1,2,3,4,5,6,7,8,9,10]\
    \ the output should be 21\n    For lst = [-1,-5,2,-1,-5,-4,-3,-2,-1] the output\
    \ should be -23\n    \"\"\"", "    sum = 0\n    for i in lst\n        if i%3 ==\
    \ 0\n            sum = sum + i^2\n        elseif i%4 == 0\n            sum = sum\
    \ + i^3\n        else\n            sum = sum + i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum", "    sum = 0\n    for i in lst\n   \
    \     if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n         \
    \   sum += i*i*i\n        else\n            sum += i\n        end\n    end\n \
    \   return sum\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThanks for your answer!\
    \ I appreciate it. I was wondering if there is a way to do this without using\
    \ loops. I tried to do it with map, but I couldn't get it to work. Do you know\
    \ if there is a way to do this with map?\n<|/ c |>\n<| c |>\nI added a solution\
    \ without loops.\n<|/ c |>\n<| c |>\nThanks again for your help! I appreciate\
    \ it!\n<|/ c |>\n<| a dscore=1 |>\nA solution without loops:\n<code>", "    \n\
    \    sum = 0\n    for i = 1:length(lst)\n        if mod(i, 3) == 0\n         \
    \   sum += lst[i]\n        elseif mod(i, 4) == 0\n            sum += lst[i]\n\
    \        else\n            sum += lst[i]*lst[i]\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-", "    \n    sum = 0\n    for i in lst\n      \
    \  if i%3==0 || i%4==0\n            sum+=i\n        else\n            sum+=i*i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector and returns a new vector where all entries are\
    \ multiplied by 2 except for the entries that are multiples of 3. The function\
    \ shall not change the original vector. \nFor example if the input vector is [1,2,3]\
    \ the output vector should be [2,4,6]\nFor example if the input vector is [1,2,3]\
    \ the output vector should be [2,4,6]\nFor example if the input vector is [1,2,3]\
    \ the output vector should be [2,4,6]\nFor example if the input vector is [1,2,3]\
    \ the output vector should be [2,4,6]\nFor example if the input vector is [1,2,3]\
    \ the output vector should be [2,4,6]\nFor example if the input vector is [1,2,3]\
    \ the output vector should be [2,4,6]\nFor example if the input vector is [1,2,3]\
    \ the output vector should be [2,4,6]\nFor example if the input vector is [1,2,3]\
    \ the output vector should be [2,4,6]\nFor example if the input vector is [1,2,3]\
    \ the output vector should be [2,4,6]\nFor example if the input vector is [1,2,3]\
    \ the output vector should be [2,4,6]\nFor example if the input vector is [1,2,3]\
    \ the output vector should be [2,4,6]\nFor example if the input vector is [1,2,3]\
    \ the output vector should be [2,4,6]\nFor example if the input vector is [1,2,3]\
    \ the output vector should be [2,4,6]\nFor example if the input vector is [1,2,3]\
    \ the output vector should be [2,4,6]\nFor example if the input vector is [1,2,3]\
    \ the output vector should be [2,4,6]\nFor example if the input vector is [1,2,3]\
    \ the output vector should be [2,4,6]\nFor example if the input vector is [1,2,3]\
    \ the output vector should be [2,4,6]\nFor example if the input vector is [1,2,3]\
    \ the output vector should be [2,4,6]\nFor example if the input vector is [1,2,3]\
    \ the output vector should be [2,4,6]\nFor example if the input vector is [1,2,3]\
    \ the output vector should be [2,4,6]\nFor example if the input vector is [1,2,3]\
    \ the output vector should be [2,4,6]\nFor example if the input vector is [1,2,3]\
    \ the output vector should be [2,4,6]\nFor example if the input vector is [1,2,3]\
    \ the output vector should be [2,4,6]\nFor example if the input vector is [1,2,3]\
    \ the output vector should be [", "    sum = 0\n    for x in lst\n        if x\
    \ % 3 == 0\n            sum += x^2\n        elseif x % 4 == 0\n            sum\
    \ += x^3\n        else\n            sum += x\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list of\
    \ integers and returns the sum of the squares of the integers in the list. The\
    \ function shall not change the entries in the list whose indexes are not a multiple\
    \ of 3 or 4.", "    \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n\
    \            sum+=i\n        else\n            sum+=i*i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell", "    sum =\
    \ 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum += i\n   \
    \     else\n            sum *= i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=juli", "    sum = 0\n    for x in\
    \ lst\n        if x % 3 == 0 && x % 4 == 0\n            sum += x\n        else\n\
    \            sum += x * x\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.0>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([-1,-5,2,-1,-5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a list of integers and returns the sum of the squares of the integers\
    \ in the list if the integer is evenly divisible by 3 or by 5 and 0 otherwise.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 5.", "    \n    sum = 0\n    for i in lst\n        if i%3==0\
    \ || i%4==0\n            sum += i\n        else\n            sum *= i\n      \
    \  end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n", "    \n\
    \    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum += i*i\n\
    \        elseif i%4 == 0\n            sum += i*i*i\n        else\n           \
    \ sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that will take a list of integers and will return the number\
    \ of elements in the list that are greater than or equal to 10. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 3 or 4. The function shall then return the number of elements in the list that\
    \ are greater than or equal to 10.", "    \n    sum = 0\n    for i in lst\n  \
    \      if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n        \
    \    sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that will\
    \ take a list of integers and return a new list with only the even numbers from\
    \ the original list. \n    \n    Examples:\n    For lst = [1,2,3,4,5,6,7,8,9,10]\
    \ the output should be [2,4,6,8,10]\n    For lst = [-1,-5,2,-1,-5]  the output\
    \ should be [-1,-5,2]\n    \"\"\"", "    \n    sum = 0\n    for i in lst\n   \
    \     if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n         \
    \   sum += i*i*i\n        else\n            sum += i\n        end\n    end\n \
    \   return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that will take\
    \ a list of integers and a number k. The function shall then return a list of\
    \ all entries in the list whose index is less than or equal to k. \n    \n   \
    \ Examples:\n    For lst = [1,2,3,4,5,6,7,8,9] and k = 3 the output should be\
    \ [3,4,5,6,7,8,9]\n    For lst = [1,2,3,4,5,6,7,8,9] and k = 7 the output should\
    \ be []\n    For lst = [1,2,3,4,5,6,7,8,9] and k = 10 the output should be []\n\
    \    \"\"\"", "    sum = 0\n    for x in lst\n        if x % 3 == 0 && x % 4 ==\
    \ 0\n            sum += x\n        else\n            sum -= x\n        end\n \
    \   end\n    return sum\nend\n</code>\n<|/ a |>\n<| c |>\nThe function should\
    \ return 0 if the list is empty. Your code returns 0 for an empty list.\n<|/ c\
    \ |>\n<| c |>\nThanks for pointing that out. I edited my answer accordingly.\n\
    <|/ c |>\n<| a tags=julia,list |>\n<code>", "    sum = 0\n    for i in lst\n \
    \       if i%3==0 || i%4==0\n            sum += i\n        else\n            sum\
    \ -= i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 4\n\
    Write a function that takes a list of integers and returns the sum of the squares\
    \ of the integers in the list. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4.", "    \n    sum = 0\n\
    \    for i in lst\n        if i%3 == 0\n            sum = sum + i^2\n        elseif\
    \ i%4 == 0\n            sum = sum + i^3\n        else\n            sum = sum +\
    \ i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a list of integers and returns the sum of the squares\
    \ of the integers in the list. \n    \n    Examples:\n    For lst = [1,2,3] the\
    \ output should be 9\n    For lst = []  the output should be 0\n    For lst =\
    \ [-1,-5,2,-1,-5]  the output should be -25\n    \"\"\"", "    sum = 0\n    for\
    \ i in lst\n        if i%3==0 || i%4==0\n            sum += i\n        else\n\
    \            sum -= i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that will take a list of integers and return a list of all even numbers\
    \ in the list. \n    \n    Examples:\n    For lst = [1,2,3,4,5,6,7,8,9,10] the\
    \ output should be [2,4,6,8]\n    For lst = []  the output should be []\n    For\
    \ lst = [-1,-5,2,-1,-5]  the output should be [-1,-5,2,-1,-5]\n    \"\"\"", " \
    \   \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum += i*i\n\
    \        elseif i%4 == 0\n            sum += i*i*i\n        else\n           \
    \ sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([", "  \
    \  sum = 0\n    for x in lst\n        if x % 3 == 0 || x % 4 == 0\n          \
    \  sum += x\n        else\n            sum *= x\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=juli",
  "    \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([-1,-5,2,-1,-5])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers and\
    \ returns the number of integers in the list that are divisible by 3. The function\
    \ shall not change the list passed as argument. \nFor example the function should\
    \ return 2 for the list [1,2,3,4,5,6,7,8,9,10] and the function should return\
    \ 0 for the list [].", "    sum = 0\n    for i in lst\n        if i%3 == 0\n \
    \           sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n  \
    \      else\n            sum += i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a list of integers\
    \ and return a list of all entries that are divisible by 3 or 4.", "    sum =\
    \ 0\n    for i in lst\n        if i%3 == 0\n            sum = sum + i^2\n    \
    \    elseif i%4 == 0\n            sum = sum + i^3\n        else\n            sum\
    \ = sum + i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum", "    sum = 0\n\
    \    for i in lst\n        if i%3 == 0\n            sum += i*i\n        elseif\
    \ i%4 == 0\n            sum += i*i*i\n        else\n            sum += i\n   \
    \     end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])",
  "    \n    sum = 0\n    for x in lst\n        if mod(x,3) == 0\n            sum+=x*x\n\
    \        elseif mod(x,4) == 0\n            sum+=x*x\n        else\n          \
    \  sum+=x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum", "    \n    sum\
    \ = 0\n    for x in lst\n        if x % 3 == 0\n            sum += x^2\n     \
    \   elseif x % 4 == 0\n            sum += x^3\n        else\n            sum +=\
    \ x\n        end\n    end\n    return sum\nend", "    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0\n            sum += x\n        elseif x % 4 == 0\n    \
    \        sum += x\n        else\n            sum += x*x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 10\nWrite a function that will\
    \ take a list of integers and return the sum of the squares of the integers in\
    \ the list. The function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4.", "    sum = 0\n    for i in lst\n        if i%3\
    \ == 0\n            sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n\
    \        else\n            sum += i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<text>\nExercise 10\nWrite a function that takes a list of integers and\
    \ returns the sum of the squares of the integers in the list. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entrie", "    \n    sum = 0\n\
    \    for entry in lst\n        if mod(entry,3) == 0\n            sum = sum + entry*entry\n\
    \        elseif mod(entry,4) == 0\n            sum = sum + entry*entry*entry\n\
    \        else\n            sum = sum + entry\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that will take a list of integers and return a list\
    \ of integers whose entries are all positive.", "    \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum+=i^2\n        elseif i%4 == 0\n\
    \            sum+=i^3\n        else\n            sum+=i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 4\nWrite a function that will\
    \ take a list of integers and return a list of all entries that are divisible\
    \ by 3. The function shall not change the entries in the list whose indexes are\
    \ not a multiple of 3. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    For lst = [1,2,3] the output should be [1,3]\n  \
    \  For lst = []  the output should be []\n    For lst = [-1,-5,2,-1,-5]  the output\
    \ should be [-1,-5,2,-1,-5]\n    \"\"\"", "    \n    sum = 0\n    for i in lst\n\
    \        if i%3==0 || i%4==0\n            sum += i^2\n        else\n         \
    \   sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n", "    \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n\
    \            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([-1,-5,2,-1,-5])\n</cell>\n<text>\nExercise 7: Write a function that\
    \ takes a list of integers and returns the sum of the squares of the integers\
    \ in the list. \n    \n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\n    \"\"\"", "    sum = 0\n    for i in lst\n  \
    \      if i%3==0 || i%4==0\n            sum += i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that will take a list\
    \ of integers and will return the sum of all entries in the list that are a multiple\
    \ of 3. The function shall not change the entries in the list whose indexes are\
    \ not a multiple of 3. \nThe function shall then return the sum of all entries.\
    \ \nExamples:\nFor lst = [1,2,3] the output should be 6\nFor lst = []  the output\
    \ should be 0\nFor lst = [-1,-5,2,-1,-5]  the output should be -126\nHint: Use\
    \ a for loop to iterate through the list.", "    sum = 0\n    for i in lst\n \
    \       if i%3==0 || i%4==0\n            sum += i\n        else\n            sum\
    \ *= i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a vector of integers and returns the sum of the squares\
    \ of the entries in the vector. \nThe function shall not change the entries in\
    \ the vector whose indexes are not a multiple of 3 or 4.", "    \n    sum = 0\n\
    \    for x in lst\n        if x % 3 == 0 && x % 4 == 0\n            sum += x\n\
    \        else\n            sum -= x\n        end\n    end\n    return sum\nend\n\
    </cell>\n<text>\nExercise 10\nWrite a function that will take a list of integers\
    \ and return a list of all entries that are divisible by 3 or 4.", "    \n   \
    \ sum = 0\n    for i in lst\n        if i%3 == 0\n            sum = sum + i^2\n\
    \        elseif i%4 == 0\n            sum = sum + i^3\n        else\n        \
    \    sum = sum + i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>",
  "    \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum = sum\
    \ + i^2\n        elseif i%4 == 0\n            sum = sum + i^3\n        else\n\
    \            sum = sum + i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that will take a list of integers and return\
    \ a new list where all entries are divided by 2 except for the entries whose indexes\
    \ are a multiple of 3 and a multiple of 4. The function shall not change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be [1,3,3]\n    For lst = []  the output should be []\n  \
    \  For lst = [-1,-5,2,-1,-5]  the output should be [-1,-5,2,-3,-5]\n    \"\"\"",
  "    \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum = sum\
    \ + i^2\n        elseif i%4 == 0\n            sum = sum + i^3\n        else\n\
    \            sum = sum + i\n        end\n    end\n    return sum\nend", "    sum\
    \ = 0\n    for i in lst\n        if i%3 == 0\n            sum = sum + i*i\n  \
    \      elseif i%4 == 0\n            sum = sum + i*i*i\n        else\n        \
    \    sum = sum + i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of integers and returns the sum\
    \ of the squares of the integers in the list. \nThe function shall not change\
    \ the entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function ",
  "    \n    sum = 0\n    for index in lst\n        if index % 3 == 0 || index % 4\
    \ == 0\n            sum += index\n        else\n            sum *= index\n   \
    \     end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that will take a list of integers and a number n. The function will\
    \ return the sum of the first n entries of the list. \n    \n    Examples:\n \
    \   For lst = [1,2,3,4,5,6,7,8,9,10] and n = 2 the output should be [3,7]\n  \
    \  For lst = [1,2,3,4,5,6,7,8,9,10] and n = 4 the output should be [15,21,25]\n\
    \    \"\"\"", "    sum = 0\n    for x in lst\n        if x % 3 == 0\n        \
    \    sum += x^2\n        elseif x % 4 == 0\n            sum += x^3\n        else\n\
    \            sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsum_squares(lst)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that will take a list of integers and return a list of all even numbers\
    \ in the list. \nFor example if the input is lst = [1,2,3,4,5,6,7,8,9,10] the\
    \ output should be [2,4,6,8,10]. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 2. \nThe function shall then return\
    \ the sum of all entries. \nFor lst = [-1,-5,2,-1,-5]  the output should be [-2,-4,-6,-8,-10,-6,-4,-2]",
  "    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum += i*i\n  \
    \      elseif i%4 == 0\n            sum += i*i*i\n        else\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 4\n\
    Write a function that takes a list of integers and returns the sum of the squares\
    \ of the integers in the list. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entrie", "    \n    sum = 0\n    for x in lst\n      \
    \  if x % 3 == 0\n            sum += x*x\n        elseif x % 4 == 0\n        \
    \    sum += x*x\n        else\n            sum += x\n        end\n    end\n  \
    \  return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ list of integers and returns the product of the integers in the list. \nFor\
    \ lst = [1,2,3] the output should be 6\nFor lst = []  the output should be 1\n\
    For lst = [-1,-5,2,-1,-5]  the output should be -36", "    sum = 0\n    for x\
    \ in lst\n        if x % 3 == 0 || x % 4 == 0\n            sum += x\n        else\n\
    \            sum *= x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that will take a list of integers and return a list\
    \ of all entries that are divisible by 3 or 4.", "    \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum = sum + i^2\n        elseif i%4\
    \ == 0\n            sum = sum + i^3\n        else\n            sum = sum + i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([-1,-5,2,-1,-5])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the even entries of the vector. \nFor\
    \ example if the input vector is [1,2,3,4,5,6,7,8,9,10] the function should return\
    \ 104.", "    \n    sum = 0\n    for x in lst\n        if x % 3 == 0 && x % 4\
    \ == 0\n            sum += x\n        else\n            sum -= x\n        end\n\
    \    end\n    return sum\nend", "    sum = 0\n    for x in lst\n        if x %\
    \ 3 == 0 && x % 4 == 0\n            sum += x\n        else\n            sum -=\
    \ x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a list of integers and returns the sum of the squares\
    \ of the integers in the list. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the ", "    \n\
    \    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum +=\
    \ i\n        else\n            sum *= i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n", "    sum\
    \ = 0\n    for x in lst\n        if x % 3 == 0 && x % 4 == 0\n            sum\
    \ += x\n        else\n            sum -= x\n        end\n    end\n    return sum\n\
    end\n</code>\n<|/ a tags=julia |>\n<| c |>\nThank you very much for your answer!\
    \ I appreciate it! I understand your code, but I do not understand how it works.\
    \ I do not understand how you use the modulo operator to determine whether a number\
    \ is divisible by 3 or 4.\n<|/ c |>\n<| c |>\nThe modulo operator is basically\
    \ a way to check if a number is divisible by another number. For example, `5 %\
    \ 3` returns `1` because `5` is divisible by `3`. `5 % 4` returns `0` because\
    \ `5` is not divisible by `4`. `5 % 5` returns `0` because `5` is not divisible\
    \ by `5`. `5 % 6` returns `1` because `5` is divisible by `6`.\n<|/ c |>\n<| c\
    \ |>\nThank you very much for your explanation! I understand it now!\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>", "    sum = 0\n    for i in lst\n        if i%3==0 ||\
    \ i%4==0\n            sum += i\n        else\n            sum *= i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([-1,-5,2,-1,-5])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of integers and returns the sum\
    \ of the squares of the integers in the list. The function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4.", "    sum =\
    \ 0\n    for x in lst\n        if x % 3 == 0 && x % 4 == 0\n            sum +=\
    \ x\n        else\n            sum -= x\n        end\n    end\n    return sum\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,function,list |>\n<code>", " \
    \   \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n           \
    \ sum += i\n        else\n            sum *= i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n", "    \n\
    \    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum +=\
    \ i\n        else\n            sum *= i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares([-1,-5,2,-1,-5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a list of integers and returns the sum of the\
    \ squares of the integers in the list. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 9\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -49\n    \"\"\"", "    sum = 0\n   \
    \ for i in lst\n        if i%3==0 || i%4==0\n            sum += i\n        else\n\
    \            sum -= i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=juli", "    sum = 0\n    for i in\
    \ lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])", "    sum = 0\n    for\
    \ i in lst\n        if i%3==0 || i%4==0\n            sum += i\n        else\n\
    \            sum *= i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that will take a list of integers and return the\
    \ sum of the integers squared. \nFor lst = [1,2,3] the output should be 9\nFor\
    \ lst = []  the output should be 0\nFor lst = [-1,-5,2,-1,-5]  the output should\
    \ be -126", "    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum\
    \ = sum + i^2\n        elseif i%4 == 0\n            sum = sum + i^3\n        else\n\
    \            sum = sum + i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([-1,-5,2,-1,-5])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a list of integers and returns the sum of the integers in the list that\
    \ are divisible by 3. The function shall not change the list passed as argument.\
    \ \nThe function shall not change the list passed as argument but shall return\
    \ a new list with the integers divisible by 3 removed.", "    sum = 0\n    for\
    \ index in lst\n        if index%3==0 || index%4==0\n            sum += index^2\n\
    \        else\n            sum += index\n        end\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that will take a list of integers\
    \ and return a list of all entries that are divisible by 3. The function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3. \n\
    The function shall then return the sum of all entries. \nFor lst = [1,2,3] the\
    \ output should be 6\nFor lst = []  the output should be 0\nFor lst = [-1,-5,2,-1,-5]\
    \  the output should be -126", "    \n    sum = 0\n    for x in lst\n        if\
    \ x % 3 == 0 || x % 4 == 0\n            sum += x\n        else\n            sum\
    \ *= x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a list of integers and returns the product of the\
    \ integers in the list. The function shall not change the entries in the list\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ product of all the entries.", "    sum = 0\n    for x in lst\n        if x %\
    \ 3 == 0 || x % 4 == 0\n            sum += x\n        else\n            sum *=\
    \ x\n        end\n    end\n    return sum\nend\n</code>\n<|/ a dscore=1 |>\n<|\
    \ c |>\nThis does not provide an answer to the question. To critique or request\
    \ clarification from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/26827818)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question. He asked how to implement\
    \ a function that will take a list of integers and return their sum. He also asked\
    \ how to implement a function that will take a list of integers and return their\
    \ sum. He also asked how to implement a function that will take a list of integers\
    \ and return their sum. He also asked how to implement a function that will take\
    \ a list of integers and return their sum. He also asked how to implement a function\
    \ that will take a list of integers and return their sum. He also asked how to\
    \ implement a function that will take a list of integers and return their sum.\
    \ He also asked how to implement a function that will take a list of integers\
    \ and return their sum. He also asked how to implement a function that will take\
    \ a list of integers and return their sum.\n<|/ c |>\n<| c |>\nHe also asked how\
    \ to implement a function that will take a list of integers and return their sum.\
    \ He also asked how to implement a function that will take a list of integers\
    \ and return their sum. He also asked how to implement a function that will take\
    \ a list of integers and return their sum. He also asked how to implement a function\
    \ that will take a list of integers and return their sum. He also asked how to\
    \ implement a function that will take a list of integers and return their sum.\
    \ He also asked how to implement a function that will take a list of integers\
    \ and return their sum. He also asked how to implement a function that will take\
    \ a list of integers and return their sum. He also asked how to implement a function\
    \ that will take a list of integers and return their sum.\n<|/ c |>\n<| c |>\n\
    He also asked how to implement a function that will take a list of integers and\
    \ return their sum. He also asked how to implement a function that will take a\
    \ list of integers and return their sum. He also asked how to implement a function\
    \ that will take a list of integers and return their sum. He also asked how to\
    \ implement a function that will take a list of integers and return their sum.\
    \ He also asked how to implement a function that will take a list of integer",
  "    \n    sum = 0\n    for x in lst\n        if x % 3 == 0 && x % 4 == 0\n    \
    \        sum += x\n        elseif x % 3 == 0\n            sum += x * x\n     \
    \   elseif x % 4 == 0\n            sum += x * x * x\n        end\n    end\n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([-1,-5,2,-1,-5])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of integers and returns the sum\
    \ of the squares of the integers in the list. \n    \n    Examples:\n    For lst\
    \ = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n\
    \    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"", "    sum\
    \ = 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum += i\n \
    \       else\n            sum *= i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a list of integers and\
    \ returns the sum of the squares of the integers in the list. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4.", "    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum =\
    \ sum + i^2\n        elseif i%4 == 0\n            sum = sum + i^3\n        else\n\
    \            sum = sum + i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a list of integers and returns\
    \ the sum of the squares of the integers in the list. The function shall not change\
    \ the entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then ", "    sum = 0\n    for x in lst\n        if x % 3 == 0\n      \
    \      sum += x^2\n        elseif x % 4 == 0\n            sum += x^3\n       \
    \ else\n            sum += x\n        end\n    end\n    return sum\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThank you for your answer. I am still a beginner so\
    \ I appreciate your help. I understand that my code was very inefficient and I\
    \ should use vectorization to improve the efficiency of my code. I am still trying\
    \ to figure out how to vectorize my code though.\n<|/ c |>\n<| c |>\nI added a\
    \ solution that uses vectorization\n<|/ c |>\n<| c |>\nThank you so much for your\
    \ help. I really appreciate it. I will try to understand your solution and try\
    \ to apply it to my code.\n<|/ c |>\n<| c |>\nI added a solution that uses vectorization\n\
    <|/ c |>\n<| c |>\nThank you so much for your help. I really appreciate it. I\
    \ will try to understand your solution and try to apply it to my code.\n<|/ c\
    \ |>\n<| a tags=julia,function,for-loop,if-statement |>\nThe function you wrote\
    \ is very inefficient. Try this instead:\n<code>", "    sum = 0\n    for x in\
    \ lst\n        if x % 3 == 0\n            sum += x*x\n        elseif x % 4 ==\
    \ 0\n            sum += x*x\n        else\n            sum += x\n        end\n\
    \    end\n    return sum\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI appreciate\
    \ your help and your time. I am new to Julia and I do not know what a vector is.\
    \ I did some research and found that it is an array in Julia. I am still confused\
    \ on how to implement your solution. Could you please give me an example of how\
    \ I would implement your solution?\n<|/ c |>\n<| c |>\nI added an example to my\
    \ answer. Hope it helps.\n<|/ c |>\n<| c |>\nThank you for your help. I appreciate\
    \ it. I will try this out and let you know how it goes.\n<|/ c |>\n<| c |>\nI\
    \ added an example to my answer. Hope it helps.\n<|/ c |>\n<| c |>\nThank you\
    \ for your help. I appreciate it. I will try this out and let you know how it\
    \ goes.\n<|/ c |>\n<| a tags=julia,function,if-statement |>\n<code>", "    \n\
    \    sum = 0\n    for index in lst \n        if index % 3 == 0 \n            sum\
    \ += index^2\n        else if index % 4 == 0 \n            sum += index^3\n  \
    \      else \n            sum += index\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([-1,-5,2,-1,-5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a list of integers and returns the sum of the squares of the integers\
    \ in the list if the integer is a multiple of 3 or if the integer is a multiple\
    \ of 4. The function shall not change the entries in the list whose indexes are\
    \ not a multiple of 3 or 4.", "    sum = 0\n    for i in lst\n        if i%3 ==\
    \ 0\n            sum = sum + i^2\n        elseif i%4 == 0\n            sum = sum\
    \ + i^3\n        else\n            sum = sum + i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum", "    sum = 0\n    for i in lst\n   \
    \     if i%3==0 || i%4==0\n            sum += i\n        else\n            sum\
    \ -= i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=juli", "    sum = 0\n    for i in lst\n        if i%3\
    \ == 0\n            sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n\
    \        else\n            sum += i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([-1,-5,2,-1,-5])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ will take a list of integers and return the sum of the squares of the integers\
    \ except for the entries whose indexes are a multiple of 3 and a multiple of 4.\
    \ \n    \n    Examples:\n    For lst = [1,2,3] the output should be 9\n    For\
    \ lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -49\n    \"\"\"", "    sum = 0\n    for i in lst\n        if i%3 ==\
    \ 0\n            sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n\
    \        else\n            sum += i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers and\
    \ returns the sum of the squares of the integers in the list. The function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4.", "    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n         \
    \   sum += i\n        else\n            sum *= i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nsum_squares([-1,-5,2,-1,-5])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that will take a list of integers and return a list of all\
    \ integers whose square is less than or equal to 100. \n    \n    Examples:\n\
    \    For lst = [1,2,3] the output should be [1,2,3]\n    For lst = []  the output\
    \ should be []\n    For lst = [-1,-5,2,-1,-5]  the output should be [-5,-10,-15,-20,-25]\n\
    \    \"\"\"", "    sum = 0\n    for x in lst\n        if x % 3 == 0 && x % 4 ==\
    \ 0\n            sum += x\n        else\n            sum -= x\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a list of integers\
    \ and return a list of all integers whose squares are less than or equal to 100.\
    \ \n    \n    Examples:\n    For lst = [1,2,3] the output should be [1,4,9]\n\
    \    For lst = []  the output should be []\n    For lst = [-1,-5,2,-1,-5]  the\
    \ output should be [-1,-5,2,-1,-5]\n    \"\"\"", "    \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum = sum + i^2\n        elseif i%4\
    \ == 0\n            sum = sum + i^3\n        else\n            sum = sum + i\n\
    \        end\n    end\n    return sum\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    This does not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/26859012)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question. He asked how to write\
    \ a function which takes a list of integers and returns their sum, squared, cubed,\
    \ and summed squared where each entry is a multiple of 3 or 4. The function he\
    \ wrote is very similar to the one he already has written.\n<|/ c |>\n<| c |>\n\
    This does not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/26859012)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question. He asked how to write\
    \ a function which takes a list of integers and returns their sum, squared, cubed,\
    \ and summed squared where each entry is a multiple of 3 or 4. The function he\
    \ wrote is very similar to the one he already has written.\n<|/ c |>\n<| c |>\n\
    This does not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/26859012)\n\
    <|/ c |>\n<| a tags=julia,list |>\n<code>", "    sum = 0\n    for i in lst\n \
    \       if i%3==0 || i%4==0\n            sum += i\n        else\n            sum\
    \ -= i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 7:\
    \ Write a function that will take a list of integers and return a list of all\
    \ integers whose squares are less than or equal to 100. \n    \n    Examples:\n\
    \    For lst = [1,2,3] the output should be [1,2,3]\n    For lst = [-1,-5,2,-1,-5]\
    \  the output should be [-1,-5,2,-1,-5]\n    \"\"\"", "    \n    sum = 0\n   \
    \ for i in lst\n        if i%3 == 0\n            sum += i^2\n        elseif i%4\
    \ == 0\n            sum += i*i\n        else\n            sum += i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a list of integers and returns the sum of all even numbers in the list.\
    \ The function shall not change the list entries.", "    sum = 0\n    for x in\
    \ lst\n        if x % 3 == 0 || x % 4 == 0\n            sum += x\n        else\n\
    \            sum *= x\n        end\n    end\n    return sum\nend\n</code>\n<|/\
    \ a tags=julia,list |>\n<| a dscore=2 |>\n<code>", "    \n    sum = 0\n    for\
    \ x in lst\n        if x % 3 == 0\n            sum += x^2\n        elseif x %\
    \ 4 == 0\n            sum += x^3\n        else\n            sum += x\n       \
    \ end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a list of integers and returns the sum of the squares of the entries\
    \ in the list.", "    sum = 0\n    for x in lst\n        if x % 3 == 0 && x %\
    \ 4 == 0\n            sum += x\n        else\n            sum -= x\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers and\
    \ returns the sum of the squares of the integers in the list. \n    \n    Examples:\n\
    \    For lst = [1,2,3] the output should be 9\n    For lst = []  the output should\
    \ be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -27\n    \"\"\"",
  "    \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum+=i\n\
    \        else\n            sum+=i*i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell", "    sum = 0\n    for i in lst\n        if i%3\
    \ == 0\n            sum = sum + i*i\n        elseif i%4 == 0\n            sum\
    \ = sum + i*i*i\n        else\n            sum = sum + i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum", "    \n    sum = 0\n    for i in lst\n\
    \        if i%3==0 || i%4==0\n            sum += i\n        else\n           \
    \ sum *= i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 7: Write a function that will take a list of integers and return the sum of\
    \ the squares of the entries in the list. \n    \n    Examples:\n    For lst =\
    \ [1,2,3] the output should be 9\n    For lst = []  the output should be 0\n \
    \   For lst = [-1,-5,2,-1,-5]  the output should be -25\n    \"\"\"", "    \n\
    \    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum = sum + i*i\n\
    \        elseif i%4 == 0\n            sum = sum + i*i*i\n        else\n      \
    \      sum = sum + i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>",
  "    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum+=i*i\n    \
    \    elseif i%4 == 0\n            sum+=i*i*i\n        else\n            sum+=i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 10\nWrite\
    \ a function that takes a list of integers and returns the product of all the\
    \ entries in the list. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 3 or 4.", "    \n    sum = 0\n    for x\
    \ in lst\n        if x % 3 == 0 && x % 4 == 0\n            sum += x\n        elseif\
    \ x % 3 == 0\n            sum += x\n        elseif x % 4 == 0\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that will take a list of integers and return a list of all entries\
    \ that are divisible by 3. The function shall not change the entries in the list\
    \ whose indexes are not a multiple of 3. \nThe function shall then return the\
    \ sum of all entries. \nFor lst = [1,2,3] the output should be [6,6,6]\nFor lst\
    \ = [-1,-5,2,-1,-5]  the output should be [-1,-5,2,-1,-5,2,-1,-5]\nFor lst = [1,2,3,4,5,6,7,8,9,10]\
    \ the output should be [6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,",
  "    \n    sum = 0\n    for x in lst\n        if x % 3 == 0\n            sum +=\
    \ x^2\n        elseif x % 4 == 0\n            sum += x^3\n        else\n     \
    \       sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squ", "    \n  \
    \  sum = 0\n    for x in lst\n        if x % 3 == 0 && x % 4 == 0\n          \
    \  sum += x\n        else\n            sum *= x\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n", "    sum\
    \ = 0\n    for x in lst\n        if x % 3 == 0 || x % 4 == 0\n            sum\
    \ += x\n        else\n            sum *= x\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares([-1,-5,2,-1,-5])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a list of integers and returns the sum of the\
    \ squares of the integers in the list. \nThe function shall not change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4.", "    sum = 0\n   \
    \ for x in lst\n        if x % 3 == 0 && x % 4 == 0\n            sum += x\n  \
    \      else\n            sum -= x\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([-1,-5,2,-1,-5])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ will take a list of integers and return a new list where each entry is the sum\
    \ of the squares of the entries in the original list. \n    \n    Examples:\n\
    \    For lst = [1,2,3] the output should be [1,4,9]\n    For lst = []  the output\
    \ should be []\n    For lst = [-1,-5,2,-1,-5]  the output should be [-1,-5,4,-1,-5]\n\
    \    \"\"\"", "    \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n\
    \            sum += i\n        else\n            sum *= i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 5\nWrite a function that will\
    \ take a list of integers and return the sum of the squares of the integers in\
    \ the list. The function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries.", "    \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n\
    \            sum += i\n        else\n            sum *= i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([-1,-5,2,-1,-5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that will take a list of integers and return a list\
    \ of all even numbers in the list. \nFor example if the list is [1,2,3,4,5,6,7,8,9]\
    \ the output should be [2,4,6,8]. \nThe function shall not change the entries\
    \ in the list whose indexes are not a multiple of 2 and not a multiple of 4.\n\
    The function shall then return the sum of all entries.", "    \n    sum = 0\n\
    \    for x in lst\n        if mod(x,3) == 0\n            sum = sum + x^2\n   \
    \     elseif mod(x,4) == 0\n            sum = sum + x^3\n        else\n      \
    \      sum = sum + x\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-",
  "    \n    sum = 0\n    for x in lst\n        if x % 3 == 0 || x % 4 == 0\n    \
    \        sum += x\n        else\n            sum *= x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([-1,-5,2,-1,-5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that will take a list of integers and will return\
    \ the sum of the squares of the integers in the list. The function shall not change\
    \ the entries in the list whose indexes are not a multiple of 3 or 4.", "    sum\
    \ = 0\n    for x in lst\n        if mod(x,3)==0 || mod(x,4)==0\n            sum\
    \ += x\n        else\n            sum *= x\n        end\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers\
    \ and returns the sum of the squares of the integers in the list. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 3 or 4. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 3 or 4. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 3 or 4. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 3 or 4. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 3 or 4. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 3 or 4. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 3 or 4. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 3 or 4. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 3 or 4. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 3 or 4. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 3 or 4. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 3 or 4. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 3 or 4. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 3 or 4. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 3 or 4. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 3 or 4. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 3 or 4. The function shall then return the sum of all entries. \nThe function\
    \ shall ", "    \n    sum = 0\n    for i in lst\n        if i%3 == 0\n       \
    \     sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n        else\n\
    \            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that takes a list of integers and returns the sum\
    \ of the squares of the integers in the list. \nThe function shall not change\
    \ the entries in the list whose indexes are not a multiple of 3 or 4.", "    sum\
    \ = 0\n    for i in lst\n        if i%3 == 0\n            sum = sum + i^2\n  \
    \      elseif i%4 == 0\n            sum = sum + i^3\n        else\n          \
    \  sum = sum + i\n        end\n    end\n    return sum\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThank you so much for your answer! I appreciate it!\n<|/ c |>\n\
    <| a |>\n<code>", "    sum = 0\n    for x in lst\n        if x % 3 == 0 && x %\
    \ 4 == 0\n            sum += x\n        elseif x % 3 == 0\n            sum +=\
    \ x * x\n        elseif x % 4 == 0\n            sum += x * x * x\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ will take a list of integers and return a list of integers where the integers\
    \ in the list are squared if they are a multiple of 3 and cubed if they are a\
    \ multiple of 4.", "    \n    sum = 0\n    for index in lst \n        if index%3\
    \ == 0 \n            sum = sum + index^2\n        else \n            sum = sum\
    \ + index^3\n        end\n    end\n    return sum\nend", "    \n    sum = 0\n\
    \    for x in lst\n        if x % 3 == 0 && x % 4 == 0\n            sum += x\n\
    \        else\n            sum -= x\n        end\n    end\n    return sum\nend\n\
    </cell>\n<text>\nExercise 7\nWrite a function that takes a list of integers and\
    \ returns the sum of the squares of the integers in the list. The function shall\
    \ not change the list entries.", "    sum = 0\n    for x in lst\n        if x\
    \ % 3 == 0 && x % 4 == 0\n            sum += x\n        elseif x % 3 == 0\n  \
    \          sum += x * x\n        elseif x % 4 == 0\n            sum += x * x *\
    \ x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list\
    \ of integers and returns the sum of the squares of the integers in the list.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4.", "    \n    sum = 0\n    for i in lst\n        if i%3==0\
    \ || i%4==0\n            sum += i\n        else\n            sum *= i\n      \
    \  end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a list of integers and returns the sum of the squares of the integers\
    \ in the list. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4.", "    \n    sum = 0\n    for i in lst\n     \
    \   if i%3==0 || i%4==0\n            sum += i\n        else\n            sum *=\
    \ i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n", "    \n    sum = 0\n    for i in lst\n        if i%3 == 0\n      \
    \      sum = sum + i^2\n        elseif i%4 == 0\n            sum = sum + i^3\n\
    \        else\n            sum = sum + i\n        end\n    end\n    return sum\n\
    end", "    sum = 0\n    for x in lst\n        if x % 3 == 0\n            sum +=\
    \ x^2\n        elseif x % 4 == 0\n            sum += x^3\n        else\n     \
    \       sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that takes a list of integers and returns the sum\
    \ of the squares of the integers in the list. The function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries.", "    \n    sum = 0\n    for i in\
    \ lst\n        if i%3==0 || i%4==0\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([-1,-5,2,-1,-5])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of integers and returns the product\
    \ of all entries in the list. \nFor lst = [1,2,3] the output should be 6\nFor\
    \ lst = []  the output should be 1\nFor lst = [-1,-5,2,-1,-5]  the output should\
    \ be -36", "    \n    sum = 0\n    for i in lst\n        if i%3 == 0\n       \
    \     sum = sum + i^2\n        elseif i%4 == 0\n            sum = sum + i^3\n\
    \        else\n            sum = sum + i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise 10\nWrite a function that will take a list of integers\
    \ and return the sum of the squares of the integers. \n    \n    Examples:\n \
    \   For lst = [1,2,3] the output should be 9\n    For lst = []  the output should\
    \ be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -49\n    \"\"\"",
  "    \n    sum = 0\n    for i = 1:length(lst)\n        if mod(i, 3) == 0\n     \
    \       sum += lst[i]\n        elseif mod(i, 4) == 0\n            sum += lst[i]\n\
    \        else\n            sum += lst[i]*lst[i]\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a list of\
    \ integers and returns the sum of the squares of the integers in the list. \n\
    \    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst\
    \ = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should\
    \ be -126\n    \"\"\"", "    sum = 0\n    for x in lst\n        if x % 3 == 0\
    \ && x % 4 == 0\n            sum += x\n        elseif x % 3 == 0\n           \
    \ sum += x * x\n        elseif x % 4 == 0\n            sum += x * x * x\n    \
    \    end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 4\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector. \nThe function\
    \ shall not change the entries in the vector whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the vector whose indexes are a multiple of 3\
    \ or 4. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the vector whose indexes are a multiple of 3\
    \ or 4 and a multiple of 5. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the vector whose indexes are\
    \ a multiple of 3 or 4 and a multiple of 5 and a multiple of 7. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the vector whose indexes are a multiple of 3 or 4 and a multiple of 5 and\
    \ a multiple of 7 and a multiple of 11. The function shall then return the sum\
    \ of all entries. \nThe function shall not change the entries in the vector whose\
    \ indexes are a multiple of 3 or 4 and a multiple of 5 and a multiple of 7 and\
    \ a multiple of 11 and a multiple of 13. The function shall then return the sum\
    \ of all entries. \nThe function shall not change the entries in the vector whose\
    \ indexes are a multiple of 3 or 4 and a multiple of 5 and a multiple of 7 and\
    \ a multiple of 11 and a multiple of 13 and a multiple of 15. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the vector whose indexes are a multiple of 3 or 4 and a multiple of 5 and\
    \ a multiple of 7 and a multiple of 11 and a multiple of 13 and a multiple of\
    \ 15 and a multiple of 17. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the vector whose indexes are\
    \ a multiple of 3 or 4 and a multiple of 5 and a multiple of 7 and a multiple\
    \ of 11 and a multiple of 13 and a multiple of 15 and a multiple of 17 and a multiple\
    \ of 19. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the vector whose indexes are a multiple of 3\
    \ or 4 and a multiple of 5 and a multiple of 7 and a multiple of 11 and a multiple\
    \ of 13 and a multiple of 15 and a multiple of 17 and a multiple of 19 and a multiple\
    \ of 21. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the ", "    sum = 0\n    for i in lst\n    \
    \    if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n          \
    \  sum += i*i*i\n        else\n            sum += i\n        end\n    end\n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a list of integers and returns\
    \ the sum of the squares of the integers in the list. \n    \n    Examples:\n\
    \    For lst = [1,2,3] the output should be 9\n    For lst = []  the output should\
    \ be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -49\n    \"\"\"",
  "    \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum = sum\
    \ + i*i\n        elseif i%4 == 0\n            sum = sum + i*i*i\n        else\n\
    \            sum = sum + i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>",
  "    sum = 0\n    for x in lst\n        if x % 3 == 0 || x % 4 == 0\n          \
    \  sum += x\n        else\n            sum -= x\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes a list of\
    \ integers and returns the sum of the squares of the integers in the list. \n\
    The function shall not change the entries in the list whose indexes are not a\
    \ multiple of 3 or 4.", "    sum = 0\n    for x in lst\n        if x % 3 == 0\n\
    \            sum += x^2\n        elseif x % 4 == 0\n            sum += x^3\n \
    \       else\n            sum += x\n        end\n    end\n    return sum\nend\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for the answer. I'm sorry I didn't\
    \ specify this in the question, but I'm looking for a solution that does not use\
    \ loops. I edited the question to reflect this.\n<|/ c |>\n<| c |>\nI edited my\
    \ answer to include a solution that does not use loops.\n<|/ c |>\n<| a dscore=1\
    \ |>\nThe function can be written as\n<code>", "    \n    sum = 0\n    for i in\
    \ lst\n        if i%3==0 || i%4==0\n            sum += i\n        else\n     \
    \       sum -= i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n", "    sum = 0\n    for x in lst\n        if x % 3 == 0\n          \
    \  sum += x^2\n        elseif x % 4 == 0\n            sum += x^3\n        else\n\
    \            sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.4>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_squares([-1,-5,2,-1,-5])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a list of integers and returns the sum of the squares of the integers\
    \ in the list. \n    \n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\n    \"\"\"", "    sum = 0\n    for x in lst\n  \
    \      if x % 3 == 0\n            sum += x*x\n        elseif x % 4 == 0\n    \
    \        sum += x*x\n        else\n            sum += x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a list of integers and returns the sum of the squares of the integers in the\
    \ list. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4.", "    \n    sum = 0\n    for x in lst\n     \
    \   if mod(x,3) == 0\n            sum+=x^2\n        elseif mod(x,4) == 0\n   \
    \         sum+=x^3\n        else\n            sum+=x\n        end\n    end\n \
    \   return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that will take\
    \ a list of integers and return a new list where each entry is the sum of the\
    \ integers in the original list except for those entries whose index is divisible\
    \ by 3. The function shall not change the original list.", "    sum = 0\n    for\
    \ x in lst\n        if x % 3 == 0\n            sum += x*x\n        elseif x %\
    \ 4 == 0\n            sum += x*x\n        else\n            sum += x\n       \
    \ end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,", "    \n    sum = 0\n \
    \   for i in lst\n        if i%3 == 0\n            sum += i*i\n        elseif\
    \ i%4 == 0\n            sum += i*i*i\n        else\n            sum += i\n   \
    \     end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that will take a list of integers and will return the number of integers\
    \ in the list that are divisible by 3. The function shall not change the entries\
    \ in the list whose indexes are not a multiple of 3. \nThe function shall then\
    \ return the number of integers in the list that are divisible by 3.", "    sum\
    \ = 0\n    for i in lst\n        if i%3 == 0\n            sum = sum + i^2\n  \
    \      elseif i%4 == 0\n            sum = sum + i^3\n        else\n          \
    \  sum = sum + i\n        end\n    end\n    return sum\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>", "    sum = 0\n    for x in lst\n        if x\
    \ % 3 == 0\n            sum += x*x\n        elseif x % 4 == 0\n            sum\
    \ += x*x\n        else\n            sum += x\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list of\
    \ integers and returns the sum of the squares of the integers in the list. \n\
    The function shall not change the entries in the list whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the sum of all entries. \n\
    The function shall not change the entries in the list whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the sum of all entries. \n\
    The function shall not change the entries in the list whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the sum of all entries. \n\
    The function shall not change the entries in the list whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the sum of all entries. \n\
    The function shall not change the entries in the list whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the sum of all entries. \n\
    The function shall not change the entries in the list whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the sum of all entries. \n\
    The function shall not change the entries in the list whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the sum of all entries. \n\
    The function shall not change the entries in the list whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the sum of all entries. \n\
    The function shall not change the entries in the list whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the sum of all entries. \n\
    The function shall not change the entries in the list whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the sum of all entries. \n\
    The function shall not change the entries in the list whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the sum of all entries. \n\
    The function shall not change the entries in the list whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the sum of all entries. \n\
    The function shall not change the entries in the list whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the sum of all entries. \n\
    The function shall not change the entries in the list whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the sum of all entries. \n\
    The function shall not change the entries in the list whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the sum of all entries. \n\
    The function shall not change the entries in the list whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the sum of all entries. \n\
    The function shall not change the entries in the list whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the sum of all ", "    \n\
    \    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum = sum + i*i\n\
    \        elseif i%4 == 0\n            sum = sum + i*i*i\n        else\n      \
    \      sum = sum + i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that will take a list of integers and return the\
    \ sum of the squares of the integers in the list. \n    \n    Examples:\n    For\
    \ lst = [1,2,3] the output should be 9\n    For lst = []  the output should be\
    \ 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -25\n    \"\"\"", " \
    \   \n    sum = 0\n    for x in lst\n        if x % 3 == 0 && x % 4 == 0\n   \
    \         sum += x\n        else\n            sum -= x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that will\
    \ take a list of integers and return a list of all entries that are a multiple\
    \ of 3. The function shall not change the entries in the list whose indexes are\
    \ not a multiple of 3. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3. The function shall then return the sum of all entries. \nThe\
    \ function shall not change the entries in the list whose indexes are not a multiple\
    \ of 3. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 3. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the list whose indexes are not a multiple of 3. The function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 3. The function shall then return the sum\
    \ of all entries. \nThe function shall not change the entries in the list whose\
    \ indexes are not a multiple of 3. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3. The function shall then return the sum of all entries. \nThe\
    \ function shall not change the entries in the list whose indexes are not a multiple\
    \ of 3. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 3. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the list whose indexes are not a multiple of 3. The function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of ", "    sum = 0\n    for x in lst\n    \
    \    if x % 3 == 0 || x % 4 == 0\n            sum += x\n        else\n       \
    \     sum *= x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a list of integers and returns the sum of all\
    \ even numbers in the list. \nFor lst = [1,2,3,4,5,6,7,8,9,10] the output should\
    \ be 45\nFor lst = [-1,-5,2,-1,-5]  the output should be -126\nFor lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\
    \ the output should be 44\nFor lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\
    \ the output should be 44\nFor lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\
    \ the output should be 44\nFor lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,5",
  "    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum += i*i\n  \
    \      elseif i%4 == 0\n            sum += i*i*i\n        else\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 4\n\
    Write a function that will take a list of integers and a number k and will return\
    \ the number of entries in the list whose index is divisible by k. \n    \n  \
    \  Examples:\n    For lst = [1,2,3,4,5,6,7,8,9,10] the output should be 4\n  \
    \  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be 4\n    For lst = [1,2,3,4,5,6,7,8,9,10]\
    \ the output should be 4\n    \"\"\"", "    sum = 0\n    for x in lst\n      \
    \  if x % 3 == 0 || x % 4 == 0\n            sum += x\n        else\n         \
    \   sum *= x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([-1,-5,2,-1,-5])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers and\
    \ returns the sum of the squares of the integers in the list. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4.", "    sum = 0\n    for x in lst\n        if x % 3 == 0 && x % 4 == 0\n \
    \           sum += x\n        elseif x % 3 == 0\n            sum += x * x\n  \
    \      elseif x % 4 == 0\n            sum += x * x * x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([-1,-5,2,-1,-5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns the sum\
    \ of the squares of the integers in the vector. \nThe function shall not change\
    \ the entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose values are negative.", "    \n    sum = 0\n    for\
    \ i in lst\n        if i%3 == 0\n            sum = sum + i^2\n        elseif i%4\
    \ == 0\n            sum = sum + i^3\n        else\n            sum = sum + i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>", "    \n    sum = 0\n\
    \    for x in lst\n        if x % 3 == 0 && x % 4 == 0\n            sum += x\n\
    \        else\n            sum += x * x\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares([-1,-5,2,-1,-5])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a list of integers and returns the sum of all\
    \ even numbers in the list. \n    \n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 4\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]\
    \  the output should be -2\n    \"\"\"", "    \n    sum = 0\n    for i in lst\n\
    \        if i%3==0 || i%4==0\n            sum += i\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([-1,-5,2,-1,-5])\n</cell>\n<text>\n\
    Exercise 3.2\nWrite a function that takes a list of integers and returns the sum\
    \ of the squares of the integers in the list. \nThe function shall not change\
    \ the entries in the list whose indexes are not a multiple of 3 or 4."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
