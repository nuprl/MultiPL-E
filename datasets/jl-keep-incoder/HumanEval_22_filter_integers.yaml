name: HumanEval_22_filter_integers
language: julia
prompt: "\"\"\" Filter given list of any python values only for integers\n    >>>\
  \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc',\
  \ {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
  \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"])\
  \ == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
  end\n"
completions: ["    values = filter(values, x -> isa(x, Int64))\n    return values\n\
    end", "    values = filter(values, x -> isa(x, Int64))\n    return values\nend",
  "    values = filter(values, x -> isa(x, Int64))\n    return values\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\n\
    Filter out any python values that are not integers\nThe function below filters\
    \ out any python values that are not integers", "    values = filter(values, x\
    \ -> isa(x, Int64))\n    return values\nend", "    filter(values, x -> isa(x,\
    \ Int64))\nend\n</cell>\n<text>\nfilter!\nfilter! modifies the given list in-place\
    \ and returns the modified list. \nIt also returns nothing (nothing!) if the given\
    \ list is empty.", "    values = filter(values, x -> isa(x, Int64))\n    values\
    \ = filter(values, x -> x != 0)\n    return values\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given list of any python\
    \ values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n\
    \    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\
    \"", "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> x != 0)\n    return values\nend", "    values = filter(values, x -> isa(x,\
    \ Int64))\n    return values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter given list of any python values only for\
    \ integers\nFilter given list of any python values only for integers\nFilter given\
    \ list of any python values only for integers\nFilter given list of any python\
    \ values only for integers\nFilter given list of any python values only for integers\n\
    Filter given list of any python values only for integers\nFilter given list of\
    \ any python values only for integers\nFilter given list of any python values\
    \ only for integers\nFilter given list of any python values only for integers\n\
    Filter given list of any python values only for integers\nFilter given list of\
    \ any python values only for integers\nFilter given list of any python values\
    \ only for integers\nFilter given list of any python values only for integers\n\
    Filter given list of any python values only for integers\nFilter given list of\
    \ any python values only for integers\nFilter given list of any python values\
    \ only for integers\nFilter given list of any python values only for integers\n\
    Filter given list of any python values only for integers\nFilter given list of\
    \ any python values only for integers\nFilter given list of any python values\
    \ only for integers\nFilter given list of any python values only for integers\n\
    Filter given list of any python values only for integers\nFilter given list of\
    \ any python values only for integers\nFilter given list of any python values\
    \ only for integers\nFilter given list of any python values only for integers\n\
    Filter given list of any python values only for integers\nFilter given list of\
    \ any python values only for integers\nFilter given list of any python values\
    \ only for integers\nFilter given list of any python values only for integers\n\
    Filter given list of any python values only for integers\nFilter given list of\
    \ any python values only for integers\nFilter given list of any python values\
    \ only for integers\nFilter given list of any python values only for integers\n\
    Filter given list of any python values only for integers\nFilter given list of\
    \ any python values only for integers\nFilter given list of any python values\
    \ only for integers\nFilter given list of any python values only for integers\n\
    Filter given list of any python values only for integers\nFilter given list of\
    \ any python values only for integers\nFilter given list of any python values\
    \ only for integers\nFilter given list of any python values only for integers\n\
    Filter given list of any python values only for integers\nFilter given list of\
    \ any python values only for integers\nFilter given list of any python values\
    \ only for integers\nFilter given list of any python values only for integers\n\
    Filter given list of any python values only for integers\nFilter given list of\
    \ any python values only for integer", "    values = filter(values, x -> isa(x,\
    \ Int64))\n    values = filter(values, x -> !isa(x, Int64))\n    return values\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter given list of any python values only for floats\n>>> filter_floats(['a',\
    \ 3.14, 5])\n    [3.14, 5]\n>>> filter_floats([1, 2, 3, 'abc', {}, []])\n    [1.0,\
    \ 2.0, 3.0, 3.0, 4.0, 5.0]\n\"\"\"", "    filter(values, x -> isa(x, Int64))\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter given list of any python values only for floats\n    >>> filter_floats(['a',\
    \ 3.14, 5])\n    [3.14, 5]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n\
    \    [1.0, 2.0, 3.0]\n    \"\"\"", "    values = filter(values, x -> isa(x, Int64))\n\
    \    values = filter(values, x -> x == x)\n    return values\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter\
    \ out all strings from given list of any python values", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> x != 0)\n    return values\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter out any python values that are not integers\nThe function filter_integers\
    \ above filters out any python values that are not integers. We can also filter\
    \ out any python values that are not integers by using the function filter_integers.",
  "    values = filter(values, x -> isa(x, Int64))\n    return values\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\n\
    Filter out all strings from given list of any python values", "    filter(values,\
    \ x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter given list of any python values only for\
    \ floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1,\
    \ 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> x == x)\n    return values\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_integers([1, 2, 3, 'abc', {},\
    \ []])\n</cell>\n<text>\nFilter given list of any python values only for floats\n\
    \    >>> filter_floats(['a', 3.14, 5])\n    [3.14, 5]\n    >>> filter_floats([1,\
    \ 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> !isa(x, Int64))\n    return\
    \ values\nend", "    values = filter(values, x -> isa(x, Int64))\n    values =\
    \ filter(values, x -> !isa(x, Int64))\n    return values\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_integers([1, 2, 3, 'abc', {}, []])\n</cell>\n<text>\n\
    Filter out any python values which are not integers\nThe function below filters\
    \ out any python values which are not integers", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    return values\nend\n</cell>\n<code language=julia-1.5>",
  "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values, x\
    \ -> x != 0)\n    return values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter out all strings from given list", "  \
    \  values = filter(values, x -> isa(x, Int64))\n    values = filter(values, x\
    \ -> isa(x, Int))\n    return values\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([1, 2, 3, 'abc', {}, []])\n</cell>\n<text>\nFilter out strings\
    \ and booleans", "    values = filter(values, x -> isa(x, Int64))\n    values\
    \ = filter(values, x -> !isa(x, Int64))\n    return values\nend", "    values\
    \ = filter(values, x -> isa(x, Int64))\n    return values\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter\
    \ given list of any python values only for floats\n    >>> filter_floats(['a',\
    \ 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n   \
    \ [1.0, 2.0, 3.0]\n    \"\"\"", "    values = filter(values, x -> isa(x, Int64))\n\
    \    values = filter(values, x -> x == x)\n    return values\nend", "    values\
    \ = filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> !isa(x,\
    \ Int64))\n    return values\nend\n</cell>\n<code language=julia-1.3>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter out all strings from given list", "  \
    \  values = filter(values, x -> isa(x, Int64))\n    values = filter(values, x\
    \ -> isa(x, Int))\n    return values\nend", "    values = filter(values, x ->\
    \ isa(x, Int64))\n    values = filter(values, x -> isa(x, Int))\n    return values\n\
    end", "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> !isa(x, Int64))\n    return values\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out all non-integer\
    \ values", "    values = filter(values, x -> isa(x, Int64))\n    return values\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter given list of any python values only for floats\n>>> filter_floats(['a',\
    \ 3.14, 5])\n    [3.14]\n>>> filter_floats([1, 2, 3, 'abc', {}, []])\n    [1.0,\
    \ 2.0, 3.0]\n\"\"\"", "    values = filter(values, x -> isa(x, Int64))\n    values\
    \ = filter(values, x -> isa(x, Int))\n    return values\nend", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> x != 0)\n    return values\n\
    end", "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> x != 0)\n    return values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter given list of any python values only for\
    \ floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14, 5]\n    >>> filter_floats([1,\
    \ 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0, 3.0, 4.0]\n    \"\"\"", "    values\
    \ = filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> !isa(x,\
    \ Int64))\n    return values\nend", "    values = filter(values, x -> isa(x, Int64))\n\
    \    values = filter(values, x -> x != 0)\n    return values\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter\
    \ out all strings from given list of any python values", "    filter(values, x\
    \ -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter out any python values which are not integers\n\
    The function filter(values, predicate) will filter out any values which do not\
    \ satisfy the predicate predicate.", "    values = filter(values, x -> isa(x,\
    \ Int64))\n    values = filter(values, x -> !isa(x, Int64))\n    return values\n\
    end", "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> !isa(x, Int64))\n    return values\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given list of any python\
    \ values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14, 5]\n\
    \    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\
    \"", "    values = filter(values, x -> isa(x, Int64))\n    return values\nend",
  "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values, x\
    \ -> x != 0)\n    return values\nend\n</cell>\n<code language=julia-1.4>\nfilter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n</cell>\n<text>\nFilter out any python values that are\
    \ not integers\nWe will filter out any python values that are not integers", " \
    \   filter(values, x -> isa(x, Int64))\nend\n</cell>\n<text>\nFiltering out all\
    \ non-integers\nWe will now filter out all non-integers from our list of integers.\
    \ We will use filter_integers to filter out any non-integers from our list of\
    \ integers. We will then use map to apply the filter_integers function to our\
    \ list of integers. We will then use flatten to flatten the list of integers into\
    \ a single vector.", "    values = filter(values, x -> isa(x, Int64))\n    return\
    \ values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14,\
    \ 5])\n</cell>\n<text>\nFilter out all strings from a list of strings", "    values\
    \ = filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> x ==\
    \ x)\n    return values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter given list of any python values only for\
    \ floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1,\
    \ 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    return values\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given list of any python\
    \ values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n\
    \    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"",
  "    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out any python values\
    \ that are not integers\nThe function below filters out any python values that\
    \ are not integers", "    values = filter(values, x -> isa(x, Int64))\n    values\
    \ = filter(values, x -> x != 0)\n    return values\nend", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> isa(x, Int))\n    return\
    \ values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14,\
    \ 5])\n</cell>\n<text>\nFilter out any python values which are not integers\n\
    The function below filters out any python values which are not integers", "  \
    \  \n    filter_integers = filter(x -> isa(x, Int64), values)\n    \n    return\
    \ filter_integers\nend", "    values = filter(values, x -> isa(x, Int64))\n  \
    \  return values\nend", "    filter(values, x -> isa(x, Int64))\nend\n</cell>\n\
    <text>\nFilter given list of any python values only for floats\n    >>> filter_floats(['a',\
    \ 3.14, 5])\n    [3.14, 5]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n\
    \    [1.0, 2.0, 3.0, 3.0, 3.0, 3.0]\n    \"\"\"", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> x == x)\n    return values\n\
    end", "    values = filter(values, x -> isa(x, Int64))\n    return values\nend",
  "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values, x\
    \ -> x != 0)\n    return values\nend", "    filter(values, x -> isa(x, Int64))\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter out any python values which are not integers\nWe will filter out\
    \ any python values which are not integers", "    values = filter(values, x ->\
    \ isa(x, Int64))\n    values = filter(values, x -> x != 0)\n    values = filter(values,\
    \ x -> x != \"\")\n    return values\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out any python values\
    \ that are not integers\nThis filter will remove any python values that are not\
    \ integers", "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> x != 0)\n    return values\nend", "    values = filter(values, x -> isa(x,\
    \ Int64))\n    values = filter(values, x -> x != 0)\n    return values\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter given list of any python values only for floats\n    >>> filter_floats(['a',\
    \ 3.14, 5])\n    [3.14, 5]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n\
    \    [1.0, 2.0, 3.0, 4.0, 5.0]\n    \"\"\"", "    \n    integers = Int64[]\n \
    \   for value in values\n        if isa(value,Int64)\n            push!(integers,value)\n\
    \        end\n    end\n    return integers\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out all strings from\
    \ given list of any python values", "    values = filter(values, x -> isa(x, Int64))\n\
    \    return values\nend\n</cell>\n<code language=julia-1.5>", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    return values\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given list of any python\
    \ values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n\
    \    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\
    \"", "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> !isa(x, Int64))\n    return values\nend", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> isa(x, Int))\n    return\
    \ values\nend", "    values = filter(values, x -> isa(x, Int64))\n    return values\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter out any python values that are not integers\nWe will filter out\
    \ any python values that are not integers", "    values = filter(values, x ->\
    \ isa(x, Int64))\n    return values\nend", "    values = filter(values, x -> isa(x,\
    \ Int64))\n    values = filter(values, x -> x == x)\n    return values\nend",
  "    values = filter(values, x -> isa(x, Int64))\n    return values\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\n\
    Filter given list of any python values only for floats\n>>> filter_integers(['a',\
    \ 3.14, 5])\n[3.14, 5]\n>>> filter_integers([1, 2, 3, 'abc', {}, []])\n[1, 2,\
    \ 3]\n</text>\n<code language=julia-1.5>", "    filter(values, x -> isa(x, Int64))\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter out any python values that are not integers\nWe can also filter\
    \ out any python values that are not integers", "    values = filter(values, x\
    \ -> isa(x, Int64))\n    values = filter(values, x -> x != 0)\n    return values\n\
    end", "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> x != 0)\n    return values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter out all non-integer values", "    values\
    \ = filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> !isa(x,\
    \ Int64))\n    return values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n</cell>\n<text>\nFilter out any python values other than\
    \ integers\nWe will filter out any python values other than integers", "    values\
    \ = filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> x !=\
    \ 0)\n    return values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter out all strings from given list", "  \
    \  values = filter(values, x -> isa(x, Int64))\n    return values\nend", "   \
    \ values = filter(values, x -> isa(x, Int64))\n    return values\nend", "    \n\
    \    integers = Int64[]\n    for value in values\n        if isa(value,Int64)\n\
    \            push!(integers,value)\n        end\n    end\n    return integers\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_integers([1, 2, 3, 'abc', {},\
    \ []])\n</cell>\n<text>\nFilter out any python values which are not integers\n\
    We will use the same filter_integers function as before", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    return values\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out all values that\
    \ are not integers\nWe will use filter to filter out all values that are not integers",
  "    \n    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> x != 0)\n    \n    return values\nend", "    values = filter(values, x\
    \ -> isa(x, Int64))\n    return values\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([1, 2, 3, 'abc', {}, []])\n</cell>\n<text>\nFilter out all strings\
    \ from given list of any python values", "    values = filter(values, x -> isa(x,\
    \ Int64))\n    values = filter(values, x -> isa(x, Int))\n    values = filter(values,\
    \ x -> isa(x, Integer))\n    values = filter(values, x -> isa(x, Int64))\n   \
    \ values = filter(values, x -> isa(x, Int))\n    values = filter(values, x ->\
    \ isa(x, Integer))\n    values = filter(values, x -> isa(x, Int64))\n    values\
    \ = filter(values, x -> isa(x, Int))\n    values = filter(values, x -> isa(x,\
    \ Integer))\n    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> isa(x, Int))\n    values = filter(values, x -> isa(x, Integer))\n    values\
    \ = filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> isa(x,\
    \ Int))\n    values = filter(values, x -> isa(x, Integer))\n    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> isa(x, Int))\n    values\
    \ = filter(values, x -> isa(x, Integer))\n    values = filter(values, x -> isa(x,\
    \ Int64))\n    values = filter(values, x -> isa(x, Int))\n    values = filter(values,\
    \ x -> isa(x, Integer))\n    values = filter(values, x -> isa(x, Int64))\n   \
    \ values = filter(values, x -> isa(x, Int))\n    values = filter(values, x ->\
    \ isa(x, Integer))\n    values = filter(values, x -> isa(x, Int64))\n    values\
    \ = filter(values, x -> isa(x, Int))\n    values = filter(values, x -> isa(x,\
    \ Integer))\n    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> isa(x, Int))\n    values = filter(values, x -> isa(x, Integer))\n    values\
    \ = filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> isa(x,\
    \ Int))\n    values = filter(values, x -> isa(x, Integer))\n    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> isa(x, Int))\n    values\
    \ = filter(values, x -> isa(x, Integer))\n    values = filter(values, x -> isa(x,\
    \ Int64))\n    values = filter(values, x -> isa(x, Int))\n    values = filter(values,\
    \ x -> isa(x, Integer))\n    values = filter(values, ", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> isa(x, Int))\n    values\
    \ = filter(values, x -> isa(x, Integer))\n    values = filter(values, x -> isa(x,\
    \ Integer64))\n    values = filter(values, x -> isa(x, Int128))\n    values =\
    \ filter(values, x -> isa(x, UInt64))\n    values = filter(values, x -> isa(x,\
    \ UInt))\n    values = filter(values, x -> isa(x, UInt128))\n    values = filter(values,\
    \ x -> isa(x, Float64))\n    values = filter(values, x -> isa(x, Float32))\n \
    \   values = filter(values, x -> isa(x, Float16))\n    values = filter(values,\
    \ x -> isa(x, Complex))\n    values = filter(values, x -> isa(x, Complex128))\n\
    \    values = filter(values, x -> isa(x, Complex256))\n    values = filter(values,\
    \ x -> isa(x, BigInt))\n    values = filter(values, x -> isa(x, BigUint))\n  \
    \  values = filter(values, x -> isa(x, BigInt128))\n    values = filter(values,\
    \ x -> isa(x, BigUint128))\n    values = filter(values, x -> isa(x, BigFloat64))\n\
    \    values = filter(values, x -> isa(x, BigFloat32))\n    values = filter(values,\
    \ x -> isa(x, BigFloat16))\n    values = filter(values, x -> isa(x, BigComplex))\n\
    \    values = filter(values, x -> isa(x, BigComplex128))\n    values = filter(values,\
    \ x -> isa(x, BigComplex256))\n    values = filter(values, x -> isa(x, BigInt64))\n\
    \    values = filter(values, x -> isa(x, BigUint64))\n    values = filter(values,\
    \ x -> isa(x, BigInt128))\n    values = filter(values, x -> isa(x, BigUint128))\n\
    \    values = filter(values, x -> isa(x, BigFloat64))\n    values = filter(values,\
    \ x -> isa(x, BigFloat32))\n    values = filter(values, x -> isa(x, BigFloat16))\n\
    \    values = filter(values, x -> isa(x, BigComplex))\n    values = filter(values,\
    \ x -> isa(x, BigComplex128))\n    values = filter(values, x -> isa(x, BigComplex256))\n\
    \    values = filter(values, x -> isa(x, BigInt))\n    values = filter(values,\
    \ x -> isa(x, BigUint", "    values = filter(values, x -> isa(x, Int64))\n   \
    \ return values\nend", "    values = filter(values, x -> isa(x, Int64))\n    values\
    \ = filter(values, x -> x != 0)\n    return values\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out all non-integer\
    \ values from given list of any python values", "    values = filter(values, x\
    \ -> isa(x, Int64))\n    values = filter(values, x -> x != 0)\n    return values\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter out all non-integers\nFilter out all non-integers", "    values\
    \ = filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> x !=\
    \ 0)\n    return values\nend", "    values = filter(values, x -> isa(x, Int64))\n\
    \    values = filter(values, x -> !isa(x, Int64))\n    return values\nend", " \
    \   values = filter(values, x -> isa(x, Int64))\n    values = filter(values, x\
    \ -> !isa(x, Int64))\n    return values\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out all values that\
    \ are not integers", "    values = filter(values, x -> isa(x, Int64))\n    return\
    \ values\nend", "    values = filter(values, x -> isa(x, Int64))\n    values =\
    \ filter(values, x -> x != 0)\n    values = filter(values, x -> x != false)\n\
    \    return values\nend", "    values = filter(values, x -> isa(x, Int64))\n \
    \   values = filter(values, x -> x != 0)\n    return values\nend", "    values\
    \ = filter(values, x -> isa(x, Int64))\n    return values\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter\
    \ given list of any python values only for floats\n    >>> filter_floats(['a',\
    \ 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n   \
    \ [1.0, 2.0, 3.0]\n    \"\"\"", "    values = filter(values, x -> isa(x, Int64))\n\
    \    values = filter(values, x -> x != 0)\n    return values\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter\
    \ out any python values that are not integers\nThe function below filters out\
    \ any python values that are not integers", "    values = filter(values, x ->\
    \ isa(x, Int64))\n    values = filter(values, x -> x != 0)\n    values = filter(values,\
    \ x -> x != Inf)\n    values = filter(values, x -> x != -Inf)\n    return values\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter given list of any python values only for integers and floats\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5, 3.14]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3, 'abc']\n    \"\"\"", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    return values\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out all non-integers",
  "    values = filter(values, x -> isa(x, Int64))\n    return values\nend", "   \
    \ values = filter(values, x -> isa(x, Int64))\n    values = filter(values, x ->\
    \ x != 0)\n    values = filter(values, x -> x != \"\")\n    return values\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <code language=julia-1.5>\nfilter_integers([1, 2, 3, 'abc', {}, []])\n</cell>\n\
    <text>\nFilter out any empty lists or dictionaries", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    return values\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out any python values\
    \ that are not integers\nThe function below filters out any python values that\
    \ are not integers", "    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter\
    \ given list of any python values only for floats\n    >>> filter_floats(['a',\
    \ 3.14, 5])\n    [3.14, 5.0]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n\
    \    [1.0, 2.0, 3.0, 3.0, 4.0]\n    \"\"\"", "    values = filter(values, x ->\
    \ isa(x, Int64))\n    return values\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out all strings from\
    \ a list of strings", "    values = filter(values, x -> isa(x, Int64))\n    values\
    \ = filter(values, x -> x != 0)\n    values = filter(values, x -> x != \"\")\n\
    \    return values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter out any python values that are not integers\n\
    This filters out any python values that are not integers", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> x != 0)\n    return values\n\
    end", "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> !isa(x, Int64))\n    return values\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out all strings from\
    \ given list of any python values", "    values = filter(values, x -> isa(x, Int64))\n\
    \    return values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter given list of any python values only for\
    \ floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14, 5]\n    >>> filter_floats([1,\
    \ 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0, 3.0, 3.0]\n    \"\"\"", "    values\
    \ = filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> x !=\
    \ 0)\n    return values\nend", "    values = filter(values, x -> isa(x, Int64))\n\
    \    values = filter(values, x -> x == x)\n    values = filter(values, x -> x\
    \ == x)\n    return values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<code language=julia-1.5>\nfilter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n</cell>\n<text>\nFilter out any values that are not integers\n\
    We can also filter out any values that are not integers", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> x != 0)\n    return values\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter out all non-integers\nWe will filter out all non-integers from\
    \ our list of integers", "    values = filter(values, x -> isa(x, Int64))\n  \
    \  values = filter(values, x -> !isa(x, Int64))\n    return values\nend", "  \
    \  values = filter(values, x -> isa(x, Int64))\n    return values\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\n\
    Filter out all strings from a list of strings", "    \n    values = filter(values,\
    \ x -> isa(x, Int64))\n    \n    return values\nend", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> x == x)\n    values =\
    \ filter(values, x -> x == x)\n    return values\nend", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> !isa(x, Int64))\n    return\
    \ values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14,\
    \ 5])\n</cell>\n<text>\nFilter given list of any python values only for floats\n\
    \    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1,\
    \ 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> !isa(x, Int64))\n    return\
    \ values\nend", "    values = filter(values, x -> isa(x, Int64))\n    return values\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter out any python values that are not integers\nWe will filter out\
    \ any python values that are not integers", "    filter(values, x -> isa(x, Int64))\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter out any python values which are not integers\nThis filters out\
    \ any python values which are not integers", "    values = filter(values, x ->\
    \ isa(x, Int64))\n    values = filter(values, x -> !isa(x, Int64))\n    return\
    \ values\nend\n</cell>\n<code language=julia-1.5>", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    return values\nend", "    values = filter(values, x\
    \ -> isa(x, Int64))\n    values = filter(values, x -> x != 0)\n    return values\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter out any values that are not integers", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> x == x)\n    return values\n\
    end", "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> x != 0)\n    return values\nend", "    values = filter(values, x -> isa(x,\
    \ Int64))\n    values = filter(values, x -> x != 0)\n    values = filter(values,\
    \ x -> x != \"\")\n    return values\nend", "    values = filter(values, x ->\
    \ isa(x, Int64))\n    return values\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given list of any python\
    \ values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14, 5]\n\
    \    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0, 3.0, 4.0,\
    \ 4.0]\n    \"\"\"", "    values = filter(values, x -> isa(x, Int64))\n    values\
    \ = filter(values, x -> x == x)\n    values = filter(values, x -> x == x)\n  \
    \  values = filter(values, x -> x == x)\n    values = filter(values, x -> x ==\
    \ x)\n    values = filter(values, x -> x == x)\n    values = filter(values, x\
    \ -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)", "    values = filter(values, x -> isa(x, Int64))\n    values\
    \ = filter(values, x -> x == x)\n    return values\nend", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> x != 0)\n    return values\n\
    end", "    \n    filter_integers = filter(x -> isa(x, Int64), values)\n    return\
    \ filter_integers\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter out any python values that are not integers\n\
    We will filter out any python values that are not integers", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> x == x)\n    return values\n\
    end", "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> x != 0)\n    values = filter(values, x -> x != Inf)\n    values = filter(values,\
    \ x -> x != -Inf)\n    return values\nend", "    filter(values, x -> isa(x, Int64))\n\
    end", "    \n    filter_integers = filter(x -> isa(x, Int64), values)\n    \n\
    \    return filter_integers\nend", "    values = filter(values, x -> isa(x, Int64))\n\
    \    values = filter(values, x -> x != 0)\n    return values\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter\
    \ out strings from list of any python values", "    filter(values, x -> isa(x,\
    \ Int64))\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14,\
    \ 5])\n</cell>\n<text>\nFilter given list of any python values only for floats\n\
    >>> filter_integers(['a', 3.14, 5])\n[3.14, 5]\n>>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n[1, 2, 3]\n</text>\n<code language=julia-1.5>", "    values\
    \ = filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> x ==\
    \ x)\n    return values\nend\n</cell>\n<code language=julia-1.5>", "    \n   \
    \ values = filter(values, x -> isa(x, Int64))\n    \n    return values\nend",
  "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values, x\
    \ -> x != 0)\n    return values\nend", "    values = filter(values, x -> isa(x,\
    \ Int64))\n    return values\nend", "    values = filter(values, x -> isa(x, Int64))\n\
    \    values = filter(values, x -> !isa(x, Int64))\n    return values\nend", " \
    \   values = filter(values, x -> isa(x, Int64))\n    return values\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\n\
    Filter out all strings that are not integers\nThe function below filters out all\
    \ strings that are not integers", "    filter(values, x -> isa(x, Int64))\nend\n\
    </cell>\n<text>\nfilter_integers!\nSimilar to filter_integers, but modifies the\
    \ given list in-place", "    values = filter(values, x -> isa(x, Int64))\n   \
    \ return values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter given list of any python values only for\
    \ floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1,\
    \ 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> x != 0)\n    return values\n\
    end", "    values = filter(values, x -> isa(x, Int64))\n    return values\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_integers([1, 2, 3, 'abc', {}, []])\n\
    </cell>\n<text>\nFilter out any python values that are not integers\nWe will filter\
    \ out any python values that are not integers", "    values = filter(values, x\
    \ -> isa(x, Int64))\n    return values\nend", "    values = filter(values, x ->\
    \ isa(x, Int64))\n    values = filter(values, x -> isa(x, Int))\n    return values\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter out any python values which are not integers", "    filter(values,\
    \ x -> isa(x, Int64))\nend\n</cell>\n<text>\nFilter given list of any python values\
    \ only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14, 5]\n    >>>\
    \ filter_floats([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0, 3.0, 4.0]\n   \
    \ \"\"\"", "    \n    integer = Int64[]\n    for value in values\n        if isa(value,Int64)\n\
    \            push!(integer,value)\n        end\n    end\n    integer\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_integers([1, 2, 3, 'abc', {}, []])\n</cell>\n\
    <text>\nFilter out any python values which are not integers\nWe will filter out\
    \ any python values which are not integers", "    values = filter(values, x ->\
    \ isa(x, Int64))\n    return values\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out any python values\
    \ that are not integers\nWe will filter out any python values that are not integers",
  "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values, x\
    \ -> x != 0)\n    return values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter out all non-integer values", "    filter(values,\
    \ x -> isa(x, Int64))\nend", "    values = filter(values, x -> isa(x, Int64))\n\
    \    return values\nend", "    filter(values, x -> isa(x, Int64))\nend", "   \
    \ values = filter(values, x -> isa(x, Int64))\n    values = filter(values, x ->\
    \ isa(x, Int))\n    return values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter out any python values which are not integers\n\
    The function below filters out any python values which are not integers", "  \
    \  values = filter(values, x -> isa(x, Int64))\n    values = filter(values, x\
    \ -> !isa(x, Int64))\n    return values\nend", "    values = filter(values, x\
    \ -> isa(x, Int64))\n    return values\nend", "    values = filter(values, x ->\
    \ isa(x, Int64))\n    values = filter(values, x -> isa(x, Int))\n    return values\n\
    end", "    values = filter(values, x -> isa(x, Int64))\n    return values\nend",
  "    values = filter(values, x -> isa(x, Int64))\n    return values\nend", "   \
    \ values = filter(values, x -> isa(x, Int64))\n    values = filter(values, x ->\
    \ isa(x, Int))\n    return values\nend", "    values = filter(values, x -> isa(x,\
    \ Int64))\n    values = filter(values, x -> x != 0)\n    values = filter(values,\
    \ x -> x != \"\")\n    return values\nend\n</cell>\n<code language=julia-1.4>",
  "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values, x\
    \ -> !isa(x, Int64))\n    return values\nend", "    values = filter(values, x\
    \ -> isa(x, Int64))\n    values = filter(values, x -> !isa(x, Int64))\n    return\
    \ values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14,\
    \ 5])\n</cell>\n<text>\nFilter out any python values that are not integers\nWe\
    \ will filter out any python values that are not integers", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> x != 0)\n    values =\
    \ filter(values, x -> x != \"\")\n    return values\nend", "    filter(values,\
    \ x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter out all values that are not integers\n\
    We could also filter out all values that are not integers. In this case we would\
    \ have to convert all values to integers first. Since we know that all values\
    \ are integers, we can just use Int64 instead of Any. Since we know that all values\
    \ are integers, we can just use Int64 instead of Any. Since we know that all values\
    \ are integers, we can just use Int64 instead of Any. Since we know that all values\
    \ are integers, we can just use Int64 instead of Any. Since we know that all values\
    \ are integers, we can just use Int64 instead of Any. Since we know that all values\
    \ are integers, we can just use Int64 instead of Any. Since we know that all values\
    \ are integers, we can just use Int64 instead of Any. Since we know that all values\
    \ are integers, we can just use Int64 instead of Any. Since we know that all values\
    \ are integers, we can just use Int64 instead of Any. Since we know that all values\
    \ are integers, we can just use Int64 instead of Any. Since we know that all values\
    \ are integers, we can just use Int64 instead of Any. Since we know that all values\
    \ are integers, we can just use Int64 instead of Any. Since we know that all values\
    \ are integers, we can just use Int64 instead of Any. Since we know that all values\
    \ are integers, we can just use Int64 instead of Any. Since we know that all values\
    \ are integers, we can just use Int64 instead of Any. Since we know that all values\
    \ are integers, we can just use Int64 instead of Any. Since we know that all values\
    \ are integers, we can just use Int64 instead of Any. Since we know that all values\
    \ are integers, we can just use Int64 instead of Any. Since we know that all values\
    \ are integers, we can just use Int64 instead of Any. Since we know that all values\
    \ are integers, we can just use Int64 instead of Any. Since we know that all values\
    \ are integers, we can just use Int64 instead of Any. Since we know that all values\
    \ are integers, we can just use Int64 instead of Any. Since we know that all values\
    \ are integers, we can just use Int64 instead of Any. Since we know that all values\
    \ are integers, we can just use Int64 instead of Any. Since we know that all values\
    \ are integers, we can just use Int64 instead of Any. Since we know that all values\
    \ are integers, we can just use Int64 instead of Any. Since we know that all values\
    \ are integers, we can just use Int64 instead of Any. Since we know that all values\
    \ are integers, ", "    values = filter(values, x -> isa(x, Int64))\n    return\
    \ values\nend\n</cell>\n<code language=julia-1.3>\nfilter_integers([1, 2, 3, 'abc',\
    \ {}, []])\n</cell>\n<text>\nFilter out any python values which are not integers\n\
    The function below filters out any python values which are not integers", "  \
    \  values = filter(values, x -> isa(x, Int64))\n    values = filter(values, x\
    \ -> x != 0)\n    return values\nend", "    values = filter(values, x -> isa(x,\
    \ Int64))\n    values = filter(values, x -> isa(x, Int))\n    return values\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter out any python values which are not integers\nThe function below\
    \ filters out any python values which are not integers", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> !isa(x, Int64))\n    return\
    \ values\nend", "    values = filter(values, x -> isa(x, Int64))\n    values =\
    \ filter(values, x -> x == x)\n    return values\nend", "    filter(values, x\
    \ -> isa(x, Int64))\nend", "    values = filter(values, x -> isa(x, Int64))\n\
    \    values = filter(values, x -> x != 0)\n    return values\nend", "    values\
    \ = filter(values, x -> isa(x, Int64))\n    return values\nend", "    values =\
    \ filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> isa(x,\
    \ Int))\n    return values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter out any python values that are not integers\n\
    The function below filters out any python values that are not integers", "   \
    \ values = filter(values, x -> isa(x, Int64))\n    return values\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\n\
    Filter out all non-integers\nWe can also filter out all non-integers", "    values\
    \ = filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> x !=\
    \ 0)\n    values = filter(values, x -> x != \"\")\n    return values\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\n\
    Filter out any python values that are not integers\nWe will filter out any python\
    \ values that are not integers", "    values = filter(values, x -> isa(x, Int64))\n\
    \    values = filter(values, x -> x != 0)\n    return values\nend", "    filter(values,\
    \ x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter out any python values that are not integers\n\
    The filter function can take in any function and returns a new vector with only\
    \ the values where the function returns true.", "    values = filter(values, x\
    \ -> isa(x, Int64))\n    values = filter(values, x -> !isa(x, Int64))\n    return\
    \ values\nend\n</cell>\n<code language=julia-1.3>\nfilter_integers([\"a\", 3.14,\
    \ 5])\n</cell>\n<text>\nFilter out any python values that are not integers\nWe\
    \ can filter out any python values that are not integers by using filter_integers()",
  "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values, x\
    \ -> x != 0)\n    return values\nend\n</cell>\n<code language=julia-1.5>", " \
    \   values = filter(values, x -> isa(x, Int64))\n    values = filter(values, x\
    \ -> !isa(x, Int64))\n    return values\nend", "    values = filter(values, x\
    \ -> isa(x, Int64))\n    values = filter(values, x -> !isa(x, Int64))\n    return\
    \ values\nend\n</cell>\n<code language=julia-1.3>\nfilter_integers([\"a\", 3.14,\
    \ 5])\n</cell>\n<text>\nFilter out all strings from given list", "    values =\
    \ filter(values, x -> isa(x, Int64))\n    return values\nend", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> !isa(x, Int64))\n    return\
    \ values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14,\
    \ 5])\n</cell>\n<text>\nFilter out any python values which are not integers\n\
    We will filter out any python values which are not integers", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    return values\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out any python values\
    \ which are not integers\nWe will filter out any python values which are not integers",
  "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values, x\
    \ -> x != 0)\n    return values\nend", "    values = filter(values, x -> isa(x,\
    \ Int64))\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    return values\nend", "    values = filter(values, x -> isa(x,\
    \ Int64))\n    values = filter(values, x -> !isa(x, Int64))\n    return values\n\
    end", "    \n    filter_integers = filter(x -> isa(x, Int64), values)\n    \n\
    \    return filter_integers\nend", "    values = filter(values, x -> isa(x, Int64))\n\
    \    values = filter(values, x -> x != 0)\n    return values\nend", "    values\
    \ = filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> !isa(x,\
    \ Int64))\n    return values\nend", "    values = filter(values, x -> isa(x, Int64))\n\
    \    values = filter(values, x -> !isa(x, Int64))\n    return values\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\n\
    Filter given list of any python values only for floats\n    >>> filter_floats(['a',\
    \ 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n   \
    \ [1.0, 2.0, 3.0]\n    \"\"\"", "    values = filter(values, x -> isa(x, Int64))\n\
    \    values = filter(values, x -> !isa(x, Int64))\n    return values\nend", " \
    \   values = filter(values, x -> isa(x, Int64))\n    values = filter(values, x\
    \ -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    return values\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out all strings from\
    \ given list", "    values = filter(values, x -> isa(x, Int64))\n    values =\
    \ filter(values, x -> isa(x, Int))\n    return values\nend", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> x == x)\n    values =\
    \ filter(values, x -> x == x)\n    return values\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out any python values\
    \ which are not integers\nWe will filter out any python values which are not integers",
  "    values = filter(values, x -> isa(x, Int64))\n    return values\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\n\
    Filter out all non-integers", "    values = filter(values, x -> isa(x, Int64))\n\
    \    values = filter(values, x -> !isa(x, Int64))\n    return values\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_integers([1, 2, 3, 'abc', {}, []])\n</cell>\n\
    <text>\nFilter out any python values other than integers\nThe function below filters\
    \ out any python values other than integers", "    values = filter(values, x ->\
    \ isa(x, Int64))\n    values = filter(values, x -> x != 0)\n    values = filter(values,\
    \ x -> x != \"\")\n    values = filter(values, x -> x != \"\")\n    return values\n\
    end", "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> isa(x, Int))\n    return values\nend", "    values = filter(values, x ->\
    \ isa(x, Int64))\n    return values\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out all strings from\
    \ given list", "    values = filter(values, x -> isa(x, Int64))\n    return values\n\
    end", "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> !isa(x, Int64))\n    return values\nend", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> !isa(x, Int64))\n    return\
    \ values\nend", "    values = filter(values, x -> isa(x, Int64))\n    values =\
    \ filter(values, x -> x != 0)\n    return values\nend", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    return values\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out any python values\
    \ except integers\nWe can also filter out any python values except integers"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
