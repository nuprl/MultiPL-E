name: HumanEval_47_median
language: julia
prompt: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2,\
  \ 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\
  \nfunction median(l::Vector{Int64})::Float64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
  \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
  \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2,\
  \ 7]) == 7)\nend\n"
completions: ["    sort(l)\n    mid = length(l)\n    if mid == 0 \n        throw(DomainError(string(\"\
    median of empty list\")))\n    end\n    return l[mid-1]\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the mean of a list of numbers.", "    l = sort(l)\n    mid = length(l)\n   \
    \ if mid == 0 \n        return l[1]\n    \n    mid = floor(mid)\n    \n    if\
    \ mid%2 == 0 \n        return l[mid]\n    \n    mid = ceil(mid)\n    \n    return\
    \ l[mid]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the median of a list of numbers. \n\
    The function should work for both real and complex numbers. \nThe function should\
    \ work for any number of arguments.", "    l = sort(l)\n    mid = length(l)\n\
    \    if mid == 1\n        return l[1]\n    end\n    \n    mid = floor(mid)\n \
    \   \n    if mid%2 == 0\n        return l[mid]\n    else\n        return (l[mid-1]\
    \ + l[mid])/2\n    end\nend", "    sort(l)\n    return l[floor(Int64, length(l)/2)]\n\
    end\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the mean of a list of numbers.", " \
    \   l = sort(l)\n    mid = length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n\
    \    else\n        return (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nThe median of a finite set\
    \ of numbers is called the \"typical\" number. \nThe median is often called the\
    \ \"middle value\" of the sorted set. \nThe median is often called the \"middle\
    \ index\" of the sorted set. \nThe median is often called the \"middle value\"\
    \ of the sorted set. \nThe median is often called the \"middle index\" of the\
    \ sorted set. \nThe median is often called the \"middle value\" of the sorted\
    \ set. \nThe median is often called the \"middle index\" of the sorted set. \n\
    The median is often called the \"middle value\" of the sorted set. \nThe median\
    \ is often called the \"middle index\" of the sorted set. \nThe median is often\
    \ called the \"middle value\" of the sorted set. \nThe median is often called\
    \ the \"middle index\" of the sorted set. \nThe median is often called the \"\
    middle value\" of the sorted set. \nThe median is often called the \"middle index\"\
    \ of the sorted set. \nThe median is often called the \"middle value\" of the\
    \ sorted set. \nThe median is often called the \"middle index\" of the sorted\
    \ set. \nThe median is often called the \"middle value\" of the sorted set. \n\
    The median is often called the \"middle index\" of the sorted set. \nThe median\
    \ is often called the \"middle value\" of the sorted set. \nThe median is often\
    \ called the \"middle index\" of the sorted set. \nThe median is often called\
    \ the \"middle value\" of the sorted set. \nThe median is often called the \"\
    middle index\" of the sorted set. \nThe median is often called the \"middle value\"\
    \ of the sorted set. \nThe median is often called the \"middle index\" of the\
    \ sorted set. \nThe median is often called the \"middle value\" of the sorted\
    \ set. \nThe median is often called the \"middle index\" of the sorted set. \n\
    The median is often called the \"middle value\" of the sorted set. \nThe median\
    \ is often called the \"middle index\" of the sorted set. \nThe median is often\
    \ called the \"middle value\" of the sorted set. \n", "    l = sort(l)\n    mid\
    \ = floor(Int, length(l)/2)\n    if length(l) % 2 == 0\n        return l[mid]\n\
    \    else\n        return (l[mid] + l[mid-1])/2.0\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    sort(l)\n    mid = length(l)//2\n    if length(l)%2==0\n\
    \        return l[mid]\n    else\n        return 0.5*(l[mid-1]+l[mid])\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the mean of a\
    \ list of numbers.", "    l = sort(l)\n    mid = length(l)\n    if mid == 0 \n\
    \        return NaN\n    \n    mid = floor(mid)\n    if mid == 0\n        return\
    \ l[mid]\n    \n    left = mid - 1\n    right = mid\n    \n    while left < right\n\
    \        if l[left] >= l[right]\n            right -= 1\n        else\n      \
    \      left += 1\n        end\n    end\n    \n    return l[left]\nend", "    l\
    \ = sort(l)\n    mid = length(l)\n    if mid == 1\n        return l[1]\n    end\n\
    \    \n    if mid % 2 == 0\n        return (l[mid-1] + l[mid]) / 2\n    else\n\
    \        return l[mid]\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise\nWrite a function that returns the median of\
    \ a list of numbers. Write a test that passes when the function returns the correct\
    \ answer. Write a test that fails when the function returns the incorrect answer.",
  "    \n    l = sort(l)\n    \n    if length(l)%2 == 0\n        return l[floor(length(l)/2)]\n\
    \    else\n        return (l[floor(length(l)/2)] + l[floor(length(l)/2)-1])/2\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the mode of a given list of numbers.\
    \ \nThe mode is the number that appears most often in the list. \nThe function\
    \ should return the mode of the list passed as a parameter.", "    l = sort(l)\n\
    \    mid = floor(Int, length(l)/2)\n    if length(l) % 2 == 0\n        return\
    \ l[mid]\n    else\n        return (l[mid] + l[mid-1])/2\n    end\nend\n</cell>\n\
    <text>\nmedian([3, 1, 2, 4, 5])", "    l = sort(l)\n    mid = length(l)\n    if\
    \ mid % 2 == 0\n        return l[mid/2]\n    else\n        return (l[mid/2] +\
    \ l[mid/2 - 1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the median\
    \ of a list of numbers. \nThe function should take a list of numbers as an argument.\
    \ \nThe function should return a single number.", "    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the median of a list of numbers, rounded to a specified number of decimal places.",
  "    sort(l)\n    mid = length(l)\n    if mid == 0 \n        throw(ZeroDivisionError(\"\
    median of an empty list\"))\n    end\n    \n    if mid == 1\n        return l[1]\n\
    \    end\n    \n    if l[mid] == l[mid - 1]\n        return l[mid]\n    end\n\
    \    \n    mid1 = mid - 1\n    mid2 = mid + 1\n    \n    if l[mid1] > l[mid2]\n\
    \        return median(l[mid1:mid2])\n    else\n        return median(l[mid2:mid1])\n\
    \    end\nend\n</cell>\n<text>\nMedian of Lists\nThe median of a list of numbers\
    \ is defined as the middle number of the sorted list.", "    sort(l)\n    l =\
    \ l[end]\n    mid = floor(Int, length(l) / 2)\n    if length(l) % 2 == 1\n   \
    \     return l[mid]\n    else\n        return (l[mid] + l[mid-1]) / 2\n    end\n\
    end", "    sort(l)\n    length(l) == 0 ? 0.0 : (l[end-1] + l[end])/2\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the median of a list of numbers. \nThe function\
    \ should take a list of numbers as an argument. \nThe function should return the\
    \ median of the numbers in the list.\nThe function should raise an error if the\
    \ list is empty.", "    l = sort(l)\n    mid = length(l)\n    if mid == 0 \n \
    \       throw(ZeroDivisionError, \"median of an empty list\")\n    end\n    \n\
    \    if mid == 1\n        return l[1]\n    end\n    \n    mid = floor(mid)\n \
    \   \n    if l[mid] == l[mid - 1]\n        return l[mid]\n    end\n    \n    if\
    \ l[mid] == l[mid + 1]\n        return l[mid]\n    end\n    \n    if l[mid] ==\
    \ l[mid-1]\n        return l[mid]\n    end\n    \n    if l[mid] == l[mid+1]\n\
    \        return l[mid]\n    end\n    \n    if l[mid] == l[mid - 2]\n        return\
    \ l[mid]\n    end\n    \n    if l[mid] == l[mid + 2]\n        return l[mid]\n\
    \    end\n    \n    if l[mid] == l[mid - 3]\n        return l[mid]\n    end\n\
    \    \n    if l[mid] == l[mid + 3]\n        return l[mid]\n    end\n    \n   \
    \ if l[mid] == l[mid - 4]\n        return l[mid]\n    end\n    \n    if l[mid]\
    \ == l[mid + 4]\n        return l[mid]\n    end\n    \n    if l[mid] == l[mid\
    \ - 5]\n        return l[mid]\n    end\n    \n    if l[mid] == l[mid + 5]\n  \
    \      return l[mid]\n    end\n    \n    if l[mid] == l[mid - 6]\n        return\
    \ l[mid]\n    end\n    \n    if l[mid] == l[mid + 6]\n        return l[mid]\n\
    \    end\n    \n    if l[mid] == l[mid - 7]\n        return l[mid]\n    end\n\
    \    \n    if l[mid] == l[mid + 7]\n        return l[mid]\n    end\n    \n   \
    \ if l[mid] == l[mid - 8]\n        return l[mid]\n    end\n    \n    if l[mid]\
    \ == l[mid + 8]\n        return l[mid]\n    end\n    \n    if l[mid] == l[mid\
    \ - 9]\n        return l[mid]\n    end\n    \n    if l[mid] == l[mid + 9]\n  \
    \      return l[mid]\n    end\n    \n    if l[mid] == l[mid - 10]\n        return\
    \ l[mid]\n    end\n    \n    if l[mid] == l[mid + 10]\n        return l[mid]\n\
    \    end\n    \n    if l[mid] == l[mid ", "    \n    l = sort(l)\n    \n    if\
    \ length(l)%2 == 1\n        return l[floor(length(l)/2)]\n    else\n        return\
    \ (l[floor(length(l)/2)] + l[floor(length(l)/2)-1])/2\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.3>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise: Write a function\
    \ that calculates the mean of a list of numbers.", "    \n    l = sort(l)\n  \
    \  \n    if length(l) == 0 \n        return Float64(0)\n    \n    mid = floor(Int,\
    \ length(l) / 2)\n    \n    if length(l) % 2 == 0 \n        return l[mid]\n  \
    \  \n    else \n        return (l[mid] + l[mid-1]) / 2\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ median of a list of numbers. \nThe function should take a list of numbers as\
    \ an argument. \nThe function should return the median of the numbers in the list.\
    \ \nThe median is the number in the middle of the list that has the highest value.\
    \ \nIf the list is empty, return Float64(0). \nIf the list has one element, return\
    \ that element. \nIf the list has two elements, return the average of the two\
    \ elements. \nIf the list has more than two elements, return the average of the\
    \ two middle elements. \nFor example, if the list is [4, 6, 10, 2, 3], the median\
    \ is 6.", "    l = sort(l)\n    mid = length(l)\n    if mid == 0 \n        return\
    \ l[1]\n    \n    if mid % 2 == 0 \n        return l[mid / 2]\n    \n    return\
    \ median(l[mid/2 : end - 1]) + median(l[1 : mid/2])\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ mean of a list of numbers.", "    sort(l)\n    return l[floor(Int64, length(l)/2)]\n\
    end", "    sort(l)\n    \n    if length(l)%2==0\n        return l[(length(l)+1)/2-1]\n\
    \    else\n        return l[(length(l)+1)/2]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nThe median of a finite set of numbers is called\
    \ the \"middle\" of the set. For example, in the set {1, 2, 3, 4}, the median\
    \ is (2 + 4) / 2 = 2.5.", "    sort(l)\n    mid = length(l)\n    if mid % 2 ==\
    \ 0\n        return l[mid/2]\n    else\n        return (l[mid/2] + l[mid/2+1])/2\n\
    \    end\nend\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis is not an answer, but\
    \ a comment.\n<|/ c |>\n<| c |>\nIt is an answer, but not a complete one. OP asked\
    \ for median of elements in the list l. Your code returns median of list l. OP\
    \ asked for median of elements in the list l. Your code returns median of list\
    \ l. OP asked for median of elements in the list l. Your code returns median of\
    \ list l. OP asked for median of elements in the list l. Your code returns median\
    \ of list l. OP asked for median of elements in the list l. Your code returns\
    \ median of list l. OP asked for median of elements in the list l. Your code returns\
    \ median of list l. OP asked for median of elements in the list l. Your code returns\
    \ median of list l. OP asked for median of elements in the list l. Your code returns\
    \ median of list l. OP asked for median of elements in the list l. Your code returns\
    \ median of list l. OP asked for median of elements in the list l. Your code returns\
    \ median of list l. OP asked for median of elements in the list l. Your code returns\
    \ median of list l. OP asked for median of elements in the list l. Your code returns\
    \ median of list l. OP asked for median of elements in the list l. Your code returns\
    \ median of list l. OP asked for median of elements in the list l. Your code returns\
    \ median of list l. OP asked for median of elements in the list l. Your code returns\
    \ median of list l. OP asked for median of elements in the list l. Your code returns\
    \ median of list l. OP asked for median of elements in the list l. Your code returns\
    \ median of list l. OP asked for median of elements in the list l. Your code returns\
    \ median of list l. OP asked for median of elements in the list l. Your code returns\
    \ median of list l. OP asked for median of elements in the list l. Your code returns\
    \ median of list l. OP asked for median of elements in the list l. Your code returns\
    \ median of list l. OP asked ", "    \n    l = sort(l)\n    \n    if length(l)%2\
    \ == 1\n        return l[end-1]\n    else\n        return (l[end-1] + l[end])/2\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\n\
    Exercise: Write a function that returns the median of a list of numbers. Write\
    \ a test that passes when the function returns the correct answer. Write a test\
    \ that fails when the function returns the incorrect answer.", "    \n    median\
    \ = sort(l)[end-1]\n    \n    if median == 0\n        median = median(sort(l)[1:end-1])\n\
    \    end\n    \n    return median\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20],\
    \ missing)\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20],\
    \ missing, missing)\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000,\
    \ 10, 20], missing, missing, missing)\n</cell>\n<code language=julia-1.5>\nmedian([-10,\
    \ 4, 6, 1000, 10, 20], missing, missing, missing, missing)\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20], missing, missing, missing, missing, missing)\n\
    </cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20], missing,\
    \ missing, missing, missing, missing, missing)\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20], missing, missing, missing, missing, missing,\
    \ missing, missing)\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000,\
    \ 10, 20], missing, missing, missing, missing, missing, missing, missing, missing)\n\
    </cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20], missing,\
    \ missing, missing, missing, missing, missing, missing, missing, missing)\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20], missing, missing,\
    \ missing, missing, missing, missing, missing, missing, missing, missing)\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20], missing, missing,\
    \ missing, missing, missing, missing, missing, missing, missing, missing, missing)\n\
    </cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20], missing,\
    \ missing, missing, missing, missing, missing, missing, missing, missing, missing,\
    \ missing)\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20],\
    \ missing, missing, missing, missing, missing, ", "    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0\n        return NaN\n    \n    if mid % 2 == 0\n\
    \        return l[mid/2]\n    else\n        return (l[mid/2] + l[mid/2 - 1])/2.0\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <text>\nExercise 2\nWrite a function to compute the mean of a list of numbers.\
    \ \nThe function should take a list of numbers and return a Float64.", "    sort(l)\n\
    \    mid = length(l)\n    if mid % 2 == 1\n        return l[mid/2]\n    else\n\
    \        return (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the mean of a list of numbers.", "    l = sort(l)\n    mid = length(l)\n   \
    \ if mid == 0 \n        return l[1]\n    \n    mid = floor(mid)\n    if mid ==\
    \ 1 \n        return l[1]\n    \n    if mid == length(l)\n        return l[mid]\n\
    \    \n    left = mid - 1\n    right = mid + 1\n    \n    if l[left] > l[right]\
    \ \n        return median(l[left:right])\n    \n    return median(l[left:right])\n\
    end\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n    mid = length(l)\n\
    \    if mid == 0 \n        throw(DomainError())\n    end\n    return l[mid-1]\n\
    end\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise\n\
    Write a function that returns the median of a list of numbers, rounded to two\
    \ decimal places.", "    sort(l)\n    length(l) == 0 ? 0.0 : (l[end-1] + l[end])/2\n\
    end\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the median of a list of numbers. \nThe function\
    \ should take a list of numbers and return the median of the numbers. \nThe median\
    \ of a list of numbers can be defined as the middle number of the list \ndivided\
    \ by the number of elements in the list. \nFor example, if the list is [3, 1,\
    \ 2, 4, 5], the median is 2.5.", "    l = sort(l)\n    mid = length(l)\n    if\
    \ mid % 2 == 1\n        return l[mid/2]\n    else\n        return (l[mid/2] +\
    \ l[mid/2 - 1])/2.0\n    end\nend", "    sort(l)\n    l = l[end]\n    mid = floor((length(l)+1)/2)\n\
    \    if length(l) == 0 \n        throw(DomainError(\"\"))\n    end\n    if mid\
    \ == 1 \n        return l[1]\n    end\n    if l[mid] == l[mid-1] \n        return\
    \ median(l[mid+1:end]) \n    end\n    return median(l[mid-1:mid+2]) \nend\n</cell>\n\
    <code language=julia-1.5>", "    sort(l)\n    mid = floor(length(l)/2)\n    if\
    \ length(l)%2 == 1\n        return l[mid]\n    else\n        return 0.5*(l[mid-1]\
    \ + l[mid])\n    end\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n\
    \    mid = length(l)\n    if mid == 0 \n        return l[1]\n    \n    median\
    \ = (l[mid-1] + l[mid]) / 2\n    return median\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise: Write a function that returns the\
    \ median of a list of numbers. \nThe median is the number in the middle of the\
    \ sorted list of numbers.", "    sort(l)\n    \n    if length(l)%2==0\n      \
    \  return l[floor(length(l)/2)]\n    else\n        return (l[floor(length(l)/2)]+l[floor(length(l)/2)-1])/2\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the median of a list of numbers, rounded\
    \ to two decimal places.", "    sort(l)\n    mid = length(l)//2\n    if length(l)%2\
    \ == 1\n        return l[mid]\n    else\n        return 0.5*(l[mid-1] + l[mid])\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\n\
    Exercise: Write a function that returns the mean of a list of numbers.", "   \
    \ l = sort(l)\n    mid = length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n\
    \    else\n        return (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the median of a list of numbers.\
    \ If the list has an even number of elements, it should return the average of\
    \ the two middle numbers. If the list has an odd number of elements, it should\
    \ return the middle number. For example, median([3, 1, 2, 4, 5]) should return\
    \ 3, and median([3, 1, 2, 4, 3, 5]) should return 2.5.", "    l = sort(l)\n  \
    \  mid = length(l)\n    if mid == 1\n        return l[1]\n    end\n    \n    mid\
    \ = floor(mid)\n    if mid == 0\n        return l[mid - 1]\n    end\n    \n  \
    \  if l[mid] == l[mid - 1]\n        return median(l[mid+1:end])\n    end\n   \
    \ \n    if l[mid] == l[mid - 2]\n        return median(l[mid-1:mid+1])\n    end\n\
    \    \n    if l[mid] == l[mid - 3]\n        return median(l[mid-2:mid+2])\n  \
    \  end\n    \n    if l[mid] == l[mid - 4]\n        return median(l[mid-3:mid+3])\n\
    \    end\n    \n    if l[mid] == l[mid - 5]\n        return median(l[mid-4:mid+4])\n\
    \    end\n    \n    if l[mid] == l[mid - 6]\n        return median(l[mid-5:mid+5])\n\
    \    end\n    \n    if l[mid] == l[mid - 7]\n        return median(l[mid-6:mid+6])\n\
    \    end\n    \n    if l[mid] == l[mid - 8]\n        return median(l[mid-7:mid+7])\n\
    \    end\n    \n    if l[mid] == l[mid - 9]\n        return median(l[mid-8:mid+8])\n\
    \    end\n    \n    if l[mid] == l[mid - 10]\n        return median(l[mid-9:mid+9])\n\
    \    end\n    \n    if l[mid] == l[mid - 11]\n        return median(l[mid-10:mid+10])\n\
    \    end\n    \n    if l[mid] == l[mid - 12]\n        return median(l[mid-11:mid+11])\n\
    \    end\n    \n    if l[mid] == l[mid - 13]\n        return median(l[mid-12:mid+12])\n\
    \    end\n    \n    if l[mid] == l[mid - 14]\n        return median(l[mid-13:mid+13])\n\
    \    end\n    \n    if l[mid] == l[mid - 15]\n        return median(l[mid-14:mid+14])\n\
    \    end\n    \n    if l[mid] == l[mid - 16]\n        return median(l[mid-15:mid+15])\n\
    \    end\n    \n    if l[mid] == l[mid - 17]\n        return median(l[mid-16:mid+16])\n\
    \    end\n    \n    if l[mid] == l[mid - 18", "    l = sort(l)\n    mid = floor(Int,\
    \ length(l)/2)\n    if length(l)%2 == 0\n        return l[mid]\n    else\n   \
    \     return 0.5*(l[mid-1] + l[mid])\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise: Write a function that returns the\
    \ median of a list of numbers. \nThe function should take a list of numbers as\
    \ an argument, and return the median of the numbers. \nThe median is the number\
    \ in the middle of the sorted list of numbers. \nThe median is defined as the\
    \ value separating the higher half of the sorted list from the lower half. \n\
    If the length of the list is even, then the median is the mean of the two middle\
    \ numbers. \nIf the length of the list is odd, then the median is the number in\
    \ the middle of the sorted list divided by 2.", "    sort(l)\n    length(l) ==\
    \ 0 ? 0.0 : (l[end-1] + l[end])/2\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nThe median of a finite set of numbers is called\
    \ the \"middle\" of the set. For example, the median of the set {1, 2, 3, 4} is\
    \ (2 + 4)/2 = 2.5.", "    sort(l)\n    mid = length(l)\n    if mid == 0 \n   \
    \     return l[1]\n    else \n        return l[mid]\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ mean of a list of numbers.", "    sort(l)\n    mid = length(l)\n    if mid %\
    \ 2 == 1\n        return l[mid/2]\n    else\n        return (l[mid/2] + l[mid/2\
    \ - 1]) / 2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2,\
    \ 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the median of a list\
    \ of numbers. Write a test that passes when the function returns the correct median\
    \ and fails otherwise.", "    l = sort(l)\n    mid = length(l)\n    if mid ==\
    \ 1\n        return l[1]\n    end\n    \n    mid1 = mid - 1\n    mid2 = mid +\
    \ 1\n    if mid2 == length(l)\n        return l[mid1]\n    end\n    \n    if l[mid1]\
    \ > l[mid2]\n        return median(l[mid1:mid2])\n    else\n        return median(l[mid2:mid1])\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\n\
    Exercise\nWrite a function that returns the median of a list of numbers. Write\
    \ a test that checks the median of the following lists:", "    l = sort(l)\n \
    \   mid = length(l)\n    if mid == 0\n        return l[1]\n    \n    if mid %\
    \ 2 == 0\n        return median(l[1..mid/2])\n    else\n        return median(l[mid/2..mid])\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20], by=median)\n</cell>\n<text>\nThe median of a\
    \ finite set of numbers is called the \"typical\" number. \nThe median is often\
    \ called the \"middle number\" because it is the number in the middle. \nThe median\
    \ is often called the \"middle value\" because it is the value that is in the\
    \ middle.", "    sort(l)\n    return l[floor(Int64, length(l)/2)]\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the median of a list of numbers. \nThe function\
    \ should take a list of numbers and return the median of the numbers. \nThe median\
    \ is the number in the middle of the list that has the highest number of elements.\n\
    For example, if the list is [3, 1, 2, 4, 5] then the median is 3.", "    l = sort(l)\n\
    \    mid = floor(Int, length(l)+1)/2\n    if length(l)%2==1\n        return l[mid]\n\
    \    else\n        return (l[mid-1] + l[mid])/2\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<code language=julia-1.5>\nmedian([-10,\
    \ 4, 6, 1000, 10, 20], dims=1)\n</cell>\n<text>\nThe median of a set of numbers\
    \ is defined as the value separating the higher half of the numbers from the lower\
    \ half. For example, in the set {1, 2, 3, 4}, the median is 3. If there are an\
    \ even number of elements, then the median is the average of the two middle values.",
  "    sort(l)\n    length(l) == 0 ? 0.0 : (l[end-1] + l[end])/2\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<text>\nThe median of\
    \ a finite set of numbers is called the \"typical\" median.", "    l = sort(l)\n\
    \    mid = length(l)\n    if mid == 0 \n        throw(DomainError(\"\"))\n   \
    \ end\n    \n    if mid == 1\n        return l[1]\n    end\n    \n    if l[mid]\
    \ == l[mid - 1]\n        return l[mid]\n    end\n    \n    mid1 = mid - 1\n  \
    \  mid2 = mid + 1\n    \n    if l[mid1] > l[mid2]\n        return l[mid1]\n  \
    \  end\n    \n    return l[mid2]\nend", "    sort(l)\n    l = l[end]\n    mid\
    \ = l/2\n    if l % 2 == 0\n        return l[mid]\n    else\n        return (l[mid-1]\
    \ + l[mid])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1,\
    \ 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the median\
    \ of a list of numbers. \nThe function should take a list of numbers as an argument\
    \ and return the median of the numbers in the list.\nThe median is the number\
    \ in the middle of the list that has the smallest absolute value. If there are\
    \ an even number of numbers in the list, then the median is the mean of the two\
    \ middle numbers.\nFor example, if the list is [4, 6, 8, 10, 12], then the median\
    \ is 10 (the average of the middle two numbers is 10).", "    sort(l)\n    l =\
    \ l[end]\n    mid = floor(Int, length(l) / 2)\n    if length(l) % 2 == 0\n   \
    \     return l[mid]\n    else\n        return (l[mid] + l[mid-1]) / 2\n    end\n\
    end", "    l = sort(l)\n    mid = length(l)\n    if mid == 0\n        return l[1]\n\
    \    if mid == 1\n        return l[1]\n    if l[mid] == l[mid-1]\n        return\
    \ l[mid]\n    return median(l)\nend\n</cell>\n<code language=julia-1.3>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function to compute the mean\
    \ of a list of numbers.", "    sort(l)\n    mid = length(l)\n    if mid == 0\n\
    \        throw(DomainError(\n            \"median requires at least one element\
    \ to sort and cannot be called on empty list\"))\n    end\n    mid\n    \n   \
    \ if mid % 2 == 0\n        return (l[mid/2] + l[mid/2-1])/2\n    else\n      \
    \  return l[mid/2]\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nThe median of a finite set of numbers is called the \"\
    middle\" of the set. For example, the median of the set {1, 2, 3, 4} is (2 + 4)\
    \ / 2 = 2.5.", "    l = sort(l)\n    mid = length(l)\n    if mid % 2 == 0\n  \
    \      return l[mid/2]\n    else\n        return l[mid/2 - 1] + l[mid/2]/2\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the mean of a list of numbers.\
    \ \nThe function should take a list of numbers as an argument and return the mean\
    \ of the numbers. \nThe function should raise an error if the list is empty.",
  "    l = sort(l)\n    mid = length(l)\n    if mid % 2 == 1\n        return l[mid/2]\n\
    \    else\n        return (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise\nWrite a function\
    \ that returns the median of a list of numbers. Write a test that checks that\
    \ your function works.", "    l = sort(l)\n    mid = length(l)\n    if mid ==\
    \ 1\n        return l[1]\n    end\n    if mid == 2\n        return median(l[1..end-1])\
    \ + l[end]\n    end\n    \n    mid = floor(mid)\n    if mid == 0\n        return\
    \ median(l[1..end-1]) + l[end]\n    end\n    \n    left  = median(l[1..mid])\n\
    \    right = median(l[mid+1..end])\n    \n    return left + right/2\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the median of a list of numbers. \nThe median is the number in\
    \ the middle of the sorted list of numbers.", "    sort(l)\n    length(l) == 0\
    \ ? 0.0 : (l[end-1] + l[end])/2\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise: Write a function that returns the median\
    \ of a list of numbers. Write a test that checks that your function works.", " \
    \   \n    l = sort(l)\n    \n    if length(l)%2 == 1\n        return l[(length(l)+1)/2]\n\
    \    else\n        return 0.5 * (l[end] + l[end-1])\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    l = sort(l)\n    mid = length(l)\n    if mid % 2\
    \ == 0\n        return l[mid/2]\n    else\n        return (l[mid/2] + l[mid/2\
    \ - 1])/2.0\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2,\
    \ 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise 4\nWrite a function to compute the mean of a list of\
    \ numbers.", "    sort(l)\n    l = l[end]\n    mid = floor((length(l)+1)/2)\n\
    \    if length(l)%2==0\n        return l[mid]\n    else\n        return 0.5*(l[mid-1]+l[mid])\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.3>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function to compute the mean of a list of numbers.", "   \
    \ median = sort(l)[end]\n    return median\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nThe median of a finite set of numbers is called\
    \ the \"middle\" of the set. For example, in the set {1, 2, 3, 4}, the median\
    \ is (2 + 3) / 2 = 2.5.", "    sort(l)\n    l = l[end]\n    i = findfirst(x ->\
    \ x < l, l)\n    if i == length(l) \n        return l\n    else \n        return\
    \ l[(i + 1) \xF7 2]\nend", "    sort(l)\n    mid = length(l)\n    if mid == 0\
    \ \n        throw(DomainError(string(\"median of empty list\")))\n    end\n  \
    \  \n    if mid == 1 \n        return l[1]\n    end", "    sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n<text>\nExercise 3: Write\
    \ a function to compute the mean of a list of numbers.", "    \n    l = sort(l)\n\
    \    \n    if length(l)%2 == 1\n        return median(l[end-1]) + median(l[end])/2\n\
    \    else\n        return median(l[end-1]) + median(l[end])/2\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the mean of a list of numbers.", "    median = sort(l)[end]\n \
    \   return median\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the median of\
    \ a list of numbers in descending order.", "    sort(l)\n    mid = floor(Int,\
    \ length(l)/2)\n    if length(l) % 2 == 1\n        return l[mid]\n    else\n \
    \       return (l[mid] + l[mid-1]) / 2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ median of a list of numbers. If the length of the list is even, the median is\
    \ the mean of the two middle numbers.", "    sort(l)\n    l = l[end]\n    l =\
    \ l[1:end-1]\n    l = l[end]\n    l = l[1:end-1]\n    l = l[end]\n    l = l[1:end-1]\n\
    \    l = l[end]\n    l = l[1:end-1]\n    l = l[end]\n    l = l[1:end-1]\n    l\
    \ = l[end]\n    l = l[1:end-1]\n    l = l[end]\n    l = l[1:end-1]\n    l = l[end]\n\
    \    l = l[1:end-1]\n    l = l[end]\n    l = l[1:end-1]\n    l = l[end]\n    l\
    \ = l[1:end-1]\n    l = l[end]\n    l = l[1:end-1]\n    l = l[end]\n    l = l[1:end-1]\n\
    \    l = l[end]\n    l = l[1:end-1]\n    l = l[end]\n    l = l[1:end-1]\n    l\
    \ = l[end]\n    l = l[1:end-1]\n    l = l[end]\n    l = l[1:end-1]\n    l = l[end]\n\
    \    l = l[1:end-1]\n    l = l[end]\n    l = l[1:end-1]\n    l = l[end]\n    l\
    \ = l[1:end-1]\n    l = l[end]\n    l = l[1:end-1]\n    l = l[end]\n    l = l[1:end-1]\n\
    \    l = l[end]\n    l = l[1:end-1]\n    l = l[end]\n    l = l[1:end-1]\n    l\
    \ = l[end]\n    l = l[1:end-1]\n    l = l[end]\n    l = l[1:end-1]\n    l = l[end]\n\
    \    l = l[1:end-1]\n    l = l[end]\n    l = l[1:end-1]\n    l = l[end]\n    l\
    \ = l[1:end-1]\n    l = l[end]\n    l = l[1:end-1]\n    l = l[end]\n    l = l[1:end-1]\n\
    \    l = l[end]\n    l = l[1:end-1]\n    l = l[end]\n    l = l[1:end-1]\n    l\
    \ = l[end]\n    l = l[1:end-1]\n    l = l[end]\n    l = l[1:end-1]\n    l = l[end]\n\
    \    l = l[1:end-1]\n    l = l[end]\n    l = l[1:end-1]\n    l = l[end]\n    l\
    \ = l[1:end-1]\n    l = l[end]\n    l = l[1:end-1]\n    l = l[end]\n    l = l[1:end-1]\n\
    \    ", "    sort(l)\n    return l[floor(Int64, length(l)/2)]\nend\n</cell>\n\
    <code language=julia-1.3>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.3>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise\nWrite a function\
    \ that returns the median of a list of numbers. \nWrite a function that returns\
    \ the median of a list of numbers. \nWrite a function that returns the median\
    \ of a list of numbers. \nWrite a function that returns the median of a list of\
    \ numbers. \nWrite a function that returns the median of a list of numbers. \n\
    Write a function that returns the median of a list of numbers. \nWrite a function\
    \ that returns the median of a list of numbers. \nWrite a function that returns\
    \ the median of a list of numbers. \nWrite a function that returns the median\
    \ of a list of numbers. \nWrite a function that returns the median of a list of\
    \ numbers. \nWrite a function that returns the median of a list of numbers. \n\
    Write a function that returns the median of a list of numbers. \nWrite a function\
    \ that returns the median of a list of numbers. \nWrite a function that returns\
    \ the median of a list of numbers. \nWrite a function that returns the median\
    \ of a list of numbers. \nWrite a function that returns the median of a list of\
    \ numbers. \nWrite a function that returns the median of a list of numbers. \n\
    Write a function that returns the median of a list of numbers. \nWrite a function\
    \ that returns the median of a list of numbers. \nWrite a function that returns\
    \ the median of a list of numbers. \nWrite a function that returns the median\
    \ of a list of numbers. \nWrite a function that returns the median of a list of\
    \ numbers. \nWrite a function that returns the median of a list of numbers. \n\
    Write a function that returns the median of a list of numbers. \nWrite a function\
    \ that returns the median of a list of numbers. \nWrite a function that returns\
    \ the median of a list of numbers. \nWrite a function that returns the median\
    \ of a list of numbers. \nWrite a function that returns the median of a list of\
    \ numbers. \nWrite a function that returns the median of a list of numbers. \n\
    Write a function that returns the median of a list of numbers. \nWrite a function\
    \ that returns the median of a list of numbers. \nWrite a function that returns\
    \ the median of a list of numbers. \nWrite a function that returns the median\
    \ of a list of numbers. \nWrite a function that returns the median of a list of\
    \ numbers. \nWrite a function that returns the median of a list of numbers. \n\
    Write a function that returns the median of a list of numbers. \nWrite a function\
    \ that returns the median of a list of numbers. \nWrite a function that returns\
    \ the median of a list of numbers. \nWrite a function that returns the median\
    \ of a list of numbers. \nWrite a function that returns the median of a list of\
    \ numbers. \nWrite a function that returns the median of a list of numbers. \n\
    Write a function that returns the median of a list of numbers. \nWrite a function\
    \ that returns the median of a list of numbers. \nWrite a function that returns\
    \ the median of a list of numbers. \nWrite a function that returns the median\
    \ of a list of number", "    sort(l)\n    return l[floor(Int64, length(l)/2)]\n\
    end\n</cell>\n<code language=julia-1.3>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.3>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the median of a list of numbers. Write a test\
    \ that passes when the function returns the correct median and fails otherwise.",
  "    l = sort(l)\n    mid = length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n\
    \    else\n        return 0.5 * (l[mid/2] + l[mid/2 - 1])\n    end\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that returns the mean of a list of numbers.",
  "    sort(l)\n    return l[floor(Int, length(l)/2)]\nend\n</cell>\n<code language=julia-1.3>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.3>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ mean of a list of numbers.", "    l = sort(l)\n    mid = length(l)\n    if mid\
    \ == 0\n        throw(DomainError(\n            \"median requires at least one\
    \ element\"))\n    end\n    mid = round(Int, mid)\n    if mid % 2 == 0\n     \
    \   return l[mid/2]\n    else\n        return (l[mid/2] + l[mid/2 - 1])/2\n  \
    \  end\nend", "    l = sort(l)\n    mid = length(l)\n    if mid % 2 == 0\n   \
    \     return l[mid/2]\n    else\n        return (l[mid/2] + l[mid/2 - 1])/2.0\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\n\
    Exercise\nWrite a function that returns the median of a list of numbers, rounded\
    \ to two decimal places.", "    \n    sort(l)\n    \n    if length(l)%2 == 1\n\
    \        return median(l[floor(length(l)/2)-1:floor(length(l)/2)+1])\n    else\n\
    \        return median(l[floor(length(l)/2)-1:floor(length(l)/2)+2])\n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n    mid = length(l)\n\
    \    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return (l[mid/2]\
    \ + l[mid/2 - 1]) / 2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nThe median of a finite set of numbers is called the \"\
    typical\" element. \nThe median is often called the \"middle element\" because\
    \ it is the middle number of the sorted set.\nThe median is often called the \"\
    middle element\" because it is the middle number of the sorted set.\nThe median\
    \ is often called the \"middle element\" because it is the middle number of the\
    \ sorted set.\nThe median is often called the \"middle element\" because it is\
    \ the middle number of the sorted set.\nThe median is often called the \"middle\
    \ element\" because it is the middle number of the sorted set.\nThe median is\
    \ often called the \"middle element\" because it is the middle number of the sorted\
    \ set.\nThe median is often called the \"middle element\" because it is the middle\
    \ number of the sorted set.\nThe median is often called the \"middle element\"\
    \ because it is the middle number of the sorted set.\nThe median is often called\
    \ the \"middle element\" because it is the middle number of the sorted set.\n\
    The median is often called the \"middle element\" because it is the middle number\
    \ of the sorted set.\nThe median is often called the \"middle element\" because\
    \ it is the middle number of the sorted set.\nThe median is often called the \"\
    middle element\" because it is the middle number of the sorted set.\nThe median\
    \ is often called the \"middle element\" because it is the middle number of the\
    \ sorted set.\nThe median is often called the \"middle element\" because it is\
    \ the middle number of the sorted set.\nThe median is often called the \"middle\
    \ element\" because it is the middle number of the sorted set.\nThe median is\
    \ often called the \"middle element\" because it is the middle number of the sorted\
    \ set.\nThe median is often called the \"middle element\" because it is the middle\
    \ number of the sorted set.\nThe median is often called the \"middle element\"\
    \ because it is the middle number of the sorted set.\nThe median is often called\
    \ the \"middle element\" because it is the middle number of the sorted set.\n\
    The median is often called the \"middle element\" because it is the middle number\
    \ of the sorted set.\nThe median is often called the \"middle element\" because\
    \ it is the middle number of the sorted set.\nThe median is often called the \"\
    middle element\" because it is the middle number of the sorted set.\nThe median\
    \ is often called the \"middle element\" ", "    sort(l)\n    mid = length(l)\n\
    \    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return (l[mid/2]\
    \ + l[mid/2 - 1])/2.0\n    end\nend\n</code>\n<|/ a tags=julia,median,performance\
    \ |>\n<| c |>\nThe median of a set of numbers is defined as the value that appears\
    \ more than n/2 times in the set. Your code does not do that. Also, the median\
    \ of a set of numbers is defined as the value that appears more than n/2 times\
    \ in the set. Your code does not do that. Also, the median of a set of numbers\
    \ is defined as the value that appears more than n/2 times in the set. Your code\
    \ does not do that. Also, the median of a set of numbers is defined as the value\
    \ that appears more than n/2 times in the set. Your code does not do that. Also,\
    \ the median of a set of numbers is defined as the value that appears more than\
    \ n/2 times in the set. Your code does not do that. Also, the median of a set\
    \ of numbers is defined as the value that appears more than n/2 times in the set.\
    \ Your code does not do that. Also, the median of a set of numbers is defined\
    \ as the value that appears more than n/2 times in the set. Your code does not\
    \ do that. Also, the median of a set of numbers is defined as the value that appears\
    \ more than n/2 times in the set. Your code does not do that. Also, the median\
    \ of a set of numbers is defined as the value that appears more than n/2 times\
    \ in the set. Your code does not do that. Also, the median of a set of numbers\
    \ is defined as the value that appears more than n/2 times in the set. Your code\
    \ does not do that. Also, the median of a set of numbers is defined as the value\
    \ that appears more than n/2 times in the set. Your code does not do that. Also,\
    \ the median of a set of numbers is defined as the value that appears more than\
    \ n/2 times in the set. Your code does not do that. Also, the median of a set\
    \ of numbers is defined as the value that appears more than n/2 times in the set.\
    \ Your code does not do that. Also, the median of a set of numbers is defined\
    \ as the value that appears more than n/2 times in the set. Your code does not\
    \ do that. Also, the median of a set of numbers is defined as the value that appears\
    \ more than n/2 times in the set. Your code does not do that. Also, the median\
    \ of a set of numbers is defined as the value that appears more than n/2 times\
    \ in the set. Your code does not do that. Also, the median of a set of numbers\
    \ is defined as the value that appears more than n/2 times in the set. Your code\
    \ does not do that. Also, the median of a set of numbers is ", "    sort(l)\n\
    \    return l[floor(Int, length(l)/2)]\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nThe median of a finite set of numbers is called\
    \ the \"typical\" number. \nThe median is often called the \"middle number\" because\
    \ it is often the number in the middle. \nThe median is often called the \"middle\
    \ element\" because it is often the element in the middle. \nThe median is often\
    \ called the \"middle value\" because it is often the value that is the middle\
    \ of the set of numbers.", "    sort(l)\n    length(l) == 0 ? 0.0 : (l[end-1]\
    \ + l[end])/2\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n\
    <text>\nMedian Absolute Deviation\nThe median absolute deviation (MAD) is a measure\
    \ of statistical dispersion, \nthat measures the dispersion of a set of data points\
    \ from the rest of the \npopulation. MAD is defined as the median of the absolute\
    \ deviations from the \nmedian.", "    l = sort(l)\n    mid = length(l)\n    if\
    \ mid % 2 == 0\n        return l[mid/2]\n    else\n        return (l[mid/2] +\
    \ l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ mean of a list of numbers.", "    sort(l)\n    mid = length(l)\n    if mid ==\
    \ 0 \n        throw(BoundsError(\"median of empty list\"))\n    end\n    mid\n\
    end\n</cell>\n<code language=julia-1.4>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.4>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the median of a list of numbers. \nThe function\
    \ should take an argument of type Vector{Int64}.\nThe function should return an\
    \ Int64 value.", "    sort(l)\n    l = l[end]\n    mid = l/2\n    if l % 2 ==\
    \ 0\n        return mid\n    else\n        return mid + 1\n    end\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work if you have a list of negative numbers.\
    \ Try `median([-10, 4, 6, 1000, 10, 20])`.\n<|/ c |>\n<| c |>\nI added a version\
    \ that works with negative numbers. Thanks for the suggestion.\n<|/ c |>\n<| a\
    \ dscore=0 |>\n<code>", "    sort(l)\n    length(l) == 0 ? 0.0 : (length(l) /\
    \ 2)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns the median\
    \ of a list of numbers. Your function should take a list of numbers as an argument,\
    \ and return the median of the numbers in the list. Test your function on a list\
    \ of numbers that you generated in the previous exercise.", "    \n    sortedlist\
    \ = sort(l)\n    \n    mid = length(sortedlist) / 2\n    \n    if length(sortedlist)\
    \ % 2 == 0\n        return sortedlist[mid]\n    else\n        return (sortedlist[mid]\
    \ + sortedlist[mid + 1]) / 2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nThe median of a finite set of numbers is called\
    \ the \"middle\" of the set. For example, the median of the set {1, 2, 3} is (2\
    \ + 3) / 2 = 2.5.", "    l = sort(l)\n    mid = length(l)\n    if mid % 2 == 0\n\
    \        return l[mid/2]\n    else\n        return (l[mid/2] + l[mid/2 - 1])/2.0\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ mean of a list of numbers.", "    sort(l)\n    mid = length(l)\n    if mid ==\
    \ 0 \n        throw(BoundsError(\"median requires at least one element\"))\n \
    \   end\n    \n    if mid % 2 == 0\n        return l[mid/2]\n    else\n      \
    \  return (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.4>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise: Write a function that returns the\
    \ mean of a list of numbers.", "    median = sort(l)[end]\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\n\
    Write a function to compute the mean of a list of numbers.", "    sort(l)\n  \
    \  length(l) == 0 ? return 0.0 : l[floor(Int64, length(l) / 2)]\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the median of a list of numbers. \nThe function\
    \ should take a list of numbers as an argument, and return the median of the list.",
  "    sort(l)\n    return l[floor(Int64, length(l)/2)]\nend", "    sort(l)\n    return\
    \ l[floor(Int64, length(l)/2)]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the median\
    \ of a list of numbers. \nThe function should work for both vectors and matrices.\n\
    The function should work for both positive and negative numbers.", "    l = sort(l)\n\
    \    mid = length(l)\n    if mid == 1\n        return l[1]\n    end\n    \n  \
    \  if mid % 2 == 0\n        return l[mid/2]\n    else\n        return (l[mid/2]\
    \ + l[mid/2 - 1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the median\
    \ of a list of numbers, rounded to two decimal places.", "    l = sort(l)\n  \
    \  mid = length(l)\n    if mid == 0\n        return l[1]\n    \n    if mid % 2\
    \ == 0\n        return l[mid / 2]\n    else\n        return (l[mid / 2] + l[(mid\
    \ - 1) / 2]) / 2\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the mode of a list of numbers. \nThe mode is the number that appears most frequently\
    \ in the list.\nThe function should return the mode of the list l as a Float64.\
    \ \nThe function should also return the number of times the mode appears in the\
    \ list l.", "    sort(l)\n    mid = length(l)\n    if mid == 0 \n        throw(ZeroDivisionError())\n\
    \    end\n    return l[mid]\nend", "    l = sort(l)\n    mid = floor(Int, length(l)+1)/2\n\
    \    if length(l)%2 == 1\n        return l[mid]\n    else\n        return (l[mid-1]\
    \ + l[mid])/2\n    end\nend\n</cell>\n<code language=julia-1.4>\nmedian([3, 1,\
    \ 2, 4, 5])\n</cell>\n<code language=julia-1.4>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the median\
    \ of a list of numbers. Write a test that passes when the function returns the\
    \ correct result, and a test that fails when the function returns the incorrect\
    \ result.", "    sort(l)\n    l = l[end]\n    i = findfirst(x -> x < l, l)\n \
    \   if i == length(l) \n        return l[end]\n    else \n        return l[(i\
    \ + 1) \xF7 2]\nend\n</cell>\n<code language=julia-1.3>\nmedian([3, 1, 2, 4, 5])\n\
    </cell>\n<code language=julia-1.3>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the mode of a list of numbers.\
    \ \nThe mode is the number that appears most often in the list.\nFor example,\
    \ mode([3, 1, 2, 4, 5]) should return 3.\nHint: Use a dictionary to keep track\
    \ of counts of each number in the list.", "    l = sort(l)\n    mid = floor(Int,\
    \ length(l)+1)/2\n    if length(l)%2==0\n        return l[mid]\n    else\n   \
    \     return (l[mid-1] + l[mid])/2\n    end\nend", "    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0\n        return l[1]\n    \n    if mid % 2 == 0\n\
    \        return (l[mid / 2] + l[mid / 2 - 1]) / 2\n    else\n        return l[mid\
    \ / 2]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the median of a list of numbers.\
    \ \nThe function should take a list of numbers and return the median of the numbers.\
    \ \nThe median is the number in the middle of the list that has the highest value.",
  "    l = sort(l)\n    mid = length(l)\n    if mid == 0 \n        throw(BoundsError(\"\
    median of empty list\"))\n    end\n    \n    mid = round(Int64, mid)\n    if mid\
    \ % 2 == 0\n        return l[mid/2]\n    else\n        return (l[mid/2] + l[mid/2\
    \ - 1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2,\
    \ 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise: Write a function that returns the median of a list\
    \ of numbers, rounded to the nearest integer.", "    l = sort(l)\n    mid = length(l)\n\
    \    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return (l[mid/2]\
    \ + l[mid/2 - 1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the mean of\
    \ a list of numbers.", "    l = sort(l)\n    mid = length(l)\n    if mid == 0\
    \ \n        return l[1]\n    \n    if mid == 1 \n        return l[1]\n    \n \
    \   if l[mid] == l[mid-1] \n        return l[mid]\n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    sort(l)\n    return l[floor(Int64,\
    \ length(l)/2)]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<text>\nExercise 3\nWrite a function that computes the mean of\
    \ a list of numbers.", "    l = sort(l)\n    mid = length(l)\n    if mid == 0\n\
    \        throw(DomainError(\n            \"median requires at least one element\"\
    ))\n    end\n    mid = round(Int64, mid)\n    if mid % 2 == 0\n        return\
    \ (l[mid-1] + l[mid]) / 2\n    else\n        return l[mid]\n    end\nend\n</cell>\n\
    <text>\nExercise: Write a function that returns the median of a list of numbers.\
    \ Write a test that passes when the function returns the correct value.", "  \
    \  sort(l)\n    l = l[end]\n    i = findfirst(x -> x < l, l)\n    if i == length(l)\
    \ \n        return l[end]\n    else \n        return l[(i + 1) \xF7 2]\nend\n\
    </cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the mean of a list of numbers.", "    l = sort(l)\n    mid = length(l)\n\
    \    if mid % 2 == 1\n        return l[mid/2]\n    else\n        return (l[mid/2]\
    \ + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the mean of\
    \ a list of numbers. Use a for loop to iterate over the list.", "    l = sort(l)\n\
    \    mid = length(l)\n    if mid == 0 \n        return NaN\n    \n    mid = round(mid)\n\
    \    if mid == 1 \n        return l[1]\n    \n    mid = round(mid)\n    if mid\
    \ == 2 \n        return l[end]\n    \n    mid = round(mid)\n    if mid == length(l)\n\
    \        return l[mid-1]\n    \n    mid = round(mid)\n    if mid == length(l)-1\n\
    \        return l[mid]\n    \n    mid = round(mid)\n    if mid == length(l)-2\n\
    \        return l[mid+1]\n    \n    mid = round(mid)\n    if mid == length(l)-3\n\
    \        return l[mid+2]\n    \n    mid = round(mid)\n    if mid == length(l)-4\n\
    \        return l[mid+3]\n    \n    mid = round(mid)\n    if mid == length(l)-5\n\
    \        return l[mid+4]\n    \n    mid = round(mid)\n    if mid == length(l)-6\n\
    \        return l[mid+5]\n    \n    mid = round(mid)\n    if mid == length(l)-7\n\
    \        return l[mid+6]\n    \n    mid = round(mid)\n    if mid == length(l)-8\n\
    \        return l[mid+7]\n    \n    mid = round(mid)\n    if mid == length(l)-9\n\
    \        return l[mid+8]\n    \n    mid = round(mid)\n    if mid == length(l)-10\n\
    \        return l[mid+9]\n    \n    mid = round(mid)\n    if mid == length(l)-11\n\
    \        return l[mid+10]\n    \n    mid = round(mid)\n    if mid == length(l)-12\n\
    \        return l[mid+11]\n    \n    mid = round(mid)\n    if mid == length(l)-13\n\
    \        return l[mid+12]\n    \n    mid = round(mid)\n    if mid == length(l)-14\n\
    \        return l[mid+13]\n    \n    mid = round(mid)\n    if mid == length(l)-15\n\
    \        return l[mid+14]\n    \n    mid = round(mid)\n    if mid == length(l)-16\n\
    \        return l[mid+15]\n    \n    mid = round(mid)\n    if mid == length(l)-17\n\
    \        return l[mid+16]\n    \n    mid = round(mid)\n    if mid == length(l)-18\n\
    \        return l[mid+17]\n    \n    mid = round(mid)\n    if mid == length(l)-19\n",
  "    sort(l)\n    \n    mid = length(l)\n    if mid == 0 \n        return l[1]\n\
    \    \n    mid = round(Int64, mid)\n    \n    if mid % 2 == 0\n        return\
    \ l[mid/2]\n    \n    left = (mid-1)/2\n    right = (mid+1)/2\n    \n    if l[left]\
    \ > l[right]\n        return median(l[left:right])\n    else\n        return median(l[left:right+1])\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <text>\nThe median of a list of numbers is defined as the value separating the\
    \ higher half of the numbers from the lower half. For example, in the list [3,\
    \ 1, 2, 4, 5], the median is 3.", "    l = sort(l)\n    mid = length(l)\n    if\
    \ mid == 0 \n        return l[1] \n    else \n        return l[mid]\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the mean of a list of numbers.", "    sort(l)\n    return l[floor(Int64,\
    \ length(l)//2)]\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the median of a list of numbers. \nThe function should take a list of numbers\
    \ and return the median of the numbers. \nThe median is the number in the middle\
    \ of the sorted list.\nThe median is defined as the value separating the higher\
    \ half of a sorted list from the lower half.\nThe median is often called the \"\
    typical\" median because it is often the number that appears near the middle of\
    \ the list.\nThe median is defined as the value separating the higher half of\
    \ a sorted list from the lower half.\nThe median is often called the \"typical\"\
    \ median because it is often the number that appears near the middle of the list.\n\
    The median is defined as the value separating the higher half of a sorted list\
    \ from the lower half.\nThe median is often called the \"typical\" median because\
    \ it is often the number that appears near the middle of the list.\nThe median\
    \ is defined as the value separating the higher half of a sorted list from the\
    \ lower half.\nThe median is often called the \"typical\" median because it is\
    \ often the number that appears near the middle of the list.\nThe median is defined\
    \ as the value separating the higher half of a sorted list from the lower half.\n\
    The median is often called the \"typical\" median because it is often the number\
    \ that appears near the middle of the list.\nThe median is defined as the value\
    \ separating the higher half of a sorted list from the lower half.\nThe median\
    \ is often called the \"typical\" median because it is often the number that appears\
    \ near the middle of the list.\nThe median is defined as the value separating\
    \ the higher half of a sorted list from the lower half.\nThe median is often called\
    \ the \"typical\" median because it is often the number that appears near the\
    \ middle of the list.\nThe median is defined as the value separating the higher\
    \ half of a sorted list from the lower half.\nThe median is often called the \"\
    typical\" median because it is often the number that appears near the middle of\
    \ the list.\nThe median is defined as the value separating the higher half of\
    \ a sorted list from the lower half.\nThe median is often called the \"typical\"\
    \ median because it is often the number that appears near the middle of the list.\n\
    The median is defined as the value separating the higher half of a sorted list\
    \ from the lower half.\nThe median is often called the \"typical\" median because\
    \ it is often the number that appears near the middle of the list.\nThe median\
    \ is defined as the value separating the higher half of a sorted list from the\
    \ lower half.\nThe median is often ", "    sort(l)\n    mid = length(l)//2\n \
    \   if length(l)%2 == 0\n        return l[mid]\n    else\n        return (l[mid]\
    \ + l[mid-1])/2\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the mean of a list of numbers. \nThe function should take a list of\
    \ numbers and return the mean of the list.\nThe function should raise an error\
    \ if the list is empty.\nThe function should raise an error if the list contains\
    \ non-numbers.\nThe function should raise an error if the list contains negative\
    \ numbers.", "    median = sort(l)[end]\n    return median\nend\n</cell>\n<code\
    \ language=julia-1.3>", "    l = sort(l)\n    mid = length(l)\n    if mid == 0\n\
    \        throw(DomainError(\n            \"median can only be applied to a non-empty\
    \ vector\"))\n    end\n    \n    if mid == 1\n        return l[1]\n    end\n \
    \   \n    if l[mid] == l[mid - 1]\n        return l[mid]\n    end\n    \n    if\
    \ l[mid] == l[mid - 2]\n        return l[mid - 1] + l[mid]/2\n    end\n    \n\
    \    if l[mid] == l[mid - 3]\n        return l[mid - 2] + l[mid] + l[mid - 1]/3\n\
    \    end\n    \n    return l[mid]\nend", "    sort(l)\n    length(l) == 0 ? 0.0\
    \ : (l[floor(length(l)/2)] + l[ceil(length(l)/2)])/2\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nThe median of a finite set of numbers is called\
    \ the \"typical\" number. \nThe median is often called the \"middle\" number because\
    \ it is often the number \nthat would be present at the middle of a data set when\
    \ sorted.", "    l = sort(l)\n    mid = length(l)\n    if mid == 0 \n        return\
    \ l[1] \n    \n    mid1 = mid - 1\n    mid2 = mid + 1\n    \n    if l[mid2] >\
    \ l[mid1] \n        return l[mid2] \n    else \n        return l[mid1]\nend\n\
    </cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the median of a list of numbers. \nThe function should take a list\
    \ of numbers as an argument, and return a single number.", "    l = sort(l)\n\
    \    mid = length(l)\n    if mid == 0 \n        return l[1]\n    \n    if mid\
    \ == 1\n        return l[1]\n    \n    if l[mid] == l[mid-1]\n        return l[mid]\n\
    \    \n    if l[mid] == l[mid+1]\n        return l[mid]\n    \n    if l[mid] ==\
    \ l[mid-1] + l[mid+1]\n        return l[mid]\n    \n    if l[mid] == l[mid-1]\
    \ - l[mid+1]\n        return l[mid]\n    \n    if l[mid] == l[mid-1] + l[mid+1]\
    \ - l[mid]\n        return l[mid]\n    \n    if l[mid] == l[mid-1] - l[mid+1]\n\
    \        return l[mid]\n    \n    if l[mid] == l[mid-1] + l[mid+1] + l[mid]\n\
    \        return l[mid]\n    \n    if l[mid] == l[mid-1] - l[mid+1]\n        return\
    \ l[mid]\n    \n    if l[mid] == l[mid-1] - l[mid+1] + l[mid]\n        return\
    \ l[mid]\n    \n    if l[mid] == l[mid-1] + l[mid+1] - l[mid]\n        return\
    \ l[mid]\n    \n    if l[mid] == l[mid-1] - l[mid+1]\n        return l[mid]\n\
    \    \n    if l[mid] == l[mid-1] + l[mid+1] + l[mid]\n        return l[mid]\n\
    \    \n    if l[mid] == l[mid-1] - l[mid+1]\n        return l[mid]\n    \n   \
    \ if l[mid] == l[mid-1] + l[mid+1] - l[mid]\n        return l[mid]\n    \n   \
    \ if l[mid] == l[mid-1] - l[mid+1]\n        return l[mid]\n    \n    if l[mid]\
    \ == l[mid-1] + l[mid+1] + l[mid]\n        return l[mid]\n    \n    if l[mid]\
    \ == l[mid-1] - l[mid+1]\n        return l[mid]\n    \n    if l[mid] == l[mid-1]\
    \ + l[mid+1] - l[mid]\n        return l[mid]\n    \n    if l[mid] == l[mid-1]\
    \ - l[mid+1]\n        return l[mid]\n    \n    if l[mid] == l[mid-1] + l[", " \
    \   sort(l)\n    mid = length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n\
    \    else\n        return (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nThe median of a finite set\
    \ of numbers is called the \"typical\" number. \nThe median is often called the\
    \ \"middle element\", \nbut in statistics it is often called the \"representative\
    \ element\".", "    l = sort(l)\n    mid = length(l)\n    if mid == 0\n      \
    \  return NaN\n    \n    mid = round(Int64, mid)\n    if mid % 2 == 0\n      \
    \  return l[mid/2]\n    else\n        return (l[mid/2] + l[mid/2 - 1]) / 2\nend",
  "    l = sort(l)\n    mid = length(l)\n    if mid % 2 == 1\n        return l[mid/2]\n\
    \    else\n        return (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=julia |>\n<code>", "    l = sort(l)\n    mid = length(l)\n\
    \    if mid == 0\n        return l[1]\n    \n    if mid == 1\n        return l[1]\n\
    \    \n    if l[mid] == l[mid - 1]\n        return l[mid]\n    \n    mid = floor((mid\
    \ + 0.5) / 2)\n    if l[mid] == l[mid - 1]\n        return l[mid]\n    \n    if\
    \ l[mid] > l[mid - 1]\n        return median(l[mid-1:mid+1])\n    else\n     \
    \   return median(l[mid-1:mid])\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ median of a list of numbers. Write a test that checks that your function works.",
  "    l = sort(l)\n    mid = floor(Int, length(l)+1)/2\n    if length(l)%2 == 1\n\
    \        return l[mid]\n    else\n        return (l[mid-1] + l[mid])/2\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the median of a list of numbers. Write a test\
    \ that checks that your function returns the correct value.", "    sort(l)\n \
    \   return l[floor(Int64, length(l)/2)]\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ mean of a list of numbers.", "    l = sort(l)\n    mid = length(l)\n    if mid\
    \ % 2 == 0\n        return l[mid/2]\n    else\n        return (l[mid/2] + l[mid/2\
    \ - 1])/2.0\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2,\
    \ 4, 5])\n</cell>\n<text>\nThe median of a list of numbers is defined as the value\
    \ separating the higher half of the list from the lower half. For example, in\
    \ the list [3, 1, 2, 4, 5], the median is 3. The median is the value separating\
    \ the higher half of the list from the lower half. In the list [-10, 4, 6, 1000,\
    \ 10, 20], the median is 15. The median is the value separating the higher half\
    \ of the list from the lower half. In the list [-10, 4, 6, 1000, 10, 20, 30],\
    \ the median is 15. The median is the value separating the higher half of the\
    \ list from the lower half.", "    l = sort(l)\n    mid = length(l)\n    if mid\
    \ % 2 == 0\n        return l[mid/2]\n    else\n        return (l[mid/2] + l[mid/2\
    \ - 1])/2.0\n    end\nend\n</cell>\n<code language=julia-1.1>\nmedian([3, 1, 2,\
    \ 4, 5])\n</cell>\n<code language=julia-1.1>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the mode of a list\
    \ of numbers. \nThe mode is the number that appears most often in the list.\n\
    For example, mode([3, 1, 2, 4, 5]) should return 3.\nHint: Use a dictionary to\
    \ keep track of counts of numbers.", "    l = sort(l)\n    mid = length(l)\n \
    \   if mid % 2 == 0\n        return l[mid/2]\n    else\n        return (l[mid/2]\
    \ + l[mid/2 - 1])/2\n    end\nend\n</cell>\n<code language=julia-1.3>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.3>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise: Write a function that returns the mean of a\
    \ list of numbers. \nThe function should take a list of numbers as an argument,\
    \ and return a Float64. \nThe function should ignore the case where all numbers\
    \ are negative.", "    \n    median = sort(l)[end-1]\n    \n    if median == 0\n\
    \        median = median(sort(l)[1:end-1])\n    end\n    \n    return median\n\
    end", "    l = sort(l)\n    mid = length(l)\n    if mid == 0 \n        return\
    \ NaN\n    \n    mid = round(Int64, mid)\n    \n    if mid % 2 == 0\n        return\
    \ l[mid/2]\n    else\n        return (l[mid/2] + l[mid/2+1])/2\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the median of a list of numbers, rounded to the nearest integer.",
  "    l = sort(l)\n    mid = floor(Int, length(l)/2)\n    if length(l) % 2 == 1\n\
    \        return l[mid]\n    else\n        return (l[mid] + l[mid-1])/2\n    end\n\
    end", "    \n    l = sort(l)\n    \n    mid = length(l)\n    \n    if mid % 2\
    \ == 0\n        return l[mid/2]\n    else\n        return (l[mid/2] + l[mid/2\
    \ - 1])/2\n    end\nend", "    l = sort(l)\n    mid = floor(Int, length(l)/2)\n\
    \    if length(l) % 2 == 1\n        return l[mid]\n    else\n        return (l[mid-1]\
    \ + l[mid]) / 2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the mode of\
    \ a given list of numbers. \nThe mode is the number that appears most often in\
    \ the list.\nFor example, mode([1, 1, 2, 3]) should return 1.\nHint: Use a dictionary\
    \ to keep track of counts of each number in the list.", "    l = sort(l)\n   \
    \ mid = length(l)\n    if mid == 1\n        return l[1]\n    end\n    if mid ==\
    \ 2\n        return 0.5 * (l[1] + l[2])\n    end\n    \n    mid = floor(mid)\n\
    \    \n    if mid%2 == 0\n        return 0.5 * (l[mid] + l[mid-1])\n    end\n\
    \    \n    return 0.5 * (l[mid-1] + l[mid])\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise\nWrite a function that returns the\
    \ median of a list of numbers. Your function should take a list of numbers as\
    \ an argument, and return a Float64. Your function should also handle an empty\
    \ list gracefully.", "    l = sort(l)\n    mid = length(l)//2\n    if length(l)%2\
    \ == 0\n        return l[mid]\n    else\n        return (l[mid] + l[mid-1])/2\n\
    \    end\nend\n</cell>\n<text>\nExercise 9\nWrite a function that returns the\
    \ median of a list of numbers. Write a test that passes if your function returns\
    \ the correct median and fails if it does not.", "    sort(l)\n    mid = length(l)\n\
    \    if mid == 0 \n        throw(DomainError())\n    end\n    return l[mid]\n\
    end\n</cell>\n<code language=julia-1.3>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.3>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the median of a list of numbers. \nThe function\
    \ should throw an error if the list is empty.", "    l = sort(l)\n    mid = length(l)\n\
    \    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return (l[mid/2]\
    \ + l[mid/2 - 1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nThe median of a finite set of numbers is called the \"\
    typical\" number. \nThe median is often called the \"middle\" of a set of numbers.\
    \ \nThe median is often called the \"typical value\" of a set of numbers. \nThe\
    \ median is often called the \"typical range\" of a set of numbers. \nThe median\
    \ is often called the \"typical spread\" of a set of numbers. \nThe median is\
    \ often called the \"typical spread of values\" of a set of numbers. \nThe median\
    \ is often called the \"typical spread of ranges\" of a set of numbers. \nThe\
    \ median is often called the \"typical spread of spreads\" of a set of numbers.\
    \ \nThe median is often called the \"typical spread of spread of values\" of a\
    \ set of numbers. \nThe median is often called the \"typical spread of spread\
    \ of ranges\" of a set of numbers. \nThe median is often called the \"typical\
    \ spread of spread of spreads\" of a set of numbers. \nThe median is often called\
    \ the \"typical spread of spread of spread of values\" of a set of numbers. \n\
    The median is often called the \"typical spread of spread of spread of ranges\"\
    \ of a set of numbers. \nThe median is often called the \"typical spread of spread\
    \ of spread of spreads\" of a set of numbers. \nThe median is often called the\
    \ \"typical spread of spread of spread of spread of values\" of a set of numbers.\
    \ \nThe median is often called the \"typical spread of spread of spread of spread\
    \ of ranges\" of a set of numbers. \nThe median is often called the \"typical\
    \ spread of spread of spread of spread of spreads\" of a set of numbers. \nThe\
    \ median is often called the \"typical spread of spread of spread of spread of\
    \ spread of values\" of a set of numbers. \nThe median is often called the \"\
    typical spread of spread of spread of spread of spread of ranges\" of a set of\
    \ numbers. ", "    sort(l)\n    mid = floor(length(l)/2)\n    if length(l)%2 ==\
    \ 1\n        return l[mid]\n    else\n        return 0.5 * (l[mid] + l[mid-1])\n\
    \    end\nend", "    l = sort(l)\n    mid = length(l)\n    if mid == 0\n     \
    \   throw(DomainError())\n    end\n    return l[mid-1]\nend", "    sort(l)\n \
    \   length(l) == 0 ? Inf : l[floor(length(l)/2)]\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nThe median of a finite set of numbers is called\
    \ a measure of central tendency. \nThe median is the value separating the higher\
    \ half of a data set from the lower half. \nThe median is often called the \"\
    typical\" value of the distribution. \nThe median is often called the \"middle\"\
    \ value of the distribution. \nThe median is often called the \"typical\" value\
    \ of the distribution. \nThe median is often called the \"typical\" value of the\
    \ distribution. \nThe median is often called the \"typical\" value of the distribution.\
    \ \nThe median is often called the \"typical\" value of the distribution. \nThe\
    \ median is often called the \"typical\" value of the distribution. \nThe median\
    \ is often called the \"typical\" value of the distribution. \nThe median is often\
    \ called the \"typical\" value of the distribution. \nThe median is often called\
    \ the \"typical\" value of the distribution. \nThe median is often called the\
    \ \"typical\" value of the distribution. \nThe median is often called the \"typical\"\
    \ value of the distribution. \nThe median is often called the \"typical\" value\
    \ of the distribution. \nThe median is often called the \"typical\" value of the\
    \ distribution. \nThe median is often called the \"typical\" value of the distribution.\
    \ \nThe median is often called the \"typical\" value of the distribution. \nThe\
    \ median is often called the \"typical\" value of the distribution. \nThe median\
    \ is often called the \"typical\" value of the distribution. \nThe median is often\
    \ called the \"typical\" value of the distribution. \nThe median is often called\
    \ the \"typical\" value of the distribution. \nThe median is often called the\
    \ \"typical\" value of the distribution. \nThe median is often called the \"typical\"\
    \ value of the distribution. \nThe median is often called the \"typical\" value\
    \ of the distribution. \nThe median is often called the \"typical\" value of the\
    \ distribution. \nThe median is often called the \"typical\" value of the distribution.\
    \ \nThe median is often called the \"typical\" value of the distribution. \nThe\
    \ median is often called the \"typical\" value of the distribution. \nThe median\
    \ is often called the \"typical\" value of the distribution. \nThe median is often\
    \ called the \"typical\" value of the distribution. \nThe median is often called\
    \ the \"typ", "    sort(l)\n    l = l[end]\n    mid = floor(Int, length(l)/2)\n\
    \    if length(l) % 2 == 0\n        return l[mid]\n    else\n        return (l[mid-1]\
    \ + l[mid])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1,\
    \ 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the mean of\
    \ a list of numbers. \nThe function should take a list of numbers as an argument\
    \ and return the mean of the numbers in the list.\nThe function should raise an\
    \ error if the list is empty.\nThe function should raise an error if the list\
    \ contains non-numbers.\nThe function should raise an error if the list contains\
    \ negative numbers.", "    sort(l)\n    mid = length(l)\n    if mid == 0\n   \
    \     throw(DomainError(\n            \"median requires at least one element\"\
    ))\n    end\n    half = floor(Int64, mid/2)\n    if half*2 == mid\n        return\
    \ l[half]\n    else\n        return median(l[half-1:mid])\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the median of a list of numbers. \nThe function should take a list\
    \ of numbers as an argument. \nThe function should return the median of the numbers\
    \ in the list.\nThe function should throw an error if the list is empty.", " \
    \   l = sort(l)\n    mid = length(l)\n    if mid == 0\n        return NaN\n  \
    \  \n    mid = round(mid)\n    if mid % 2 == 0\n        return l[mid-1]\n    else\n\
    \        return (l[mid-1] + l[mid]) / 2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the mean of a list of numbers.", "    \n    l = sort(l)\n    n = length(l)\n\
    \    \n    if n == 1\n        return l[1]\n    end\n    \n    mid = n \xF72\n\
    \    \n    if l[mid] == l[mid-1]\n        return median(l[mid+1:n])\n    end\n\
    \    \n    if l[mid] == l[mid+1]\n        return median(l[mid+2:n])\n    end\n\
    \    \n    if l[mid] == l[mid-1]\n        return median(l[mid+1:n])\n    end\n\
    \    \n    if l[mid] == l[mid+1]\n        return median(l[mid+2:n])\n    end\n\
    \    \n    if l[mid] == l[mid+2]\n        return median(l[mid+1:n])\n    end\n\
    \    \n    return l[mid]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20],\
    \ 2)\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20], 3)\n\
    </cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20], 4)\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20], 5)\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20], 6)\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20], 7)\n</cell>\n<code language=julia-1.5>\nmedian([-10,\
    \ 4, 6, 1000, 10, 20], 8)\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4,\
    \ 6, 1000, 10, 20], 9)\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20], 10)\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000,\
    \ 10, 20], 11)\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20], 12)\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20],\
    \ 13)\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20], 14)\n\
    </cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20], 15)\n</cell",
  "    sort(l)\n    length(l) == 0 ? 0.0 : (l[floor(length(l)-1)] + l[floor(length(l)-2)])/2\n\
    end\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the median of a list of numbers. If\
    \ the list has even number of elements, then the median is the mean of the two\
    \ middle elements. If the list has an odd number of elements, then the median\
    \ is the average of the two middle elements.", "    l = sort(l)\n    mid = length(l)\n\
    \    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return 0.5 *\
    \ (l[mid/2] + l[mid/2 - 1])\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    mid = length(l)//2\n    if length(l)%2 == 1\n        return\
    \ l[mid]\n    else\n        return (l[mid] + l[mid-1])/2.0\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the mean of a list of numbers. If the list is empty, return zero.",
  "    sort(l)\n    return l[floor(Int64, length(l)/2)]\nend", "    sort(l)\n    mid\
    \ = length(l)\n    if mid == 0\n        throw(DomainError(\n            \"median\
    \ requires at least one element\"))\n    end\n    half = floor(Int64, mid/2)\n\
    \    if half == 0\n        return l[mid]\n    else\n        return 0.5 * (l[half]\
    \ + l[half-1])\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1,\
    \ 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nThe median of a finite set of numbers is called the \"\
    typical\" element. \nThe median is often called the \"middle element\" because\
    \ it is often the \nnumber that occurs in an ordered list of numbers that are\
    \ not divisible by \nthe length of the list. \nThe median is also called the \"\
    middle value\" because it is often the \nnumber that occurs in an unordered list\
    \ of numbers that are not divisible by \nthe length of the list. \nThe median\
    \ is also called the \"middle index\" because it is often the \nnumber that occurs\
    \ in an unordered list of numbers that are not divisible by \nthe length of the\
    \ list. \nThe median is also called the \"middle value\" because it is often the\
    \ \nnumber that occurs in an unordered list of numbers that are not divisible\
    \ by \nthe length of the list. \nThe median is also called the \"middle index\"\
    \ because it is often the \nnumber that occurs in an unordered list of numbers\
    \ that are not divisible by \nthe length of the list. \nThe median is also called\
    \ the \"middle value\" because it is often the \nnumber that occurs in an unordered\
    \ list of numbers that are not divisible by \nthe length of the list. \nThe median\
    \ is also called the \"middle index\" because it is often the \nnumber that occurs\
    \ in an unordered list of numbers that are not divisible by \nthe length of the\
    \ list. \nThe median is also called the \"middle value\" because it is often the\
    \ \nnumber that occurs in an unordered list of numbers that are not divisible\
    \ by \nthe length of the list. \nThe median is also called the \"middle index\"\
    \ because it is often the \nnumber that occurs in an unordered list of numbers\
    \ that are not divisible by \nthe length of the list. \nThe median is also called\
    \ the \"middle value\" because it is often the \nnumber that occurs in an unordered\
    \ list of numbers that are not divisible by \nthe length of the list. \nThe median\
    \ is also called the \"middle index\" because it is often the \nnumber that occurs\
    \ in an unordered list of numbers that are not divisible by \nthe length of the\
    \ list. \nThe median is also called the \"middle value\" ", "    sort(l)\n   \
    \ length(l) == 0 ? return 0.0 : l[floor(Int64, length(l) / 2)]\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<text>\nThe median\
    \ of a list of numbers is defined as the value separating the higher half of the\
    \ list from the lower half. For example, the median of the list [3, 1, 2, 4, 5]\
    \ would be the value 2.5.", "    l = sort(l)\n    mid = length(l)\n    if mid\
    \ % 2 == 0\n        return l[mid/2]\n    else\n        return (l[mid/2] + l[mid/2-1])/2\n\
    \    end\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThe median of three numbers\
    \ is just the average of the two middle numbers. So the median is just the average\
    \ of the two middle numbers. So the median is just the average of the two middle\
    \ numbers. So the median is just the average of the two middle numbers. So the\
    \ median is just the average of the two middle numbers. So the median is just\
    \ the average of the two middle numbers. So the median is just the average of\
    \ the two middle numbers. So the median is just the average of the two middle\
    \ numbers. So the median is just the average of the two middle numbers. So the\
    \ median is just the average of the two middle numbers. So the median is just\
    \ the average of the two middle numbers. So the median is just the average of\
    \ the two middle numbers. So the median is just the average of the two middle\
    \ numbers. So the median is just the average of the two middle numbers. So the\
    \ median is just the average of the two middle numbers. So the median is just\
    \ the average of the two middle numbers. So the median is just the average of\
    \ the two middle numbers. So the median is just the average of the two middle\
    \ numbers. So the median is just the average of the two middle numbers. So the\
    \ median is just the average of the two middle numbers. So the median is just\
    \ the average of the two middle numbers. So the median is just the average of\
    \ the two middle numbers. So the median is just the average of the two middle\
    \ numbers. So the median is just the average of the two middle numbers. So the\
    \ median is just the average of the two middle numbers. So the median is just\
    \ the average of the two middle numbers. So the median is just the average of\
    \ the two middle numbers. So the median is just the average of the two middle\
    \ numbers. So the median is just the average of the two middle numbers. So the\
    \ median is just the average of the two middle numbers. So the median is just\
    \ the average of the two middle numbers. So the median is just the average of\
    \ the two middle numbers. So the median is just the average of the two middle\
    \ numbers. So the median is just the average of the two middle numbers. So the\
    \ median is just the average of the two middle numbers. So the median is just\
    \ the average of the two middle numbers. So the median is just the average of\
    \ the two middle numbers. So the median is just the average of the two middle\
    \ numbers. So the median is just the average of the two middle numbers. So the\
    \ median is just the average of the two middle numbers. So the median is just\
    \ the average of the two middle ", "    sort(l)\n    length(l) == 0 ? 0.0 : (l[end-1]\
    \ + l[end])/2\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the mean of a list of numbers. \nThe function should take a list of numbers\
    \ as an argument and return the mean of the numbers in the list.\nThe function\
    \ should raise an error if the list is empty.\nThe function should raise an error\
    \ if the list contains non-numbers.\nThe function should raise an error if the\
    \ list contains negative numbers.\nThe function should raise an error if the list\
    \ contains numbers outside the range [-100, 100].\nThe function should raise an\
    \ error if the list contains numbers outside the range [-10, 10].", "    sort(l)\n\
    \    l = l[end]\n    mid = floor(Int, length(l)/2)\n    if length(l) % 2 == 1\n\
    \        return l[mid]\n    else\n        return (l[mid-1] + l[mid])/2\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the mean of a list of numbers.", "    sort(l)\n\
    \    length = length(l)\n    if length == 0 \n        throw(ArgumentError(\"median\
    \ requires at least one element\"))\n    end\n    middle = length / 2\n    if\
    \ length%2 == 1\n        return l[middle]\n    else\n        return (l[middle-1]\
    \ + l[middle]) / 2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise: Write a function that returns the median of\
    \ a list of numbers. \nThe median is the number in the middle of the sorted list\
    \ of numbers. \nIf the length of the list is even, the median is the average of\
    \ the two middle numbers. \nIf the length of the list is odd, the median is the\
    \ middle number of the sorted list of numbers.", "    median = sort(l)[end]\n\
    \    return median\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n\
    \    mid = length(l)\n    if mid == 0 \n        return l[1]\n    \n    if mid\
    \ % 2 == 0 \n        return l[mid/2]\n    \n    else \n        return (l[mid/2]\
    \ + l[mid/2 - 1])/2\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2,\
    \ 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the median of a list\
    \ of numbers, rounded to two decimal places.", "    sort(l)\n    l = l[end]\n\
    \    mid = floor(Int, length(l)/2)\n    if length(l) % 2 == 0\n        return\
    \ l[mid]\n    else\n        return (l[mid-1] + l[mid])/2\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the mode of a list of numbers. \nThe mode is the number that appears\
    \ most often in the list.\nThe function should work for both sorted and unsorted\
    \ lists.\nThe function should return nothing if the list contains no numbers.\n\
    The function should raise an error if the list contains negative numbers.\nThe\
    \ function should raise an error if the list contains more than one mode.", " \
    \   \n    l = sort(l)\n    \n    if length(l)%2 == 1\n        return l[(length(l)+1)/2]\n\
    \    end\n    \n    mid = length(l)//2\n    \n    if l[mid] < l[mid+1]\n     \
    \   return median(l[mid+1:end])\n    else\n        return median(l[mid:end-1])\n\
    \    end\nend", "    \n    l = sort(l)\n    \n    if length(l)%2==1\n        return\
    \ l[(length(l)+1)/2]\n    else\n        return 0.5*(l[end-1] + l[end])\n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    sort(l)\n    mid = length(l)\n\
    \    if mid == 0 \n        throw(ArgumentError(\"median requires at least one\
    \ element\"))\n    end\n    return l[mid-1]\nend", "    sort(l)\n    mid = length(l)//2\n\
    \    if length(l)%2 == 1\n        return l[mid]\n    else\n        return (l[mid]\
    \ + l[mid-1])/2.0\n    end\nend\n</cell>\n<code language=julia-1.4>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.4>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the median\
    \ of a list of numbers. If the length of the list is even, the median is the mean\
    \ of the two middle numbers. If the length of the list is odd, the median is the\
    \ number in the middle position. For example, median([3, 1, 2, 4, 5]) should return\
    \ 3, and median([3, 1, 2, 4, 6, 5]) should return 4.", "    sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        throw(DomainError(string(\"median of empty\
    \ list\")))\n    end\n    \n    if mid == 1\n        return l[1]\n    end\n  \
    \  \n    mid = round(Int64, mid)\n    \n    if mid % 2 == 0\n        return (l[mid-1]\
    \ + l[mid]) / 2\n    end\n    \n    return (l[mid-1] + l[mid]) / 2\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the median of a list of numbers. \nThe function should take a list\
    \ of numbers as an argument, and return the median of the list.", "    sort(l)\n\
    \    mid = length(l)//2\n    if length(l)%2 == 1\n        return l[mid]\n    else\n\
    \        return 0.5*(l[mid-1] + l[mid])\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the median of a list of numbers. Your function\
    \ should take a list of numbers as an argument and return the median of the numbers.\
    \ If the length of the list is even, the median is the mean of the two middle\
    \ numbers.", "    l = sort(l)\n    mid = floor(Int, length(l)/2)\n    if length(l)%2\
    \ == 1\n        return l[mid]\n    else\n        return 0.5 * (l[mid-1] + l[mid])\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the median of a list of numbers. \n\
    The function should take a list of numbers as an argument, and return a single\
    \ number.", "    \n    l = sort(l)\n    \n    if length(l)%2 == 1\n        return\
    \ l[end-1]\n    else\n        return (l[end-1] + l[end])/2\n    end\nend", " \
    \   sort(l)\n    return l[floor(Int, length(l)/2)]\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ median of a list of numbers. \nThe function should take a list of numbers as\
    \ an argument and return the median of the numbers in the list.\nThe median is\
    \ defined as the middle number of the sorted list.", "    l = sort(l)\n    mid\
    \ = length(l)//2\n    if length(l)%2 == 1\n        return l[mid]\n    else\n \
    \       return (l[mid] + l[mid-1])/2.0\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the mean of a list of numbers.", "    l = sort(l)\n\
    \    mid = length(l)\n    if mid == 0 \n        throw(DomainError(\n         \
    \   \"median requires at least one element\"))\n    end\n    \n    if mid % 2\
    \ == 0 \n        return l[mid/2]\n    else\n        return (l[mid/2] + l[mid/2\
    \ - 1])/2.0\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2,\
    \ 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the median of a list\
    \ of numbers, rounded to a specified number of decimal places.", "    sort(l)\n\
    \    l = l[end]\n    i = length(l)\n    if i == 0\n        throw(DomainError(\"\
    \"))\n    end\n    mid = floor(Int64, i/2)\n    if i == 1\n        return l[mid]\n\
    \    end\n    if l[mid] > l[mid+1]\n        return l[mid]\n    else\n        return\
    \ l[mid+1]\n    end\nend\n</cell>\n<code language=julia-1.5>", "    sort(l)\n\
    \    l = l[end]\n    i = findfirst(x -> x < l, l)\n    if i == length(l) \n  \
    \      throw(DomainError(\n            \"median requires at least one element\
    \ in the list\"))\n    mid = l / 2\n    if i == 1\n        return mid\n    if\
    \ i == length(l)\n        return mid + 1\n    if l[i-1] < l[i]\n        return\
    \ mid\n    return mid + 1\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise: Write a function that returns the median of\
    \ a list of numbers. \nThe function should throw an error if the list is empty.",
  "    sort(l)\n    length(l) == 0 ? 0.0 : (l[floor(length(l) / 2)] + l[ceil(length(l)\
    \ / 2)]) / 2.0\nend\n</cell>\n<code language=julia-1.5>\n@assert median([3, 1,\
    \ 2, 4, 5]) == 3.0\n@assert median([-10, 4, 6, 1000, 10, 20]) == 15.0\n</cell>\n\
    <text>\nExercise 3\nWrite a function to compute the mean of a list of numbers.",
  "    l = sort(l)\n    mid = length(l)\n    if mid == 0 \n        return l[1]\n \
    \   \n    if mid == 1\n        return l[1]\n    \n    if l[mid] == l[mid-1]\n\
    \        return l[mid]\n    \n    mid1 = mid - 1\n    mid2 = mid + 1\n    \n \
    \   if l[mid1] > l[mid2]\n        return l[mid1]\n    \n    return l[mid2]\nend\n\
    </cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the median of a list of numbers. \nThe function should take a list\
    \ of numbers as an argument and return the median of the numbers in the list.",
  "    sort(l)\n    mid = length(l)\n    if mid == 0\n        throw(DomainError(\n\
    \            \"median requires at least one element\"))\n    end\n    return l[mid-1]\n\
    end", "    l = sort(l)\n    mid = length(l)\n    if mid % 2 == 0\n        return\
    \ l[mid/2]\n    else\n        return 0.5 * (l[mid/2] + l[mid/2 - 1])\n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    sort(l)\n    mid = length(l)//2\n\
    \    if length(l)%2 == 1\n        return l[mid]\n    else\n        return (l[mid]\
    \ + l[mid-1])/2\n    end\nend", "    l = sort(l)\n    mid = length(l)\n    if\
    \ mid % 2 == 0\n        return l[mid/2]\n    else\n        return (l[mid/2] +\
    \ l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise: Write a function that returns the median of\
    \ a list of numbers. Write a test to check your function.", "    sort(l)\n   \
    \ return l[floor(Int64, length(l)/2)]\nend\n</cell>\n<code language=julia-1.3>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.3>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 4\nWrite a function that returns the\
    \ mode of a given list of numbers. \nThe mode is the number that appears most\
    \ often in the list.", "    sort(l)\n    mid = floor(length(l)/2)\n    if length(l)\
    \ % 2 == 0\n        return l[mid]\n    else\n        return (l[mid] + l[mid-1])/2\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the median of a list of numbers. \n\
    The function should take a list of numbers as an argument, and return the median\
    \ of the numbers. \nThe median is the number in the middle of the sorted list.",
  "    sort(l)\n    length(l) == 0 ? Inf : l[floor(Int, length(l)/2)]\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nThe median of a finite set\
    \ of numbers is called the \"typical\" number. For example, in the set {1, 2,\
    \ 3, 4}, the median is (2 + 3 + 4)/3 = 2.5.", "    l = sort(l)\n    mid = length(l)\n\
    \    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return (l[mid/2]\
    \ + l[mid/2 - 1])/2\n    end\nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work\
    \ for negative numbers. `median([-10, 4, 6, 1000, 10, 20])` returns `15.0` instead\
    \ of `-10`.\n<|/ c |>\n<| c |>\nI fixed the issue. Thanks for pointing out.\n\
    <|/ c |>\n<| a dscore=4 |>\n<code>", "    sort(l)\n    mid = length(l)//2\n  \
    \  if length(l)%2 == 0\n        return l[mid]\n    else\n        return (l[mid]\
    \ + l[mid-1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the mean of\
    \ a list of numbers.", "    sort(l)\n    l = l[end]\n    mid = floor(Int, length(l)/2)\n\
    \    if length(l) % 2 == 1\n        return l[mid]\n    else\n        return (l[mid-1]\
    \ + l[mid]) / 2\n    end\nend\n</cell>\n<code language=julia-1.5>", "    sort(l)\n\
    \    l = l[end]\n    mid = floor(Int, length(l) / 2)\n    if length(l) % 2 ==\
    \ 0\n        return l[mid]\n    else\n        return (l[mid] + l[mid-1]) / 2\n\
    \    end\nend", "    sort(l)\n    mid = length(l)//2\n    if length(l)%2==0\n\
    \        return l[mid]\n    else\n        return (l[mid]+l[mid-1])/2\n    end\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThe median of a set of integers is defined\
    \ as the value that appears more than n/2 times in the set. Your code returns\
    \ the median of a set of floats.\n<|/ c |>\n<| c |>\nI fixed the median function\n\
    <|/ c |>\n<| c |>\nI fixed the median function\n<|/ c |>\n<| a tags=julia,median\
    \ |>\nI wrote a package for median in Julia called median.jl that can handle vectors\
    \ of any type. \n<code>\njulia> using median", "    sort(l)\n    l = l[end]\n\
    \    mid = floor((length(l)+1)/2)\n    if mid == length(l)\n        return l[end]\n\
    \    else \n        return median(l[mid-1:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the median of a list of numbers. Your function should take a list of numbers\
    \ and return the median of the numbers. If the list is empty, return 0.", "  \
    \  sort(l)\n    mid = length(l)\n    if mid == 0 \n        throw(DomainError(\"\
    \"))\n    end\n    return l[mid]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the median\
    \ of a list of numbers. \nThe function should throw an error if the list has less\
    \ than 2 elements.", "    sort(l)\n    return l[floor(Int64, length(l)/2)]\nend\n\
    </cell>\n<code language=julia-1.3>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the median of a list of numbers. \n\
    The function should take a list of numbers as an argument and return the median\
    \ of the numbers. \nThe median is the number in the middle of the list that has\
    \ the highest number of elements. \nFor example, if the list is [3, 1, 2, 4, 5],\
    \ the median is 3. The median is the number in the middle of the list that has\
    \ the highest number of elements.", "    sort(l)\n    mid = length(l)\n    if\
    \ mid == 0\n        throw(DomainError(\n            \"median requires at least\
    \ one element to work with\"))\n    end\n    return l[mid]\nend\n</cell>\n<code\
    \ language=julia-1.3>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\nWrite\
    \ a function that returns the median of a list of numbers. Write a test that checks\
    \ that your function works as expected.", "    sort(l)\n    l = l[end]\n    mid\
    \ = floor((length(l)+1)/2)\n    if mid == length(l)\n        return l[end]\n \
    \   else if l[mid] < 0\n        return median(l[mid+1:end])\n    else\n      \
    \  return median(l[1:mid])\n    end\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\n\
    I added a median function based on your median function\n<|/ c |>\n<| c |>\nI\
    \ added a median function based on your median function\n<|/ c |>\n<| a dscore=3\
    \ |>\nI wrote a package for this:\nhttps://github.com/kamila-k/median.jl\n<code>\n\
    using median\nmedian([1,2,3,4,5])\n</code>\n<|/ a tags=julia |>\n<| a tags=julia\
    \ |>\nI wrote a package for this:\nhttps://github.com/kamila-k/median.jl\n<code>\n\
    using median\nmedian([1,2,3,4,5])\n</code>\n<|/ a dscore=3 |>\n<| a tags=julia\
    \ |>\nI wrote a package for this:\nhttps://github.com/kamila-k/median.jl\n<code>\n\
    using median\nmedian([1,2,3,4,5])\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia\
    \ |>\nI wrote a package for this:\nhttps://github.com/kamila-k/median.jl\n<code>\n\
    using median\nmedian([1,2,3,4,5])\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia\
    \ |>\nI wrote a package for this:\nhttps://github.com/kamila-k/median.jl\n<code>\n\
    using median\nmedian([1,2,3,4,5])\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n\
    I wrote a package for this:\nhttps://github.com/kamila-k/median.jl\n<code>\nusing\
    \ median\nmedian([1,2,3,4,5])\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\n\
    I wrote a package for this:\nhttps://github.com/kamila-k/median.jl\n<code>\nusing\
    \ median\nmedian([1,2,3,4,5])\n</code>\n<|/ a dscore=2 |>\n<| a |>\nI wrote a\
    \ package for this:\nhttps://github.com/kamila-k/median.jl\n<code>\nusing median\n\
    median([1,2,3,4,5])\n</code>\n<|/ a tags=julia dscore=2 |>\n<| a tags=julia |>\n\
    I wrote a package for this:\nhttps://github.com/kamila-k/median", "    l = sort(l)\n\
    \    mid = length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n\
    \        return (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</cell>\n<code language=julia-1.1>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the median of a list of numbers. Your function should take a list of numbers\
    \ as an argument, and return a Float64. Your function should use median to find\
    \ the median.", "    sort(l)\n    \n    if length(l)%2 == 1\n        return l[(length(l)+1)/2]\n\
    \    else\n        return (l[(length(l)+1)/2] + l[(length(l)+1)/2]) / 2\n    end\n\
    end", "    l = sort(l)\n    mid = length(l)\n    if mid % 2 == 1\n        return\
    \ l[mid/2]\n    else\n        return (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    l = sort(l)\n    \n    if length(l)\
    \ == 0 \n        return NaN\n    end\n    \n    mid = floor(Int, length(l)/2)\n\
    \    \n    if length(l) % 2 == 0\n        return l[mid]\n    else\n        return\
    \ (l[mid] + l[mid-1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the median\
    \ of a list of numbers. Your function should accept a list of numbers and return\
    \ a Float64. Test your function with lists of length 1, 2, and 3.", "    sort(l)\n\
    \    mid = length(l)\n    if mid == 0\n        throw(DomainError(\n          \
    \  \"median requires at least one element\"))\n    end\n    \n    if mid == 1\n\
    \        return l[1]\n    end\n    \n    mid = floor(Int64, mid)\n    \n    if\
    \ l[mid] == l[mid - 1]\n        return l[mid]\n    end\n    \n    lower = median(l[1\
    \ : mid])\n    upper = median(l[(mid + 1) : end])\n    \n    if lower == upper\n\
    \        return lower\n    end\n    \n    if l[mid] < lower\n        return lower\n\
    \    end\n    \n    if l[mid] > upper\n        return upper\n    end\n    \n \
    \   return mid\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n\
    <text>\nExercise: Write a function that returns the median of a list of numbers.\
    \ Write a test that passes when the function returns the correct median and fails\
    \ otherwise.", "    sort(l)\n    l = l[end]\n    l = l[end]\n    l = l[end]\n\
    \    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n\
    \    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n\
    \    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n\
    \    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n\
    \    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n\
    \    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n\
    \    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n\
    \    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n\
    \    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n\
    \    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n\
    \    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n\
    \    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n\
    \    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n\
    \    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n\
    \    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n\
    \    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n\
    \    l = l[end]\n    l = l[", "    l = sort(l)\n    mid = length(l)\n    if mid\
    \ % 2 == 0\n        return l[mid/2]\n    else\n        return 0.5 * (l[mid/2-1]\
    \ + l[mid/2])\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1,\
    \ 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise\nWrite a function that returns the median of\
    \ a list of numbers. Write a test that passes when the function returns the correct\
    \ value.", "    sort(l)\n    l = l[end]\n    mid = floor(Int, length(l)+1)/2\n\
    \    if length(l)%2 == 1\n        return l[mid]\n    else\n        return (l[mid-1]\
    \ + l[mid])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1,\
    \ 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the median\
    \ of a list of numbers. \nThe median is the number in the middle of the sorted\
    \ list. \nThe median is defined as the value separating the higher half of the\
    \ sorted list from the lower half.", "    sort(l)\n    return l[floor(Int64, length(l)//2)]\n\
    end", "    sort(l)\n    l = l[end]\n    i = length(l)\n    j = floor(Int64(i/2))\n\
    \    if j > 0\n        return l[j]\n    else\n        return l[j-1]\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20], 2)\n</cell>\n<code language=julia-1.5>\nmedian([-10,\
    \ 4, 6, 1000, 10, 20], 3)\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4,\
    \ 6, 1000, 10, 20], 4)\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20], 5)\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000,\
    \ 10, 20], 6)\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20], 7)\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20],\
    \ 8)\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20], 9)\n\
    </cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20], 10)\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20], 11)\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20], 12)\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20], 13)\n</cell>\n<code language=julia-1.5>\nmedian([-10,\
    \ 4, 6, 1000, 10, 20], 14)\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4,\
    \ 6, 1000, 10, 20], 15)\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20], 16)\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000,\
    \ 10, 20], 17)\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20], 18)\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20],\
    \ 19)\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20], 20)\n\
    </cell>\n<code language=julia-1.5>\nmedian", "    sort(l)\n    l = l[end]\n  \
    \  mid = floor(Int, length(l) / 2)\n    if length(l) % 2 == 0\n        return\
    \ l[mid]\n    else\n        return (l[mid] + l[mid-1]) / 2\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the mean of a list of numbers. \nThe function should\
    \ take a list of numbers as an argument. \nThe function should return the mean\
    \ of the numbers in the list.\nThe function should raise an error if the list\
    \ is empty.", "    sort(l)\n    mid = length(l)\n    if mid == 0 \n        return\
    \ l[1]\n    else \n        return l[mid]\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ median of a list of numbers. \nThe function should take a list of numbers as\
    \ an argument and return the median of the list.\nThe median is the number in\
    \ the middle of the list that has the smallest absolute value.\nFor example, if\
    \ the list is [3, 1, 2, 4, 5], the median is 3.\nIf the list is [-10, 4, 6, 1000,\
    \ 10, 20], the median is 10.", "    l = sort(l)\n    mid = length(l)\n    if mid\
    \ == 0 \n        throw(DomainError(\"\"))\n    end\n    \n    if mid == 1\n  \
    \      return l[1]\n    end\n    \n    if mid%2 == 1\n        return median(l[floor(mid/2):floor(mid/2)+1])\
    \ + median(l[floor(mid/2):floor(mid/2)+1])\n    end\n    \n    return median(l[floor(mid/2):mid])\
    \ + median(l[floor(mid/2):mid-1])\nend", "    l = sort(l)\n    mid = floor(Int,\
    \ length(l)+1)/2\n    if length(l)%2 == 1\n        return l[mid]\n    else\n \
    \       return (l[mid-1] + l[mid])/2\n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the mean of a list of numbers.", "    sort(l)\n\
    \    mid = length(l)\n    if mid == 0 \n        throw(BoundsError(\"median requires\
    \ at least one element\"))\n    end\n    \n    if mid == 1\n        return l[1]\n\
    \    end\n    \n    mid2 = mid / 2\n    \n    if l[mid2] > l[mid2+1]\n       \
    \ return l[mid2]\n    else\n        return l[mid2+1]\n    end\nend", "    l =\
    \ sort(l)\n    mid = length(l)\n    if mid == 0 \n        return l[1]\n    \n\
    \    if mid == 1\n        return l[1]\n    \n    if l[mid] == l[mid - 1]\n   \
    \     return l[mid]\n    \n    if l[mid] == l[mid - 2]\n        return l[mid]\n\
    \    \n    if l[mid] == l[mid - 3]\n        return l[mid]\n    \n    if l[mid]\
    \ == l[mid - 4]\n        return l[mid]\n    \n    if l[mid] == l[mid - 5]\n  \
    \      return l[mid]\n    \n    if l[mid] == l[mid - 6]\n        return l[mid]\n\
    \    \n    if l[mid] == l[mid - 7]\n        return l[mid]\n    \n    if l[mid]\
    \ == l[mid - 8]\n        return l[mid]\n    \n    if l[mid] == l[mid - 9]\n  \
    \      return l[mid]\n    \n    if l[mid] == l[mid - 10]\n        return l[mid]\n\
    \    \n    if l[mid] == l[mid - 11]\n        return l[mid]\n    \n    if l[mid]\
    \ == l[mid - 12]\n        return l[mid]\n    \n    if l[mid] == l[mid - 13]\n\
    \        return l[mid]\n    \n    if l[mid] == l[mid - 14]\n        return l[mid]\n\
    \    \n    if l[mid] == l[mid - 15]\n        return l[mid]\n    \n    if l[mid]\
    \ == l[mid - 16]\n        return l[mid]\n    \n    if l[mid] == l[mid - 17]\n\
    \        return l[mid]\n    \n    if l[mid] == l[mid - 18]\n        return l[mid]\n\
    \    \n    if l[mid] == l[mid - 19]\n        return l[mid]\n    \n    if l[mid]\
    \ == l[mid - 20]\n        return l[mid]\n    \n    if l[mid] == l[mid - 21]\n\
    \        return l[mid]\n    \n    if l[mid] == l[mid - 22]\n        return l[mid]\n\
    \    \n    if l[mid] == l[mid - 23]\n        return l[mid]\n    \n    if l[mid]\
    \ == l[mid - 24]\n        return l[mid]\n    \n    if l[mid] == l[mid - ", " \
    \   l = sort(l)\n    mid = length(l)\n    if mid % 2 == 1\n        return l[mid/2]\n\
    \    else\n        return (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the mean of a list of numbers."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
