name: HumanEval_113_odd_count
language: julia
prompt: "\"\"\"Given a list of strings, where each string consists of only digits,\
  \ return a list.\n    Each element i of the output should be \"the number of odd\
  \ elements in the\n    string i of the input.\" where all the i's should be replaced\
  \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n\
  \    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"\
  11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
  ,\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\
  \nfunction odd_count(lst::Vector{String})::Vector{String} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
  1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
  \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
  \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
  \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number of\
  \ odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n\
  \ the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of\
  \ the 2nput.\"])\nend\n"
completions: ["    \n    odd_digits = Vector{Int}()\n    for str in lst\n        odd_digits\
    \ += count_digits(str)\n    end\n    return odd_digits\nend", "    odd_counts\
    \ = []\n    for str in lst\n        odd_counts.append(length(filter(x -> x % 2\
    \ != 0, str)))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.4>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.4>\nodd_count([\"3\"\
    ,'11111111'])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of characters in the string.", "    odd_counts = Vector{String}()\n\
    \    for str in lst\n        odd_counts = append(odd_counts, length(filter(x ->\
    \ x % 2 == 1, str)))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.0>",
  "    odd_counts = Vector{String}()\n    for i in lst\n        odd_counts = append(odd_counts,\
    \ count(i, \"0\"))\n    end\n    return odd_counts\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a string as input and returns the number of characters\
    \ in the string. \nFor example, odd_count(\"abracadabra\") should return 5.",
  "    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    return odd_digits\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    odd_count_str = \"\"\n    for i in lst\n        odd_count_str = odd_count_str\
    \ + odd_count(i)\n    end\n    return odd_count_str\nend", "    odd_digits = Vector{String}()\n\
    \    for s in lst\n        odd_digits = union(odd_digits, findall(x -> x mod 2\
    \ != 0, s))\n    end\n    odd_digits\nend\n</cell>\n<code language=julia-1.3>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.3>\nodd_count([\"3\"\
    ,'11111111'])\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ as input and returns the number of characters that are not digits. For example,\
    \ if the input string is \"123abc\", the function should return 3.", "    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dd\" \n    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dd\" \n    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dd\" \n    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dd\" \n    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dd\" \n    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dd\" \n    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dd\" \n    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dd\" \n    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dd\" \n    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dd\" \n    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dd\" \n    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dd\" \n    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dd\" \n    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dd\" \n    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dd\" \n    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dd\" \n    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dd\" \n    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dd\" \n    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dd\" \n    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dd\" \n    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dd\" \n    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dd\" \n    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dd\" \n    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dd\" \n    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dd\" \n    odd_count_str\
    \ = @sprintf \"the number of odd elements ", "    odd_count_str = @sprintf \"\
    the number of odd elements %dn the str%dng %d of the %dnput.\" \n    odd_count_str\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"3\",\"11111111\"])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as input and returns the number of characters\
    \ in the string. \nThe function should ignore all non-numeric characters. \nThe\
    \ function should ignore all spaces.", "    \n    odd_count_str = \"\"\n    odd_count_str\
    \ .= \" the number of odd elements \"\n    odd_count_str .= \" of the \"\n   \
    \ odd_count_str .= \" str\"\n    odd_count_str .= \" \" \n    odd_count_str .=\
    \ \" \" \n    odd_count_str .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str\
    \ .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str\
    \ .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str\
    \ .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str\
    \ .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str\
    \ .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str\
    \ .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str\
    \ .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str\
    \ .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str\
    \ .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str\
    \ .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str\
    \ .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str\
    \ .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str\
    \ .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str\
    \ .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str\
    \ .= \" ", "    odds = Vector{Int}()\n    for i in lst\n        odds = append(odds,\
    \ count(digits(i)))\n    end\n    return odds\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    ,'11111111'])\n</cell>\n<text>\nExercise\nWrite a function that takes a vector\
    \ of strings as an input and returns a vector of the number of odd characters\
    \ in each string.", "    odd_count_str = @sprintf \"the number of odd elements\
    \ %dn the str%dd\" \n    odd_count_str = replace(odd_count_str, 1, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 2, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 3, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 4, length(lst))\n    odd_count_str = replace(odd_count_str, 5, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 6, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 7, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 8, length(lst))\n    odd_count_str = replace(odd_count_str, 9, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 10, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 11, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 12, length(lst))\n    odd_count_str = replace(odd_count_str, 13, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 14, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 15, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 16, length(lst))\n    odd_count_str = replace(odd_count_str, 17, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 18, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 19, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 20, length(lst))\n    odd_count_str = replace(odd_count_str, 21, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 22, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 23, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 24, length(lst))\n    odd_count_str = replace(odd_count_str, 25, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 26, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 27, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 28, length(lst))\n    odd_count_str = replace(odd_count_str, 29, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 30, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 31, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 32, length(lst))\n    odd_count_str = replace(odd_count_str, 33, length(", " \
    \   odd_count_str = join(map(odd_count_str, lst))\n    odd_count_str = replace(odd_count_str,\
    \ \"n\", \"n-1\")\n    odd_count_str = replace(odd_count_str, \"n+\", \"n+1\"\
    )\n    odd_count_str = replace(odd_count_str, \"n-1\", \"n\")\n    odd_count_str\
    \ = replace(odd_count_str, \"n+1\", \"n\")\n    return split(odd_count_str)\n\
    end\n</cell>\n<code language=julia-1.0>", "    odd_counts = Vector{String}(undef,length(lst))\n\
    \    for (i,s) in enumerate(lst)\n        odd_counts[i] = length(filter(x -> x\
    \ % 2 != 0, s))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>",
  "    odd_digits = Vector{Int}()\n    for s in lst\n        odd_digits += findall(x\
    \ -> x % 2 != 0, s)\n    end\n    return [\"the number of odd elements \" <> join(map(str,\
    \ odd_digits)) <> \n        \" of the \" <> join(map(str, lst)) <> \" of the \"\
    \ <> join(map(str, lst)) <> \".\"]\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    ,'11111111'])\n</cell>\n<text>\nExercise: Write a function that takes a vector\
    \ of strings and returns a vector of strings where each string consists of only\
    \ digits.", "    odd_count_str = \"\"\n    for i in lst\n        odd_count_str\
    \ = odd_count_str + length(filter(x -> x % 2 != 0, i))\n    end\n    return odd_count_str\n\
    end\n</cell>\n<code language=julia-1.0>\nodd_count([\"1234567\"])\n</cell>\n<code\
    \ language=julia-1.0>\nodd_count([\"3\",'11111111'])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string as input and returns the number of characters\
    \ in the string that are digits. \nFor example, if the input string is \"1234567\"\
    , the output should be \"6\".", "    odd_counts = []\n    for str in lst\n   \
    \     odd_counts.append(length(filter(x -> x % 2 == 1, str)))\n    end\n    return\
    \ odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111'])\n</cell>\n\
    <text>\nExercise: Write a function that takes a vector of strings and returns\
    \ a vector of strings where each string consists of only digits.", "    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dd\" \n    odd_count_str\
    \ = replace(odd_count_str, 1, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 2, length(lst[1]))\n    odd_count_str = replace(odd_count_str, 3, length(lst[2]))\n\
    \    odd_count_str = replace(odd_count_str, 4, length(lst[3]))\n    odd_count_str\
    \ = replace(odd_count_str, 5, length(lst[4]))\n    odd_count_str = replace(odd_count_str,\
    \ 6, length(lst[5]))\n    odd_count_str = replace(odd_count_str, 7, length(lst[6]))\n\
    \    odd_count_str = replace(odd_count_str, 8, length(lst[7]))\n    odd_count_str\
    \ = replace(odd_count_str, 9, length(lst[8]))\n    odd_count_str = replace(odd_count_str,\
    \ 10, length(lst[9]))\n    odd_count_str = replace(odd_count_str, 11, length(lst[10]))\n\
    \    odd_count_str = replace(odd_count_str, 12, length(lst[11]))\n    odd_count_str\
    \ = replace(odd_count_str, 13, length(lst[12]))\n    odd_count_str = replace(odd_count_str,\
    \ 14, length(lst[13]))\n    odd_count_str = replace(odd_count_str, 15, length(lst[14]))\n\
    \    odd_count_str = replace(odd_count_str, 16, length(lst[15]))\n    odd_count_str\
    \ = replace(odd_count_str, 17, length(lst[16]))\n    odd_count_str = replace(odd_count_str,\
    \ 18, length(lst[17]))\n    odd_count_str = replace(odd_count_str, 19, length(lst[18]))\n\
    \    odd_count_str = replace(odd_count_str, 20, length(lst[19]))\n    odd_count_str\
    \ = replace(odd_count_str, 21, length(lst[20]))\n    odd_count_str = replace(odd_count_str,\
    \ 22, length(lst[21]))\n    odd_count_str = replace(odd_count_str, 23, length(lst[22]))\n\
    \    odd_count_str = replace(odd_count_str, 24, length(lst[23]))\n    odd_count_str\
    \ = replace(odd_count_str, 25, length(lst[24]))\n    odd_count_str = replace(odd_count_str,\
    \ 26, length(lst[25]))\n    odd_count_str = replace(odd_count_str, 27, length(lst[26]))\n\
    \    odd_count_str = replace(odd_count_str, 28, length(lst[27]))\n    odd_count_str\
    \ = replace(odd_count_str, 29, length(lst[28]))\n    odd_count_str = replace(odd_count_str,\
    \ 30, length(lst[29", "    odd_counts = Vector{String}(undef, length(lst))\n \
    \   for str in lst\n        odd_counts[findall(str) .== 1] .+= 1\n    end\n  \
    \  return odd_counts\nend\n</cell>\n<code language=julia-1.0>", "    odd_digits\
    \ = Vector{Int}()\n    for s in lst\n        odd_digits += findall(x -> x % 2\
    \ != 0, s)\n    end\n    return [\"the number of odd elements $n the str$n of\
    \ the $nput.\" for n in odd_digits]\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    ,'11111111'])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a list\
    \ of strings and returns a list of strings where each string consists of only\
    \ digits.", "    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = odd_count_str + length(findall(str, \"1\")) + \" \"\n    end\n    odd_count_str\
    \ = odd_count_str[1:end]\n    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    ,'11111111'])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ as input and returns the number of characters in the string that are digits.",
  "    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += findall(i\
    \ .== \"1\", i)\n    end\n    return [\"the number of odd elements $n the str$n\
    \ of the $nput.\" for n in odd_digits]\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    ,'11111111'])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ as input and returns the number of characters in the string that are digits.",
  "    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    odd_digits\nend\n</cell>\n<text>\nExercise: Write a function that\
    \ takes a string as input and returns the number of characters in the string.\
    \ For example, the string \"hello\" has 5 characters. The string \"hello\" has\
    \ 5 characters. The string \"hello\" has 5 characters. The string \"hello\" has\
    \ 5 characters. The string \"hello\" has 5 characters.", "    odd_counts = Vector{String}(undef,\
    \ length(lst))\n    for (i,s) in enumerate(lst)\n        odd_counts[i] = length(findall(x\
    \ -> x % 2 == 1, s))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    ,'11111111'])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ as input and returns the number of characters in the string that are digits.\
    \ \nFor example, if the input is \"1234567\", the function should return 5.",
  "    \n    odd_count_str = \"\"\n    for i in lst\n        odd_count_str = odd_count_str\
    \ + length(filter(x -> x % 2 == 1, i))\n    end\n    return odd_count_str\nend\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\",'11111111'])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string as input and returns the number of characters in that string\
    \ that are digits.", "    odd_count_str = @sprintf \"the number of odd elements\
    \ %dn the str%dng %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str,\
    \ 1, length(lst))\n    odd_count_str = replace(odd_count_str, 2, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 3, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 4, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 5, length(lst))\n    odd_count_str = replace(odd_count_str, 6, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 7, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 8, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 9, length(lst))\n    odd_count_str = replace(odd_count_str, 10, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 11, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 12, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 13, length(lst))\n    odd_count_str = replace(odd_count_str, 14, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 15, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 16, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 17, length(lst))\n    odd_count_str = replace(odd_count_str, 18, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 19, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 20, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 21, length(lst))\n    odd_count_str = replace(odd_count_str, 22, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 23, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 24, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 25, length(lst))\n    odd_count_str = replace(odd_count_str, 26, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 27, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 28, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 29, length(lst))\n    odd_count_str = replace(odd_count_str, 30, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 31, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 32, length(lst))\n    odd_count_str = ", "    \n  \
    \  odd_count_str = \"\"\n    for str in lst\n        odd_count_str = odd_count_str\
    \ + length(findall(str, \"1\")) + \" \"\n    end\n    odd_count_str = odd_count_str[1:end-1]\n\
    \    return odd_count_str\nend", "    odds = Vector{Int}()\n    for i in lst\n\
    \        odds = odds + count(i)\n    end\n    return odds\nend", "    \n    odd_count_str\
    \ = \"\"\n    for str in lst\n        odd_count_str = odd_count_str + odd_count(str)\n\
    \    end\n    \n    return odd_count_str\nend", "    odd_digits = Vector{Int}()\n\
    \    for i in lst\n        odd_digits += count(digits(i))\n    end\n    return\
    \ map(str, odd_digits)\nend", "    odd_counts = Vector{String}(undef, length(lst))\n\
    \    for str in lst\n        odd_counts[str] =  length(findall(str -> str == \"\
    1\", str))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    ,'11111111'])\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns the number of odd characters in the string.", "    \n    odd_count_str\
    \ = \"\"\n    for str in lst\n        odd_count_str = odd_count_str + odd_count(str)\n\
    \    end\n    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    ,'11111111'])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111','11111111'])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111','11111111','11111111'])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111','11111111','11111111','11111111'])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111','11111111','11111111','11111111','11111111'])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111','11111111','11111111','11111111','11111111','11111111'])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111','11111111','11111111','11111111','11111111','11111111','11111111'])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111'])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111'])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111'])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111'])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111'])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111'])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111','",
  "    odd_counts = Vector{String}(undef, length(lst))\n    for (i,s) in enumerate(lst)\n\
    \        odd_counts[i] = length(findall(x -> x % 2 == 1, s))\n    end\n    return\
    \ odd_counts\nend\n</cell>\n<code language=julia-1.3>", "    odd_count_str = @sprintf\
    \ \"the number of odd elements %dn the str%dng %d of the %dnput.\" \n    odd_count_str\n\
    end", "    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = odd_count_str + str\n    end\n    odd_count_str = odd_count_str[1:end-1]\n\
    \    odd_count_str = replace(odd_count_str, \"n\", \"1\")\n    odd_count_str =\
    \ replace(odd_count_str, \"m\", \"8\")\n    odd_count_str = replace(odd_count_str,\
    \ \"o\", \"4\")\n    odd_count_str = replace(odd_count_str, \"p\", \"2\")\n  \
    \  odd_count_str = replace(odd_count_str, \"q\", \"10\")\n    odd_count_str =\
    \ replace(odd_count_str, \"s\", \"6\")\n    odd_count_str = replace(odd_count_str,\
    \ \"t\", \"3\")\n    odd_count_str = replace(odd_count_str, \"u\", \"9\")\n  \
    \  odd_count_str = replace(odd_count_str, \"v\", \"7\")\n    odd_count_str = replace(odd_count_str,\
    \ \"w\", \"5\")\n    odd_count_str = replace(odd_count_str, \"x\", \"1\")\n  \
    \  odd_count_str = replace(odd_count_str, \"y\", \"9\")\n    odd_count_str = replace(odd_count_str,\
    \ \"z\", \"7\")\n    odd_count_str = replace(odd_count_str, \"0\", \"0\")\n  \
    \  odd_count_str = replace(odd_count_str, \"1\", \"1\")\n    odd_count_str = replace(odd_count_str,\
    \ \"2\", \"2\")\n    odd_count_str = replace(odd_count_str, \"3\", \"3\")\n  \
    \  odd_count_str = replace(odd_count_str, \"4\", \"4\")\n    odd_count_str = replace(odd_count_str,\
    \ \"5\", \"5\")\n    odd_count_str = replace(odd_count_str, \"6\", \"6\")\n  \
    \  odd_count_str = replace(odd_count_str, \"7\", \"7\")\n    odd_count_str = replace(odd_count_str,\
    \ \"8\", \"8\")\n    odd_count_str = replace(odd_count_str, \"9\", \"9\")\n  \
    \  odd_count_str = replace(odd_count_str, \"a\", \"a\")\n    odd_count_str = replace(odd_count_str,\
    \ \"b\", \"b\")\n    odd_count_str = replace(odd_count_str, \"c\", \"c\")\n  \
    \  odd_count_str = replace(odd_count_str, \"d\", \"d\")\n    odd_count_str = replace(odd_count_str,\
    \ \"e\", \"e\")\n    odd_count_str = replace(odd_count_str, \"f\", \"f\")\n  \
    \  odd_count_str = replace(odd_count_str, \"g\", \"g\")\n    odd_count_str = replace(odd_count_str,\
    \ \"h\", \"h\")\n    odd_count_", "    odd_counts = Vector{String}(undef,0)\n\
    \    for str in lst\n        odd_counts = push!(odd_counts,length(findall(str,\"\
    \\d\")))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    ,'11111111'])\n</cell>\n<text>\nExercise: Write a function that takes a vector\
    \ of strings and returns a vector where each element is the length of the longest\
    \ string in the input vector. For example, if the input vector is [\"1234567\"\
    , \"311111111\"], then the output vector should be [\"7\", \"11\"].", "    odd_digits\
    \ = Vector{Int}()\n    for str in lst\n        odd_digits += findall(x -> x %\
    \ 2 == 1, str)\n    end\n    return map(x -> \"the number of odd elements \" <>\
    \ x <> \" of the \" <> x <> \" of the input.\", odd_digits)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\",'11111111'])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string as input and returns a string where each character is replaced\
    \ by the number of times it appears in the string.", "    odd_count_str = @sprintf\
    \ \"the number of odd elements %dn the str%dng %d of the %dnput.\" \n    odd_count_str\
    \ = replace(odd_count_str, lst)\n    return odd_count_str\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert odd_count([\"1234567\"]) == [\"the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.\"]\n@assert odd_count([\"3\",\"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n       \
    \                                  \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"]\n</cell>\n<text>\nExercise\nWrite a function that takes a\
    \ string as input and returns the number of characters in the string that are\
    \ odd.", "    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = odd_count_str + length(filter(x -> x % 2 != 0, str))\n    end\n    \n    return\
    \ [\"the number of odd elements \" <> odd_count_str <> \" of the \" <> string(lst[1])\
    \ <> \" of the \" <> string(lst[2]) <> \".\"]\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a string as input and returns a list of all the\
    \ characters in the string that are not digits.", "    odd_digits = Vector{Int}()\n\
    \    for i in lst\n        odd_digits += count(digits(i))\n    end\n    return\
    \ map(string, (odd_digits))\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111'])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string as input and\
    \ returns the number of characters in the string that are digits.", "    \n  \
    \  odd_count_str = \"\"\n    for str in lst\n        odd_count_str = odd_count_str\
    \ + length(findall(str, \"1\")) + length(findall(str, \"8\"))\n    end\n    \n\
    \    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111'])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string as input and\
    \ returns the number of characters in the string that are '1'.", "    \n    odds\
    \ = Vector{Int}()\n    for i in lst\n        odds = odds + count(i)\n    end\n\
    \    return odds\nend\n</cell>\n<code language=julia-1.0>\nodd_count([\"1234567\"\
    ])\n</cell>\n<code language=julia-1.0>\nodd_count([\"3\",'11111111'])\n</cell>\n\
    <text>\nExercise: Write a function that takes a string as input and returns a\
    \ string with all the odd characters in it capitalized.", "    odd_count_str =\
    \ \"\"\n    for str in lst\n        odd_count_str = odd_count_str + length(findall(str,\
    \ \"1\")) + \" \"\n    end\n    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>",
  "    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\
    \"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    ", "    \n    odd_count_str = \"\"\
    \n    for str in lst\n        odd_count_str = odd_count_str + odd_count(str)\n\
    \    end\n    return odd_count_str\nend", "    \n    odd_count_str = \"\"\n  \
    \  for str in lst\n        odd_count_str = odd_count_str + odd_count(str)\n  \
    \  end\n    return odd_count_str\nend", "    odd_digits = Vector{Int}()\n    for\
    \ i in lst\n        odd_digits += findall(i .== \"1\", i)\n    end\n    return\
    \ [\"the number of odd elements $n the str$n of the $nput.\" for n in odd_digits]\n\
    end\n</cell>\n<code language=julia-1.0>\nodd_count([\"1234567\"])\n</cell>\n<code\
    \ language=julia-1.0>\nodd_count([\"3\",'11111111'])\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string and returns the number of odd characters\
    \ in the string.", "    \n    odd_counts = Vector{String}(undef, 0)\n    for str\
    \ in lst\n        odd_counts = vcat(odd_counts, count_odd_digits(str))\n    end\n\
    \    return odd_counts\nend\n</cell>\n<code language=julia-1.5>", "    odd_counts\
    \ = Vector{String}(undef, 0)\n    for str in lst\n        odd_counts = append(odd_counts,\
    \ count(str))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>",
  "    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\" \n    odd_count_str = replace(odd_count_str, 1, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 2, length(lst)+1)\n    odd_count_str\
    \ = replace(odd_count_str, 3, length(lst)+2)\n    odd_count_str = replace(odd_count_str,\
    \ 4, length(lst)+3)\n    odd_count_str = replace(odd_count_str, 5, length(lst)+4)\n\
    \    odd_count_str = replace(odd_count_str, 6, length(lst)+5)\n    odd_count_str\
    \ = replace(odd_count_str, 7, length(lst)+6)\n    odd_count_str = replace(odd_count_str,\
    \ 8, length(lst)+7)\n    odd_count_str = replace(odd_count_str, 9, length(lst)+8)\n\
    \    odd_count_str = replace(odd_count_str, 10, length(lst)+9)\n    odd_count_str\
    \ = replace(odd_count_str, 11, length(lst)+10)\n    odd_count_str = replace(odd_count_str,\
    \ 12, length(lst)+11)\n    odd_count_str = replace(odd_count_str, 13, length(lst)+12)\n\
    \    odd_count_str = replace(odd_count_str, 14, length(lst)+13)\n    odd_count_str\
    \ = replace(odd_count_str, 15, length(lst)+14)\n    odd_count_str = replace(odd_count_str,\
    \ 16, length(lst)+15)\n    odd_count_str = replace(odd_count_str, 17, length(lst)+16)\n\
    \    odd_count_str = replace(odd_count_str, 18, length(lst)+17)\n    odd_count_str\
    \ = replace(odd_count_str, 19, length(lst)+18)\n    odd_count_str = replace(odd_count_str,\
    \ 20, length(lst)+19)\n    odd_count_str = replace(odd_count_str, 21, length(lst)+20)\n\
    \    odd_count_str = replace(odd_count_str, 22, length(lst)+21)\n    odd_count_str\
    \ = replace(odd_count_str, 23, length(lst)+22)\n    odd_count_str = replace(odd_count_str,\
    \ 24, length(lst)+23)\n    odd_count_str = replace(odd_count_str, 25, length(lst)+24)\n\
    \    odd_count_str = replace(odd_count_str, 26, length(lst)+25)\n    odd_count_str\
    \ = replace(odd_count_str, 27, length(lst)+26)\n    odd_count_str = replace(odd_count_str,\
    \ 28, length(lst)+27)\n    odd_count_str = replace(odd_count_str, 29, length(lst)+28)\n\
    \    odd_count_str = replace(odd_count_str, 30, length(lst)+29)\n", "    odd_digits\
    \ = Vector{Int}()\n    for i in lst\n        odd_digits += findall(i .== \"1\"\
    , i)\n    end\n    return [\"the number of odd elements $n the str$n $ of the\
    \ $nput.\" for n in odd_digits]\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111'])\n\
    </cell>\n<text>\nExercise: Write a function that takes a string as input and returns\
    \ a string with all the odd digits replaced by \"n\".", "    odd_counts = Vector{String}()\n\
    \    for i in lst\n        odd_counts = append(odd_counts, length(filter(x ->\
    \ x % 2 == 1, i)))\n    end\n    return odd_counts\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string that are digits.", "    odd_count_str = \"\"\n    for i in lst\n\
    \        odd_count_str = odd_count_str + odd_count(i)\n    end\n    return odd_count_str\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"3\",'11111111'])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as input and returns a string where\
    \ each character is replaced by the number of occurrences of that character in\
    \ the input string.", "    odd_digits = findall(x -> x mod 2 != 0, lst)\n    odd_digits_count\
    \ = length(odd_digits)\n    odd_count_str = join(map(str, odd_digits_count), \"\
    \ \")\n    odd_count_str = replace(odd_count_str, \"n\", \"s\")\n    odd_count_str\
    \ = replace(odd_count_str, \"s\", \"n\")\n    return [\"the number of odd elements\
    \ \" + odd_count_str + \" of the \" + \n            join(map(str, lst), \" \"\
    ) + \" input.\"]\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111'])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ the number of characters in the string.", "    odd_counts = Vector{String}(undef,\
    \ 0)\n    for s in lst\n        odd_counts = push!(odd_counts, length(findall(s\
    \ == \"1\")))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\n\
    @test odd_count([\"1234567\"]) == [4, 8]\n@test odd_count([\"3\",  \"11111111\"\
    ]) == [1, 8]\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ as input and returns a string where each character is replaced by the number\
    \ of times it occurs in the input string.", "    odd_digits = Vector{Int}()\n\
    \    for str in lst\n        odd_digits += findall(x -> x % 2 != 0, str)\n   \
    \ end\n    return [\"the number of odd elements $n the str$n of the $nput.\" for\
    \ n in odd_digits]\nend\n</cell>\n<code language=julia-1.5>\n@assert odd_count([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n\
    @assert odd_count([\"3\",\"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\",\n                                         \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as input and returns a string where\
    \ each character is replaced by the number of times it appears in the input string.",
  "    odd_digits = Vector{Int}()\n    for str in lst\n        odd_digits += findall(x\
    \ -> x % 2 == 1, str)\n    end\n    return map(x -> \"the number of odd elements\
    \ $x of the $x string.\", odd_digits)\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    ,\"11111111\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ as input and returns the number of characters in the string that are digits.",
  "    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    return map(string, (odd_digits))\nend", "    odd_count_str = @sprintf\
    \ \"the number of odd elements %dn the str%dng %d of the %dnput.\" \n    odd_count_str\
    \ = replace(odd_count_str, lst)\n    return odd_count_str\nend\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\",'11111111'])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string as input and returns the number of odd characters in the string.",
  "    odd_count_str = @sprintf \"the number of odd elements %dn the str%dd\" \n \
    \   odd_count_str = replace(odd_count_str, 2, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 1, length(lst))\n    return odd_count_str\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a string and returns the number\
    \ of characters in the string.", "    odd_digits = Vector{Int}()\n    for i in\
    \ lst\n        odd_digits += count(digits(i))\n    end\n    return odd_digits\n\
    end\n</cell>\n<code language=julia-1.0>\nodd_count([\"1234567\"])\n</cell>\n<code\
    \ language=julia-1.0>\nodd_count([\"3\",'11111111'])\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string as input and returns a string with all\
    \ the characters in lower case. For example, \"hello\" should return \"hello\"\
    .", "    \n    odds = Vector{String}()\n    for i in lst\n        odds = odds\
    \ + count_odd_digits(i)\n    end\n    return odds\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str = odd_count_str\
    \ + odd_count(str)\n    end\n    return odd_count_str\nend\n</cell>\n<code language=julia-1.0>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.0>\nodd_count([\"3\"\
    ,'11111111'])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ as input and returns the number of characters in the string.", "    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    \ \n    odd_count_str = replace(odd_count_str, lst)\n    return odd_count_str\n\
    end\n</cell>\n<code language=julia-1.3>\nodd_count([\"1234567\"])\n</cell>\n<code\
    \ language=julia-1.3>\nodd_count([\"3\",'11111111'])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as input and returns the number of odd\
    \ characters in the string.", "    odd_digits = Vector{Int}()\n    for i in lst\n\
    \        odd_digits += count_digits(i)\n    end\n    return odd_digits\nend\n\
    </cell>\n<code language=julia-1.0>\nodd_count(['1234567'])\n</cell>\n<code language=julia-1.0>\n\
    odd_count(['3',\"11111111\"])\n</cell>\n<text>\nExercise: Write a function that\
    \ takes a string as input and returns a string with the number of odd characters\
    \ in the string.", "    odd_digits = Vector{Int}()\n    for i in lst\n       \
    \ odd_digits += count(digits(i))\n    end\n    return map(string(_), odd_digits)\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ a string where each character is replaced by the number of occurrences of the\
    \ character in the string.", "    odd_digits = Vector{Int}()\n    for i in lst\n\
    \        odd_digits += count_digits(i)\n    end\n    return odd_digits\nend\n\
    </cell>\n<code language=julia-1.5>", "    odd_digits = Vector{Int}()\n    for\
    \ i in lst\n        odd_digits += count(digits(i), 2)\n    end\n    return odd_digits\n\
    end\n</cell>\n<code language=julia-1.0>\nodd_count([\"1234567\"])\n</cell>\n<code\
    \ language=julia-1.0>\nodd_count([\"3\",'11111111'])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string that are digits.", "    odd_counts = Vector{String}(undef, length(lst))\n\
    \    for (i,s) in enumerate(lst)\n        odd_counts[i] = length(findall(s ==\
    \ \"1\", s))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>",
  "    odd_count_str = @sprintf \"the number of odd elements %dn the str%dd\" \n \
    \   odd_count_str = replace(odd_count_str, 1, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 2, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 3, length(lst))\n    odd_count_str = replace(odd_count_str, 4, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 5, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 6, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 7, length(lst))\n    odd_count_str = replace(odd_count_str, 8, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 9, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 10, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 11, length(lst))\n    odd_count_str = replace(odd_count_str, 12, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 13, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 14, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 15, length(lst))\n    odd_count_str = replace(odd_count_str, 16, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 17, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 18, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 19, length(lst))\n    odd_count_str = replace(odd_count_str, 20, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 21, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 22, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 23, length(lst))\n    odd_count_str = replace(odd_count_str, 24, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 25, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 26, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 27, length(lst))\n    odd_count_str = replace(odd_count_str, 28, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 29, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 30, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 31, length(lst))\n    odd_count_str = replace(odd_count_str, 32, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 33, length(", "    \n    odd_count_str\
    \ = Vector{String}()\n    for str in lst\n        odd_count_str .= str\n    end\n\
    \    return odd_count_str\nend", "    odd_digits = Vector{Int}()\n    for i in\
    \ lst\n        odd_digits += count(digits(i))\n    end\n    return map(string,\
    \ (odd_digits))\nend\n</cell>\n<code language=julia-1.5>\n@test odd_count([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n\
    @test odd_count([\"3\",\"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\",\n                                      \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string as input and returns the number of odd\
    \ characters in that string.", "    odd_count_str = \"\"\n    for str in lst\n\
    \        odd_count_str = odd_count_str + odd_count(str)\n    end\n    return odd_count_str\n\
    end", "    \n    odd_count_str = \"\"\n    for i in lst\n        odd_count_str\
    \ = odd_count_str + length(filter(x -> x == \"1\", i))\n    end\n    return [\"\
    the number of odd elements \" + odd_count_str + \" of the \" + string(lst[1])]\n\
    end\n</cell>\n<code language=julia-1.4>\nodd_count([\"1234567\"])\n</cell>\n<code\
    \ language=julia-1.4>\nodd_count([\"3\",'11111111'])\n</cell>\n<text>\nExercise\n\
    Write a function that takes a string as input and returns the number of characters\
    \ in the string that are odd.", "    odd_digits = Vector{Int}()\n    for i in\
    \ lst\n        odd_digits += count(digits(i))\n    end\n    return map(string,\
    \ (odd_digits))\nend", "    odd_counts = Vector{String}()\n    for i in lst\n\
    \        odd_counts[i] = length(filter(x -> x % 2 == 1, i))\n    end\n    return\
    \ odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111'])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of strings and returns\
    \ a vector where each element is the length of the longest string in the input\
    \ vector.", "    odd_count_str = @sprintf \"the number of odd elements %dn the\
    \ str%dd\" \n    odd_count_str\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111'])\n\
    </cell>\n<text>\nExercise: Write a function that takes a string and returns the\
    \ number of odd characters in that string. Test it on some examples:", "    odd_counts\
    \ = Vector{String}(undef,0)\n    for s in lst\n        odd_counts = push!(odd_counts,length(findall(x\
    \ -> x mod 2 != 0, s)))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"Given a list of strings, where each string consists of only digits, return\
    \ a list.\n    Each element i of the output should be \"the number of even elements\
    \ in the\n    string i of the input.\" where all the i's should be replaced by\
    \ the number\n    of even digits in the i'th string of the input.", "    odd_digits\
    \ = Vector{String}(undef, 0)\n    for str in lst\n        odd_digits += findall(x\
    \ -> x % 2 == 1, str)\n    end\n    return odd_digits\nend\n</cell>\n<code language=julia-1.0>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.0>\nodd_count([\"3\"\
    ,'11111111'])\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ as input and returns a string where each character is replaced by the number\
    \ of times it appears in the original string.", "    odd_digits = Vector{Int}()\n\
    \    for i in lst\n        odd_digits += count(digits(i))\n    end\n    return\
    \ map(string(\"the number of odd elements \", odd_digits), lst)\nend\n</cell>\n\
    <text>\nExercise\nWrite a function that takes a string and returns a string where\
    \ each character is replaced by the number of times it appears in the string.",
  "    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    return map(string, (odd_digits))\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as input and returns a string with all\
    \ the characters in lowercase and uppercase letters replaced by underscores.",
  "    \n    odds = Vector{Int}()\n    for i in lst\n        odds = odds + count(i)\n\
    \    end\n    return odds\nend\n</cell>\n<code language=julia-1.5>\n@assert odd_count([\"\
    1234567\"]) == [4, 8]\n@assert odd_count([\"3\", \"11111111\"]) == [1, 8]\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string as input and returns\
    \ a string where each character is replaced by the number of times that character\
    \ appears in the input string. For example, if the input string is \"abcabc\"\
    , the output should be \"3abc3\".", "    odd_count_str = @sprintf \"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str,\
    \ 4, length(lst))\n    odd_count_str = replace(odd_count_str, 1, length(lst[1]))\n\
    \    odd_count_str = replace(odd_count_str, 8, length(lst[2]))\n    odd_count_str\
    \ = replace(odd_count_str, 2, length(lst[3]))\n    odd_count_str = replace(odd_count_str,\
    \ 7, length(lst[4]))\n    odd_count_str = replace(odd_count_str, 3, length(lst[5]))\n\
    \    odd_count_str = replace(odd_count_str, 6, length(lst[6]))\n    odd_count_str\
    \ = replace(odd_count_str, 5, length(lst[7]))\n    odd_count_str = replace(odd_count_str,\
    \ 1, length(lst[8]))\n    odd_count_str = replace(odd_count_str, 9, length(lst[9]))\n\
    \    odd_count_str = replace(odd_count_str, 10, length(lst[10]))\n    odd_count_str\
    \ = replace(odd_count_str, 11, length(lst[11]))\n    odd_count_str = replace(odd_count_str,\
    \ 12, length(lst[12]))\n    odd_count_str = replace(odd_count_str, 13, length(lst[13]))\n\
    \    odd_count_str = replace(odd_count_str, 14, length(lst[14]))\n    odd_count_str\
    \ = replace(odd_count_str, 15, length(lst[15]))\n    odd_count_str = replace(odd_count_str,\
    \ 16, length(lst[16]))\n    odd_count_str = replace(odd_count_str, 17, length(lst[17]))\n\
    \    odd_count_str = replace(odd_count_str, 18, length(lst[18]))\n    odd_count_str\
    \ = replace(odd_count_str, 19, length(lst[19]))\n    odd_count_str = replace(odd_count_str,\
    \ 20, length(lst[20]))\n    odd_count_str = replace(odd_count_str, 21, length(lst[21]))\n\
    \    odd_count_str = replace(odd_count_str, 22, length(lst[22]))\n    odd_count_str\
    \ = replace(odd_count_str, 23, length(lst[23]))\n    odd_count_str = replace(odd_count_str,\
    \ 24, length(lst[24]))\n    odd_count_str = replace(odd_count_str, 25, length(lst[25]))\n\
    \    odd_count_str = replace(odd_count_str, 26, length(lst[26]))\n    odd_count_str\
    \ = replace(odd_count_str, 27, length(lst[27]))\n    odd_count_str = replace(odd_count_str,\
    \ 28, length(lst[28]))\n    odd_count_str = replace(odd_", "    odd_count_str\
    \ = join(map(odd_count_str, lst))\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \"\")\n    odd_count_str = replace(odd_count_str, \"\\n\", \"\")\n  \
    \  return split(odd_count_str)\nend", "    odd_digits = Vector{Int}()\n    for\
    \ i in lst\n        odd_digits += count(digits(i))\n    end\n    return [\"the\
    \ number of odd elements $odd_digits the str$length(odd_digits) of the $length(odd_digits)\
    \ input.\"]\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111'])\n</cell>\n<text>\n\
    Exercise: Write a function that takes a string and returns the number of characters\
    \ in the string that are odd.", "    odd_digits = findall(x -> x mod 2 != 0, lst)\n\
    \    odd_digits = map(x -> length(x), odd_digits)\n    return [\"the number of\
    \ odd elements \" + string(odd_digits[i]) + \" of the str\" + string(odd_digits[i])\
    \ + \" of the \" + string(lst[i]) + \".\" for i = 1:length(lst)]\nend\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\",'11111111'])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string as input and returns the number of characters in the string that\
    \ are digits.", "    odd_count_str = join(map(odd_count_str, lst))\n    odd_count_str\
    \ = replace(odd_count_str, \" \", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"\\n\", \"\")\n    odd_count_str = replace(odd_count_str, \"\\t\", \"\")\n\
    \    odd_count_str = replace(odd_count_str, \"\\r\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"\\\"\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"\\\\\", \"\")\n    odd_count_str = replace(odd_count_str, \" \", \"\")\n \
    \   odd_count_str = replace(odd_count_str, \"\\n\", \"\")\n    odd_count_str =\
    \ replace(odd_count_str, \"\\t\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"\\r\", \"\")\n    odd_count_str = replace(odd_count_str, \"\\\"\", \"\")\n\
    \    odd_count_str = replace(odd_count_str, \"\\\\\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \" \", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"\\n\", \"\")\n    odd_count_str = replace(odd_count_str, \"\\t\", \"\")\n\
    \    odd_count_str = replace(odd_count_str, \"\\r\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"\\\"\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"\\\\\", \"\")\n    odd_count_str = replace(odd_count_str, \" \", \"\")\n \
    \   odd_count_str = replace(odd_count_str, \"\\n\", \"\")\n    odd_count_str =\
    \ replace(odd_count_str, \"\\t\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"\\r\", \"\")\n    odd_count_str = replace(odd_count_str, \"\\\"\", \"\")\n\
    \    odd_count_str = replace(odd_count_str, \"\\\\\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \" \", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"\\n\", \"\")\n    odd_count_str = replace(odd_count_str, \"\\t\", \"\")\n\
    \    odd_count_str = replace(odd_count_str, \"\\r\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"\\\"\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"\\\\\", \"\")\n    odd_count_str = replace(odd_count_str, \" \", \"\")\n \
    \   odd_count_str = replace(odd_count_str, \"\\n\", \"\")\n    odd_count_str =\
    \ replace(odd_count_str, \"\\t\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"\\r\", \"\")\n    odd_count_str = replace(odd_count_str, \"\\\"\", \"\")\n\
    \    odd_count_str = replace(odd_", "    odd_digits = findall(x -> x mod 2 !=\
    \ 0, lst)\n    odd_digits_count = length(odd_digits)\n    odd_count_str = join([\"\
    the number of odd elements \", odd_digits_count, \"n the str\", odd_digits_count,\
    \ \".\"])\n    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    ,\"11111111\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of strings and returns a vector of strings where each string consists of only\
    \ digits.", "    odd_counts = Vector{String}(undef, 0)\n    for str in lst\n \
    \       odd_counts = append(odd_counts, sum(str =~ \"^[0-9]+$\"))\n    end\n \
    \   return odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111'])\n\
    </cell>\n<text>\nExercise: Write a function that takes a string as input and returns\
    \ a string with the number of even digits in it.", "    odd_counts = Vector{String}(undef,\
    \ 0)\n    for str in lst\n        odd_counts = append(odd_counts, count(str, digits))\n\
    \    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111'])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are digits.", "    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dd\" \n    odd_count_str\
    \ = replace(odd_count_str, 1, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 2, length(lst)-1)\n    odd_count_str = replace(odd_count_str, 3, length(lst)-2)\n\
    \    odd_count_str = replace(odd_count_str, 4, length(lst)-3)\n    odd_count_str\
    \ = replace(odd_count_str, 5, length(lst)-4)\n    odd_count_str = replace(odd_count_str,\
    \ 6, length(lst)-5)\n    odd_count_str = replace(odd_count_str, 7, length(lst)-6)\n\
    \    odd_count_str = replace(odd_count_str, 8, length(lst)-7)\n    odd_count_str\
    \ = replace(odd_count_str, 9, length(lst)-8)\n    odd_count_str = replace(odd_count_str,\
    \ 10, length(lst)-9)\n    odd_count_str = replace(odd_count_str, 11, length(lst)-10)\n\
    \    odd_count_str = replace(odd_count_str, 12, length(lst)-11)\n    odd_count_str\
    \ = replace(odd_count_str, 13, length(lst)-12)\n    odd_count_str = replace(odd_count_str,\
    \ 14, length(lst)-13)\n    odd_count_str = replace(odd_count_str, 15, length(lst)-14)\n\
    \    odd_count_str = replace(odd_count_str, 16, length(lst)-15)\n    odd_count_str\
    \ = replace(odd_count_str, 17, length(lst)-16)\n    odd_count_str = replace(odd_count_str,\
    \ 18, length(lst)-17)\n    odd_count_str = replace(odd_count_str, 19, length(lst)-18)\n\
    \    odd_count_str = replace(odd_count_str, 20, length(lst)-19)\n    odd_count_str\
    \ = replace(odd_count_str, 21, length(lst)-20)\n    odd_count_str = replace(odd_count_str,\
    \ 22, length(lst)-21)\n    odd_count_str = replace(odd_count_str, 23, length(lst)-22)\n\
    \    odd_count_str = replace(odd_count_str, 24, length(lst)-23)\n    odd_count_str\
    \ = replace(odd_count_str, 25, length(lst)-24)\n    odd_count_str = replace(odd_count_str,\
    \ 26, length(lst)-25)\n    odd_count_str = replace(odd_count_str, 27, length(lst)-26)\n\
    \    odd_count_str = replace(odd_count_str, 28, length(lst)-27)\n    odd_count_str\
    \ = replace(odd_count_str, 29, length(lst)-28", "    \n    odd_counts = Vector{String}(undef,length(lst))\n\
    \    for i in 1:length(lst)\n        odd_counts[i] = length(findall(x -> x ==\
    \ '1', lst[i]))\n    end\n    \n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>",
  "    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\" \n    odd_count_str = replace(odd_count_str, lst)\n    return\
    \ odd_count_str\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111'])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ the number of characters in the string. \nThe function should ignore any non-digit\
    \ characters.", "    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = odd_count_str + str\n    end\n    return odd_count_str\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    odds = Vector{String}()\n    for s in lst\n\
    \        odds = append(odds, count(digits(s)))\n    end\n    return odds\nend\n\
    </cell>\n<code language=julia-1.5>", "    odd_digits = Vector{Int}()\n    for\
    \ i in lst\n        odd_digits += count(i, '1')\n    end\n    return map(x ->\
    \ \"the number of odd elements $x of the $x input.\", odd_digits)\nend\n</cell>\n\
    <text>\nodd_count", "    odd_count_str = join(map(odd_count_str, lst))\n    odd_count_str\
    \ = replace(odd_count_str, \"n\", \"1\")\n    odd_count_str = replace(odd_count_str,\
    \ \"n\", \"8\")\n    odd_count_str = replace(odd_count_str, \"4\", \"8\")\n  \
    \  odd_count_str = replace(odd_count_str, \"1\", \"4\")\n    odd_count_str = replace(odd_count_str,\
    \ \"8\", \"1\")\n    odd_count_str = replace(odd_count_str, \"8\", \"4\")\n  \
    \  odd_count_str = replace(odd_count_str, \"4\", \"8\")\n    odd_count_str = replace(odd_count_str,\
    \ \"1\", \"4\")\n    odd_count_str = replace(odd_count_str, \"4\", \"8\")\n  \
    \  odd_count_str = replace(odd_count_str, \"8\", \"1\")\n    odd_count_str = replace(odd_count_str,\
    \ \"8\", \"4\")\n    odd_count_str = replace(odd_count_str, \"1\", \"4\")\n  \
    \  odd_count_str = replace(odd_count_str, \"4\", \"8\")\n    odd_count_str = replace(odd_count_str,\
    \ \"8\", \"1\")\n    odd_count_str = replace(odd_count_str, \"8\", \"4\")\n  \
    \  odd_count_str = replace(odd_count_str, \"1\", \"4\")\n    odd_count_str = replace(odd_count_str,\
    \ \"4\", \"8\")\n    odd_count_str = replace(odd_count_str, \"8\", \"1\")\n  \
    \  odd_count_str = replace(odd_count_str, \"8\", \"4\")\n    odd_count_str = replace(odd_count_str,\
    \ \"1\", \"4\")\n    odd_count_str = replace(odd_count_str, \"4\", \"8\")\n  \
    \  odd_count_str = replace(odd_count_str, \"8\", \"1\")\n    odd_count_str = replace(odd_count_str,\
    \ \"8\", \"4\")\n    odd_count_str = replace(odd_count_str, \"1\", \"4\")\n  \
    \  odd_count_str = replace(odd_count_str, \"4\", \"8\")\n    odd_count_str = replace(odd_count_str,\
    \ \"8\", \"1\")\n    odd_count_str = replace(odd_count_str, \"8\", \"4\")\n  \
    \  odd_count_str = replace(odd_count_str, \"1\", \"4\")\n    odd_count_str = replace(odd_count_str,\
    \ \"4\", \"8\")\n    odd_count_str = replace(odd_count_str, \"8\", \"1\")\n  \
    \  odd_count_str = replace(odd_count_str, \"8\", \"4\")\n    odd_count_str = replace(odd_count_str,\
    \ \"1\", \"4\")\n    odd_count_str = replace(odd_count_str, \"4\", \"8\")\n  \
    \  ", "    \n    odd_count_str = \"\"\n    \n    for str in lst\n        odd_count_str\
    \ = strcat(odd_count_str, strcat(count_odd_digits(str), \" \"))\n    end\n   \
    \ \n    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>", "    odd_counts\
    \ = Vector{String}(undef, length(lst))\n    for (i,s) in enumerate(lst)\n    \
    \    odd_counts[i] = length(findall(s == \"1\", s))\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    odd_count_str = \"\"\n  \
    \  for str in lst\n        odd_count_str = odd_count_str + length(filter(x ->\
    \ x % 2 == 1, str))\n    end\n    odd_count_str = odd_count_str + \" \"\n    return\
    \ odd_count_str\nend\n</cell>\n<code language=julia-1.5>\n@test odd_count([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n\
    @test odd_count([\"3\",\"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\",\n                                     \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of odd characters\
    \ in the string.", "    odd_count_helper(lst)\nend", "    \n    odd_count_str\
    \ = \"\"\n    for str in lst\n        odd_count_str = odd_count_str + odd_count(str)\n\
    \    end\n    odd_count_str = odd_count_str[1:end]\n    return odd_count_str\n\
    end", "    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits +=\
    \ count(digits(i))\n    end\n    return map(string(_), odd_digits)\nend\n</cell>\n\
    <code language=julia-1.0>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.0>\n\
    odd_count([\"3\",'11111111'])\n</cell>\n<text>\nExercise\nWrite a function that\
    \ takes a string and returns the number of characters in that string that are\
    \ digits.", "    odd_digits = Vector{String}()\n    for i in lst\n        odd_digits\
    \ = odd_digits + count_odd_digits(i)\n    end\n    return odd_digits\nend", " \
    \   odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count_digits(i)\n\
    \    end\n    return [\"the number of odd elements $odd_digits the str$length(odd_digits)\
    \ of the $length(odd_digits)nput.\"]\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    ,'11111111'])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns a string where all the characters are capitalized.", "    odds =\
    \ Vector{Int}()\n    for str in lst\n        odds = odds + count_odd_digits(str)\n\
    \    end\n    return odds\nend\n</cell>\n<code language=julia-1.5>", "    odd_digits\
    \ = Vector{Int}()\n    for i in lst\n        odd_digits += findall(i .== digits(i),\
    \ all(i))\n    end\n    return [\"the number of odd elements $n the str$n $ of\
    \ the $nput.\" for n in odd_digits]\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    ,'11111111'])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ as input and returns a string with the number of odd characters in each word\
    \ of the string.", "    odd_digits = findall(x -> x % 2 == 1, lst)\n    odd_counts\
    \ = count(odd_digits)\n    return map(x -> \"the number of odd elements \" + x\
    \ + \" of the str\" + x + \"nput.\",\n               odd_counts)\nend\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\",'11111111'])\n</cell>\n<text>\nExercise: Write a function that\
    \ takes a string as input and returns the number of characters in the string that\
    \ are odd.", "    \n    odd_counts = Vector{String}()\n    for i in lst\n    \
    \    odd_counts = append(odd_counts, length(filter(x -> x % 2 == 1, i)))\n   \
    \ end\n    return odd_counts\nend\n</cell>\n<text>\nExercise\nWrite a function\
    \ that takes a string and returns a string where each character is replaced by\
    \ the number of times it appears in the string.", "    odd_count_helper(lst)\n\
    end", "    odd_count_str = \"\"\n    for str in lst\n        odd_count_str = strcat(odd_count_str,\
    \ str, \"the number of odd elements \")\n    end\n    odd_count_str = strcat(odd_count_str,\
    \ \"n the str\")\n    odd_count_str = strcat(odd_count_str, length(lst), \"th\
    \ \")\n    odd_count_str = strcat(odd_count_str, string(length(lst)))\n    odd_count_str\
    \ = strcat(odd_count_str, \"of the \")\n    odd_count_str = strcat(odd_count_str,\
    \ string(length(lst)))\n    odd_count_str = strcat(odd_count_str, \"nput.\")\n\
    \    return odd_count_str\nend\n</cell>\n<code language=julia-1.0>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.0>\nodd_count([\"3\",\"11111111\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the number of characters in the string. \nFor example, if the input\
    \ is \"hello\", the function should return 5.", "    odd_digits = Vector{Int}()\n\
    \    for i in lst\n        odd_digits += count(digits(i))\n    end\n    return\
    \ map(string, (odd_digits))\nend", "    odds = Vector{Int}()\n    for i in lst\n\
    \        odds = odds + countOddDigits(i)\n    end\n    return odds\nend\n</cell>\n\
    <text>\nProblem 3\nWrite a function that takes a string and returns a string where\
    \ all the digits have been reversed.", "    \n    odd_count_str = \"\"\n    for\
    \ i in lst\n        odd_count_str = odd_count_str + odd_count(i)\n    end\n  \
    \  return odd_count_str\nend\n</cell>\n<code language=julia-1.5>", "    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    \ \n    odd_count_str = replace(odd_count_str, 1, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 2, length(lst[1]))\n    odd_count_str = replace(odd_count_str,\
    \ 3, length(lst[2]))\n    odd_count_str = replace(odd_count_str, 4, length(lst[3]))\n\
    \    odd_count_str = replace(odd_count_str, 5, length(lst[4]))\n    odd_count_str\
    \ = replace(odd_count_str, 6, length(lst[5]))\n    odd_count_str = replace(odd_count_str,\
    \ 7, length(lst[6]))\n    odd_count_str = replace(odd_count_str, 8, length(lst[7]))\n\
    \    odd_count_str = replace(odd_count_str, 9, length(lst[8]))\n    odd_count_str\
    \ = replace(odd_count_str, 10, length(lst[9]))\n    odd_count_str = replace(odd_count_str,\
    \ 11, length(lst[10]))\n    odd_count_str = replace(odd_count_str, 12, length(lst[11]))\n\
    \    odd_count_str = replace(odd_count_str, 13, length(lst[12]))\n    odd_count_str\
    \ = replace(odd_count_str, 14, length(lst[13]))\n    odd_count_str = replace(odd_count_str,\
    \ 15, length(lst[14]))\n    odd_count_str = replace(odd_count_str, 16, length(lst[15]))\n\
    \    odd_count_str = replace(odd_count_str, 17, length(lst[16]))\n    odd_count_str\
    \ = replace(odd_count_str, 18, length(lst[17]))\n    odd_count_str = replace(odd_count_str,\
    \ 19, length(lst[18]))\n    odd_count_str = replace(odd_count_str, 20, length(lst[19]))\n\
    \    odd_count_str = replace(odd_count_str, 21, length(lst[20]))\n    odd_count_str\
    \ = replace(odd_count_str, 22, length(lst[21]))\n    odd_count_str = replace(odd_count_str,\
    \ 23, length(lst[22]))\n    odd_count_str = replace(odd_count_str, 24, length(lst[23]))\n\
    \    odd_count_str = replace(odd_count_str, 25, length(lst[24]))\n    odd_count_str\
    \ = replace(odd_count_str, 26, length(lst[25]))\n    odd_count_str = replace(odd_count_str,\
    \ 27, length(lst[26]))\n    odd_count_str = replace(odd_count_str, 28, length(lst[27]))\n\
    \    odd_count_str = replace(odd_count_str, 29, length(lst[28]))\n    odd_count_str\
    \ = replace(odd_", "    odd_count_str = @sprintf \"the number of odd elements\
    \ %dn the str%dng %d of the %dnput.\" \n    odd_count_str = [odd_count_str % [odd_count(i)\
    \ for i in lst]]\n    return odd_count_str\nend", "    \n    odd_count_str = \"\
    \"\n    for str in lst\n        odd_count_str = odd_count_str + length(filter(x\
    \ -> x % 2 != 0, str))\n    end\n    \n    return odd_count_str\nend\n</cell>\n\
    <code language=julia-1.5>", "    odd_counts = Vector{String}(undef, length(lst))\n\
    \    for i in 1:length(lst)\n        odd_counts[i] = sum(digits(lst[i])) %% 2\n\
    \    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.4>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.4>\nodd_count([\"3\",'11111111'])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string as input and\
    \ returns the number of characters in the string that are digits.", "    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    \ \n    odd_count_str = replace(odd_count_str, lst)\n    return odd_count_str\n\
    end\n</cell>\n<code language=julia-1.5>", "    odd_digits = Vector{Int}()\n  \
    \  for i in lst\n        odd_digits += count(digits(i))\n    end\n    return map(string,\
    \ (odd_digits))\nend\n</cell>\n<code language=julia-1.0>\nodd_count(['1234567'])\n\
    </cell>\n<code language=julia-1.0>\nodd_count(['3',\"11111111\"])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string that are digits.", "    odd_count_helper(lst)\n\
    end", "    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = strcat(odd_count_str, strcat(count(str, \"1\"), \" \"))\n    end\n    odd_count_str\
    \ = strcat(odd_count_str, count(odd_count_str, \"1\"))\n    odd_count_str = strcat(odd_count_str,\
    \ \" odd \")\n    odd_count_str = strcat(odd_count_str, count(odd_count_str, \"\
    1\"))\n    odd_count_str = strcat(odd_count_str, \" digits\")\n    odd_count_str\
    \ = strcat(odd_count_str, \" in the \")\n    odd_count_str = strcat(odd_count_str,\
    \ count(odd_count_str, \"1\"))\n    odd_count_str = strcat(odd_count_str, \" string.\"\
    )\n    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111'])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111',\"11111111\"])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111',\"11111111\",'11111111'])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111',\"11111111\",'11111111',\"\
    11111111\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111',\"\
    11111111\",'11111111',\"11111111\",'11111111'])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\",'11111111',\"11111111\",'11111111',\"11111111\",'11111111',\"\
    11111111\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111',\"\
    11111111\",'11111111',\"11111111\",'11111111',\"11111111\",'11111111'])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"3\",'11111111',\"11111111\",'11111111',\"\
    11111111\",'11111111',\"11111111\",'11111111',\"11111111\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\",'11111111',\"11111111\",'11111111',\"11111111\",'11111111',\"\
    11111111\",'11111111',\"11111111\",'11111111'])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\",'11111111',\"11111111\",'11111111',\"11111111\",'11111111',\"\
    11111111\",'11111111',\"11111111\",'11111111',\"11111111\"])\n</cell>\n", "  \
    \  \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str = odd_count_str\
    \ + length(findall(str, \"1\")) + \" \"\n    end\n    odd_count_str = odd_count_str[1:end-1]\n\
    \    return odd_count_str\nend", "    odd_counts = Vector{String}(undef,length(lst))\n\
    \    for (i,s) in enumerate(lst)\n        odd_counts[i] = length(findall(x ->\
    \ x=='1',s))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>",
  "    odd_counts = Vector{String}(undef, 0)\n    for str in lst\n        odd_counts\
    \ = append(odd_counts, count(str, digits))\n    end\n    return odd_counts\nend",
  "    \n    odd_digits = Vector{Int}()\n    for str in lst\n        odd_digits +=\
    \ findall(x -> x % 2 == 1, str)\n    end\n    odd_digits = collect(odd_digits)\n\
    \    return [\"the number of odd elements $n the str$n of the $nput.\" for n in\
    \ odd_digits]\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111'])\n</cell>\n\
    <text>\nExercise\nWrite a function that takes a string and returns the number\
    \ of odd characters in that string.", "    \n    odd_count_str = \"\"\n    for\
    \ i in lst\n        odd_count_str = odd_count_str + odd_count(i)\n    end\n  \
    \  return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111'])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string as input and\
    \ returns the number of characters in the string that are digits. \nFor example,\
    \ if the input string is \"1234567\", the function should return 5.", "    odd_digits\
    \ = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    return map(string(_), odd_digits)\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    ,'11111111'])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of strings and returns a vector of strings where each string is the product\
    \ of the odd digits in each string. For example, if the input vector is [\"1234567\"\
    , \"311111111\"], then the output vector should be [\"24\", \"8\"].", "    odd_counts\
    \ = Vector{String}(undef, 0)\n    for str in lst\n        odd_counts = append(odd_counts,\
    \ length(findall(str, \"1\")))\n    end\n    return odd_counts\nend\n</cell>\n\
    <code language=julia-1.0>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.0>\n\
    odd_count([\"3\",'11111111'])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of strings as an argument and returns a vector where each element\
    \ is the length of the longest string in the input vector.", "    odd_digits =\
    \ findall(x -> x mod 2 != 0, lst)\n    odd_count = map(x -> length(filter(x ->\
    \ x mod 2 != 0, x)), odd_digits)\n    return odd_count\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    ,'11111111'])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ as input and returns a string that contains the number of characters in each\
    \ string that are not digits. For example, the string \"1234567\" should return\
    \ \"4n\".", "    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits\
    \ += findall(i .== \"1\", i)\n    end\n    return [\"the number of odd elements\
    \ $i of the str$i of the input.\" for i in odd_digits]\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    ,'11111111'])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ as input and returns the number of characters in the string that are digits.",
  "    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += findall(i\
    \ .== digits, i)\n    end\n    return [\"the number of odd elements $odd_digits\
    \ the str$length(odd_digits) of the $length(odd_digits) input.\"]\nend\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\",'11111111'])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string as input and returns a string where each character is replaced\
    \ by the number of times that character appears in the input string. For example,\
    \ if the input string is \"abcabc\", the output should be \"3abc3abc\".", "  \
    \  \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str = odd_count_str\
    \ + length(filter(x -> x % 2 == 1, str))\n    end\n    \n    return odd_count_str\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert odd_count([\"1234567\"]) == \"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"\n@assert odd_count([\"\
    3\",\"11111111\"]) == \"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    \n@assert odd_count([\"3\",\"\",\"11111111\"]) == \"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\"\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string as input and returns the number of characters in the string\
    \ that are digits.", "    \n    odd_count_str = \"\"\n    for i in lst\n     \
    \   odd_count_str = odd_count_str + odd_count(i)\n    end\n    return odd_count_str\n\
    end", "    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str, lst)\n    return\
    \ odd_count_str\nend\n</cell>\n<code language=julia-1.5>\n@assert odd_count([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n\
    @assert odd_count([\"3\",\"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\",\n                                         \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of characters\
    \ in that string. \nFor example, \n\"The quick brown fox jumps over the lazy dog\"\
    \ should return \"13\".", "    \n    odd_count_str = \"\"\n    for str in lst\n\
    \        odd_count_str = odd_count_str + length(findall(str, \"1\")) + \" \"\n\
    \    end\n    odd_count_str = odd_count_str[1:end-1]\n    return odd_count_str\n\
    end", "    odd_counts = Vector{String}(undef, 0)\n    for str in lst\n       \
    \ odd_counts = append(odd_counts, length(findall(str -> str == \"1\", str)))\n\
    \    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>", " \
    \   odd_digits = Vector{Int}()\n    for s in lst\n        odd_digits += findall(x\
    \ -> x % 2 == 1, s)\n    end\n    return [\"the number of odd elements $n the\
    \ str$n of the $nput.\" for n in odd_digits]\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    ,'11111111'])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ as input and returns a string where each character is replaced by the number\
    \ of times it appears in the input string.", "    odd_digits = Vector{Int}()\n\
    \    for i in lst\n        odd_digits += count(digits(i))\n    end\n    return\
    \ map(str, odd_digits)\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111'])\n\
    </cell>\n<text>\nExercise: Write a function that takes a string and returns the\
    \ number of odd digits in that string.", "    odd_count_str = @sprintf \"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str,\
    \ 4, length(lst))\n    odd_count_str = replace(odd_count_str, 1, length(lst[1]))\n\
    \    odd_count_str = replace(odd_count_str, 8, length(lst[2]))\n    return odd_count_str\n\
    end", "    odds = Vector{String}()\n    for i in lst\n        odds = append(odds,\
    \ count(i, \"1\"))\n        odds = append(odds, count(i, \"8\"))\n    end\n  \
    \  return odds\nend", "    odd_count_str = @sprintf \"the number of odd elements\
    \ %dn the str%dd\" \n    odd_count_str = replace(odd_count_str, lst)\n    return\
    \ odd_count_str\nend", "    odd_count_helper(lst)\nend", "    \n    odd_count_str\
    \ = \"\"\n    for str in lst\n        odd_count_str = odd_count_str + length(filter(x\
    \ -> x == '1', str))\n    end\n    \n    return odd_count_str\nend\n</cell>\n\
    <code language=julia-1.5>\nodd_count(['1234567'])\n</cell>\n<code language=julia-1.5>\n\
    odd_count(['3',\"11111111\"])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string and returns the number of characters in the string that are digits.",
  "    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(i,\
    \ '1')\n    end\n    return [\"the number of odd elements $odd_digits the str$length(odd_digits)\
    \ of the $length(odd_digits)nput.\"]\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string as input and returns a string with the number\
    \ of characters in the string that are odd.", "    \n    odd_count_str = \"\"\n\
    \    for i in lst\n        odd_count_str = odd_count_str + length(filter(x ->\
    \ x % 2 == 1, i))\n    end\n    \n    return odd_count_str\nend\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\",'11111111'])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string as input and returns the number of characters in the string.\
    \ \nThe function should ignore all non-digit characters.", "    odd_digits = Vector{String}(undef,\
    \ 0)\n    for i in lst\n        odd_digits += count(digits(i), 2)\n    end\n \
    \   return odd_digits\nend\n</cell>\n<code language=julia-1.5>", "    odd_counts\
    \ = Vector{String}(undef, length(lst))\n    for (i,s) in enumerate(lst)\n    \
    \    odd_counts[i] = length(findall(x -> x % 2 == 1, s))\n    end\n    return\
    \ odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111'])\n</cell>\n\
    <text>\nExercise: Write a function that takes a string and returns the number\
    \ of characters in the string that are digits.", "    odd_digits = Vector{Int}()\n\
    \    for i in lst\n        odd_digits += count(digits(i), 2)\n    end\n    return\
    \ map(string(\"the number of odd elements \", odd_digits), lst)\nend\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\",'11111111'])\n</cell>\n<text>\nExercise: Write a function that\
    \ takes a string and returns the number of characters in the string that are digits.\
    \ Test it on some examples:", "    \n    odds = Vector{String}()\n    for i in\
    \ lst\n        odds = append(odds, count(i, \"odd\"))\n    end\n    return odds\n\
    end\n</cell>\n<code language=julia-1.5>", "    odds = Vector{Int}()\n    for i\
    \ in lst\n        odds = odds + count_digits(i)\n    end\n    return odds\nend\n\
    </cell>\n<code language=julia-1.5>", "    odd_digits = Vector{Int}()\n    for\
    \ i in lst\n        odd_digits += count(digits(i))\n    end\n    return [\"the\
    \ number of odd elements $odd_digits the str$length(odd_digits) of the $length(odd_digits)\
    \ input.\"]\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ as input and returns a string with all the characters in lowercase and uppercase\
    \ separated by underscores. For example, the string \"hello\" would return \"\
    hello_\".", "    \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits\
    \ += count(digits(i))\n    end\n    return odd_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    ,'11111111'])\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns the number of odd characters in the string. \nFor example, odd_count(\"\
    abracadabra\") should return [5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, ", "  \
    \  \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str = odd_count_str\
    \ + length(findall(str, \"1\")) + \" \"\n    end\n    odd_count_str = odd_count_str[1:end]\n\
    \    return odd_count_str\nend", "    odd_count_str = @sprintf \"the number of\
    \ odd elements %dn the str%dng %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str,\
    \ 1, length(lst))\n    odd_count_str = replace(odd_count_str, 2, length(lst[1]))\n\
    \    odd_count_str = replace(odd_count_str, 3, length(lst[2]))\n    odd_count_str\
    \ = replace(odd_count_str, 4, length(lst[3]))\n    odd_count_str = replace(odd_count_str,\
    \ 5, length(lst[4]))\n    odd_count_str = replace(odd_count_str, 6, length(lst[5]))\n\
    \    odd_count_str = replace(odd_count_str, 7, length(lst[6]))\n    odd_count_str\
    \ = replace(odd_count_str, 8, length(lst[7]))\n    odd_count_str = replace(odd_count_str,\
    \ 9, length(lst[8]))\n    odd_count_str = replace(odd_count_str, 10, length(lst[9]))\n\
    \    odd_count_str = replace(odd_count_str, 11, length(lst[10]))\n    odd_count_str\
    \ = replace(odd_count_str, 12, length(lst[11]))\n    odd_count_str = replace(odd_count_str,\
    \ 13, length(lst[12]))\n    odd_count_str = replace(odd_count_str, 14, length(lst[13]))\n\
    \    odd_count_str = replace(odd_count_str, 15, length(lst[14]))\n    odd_count_str\
    \ = replace(odd_count_str, 16, length(lst[15]))\n    odd_count_str = replace(odd_count_str,\
    \ 17, length(lst[16]))\n    odd_count_str = replace(odd_count_str, 18, length(lst[17]))\n\
    \    odd_count_str = replace(odd_count_str, 19, length(lst[18]))\n    odd_count_str\
    \ = replace(odd_count_str, 20, length(lst[19]))\n    odd_count_str = replace(odd_count_str,\
    \ 21, length(lst[20]))\n    odd_count_str = replace(odd_count_str, 22, length(lst[21]))\n\
    \    odd_count_str = replace(odd_count_str, 23, length(lst[22]))\n    odd_count_str\
    \ = replace(odd_count_str, 24, length(lst[23]))\n    odd_count_str = replace(odd_count_str,\
    \ 25, length(lst[24]))\n    odd_count_str = replace(odd_count_str, 26, length(lst[25]))\n\
    \    odd_count_str = replace(odd_count_str, 27, length(lst[26]))\n    odd_count_str\
    \ = replace(odd_count_str, 28, length(lst[27]))\n    odd_count_str = replace(odd_count_str,\
    \ 29, length(lst[28]))\n    odd_count_str = replace(odd_", "    \n    odd_count_str\
    \ = \"\"\n    \n    for i in lst\n        odd_count_str = odd_count_str + \n \
    \           length(filter(x -> x % 2 != 0, i))\n    end\n    \n    return odd_count_str\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"3\",'11111111'])\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a vector of strings as input and returns a vector\
    \ of the lengths of the odd characters in each string.", "    odd_counts = []\n\
    \    for str in lst\n        odd_counts.append(length(filter(x -> x % 2 != 0,\
    \ str)))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    ,'11111111'])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ as input and returns a string with all the odd characters in it separated by\
    \ commas. For example, if the input is \"hello\", the output should be \"h,l,l,o\"\
    .", "    \n    odd_counts = Vector{String}()\n    for i in lst\n        odd_counts\
    \ = append(odd_counts, length(i))\n    end\n    return odd_counts\nend\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\",'11111111'])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string as input and returns a string where each character is replaced\
    \ by the number of times that character appears in the string.", "    \n    odd_count_str\
    \ = \"\"\n    for str in lst\n        odd_count_str = odd_count_str + str\n  \
    \  end\n    odd_count_str = odd_count_str[1:end]\n    odd_count_str = odd_count_str[1:end]\n\
    \    odd_count_str = odd_count_str[1:end]\n    odd_count_str = odd_count_str[1:end]\n\
    \    odd_count_str = odd_count_str[1:end]\n    odd_count_str = odd_count_str[1:end]\n\
    \    odd_count_str = odd_count_str[1:end]\n    odd_count_str = odd_count_str[1:end]\n\
    \    odd_count_str = odd_count_str[1:end]\n    odd_count_str = odd_count_str[1:end]\n\
    \    odd_count_str = odd_count_str[1:end]\n    odd_count_str = odd_count_str[1:end]\n\
    \    odd_count_str = odd_count_str[1:end]\n    odd_count_str = odd_count_str[1:end]\n\
    \    odd_count_str = odd_count_str[1:end]\n    odd_count_str = odd_count_str[1:end]\n\
    \    odd_count_str = odd_count_str[1:end]\n    odd_count_str = odd_count_str[1:end]\n\
    \    odd_count_str = odd_count_str[1:end]\n    odd_count_str = odd_count_str[1:end]\n\
    \    odd_count_str = odd_count_str[1:end]\n    odd_count_str = odd_count_str[1:end]\n\
    \    odd_count_str = odd_count_str[1:end]\n    odd_count_str = odd_count_str[1:end]\n\
    \    odd_count_str = odd_count_str[1:end]\n    odd_count_str = odd_count_str[1:end]\n\
    \    odd_count_str = odd_count_str[1:end]\n    odd_count_str = odd_count_str[1:end]\n\
    \    odd_count_str = odd_count_str[1:end]\n    odd_count_str = odd_count_str[1:end]\n\
    \    odd_count_str = odd_count_str[1:end]\n    odd_count_str = odd_count_str[1:end]\n\
    \    odd_count_str = odd_count_str[1:end]\n    odd_count_str = odd_count_str[1:end]\n\
    \    odd_count_str = odd_count_str[1:end]\n    odd_count_str = odd_count_str[1:end]\n\
    \    odd_count_str = odd_count_str[1:end]\n    odd_count_str = odd_count_str[1:end]\n\
    \    odd_count_str = odd_count_str[1:end]\n    odd_count_str = odd_count_str[1:end]\n\
    \    odd_count_", "    \n    odd_count_str = \"\"\n    for i in lst\n        odd_count_str\
    \ = odd_count_str + length(findall(i, digits)) \n    end\n    \n    return odd_count_str\n\
    end\n</cell>\n<code language=julia-1.0>", "    odd_digits = findall(x -> x mod\
    \ 2 != 0, lst)\n    odd_count = length(odd_digits)\n    odd_count_str = join(odd_digits,\
    \ \" \")\n    odd_count_str = replace(odd_count_str, \"n\", odd_count)\n    return\
    \ odd_count_str\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the number of characters in the string that are digits.",
  "    \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\"\n    odd_count_str = replace(odd_count_str, n+1, length(lst.[i]))\n\
    \    odd_count_str = replace(odd_count_str, n, length(lst[i]))\n    odd_count_str\
    \ = replace(odd_count_str, n+1, length(lst[i]))\n    odd_count_str = replace(odd_count_str,\
    \ n, length(lst[i]))\n    odd_count_str = replace(odd_count_str, n+1, length(lst[i]))\n\
    \    odd_count_str = replace(odd_count_str, n, length(lst[i]))\n    odd_count_str\
    \ = replace(odd_count_str, n+1, length(lst[i]))\n    odd_count_str = replace(odd_count_str,\
    \ n, length(lst[i]))\n    odd_count_str = replace(odd_count_str, n+1, length(lst[i]))\n\
    \    odd_count_str = replace(odd_count_str, n, length(lst[i]))\n    odd_count_str\
    \ = replace(odd_count_str, n+1, length(lst[i]))\n    odd_count_str = replace(odd_count_str,\
    \ n, length(lst[i]))\n    odd_count_str = replace(odd_count_str, n+1, length(lst[i]))\n\
    \    odd_count_str = replace(odd_count_str, n, length(lst[i]))\n    odd_count_str\
    \ = replace(odd_count_str, n+1, length(lst[i]))\n    odd_count_str = replace(odd_count_str,\
    \ n, length(lst[i]))\n    odd_count_str = replace(odd_count_str, n+1, length(lst[i]))\n\
    \    odd_count_str = replace(odd_count_str, n, length(lst[i]))\n    odd_count_str\
    \ = replace(odd_count_str, n+1, length(lst[i]))\n    odd_count_str = replace(odd_count_str,\
    \ n, length(lst[i]))\n    odd_count_str = replace(odd_count_str, n+1, length(lst[i]))\n\
    \    odd_count_str = replace(odd_count_str, n, length(lst[i]))\n    odd_count_str\
    \ = replace(odd_count_str, n+1, length(lst[i]))\n    odd_count_str = replace(odd_count_str,\
    \ n, length(lst[i]))\n    odd_count_str = replace(odd_count_str, n+1, length(lst[i]))\n\
    \    odd_count_str = replace(odd_count_str, n, length(lst[i]))\n    odd_count_str\
    \ = replace(odd_count_str, n+1, length(lst[i]))\n    odd_count_str = replace(odd_count_str,\
    \ n, length(lst[i]))\n    odd_count_str = replace(odd_count_str, n+1, length(lst[i]))\n\
    \    odd_count_str = replace(odd_count_str, n, length(lst[i]))\n    odd_count_str\
    \ = replace(odd_count_str, n+1, length(lst[i]))\n    od", "    odd_counts = Vector{String}()\n\
    \    for str in lst\n        odd_counts = append(odd_counts, length(findall(str,\
    \ \"[0-9]\"))) \n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str = odd_count_str\
    \ + length(findall(str, \"1\")) + \" \"\n    end\n    return odd_count_str\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert odd_count([\"1234567\"]) == \"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"\n@assert odd_count([\"\
    3\",\"11111111\"]) == \"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    \ \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string that are digits.", "    odd_count_str = @sprintf\
    \ \"the number of odd elements %dn the str%dd\" \n    odd_count_str = [odd_count_str\
    \ % [length(lst[i])] \n        for i in eachindex(lst)]\n    return odd_count_str\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"3\",'11111111'])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as input and returns a string with all\
    \ the characters in lowercase and with all the characters in uppercase separated\
    \ by underscores. For example, the string \"hello\" would return \"hello_world\"\
    .", "    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    return map(str,odd_digits)\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string as input and returns the number of characters\
    \ in the string that are digits.", "    odd_digits = Vector{Int}()\n    for i\
    \ in lst\n        odd_digits += count(digits(i))\n    end\n    return map(string,\
    \ (odd_digits))\nend\n</cell>\n<code language=julia-1.5>", "    \n    odd_count_str\
    \ = \"\"\n    for str in lst\n        odd_count_str = odd_count_str + odd_count(str)\n\
    \    end\n    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    ,'11111111'])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111',\"\
    11111111\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111',\"\
    11111111\",'11111111'])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    ,'11111111',\"11111111\",'11111111',\"11111111\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\",'11111111',\"11111111\",'11111111',\"11111111\",'11111111'])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111',\"11111111\",'11111111',\"\
    11111111\",'11111111',\"11111111\",'11111111'])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\",'11111111',\"11111111\",'11111111',\"11111111\",'11111111',\"\
    11111111\",'11111111',\"11111111\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    3\",'11111111',\"11111111\",'11111111',\"11111111\",'11111111',\"11111111\",'11111111',\"\
    11111111\",'11111111'])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    ,'11111111',\"11111111\",'11111111',\"11111111\",'11111111',\"11111111\",'11111111',\"\
    11111111\",'11111111',\"11111111\",'11111111'])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\",'11111111',\"11111111\",'11111111',\"11111111\",'11111111',\"\
    11111111\",'11111111',\"11111111\",'11111111',\"11111111\",'11111111',\"11111111\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111',\"11111111\"\
    ,'11111111',\"11111111\",'11111111',\"11111111\",'11111111',\"11111111\",'11111111',\"\
    11111111\",'11111111',\"11111111\",'11111111',\"11111111\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\",'11111111',\"11111111\",'11111111',\"11111111\",'11111111',\"\
    11111111\",'11111111',\"11111111\",'11111111',\"11111111\",'11111111',\"11111111\"\
    ,", "    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    return [\"the number of odd elements $odd_digits the str$length(odd_digits)\
    \ of the $length(odd_digits)nput.\"]\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    ,'11111111'])\n</cell>\n<text>\nExercise\nWrite a function that takes a vector\
    \ of strings as input and returns a vector of strings as output.\nEach element\
    \ of the output should be \"the sum of the odd digits in the i'th string of the\
    \ input.\" where all the i's should be replaced by the sum of the odd digits in\
    \ the i'th string of the input.", "    odd_count_str = @sprintf \"the number of\
    \ odd elements %dn the str%dng %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str,\
    \ lst)\n    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>", " \
    \   odd_count_helper(lst)\nend", "    \n    odd_count_str = \"\"\n    for str\
    \ in lst\n        odd_count_str = odd_count_str + length(findall(str, \"1\"))\
    \ + \" \"\n    end\n    odd_count_str = odd_count_str[1:end-1]\n    odd_count_str\
    \ = replace(odd_count_str, \" \", \"\")\n    return odd_count_str\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    odd_count_str = \"\"\n    for str in lst\n\
    \        odd_count_str = odd_count_str + length(filter(x -> x % 2 != 0, str))\n\
    \    end\n    \n    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    ,'11111111'])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111','22222222'])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111','22222222','33333333'])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111','22222222','33333333','44444444'])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111','22222222','33333333','44444444','55555555'])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111','22222222','33333333','44444444','55555555','66666666'])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111','22222222','33333333','44444444','55555555','66666666','77777777'])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111','22222222','33333333','44444444','55555555','66666666','77777777','88888888'])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111','22222222','33333333','44444444','55555555','66666666','77777777','88888888','999999999'])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111','22222222','33333333','44444444','55555555','66666666','77777777','88888888','999999999','10000000000'])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111','22222222','33333333','44444444','55555555','66666666','77777777','88888888','999999999','10000000000','1111111111'])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111','22222222','33333333','44444444','55555555','66666666','77777777','88888888','999999999','10000000000','1111111111','2222222222'])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111','22222222','33333333','44444444','55555555','66666666','77777777','88888888",
  "    odds = filter(x -> x mod 2 != 0, lst)\n    odd_count = length(odds)\n    odd_count_str\
    \ = join([\"the number of odd elements \", odd_count, \"n the str\", odd_count,\
    \ \".\"])\n    return odd_count_str\nend\n</cell>\n<code language=julia-1.3>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.3>\nodd_count([\"3\"\
    ,\"11111111\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ as input and returns the number of characters in the string that are digits.",
  "    \n    odd_count_str = \"\"\n    for i in lst\n        odd_count_str = odd_count_str\
    \ + length(filter(x -> x % 2 == 1, i))\n    end\n    return odd_count_str\nend\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\",'11111111'])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string as input and returns a string where each character is replaced\
    \ by the number of times it appears in the input string.", "    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    \ \n    odd_count_str((length(lst.[1]) - length(lst.[2])), (length(lst.[1]) -\
    \ length(lst.[1])))\nend\n</cell>\n<code language=julia-1.0>\n@assert odd_count([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n\
    @assert odd_count([\"3\",\"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8\
    \ of the 8nput.\"]\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string as input and returns the number of characters in the string.", "    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    \ \n    odd_count_str = replace(odd_count_str, 4, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 1, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 8, length(lst))\n    odd_count_str = replace(odd_count_str, 7, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 6, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 5, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 3, length(lst))\n    odd_count_str = replace(odd_count_str, 2, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 1, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 0, length(lst))\n    return odd_count_str\nend\n</cell>\n\
    <code language=julia-1.5>\nodd_count(['1234567'])\n</cell>\n<code language=julia-1.5>\n\
    odd_count(['3',\"11111111\"])\n</cell>\n<code language=julia-1.5>\nodd_count(['3',\"\
    11111111\"])\n</cell>\n<code language=julia-1.5>\nodd_count(['3',\"11111111\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count(['3',\"11111111\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count(['3',\"11111111\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count(['3',\"11111111\"])\n</cell>\n<code language=julia-1.5>\nodd_count(['3',\"\
    11111111\"])\n</cell>\n<code language=julia-1.5>\nodd_count(['3',\"11111111\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count(['3',\"11111111\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count(['3',\"11111111\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count(['3',\"11111111\"])\n</cell>\n<code language=julia-1.5>\nodd_count(['3',\"\
    11111111\"])\n</cell>\n<code language=julia-1.5>\nodd_count(['3',\"11111111\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count(['3',\"11111111\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count(['3',\"11111111\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count(['3',\"11111111\"])\n</cell>\n<code language=", "    odd_digits = Vector{String}(undef,\
    \ 0)\n    for s in lst\n        odd_digits += findall(x -> x % 2 == 1, s)\n  \
    \  end\n    return odd_digits\nend\n</cell>\n<code language=julia-1.4>", "   \
    \ \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str = odd_count_str\
    \ + length(findall(str, \"1\")) + \" \"\n    end\n    return odd_count_str\nend\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\",'11111111'])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of strings and returns a vector where each element is the length\
    \ of the longest string in the input vector. For example, if the input vector\
    \ is [\"a\", \"b\", \"c\", \"d\"], then the output vector should be [4, 3, 7,\
    \ 4].", "    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits\
    \ += count(digits(i))\n    end\n    odd_digits = odd_digits[2:end]\n    return\
    \ [\"the number of odd elements $n the str$n of the $nput.\" for n in odd_digits]\n\
    end\n</cell>\n<code language=julia-1.0>\nodd_count([\"1234567\"])\n</cell>\n<code\
    \ language=julia-1.0>\nodd_count([\"3\",'11111111'])\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string as input and returns the number of odd\
    \ digits in the string. For example, if the input string is \"1234567\", the output\
    \ should be \"4\".", "    odd_count_str = \"\"\"the number of odd elements \"\"\
    \"\n    odd_count_str = odd_count_str * lst.size\n    odd_count_str = odd_count_str\
    \ * \"\"\"n the str\"\"\"\n    odd_count_str = odd_count_str * lst.size\n    odd_count_str\
    \ = odd_count_str * \"\"\"ng \"\"\"\n    odd_count_str = odd_count_str * lst.size\n\
    \    odd_count_str = odd_count_str * \"\"\"of the \"\"\"\n    odd_count_str =\
    \ odd_count_str * lst.size\n    odd_count_str = odd_count_str * \"\"\"nput.\"\"\
    \"\n    odd_count_str = odd_count_str * lst.size\n    odd_count_str = odd_count_str\
    \ * lst.size\n    odd_count_str = odd_count_str * lst.size\n    odd_count_str\
    \ = odd_count_str * lst.size\n    odd_count_str = odd_count_str * lst.size\n \
    \   odd_count_str = odd_count_str * lst.size\n    odd_count_str = odd_count_str\
    \ * lst.size\n    odd_count_str = odd_count_str * lst.size\n    odd_count_str\
    \ = odd_count_str * lst.size\n    odd_count_str = odd_count_str * lst.size\n \
    \   odd_count_str = odd_count_str * lst.size\n    odd_count_str = odd_count_str\
    \ * lst.size\n    odd_count_str = odd_count_str * lst.size\n    odd_count_str\
    \ = odd_count_str * lst.size\n    odd_count_str = odd_count_str * lst.size\n \
    \   odd_count_str = odd_count_str * lst.size\n    odd_count_str = odd_count_str\
    \ * lst.size\n    odd_count_str = odd_count_str * lst.size\n    odd_count_str\
    \ = odd_count_str * lst.size\n    odd_count_str = odd_count_str * lst.size\n \
    \   odd_count_str = odd_count_str * lst.size\n    odd_count_str = odd_count_str\
    \ * lst.size\n    odd_count_str = odd_count_str * lst.size\n    odd_count_str\
    \ = odd_count_str * lst.size\n    odd_count_str = odd_count_str * lst.size\n \
    \   odd_count_str = odd_count_str * lst.size\n    odd_count_str = odd_count_str\
    \ * lst.size\n    odd_count_str = odd_count_", "    odd_digits = Vector{Int}()\n\
    \    for i in lst\n        odd_digits += count(digits(i))\n    end\n    return\
    \ map(str,odd_digits)\nend", "    odd_count_str = \"\"\"\n    number of odd elements\
    \ in the str{n}\n    \"\"\"\n    odd_count_str = replace(odd_count_str, n::Int)\n\
    \    odd_count_str = replace(odd_count_str, str::String)\n    odd_count_str =\
    \ replace(odd_count_str, str::Char)\n    odd_count_str = replace(odd_count_str,\
    \ str::Int)\n    odd_count_str = replace(odd_count_str, str::Float64)\n    odd_count_str\
    \ = replace(odd_count_str, str::Float32)\n    odd_count_str = replace(odd_count_str,\
    \ str::Int64)\n    odd_count_str = replace(odd_count_str, str::Int32)\n    odd_count_str\
    \ = replace(odd_count_str, str::Int16)\n    odd_count_str = replace(odd_count_str,\
    \ str::Int8)\n    odd_count_str = replace(odd_count_str, str::Int)\n    odd_count_str\
    \ = replace(odd_count_str, str::Float64)\n    odd_count_str = replace(odd_count_str,\
    \ str::Float32)\n    odd_count_str = replace(odd_count_str, str::Int64)\n    odd_count_str\
    \ = replace(odd_count_str, str::Int32)\n    odd_count_str = replace(odd_count_str,\
    \ str::Int16)\n    odd_count_str = replace(odd_count_str, str::Int8)\n    odd_count_str\
    \ = replace(odd_count_str, str::Int)\n    odd_count_str = replace(odd_count_str,\
    \ str::Float64)\n    odd_count_str = replace(odd_count_str, str::Float32)\n  \
    \  odd_count_str = replace(odd_count_str, str::Int64)\n    odd_count_str = replace(odd_count_str,\
    \ str::Int32)\n    odd_count_str = replace(odd_count_str, str::Int16)\n    odd_count_str\
    \ = replace(odd_count_str, str::Int8)\n    odd_count_str = replace(odd_count_str,\
    \ str::Int)\n    odd_count_str = replace(odd_count_str, str::Float64)\n    odd_count_str\
    \ = replace(odd_count_str, str::Float32)\n    odd_count_str = replace(odd_count_str,\
    \ str::Int64)\n    odd_count_str = replace(odd_count_str, str::Int32)\n    odd_count_str\
    \ = replace(odd_count_str, str::Int16)\n    odd_count_str = replace(odd_count_str,\
    \ str::Int8)\n    odd_count_str = replace(odd_count_str, str::Int)\n    odd_count_str\
    \ = replace(odd_count_str, str::Float64)", "    odd_digits = Vector{Int}()\n \
    \   for i in lst\n        odd_digits += count(i, '1')\n    end\n    return [\"\
    the number of odd elements $odd_digits the str$length(odd_digits) of the $length(odd_digits)nput.\"\
    ]\nend\n</cell>\n<text>\nodd_count", "    \n    odd_count_str = \"\"\n    for\
    \ str in lst\n        odd_count_str = odd_count_str + length(filter(x -> x % 2\
    \ == 1, str))\n    end\n    odd_count_str = odd_count_str + length(filter(x ->\
    \ x % 2 != 1, lst))\n    odd_count_str = odd_count_str + length(filter(x -> x\
    \ % 2 != 1, odd_count_str))\n    odd_count_str = odd_count_str + length(filter(x\
    \ -> x % 2 != 1, odd_count_str))\n    odd_count_str = odd_count_str + length(filter(x\
    \ -> x % 2 != 1, odd_count_str))\n    odd_count_str = odd_count_str + length(filter(x\
    \ -> x % 2 != 1, odd_count_str))\n    odd_count_str = odd_count_str + length(filter(x\
    \ -> x % 2 != 1, odd_count_str))\n    odd_count_str = odd_count_str + length(filter(x\
    \ -> x % 2 != 1, odd_count_str))\n    odd_count_str = odd_count_str + length(filter(x\
    \ -> x % 2 != 1, odd_count_str))\n    odd_count_str = odd_count_str + length(filter(x\
    \ -> x % 2 != 1, odd_count_str))\n    odd_count_str = odd_count_str + length(filter(x\
    \ -> x % 2 != 1, odd_count_str))\n    odd_count_str = odd_count_str + length(filter(x\
    \ -> x % 2 != 1, odd_count_str))\n    odd_count_str = odd_count_str + length(filter(x\
    \ -> x % 2 != 1, odd_count_str))\n    odd_count_str = odd_count_str + length(filter(x\
    \ -> x % 2 != 1, odd_count_str))\n    odd_count_str = odd_count_str + length(filter(x\
    \ -> x % 2 != 1, odd_count_str))\n    odd_count_str = odd_count_str + length(filter(x\
    \ -> x % 2 != 1, odd_count_str))\n    odd_count_str = odd_count_str + length(filter(x\
    \ -> x % 2 != 1, odd_count_str))\n    odd_count_str = odd_count_str + length(filter(x\
    \ -> x % 2 != 1, odd_count_str))\n    odd_count_str = odd_count_str + length(filter(x\
    \ -> x % 2 != 1, odd_count_str))\n    odd_count_str = odd_count_str + length(filter(x\
    \ -> x % 2 != 1, odd_count_str))\n    odd_", "    odd_count_str = \"\"\n    for\
    \ i in lst\n        odd_count_str = odd_count_str + odd_count(i)\n    end\n  \
    \  return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111'])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of characters in the string. \nFor example, \n\"hello\" returns 5.",
  "    \n    odd_count_str = \"\"\n    \n    for i in lst\n        odd_count_str =\
    \ odd_count_str + length(filter(x -> x % 2 != 0, i))\n    end\n    \n    return\
    \ odd_count_str\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111'])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ the number of odd characters in the string.", "    odd_counts = Vector{String}(undef,\
    \ length(lst))\n    for i = 1:length(lst)\n        odd_counts[i] = length(findall(x\
    \ -> x % 2 == 1, lst[i]))\n    end\n    return odd_counts\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    odd_digits = Vector{Int}()\n    for i in lst\n  \
    \      odd_digits += count(digits(i))\n    end\n    return map(string(_), odd_digits)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert odd_count([\"1234567\"]) == [\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n@assert odd_count([\"\
    3\",  \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n                                            \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"]\n</cell>\n<text>\nExercise: Write a function that\
    \ takes a list of strings and returns a list of strings where each string consists\
    \ of only digits.", "    odd_digits = Vector{Int}()\n    for i in lst\n      \
    \  odd_digits += findall(i .== \"1\", i)\n    end\n    return [\"the number of\
    \ odd elements $n the str$n of the $nput.\" for n in odd_digits]\nend\n</cell>\n\
    <code language=julia-1.3>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.3>\n\
    odd_count([\"3\",'11111111'])\n</cell>\n<text>\nExercise: Write a function that\
    \ takes a string and returns the number of characters that are not digits. \n\
    For example, if the input string is \"1234567\", the function should return \"\
    4\".", "    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits +=\
    \ findall(i .== \"1\", i)\n    end\n    return [\"the number of odd elements $n\
    \ the str$n of the $nput.\" for n in odd_digits]\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    ,'11111111'])\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ as input and returns a string that contains the number of odd digits in each\
    \ of the strings in the input. For example, if the input is [\"1234567\", \"11111111\"\
    , \"22222222\"], then the output should be [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\", \"the number of odd elements 1n the str1ng 1 of the\
    \ 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"].", " \
    \   odd_count_str = \"\"\n    for str in lst\n        odd_count_str = odd_count_str\
    \ + str\n    end\n    return odd_count_str\nend\n</cell>\n<code language=julia-1.4>",
  "    odd_count_str = @sprintf \"the number of odd elements %dn the str%di of the\
    \ %di.\" \n    odd_count_str = replace(odd_count_str, 1, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 2, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 3, length(lst))\n    odd_count_str = replace(odd_count_str, 4, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 5, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 6, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 7, length(lst))\n    odd_count_str = replace(odd_count_str, 8, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 9, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 10, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 11, length(lst))\n    odd_count_str = replace(odd_count_str, 12, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 13, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 14, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 15, length(lst))\n    odd_count_str = replace(odd_count_str, 16, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 17, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 18, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 19, length(lst))\n    odd_count_str = replace(odd_count_str, 20, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 21, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 22, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 23, length(lst))\n    odd_count_str = replace(odd_count_str, 24, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 25, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 26, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 27, length(lst))\n    odd_count_str = replace(odd_count_str, 28, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 29, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 30, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 31, length(lst))\n    odd_count_str = replace(odd_count_str, 32, length(lst))\n\
    \    odd_count_str = replace(odd_", "    odd_counts = Vector{String}(undef, 0)\n\
    \    for str in lst\n        odd_counts = push!(odd_counts, length(findall(str\
    \ -> str == \"1\", str)))\n    end\n    return odd_counts\nend", "    odd_digits\
    \ = Vector{Int}()\n    for i in lst\n        odd_digits += findall(i .== \"1\"\
    , i)\n    end\n    return [\"the number of odd elements $n the str$n of the $nput.\"\
    \ for n in odd_digits]\nend\n</cell>\n<code language=julia-1.0>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.0>\nodd_count([\"3\",'11111111'])\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a vector of strings and\
    \ returns a vector of strings where each string consists of only digits.", " \
    \   odd_counts = []\n    for i in lst\n        odd_counts.append(sum(map(x ->\
    \ x % 2 == 1, i)))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    ,'11111111'])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of characters in the string.", "    \n    odd_count_str\
    \ = \"\"\n    for str in lst\n        odd_count_str = odd_count_str + \n     \
    \       length(filter(x -> x % 2 == 1, str))\n    end\n    return odd_count_str\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    odd_digits = Vector{Int}()\n\
    \    for i in lst\n        odd_digits += count(digits(i))\n    end\n    return\
    \ map(string, (odd_digits))\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111'])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string as input and\
    \ returns the number of characters in the string. \nFor example, if the input\
    \ is \"abc\", the function should return 3.", "    odd_digits = Vector{String}()\n\
    \    for i in lst\n        odd_digits = odd_digits + count(i, digits)\n    end\n\
    \    return odd_digits\nend\n</cell>\n<code language=julia-1.5>", "    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    "]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
